[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print(list(set(test_tup1) & set(test_tup2)))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [elem for elem in test_tup1 if elem in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1, list2 = test_tup1, test_tup2\n    list3, list4 = [], []\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    for i in list3:\n        if i in list1 and i in list2:\n            list4.append(i)\n    return list4\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [element for element in test_tup1 if element in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [item for item in test_tup1 if item in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print(\"\\nSimilar Elements\")\n    print(list(set(test_tup1).intersection(set(test_tup2))))\n    return\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        list_1 = list(test_tup1)\n        list_2 = list(test_tup2)\n        counter = 0\n        shared_list = []\n        while counter < len(list_1):\n            if list_1[counter] == list_2[counter]:\n                shared_list.append(list_1[counter])\n            counter += 1\n        return shared_list\n    else:\n        return False\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in test_tup1:\n        if i in test_tup2:\n            return i\n    return \"No similar element\"\nprint(similar_elements([1, 2, 3, 4], [4, 5, 1, 3]))\nprint(similar_elements([1, 2, 3, 4], [1, 2, 3, 4, 5]))\nprint(similar_elements([1, 2, 3, 4], [5, 6, 7]))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return True\n    elif n==2:\n        return False\n    elif n%2==0:\n        return True\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return \"Not prime\"\n    for x in range(2,int(math.sqrt(n))+1):\n        if n%x==0:\n            return \"Not prime\"\n    return \"Prime\"\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    sqr = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Initialize the list of prime numbers\n    prime_numbers = []\n    # We are only interested in n numbers greater than 1\n    for i in range(2,n):\n    # If i is divisible by any of the numbers in the prime_numbers list\n        for p in prime_numbers:\n            if i % p == 0:\n                break\n        else:\n            prime_numbers.append(i)\n    # If n is greater than 1\n    if n > 1:\n        return n not in prime_numbers\n    # If n is less than or equal to 1, it is by definition not a prime number\n    else:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return False\n    elif n == 2:\n        return False\n    elif n == 3:\n        return False\n    elif n == 4:\n        return False\n    elif n == 5:\n        return False\n    elif n == 6:\n        return False\n    elif n == 7:\n        return False\n    elif n == 8:\n        return False\n    elif n == 9:\n        return False\n    elif n == 10:\n        return False\n    elif n == 11:\n        return False\n    elif n == 12:\n        return False\n    elif n == 13:\n        return False\n    elif n == 14:\n        return False\n    elif n == 15:\n        return False\n    elif n == 16:\n        return False\n    elif n == 17:\n        return False\n    elif n == 18:\n        return False\n    elif n == 19:\n        return False\n    elif n == 20:\n        return False\n    elif n == 21:\n        return False\n    elif n == 22:\n        return False\n    elif n == 23:\n        return False\n    elif n == 24:\n        return False\n    elif n == 25:\n        return False\n    elif n == 26:\n        return False\n    elif n == 27:\n        return False\n    elif n == 28:\n        return False\n    elif n == 29:\n        return False\n    elif n == 30:\n        return False\n    elif n == 31:\n        return False\n    elif n == 32:\n        return False\n    elif n == 33:\n        return False\n    elif n == 34:\n        return False\n    elif n == 35:\n        return False\n    elif n == 36:\n        return False\n    elif n == 37:\n        return False\n    elif n == 38:\n        return False\n    elif n == 39:\n        return False\n    elif n == 40:\n        return False\n    elif n == 41:\n        return False\n    elif n == 42:\n        return False\n    elif n == 43:\n        return False\n    elif n == 44:\n        return False\n    elif n == 45:\n        return False\n    elif n == 46:\n        return False\n    elif n == 47:\n        return False\n    elif n == 48:\n        return False\n    elif n == 49:\n        return False\n    elif n == 50:\n        return False\n    elif n == 51:\n        return False\n    elif n == 52:\n        return False\n    elif n == 53:\n        return False\n    elif n == 54:\n        return False\n    elif n == 55:\n        return False\n    elif n == 56:\n        return False\n    elif n == 57:\n        return False\n    elif n == 58:\n        return False\n    elif n == 59:\n        return False\n    elif n == 60:\n        return False\n    elif n == 61:\n        return False\n    elif n == 62:\n        return False\n    elif n == 63:\n        return False\n    elif n == 64:\n        return False\n    elif n == 65:\n        return False\n    elif n == 66:\n        return False\n    elif n == 67:\n        return False\n    elif n == 68:\n        return False\n    elif n == 69:\n        return False\n    elif n == 70:\n        return False\n    elif n == 71:\n        return False\n    elif n == 72:\n        return False\n    elif n == 73:\n        return False\n    elif n == 74:\n        return False\n    elif n == 75:\n        return False\n    elif n == 76:\n        return False\n    elif n == 77:\n        return False\n    elif n == 78:\n        return False\n    elif n == 79:\n        return False\n    elif n == 80:\n        return False\n    elif n == 81:\n        return False\n    elif n == 82:\n        return False\n    elif n == 83:\n        return False\n    elif n == 84:\n        return False\n    elif n == 85:\n        return False\n    elif n == 86:\n        return False\n    elif n == 87:\n        return False\n    elif n == 88:\n        return False\n    elif n == 89:\n        return False\n    elif n == 90:\n        return False\n    elif n == 91:\n        return False\n    elif n == 92:\n        return False\n    elif n == 93:\n        return False\n    elif n == 94:\n        return False\n    elif n == 95:\n        return False\n    elif n == 96:\n        return False\n    elif n == 97:\n        return False\n    elif n == 98:\n        return False\n    elif n == 99:\n        return False\n    elif n == 100:\n        return False\n    elif n == 101:\n        return False\n    elif n == 102:\n        return False\n    elif n == 103:\n        return False\n    elif n == 104:\n        return False\n    elif n == 105:\n        return False\n    elif n == 106:\n        return False\n    elif n == 107:\n        return False\n    elif n == 108:\n        return False\n    elif n == 109:\n        return False\n    elif n == 110:\n        return False\n    elif n == 111:\n        return False\n    elif n == 112:\n        return False\n    elif n == 113:\n        return False\n    elif n == 114:\n        return False\n    elif n == 115:\n        return False\n    elif n == 116:\n        return False\n    elif n == 117:\n        return False\n    elif n == 118:\n        return False\n    elif n == 119:\n        return False\n    elif n == 120:\n        return False\n    elif n == 121:\n        return False\n    elif n == 122:\n        return False\n    elif n == 123:\n        return False\n    elif n == 124:\n        return False\n    elif n == 125:\n        return False\n    elif n == 126:\n        return False\n    elif n == 127:\n        return False\n    elif n == 128:\n        return False\n    elif n == 129:\n        return False\n    elif n == 130:\n        return False\n    elif n == 131:\n        return False\n    elif n == 132:\n        return False\n    elif n == 133:\n        return False\n    elif n == 134:\n        return False\n    elif n == 135:\n        return False\n    elif n == 136:\n        return False\n    elif n == 137:\n        return False\n    elif n == 138:\n        return False\n    elif n == 139:\n        return False\n    elif n == 140:\n        return False\n    elif n == 141:\n        return False\n    elif n == 142:\n        return False\n    elif n == 143:\n        return False\n    elif n == 144:\n        return False\n    elif n == 145:\n        return False\n    elif n == 146:\n        return False\n    elif n == 147:\n        return False\n    elif n == 148:\n        return False\n    elif n == 149:\n        return False\n    elif n == 150:\n        return False\n    elif n == 151:\n        return False\n    elif n == 152:\n        return False\n    elif n == 153:\n        return False\n    elif n == 154:\n        return False\n    elif n == 155:\n        return False\n    elif n == 156:\n        return False\n    elif n == 157:\n        return False\n    elif n == 158:\n        return False\n    elif n == 159:\n        return False\n    elif n == 160:\n        return False\n    elif n == 161:\n        return False\n    elif n == 162:\n        return False\n    elif n == 163:\n        return False\n    elif n == 164:\n        return False\n    elif n == 165:\n        return False\n    elif n == 166:\n        return False\n    elif n == 167:\n        return Fals"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    else:\n        for i in range(2, math.ceil(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,(-1)*num)\n    \n    res = []\n    while len(res)<n:\n        res.append(hq.heappop(heap))\n    return res[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for i in range(n):\n        if len(nums)<n:\n            return None\n        else:\n            hq.heappush(h,nums[0])\n            nums.pop(0)\n    return h\ndef largest_number(nums, n):\n    '''\n    Given a list of non-negative integers nums and an integer n, write a function to add up \n    to n using the smallest number of given numbers. You may assume that you have a infinite \n    number of each individual number.\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 1:\n        print(nums[0])\n        return nums[0]\n    else:\n        hq.heapify(nums)\n        for i in range(1,n):\n            hq.heappop(nums)\n        print(hq.heappop(nums))\n        return\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0:\n        return []\n    if not nums:\n        return []\n    # Sort the list in ascending order\n    # Heapify the list\n    # create a min heap of n elements\n    # Use a min heap as a priority queue\n    # Remove the elements from the heap in the sorted order\n    # return the list\n    sorted_nums = sorted(nums)\n    max_heap = []\n    hq.heapify(max_heap)\n    for i in range(n):\n        hq.heappush(max_heap,sorted_nums[i])\n    for i in range(n,len(nums)):\n        hq.heappushpop(max_heap,sorted_nums[i])\n    return list(max_heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,-nums[i])\n    for i in range(0,n):\n        print(heap[i])\n    return -heap[0]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    for i in range(0,n):\n        print(heap[i])\n    return heap[0]\ndef heap_queue_Median(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    return heap[0]\ndef heap_queue_median(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    return heap[0]\ndef heap_queue_sort(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sum(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    return sum(heap)\ndef heap_queue_average(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    return sum(heap)/n\ndef heap_queue_inverse(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    return -sum(heap)\ndef heap_queue_reverse(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    return -heap[0]\ndef heap_queue_min_index(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    for i in range(0,n):\n        print(heap[i])\n    return heap.index(min(heap))\ndef heap_queue_max_index(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    for i in range(0,n):\n        print(heap[i])\n    return heap.index(max(heap))\ndef heap_queue_extract_min(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    return heapq.heappop(heap)\ndef heap_queue_extract_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    return heapq.heappop(heap)\ndef heap_queue_decrease_key(nums,n,i):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    hq.heappop(heap)\n    return heap\ndef heap_queue_increase_key(nums,n,i):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    hq.heappop(heap)\n    return heap\ndef heap_queue_insert(nums,n,i,x):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    heapq.heappush(heap,x)\n    for i in range(0,n):\n        print(heap[i])\n    return heap\ndef heap_queue_delete(nums,n,i):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    heapq.heappop(heap)\n    for i in range(0,n):\n        print(heap[i])\n    return heap\ndef heap_queue_merge_sort(nums1,nums2,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    hq.heapify(heap)\n    for i in range(0,n):\n        hq.heappush(heap,nums1[i])\n    for i in range(0,n):\n        hq.heappush(heap,nums2[i])\n    for i in range(0,n):\n        print(heap[i])\n    return heap\ndef heap_queue_heap_sort(nums,n):\n    '''\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums = list(reversed(nums))\n    hq.heapify(nums)\n    for i in range(n):\n        print(hq.heappop(nums))\n    return nums\n    \ndef min_heapify(nums,i,n):\n    '''\n    A Min Heap is a complete binary tree where each node is smaller than its children.\n    '''\n    l = 2*i + 1\n    r = 2*i + 2\n    min_idx = i\n    if l < n and nums[l] < nums[min_idx]:\n        min_idx = l\n    if r < n and nums[r] < nums[min_idx]:\n        min_idx = r\n    if min_idx!= i:\n        nums[i],nums[min_idx] = nums[min_idx],nums[i]\n        min_heapify(nums,min_idx,n)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    while len(heap)>n:\n        hq.heappop(heap)\n    return heap\nnums = [1,23,12,9,30,2,50]\nn = 3\nresult = heap_queue_largest(nums,n)\nprint(result)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums = sorted(nums,reverse=True)\n    i = 0\n    print(nums)\n    for i in range(n):\n        print(nums[i],end=\" \")\n    \n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return []\n    \n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    \n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for _ in range(n):\n        result = hq.heappop(nums)\n    return result\n    \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x&(x-1)) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0): \n        return False\n    while (x!= 1): \n        if (x % 2!= 0): \n            return False\n        x = x // 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #x ^ x-1 = 0\n    #We have to check whether x ^ x-1 has only one bit different then zero or not.\n    # if it is the only bit different then we are done otherwise not \n    if x & (x-1) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x=int(x)\n    return x&(x-1)==0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    while (x!=0):\n        if ((x & 1)!= 0): \n            break\n        else: \n            x = x >> 1\n    if (x == 1): \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef sum_bit_in_binary(x,y):\n    '''\n    Write a python function to calculate the sum of two binary numbers.\n    '''\n    \n    temp1 = x\n    temp2 = y\n    result = 0\n    for i in range(31,-1,-1):\n        a = (temp1 & (1<<i))\n        b = (temp2 & (1<<i))\n        if(a!= b):\n            result = result + (1<<i)\n        \n    return result\n    \n    \n    \ndef sum_bit_in_binary_recursive(x,y):\n    '''\n    Write a python function to calculate the sum of two binary numbers using recursion.\n    '''\n    \n    if(x==0 and y==0):\n        return 0\n        \n    if(x==1 and y==1):\n        return 1\n        \n    if(x==0 and y==1):\n        return 1\n        \n    if(x==1 and y==0):\n        return 1\n        \n    return (x|y)+(sum_bit_in_binary_recursive(x,(y^(1<<(x.bit_length()-1)))))\n    \n    \n    \ndef sum_bit_in_binary_recursive_modulo_power_of_two(x,y):\n    '''\n    Write a python function to calculate the sum of two binary numbers using recursion and with modulo power of two.\n    '''\n    \n    if(x==0 and y==0):\n        return 0\n        \n    if(x==1 and y==1):\n        return 1\n        \n    if(x==0 and y==1):\n        return 1\n        \n    if(x==1 and y==0):\n        return 1\n        \n    return ((x|y)%(1<<x.bit_length()))+(sum_bit_in_binary_recursive_modulo_power_of_two(x,(y^(1<<(x.bit_length()-1))))%(1<<x.bit_length()))\n    \n    \n    \ndef sum_bit_in_binary_iterative(x,y):\n    '''\n    Write a python function to calculate the sum of two binary numbers using iteration.\n    '''\n    \n    result = 0\n    \n    for i in range(31,-1,-1):\n        a = (x & (1<<i))\n        b = (y & (1<<i))\n        if(a!= b):\n            result = result + (1<<i)\n        \n    return result\n    \n    \n    \ndef sum_bit_in_binary_iterative_modulo_power_of_two(x,y):\n    '''\n    Write a python function to calculate the sum of two binary numbers using iteration and with modulo power of two.\n    '''\n    \n    result = 0\n    \n    for i in range(x.bit_length()-1,-1,-1):\n        a = (x & (1<<i))\n        b = (y & (1<<i))\n        if(a!= b):\n            result = result + (1<<i)\n        \n    return (result + x + y)%(1<<x.bit_length())\n    \n    \n    \ndef difference_bit_in_binary(x,y):\n    '''\n    Write a python function to calculate the difference of two binary numbers.\n    '''\n    \n    temp1 = x\n    temp2 = y\n    result = 0\n    for i in range(31,-1,-1):\n        a = (temp1 & (1<<i))\n        b = (temp2 & (1<<i))\n        if(a!= b):\n            result = result + (1<<i)\n            \n    return result\n    \n    \n    \ndef difference_bit_in_binary_recursive(x,y):\n    '''\n    Write a python function to calculate the difference of two binary numbers using recursion.\n    '''\n    \n    if(x==0 and y==0):\n        return 0\n        \n    if(x==1 and y==1):\n        return 0\n        \n    if(x==0 and y==1):\n        return 1\n        \n    if(x==1 and y==0):\n        return 1\n        \n    return (x^y)+difference_bit_in_binary_recursive(x,(y^(1<<(x.bit_length()-1))))\n    \n    \n    \ndef difference_bit_in_binary_recursive_modulo_power_of_two(x,y):\n    '''\n    Write a python function to calculate the difference of two binary numbers using recursion and with modulo power of two.\n    '''\n    \n    if(x==0 and y==0):\n        return 0\n        \n    if(x==1 and y==1):\n        return 0\n        \n    if(x==0 and y==1):\n        return 1\n        \n    if(x==1 and y==0):\n        return 1\n        \n    return ((x^y)%(1<<x.bit_length()))+(difference_bit_in_binary_recursive_modulo_power_of_two(x,(y^(1<<(x.bit_length()-1))))%(1<<x.bit_length()))\n    \n    \n    \ndef difference_bit_in_binary_iterative(x,y):\n    '''\n    Write a python function to calculate the difference of two binary numbers using iteration.\n    '''\n    \n    result = 0\n    \n    for i in range(31,-1,-1):\n        a = (x & (1<<i))\n        b = (y & (1<<i))\n        if(a!= b):\n            result = result + (1<<i)\n            \n    return result\n    \n    \n    \ndef difference_bit_in_binary_iterative_modulo_power_of_two(x,y):\n    '''\n    Write a python function to calculate the difference of two binary numbers using iteration and with modulo power of two.\n    '''\n    \n    result = 0\n    \n    for i in range(x.bit_length()-1,-1,-1):\n        a = (x & (1<<i))\n        b = (y & (1<<i))\n        if(a!= b):\n            result = result + (1<<i)\n            \n    return (result + x + y)%(1<<x.bit_length())\n    \n    \n    \ndef check_parity_bit(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    while (x!=0):\n        if ((x & 1)!= 0): \n            break\n        else: \n            x = x >> 1\n    if (x == 1): \n        return 1\n    else: \n        return 0\n        \n    \n    \ndef check_parity_bit_recursive(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    if(x==0):\n        return 0\n        \n    if(x==1):\n        return 0\n        \n    if((x & 1) == 1): \n        return 0\n    else:\n        return 1+(check_parity_bit_recursive(x>>1))\n        \n        \n        \ndef check_parity_bit_iterative(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    while (x!=0):\n        if ((x & 1)!= 0): \n            return 0\n        else: \n            x = x >> 1\n    return 1\n    \n    \n    \ndef check_parity_bit_iterative_modulo_power_of_two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    while (x!=0):\n        if ((x & 1)!= 0): \n            return "
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return 0\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: \n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # set the 2's complement of x \n    if x == 0: \n        return 1\n    elif x < 0: \n        x = -x \n        # x = 2's complement of x \n    while (x % 2 == 0): \n        x = x / 2\n    if x == 1: \n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    temp = x & (x-1) \n    if temp == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    find=re.compile(r'\\w{4,}')\n    find_result=find.findall(text)\n    for word in find_result:\n        print(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\S+\\b\\S{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('[A-Za-z]+[A-Za-z]+[A-Za-z]+', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #pattern = re.compile('\\w{4,}')\n    #matches = pattern.finditer(text)\n    #for match in matches:\n    #    print(match)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = []\n    text_split = text.split(\" \")\n    for word in text_split:\n        if len(word) >= 4:\n            word_list.append(word)\n    return word_list\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # # 1st way\n    # result = re.findall(r'\\b\\w{4,}\\b', text)\n    # # print(result)\n    # # 2nd way\n    # result = re.findall(r'\\b\\w{4,}', text)\n    # print(result)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    # Your code here\n    # use regex\n    # \"[a-zA-Z]{4,}\"\n    \n    # my_text = \"I am a boy. I love python. I am a programmer, and I am learning Python. I will learn python\"\n    \n    # print(re.findall(r\"\\w{4,}\", my_text))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x*x, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for x in nums:\n        result.append(x ** 2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i*i)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num * num for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    original_str = str\n    str = str.lower()\n    n = len(str) \n    res = [0] * n \n    j = 0\n    for i in range(1, n): \n        j = max(0, j - 1) \n        while j >= 0 and str[i]!= str[j]: \n            j = res[j] \n        j += 1\n        res[i] = j \n    count = 0\n    for i in range(n): \n        if res[i] == 0: \n            break\n        count += (n - i)\n    # To print result \n    print(original_str)\n    for i in range(count): \n        print(\" \" * i + original_str)\n    print(\"\\nMinimum number of rotations required to get the same string = {}\".format(count)) \n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=0\n    for i in range(0, len(str)):\n        rotations += 1\n        if (str == str[i:]+str[:i]):\n            break\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    print('Minimum rotations = ', len(str) - (str.find(str)))\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    temp = str + str\n    rot = 0\n    while(str!= temp):\n        temp = temp[1:]+temp[:1]\n        rot+=1\n    return rot\n    "
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    list_str = list(str)\n    list_str1 = list_str[1:]\n    list_str2 = list_str[:-1]\n    if list_str1 == list_str2:\n        return 0\n    else:\n        return 1 + find_Rotations(list_str1 + list_str[0])\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n    else:\n        prev_str = str[1:] + str[0]\n        return 1 + find_Rotations(prev_str)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    s1 = str[:n-1]\n    s2 = str[1:]\n    return(min(n-1, (n-1) - find_Rotations(s2)))\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        rotations = 0\n        while(str!= str[::-1]):\n            str = str[-1] + str[:-1]\n            rotations += 1\n        return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    str = str + str \n    sub_string = str[n:2 * n] \n    count = 0\n    for i in range(n): \n        if (sub_string[i:i + n] == str): \n            count = count + 1\n    return count \n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # string manipulation\n    # remove first occurrence of ch in s\n    s = s.replace(ch, \"\")\n    # remove last occurrence of ch in s\n    s = s[::-1]\n    s = s.replace(ch, \"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    lst=list(s)\n    lst.remove(ch)\n    return \"\".join(lst)\n    "
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == -1:\n        print(\"Given character not found in the string.\")\n        return None\n    else:\n        s = s.replace(ch,\"\",1)\n        s = s.replace(ch, \"\", -1)\n        print(\"The string with the first and last occurrence of the character removed: \" + s)\n        return None\n    \ndef remove_first_last_occurence_occ(s,ch): \n    '''\n    Write a python function to remove the first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == -1:\n        print(\"Given character not found in the string.\")\n        return None\n    else:\n        s = s.replace(ch,\"\",1)\n        s = s.replace(ch, \"\", -1)\n        print(\"The string with the first and last occurrence of the character removed: \" + s)\n        return None\n    \ndef replace_char_at_n(s, n, ch):\n    '''\n    Write a python function to replace a character in the string at the given position with the given character.\n    '''\n    s = s.replace(s[n], ch)\n    print(\"The string after replacing the character at position \" + str(n) + \": \" + s)\n    return None\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1=s\n    if ch in s1:\n        s1 = s1[:s1.index(ch)] + s1[s1.index(ch)+1:]\n    return s1\ns=\"abcabc\"\nch='c'\nprint(remove_Occ(s,ch))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # code here\n    st = \"\"\n    for i in s:\n        if i!= ch:\n            st += i\n    return st\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s[0:s.find(ch)]+s[s.rfind(ch)+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=list(s)\n    n=len(s)\n    i=0\n    while i < n:\n        if s[i] == ch:\n            del s[i]\n            i=i-1\n            n=n-1\n        i=i+1\n    s=\"\".join(s)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_s = \"\" \n    for i in range(len(s)): \n        if(s[i]!= ch and new_s == \"\"): \n            new_s += s[i] \n        elif(s[i]!= ch): \n            new_s += s[i] \n    print(new_s) \n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        for j in range(len(M[i])):\n            M[i][j] = M[i][j]/row_sum\n        M[i] = sorted(M[i])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n - i - 1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    #sort the matrix by the row sum\n    for row in sorted(M, key=sum):\n        sorted_matrix.append(row)\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def get_col_sum(M, col_idx):\n        return sum(row[col_idx] for row in M)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    result = []\n    while len(M) > 0:\n        total = 0\n        for row in M:\n            total += sum(row)\n        max_idx = M.index(max(M, key=sum))\n        result.append(M.pop(max_idx))\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sum = [0] * len(M)\n    for i in range(len(M)):\n        row_sum[i] = sum(M[i])\n    sort_row_sum = sorted(row_sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sum(row):\n        s = 0\n        for i in row:\n            s+=i\n        return s\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    print(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\")\n    print(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\")\n    sorted_matrix = sorted(M, key=sum)\n    print(sorted_matrix)\n    print(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\")\n    print(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\")\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key = sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #Your code here\n    return sorted(M, key = lambda x:sum(x))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n    "
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * (b * h) * l\n    return volume \n    \n    \ndef find_LateralSurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the lateral surface area of a triangular prism.\n    '''\n    lat_surface_area = 2 * (1/2) * l * h\n    return lat_surface_area \n    \n    \ndef find_Perimeter(l,b,h) : \n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    perimeter = l + b + h\n    return perimeter\n    \n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    surface_area = 2 * (1/2) * l * h\n    return surface_area \n    \n    \ndef find_SlantHeight(b,h) : \n    '''\n    Write a python function to find the slant height of a triangular prism.\n    '''\n    slant_height = (1/3) * b * h\n    return slant_height \n    \n    \ndef find_SlantBase(l,b) : \n    '''\n    Write a python function to find the slant base of a triangular prism.\n    '''\n    slant_base = (1/3) * l * b\n    return slant_base \n    \n    \ndef find_TotalSurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the total surface area of a triangular prism.\n    '''\n    total_surface_area = 2 * l * b + 2 * b * h + 2 * l * h\n    return total_surface_area\n    \n    \ndef find_TotalVolume(l,b,h) : \n    '''\n    Write a python function to find the total volume of a triangular prism.\n    '''\n    total_volume = l * b * h\n    return total_volume \n    \n    \ndef find_CompoundTriangularPrism(l,b,h) : \n    '''\n    Write a python function to find the compound triangular prism.\n    '''\n    compound_triangular_prism = find_TotalVolume(l,b,h) / find_Volume(l,b,h)\n    return compound_triangular_prism \n    \n    \ndef find_SlantFactor(l,b,h) : \n    '''\n    Write a python function to find the slant factor.\n    '''\n    slant_factor = find_SlantHeight(b,h) / find_LateralSurfaceArea(l,b,h)\n    return slant_factor \n    \n    \ndef find_SurfaceToBaseRatio(l,b,h) : \n    '''\n    Write a python function to find the surface to base ratio.\n    '''\n    surface_to_base_ratio = find_SurfaceArea(l,b,h) / find_SlantBase(l,b)\n    return surface_to_base_ratio \n    \n    \ndef find_NumberOfMoles(total_surface_area,surface_to_base_ratio) : \n    '''\n    Write a python function to find the number of moles.\n    '''\n    number_of_moles = total_surface_area / surface_to_base_ratio\n    return number_of_moles \n    \n    \ndef find_NumberOfMolesPerUnitVolume(compound_triangular_prism,number_of_moles) : \n    '''\n    Write a python function to find the number of moles per unit volume.\n    '''\n    number_of_moles_per_unit_volume = number_of_moles / compound_triangular_prism\n    return number_of_moles_per_unit_volume \n    \n    \ndef find_EquivalentSphereRadius(number_of_moles_per_unit_volume) : \n    '''\n    Write a python function to find the equivalent sphere radius.\n    '''\n    equivalent_sphere_radius = 3.16 * number_of_moles_per_unit_volume\n    return equivalent_sphere_radius \n    \n    \ndef find_SphereVolume(equivalent_sphere_radius) : \n    '''\n    Write a python function to find the sphere volume.\n    '''\n    sphere_volume = (4/3) * (3.14) * (equivalent_sphere_radius ** 3)\n    return sphere_volume \n    \n    \ndef find_SphereSurfaceArea(equivalent_sphere_radius) : \n    '''\n    Write a python function to find the sphere surface area.\n    '''\n    sphere_surface_area = 4 * (3.14) * (equivalent_sphere_radius ** 2)\n    return sphere_surface_area \n    \n    \ndef find_SphereMolecularWeight(sphere_surface_area,sphere_volume) : \n    '''\n    Write a python function to find the sphere molecular weight.\n    '''\n    sphere_molecular_weight = (sphere_surface_area * sphere_volume)\n    return sphere_molecular_weight \n    \n    \ndef find_CompoundSphereMolecularWeight(sphere_molecular_weight,compound_triangular_prism) : \n    '''\n    Write a python function to find the compound sphere molecular weight.\n    '''\n    compound_sphere_molecular_weight = compound_triangular_prism * sphere_molecular_weight\n    return compound_sphere_molecular_weight \n    \n    \ndef find_SphereBondiRadius(compound_sphere_molecular_weight) : \n    '''\n    Write a python function to find the sphere bondi radius.\n    '''\n    bondi_radius = ((3 * compound_sphere_molecular_weight) / (2 * (3.14) ** 2)) ** (1/3)\n    return bondi_radius \n    \n    \ndef find_SphereBondiRadiusOfEquivalentSphere(bondi_radius) : \n    '''\n    Write a python function to find the sphere bondi radius of equivalent sphere.\n    '''\n    equivalent_sphere_bondi_radius = (2 * (bondi_radius ** 3)) / (3 * (3.14) ** 2) ** (1/3)\n    return equivalent_sphere_bondi_radius \n    \n    \ndef find_SphereBondiRadiusOfEquivalentSphereByDensity(bondi_radius) : \n    '''\n    Write a python function to find the sphere bondi radius of equivalent sphere by density.\n    '''\n    equivalent_sphere_bondi_radius_by_density = (2 * (bondi_radius ** 3) * (6.02 * 10 ** 23)) / (3 * (3.14) ** 2) ** (1/3)\n    return equivalent_sphere_bondi_radius_by_density \n    \n    \ndef find_EquivalentCylinderDiameter(number_of_moles_per_unit_volume,equivalent_sphere_radius,sphere_volume) : \n    '''\n    Write a python function to find the equivalent cylinder diameter.\n    '''\n    equivalent_cylinder_diameter = (number_of_moles_per_unit_volume * equivalent_sphere_radius) / sphere_volume\n    return equivalent_cylinder_diameter \n    \n    \ndef find_CylinderVolume(equivalent_cylinder_diameter,equivalent_cylinder_diameter,sphere_volume) : \n    '''\n    Write a python function to find the cylinder volume.\n    '''\n    cylinder_volume = (equivalent_cylinder_diameter ** 2) * sphere_volume\n    return cylinder_volume \n    \n    \ndef find_CylinderSurfaceArea(cylinder_volume) : \n    '''\n    Write a python function to find the cylinder surface area.\n    '''\n    cylinder_surface_area = 2 * 3.14 * (cylinder_volume ** 2)\n    return cylinder_surface_area \n    \n    \ndef find_CylinderCompoundTriangularPrism(cylinder_surfac"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l*b*h\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume\n    # Please return the volume of a triangle with base length l, \n    # height h and side length b as input.\n    # Please do not use the built in functions to calculate the volume.\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'_[a-z]+', text.lower())\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(\"[_]+\", text):\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for i in range(len(text)):\n        if i!= 0:\n            if not (text[i].isalpha() and text[i - 1] == \"_\"):\n                return False\n        if i == 0:\n            if not text[0].isalpha():\n                return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not isinstance(text,str):\n        return False\n    return re.search(\"[_]+\", text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not isinstance(text, str):\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-z]+_[a-z]*')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]_[a-z]', text):\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^[a-z]+_[a-z]+$', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # return re.search('[_][a-z]+_', text.lower()) is not None\n    return re.search('[_a-z]+_', text.lower()) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('_.*_',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n    \ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    return a ** 2\n    \ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function that returns the perimeter of a triangle given the lengths of its sides as input.\n    '''\n    return a + b + c\n    \ndef triangle_area(a, b, c):\n    '''\n    Write a function that returns the area of a triangle given the lengths of its sides as input.\n    '''\n    s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \ndef trapezoid_perimeter(a, b, c, d):\n    '''\n    Write a function that returns the perimeter of a trapezoid given the lengths of its sides as input.\n    '''\n    return a + b + c + d\n    \ndef trapezoid_area(a, b, c, d):\n    '''\n    Write a function that returns the area of a trapezoid given the lengths of its sides as input.\n    '''\n    s = (a + b + c + d) / 2\n    return (s * (s - a) * (s - b) * (s - c) * (s - d)) ** 0.5\n    \ndef parallelogram_perimeter(a, b):\n    '''\n    Write a function that returns the perimeter of a parallelogram given the lengths of its sides as input.\n    '''\n    return 2 * (a + b)\n    \ndef parallelogram_area(a, b):\n    '''\n    Write a function that returns the area of a parallelogram given the lengths of its sides as input.\n    '''\n    return a * b\n    \ndef rhombus_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a rhombus given its side length as input.\n    '''\n    return 4 * a\n    \ndef rhombus_area(a):\n    '''\n    Write a function that returns the area of a rhombus given its side length as input.\n    '''\n    return a ** 2\n    \ndef kite_perimeter(a, b):\n    '''\n    Write a function that returns the perimeter of a kite given the lengths of its sides as input.\n    '''\n    return 2 * (a + b)\n    \ndef kite_area(a, b):\n    '''\n    Write a function that returns the area of a kite given the lengths of its sides as input.\n    '''\n    return a * b\n    \ndef equilateral_triangle_perimeter(a):\n    '''\n    Write a function that returns the perimeter of an equilateral triangle given the length of its side as input.\n    '''\n    return 3 * a\n    \ndef equilateral_triangle_area(a):\n    '''\n    Write a function that returns the area of an equilateral triangle given the length of its side as input.\n    '''\n    return (3 ** 0.5) / 4 * a ** 2\n    \ndef right_triangle_perimeter(a, b):\n    '''\n    Write a function that returns the perimeter of a right triangle given the lengths of its sides as input.\n    '''\n    return a + b + a ** 2 + b ** 2\n    \ndef right_triangle_area(a, b):\n    '''\n    Write a function that returns the area of a right triangle given the lengths of its sides as input.\n    '''\n    return (a * b) / 2\n    \ndef kite_circumference(a):\n    '''\n    Write a function that returns the circumference of a kite given its side length as input.\n    '''\n    return 4 * a\n    \ndef kite_area_from_circumference(c):\n    '''\n    Write a function that returns the area of a kite given its circumference as input.\n    '''\n    return c / 4\n    \ndef rectangle_perimeter(a, b):\n    '''\n    Write a function that returns the perimeter of a rectangle given its width and height as input.\n    '''\n    return 2 * (a + b)\n    \ndef rectangle_area(a, b):\n    '''\n    Write a function that returns the area of a rectangle given its width and height as input.\n    '''\n    return a * b\n    \ndef rhombus_circumference(a):\n    '''\n    Write a function that returns the circumference of a rhombus given its side length as input.\n    '''\n    return 4 * a\n    \ndef rhombus_area_from_circumference(c):\n    '''\n    Write a function that returns the area of a rhombus given its circumference as input.\n    '''\n    return c / 4\n    \ndef trapezoid_circumference(a, b, c):\n    '''\n    Write a function that returns the circumference of a trapezoid given the lengths of its sides as input.\n    '''\n    return a + b + c\n    \ndef trapezoid_area_from_circumference(c):\n    '''\n    Write a function that returns the area of a trapezoid given the circumference as input.\n    '''\n    return c / 4\n    \ndef square_circumference(a):\n    '''\n    Write a function that returns the circumference of a square given its side length as input.\n    '''\n    return 4 * a\n    \ndef square_area_from_circumference(c):\n    '''\n    Write a function that returns the area of a square given its circumference as input.\n    '''\n    return c / 4\n    \ndef kite_circumference_from_perimeter(p):\n    '''\n    Write a function that returns the circumference of a kite given its perimeter as input.\n    '''\n    return 2 * p\n    \ndef kite_area_from_perimeter(p):\n    '''\n    Write a function that returns the area of a kite given its perimeter as input.\n    '''\n    return p / 4\n    \ndef rectangle_circumference_from_perimeter(p):\n    '''\n    Write a function that returns the circumference of a rectangle given its perimeter as input.\n    '''\n    return 2 * p\n    \ndef rectangle_area_from_perimeter(p):\n    '''\n    Write a function that returns the area of a rectangle given its perimeter as input.\n    '''\n    return p / 2\n    \ndef rhombus_circumference_from_perimeter(p):\n    '''\n    Write a function that returns the circumference of a rhombus given its perimeter as input.\n    '''\n    return 4 * p\n    \ndef rhombus_area_from_perimeter(p):\n    '''\n    Write a function that returns the area of a rhombus given its perimeter as input.\n    '''\n    return p / 4\n    \ndef trapezoid_circumference_from_perimeter(p):\n    '''\n    Write a function that returns the circumference of a trapezoid given its perimeter as input.\n    '''\n    return p\n    \ndef trapezoid_area_from_perimeter(p):\n    '''\n    Write a function that returns the area of a trapezoid given its perimeter as input.\n    '''\n    return p / 2\n    \ndef square_circumference_from_perimeter(p):\n    '''\n    Write a function that returns the circumference of a square given its perimeter as input.\n    '''\n    return 4 * p\n    \ndef square_area_from_perimeter(p):\n    '''\n    Write a function that returns the area of a square given its perimeter as input.\n    '''\n    return p ** 2\n    \ndef kite_circumference_from_area(a):\n    '''\n    Write a function that returns the circumference of a kite given its area as input.\n    '''\n    return 4 * a ** 0.5\n    \ndef kite_area_from_circumference(c):\n    '''\n    Write a function that returns the area of a kite given its circumference as input.\n    '''\n    return c / 4 ** 0.5\n    \ndef rectangle_circumference_from_area(a):\n    '''\n    Write a function that returns the circumference of a rectangle given its area a"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = []\n    for x in list1:\n        if x not in list2:\n            list2.append(x)\n    list2.sort()\n    return list2\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = list(string) \n    s2 = list(string) \n    for c in s2: \n        if c in s1: \n            s1.remove(c) \n    return s1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = list(string)\n    l2 = list(string.split(\" \"))\n    for i in l2:\n        if i in l1:\n            l1.remove(i)\n    return''.join(l1)\n    \ndef list_to_str(string):\n    '''\n    Write a function to convert a list into a string.\n    '''\n    l1 = list(string.split(\" \"))\n    return \"\".join(l1)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    for i in string:\n        if i not in res:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Make a dictionary to store the characters\n    dict = {}\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # use a for loop to iterate over the string \n    # inside the for loop we will use another for loop \n    # to iterate over the characters of the second string \n    # and if any character matches with any character \n    # of the second string we will remove that character \n    # from the first string.\n    new_str = []\n    for i in string:\n        if i not in new_str:\n            new_str.append(i)\n    return new_str\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    ret_list = []\n    for chr in string:\n        if chr not in ret_list:\n            ret_list.append(chr)\n    return ret_list\ndef str_to_list_2(string, chars_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    ret_list = []\n    for chr in string:\n        if chr not in chars_list:\n            ret_list.append(chr)\n    return ret_list\ndef str_to_list_3(string, chars_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [chr for chr in string if chr not in chars_list]\ndef str_to_list_4(string, chars_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(filter(lambda chr: chr not in chars_list, string))\ndef str_to_list_5(string, chars_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [chr for chr in string if chr not in chars_list]\ndef str_to_list_6(string, chars_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [chr for chr in string if chr not in chars_list]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in string]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string) \n    list2 = [] \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if list1[i] == list2[j]: \n                list1[i] = ''\n    return \"\".join(list1) \nprint(str_to_list(\"Abcdef\"))\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    length_string = len(string)\n    string_list = [None] * length_string\n    for i in range(length_string):\n        string_list[i] = string[i]\n    return string_list\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # assume arraynums is a list of integers\n    # return True if there is duplicate element in the array\n    # return False if there is no duplicate element in the array\n    # arraynums can contain duplicate values\n    return len(set(arraynums))!= len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # determine if there are any duplicates\n    if not arraynums:\n        return None\n    else:\n        duplicates = []\n        unique_elements = set(arraynums)\n        for element in unique_elements:\n            if arraynums.count(element) > 1:\n                duplicates.append(element)\n        return duplicates\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for i in range(len(arraynums)):\n        if arraynums.count(arraynums[i]) > 1:\n            duplicate = True\n            break\n    return duplicate\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique = set(arraynums)\n    return unique == arraynums or len(unique)!= len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(0,len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = False\n    for i in range(0, len(arraynums)):\n        for j in range(0, i):\n            if arraynums[i] == arraynums[j]:\n                result = True\n    return result\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x==0 or x%6==0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return len(str(x))==6 and x%13==0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%3==0 or x%5==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 3: \n        print('woodall')\n    else: \n        print('not woodall')\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x) == int:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%7==0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 15 == 0)\n    \ndef is_bill(x):\n    '''\n    Write a function to check if the given number is bill or not.\n    '''\n    return (x % 5 == 0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return str(x)[::-1] == str(x)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return str(x).endswith('0')\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revm = 0\n    num = str(num)\n    for i in num:\n        revm = i+revm\n    if int(revm) == int(num)*2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])-num==0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if len(str(num))%2 == 0:\n        print(num)\n        return True\n    else:\n        rev = str(num)[::-1]\n        rev = int(rev)\n        if int(num) + int(rev) == 2*int(rev):\n            print(num, \"and\", rev, \"are one less than twice their reverse!\")\n            return True\n        else:\n            print(num, \"and\", rev, \"are not one less than twice their reverse!\")\n            return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev = str(num)[::-1]\n    if int(num) == int(rev) + 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s=str(num)\n    rev_num=int(s[::-1])\n    if(num==rev_num+1):\n        print(f'{num} is one less than twice its reverse')\n    else:\n        print(f'{num} is not one less than twice its reverse')\ndef number_of_digits(num):\n    '''\n    Write a python function to find the number of digits of a number.\n    '''\n    n=num\n    digits=0\n    while(n>0):\n        digits=digits+1\n        n=n//10\n    print(f'{num} has {digits} digits')\ndef digits_check(num):\n    '''\n    Write a python function to check if a number has exactly four digits.\n    '''\n    n=num\n    if(n>0 and n<=9999 and n%100==0):\n        print(f'{num} has exactly four digits')\n    else:\n        print(f'{num} does not have exactly four digits')\ndef two_digits(num):\n    '''\n    Write a python function to check if a number has exactly two digits.\n    '''\n    n=num\n    if(n>0 and n<=99 and n%100==0):\n        print(f'{num} has exactly two digits')\n    else:\n        print(f'{num} does not have exactly two digits')\ndef palindrome(num):\n    '''\n    Write a python function to check if a number is palindrome.\n    '''\n    n=num\n    temp=n\n    rev_num=0\n    while(n>0):\n        rem=n%10\n        rev_num=rev_num*10+rem\n        n=n//10\n    if(temp==rev_num):\n        print(f'{num} is palindrome')\n    else:\n        print(f'{num} is not palindrome')\ndef reversed_number(num):\n    '''\n    Write a python function to check if a number is reversed.\n    '''\n    n=num\n    rev_num=0\n    while(n>0):\n        rem=n%10\n        rev_num=rev_num*10+rem\n        n=n//10\n    if(num==rev_num):\n        print(f'{num} is reversed number')\n    else:\n        print(f'{num} is not reversed number')\ndef prime(num):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    n=num\n    for i in range(2,n):\n        if(n%i==0):\n            print(f'{n} is not a prime number')\n            break\n    else:\n        print(f'{n} is a prime number')\ndef even_odd_check(num):\n    '''\n    Write a python function to check if a number is even or odd.\n    '''\n    n=num\n    if(n>0 and n<=9999):\n        if(n%2==0):\n            print(f'{num} is even')\n        else:\n            print(f'{num} is odd')\n    else:\n        print('Out of range')\ndef power(num,pow):\n    '''\n    Write a python function to check if a number raised to a certain power is equal to a certain value.\n    '''\n    n=num\n    p=pow\n    if(n>0 and n<=9999):\n        if(pow>0):\n            if(n**p==num):\n                print(f'{n} raised to {p} is equal to {num}')\n            else:\n                print(f'{n} raised to {p} is not equal to {num}')\n        else:\n            print('Please enter a positive integer for power')\n    else:\n        print('Please enter a value in range 1 to 9999')\ndef factorial(num):\n    '''\n    Write a python function to calculate factorial of a number.\n    '''\n    n=num\n    fact=1\n    if(n>0 and n<=9999):\n        if(n%1==0 and n%2==0 and n%3==0 and n%4==0 and n%5==0 and n%6==0 and n%7==0 and n%8==0 and n%9==0 and n%10==0 and n%11==0 and n%12==0 and n%13==0 and n%14==0 and n%15==0 and n%16==0 and n%17==0 and n%18==0 and n%19==0 and n%20==0 and n%21==0 and n%22==0 and n%23==0 and n%24==0 and n%25==0 and n%26==0 and n%27==0 and n%28==0 and n%29==0 and n%30==0 and n%31==0 and n%32==0 and n%33==0 and n%34==0 and n%35==0 and n%36==0 and n%37==0 and n%38==0 and n%39==0 and n%40==0 and n%41==0 and n%42==0 and n%43==0 and n%44==0 and n%45==0 and n%46==0 and n%47==0 and n%48==0 and n%49==0 and n%50==0 and n%51==0 and n%52==0 and n%53==0 and n%54==0 and n%55==0 and n%56==0 and n%57==0 and n%58==0 and n%59==0 and n%60==0 and n%61==0 and n%62==0 and n%63==0 and n%64==0 and n%65==0 and n%66==0 and n%67==0 and n%68==0 and n%69==0 and n%70==0 and n%71==0 and n%72==0 and n%73==0 and n%74==0 and n%75==0 and n%76==0 and n%77==0 and n%78==0 and n%79==0 and n%80==0 and n%81==0 and n%82==0 and n%83==0 and n%84==0 and n%85==0 and n%86==0 and n%87==0 and n%88==0 and n%89==0 and n%90==0 and n%91==0 and n%92==0 and n%93==0 and n%94==0 and n%95==0 and n%96==0 and n%97==0 and n%98==0 and n%99==0 and n%100==0):\n            while(n>1):\n                fact=fact*n\n                n=n-1\n            print(f'The factorial of {num} is {fact}')\n        else:\n            print(f'{num} is not a perfect number')\n    else:\n        print('Please enter a value in range 1 to 9999')\ndef fibonacci(num):\n    '''\n    Write a python function to calculate Fibonacci numbers.\n    '''\n    n=num\n    if(n>0 and n<=100):\n        fib=[]\n        for i in range(n):\n            if(i==0 or i==1):\n                fib.append(i)\n            else:\n                fib.append(fib[i-2]+fib[i-1])\n        print(fib)\n    else:\n        print('Please enter a value in range 1 to 100')\ndef armstrong(num):\n    '''\n    Write a python function to check if a number is an Armstrong number or not.\n    '''\n    n=num\n    l=len(str(n))\n    sum=0\n    temp=n\n    while(temp>0):\n        rem=temp%10\n        sum=sum+rem**l\n        temp=temp//10\n    if(n==sum):\n        print(f'{n} is an Armstrong number')\n    else:\n        print(f'{n} is not an Armstrong number')\ndef luhn_check(num):\n    '''\n    Write a python function to check if a number is a valid credit card number or not.\n    '''\n    n=num\n    s=str(n)\n    sum=0\n    if(n>0 and n<=999999999999999999)"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) * 2 - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num*2 == (num + 1) * 2\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return (rev_num - 1 == num)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num!= 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num = num // 10\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    x=num\n    y=0\n    while(num>0):\n        r=num%10\n        y=y*10+r\n        num=num//10\n    if x==y//2+1:\n        return 1\n    return 0\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # def get_list(arr) :\n    #     lst = []\n    #     for ele in arr :\n    #         lst.append(int(ele))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #arr = [1,2,3,4,5,6,7,8,9]\n    largest = 0\n    for i in range(0,len(arr)):\n        largest = largest*10+arr[i]\n        \n    return largest\n    \n    #{ \n    #  Driver Code Starts"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Finds all permutations of the list and store them in a list\n    permutations = permutations_with_given_digits(arr, len(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # var to store the largest number in array\n    max = 0\n    \n    # find the largest number in array\n    for i in range(len(arr)) : \n        if arr[i] > max : \n            max = arr[i]\n    \n    # return the largest number in array\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest = 0\n    for num in arr:\n        if largest < num:\n            largest = num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    n = len(arr) \n    max = arr[0] \n    \n    for i in range(1, n) : \n        if arr[i] > max : \n            max = arr[i] \n    \n    return max\n    \ndef is_palindrome(string) : \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    \n    n = len(string) \n    i = 0\n    j = n - 1\n    \n    while i < j : \n        if string[i]!= string[j] : \n            return False\n        i += 1\n        j -= 1\n    \n    return True\n    \ndef minimum_swaps(arr) : \n    '''\n    Write a python function to find the minimum number of swaps required to sort the given array.\n    '''\n    \n    n = len(arr) \n    \n    # 0 1 0 1 2 0 1 1 0 1 1 2 0 0 1 0 1 2 0 0 1 2 1 0 0 0 1 1 1 0 2 1 0 0\n    # 0 1 2 1 1 0 1 0 0 1 0 0 0 0 1 0 1 2 2 0 1 0 1 2 1 2 0 0 0 1 2 0 2 1 1\n    # 0 1 2 0 1 1 1 2 0 0 1 2 1 2 1 0 1 0 1 0 0 1 0 1 0 2 1 1 1 0 1 1 1 1 1 2\n    # 0 1 2 1 2 0 0 1 0 0 1 0 1 1 1 1 1 2 0 0 0 1 1 1 1 2 1 1 0 1 0 0 0 1 0 1\n    # 0 1 2 1 1 2 1 0 1 2 1 0 1 1 1 1 1 0 1 0 1 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1\n    \n    count = 0\n    for i in range(n) : \n        if arr[i]!= i + 1 : \n            j = arr[i] - 1\n            arr[i], arr[j] = arr[j], arr[i] \n            count += 1\n            \n    return count\n    \ndef beautiful_arrangement(n) : \n    '''\n    Write a python function to find the number of ways to make the sum of the array elements equal to the sum of the digits of the given number.\n    '''\n    \n    # Suppose the array contains a1, a2,..., an.\n    # There are two possibilities to make the sum of the array equal to the sum of the digits of the given number:\n    # - By swapping the ith element with the sum of the digits of the given number - a1 + 1 + a2 + 1 +... + an + 1 = sum of digits of the given number\n    # - By adding the number of ways to make the sum of the digits of the given number - a1 + a2 + a3 +... + an = sum of digits of the given number\n    \n    # If a1 = 1, then adding 1 to the ith element gives us a2 = 1 + 1, a3 = 2 + 1 = 3, etc.\n    # So if the sum of the elements is 10, then the answer is 10Ck + 10Ck-1 where k is the number of 1s in the sum of digits of the given number.\n    \n    # So if the sum of the elements is 10, then the number of ways to make the sum of the array elements equal to the sum of the digits of the given number is 10Ck\n    # where k is the number of 1s in the sum of digits of the given number.\n    \n    # However, if a1 = 2, then adding 2 to the ith element gives us a2 = 2 + 2, a3 = 3 + 2 = 5, etc.\n    # Therefore, the number of ways to make the sum of the array elements equal to the sum of the digits of the given number is 10Ck - 1\n    \n    # So in the end, the answer is 10Ck + 10Ck-1\n    \n    k = sum_of_digits(n) \n    \n    return 10 * k + 10 * k - 1\n    \ndef sum_of_digits(n) : \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    \n    # Suppose the given number is 1234.\n    # Then we can make the sum of digits by adding 1 to the sum of the digits of the individual numbers.\n    # 1 + 2 + 3 + 4 = 10\n    \n    # Similarly, if the given number is 1234, we can make the sum of digits by adding 2 to the sum of the digits of the individual numbers.\n    # 1 + 2 + 3 + 4 = 10\n    \n    # So the sum of the digits of 1234 is 1 + 2 + 3 + 4 = 10.\n    \n    # Now suppose the given number is 5678\n    # We can make the sum of digits by adding 2 to the sum of the digits of the individual numbers.\n    # 5 + 6 + 7 + 8 = 20\n    \n    # Similarly, if the given number is 5678, we can make the sum of digits by adding 3 to the sum of the digits of the individual numbers.\n    # 5 + 6 + 7 + 8 = 20\n    \n    # So the sum of the digits of 5678 is 5 + 6 + 7 + 8 = 20.\n    \n    # So the sum of the digits of 1234 + 5678 = 30.\n    \n    # So, we can recursively make the sum of the digits by adding the sum of the digits of the individual numbers\n    # to the sum of the digits of the individual numbers.\n    \n    # So if n = 12345, then sum_of_digits(n) is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 5 + 6 + 7 + 8 + 5 + 6 + 7 + 8 = 51.\n    \n    return sum_of_digits_recursive(n) \n    \ndef sum_of_digits_recursive(n) : \n    '''\n    Write a python function to find the sum of digits of a given number recursively.\n    '''\n    \n    if n < 10 : \n        return n \n    \n    return n % 10 + sum_of_digits_recursive(n // 10) \n    \ndef minimum_swaps_2(arr) : \n    '''\n    Write a python function to find the minimum number of swaps required to sort the given array.\n    '''\n    \n    n = len(arr) \n    \n    # 0 1 0 1 2 0 1 1 0 1 1 2 0 0 1 0 1 2 0 0 1 2 1 0 0 0 1 1 1 0 2 1 0 0\n    # 0 1 2 1 1 0 1 0 0 1 0 0 0 0 1 0 1 2 2 0 1 0 1 2 1 2 0 0 0 1 2 0 2 1 1\n    # 0 1 2 0 1 1 1 2 0 0 1 2 1 2 1 0 1 0 1 0 0 1 0 1 0 2 1 1 1 0 1 1 1 1 1 2\n    # 0 1 2 1 2 0 0 1 0 0 1 0 1 1 1 1 1 2 0 0 0 1 1 1 1 2 1 1 0 1 0 0 0 1 0 1\n    # 0 1 2 1 1 2 1 0 1 2 1 0 1 1 1 1 1 0 1 0 1 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1\n    \n    count = 0\n    \n    for i in range(n) : \n        if arr[i]!= i + 1 : \n            arr[i], arr[arr[i] - 1] = arr[arr[i] - 1], arr[i] \n            count += 1\n            \n    return count\n    \ndef array_manipulation(n, queries) : \n    '''\n    Write a python function to find the maximum element of the array formed after performing the given queries.\n    '''\n    \n    arr = [0] * n \n    \n    for i in queries : \n        arr[i[1] - 1] += i[2] \n        if i[0]!= len(arr) : \n            arr[i[0]] -= i[2] \n        \n    max_num = -1\n    for i in range(len(arr)) : \n        max_num = max(max_num, arr[i])\n        \n    return max_num \n    \ndef reverse_array(arr) : \n    '''\n    Write a python function to reverse the given array.\n    '''\n    \n    return arr[::-1]\n    \ndef largest_number(arr) : \n    '''\n    Write a python function to find th"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    if len(arr) == 0 :\n        return 0\n    if len(arr) == 1 :\n        return arr[0]\n    \n    def is_Subset(arr1, arr2) :\n        '''\n        Return True if arr2 is a subset of arr1 else False\n        '''\n        if len(arr1) < len(arr2) :\n            return False\n        \n        for i in range(0, len(arr2)) :\n            if arr2[i] not in arr1 :\n                return False\n        return True\n        \n    def is_Subset_Max(arr1, arr2) :\n        '''\n        Return True if arr2 is a subset of arr1 else False\n        '''\n        if len(arr2) == 0 :\n            return True\n        \n        if len(arr1) < len(arr2) :\n            return False\n        \n        for i in range(0, len(arr2)) :\n            if arr2[i] not in arr1 :\n                return False\n        return True\n        \n    def find_Max(arr) : \n        '''\n        Return the maximum value that can be formed with the given list of digits\n        '''\n        if len(arr) == 0 :\n            return 0\n        \n        if len(arr) == 1 :\n            return arr[0]\n        \n        if is_Subset(arr, arr) :\n            return max(arr)\n            \n        ans = 0\n        \n        for i in range(0, len(arr)) :\n            for j in range(i+1, len(arr)) :\n                arr1 = list(arr)\n                arr1.remove(arr[i])\n                arr1.remove(arr[j])\n                \n                if is_Subset_Max(arr1, arr) :\n                    ans = max(ans, arr[i] + arr[j])\n        \n        return ans\n    \n    return find_Max(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # return 0 if input list is empty\n    if not arr:\n        return 0\n    # sort the list\n    arr.sort(reverse=True)\n    # return the sum of the list\n    return sum(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_list = list(map(int, str(arr)))\n    print(num_list)\n    num = 0\n    while(num_list) :\n        num += num_list.pop() * (10 ** (len(num_list)))\n        print(num_list)\n        num_list.reverse()\n        print(num_list)\n    return num\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x>0 and y<0):\n        return True\n    elif(x<0 and y>0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        print(True)\n    elif x > 0 and y > 0:\n        print(True)\n    else:\n        print(False)\nopposite_Signs(-2,-3)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n    \n    \ndef reverse_String(string):\n    '''\n    Write a python function to reverse the given String.\n    '''\n    return string[::-1]\n    \n    \ndef remove_Duplicates(list_of_numbers):\n    '''\n    Write a python function to remove duplicates from the list. The result should be a list with all the duplicates removed.\n    '''\n    return list(set(list_of_numbers))\n    \n    \ndef product_Of_List(list_of_numbers):\n    '''\n    Write a python function to return the product of all the numbers in the list.\n    '''\n    result = 1\n    for i in list_of_numbers:\n        result *= i\n    return result\n    \n    \ndef remove_From_List(list_of_numbers, number_to_remove):\n    '''\n    Write a python function to remove the first occurence of the number from the list. The result should be a list without the number to remove.\n    '''\n    try:\n        list_of_numbers.remove(number_to_remove)\n        return list_of_numbers\n    except:\n        return list_of_numbers\n    \n    \ndef check_palindrome(string):\n    '''\n    Write a python function to check whether the given string is a palindrome or not. The function should return true if it is a palindrome else it should return false.\n    '''\n    return string[::-1] == string\n    \n    \ndef find_Factorial(number):\n    '''\n    Write a python function to find the factorial of a given number. The result should be a single integer.\n    '''\n    return reduce(lambda x,y: x*y, range(1, number + 1), 1)\n    \n    \ndef sum_of_digits(number):\n    '''\n    Write a python function to find the sum of digits of a given number. The result should be a single integer.\n    '''\n    return sum(list(map(int, str(number))))\n    \n    \ndef larger_Number(number_1, number_2):\n    '''\n    Write a python function to find the largest number between two given numbers. The result should be a single integer.\n    '''\n    return max(number_1, number_2)\n    \n    \ndef number_Of_Digits(number):\n    '''\n    Write a python function to find the number of digits of a given number. The result should be a single integer.\n    '''\n    return len(str(number))\n    \n    \ndef find_Largest_Number(list_of_numbers):\n    '''\n    Write a python function to find the largest number from a list of numbers. The result should be a single integer.\n    '''\n    return max(list_of_numbers)\n    \n    \ndef sum_Of_Even_Numbers(list_of_numbers):\n    '''\n    Write a python function to find the sum of all even numbers from a list of numbers. The result should be a single integer.\n    '''\n    return sum([number for number in list_of_numbers if number % 2 == 0])\n    \n    \ndef remove_From_List_v2(list_of_numbers, number_to_remove):\n    '''\n    Write a python function to remove the given number from the list. The result should be a list without the number to remove.\n    '''\n    index = list_of_numbers.index(number_to_remove)\n    list_of_numbers.pop(index)\n    return list_of_numbers\n    \n    \ndef append_List_With_Sum(list_of_numbers, sum_to_add):\n    '''\n    Write a python function to add the sum of the list of numbers to the end of the list. The result should be a list with the sum at the end.\n    '''\n    list_of_numbers.append(sum_to_add)\n    return list_of_numbers\n    \n    \ndef append_List_With_Sum_v2(list_of_numbers, sum_to_add):\n    '''\n    Write a python function to add the sum of the list of numbers to the end of the list. The result should be a list with the sum at the beginning.\n    '''\n    list_of_numbers.insert(0, sum_to_add)\n    return list_of_numbers\n    \n    \ndef make_String_Upper_Case(string):\n    '''\n    Write a python function to make the given string upper case.\n    '''\n    return string.upper()\n    \n    \ndef make_String_Lower_Case(string):\n    '''\n    Write a python function to make the given string lower case.\n    '''\n    return string.lower()\n    \n    \ndef find_Least_Occuring_Character(string):\n    '''\n    Write a python function to find the least occuring character from the given string. The result should be a single character.\n    '''\n    return min(string, key=string.count)\n    \n    \ndef replace_Character(string, old_character, new_character):\n    '''\n    Write a python function to replace all occurences of the given character with the new character in the given string. The result should be a string.\n    '''\n    return string.replace(old_character, new_character)\n    \n    \ndef number_Of_Occurences_Of_Character(string, character):\n    '''\n    Write a python function to count the number of occurences of the given character from the given string. The result should be a single integer.\n    '''\n    return string.count(character)\n    \n    \ndef count_Vowels(string):\n    '''\n    Write a python function to count the number of vowels in the given string. The result should be a single integer.\n    '''\n    return sum([string.count(character) for character in \"aeiou\"])\n    \n    \ndef find_Longest_Word(list_of_words):\n    '''\n    Write a python function to find the longest word from the list of given words. The result should be a string.\n    '''\n    return max(list_of_words, key=len)\n    \n    \ndef reverse_Word(word):\n    '''\n    Write a python function to reverse the given word.\n    '''\n    return word[::-1]\n    \n    \ndef filter_Words(list_of_words):\n    '''\n    Write a python function to filter the list of given words to keep only those that starts with the letter A. The result should be a list of words.\n    '''\n    return list(filter(lambda word: word[0] == \"a\", list_of_words))\n    \n    \ndef remove_Duplicate_Words(list_of_words):\n    '''\n    Write a python function to remove all the duplicated words from the given list of words. The result should be a list of unique words.\n    '''\n    return list(set(list_of_words))\n    \n    \ndef sum_Of_Numbers_In_String(string):\n    '''\n    Write a python function to sum all the numbers in the given string. The numbers could be in the format like 123, 123.456, 123.456.789 and so on. The result should be a single number.\n    '''\n    return sum([int(number) for number in re.findall(r'\\d+\\.?\\d*', string)])\n    \n    \ndef sum_Of_Numbers_In_String_v2(string):\n    '''\n    Write a python function to sum all the numbers in the given string. The numbers could be in the format like 123, 123.456, 123.456.789 and so on. The result should be a single number.\n    '''\n    return sum([int(number) for number in string.split(\".\")])\n    \n    \ndef get_Mean_Of_List(list_of_numbers):\n    '''\n    Write a python function to get the mean of a list of numbers. The result should be a single number.\n    '''\n    return reduce(lambda x,y: x+y, list_of_numbers) / len(list_of_numbers)"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0 or x>0 and y<0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #defining the variables\n    \n    #defining a function which compares the signs of the variables\n    \n    #conditions\n    \n    #returning the value\n    \n    return x<0 and y>0 or x>0 and y<0\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        print(\"True\")\n    else:\n        print(\"False\")\nopposite_Signs(3,-2)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # first octagonal number is 1\n    # add 1 to each number in the sequence\n    # add 1 to the sequence, incrementing the index by 1\n    # and iterate n times\n    # add 1 to each number in the sequence\n    # iterate the sequence\n    # first octagonal number is 1\n    # add 1 to each number in the sequence\n    # add 1 to the sequence, incrementing the index by 1\n    # and iterate n times\n    \n    oct_seq = [1, 1]\n    for i in range(n):\n        oct_seq.append(oct_seq[-1] + 1)\n        oct_seq.append(oct_seq[-1] + 1)\n    return oct_seq[n]\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    return n*(2*(n-1)+1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    return n*(2*n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (3*n**2) + (2*n) + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + is_octagonal(n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    import math\n    return int(round(n*(3*(n+1) - math.sqrt(n**2 + (2*n+1)**2)))//2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    return n*(3*n-1)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n <= 0):\n        return False\n    else:\n        # Keep going until you hit the nth octagonal number\n        nth_octagonal_number = 2 * n * n - n + 1\n        while (nth_octagonal_number > n):\n            nth_octagonal_number = 2 * n * n - n + 1\n            n += 1\n        return nth_octagonal_number\n        \ndef main():\n    num_triangles = 5\n    sum_triangles = 0\n    # Since the first 5 triangles are in a row, we can use a while loop\n    while (num_triangles <= 50):\n        # Add the perimeter of the current triangle\n        sum_triangles += is_pentagonal(num_triangles)\n        num_triangles += 1\n    print(sum_triangles)\n        \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    mydict = defaultdict(int)\n    start = 0\n    sum1 = 0\n    for end in range(len(s)):\n        sum1 = 0\n        for i in range(start, end+1):\n            if(i == start):\n                sum1 += ord(s[i]) - ord('0')\n            else:\n                sum1 += (ord(s[i]) - ord('0') + 1)\n            if(sum1 == end - start + 1):\n                mydict[s[start:end+1]] += 1\n        start += 1\n    return(mydict)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # base case\n    if s == \"\":\n        return 0\n    # if string is just one character, return 1\n    if len(s) == 1:\n        return 1\n    # we have a string with at least 2 characters\n    substrings = 0\n    # we count substring of all possible lengths\n    for x in range(1, len(s)):\n        # we count substring of all possible lengths\n        substrings += len(s) - x + 1\n    # if the sum of digits of a substring of all possible lengths is equal to its length\n    # we have a substring with sum of digits equal to its length\n    substrings += len(s) % 10 == 0\n    return substrings\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (j - i) + 1 <= len(s) and sum(map(int, s[i:j+1])) == j - i + 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #if len(s) == 1:\n    #    return 1\n    #if len(s) == 2:\n    #    if (int(s[0]) + int(s[1])) == len(s):\n    #        return 2\n    #    else:\n    #        return 1\n    #return count_Substrings(s[1:]) + count_Substrings(s[2:])\n    #print(s)\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if (int(s[0]) + int(s[1])) == len(s):\n            return 2\n        else:\n            return 1\n    return count_Substrings(s[1:]) + count_Substrings(s[2:])\n    \ndef subsets_of_string(s):\n    '''\n    Write a python function to generate all subsets of a string. \n    '''\n    if len(s) == 1:\n        return [s]\n    if len(s) == 2:\n        if (int(s[0]) + int(s[1])) == len(s):\n            return [s, s[1]]\n        else:\n            return [s]\n    return subsets_of_string(s[1:]) + subsets_of_string(s[2:])\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    return len([1 for i in range(1,len(s)) for j in range(len(s)-i+1) if sum([int(x) for x in s[j:j+i]])==i])\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if sum(int(x) for x in s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    n=len(s)\n    for i in range(n):\n        for j in range(i,n):\n            summ=0\n            for k in range(i,j+1):\n                summ+=int(s[k])\n            if summ==j-i+1:\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        left = i\n        right = i\n        sum = 0\n        while left >= 0 and right < len(s) and sum <= len(s):\n            sum += ord(s[left]) - ord('0')\n            sum += ord(s[right]) - ord('0')\n            if sum == len(s):\n                ans += 1\n            sum -= ord(s[left]) - ord('0')\n            sum -= ord(s[right]) - ord('0')\n            left -= 1\n            right += 1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    palin = defaultdict(lambda: 0)\n    for j in range(n):\n        for i in range(j, n):\n            sub = s[j:i+1]\n            sub_len = len(sub)\n            sub_sum = sum([int(i) for i in sub])\n            if sub_sum == sub_len:\n                palin[sub] += 1\n    return palin\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    # Nested for loop\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            summ = 0\n            for k in range(i, j+1):\n                summ += int(s[k])\n            if summ == j-i+1:\n                count += 1\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = float(\"inf\")\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #Base case\n    if len(xs) == 1:\n        return xs[0]\n    #Recursive case\n    else:\n        #get the smallest number from the list, xs, and pass it on as the new list xs\n        return smallest_num([x for x in xs if x < smallest_num(xs)])\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for i in range(1, len(xs)):\n        if smallest_num > xs[i]:\n            smallest_num = xs[i]\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Your code goes here\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Your code here\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    min_ = xs[0]\n    for x in xs:\n        if x < min_:\n            min_ = x\n    return min_\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = xs[0]\n    for i in xs:\n        if i < x:\n            x = i\n    return x\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                if test_list[i]-test_list[j] > max:\n                    max = test_list[i] - test_list[j]\n            else:\n                if test_list[j]-test_list[i] > max:\n                    max = test_list[j] - test_list[i]\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i] == test_list[j] or (test_list[i] - test_list[j] > max_diff) or (test_list[j] - test_list[i] > max_diff):\n                continue\n            else:\n                max_diff = test_list[i] - test_list[j]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    print(\"max_difference(test_list)\")\n    max_dif = 0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] - test_list[j] > max_dif:\n                max_dif = test_list[i] - test_list[j]\n    return max_dif\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    n = len(test_list)\n    return test_list[-1] - test_list[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    i = 0\n    current_min = test_list[0]\n    current_max = test_list[0]\n    max_diff = 0\n    while i < len(test_list)-1:\n        if abs(test_list[i] - test_list[i+1]) > max_diff:\n            max_diff = abs(test_list[i] - test_list[i+1])\n            current_min = min(test_list[i],test_list[i+1])\n            current_max = max(test_list[i],test_list[i+1])\n        i += 2\n    return max_diff,current_min,current_max\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                difference = test_list[i] - test_list[j]\n                if difference > 0:\n                    return difference\n    return None\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return 0\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -float('inf')\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    # Method 1:\n    # I have to create a new list with only the elements in pairs. \n    # Now, I have to traverse through the list and find the maximum difference between adjacent pairs.\n    # l = list(test_list)\n    # l2 = []\n    # for i in range(0, len(l)):\n    #     if i % 2 == 0:\n    #         l2.append(l[i])\n    #     else:\n    #         l2.append(l[i])\n    #         l2.append(l[i])\n    # print(\"Maximum difference between adjacent pairs in the list:\", max(list(map(lambda x: abs(x[0] - x[1]), list(zip(l2[:-1], l2[1:]))))))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    tuple_list = [tuple(el.split(',')) for el in test_list]\n    tuple_list = [tuple(int(el[0]), int(el[1])) for el in tuple_list]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks[1]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        for j in range(len(subjectmarks)-1):\n            if subjectmarks[j][1]>subjectmarks[j+1][1]:\n                temp=subjectmarks[j]\n                subjectmarks[j]=subjectmarks[j+1]\n                subjectmarks[j+1]=temp\n    print(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def take_second(item):\n        return item[1]\n    return sorted(subjectmarks, key = take_second)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #sorted_list = []\n    #for element in subjectmarks:\n    #    sorted_list.append(element)\n    #sorted_list.sort(key=lambda x: x[1])\n    #print(sorted_list)\n    \n    '''\n    Write a Python program to sort a list of tuples using Lambda.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    print(sorted_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n    \nsubjectmarks = [('Geometry', 80),('English', 90),('Science', 60),('Maths', 70)]\nprint(subject_marks(subjectmarks))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    new_list = sorted(subjectmarks, key=lambda x: x[1])\n    for i in new_list:\n        print(i[0], i[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks[1]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for sub in subjectmarks:\n        print(sub[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        if isinstance(element, list):\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        if len(data_list) == 0:\n            return 0\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def sum_numbers(numbers):\n        return sum(numbers)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Method 1:\n    #base case\n    if len(data_list) == 1:\n        return data_list[0]\n    #recursive case\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base Case\n    if len(data_list) == 1 and type(data_list[0]) == int:\n        return sum(data_list)\n    # Recursive Case\n    else:\n        return sum([recursive_list_sum(data_list[i:]) for i in range(len(data_list))])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_of_elements = 0\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    \n    result = 0\n    for item in data_list:\n        result += recursive_list_sum(item)\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list)==0:\n        return 0\n    else:\n        return data_list[0]+recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if there are no lists\n    if not data_list:\n        return 0\n    # otherwise\n    else:\n        # iterate through list of lists\n        # first element of each sublist is a string\n        # so we'll return the sum of the first element of each sublist\n        # the second element of each sublist is an int\n        # so we'll return the sum of the second element of each sublist\n        # so we'll return the sum of the recursive call on the second element of each sublist\n        # and we'll return the recursive call on the first element of each sublist\n        # and return the sum of those two recursive calls\n        return sum([recursive_list_sum(data_list[0])] + [recursive_list_sum(data_list[1:])])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    if not data_list:\n        return result\n    for element in data_list:\n        if isinstance(element, list):\n            result += recursive_list_sum(element)\n        else:\n            result += element\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i]>0:\n            count+=1\n    print(count)\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_count = 0\n    for i in list:\n        if i > 0:\n            positive_count += 1\n    return positive_count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for num in list:\n        if num > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x>0:\n            count+=1\n    return count\nprint(pos_count([1,2,3,4,5,6,-5,-6]))\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    print(f\"Positive Numbers = {len([i for i in list if i > 0])}\")\n    return len([i for i in list if i > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 6227020, 299800775, 9788076278, 4815562215, 348912045057]\n    bell_number = 0\n    for i in range(0, n + 1):\n        bell_number += bell_number_helper(i, bells)\n    return bell_number\n    \ndef bell_number_helper(n, bells):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return bell_number_helper(n - 1, bells) + bell_number_helper(n - 2, bells) + bell_number_helper(n - 3, bells)\n        \nif __name__ == '__main__':\n    print('Bell number 0:', bell_number(0))\n    print('Bell number 1:', bell_number(1))\n    print('Bell number 2:', bell_number(2))\n    print('Bell number 3:', bell_number(3))\n    print('Bell number 4:', bell_number(4))\n    print('Bell number 5:', bell_number(5))\n    print('Bell number 6:', bell_number(6))\n    print('Bell number 7:', bell_number(7))\n    print('Bell number 8:', bell_number(8))\n    print('Bell number 9:', bell_number(9))\n    print('Bell number 10:', bell_number(10))"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_list = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 470096, 2942926, 18122491, 124595302, 648018637, 410044238]\n    bell_set = set(bell_list)\n    if n in bell_set:\n        return bell_list[n-1]\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1,1]\n    if n <= 1:\n        return bells[n]\n    else:\n        for i in range(2,n+1):\n            bells.append(bells[i-1] + i*bells[i-2])\n        return bells[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = []\n    for i in range(1, n + 1):\n        bell_numbers.append(binomial_coefficient(2 * i, i))\n    return bell_numbers\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_list = [0, 1, 2]\n    for i in range(3,n+1):\n        bell_list.append(bell_list[i-1]+bell_list[i-2])\n    return bell_list[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def get_bell(n):   \n        '''\n        Write a function to get all the Bell numbers from 1 to n.\n        '''\n        \n        def bell_recursion(n):   \n            '''\n            Write a function to get all the Bell numbers from 1 to n using recursion.\n            '''\n            \n            if n == 1:   \n                return 1   \n            elif n == 2:   \n                return 2   \n            else:   \n                return bell_recursion(n-1) + bell_recursion(n-2)\n            \n        bell_numbers = [bell_recursion(i) for i in range(1, n+1)]   \n        return bell_numbers   \n        \n    def partition(n):   \n        '''\n        Write a function to partition a set of Bell numbers using dynamic programming.\n        '''\n        \n        def bell_dynamic_programming(n):   \n            '''\n            Write a function to partition a set of Bell numbers using dynamic programming.\n            '''\n            \n            bell = [0] * (n+1)   \n            bell[0] = bell[1] = 1   \n            for i in range(2, n+1):   \n                for k in range(i):   \n                    bell[i] += bell[i-k-1] * bell[k]   \n            return bell\n            \n        return bell_dynamic_programming(n)\n    \n    def partitions(n, m):   \n        '''\n        Write a function to partition a set of Bell numbers using dynamic programming.\n        '''\n        \n        bell = [0] * (n+1)   \n        bell[0] = bell[1] = 1   \n        for i in range(2, n+1):   \n            for k in range(i):   \n                bell[i] += bell[i-k-1] * bell[k]   \n        total = 0   \n        for i in range(n, m+1):   \n            total += bell[i]   \n        return total   \n    \n    return partitions(n, n*(n+1)//2) - bell_number(n)\n    \ndef euler_problem_solving():   \n    '''\n    Write a function to solve the Euler problem.\n    '''\n    \n    def solution(n, m):   \n        '''\n        Write a function to solve the Euler problem.\n        '''\n        \n        def solution_recursion(n, m):   \n            '''\n            Write a function to solve the Euler problem.\n            '''\n            \n            def solution_recursion_helper(n, m, x):   \n                '''\n                Write a function to solve the Euler problem.\n                '''\n                \n                if m == 0:   \n                    return x   \n                else:   \n                    return solution_recursion_helper(n, m-1, x+solution_recursion_helper(n-1, m, 1))   \n                \n            return solution_recursion_helper(n, m, 0)\n        \n        def solution_recursion_dynamic(n, m):   \n            '''\n            Write a function to solve the Euler problem.\n            '''\n            \n            solution = [[0 for j in range(m+1)] for i in range(n+1)]   \n            solution[0][0] = 1   \n            for i in range(1, n+1):   \n                for j in range(0, m+1):   \n                    solution[i][j] = solution[i-1][j]   \n                    if j >= i:   \n                        solution[i][j] += solution[i-1][j-i]   \n            return solution[n][m]   \n        \n        return solution_recursion(n, m) - solution_recursion_dynamic(n, m)\n    \n    return solution(10, 20)\n    \ndef sum_of_proper_divisors(n):   \n    '''\n    Write a function to sum of proper divisors of a given number.\n    '''\n    \n    def sum_of_proper_divisors_recursion(n):   \n        '''\n        Write a function to sum of proper divisors of a given number.\n        '''\n        \n        def sum_of_proper_divisors_recursion_helper(n):   \n            '''\n            Write a function to sum of proper divisors of a given number.\n            '''\n            \n            if n == 1:   \n                return 1   \n            else:   \n                return sum_of_proper_divisors_recursion_helper(n-1) + n   \n        \n        return sum_of_proper_divisors_recursion_helper(n) - n   \n    \n    def sum_of_proper_divisors_dynamic(n):   \n        '''\n        Write a function to sum of proper divisors of a given number.\n        '''\n        \n        def sum_of_proper_divisors_dynamic_helper(n):   \n            '''\n            Write a function to sum of proper divisors of a given number.\n            '''\n            \n            divisors = [1]   \n            for i in range(2, int(n**0.5)+1):   \n                if n%i == 0:   \n                    divisors.append(i)   \n                    if n//i!= i:   \n                        divisors.append(n//i)   \n            return sum(divisors)   \n        \n        return sum_of_proper_divisors_dynamic_helper(n) - n   \n    \n    return sum_of_proper_divisors_recursion(n) - sum_of_proper_divisors_dynamic(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = []\n    for x in range(1, n):\n        for i in range(x):\n            j = x - i\n            if i > j:\n                break\n            bells.append(bell(i) * bell(j))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #Bell Number is a natural number which is the sum of the factorial of the number of elements in a set of numbers.\n    #So if you find the factorial of a number and add it to the number itself, you get the bell number.\n    bell_num = [1,2,5,15,52,203,822,4140,22381,138404,479001600]\n    if n > len(bell_num):\n        raise ValueError('Out of range')\n    return bell_num[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [0,1,1]\n    for i in range(3, n+1):\n        bells.append(sum([bells[i-j-1]*bells[j] for j in range(i)]))\n    return bells[n]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in xrange(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in xrange(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A = sorted(A)\n    count = 1\n    for i in range(len(A)):\n        if (A[i] == A[i-1]):\n            count += 1\n    if (count == len(A)):\n        return True\n    else:\n        return False\n    \ndef test_is_monotonic():\n    assert(is_Monotonic([0, 1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([5, 4, 3, 2, 1]) == False)\n    assert(is_Monotonic([1, 1, 1, 1, 1]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([0, 1, 2, 3, 4]) == True)\n    assert(is_Monotonic([5, 4, 3, 2, 1]) == True)\n    assert(is_Monotonic([0, 1, 2, 3, 4]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 1, 1, 1, 1]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, 5]) == True)\n    assert(is_Monotonic([1, 2, 3, 4, "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \ndef fill_with_negatives(A):\n    '''\n    Write a python function to replace all the negative elements of an array with -1 without changing the original array.\n    '''\n    A=[-1 if x<0 else x for x in A]\n    return A\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n  "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Base Cases \n    if len(A) <= 2:\n        return True\n    # O(n)\n    # Find the index of the first and last element\n    first = 0\n    last = len(A) - 1\n    # If the first element is greater than the last element, the list is descending\n    if A[first] > A[last]:\n        return False\n    # If the last element is smaller than the first element, the list is ascending\n    if A[first] < A[last]:\n        return False\n    # O(n)\n    # Traverse through the list to find the index of the first and last element\n    while first < last:\n        # Find the index of the first element\n        while first < last and A[first + 1] >= A[first]:\n            first += 1\n        # Find the index of the last element\n        while first < last and A[last - 1] <= A[last]:\n            last -= 1\n        # If there is a decrease between first and last element, return false\n        if first < last:\n            return False\n    # If the first and last element are not the same, return true\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #https://www.geeksforgeeks.org/is-array-monotonic-increasing-or-decreasing/\n    if A==None:\n        print(\"Empty Array\")\n        return False\n    if len(A) < 2:\n        return True\n    i = 0\n    while i < len(A) - 1 and A[i] <= A[i + 1]:\n        i += 1\n        if i == len(A)-1:\n            return True\n    while i < len(A) - 1 and A[i] >= A[i + 1]:\n        i += 1\n        if i == len(A) - 1:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # if l == [] or s == []:\n    #     return False\n    # elif l == s:\n    #     return True\n    # elif len(s) > len(l):\n    #     return False\n    # else:\n    #     i = 0\n    #     j = 0\n    #     while i < len(l):\n    #         if l[i]!= s[j]:\n    #             i += 1\n    #         else:\n    #             j += 1\n    #             if j == len(s):\n    #                 return True\n    #             i += 1\n    #             j = 0\n    #     return False\n    #\n    # is_sublist([1,2,3], [1,2]) == True\n    # is_sublist([1,2,3], [1,2,3]) == True\n    # is_sublist([1,2,3], [1,2,3,4]) == True\n    # is_sublist([1,2,3], [4]) == False\n    # is_sublist([1,2,3], []) == False\n    # is_sublist([], [1,2,3]) == False\n    # is_sublist([1,2,3,4,5], [1,2,3]) == True\n    # is_sublist([1,2,3,4,5], [1,2,3,4,5]) == True\n    # is_sublist([1,2,3,4,5], [1,2,4,5]) == True\n    # is_sublist([1,2,3,4,5], [1,3,4,5]) == True\n    # is_sublist([1,2,3,4,5], [1,3,4]) == False\n    # is_sublist([1,2,3,4,5], [1,3,5]) == True\n    # is_sublist([1,2,3,4,5], [1,3,6]) == False\n    # is_sublist([1,2,3,4,5], [1,3,4,5,6]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s==[]:\n        return True\n    for i in range(len(l)):\n        if l[i:i+len(s)]==s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sublist_len = len(s)\n    for i in range(len(l)-sublist_len+1):\n        if l[i:i+sublist_len] == s:\n            return True\n    return False\n    \ndef find_missing_number(l):\n    '''\n    Write a function that returns the missing number in a given list of integers\n    '''\n    s = set(l)\n    n = len(l) + 1\n    for i in range(n):\n        if i not in s:\n            return i\n            \ndef find_missing_number_v2(l):\n    '''\n    Write a function that returns the missing number in a given list of integers\n    using XOR\n    '''\n    n = len(l)\n    x = 0\n    for i in range(n+1):\n        x ^= i\n    for i in l:\n        x ^= i\n    return x\n    \ndef find_missing_number_v3(l):\n    '''\n    Write a function that returns the missing number in a given list of integers\n    using Gauss' Formula\n    '''\n    n = len(l)\n    sum_of_n = n*(n+1)//2\n    sum_of_l = sum(l)\n    return sum_of_n - sum_of_l\n    \ndef reverse(l):\n    '''\n    Write a function to reverse a given list of integers.\n    '''\n    return l[::-1]\n    \ndef rotate(l, n):\n    '''\n    Write a function to rotate the list by n elements towards left.\n    '''\n    return l[n:] + l[:n]\n    \ndef rotate_v2(l, n):\n    '''\n    Write a function to rotate the list by n elements towards left using slicing.\n    '''\n    return l[n:] + l[:n]\n    \ndef sum_of_list(l):\n    '''\n    Write a function to get the sum of all elements of a given list.\n    '''\n    s = 0\n    for i in l:\n        s += i\n    return s\n    \ndef sum_of_list_v2(l):\n    '''\n    Write a function to get the sum of all elements of a given list using reduce.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: x+y, l)\n    \ndef sum_of_list_v3(l):\n    '''\n    Write a function to get the sum of all elements of a given list using reduce and lambda.\n    '''\n    return reduce(lambda x, y: x+y, l)\n    \ndef product_of_list(l):\n    '''\n    Write a function to multiply all elements of a given list.\n    '''\n    p = 1\n    for i in l:\n        p *= i\n    return p\n    \ndef product_of_list_v2(l):\n    '''\n    Write a function to multiply all elements of a given list using reduce and lambda.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: x*y, l)\n    \ndef product_of_list_v3(l):\n    '''\n    Write a function to multiply all elements of a given list using reduce and lambda.\n    '''\n    return reduce(lambda x, y: x*y, l)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sublist_len = len(s)\n    for i in range(len(l)):\n        if sublist_len == 0:\n            return True\n        if l[i] == s[0]:\n            if len(s) > 1:\n                if l[i:i+sublist_len] == s:\n                    return True\n            else:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s1 = sorted(s)\n    l1 = sorted(l)\n    if l1 == s1:\n        return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    result = False\n    if s == []:\n        result = True\n    elif l == []:\n        result = False\n    else:\n        for i in l:\n            if len(i) == len(s[0]):\n                if all(j in i for j in s[0]):\n                    result = True\n                    break\n                else:\n                    result = False\n    return result\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l == s_ or l[i:i+len(s_)] == s_ for i in range(len(l) - len(s) + 1))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i] == s[0]:\n            if l[i+1:i+len(s)] == s:\n                return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            Output.append(False)\n        else:\n            Output.append(True)\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = iter(Input)\n    first = next(Input, None)\n    if first == None:\n        return True\n    for ele in Input:\n        if len(ele)!= len(first):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i) == len(Input[0]):\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # return len(set(map(len, Input))) == 1\n    return len(set(map(len, Input))) == 1 and len(Input) == len(set(Input))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    return (all(len(Input[0]) == len(element) for element in Input))\n    \nInput = [(\"a\",\"b\"), (\"a\",\"c\"), (\"a\",\"d\"), (\"a\",\"e\"), (\"a\",\"b\")]\nprint(find_equal_tuple(Input)"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if(len(Input) == len(Input[0])):\n        return True\n    else:\n        return False\n    \ndef find_equal_tuple_2(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if(len(set([len(i) for i in Input])) == 1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for item in Input:\n        if len(item)!= len(Input[0]):\n            Output.append(False)\n        else:\n            Output.append(True)\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return True\n    elif len(Input) == 1:\n        return True\n    else:\n        for i in range(len(Input)-1):\n            if len(Input[i])!= len(Input[i+1]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_list = [tuple(i) for i in Input]\n    print(tuple_list)\n    if len(set(map(len, tuple_list)))!= 1:\n        return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                swap(i, i + gap)\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    combsort(nums, 0, len(nums)-1)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        print(gap)\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n    \n    while gap!= 1 or swapped == True:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n            \n        swapped = False\n        \n        for i in range(0,size-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i],nums[i+gap] = nums[i+gap],nums[i]\n                swapped = True\n        \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))  # minimum gap is 1\n        swapped = False\n        \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                swap(nums, i, i + gap)\n                swapped = True\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums = nums.copy()\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0,n+1):\n        for j in range(0,n+1):\n            if (i**2 + j**2 == n):\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i == 1:\n                return False\n            else:\n                if (n/i) == i:\n                    return False\n                else:\n                    return True\n        else:\n            return False\n        \n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while(i*i <= n): \n        if ((i*i + i) == n): \n            return True\n        i = i + 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # input is a number n\n    # output is true if n can be written as sum of two squares and false if not\n    for i in range(1, n):\n        if i**2 < n:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i < n:\n        i = i + 2\n    if i*i == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<1:\n        return False\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            if (i*i==n):\n                return True\n            if (i*i-n)==0:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i=0\n    while(i*i<n):\n        j=n-i*i\n        if j>=0:\n            break\n        i=i+1\n    if i*i == n:\n        return i,j\n    else:\n        return -1,-1\ndef dif_Squares(n):\n    '''\n    Write a python function to return the maximum possible difference between the squares of the given number.\n    '''\n    i=0\n    while(i*i<n):\n        j=n-i*i\n        if j>=0:\n            break\n        i=i+1\n    return i,j\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = int(math.sqrt(n))\n    if (s*s == n):\n        return True\n    for i in range(1,s+1):\n        for j in range(i,s+1):\n            if i*i + j*j == n:\n                return True\n    return False\ndef main():\n    print(dif_Square(11))\n    print(dif_Square(9))\n    print(dif_Square(100))\n    print(dif_Square(3))\n    print(dif_Square(4))\n    print(dif_Square(15))\n    print(dif_Square(10))\n    print(dif_Square(49))\n    print(dif_Square(12))\n    print(dif_Square(64))\n    print(dif_Square(1))\n    print(dif_Square(5))\n    print(dif_Square(50))\n    print(dif_Square(7))\n    print(dif_Square(6))\n    print(dif_Square(50))\n    print(dif_Square(51))\n    print(dif_Square(52))\n    print(dif_Square(53))\n    print(dif_Square(54))\n    print(dif_Square(55))\n    print(dif_Square(56))\n    print(dif_Square(57))\n    print(dif_Square(58))\n    print(dif_Square(59))\n    print(dif_Square(60))\n    print(dif_Square(61))\n    print(dif_Square(62))\n    print(dif_Square(63))\n    print(dif_Square(64))\n    print(dif_Square(65))\n    print(dif_Square(66))\n    print(dif_Square(67))\n    print(dif_Square(68))\n    print(dif_Square(69))\n    print(dif_Square(70))\n    print(dif_Square(71))\n    print(dif_Square(72))\n    print(dif_Square(73))\n    print(dif_Square(74))\n    print(dif_Square(75))\n    print(dif_Square(76))\n    print(dif_Square(77))\n    print(dif_Square(78))\n    print(dif_Square(79))\n    print(dif_Square(80))\n    print(dif_Square(81))\n    print(dif_Square(82))\n    print(dif_Square(83))\n    print(dif_Square(84))\n    print(dif_Square(85))\n    print(dif_Square(86))\n    print(dif_Square(87))\n    print(dif_Square(88))\n    print(dif_Square(89))\n    print(dif_Square(90))\n    print(dif_Square(91))\n    print(dif_Square(92))\n    print(dif_Square(93))\n    print(dif_Square(94))\n    print(dif_Square(95))\n    print(dif_Square(96))\n    print(dif_Square(97))\n    print(dif_Square(98))\n    print(dif_Square(99))\n    print(dif_Square(100))\n    print(dif_Square(101))\n    print(dif_Square(102))\n    print(dif_Square(103))\n    print(dif_Square(104))\n    print(dif_Square(105))\n    print(dif_Square(106))\n    print(dif_Square(107))\n    print(dif_Square(108))\n    print(dif_Square(109))\n    print(dif_Square(110))\n    print(dif_Square(111))\n    print(dif_Square(112))\n    print(dif_Square(113))\n    print(dif_Square(114))\n    print(dif_Square(115))\n    print(dif_Square(116))\n    print(dif_Square(117))\n    print(dif_Square(118))\n    print(dif_Square(119))\n    print(dif_Square(120))\n    print(dif_Square(121))\n    print(dif_Square(122))\n    print(dif_Square(123))\n    print(dif_Square(124))\n    print(dif_Square(125))\n    print(dif_Square(126))\n    print(dif_Square(127))\n    print(dif_Square(128))\n    print(dif_Square(129))\n    print(dif_Square(130))\n    print(dif_Square(131))\n    print(dif_Square(132))\n    print(dif_Square(133))\n    print(dif_Square(134))\n    print(dif_Square(135))\n    print(dif_Square(136))\n    print(dif_Square(137))\n    print(dif_Square(138))\n    print(dif_Square(139))\n    print(dif_Square(140))\n    print(dif_Square(141))\n    print(dif_Square(142))\n    print(dif_Square(143))\n    print(dif_Square(144))\n    print(dif_Square(145))\n    print(dif_Square(146))\n    print(dif_Square(147))\n    print(dif_Square(148))\n    print(dif_Square(149))\n    print(dif_Square(150))\n    print(dif_Square(151))\n    print(dif_Square(152))\n    print(dif_Square(153))\n    print(dif_Square(154))\n    print(dif_Square(155))\n    print(dif_Square(156))\n    print(dif_Square(157))\n    print(dif_Square(158))\n    print(dif_Square(159))\n    print(dif_Square(160))\n    print(dif_Square(161))\n    print(dif_Square(162))\n    print(dif_Square(163))\n    print(dif_Square(164))\n    print(dif_Square(165))\n    print(dif_Square(166))\n    print(dif_Square(167))\n    print(dif_Square(168))\n    print(dif_Square(169))\n    print(dif_Square(170))\n    print(dif_Square(171))\n    print(dif_Square(172))\n    print(dif_Square(173))\n    print(dif_Square(174))\n    print(dif_Square(175))\n    print(dif_Square(176))\n    print(dif_Square(177))\n    print(dif_Square(178))\n    print(dif_Square(179))\n    print(dif_Square(180))\n    print(dif_Square(181))\n    print(dif_Square(182))\n    print(dif_Square(183))\n    print(dif_Square(184))\n    print(dif_Square(185))\n    print(dif_Square(186))\n    print(dif_Square(187))\n    print(dif_Square(188))\n    print(dif_Square(189))\n    print(dif_Square(190))\n    print(dif_Square(191))\n    print(dif_Square(192))\n    print(dif_Square(193))\n    print(dif_Square(194))\n    print(dif_Square(195))\n    print(dif_Square(196))\n    print(dif_Square(197))\n    print(dif_Square(198))\n    print(dif_Square(199))\n    print(dif_Square(200))\n    print(dif_Square(201))\n    print(dif_Square(202))\n    print(dif_Square(203))\n    print(dif_Square(204))\n    print(dif_Square(205))\n    print(dif_Square(206))\n    print(dif_Square(207))\n    print(dif_Square(208))\n    print(dif_Square(209))\n    print"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while(i*i <= n):\n        if i*i == n:\n            return True\n        i = i + 1\n    return False\n    "
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if i * i + j * j == n:\n                print(i)\n                print(j)\n                print(\"Square Difference\")\n                print(i * j)\n                return\n    print(\"No Number can be represented as the difference of two squares\")\ndif_Square(10)\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        if pattern[0] not in colors:\n            return False\n        if colors.index(pattern[0]) > colors.index(pattern[1]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return True\n    \n    if len(patterns) == 0 or len(colors)!= len(patterns):\n        return False\n        \n    for i in range(len(patterns)):\n        if patterns[i] == 1:\n            if colors[i] == colors[i+1]:\n                return False\n            \n    return True\n    \n    \ndef is_bipatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return True\n    \n    if len(patterns) == 0 or len(colors)!= len(patterns):\n        return False\n        \n    for i in range(len(patterns)):\n        if patterns[i] == 1:\n            if colors[i]!= colors[i+1]:\n                return False\n            \n    return True\n    \n    \ndef is_tripatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return True\n    \n    if len(patterns) == 0 or len(colors)!= len(patterns):\n        return False\n        \n    for i in range(len(patterns)):\n        if patterns[i] == 1:\n            if colors[i]!= colors[i+1] or colors[i+1]!= colors[i+2]:\n                return False\n            \n    return True\n    \n    \ndef is_quadpatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return True\n    \n    if len(patterns) == 0 or len(colors)!= len(patterns):\n        return False\n        \n    for i in range(len(patterns)):\n        if patterns[i] == 1:\n            if colors[i]!= colors[i+1] or colors[i+1]!= colors[i+2] or colors[i+2]!= colors[i+3]:\n                return False\n            \n    return True\n    \n    \ndef is_fibonacci_sequence(sequence):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(sequence) < 2:\n        return False\n        \n    prev_1 = sequence[0]\n    prev_2 = sequence[1]\n    \n    for i in range(2, len(sequence)):\n        curr_num = sequence[i]\n        \n        if curr_num!= prev_1 + prev_2:\n            return False\n            \n        prev_1 = prev_2\n        prev_2 = curr_num\n        \n    return True\n    \n    \ndef is_trisquare(n):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if n <= 0:\n        return False\n        \n    if n == 1:\n        return True\n        \n    prev_1 = 1\n    prev_2 = 1\n    prev_3 = 0\n    \n    count = 1\n    \n    while count < n:\n        curr_num = prev_1 + prev_2 + prev_3\n        \n        if curr_num > n:\n            return False\n            \n        prev_3 = prev_2\n        prev_2 = prev_1\n        prev_1 = curr_num\n        \n        count += 1\n        \n    if curr_num == n:\n        return True\n        \n    return False\n    \n    \ndef is_pentagonal(n):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if n <= 0:\n        return False\n        \n    if n == 1:\n        return True\n        \n    prev_1 = 1\n    prev_2 = 1\n    prev_3 = 1\n    prev_4 = 0\n    \n    count = 1\n    \n    while count < n:\n        curr_num = prev_1 + prev_2 + prev_3 + prev_4\n        \n        if curr_num > n:\n            return False\n            \n        prev_4 = prev_3\n        prev_3 = prev_2\n        prev_2 = prev_1\n        prev_1 = curr_num\n        \n        count += 1\n        \n    if curr_num == n:\n        return True\n        \n    return False\n    \n    \ndef is_hexagonal(n):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if n <= 0:\n        return False\n        \n    if n == 1:\n        return True\n        \n    prev_1 = 1\n    prev_2 = 1\n    prev_3 = 1\n    prev_4 = 1\n    prev_5 = 0\n    \n    count = 1\n    \n    while count < n:\n        curr_num = prev_1 + prev_2 + prev_3 + prev_4 + prev_5\n        \n        if curr_num > n:\n            return False\n            \n        prev_5 = prev_4\n        prev_4 = prev_3\n        prev_3 = prev_2\n        prev_2 = prev_1\n        prev_1 = curr_num\n        \n        count += 1\n        \n    if curr_num == n:\n        return True\n        \n    return False\n    \n    \ndef is_heptagonal(n):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if n <= 0:\n        return False\n        \n    if n == 1:\n        return True\n        \n    prev_1 = 1\n    prev_2 = 1\n    prev_3 = 1\n    prev_4 = 1\n    prev_5 = 1\n    prev_6 = 0\n    \n    count = 1\n    \n    while count < n:\n        curr_num = prev_1 + prev_2 + prev_3 + prev_4 + prev_5 + prev_6\n        \n        if curr_num > n:\n            return False\n            \n        prev_6 = prev_5\n        prev_5 = prev_4\n        prev_4 = prev_3\n        prev_3 = prev_2\n        prev_2 = prev_1\n        prev_1 = curr_num\n        \n        count += 1\n        \n    if curr_num == n:\n        return True\n        \n    return False\n    \n    \ndef is_octagonal(n):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if n <= 0:\n        return False\n        \n    if n == 1:\n        return True\n        \n    prev_1 = 1\n    prev_2 = 1\n    prev_3 = 1\n    prev_4 = 1\n    prev_5 = 1\n    prev_6 = 1\n    prev_7 = 0\n    \n    count = 1\n    \n    while count < n:\n        curr_num = prev_1 + prev_2 + prev_3 + prev_4 + prev_5 + prev_6 + prev_7\n        \n        if curr_num > n:\n            return False\n            \n        prev_7 = prev_6\n        prev_6 = prev_5\n        prev_5 = prev_4\n        prev_4 = prev_3\n        prev_3 = prev_2\n        prev_2 = prev_1\n        prev_1 = curr_num\n        \n        count += 1\n        \n    if curr_num == n:\n        return True\n        \n    return False\n    \n    \ndef is_nonagonal(n):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if n <= 0:\n        return False\n        \n    if n == 1:\n        return True\n        \n    prev_1 = 1\n    prev_2 = 1\n    prev_3 = 1\n    prev_4 = 1\n    prev_5 = 1\n    prev_6 = 1\n    prev_7 = 1\n    prev_8 = 0\n    \n    count = 1\n    \n    whil"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    c_map = {}\n    for c in colors:\n        if c not in c_map:\n            c_map[c] = 1\n        else:\n            c_map[c] += 1\n    for p in patterns:\n        if p[0] not in c_map or c_map[p[0]] < p[1]:\n            return False\n        c_map[p[0]] -= p[1]\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    def is_samelist(sublist, prev_list):\n        if len(sublist)!= len(prev_list):\n            return False\n        for i in range(0, len(sublist)):\n            if sublist[i]!= prev_list[i]:\n                return False\n        return True\n    \n    if len(colors)!= len(patterns):\n        return False\n    \n    prev_list = []\n    for color in colors:\n        if len(prev_list) == 0:\n            prev_list = [color]\n        else:\n            if is_samelist(prev_list, patterns[prev_list[-1]]):\n                prev_list.append(color)\n            else:\n                return False\n    \n    if is_samelist(prev_list, patterns[prev_list[-1]]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    hash_map = {}\n    for i, j in zip(colors, patterns):\n        if j not in hash_map:\n            hash_map[i] = j\n        else:\n            if hash_map[i]!= j:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    print(colors, patterns)\n    if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3]:\n        print('test')\n    elif colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[3] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[0] and colors[1] == patterns[2] and colors[2] == patterns[1] and colors[3] == patterns[3]:\n        print('test')\n    elif colors[0] == patterns[0] and colors[1] == patterns[3] and colors[2] == patterns[1] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[0] and colors[1] == patterns[2] and colors[2] == patterns[3] and colors[3] == patterns[1]:\n        print('test')\n    elif colors[0] == patterns[1] and colors[1] == patterns[0] and colors[2] == patterns[3] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[1] and colors[1] == patterns[2] and colors[2] == patterns[0] and colors[3] == patterns[3]:\n        print('test')\n    elif colors[0] == patterns[1] and colors[1] == patterns[3] and colors[2] == patterns[2] and colors[3] == patterns[0]:\n        print('test')\n    elif colors[0] == patterns[1] and colors[1] == patterns[2] and colors[2] == patterns[3] and colors[3] == patterns[1]:\n        print('test')\n    elif colors[0] == patterns[2] and colors[1] == patterns[0] and colors[2] == patterns[3] and colors[3] == patterns[1]:\n        print('test')\n    elif colors[0] == patterns[2] and colors[1] == patterns[3] and colors[2] == patterns[1] and colors[3] == patterns[0]:\n        print('test')\n    elif colors[0] == patterns[2] and colors[1] == patterns[3] and colors[2] == patterns[0] and colors[3] == patterns[1]:\n        print('test')\n    elif colors[0] == patterns[2] and colors[1] == patterns[0] and colors[2] == patterns[1] and colors[3] == patterns[3]:\n        print('test')\n    elif colors[0] == patterns[2] and colors[1] == patterns[1] and colors[2] == patterns[3] and colors[3] == patterns[0]:\n        print('test')\n    elif colors[0] == patterns[2] and colors[1] == patterns[3] and colors[2] == patterns[0] and colors[3] == patterns[1]:\n        print('test')\n    elif colors[0] == patterns[2] and colors[1] == patterns[3] and colors[2] == patterns[1] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[0] and colors[2] == patterns[1] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[2] and colors[2] == patterns[3] and colors[3] == patterns[1]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[1] and colors[2] == patterns[0] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[2] and colors[2] == patterns[1] and colors[3] == patterns[3]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[0]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[0] and colors[2] == patterns[1] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[1] and colors[2] == patterns[0] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[2] and colors[2] == patterns[1] and colors[3] == patterns[3]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[2] and colors[2] == patterns[3] and colors[3] == patterns[0]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[3] and colors[2] == patterns[0] and colors[3] == patterns[1]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[0] and colors[2] == patterns[1] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[0]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[3] and colors[2] == patterns[1] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[2] and colors[2] == patterns[3] and colors[3] == patterns[1]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[1] and colors[2] == patterns[3] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[0] and colors[2] == patterns[2] and colors[3] == patterns[3]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[1] and colors[2] == patterns[3] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[2] and colors[2] == patterns[1] and colors[3] == patterns[3]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[2] and colors[2] == patterns[3] and colors[3] == patterns[1]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[3] and colors[2] == patterns[1] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[3] and colors[2] == patterns[0] and colors[3] == patterns[1]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[2] and colors[2] == patterns[3] and colors[3] == patterns[1]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[3] and colors[2] == patterns[1] and colors[3] == patterns[2]:\n        print('test')\n    elif colors[0] == patterns[3] and colors[1] == patterns[2] and colors[2] == patterns[3] and colors[3] ="
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True\n    \nprint(is_samepatterns(['red', 'green', 'green', 'green', 'blue', 'blue','red'], ['green','red', 'blue', 'green', 'blue','red', 'green']))\nprint(is_samepatterns(['green','red', 'blue', 'green', 'blue','red', 'green'], ['red', 'green', 'blue', 'green', 'blue','red', 'green']))\nprint(is_samepatterns(['green', 'green', 'green', 'green', 'green','red','red'], ['green','red', 'blue', 'green', 'blue','red', 'green']))\nprint(is_samepatterns(['red', 'green', 'green','red', 'green','red', 'blue'], ['green','red', 'blue', 'green', 'blue','red', 'green']))\nprint(is_samepatterns(['blue', 'blue', 'green', 'green','red', 'blue', 'blue'], ['blue', 'green', 'blue', 'green','red', 'blue', 'blue']))\nprint(is_samepatterns(['blue', 'blue', 'green', 'green','red', 'blue','red'], ['blue', 'green', 'blue', 'green','red', 'blue','red']))\nprint(is_samepatterns(['blue', 'blue', 'green', 'green','red', 'blue','red'], ['red', 'green', 'blue', 'green', 'blue','red','red']))\nprint(is_samepatterns(['blue', 'blue', 'green','red','red', 'blue', 'blue'], ['red', 'blue', 'green', 'blue', 'blue','red','red'])"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check whether there is one unique color in pattern\n    if len(set(colors))!= len(colors):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) < len(patterns):\n        return False\n    index = 0\n    for i in range(0, len(patterns)):\n        if patterns[i]!= colors[index]:\n            return False\n        index += 1\n    return True\n    \ndef sublist(target, sublist):\n    '''\n    Write a function to check whether it is equal to the target list, with the order of elements in the list being ignored\n    '''\n    if len(sublist) > len(target):\n        return False\n    i = 0\n    for item in sublist:\n        j = 0\n        for item2 in target:\n            if item == item2:\n                break\n            j += 1\n        if j == len(target):\n            break\n        i += 1\n    if i == len(sublist):\n        return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if len(set(i) & set(range(1, K+1))) == K:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [x for x in test_list if sum(x)%K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    list_tuple = []\n    for t in test_list:\n        if(t[0] % K == 0 and t[1] % K == 0):\n            list_tuple.append(t)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        tuple = test_list[i]\n        if all(e % K == 0 for e in tuple):\n            res.append(tuple)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    l = []\n    for i in test_list:\n        if all(x%K == 0 for x in i):\n            l.append(i)\n    return l\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                pass\n            else:\n                break\n        else:\n            divisible_tuples.append(test_list[i])\n    return divisible_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(a, b) for a, b in test_list if (a % K == 0 and b % K == 0)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(i % K == 0 for i in tuple):\n            result.append(tuple)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [i for i in test_list if sum(i)%K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for item in test_list:\n        if all(i%K == 0 for i in item):\n            tuples.append(item)\n    return tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # return n%11 == 0\n    # n is a number\n    # 11 is the divisor\n    if (n%11 == 0):\n        print(\"The number is divisible by 11\")\n    else:\n        print(\"The number is not divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n      \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    return False"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False\nprint(is_Diff(n=5))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    return n % 11 == 0\n    \n    \nprint(is_Diff(11))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n  \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n    #Remove pass and write your logic here\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n    \ndef join_strings(s):\n    '''\n    Write a python function to join the strings and print the joined strings\n    '''\n    j = \"\".join(s)\n    return j\n    \ndef palindrome(s):\n    '''\n    Write a python function which accepts a string as an argument and check whether the string is palindrome or not. Print the result.\n    '''\n    s = s.lower()\n    # print(s)\n    # s = s[::-1]\n    # print(s)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n    \nprint(word_len(\"Hello\"))\nprint(word_len(\"Hello \"))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 0\n    \ndef end_other(a, b):\n    '''\n    Write a python function to check whether the last 2 chars of the strings are equal or not.\n    '''\n    return a[-2:] == b[-2:]\n    \ndef xyz_there(str):\n    '''\n    Write a python function to check whether the string has 'xyz' or not.\n    '''\n    return str.count('xyz')>=1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len_s=len(s)\n    if len_s%2==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 0\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3*n - 1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    return n*(3*n-1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = lambda n: n * (n+1) * (n+2) / 6\n    return tetrahedral(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n+1) * (n+2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        raise ValueError('n must be a positive integer.')\n    if n == 1:\n        return 4\n    else:\n        return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        raise ValueError('n must be an integer greater than 1')\n    if n == 1:\n        return 1\n    return n * (n+1) * (n+2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n*(n+1)*(n+2)//6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n+1) * (n+2) // 6\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #volume of a sphere is equal to 4/3 * pi * r^3\n    pi = math.pi\n    return (4.0/3.0)*pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    return (4/3) * math.pi * (r**3)\nprint(volume_sphere(2))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4*math.pi*r**3)/3\n    \ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r**3\n    \ndef is_even(n):\n    '''\n    Write a function to check if a number is even.\n    '''\n    if n%2 == 0:\n        return True\n    return False\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function to check if three numbers can form a triangle.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef fibonacci(n):\n    '''\n    Write a function to generate the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n    \ndef reverse_number(n):\n    '''\n    Write a function to return the reverse of a number.\n    '''\n    reversed = 0\n    while n>0:\n        reversed = 10*reversed + n%10\n        n = n//10\n    return reversed\n    \ndef factorial(n):\n    '''\n    Write a function to return the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    return n*factorial(n-1)\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    return False\n    \ndef reverse_string(s):\n    '''\n    Write a function to return the reverse of a string.\n    '''\n    return s[::-1]\n    \ndef check_palindrome(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if s == reverse_string(s):\n        return True\n    return False\n    \ndef get_factors(n):\n    '''\n    Write a function to return all factors of a number.\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\n    \ndef is_prime_number(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    return is_prime_number(n-1)\n    \ndef is_square(n):\n    '''\n    Write a function to check if a number is square or not.\n    '''\n    if n == 1:\n        return True\n    if n < 0:\n        return False\n    r = math.sqrt(n)\n    return r == int(r)\n    \ndef is_power(a,b):\n    '''\n    Write a function to check if a number is a power of another number.\n    '''\n    if a%b == 0:\n        return True\n    return False\n    \ndef sum_of_digit(n):\n    '''\n    Write a function to sum of all digits of a number.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    return n%10 + sum_of_digit(n//10)\n    \ndef is_palindrome_num(n):\n    '''\n    Write a function to check if a number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef is_armstrong_number(n):\n    '''\n    Write a function to check if a number is an Armstrong number or not.\n    '''\n    s = str(n)\n    return sum([int(x)**len(s) for x in s]) == n\n    \ndef reverse_num(n):\n    '''\n    Write a function to reverse a number.\n    '''\n    return int(str(n)[::-1])\n    \ndef convert_to_base(n,b):\n    '''\n    Write a function to convert a number to another base.\n    '''\n    if n < 0:\n        return '-'+convert_to_base(-n,b)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    s = ''\n    while n>0:\n        s = str(n%b)+s\n        n = n//b\n    return s\n    \ndef count_lowercase(s):\n    '''\n    Write a function to count the number of lowercase letters in a string.\n    '''\n    if len(s) == 0:\n        return 0\n    if s[0] >= 'a' and s[0] <= 'z':\n        return 1 + count_lowercase(s[1:])\n    return 0 + count_lowercase(s[1:])\n    \ndef convert_base(n,b):\n    '''\n    Write a function to convert a number from any base to another base.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return '-'+convert_base(-n,b)\n    if n == 1:\n        return '1'\n    if b == 10:\n        return convert_to_base(n,b)\n    else:\n        return convert_base(n//b,b) + convert_to_base(n%b,b)\n    \ndef max_of_three(a,b,c):\n    '''\n    Write a function to return the maximum of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        return c\n    if b > a:\n        if b > c:\n            return b\n        return c\n    if c > a:\n        if c > b:\n            return c\n    return a\n    \ndef max_of_four(a,b,c,d):\n    '''\n    Write a function to return the maximum of four numbers.\n    '''\n    if a > b:\n        if a > c:\n            if a > d:\n                return a\n            return d\n        if c > d:\n            if c > d:\n                return c\n            return d\n    if b > c:\n        if b > d:\n            if c > d:\n                return c\n            return d\n        if d > d:\n            if d > d:\n                return d\n    return a\n    \ndef rotate_num(n):\n    '''\n    Write a function to rotate a number.\n    '''\n    return int(str(n)[-1])*10**(len(str(n))-1) + int(str(n)[:-1])\n    \ndef find_max_in_list(l):\n    '''\n    Write a function to return the maximum value in a list.\n    '''\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return find_max_in_list(l[1:]) if l[0] < find_max_in_list(l[1:]) else l[0]\n    \ndef find_max_in_matrix(m):\n    '''\n    Write a function to return the maximum value in a matrix.\n    '''\n    if len(m) == 1:\n        return m[0]\n    if len(m) == 2:\n        return max(m[0][0],m[1][0])\n    return max(find_max_in_matrix(m[0:len(m)-1]),find_max_in_matrix(m[1:]))\n    \ndef fibonacci_iterative(n):\n    '''\n    Write an iterative function to return the nth Fibonacci number.\n    ''"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #sphere has 4/3 pi times r^3 area\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum(ord(char) for char in strr)%26\ndef is_Vowel(strr):\n    '''\n    Write a python program to check whether the given string is a vowel or not.\n    '''\n    if strr in 'aeiou':\n        return True\n    return False\ndef print_List(lst):\n    '''\n    Write a python function to print a list in a human readable manner.\n    '''\n    print('['+', '.join(map(str, lst))+']')\ndef intersection(lst1,lst2):\n    '''\n    Write a python function to print the intersection of two lists.\n    '''\n    lst3=[]\n    for i in lst1:\n        if i in lst2:\n            lst3.append(i)\n    return lst3\ndef add_Commas(n):\n    '''\n    Write a python program to add commas to a given number.\n    '''\n    return \"{:,}\".format(n)\ndef swap_case(s):\n    '''\n    Write a python program to swap cases of a given string.\n    '''\n    return s.swapcase()\ndef remove_duplicate(lst):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    return list(dict.fromkeys(lst))\ndef char_count(s,char):\n    '''\n    Write a python program to count the number of characters in a string.\n    '''\n    return s.count(char)\ndef sort_list(lst):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    return sorted(lst)\ndef reverse_list(lst):\n    '''\n    Write a python function to reverse a list in descending order.\n    '''\n    return sorted(lst, reverse=True)\ndef to_uppercase(s):\n    '''\n    Write a python function to convert a string to uppercase.\n    '''\n    return s.upper()\ndef to_lowercase(s):\n    '''\n    Write a python function to convert a string to lowercase.\n    '''\n    return s.lower()\ndef sum_matrix(matrix):\n    '''\n    Write a python function to sum all the elements of a given matrix.\n    '''\n    return sum(sum(row) for row in matrix)\ndef find_index(lst, value):\n    '''\n    Write a python function to find the index of a value in a list.\n    '''\n    return lst.index(value)\ndef is_member(value, lst):\n    '''\n    Write a python function to check whether the value is present in the given list.\n    '''\n    return value in lst\ndef count_evens(lst):\n    '''\n    Write a python function to count the number of even elements in a list.\n    '''\n    count=0\n    for i in lst:\n        if i%2==0:\n            count+=1\n    return count\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef fibonacci(n):\n    '''\n    Write a python function to print the fibonacci series upto the given number.\n    '''\n    a=0\n    b=1\n    print(a)\n    print(b)\n    for i in range(2,n):\n        c=a+b\n        a=b\n        b=c\n        print(c)\ndef bubble_sort(lst):\n    '''\n    Write a python function to sort a list using bubble sort.\n    '''\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i]>lst[j]:\n                lst[i],lst[j]=lst[j],lst[i]\n    return lst\ndef selection_sort(lst):\n    '''\n    Write a python function to sort a list using selection sort.\n    '''\n    for i in range(len(lst)):\n        min_idx=i\n        for j in range(i,len(lst)):\n            if lst[min_idx]>lst[j]:\n                min_idx=j\n        lst[i],lst[min_idx]=lst[min_idx],lst[i]\n    return lst\ndef insertion_sort(lst):\n    '''\n    Write a python function to sort a list using insertion sort.\n    '''\n    for i in range(1,len(lst)):\n        j=i\n        while j>0 and lst[j]<lst[j-1]:\n            lst[j],lst[j-1]=lst[j-1],lst[j]\n            j-=1\n    return lst\ndef merge_sort(lst):\n    '''\n    Write a python function to sort a list using merge sort.\n    '''\n    if len(lst)<=1:\n        return lst\n    mid=len(lst)//2\n    l_half=lst[:mid]\n    r_half=lst[mid:]\n    l_half=merge_sort(l_half)\n    r_half=merge_sort(r_half)\n    return merge(l_half,r_half)\ndef merge(lst1,lst2):\n    '''\n    Write a python function to merge two lists.\n    '''\n    i=0\n    j=0\n    lst3=[]\n    while i<len(lst1) and j<len(lst2):\n        if lst1[i]<lst2[j]:\n            lst3.append(lst1[i])\n            i+=1\n        else:\n            lst3.append(lst2[j])\n            j+=1\n    if i<len(lst1):\n        for i in lst1[i:]:\n            lst3.append(i)\n    if j<len(lst2):\n        for j in lst2[j:]:\n            lst3.append(j)\n    return lst3\ndef binary_search(lst,value):\n    '''\n    Write a python function to search a value in a given list using binary search.\n    '''\n    start=0\n    end=len(lst)-1\n    while start<=end:\n        mid=(start+end)//2\n        if lst[mid]<value:\n            start=mid+1\n        elif lst[mid]>value:\n            end=mid-1\n        else:\n            return mid\n    return -1\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    return n*factorial(n-1)\ndef print_options():\n    '''\n    Write a python program to print menu.\n    '''\n    print('1. Create a list')\n    print('2. Add an item at the end')\n    print('3. Add an item at a given position')\n    print('4. Add a list as a sublist')\n    print('5. Remove an item')\n    print('6. Remove an item at a given position')\n    print('7. Search an item')\n    print('8. Print a list in a human readable manner')\n    print('9. Print a list in a numerical order')\n    print('10. Print a list in reverse order')\n    print('11. Check if a list is empty')\n    print('12. Print the number of even elements in a list')\n    print('13. Print the number of odd elements in a list')\n    print('14. Swap the case of all the characters in a list')\n    print('15. Count the number of occurrences of a given element')\n    print('16. Print the index of a given element')\n    print('17. Check if a value is present in a given list')\n    print('18. Display Fibonacci Series upto given number')\n    print('19. Display prime numbers up"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    mod=0\n    for i in strr:\n        mod+=ord(i)%26\n    return mod%26\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ = 0\n    for char in strr:\n        sum_ += ord(char)\n    return sum_ % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return chr(sum%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    summ = 0\n    for i in strr:\n        summ = summ + ord(i)\n    return summ % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(int(strr.encode(\"ascii\").hex(), 16)%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr=input()\n    #strr=\"geeksforgeeks\"\n    newstr=\"\"\n    l=[]\n    for i in strr:\n        l.append(ord(i))\n    sum=0\n    for i in l:\n        sum=sum+i\n    newstr=newstr+str(sum%26)\n    print(newstr)\n    # sum=0\n    # for i in range(0,len(l)):\n    #     sum=sum+l[i]\n    # newstr=newstr+str(sum%26)\n    # print(newstr)\n    \nget_Char(\"geeksforgeeks\")\nget_Char(\"xylophone\")\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char=0\n    for i in range(len(strr)):\n        char+=ord(strr[i])\n    return char%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return(sum%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return (sum % 26)\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    x = 1\n    y = 1\n    for i in range(n):\n        x, y = y, 3 * x + 2 * y\n    return y\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    l = [1, 1]\n    for i in range(1, n):\n        l.append(l[i] + l[i-1])\n        \n    return l[-1]\n    \n    "
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n<0:\n        print('Inputs should be positive.')\n    else:\n        print(conway(n)[0])\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Your code here\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 2\n    else: return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    first = [1,0,0,1]\n    second = [0,1,0,1]\n    third = [0,0,1,1]\n    \n    if n < 4:\n        return first[n]\n    elif n < 7:\n        return second[n-3]\n    else:\n        return third[n-6]\n    \nif __name__ == '__main__':\n    print(sequence(int(input('Enter your number: '))))"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return seq[n - 1]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea_sphere = 4 * math.pi * (r ** 2)\n    return surfacearea_sphere\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = (4/3) * math.pi * (r ** 3)\n    return volume_sphere\ndef volume_of_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume_cube = l ** 3\n    return volume_cube\ndef cube_surfacearea(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfacearea_cube = 6 * (l ** 2)\n    return surfacearea_cube\ndef surface_area_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea_cylinder = 2 * math.pi * (r ** 2) + 2 * math.pi * r * h\n    return surfacearea_cylinder\ndef cylinder_volume(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume_cylinder = math.pi * (r ** 2) * h\n    return volume_cylinder\ndef volume_of_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = 1/3 * math.pi * (r ** 2) * h\n    return volume_cone\ndef cone_surfacearea(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfacearea_cone = math.pi * r * (r + math.sqrt((h ** 2) + (r ** 2)))\n    return surfacearea_cone\ndef surface_area_prism(l, w, h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    surfacearea_prism = 2 * (l * w + l * h + w * h)\n    return surfacearea_prism\ndef prism_volume(l, w, h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    volume_prism = l * w * h\n    return volume_prism\ndef volume_of_pyramid(l, w, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume_pyramid = 1/3 * l * w * h\n    return volume_pyramid\ndef pyramid_surfacearea(l, w, h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surfacearea_pyramid = l * w + l * h + w * h\n    return surfacearea_pyramid\ndef surface_area_cube_roof(l):\n    '''\n    Write a function to find the surface area of a cube with a roof.\n    '''\n    surfacearea_cube_roof = 6 * (l ** 2)\n    return surfacearea_cube_roof\ndef surface_area_cone_roof(r):\n    '''\n    Write a function to find the surface area of a cone with a roof.\n    '''\n    surfacearea_cone_roof = 2 * math.pi * r * (r + math.sqrt((r ** 2) + (r ** 2))) + (math.pi * r ** 2)\n    return surfacearea_cone_roof\ndef surface_area_pyramid_roof(l, w, h):\n    '''\n    Write a function to find the surface area of a pyramid with a roof.\n    '''\n    surfacearea_pyramid_roof = 2 * ((l * w + l * h + w * h))\n    return surfacearea_pyramid_roof\ndef surface_area_cylinder_roof(r, h):\n    '''\n    Write a function to find the surface area of a cylinder with a roof.\n    '''\n    surfacearea_cylinder_roof = 2 * math.pi * (r ** 2) + 2 * math.pi * r * h\n    return surfacearea_cylinder_roof\ndef volume_of_sphere_roof(r):\n    '''\n    Write a function to find the volume of a sphere with a roof.\n    '''\n    volume_sphere_roof = (4/3) * math.pi * (r ** 3)\n    return volume_sphere_roof\ndef volume_of_cube_roof(l):\n    '''\n    Write a function to find the volume of a cube with a roof.\n    '''\n    volume_cube_roof = l ** 3\n    return volume_cube_roof\ndef volume_of_cylinder_roof(r, h):\n    '''\n    Write a function to find the volume of a cylinder with a roof.\n    '''\n    volume_cylinder_roof = math.pi * (r ** 2) * h\n    return volume_cylinder_roof\ndef volume_of_cone_roof(r, h):\n    '''\n    Write a function to find the volume of a cone with a roof.\n    '''\n    volume_cone_roof = 1/3 * math.pi * (r ** 2) * h\n    return volume_cone_roof\ndef pyramid_volume_roof(l, w, h):\n    '''\n    Write a function to find the volume of a pyramid with a roof.\n    '''\n    volume_pyramid_roof = l * w * h\n    return volume_pyramid_roof\ndef volume_of_sphere_interior(r):\n    '''\n    Write a function to find the volume of a sphere with an interior.\n    '''\n    volume_sphere_interior = ((4/3) * math.pi * (r ** 3)) - (4/3) * math.pi * (r ** 3)\n    return volume_sphere_interior\ndef volume_of_cube_interior(l):\n    '''\n    Write a function to find the volume of a cube with an interior.\n    '''\n    volume_cube_interior = (l ** 3) - l ** 3\n    return volume_cube_interior\ndef volume_of_cylinder_interior(r, h):\n    '''\n    Write a function to find the volume of a cylinder with an interior.\n    '''\n    volume_cylinder_interior = math.pi * (r ** 2) * (h - 2)\n    return volume_cylinder_interior\ndef volume_of_cone_interior(r, h):\n    '''\n    Write a function to find the volume of a cone with an interior.\n    '''\n    volume_cone_interior = (1/3) * math.pi * (r ** 2) * (h - 2)\n    return volume_cone_interior\ndef pyramid_volume_interior(l, w, h):\n    '''\n    Write a function to find the volume of a pyramid with an interior.\n    '''\n    volume_pyramid_interior = (l * w * h) - (l * w * h)\n    return volume_pyramid_interior\ndef surface_area_of_cones(r1, r2):\n    '''\n    Write a function to find the surface area of two cones.\n    '''\n    surfacearea_of_cones = 2 * math.pi * (r1 + r2) + (math.pi * r1 * r2)\n    return surfacearea_of_cones\ndef surface_area_of_pyramids(l1, l2, w, h):\n    '''\n    Write a function to find the surface area of two pyramids.\n    '''\n    surfacearea_of_pyramids = 2 * ((l1 * w + l2 * w + l1 * h + l2 * h) + (l1 * w + l2 * w + l1 * h + l2 * h))\n    return surfacearea_of_pyramids\ndef surface_area_of_cubes(l1, l2, w):\n    '''\n    Write a function to find the surface area of two cubes.\n    '''\n    surfacearea_of_cubes = 6 * (l1 * w + l2 * w)\n    return surfacearea_of_cubes\ndef surface_area_of_cubes_roof(l1, l2, w):"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    result = (4 * math.pi * r**2)\n    print(\"The surface area of a sphere with radius {} is {}\".format(r,result))\n    return result\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    print(f'Surface area of a sphere with a radius of {r} is {4*math.pi*(r**2)}')\n    return\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef average_number(x,y):\n    '''\n    Write a function to calculate the average of two numbers.\n    '''\n    return (x+y)/2\ndef vowel_count(phrase):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    total = 0\n    for i in phrase:\n        if i in vowels:\n            total += 1\n    return total\ndef reverse_vowels(phrase):\n    '''\n    Write a function to reverse vowels in a string.\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    newstr = ''\n    for i in phrase:\n        if i in vowels:\n            newstr = newstr+i\n    return newstr[::-1]\ndef is_vowel(letter):\n    '''\n    Write a function to check if a letter is a vowel or not.\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    if letter in vowels:\n        return True\n    return False\ndef minion_game(s):\n    '''\n    Write a function to determine the winner of a game of \n    \"rock, paper, scissors\".\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    kevin = 0\n    stuart = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            kevin += len(s)-i\n        else:\n            stuart += len(s)-i\n    if kevin > stuart:\n        print(\"Kevin\",kevin)\n    elif kevin < stuart:\n        print(\"Stuart\",stuart)\n    else:\n        print(\"Draw\")\ndef find_vowels(phrase):\n    '''\n    Write a function to find all the vowels in a string.\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    newstr = ''\n    for i in phrase:\n        if i in vowels:\n            newstr += i\n    return newstr\ndef pangrams(sentence):\n    '''\n    Write a function to check if a sentence is a pangram or not.\n    '''\n    sentence = sentence.lower()\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    newstr = ''\n    for i in sentence:\n        if i in vowels:\n            newstr += i\n    if len(newstr) == 5:\n        return True\n    else:\n        return False\ndef reverse_number(num):\n    '''\n    Write a function to reverse a number.\n    '''\n    num = str(num)\n    if num[0] == \"-\":\n        num = num[1:]\n        newstr = num[::-1]\n        return int(\"-\"+newstr)\n    else:\n        newstr = num[::-1]\n        return int(newstr)\ndef vowel_counter(phrase):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    total = 0\n    for i in phrase:\n        if i in vowels:\n            total += 1\n    return total\ndef rps_winner(p1,p2):\n    '''\n    Write a function to determine the winner of a game of \n    \"rock, paper, scissors\".\n    '''\n    if p1 == p2:\n        return \"Draw\"\n    elif p1 == \"rock\":\n        if p2 == \"scissors\":\n            return \"Player 1\"\n        else:\n            return \"Player 2\"\n    elif p1 == \"paper\":\n        if p2 == \"rock\":\n            return \"Player 1\"\n        else:\n            return \"Player 2\"\n    elif p1 == \"scissors\":\n        if p2 == \"paper\":\n            return \"Player 1\"\n        else:\n            return \"Player 2\"\ndef is_pangram(sentence):\n    '''\n    Write a function to check if a sentence is a pangram or not.\n    '''\n    sentence = sentence.lower()\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    newstr = ''\n    for i in sentence:\n        if i in vowels:\n            newstr += i\n    if len(newstr) == 5:\n        return True\n    else:\n        return False\ndef second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in an array.\n    '''\n    numbers = sorted(numbers)\n    if len(numbers) == 1:\n        return False\n    else:\n        return numbers[1]\ndef is_unique(phrase):\n    '''\n    Write a function to determine if a string has all unique characters.\n    '''\n    string = list(phrase)\n    string.sort()\n    if len(string) == len(set(string)):\n        return True\n    return False\ndef is_pangram(sentence):\n    '''\n    Write a function to check if a sentence is a pangram or not.\n    '''\n    sentence = sentence.lower()\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    newstr = ''\n    for i in sentence:\n        if i in vowels:\n            newstr += i\n    if len(newstr) == 5:\n        return True\n    else:\n        return False\ndef total_fruit(fruit_dict):\n    '''\n    Write a function to find the total number of fruits in a basket. \n    '''\n    total = 0\n    for i in fruit_dict:\n        total += fruit_dict[i]\n    return total\ndef frequency(sentence):\n    '''\n    Write a function to find the frequency of each letter in \n    a sentence.\n    '''\n    sentence = sentence.lower()\n    freq = {}\n    for i in sentence:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two words are anagrams or not.\n    '''\n    string1 = str1.lower()\n    string2 = str2.lower()\n    if len(string1)!= len(string2):\n        return False\n    freq1 = {}\n    freq2 = {}\n    for i in string1:\n        if i in freq1:\n            freq1[i] += 1\n        else:\n            freq1[i] = 1\n    for i in string2:\n        if i in freq2:\n            freq2[i] += 1\n        else:\n            freq2[i] = 1\n    if freq1 == freq2:\n        return True\n    else:\n        return False\ndef is_isogram(phrase):\n    '''\n    Write a function to determine if a string is an isogram or not.\n    '''\n    phrase = phrase.lower()\n    freq = {}\n    for i in phrase:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if freq[i] > 1:\n            return False\n    return True\ndef insert_spaces(string):\n    '''\n    Write a function to insert spaces between every character in a string\n    except for the last one.\n    '''\n    freq = {}\n    newstr = ''\n    for i in string:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if freq[i] == 1:\n            newstr += i\n        else:\n            newstr += i+\" \"\n    return newstr\ndef insert_spaces(string):\n    '''\n    Write a function to insert spaces between every character in a string\n    except for the last one.\n    '''\n    freq = {}\n    newstr = ''\n    for i in string:\n        if i in freq:\n            freq["
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    import numpy as np\n    return 4*np.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #return 4 * math.pi * r**2\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*(r**2)\n    return(area)\n    \ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area =.5*(a+b+c)\n    return(area)\n    \ndef distance_in_miles(a,b):\n    '''\n    Write a function to find the distance between two points in miles.\n    '''\n    dist = a*1.609344*math.pi*math.acos(((b*b)-(a*a))/(a*a))\n    return(dist)\n    \ndef miles_in_km(a):\n    '''\n    Write a function to convert miles to kilometres.\n    '''\n    miles = a*1.609344\n    return(miles)\n    \ndef km_in_miles(a):\n    '''\n    Write a function to convert kilometres to miles.\n    '''\n    miles = a/1.609344\n    return(miles)\n    \ndef volume_of_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = a**3\n    return(volume)\n    \ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*(r**3)\n    return(volume)\n    \ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*(r**2)*h\n    return(volume)\n    \ndef volume_of_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return(volume)\n    \ndef volume_of_right_circular_cylinder(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    volume = math.pi*(r**2)*h\n    return(volume)\n    \ndef volume_of_ellipsoid(r1,r2,r3):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    volume = math.pi*(r1**2)*(r2**2)*(r3**2)\n    return(volume)\n    \ndef volume_of_triangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    volume = (a*b*c)/3\n    return(volume)\n    \ndef volume_of_torus(r1,r2):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    volume = (math.pi*(r1**2)*(r2**2))/(4*math.pi)\n    return(volume)\n    \ndef volume_of_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    volume = 1/3*(math.pi*(r**3))\n    return(volume)\n    \ndef volume_of_cone_helper(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return(volume)\n    \ndef volume_of_cylinder_helper(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*(r**2)*h\n    return(volume)\n    \ndef area_of_cone_helper(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area = (1/3)*math.pi*(r**2)*h\n    return(area)\n    \ndef area_of_cylinder_helper(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*math.pi*(r**2)\n    return(area)\n    \ndef surface_area_of_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area = (1/3)*math.pi*(r**2)*h\n    return(area)\n    \ndef surface_area_of_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*math.pi*(r**2)\n    return(area)\n    \ndef area_of_right_circular_cylinder_helper(r,h):\n    '''\n    Write a function to find the surface area of a right circular cylinder.\n    '''\n    area = math.pi*(r**2)\n    return(area)\n    \ndef surface_area_of_right_circular_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a right circular cylinder.\n    '''\n    area = 2*math.pi*(r**2)\n    return(area)\n    \ndef area_of_ellipsoid_helper(r1,r2,r3):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    area = 2*math.pi*(r1**2)*(r2**2)*(r3**2)\n    return(area)\n    \ndef surface_area_of_ellipsoid(r1,r2,r3):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    area = 4*math.pi*(r1**2)*(r2**2)*(r3**2)\n    return(area)\n    \ndef surface_area_of_torus_helper(r1,r2):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    area = 2*math.pi*(r1**2)*(r2**2)\n    return(area)\n    \ndef surface_area_of_torus(r1,r2):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    area = 2*math.pi*(r1**2)*(r2**2)\n    return(area)\n    \ndef is_prime(a):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if a <= 1:\n        return(False)\n    if a == 2 or a == 3:\n        return(True)\n    for i in range(2,a):\n        if a%i == 0:\n            return(False)\n    return(True)\n    \ndef is_palindrome(a):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    if a < 0:\n        return(False)\n    a = str(a)\n    if a == a[::-1]:\n        return(True)\n    else:\n        return(False)\n        \ndef is_square(a):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if a <= 0:\n        return(False)\n    else:\n        b = math.sqrt(a)\n        if b%1 == 0:\n            return(True)\n        else:\n            return(False)\n            \ndef is_square_helper(a):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    b = math.sqrt(a)\n    return(b)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = (4 * math.pi * r * r)\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # 3^1 + 2^2 + 1^3 + 0^4 = 3 + 6 + 6 + 4 = 16 + 20 = 36\n    # Each generation has a central hexagonal number.\n    # So, we only have to find the smallest one.\n    \n    # n = 5\n    # t = 1\n    # n = 15\n    # t = 7\n    # n = 5\n    # t = 2\n    \n    # n = 7\n    # t = 4\n    # n = 11\n    # t = 6\n    \n    # n = 13\n    # t = 6\n    # n = 17\n    # t = 10\n    # n = 19\n    # t = 14\n    # n = 23\n    # t = 18\n    # n = 29\n    # t = 22\n    # n = 31\n    # t = 26\n    # n = 37\n    # t = 30\n    # n = 41\n    # t = 34\n    # n = 43\n    # t = 38\n    # n = 47\n    # t = 42\n    # n = 49\n    # t = 46\n    # n = 53\n    # t = 50\n    # n = 57\n    # t = 54\n    # n = 59\n    # t = 58\n    # n = 61\n    # t = 60\n    # n = 63\n    # t = 62\n    \n    \n    def hexagonal_number(n, t):\n        return t * (2 * n - 1)\n    \n    # Let's try to compute the first 10 hexagonal numbers.\n    # And do the expansion manually\n    # 1\n    # 3 + 2\n    # 4 + 3\n    # 6 + 5\n    # 8 + 7\n    # 9 + 8\n    # 10 + 9\n    # 12 + 11\n    # 14 + 13\n    # 15 + 14\n    \n    # 1, 3, 4, 6, 8, 9, 10, 12, 14, 15\n    \n    # 3, 6, 8, 12, 15\n    # 6, 12, 15\n    # 12, 15\n    # 15\n    \n    def hexagonal_number_expansion(n, t):\n        # If t = 1, we only have to find the smallest one.\n        if t == 1:\n            return hexagonal_number(n, 1)\n        \n        # Otherwise, we need to find the smallest nth number.\n        # We have: n * t = n * (t - 1) + 1\n        # So, we can find t.\n        n_inv = 1\n        t_inv = 1\n        while True:\n            if n * n_inv < n * t_inv + 1:\n                break\n            t_inv += 1\n            n_inv += 1\n        \n        # Now, we can get t.\n        t = t_inv\n        \n        # We now have t and n, so we can compute the number.\n        return hexagonal_number(n, t)\n    \n    def hexagonal_number_expansion_sum(n):\n        # We will build a table.\n        # The row will correspond to the number of terms.\n        # The column will correspond to the number of hexagonal numbers.\n        \n        # We will find the smallest hexagonal number which has n terms.\n        # The smallest one has 1 term, so we will start with t = 2\n        # The smallest one has 2 terms, so we will start with t = 3\n        # The smallest one has 3 terms, so we will start with t = 4\n        # The smallest one has 4 terms, so we will start with t = 5\n        # The smallest one has 5 terms, so we will start with t = 6\n        # The smallest one has 6 terms, so we will start with t = 7\n        # The smallest one has 7 terms, so we will start with t = 8\n        # The smallest one has 8 terms, so we will start with t = 9\n        # The smallest one has 9 terms, so we will start with t = 10\n        # The smallest one has 10 terms, so we will start with t = 11\n        # The smallest one has 11 terms, so we will start with t = 12\n        # The smallest one has 12 terms, so we will start with t = 13\n        # The smallest one has 13 terms, so we will start with t = 14\n        # The smallest one has 14 terms, so we will start with t = 15\n        # The smallest one has 15 terms, so we will start with t = 16\n        # The smallest one has 16 terms, so we will start with t = 17\n        # The smallest one has 17 terms, so we will start with t = 18\n        # The smallest one has 18 terms, so we will start with t = 19\n        # The smallest one has 19 terms, so we will start with t = 20\n        # The smallest one has 20 terms, so we will start with t = 21\n        # The smallest one has 21 terms, so we will start with t = 22\n        # The smallest one has 22 terms, so we will start with t = 23\n        # The smallest one has 23 terms, so we will start with t = 24\n        # The smallest one has 24 terms, so we will start with t = 25\n        # The smallest one has 25 terms, so we will start with t = 26\n        # The smallest one has 26 terms, so we will start with t = 27\n        # The smallest one has 27 terms, so we will start with t = 28\n        # The smallest one has 28 terms, so we will start with t = 29\n        # The smallest one has 29 terms, so we will start with t = 30\n        # The smallest one has 30 terms, so we will start with t = 31\n        # The smallest one has 31 terms, so we will start with t = 32\n        # The smallest one has 32 terms, so we will start with t = 33\n        # The smallest one has 33 terms, so we will start with t = 34\n        # The smallest one has 34 terms, so we will start with t = 35\n        # The smallest one has 35 terms, so we will start with t = 36\n        # The smallest one has 36 terms, so we will start with t = 37\n        # The smallest one has 37 terms, so we will start with t = 38\n        # The smallest one has 38 terms, so we will start with t = 39\n        # The smallest one has 39 terms, so we will start with t = 40\n        # The smallest one has 40 terms, so we will start with t = 41\n        # The smallest one has 41 terms, so we will start with t = 42\n        # The smallest one has 42 terms, so we will start with t = 43\n        # The smallest one has 43 terms, so we will start with t = 44\n        # The smallest one has 44 terms, so we will start with t = 45\n        # The smallest one has 45 terms, so we will start with t = 46\n        # The smallest one has 46 terms, so we will start with t = 47\n        # The smallest one has 47 terms, so we will start with t = 48\n        # The smallest one has 48 terms, so we will start with t = 49\n        # The smallest one has 49 terms, so we will start with t = 50\n        # The smallest one has 50 terms, so we will start with t = 51\n        # The smallest one has 51 terms, so we will start with t = 52\n        # The smallest one has 52 terms, so we will start with t = 53\n        # The smallest one has 53 terms, so we will start with t = 54\n        # The smallest one has 54 terms, so we will start with t = 55\n        # The smallest one has 55 terms, so we will start with t = 56\n        # The smallest one has 56 terms, so we will start with t = 57\n        # The smallest one has 57 terms, so we will start with t = 58\n        # The smallest one has 58 terms, so we will start with t = 59\n        # The smallest one has 59 terms, so we will start with t = 60\n        # The smallest one has 60 terms, so we will start with t = 61\n        # The smallest one has 61 terms, so we will start with t = 62\n        # The smallest one has 62 terms, so we will start with t = 63\n        # The smallest one has 63 terms, so we will start with t = 64\n        # The smallest one has 64 terms, so we will start with t = 65\n        # The smallest one has 65 terms, so we will start with t = 66\n        # The smallest one has 66 terms, so we will start with t = 67\n        # The smallest one has 67 terms, so we will start with t = 68\n        # The smallest one has 68 terms, so we will start with t = 69\n        # The smallest one has 69 terms, so we will start with t = 70\n        # The smallest one has 70 terms, so we will start with t "
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = hexagonal_number(n)\n    return num[1:-1] + '0' * ((len(num) - 2) // 2) + '1'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    assert(n >= 0)\n    if n == 0:\n        return 1\n    # Hexagonal numbers are repeated every 3rd number, starting from 1.\n    # So nth hexagonal number is n/3 times larger than nth triangular number.\n    # n//3 is the triangular number.\n    return (n//3)*2*n + n\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    while i < n:\n        n -= 1\n        i *= 2\n    i += 1\n    return hexagonal_number(i)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (((1 + (1+8*n)**0.5)/2)**2 - (1/2))/(1+8*n)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError('Number must be nonnegative.')\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2*n-1)) ** 0.5\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((n * (3 * n - 1) / 2))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2 * n * (2 * n - 1) + 1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key in dict3:\n            merged_dict[key] = [merged_dict[key], dict2[key], dict3[key]]\n        else:\n            merged_dict[key] = [dict2[key], dict3[key]]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Approach 1:\n    # dict_merged = {**dict1, **dict2, **dict3}\n    # Approach 2:\n    # dict_merged = dict1.copy()\n    # dict_merged.update(dict2)\n    # dict_merged.update(dict3)\n    # Approach 3:\n    # dict_merged = dict1.copy()\n    # dict_merged.update(dict2)\n    # dict_merged.update(dict3)\n    # return dict_merged\n    dict_merged = {}\n    for key, value in dict1.items():\n        dict_merged[key] = value\n    for key, value in dict2.items():\n        dict_merged[key] = value\n    for key, value in dict3.items():\n        dict_merged[key] = value\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #make a new dictionary\n    dict_out = {}\n    #make a list of the keys from each dictionary\n    keys_list = list(dict1.keys())+list(dict2.keys())+list(dict3.keys())\n    #sort the list of the keys\n    keys_list.sort()\n    #go through the new keys list and look for repeats\n    for i in range(len(keys_list)):\n        #check if there are repeats in the new list\n        if i!= len(keys_list)-1:\n            if keys_list[i] == keys_list[i+1]:\n                #if there are repeats, add the new dictionary to the list of dictionaries\n                #and add one to the counter\n                dict_out[keys_list[i]] = [dict1[keys_list[i]],dict2[keys_list[i]],dict3[keys_list[i]]+1]\n        #if there are no repeats\n        else:\n            #add the new dictionary to the list of dictionaries\n            #and add one to the counter\n            dict_out[keys_list[i]] = [dict1[keys_list[i]],dict2[keys_list[i]],dict3[keys_list[i]]]\n    #return the dictionary with the new values\n    return dict_out\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # dictionary of all dictionaries\n    new_dict = {**dict1, **dict2, **dict3}\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #return {**dict1, **dict2, **dict3}\n    return dict1.update(dict2) and dict2.update(dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = ct.ChainMap(dict1, dict2, dict3)\n    dict5 = dict1.copy()\n    dict5.update(dict2)\n    dict5.update(dict3)\n    print(\"Dict1:\")\n    print(dict1)\n    print(\"Dict2:\")\n    print(dict2)\n    print(\"Dict3:\")\n    print(dict3)\n    print(\"Merged Dictionary:\")\n    print(dict4)\n    print(\"Copy of dict1:\")\n    print(dict5)\n    return dict5\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1\n    for key in dict2.keys():\n        if key in dict_merged:\n            dict_merged[key] += dict2[key]\n        else:\n            dict_merged[key] = dict2[key]\n    for key in dict3.keys():\n        if key in dict_merged:\n            dict_merged[key] += dict3[key]\n        else:\n            dict_merged[key] = dict3[key]\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n    \ndef merge_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary. \n    '''\n    for key in dict2.keys():\n        if key not in dict1.keys():\n            dict1[key] = dict2[key]\n        else:\n            dict1[key] = dict1[key]+ dict2[key]\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create a dictionary, and for every element in the list, increment the count by 1.\n    # This dictionary is the key, and the value is the number of occurrences of each element.\n    freq_dict = dict()\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create a dictionary object\n    dict_1 = {}\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.defaultdict(int)\n    for elem in list1:\n        d[elem] += 1\n    return d\ndef remove_dup(list1):\n    '''\n    Write a function to remove all duplicates in a list.\n    '''\n    l = []\n    for elem in list1:\n        if elem not in l:\n            l.append(elem)\n    return l\ndef every_element_in_list(list1, element):\n    '''\n    Write a function to check whether a given element is in each element of a list.\n    '''\n    for elem in list1:\n        if element not in elem:\n            return False\n    return True\ndef longest_word(list1):\n    '''\n    Write a function to return the longest word in a list.\n    '''\n    # l = []\n    # for elem in list1:\n    #     l.append(len(elem))\n    # return list1[l.index(max(l))]\n    l = []\n    for elem in list1:\n        l.append(len(elem))\n    return max(l)\ndef rotate_list(list1,n):\n    '''\n    Write a function to rotate a list by n.\n    '''\n    return list1[n:] + list1[:n]\ndef min_max(list1):\n    '''\n    Write a function to get the minimum and maximum elements in a list.\n    '''\n    return min(list1),max(list1)\ndef delete_every_other(list1):\n    '''\n    Write a function to delete every other element in a list, starting from the first element.\n    '''\n    l = []\n    for i in range(0,len(list1),2):\n        l.append(list1[i])\n    return l\ndef find_first_non_repeating(list1):\n    '''\n    Write a function to return the first element in a list that appears only once.\n    '''\n    for elem in list1:\n        if list1.count(elem) == 1:\n            return elem\n    return None\ndef delete_last_occurrence(list1,elem):\n    '''\n    Write a function to delete the last occurrence of a given element.\n    '''\n    for i in range(len(list1)-1,-1,-1):\n        if elem == list1[i]:\n            list1.pop(i)\n    return list1\ndef sort_words_by_length(list1):\n    '''\n    Write a function to sort a list of words by length in ascending order.\n    '''\n    return sorted(list1, key=len)\ndef average_length(list1):\n    '''\n    Write a function to return the average length of a list of words.\n    '''\n    l = []\n    for elem in list1:\n        l.append(len(elem))\n    return sum(l)/len(l)\ndef are_consecutive(list1):\n    '''\n    Write a function to check whether a list contains consecutive numbers.\n    '''\n    l = []\n    for i in range(0,len(list1)-1):\n        l.append(list1[i+1] - list1[i])\n    return all(elem == 1 for elem in l)\ndef sum_of_squares(list1):\n    '''\n    Write a function to return the sum of squares of all the elements in a list.\n    '''\n    l = []\n    for i in list1:\n        l.append(i**2)\n    return sum(l)\ndef sum_of_squares_from_zero(list1):\n    '''\n    Write a function to return the sum of squares of all the elements in a list, starting from zero.\n    '''\n    l = []\n    for i in range(0,len(list1)):\n        l.append(i**2)\n    return sum(l)\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove all duplicates from a list.\n    '''\n    return list(set(list1))\ndef is_unique(list1):\n    '''\n    Write a function to check whether a list contains all unique elements.\n    '''\n    return len(list1) == len(set(list1))\ndef remove_first_and_last(list1):\n    '''\n    Write a function to remove the first and last elements in a list.\n    '''\n    list1.pop(0)\n    list1.pop(-1)\n    return list1\ndef has_palindrome(list1):\n    '''\n    Write a function to check whether a list contains a palindrome.\n    '''\n    s = ''.join(list1)\n    l = []\n    for i in range(0,len(s)//2):\n        l.append(s[i])\n    return s[len(s)//2:] == ''.join(l)\ndef has_palindrome_only_from_even_index(list1):\n    '''\n    Write a function to check whether a list contains only palindromes, starting from even indices.\n    '''\n    s = ''.join(list1)\n    l = []\n    for i in range(0,len(s)//2):\n        l.append(s[2*i])\n    return s[len(s)//2:] == ''.join(l)\ndef sort_dictionary(d):\n    '''\n    Write a function to sort a dictionary by its values in descending order.\n    '''\n    l = sorted(d.items(), key=lambda x:x[1], reverse = True)\n    d = {}\n    for elem in l:\n        d[elem[0]] = elem[1]\n    return d\ndef find_word_with_most_vowels(list1):\n    '''\n    Write a function to return the word in a list that has the most vowels.\n    '''\n    l = []\n    for elem in list1:\n        l.append(len(list(filter(str.lower,elem))))\n    return list1[l.index(max(l))]\ndef words_with_most_vowels(list1):\n    '''\n    Write a function to return the list of words in a list that have the most vowels.\n    '''\n    l = []\n    for elem in list1:\n        l.append(len(list(filter(str.lower,elem))))\n    max_vowel = max(l)\n    l1 = []\n    for i in range(0,len(l)):\n        if max_vowel == l[i]:\n            l1.append(list1[i])\n    return l1\ndef most_frequent(list1):\n    '''\n    Write a function to return the element in a list that appears the most frequently.\n    '''\n    l = []\n    for elem in list1:\n        l.append(list1.count(elem))\n    return list1[l.index(max(l))]\ndef sum_of_squares_from_one(list1):\n    '''\n    Write a function to return the sum of squares of all the elements in a list, starting from one.\n    '''\n    l = []\n    for i in range(1,len(list1)):\n        l.append(i**2)\n    return sum(l)\ndef sum_of_squares_from_one_v2(list1):\n    '''\n    Write a function to return the sum of squares of all the elements in a list, starting from one.\n    '''\n    l = []\n    for i in range(1,len(list1)):\n        l.append(i**2)\n    return sum(l)\ndef square_of_sum(list1):\n    '''\n    Write a function to return the square of the sum of all the elements in a list.\n    '''\n    return sum(list1)**2\ndef highest_even(list1):\n    '''\n    Write a function to return the element in a list that appears the most frequently, and whose value is even.\n    '''\n    l = []\n    for elem in list1:\n        l.append(list1.count(elem))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list1.sort()\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for x in list1:\n        freq[x] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for elem in list1:\n        freq[elem] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = dict()\n    for i in list1:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    else:\n        return N - 2\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # n = int(input())\n    number_list = list(range(1, N+1))\n    result = 0\n    for i in range(N):\n        for j in range(len(number_list)):\n            if (number_list[j] > number_list[i]):\n                result = number_list[i]\n                break\n    return result\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    n_list = [i for i in range(1, N+1)]\n    n_list = sorted(n_list)\n    for i in range(len(n_list)):\n        if n_list[i] <= n:\n            if i == len(n_list)-1:\n                return n_list[i]\n            if n_list[i+1] < n:\n                return n_list[i]\n            else:\n                continue\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    elif N <= 1:\n        return N - 1\n    i = 0\n    j = 1\n    while N > j:\n        j *= 2\n    while j > i:\n        mid = (i+j)//2\n        if mid >= N:\n            j = mid\n        else:\n            i = mid\n    return i\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return -1\n    return 1 if N > 1 else N - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # iterative solution:\n    return next(x for x in range(N+1,0,-1) if x%2!=0)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = N\n    min_num = 0\n    num_set = set(range(1, N))\n    for num in range(1, N):\n        current_num = num\n        current_diff = abs(N - num)\n        while current_num in num_set:\n            current_num -= 1\n            current_diff = abs(N - current_num)\n            if current_diff < min_diff:\n                min_diff = current_diff\n                min_num = current_num\n            if current_num < min_num:\n                break\n    return min_num\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def findClosestNum(N):\n        ans = N - 1\n        while True:\n            if ans == 1:\n                return 1\n            else:\n                if (N % ans == 0):\n                    return ans\n                else:\n                    ans -= 1\n    return findClosestNum(N)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = list1.split()\n    list3 = []\n    for i in list2:\n        list3.append(len(i))\n    if len(list3)!= 0:\n        return max(list3)\n    else:\n        return 'Empty'\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word=list1[0]\n    for i in list1:\n        if len(i)>len(word):\n            word=i\n    return word\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\nprint(len_log(['one', 'two', 'three']))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    list1 = list(map(str, list1))\n    # print(list1)\n    \n    \n    # str1 = str1.split(' ')\n    # print(str1)\n    \n    list1 = list(filter(None, list1))\n    # print(list1)\n    \n    l = list1\n    l1 = []\n    for i in l:\n        if i in l1:\n            continue\n        else:\n            l1.append(i)\n            \n    # print(l1)\n    \n    l2 = []\n    for i in l1:\n        if len(i) > len(i.replace(\" \",\"\")):\n            l2.append(len(i))\n    \n    # print(max(l2))\n    return(max(l2))\n    \n    "
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length=0\n    for i in list1:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort(key = lambda x : len(x))\n    return list1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length_list = []\n    for word in list1:\n        length_list.append(len(word))\n    return length_list\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    i=0\n    j=0\n    while i<len(list1):\n        if len(list1[i])>j:\n            j=len(list1[i])\n        i+=1\n    print(j)\n    return j\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list=[]\n    for i in list1:\n        len_list.append(len(i))\n    print(len_list)\n    return len_list\nlen_log([\"Guido\",\"James\",'Larry','Micheal'])\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort(key=len, reverse=True)\n    print(len(list1[0]))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"String found in {}\".format(str1))\n    else:\n        print(\"String not found in {}\".format(str1))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # itertools.product() --> Cartesian product\n    # itertools.permutations() --> All possible permutations\n    # itertools.combinations() --> All possible combinations\n    # itertools.combinations_with_replacement() --> All possible combinations with replacement\n    from itertools import combinations, permutations, product, combinations_with_replacement\n    # print(list(product(sub_str, str1)))\n    # print(list(permutations(sub_str, len(sub_str))))\n    # print(list(combinations(sub_str, len(sub_str))))\n    # print(list(combinations_with_replacement(sub_str, len(sub_str))))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l = len(sub_str)\n    for i in range(len(str1)):\n        if str1[i:i+l] == sub_str:\n            return i\n    return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        print(\"String {} is present in {}\".format(str1, sub_str))\n    else:\n        print(\"String {} is not present in {}\".format(str1, sub_str))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1.find(sub_str) == -1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 is None or sub_str is None:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if(len(str1) == 0 or len(sub_str) == 0):\n        return False\n    else:\n        for i in range(0, len(str1)):\n            if(str1[i:i+len(sub_str)] == sub_str):\n                return True\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1 in string for string in sub_str)\n    \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = False\n    sub_len = len(sub_str)\n    \n    for i in range(len(str1)):\n        if str1[i:i+sub_len] == sub_str:\n            result = True\n            break\n    return result\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a = n + reverse(n)\n    return is_palindrome(a)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # n = input()\n    n = list(map(int,list(str(n))))\n    if len(n)%2 == 1:\n        return False\n    else:\n        i = 0\n        while(i<len(n)):\n            if n[i]==n[i+1]:\n                return False\n            i+=2\n        return True\n    \n    \ndef concat_array(array1,array2): \n    '''\n    Write a function to concatenate two arrays.\n    '''\n    # array1 = [1,2,3,4]\n    # array2 = [5,6]\n    return array1+array2\n    \n    \ndef number_of_letter(word,letter): \n    '''\n    Write a function to get the number of occurrences of a given letter in a string.\n    '''\n    # word = input()\n    # letter = input()\n    n = word.count(letter)\n    return n\n    \n    \ndef count_vowels(s): \n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    # s = input()\n    vowels = ['a','e','i','o','u']\n    n = 0\n    for i in s:\n        if i in vowels:\n            n+=1\n    return n\n    \n    \ndef print_matrix(matrix): \n    '''\n    Write a function to print a 2d array in a more visualised way.\n    '''\n    # matrix = [[1,2,3],[4,5,6]]\n    for i in matrix:\n        for j in i:\n            print(j,end=' ')\n        print()\n    \n    \ndef swap_case(s): \n    '''\n    Write a function to swap the case of the letter in a given string.\n    '''\n    # s = input()\n    swap = []\n    for i in s:\n        if i.isupper():\n            swap.append(i.lower())\n        else:\n            swap.append(i.upper())\n    return ''.join(swap)\n    \n    \ndef generate_key(string,key): \n    '''\n    Write a function to generate the key based on a given string and key.\n    '''\n    # string = input()\n    # key = input()\n    a = []\n    for i in key:\n        a.append(i)\n    for i in range(len(string)):\n        a.append(string[i])\n    return a\n    \n    \ndef string_rotation(s1,s2): \n    '''\n    Write a function to check whether two strings are rotation of each other or not.\n    '''\n    # s1 = input()\n    # s2 = input()\n    s1 = list(s1)\n    s2 = list(s2)\n    if len(s1)==len(s2):\n        for i in range(len(s1)):\n            if s2.count(s1[i])>0:\n                return True\n            else:\n                return False\n    else:\n        return False\n    \n    \ndef count_substring(string,sub_string): \n    '''\n    Write a function to count the number of occurrences of a substring in a given string.\n    '''\n    # string = input()\n    # sub_string = input()\n    n = 0\n    for i in range(len(string)):\n        if string[i:i+len(sub_string)] == sub_string:\n            n+=1\n    return n\n    \n    \ndef string_match(a,b): \n    '''\n    Write a function to check if two strings are one string rotation of the other.\n    '''\n    # a = input()\n    # b = input()\n    n = len(a)\n    for i in range(n):\n        if a[:n-i]==b[i:]:\n            return True\n    return False\n    \n    \ndef reverse_words(s): \n    '''\n    Write a function to reverse the order of the words in a given sentence.\n    '''\n    # s = input()\n    s = s.split(' ')\n    n = len(s)\n    for i in range(n//2):\n        s[i],s[n-i-1] = s[n-i-1],s[i]\n    return''.join(s)\n    \n    \ndef check_substring(string,sub_string): \n    '''\n    Write a function to check if a given string is a sub-string of another string.\n    '''\n    # string = input()\n    # sub_string = input()\n    return string.find(sub_string) >= 0\n    \n    \ndef print_number_pattern(n): \n    '''\n    Write a function to print numbers in a pattern.\n    '''\n    # n = int(input())\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print(j,end=' ')\n        print()\n    \n    \ndef substring_between_letters(s,first,last): \n    '''\n    Write a function to get the substring between two given letters in a string.\n    '''\n    # s = input()\n    # first = input()\n    # last = input()\n    try:\n        s = s.split(first)\n        s = s[1].split(last)\n        return s[0]\n    except:\n        return -1\n        \n    \ndef check_anagram(s1,s2): \n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    # s1 = input()\n    # s2 = input()\n    s1 = list(s1)\n    s2 = list(s2)\n    if len(s1)!=len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1.count(s1[i])!=s2.count(s1[i]):\n            return False\n    return True\n    \n    \ndef number_of_days(month,day): \n    '''\n    Write a function to get the number of days in a given month and day.\n    '''\n    # month = input()\n    # day = input()\n    if month in ['01','03','05','07','08','10','12']:\n        if day>='31':\n            return 'invalid'\n        else:\n            return day\n    elif month in ['04','06','09','11']:\n        if day>='30':\n            return 'invalid'\n        else:\n            return day\n    else:\n        if month=='02':\n            if day>='29':\n                return 'invalid'\n            else:\n                return day\n    \n    \ndef count_capital_letters(s): \n    '''\n    Write a function to count the number of capital letters in a string.\n    '''\n    # s = input()\n    n = 0\n    for i in s:\n        if i.isupper():\n            n+=1\n    return n\n    \n    \ndef get_difference(a,b): \n    '''\n    Write a function to calculate the difference between the sums of two arrays.\n    '''\n    # a = input()\n    # b = input()\n    n = 0\n    for i in range(len(a)):\n        n+=a[i]-b[i]\n    return n\n    \n    \ndef remove_punctuation(s): \n    '''\n    Write a function to remove all the punctuations in a string.\n    '''\n    # s = input()\n    punctuation = ['!','@','#','$','%','^','&','*','-',':',';','<','=','>','?','|','/','~']\n    for i in s:\n        if i in punctuation:\n            s = s.replace(i,'')\n    return s\n    \n    \ndef check_pangram(s): \n    '''\n    Write a function to check whether a given string is a pangram or not.\n    '''\n    # s = input()\n    lowercase = ['a','b','c','d','e','f','g','h','i','j','k','l',"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0 and n**2!= n + 1 and n**3!= n + 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # The undulating number is an integer whose value changes by 1 for every 2 consecutive digits.\n    # n = 101010\n    n = str(n)\n    l = len(n)\n    for i in range(l):\n        if i == 0:\n            if int(n[i])-int(n[i+1]) == 1:\n                continue\n            else:\n                return False\n        elif i == 1:\n            if int(n[i-1])-int(n[i]) == 1:\n                continue\n            else:\n                return False\n        else:\n            if int(n[i-1])-int(n[i]) == 1:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def get_digits(n): \n        '''\n        Get the digits of the number in ascending order.\n        '''\n        d = 1\n        while n / d >= 10: \n            d *= 10\n        return [int(i) for i in str(n)]\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating_recursion(n, prev, undulating):\n        if n > 0:\n            if is_undulating_recursion(n // 10, prev, undulating):\n                return True\n            if n % 10!= prev:\n                if (n % 10) * prev > 0:\n                    if prev!= 0:\n                        undulating += 1\n                    return undulating == 2\n                return False\n        return undulating == 2\n    \n    def is_undulating_while(n):\n        prev = int(str(n)[0])\n        if n > 0:\n            while n > 0:\n                n = int(str(n)[1:])\n                if prev == 0:\n                    return False\n                if is_undulating_recursion(n, prev, 0):\n                    return True\n                prev = int(str(n)[0])\n        return False\n    return is_undulating_while(n)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    t = int(math.sqrt(n))\n    if n == t ** 2:\n        return False\n    \n    if n % t!= 0:\n        return False\n    \n    if n / t == t:\n        return False\n    \n    return True\n    \n    \ndef check_undulating(n):\n    '''\n    Write a program to check whether the given number is undulating or not.\n    '''\n    \n    t = int(math.sqrt(n))\n    \n    if n == t ** 2:\n        return False\n    \n    if n % t!= 0:\n        return False\n    \n    if n / t == t:\n        return False\n    \n    return True\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Code here\n    # remove pass and write your logic here\n    if len(str(n)) == 1:\n        return False\n    if n == 0 or n == 1:\n        return False\n    if str(n)[::-1] == str(n):\n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    s = str(n)\n    l = len(s)\n    if n < 0:\n        s = str(n)\n        l = len(s)\n    count = 0\n    if int(s[1]) - int(s[0]) == 0 and int(s[2]) - int(s[1]) == 0:\n        count += 1\n    if int(s[0]) - int(s[1]) == 0 and int(s[1]) - int(s[2]) == 0:\n        count += 1\n    if count == l - 1:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return not (n % 2 == 0 or n % 3 == 0) \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b>0:\n        if a==0:\n            return 0\n        elif a==1:\n            return 1\n        else:\n            return a*power(a,b-1)\n    else:\n        return 1/(a*power(a,b+1))\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a<0 or b<0:\n        print('The value of a or b cannot be negative')\n    else:\n        print(a**b)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0:\n        return 0\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a,b//2) * power(a,b//2)\n    else:\n        return power(a,b//2) * power(a,b//2) * a\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b == 0):\n        return 1\n    elif(b == 1):\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result=1\n    if b==0:\n        return 1\n    if b<0:\n        if -b>a:\n            for i in range(-b):\n                result=result*a\n            return 1/result\n        else:\n            return power(a,b+1)\n    else:\n        for i in range(b):\n            result=result*a\n        return result\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b < 0:\n        return 1/power(a, -b)\n    if b%2 == 0:\n        return power(a,b//2) * power(a,b//2)\n    return a * power(a,b//2) * power(a,b//2)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_element = min(test_list, key=itemgetter(1))[1]\n    return [element[0] for element in test_list if element[1] == min_element]\n    \ndef index_minimum_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_element = min(test_list, key=itemgetter(1))[1]\n    return [element[0] for element in test_list if element[1] == min_element]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp = sorted(test_list, key = itemgetter(1))\n    return temp[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return test_list[min(enumerate(test_list), key=itemgetter(1))[0]]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_of_minimum = []\n    for i in test_list:\n        list_of_minimum.append((i[0], i[1][0]))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if not test_list:\n        return None\n    else:\n        min_value = min(test_list, key=itemgetter(1))\n        return min_value[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #Method 1\n    # a = len(min(lst, key=len))\n    # return a\n    #Method 2\n    if len(lst) == 0:\n        return 0\n    else:\n        return 1 + Find_Min_Length(lst[1:])\n    #Method 3\n    # return 1 + Find_Min_Length([x for x in lst if isinstance(x, list)])\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return len(min(lst, key=len))\n    \ndef Get_Row_Sum_P1(lst):\n    '''\n    Write a function to return the sum of the rows in a given list. Assume every row has the same length.\n    '''\n    Sum = 0\n    for row in lst:\n        Sum += sum(row)\n    return Sum\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minlen = len(lst[0])\n    for sublst in lst:\n        if len(sublst) < minlen:\n            minlen = len(sublst)\n    return minlen\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst1 = []\n    for i in range(len(lst)):\n        lst1.append(len(lst[i]))\n    return min(lst1)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return(min(len(i) for i in lst))\n    \ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    return(max(len(i) for i in lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = len(lst[0])\n    for sub_lst in lst:\n        if len(sub_lst) < smallest_length:\n            smallest_length = len(sub_lst)\n    return smallest_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst = lst[0]\n    for l in lst:\n        if len(l) < len(min_lst):\n            min_lst = l\n    return len(min_lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst.sort(key = len)\n    return len(lst[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = None\n    for sublist in lst:\n        if not min_len:\n            min_len = len(sublist)\n        elif len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_lengths = []\n    for i in lst:\n        lst_lengths.append(len(i))\n    return min(lst_lengths)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            x+=1\n    return x\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return 1\n    div = 0\n    for i in range(1, int(n/2)+1):\n        if n % i == 0:\n            div += 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    factors = []\n    # Get factors of n\n    for i in range(1, n+1):\n        if n%i == 0:\n            factors.append(i)\n    return(factors)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    s = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                s = s + 1\n            else:\n                s = s + 2\n    return s\ndef list_add(list1, list2):\n    '''\n    Write a function to sum all the numbers in a list.\n    '''\n    sum = 0\n    for i in list1:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    cnt = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    factors = []\n    for i in range(1,int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(int(n/i))\n    return len(factors)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<0:\n        raise Exception(\"Not a valid input\")\n    elif n==0:\n        raise Exception(\"Not a valid input\")\n    else:\n        count=0\n        for i in range(1,n+1):\n            if n%i==0:\n                count+=1\n        return count\n    \ndef divisor_list(n):\n    '''\n    Write a python function to find the list of divisors of a given integer.\n    '''\n    if n<0:\n        raise Exception(\"Not a valid input\")\n    else:\n        divisor_list=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                divisor_list.append(i)\n        return divisor_list\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if (n % i == 0):\n            sum += 1\n    return sum\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    total = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for ele in list1:\n        freq[ele] = list1.count(ele)\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        frequency[i] = list1.count(i)\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    temp_dict = {}\n    for item in list1:\n        if item in temp_dict.keys():\n            temp_dict[item] += 1\n        else:\n            temp_dict[item] = 1\n    return temp_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return {item:list1.count(item) for item in set(list1)}\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n    \n    \ndef flatten_list(lst):\n    '''\n    Write a function to flatten a list of lists into a single list.\n    '''\n    flatten_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flatten_list += item\n        else:\n            flatten_list.append(item)\n    return flatten_list\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #create dictionary to store frequencies\n    frequency_list = {}\n    #iterate over all elements of list\n    for elem in list1:\n        #if element exists in frequency_list add frequency of element to the count, if not then add element and frequency of 1\n        if elem in frequency_list:\n            frequency_list[elem] += 1\n        else:\n            frequency_list[elem] = 1\n    return frequency_list\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    frequency_dict = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result = result*i\n    print(result)\n    return result/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multi = 1\n    for num in numbers:\n        multi *= num\n    return multi / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result = result / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total*num\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product = num * product\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total = total * x\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not numbers:\n        return 1\n    result = 1\n    for i in numbers:\n        result *= i\n    return result/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for num in numbers:\n        mul *= num\n    return mul / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 1\n    for n in numbers:\n        sum = sum * n\n    \n    return sum / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    while n!= 0:\n        binary_string += str(n%2)\n        n = n//2\n    return binary_string[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        return '{0:b}'.format(n)\n    else:\n        return '{0:b}'.format(int(n))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary(n//2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_val = bin(n)\n    str_val = str(bin_val)[2:]\n    if str_val == '0b0':\n        return str_val\n    else:\n        return '0b' + str_val\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    s = ''\n    while n > 0:\n        s = str(n % 2) + s\n        n = n // 2\n    return s\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if(n<2):\n        return str(n)\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n <= 0: \n        return \"0\"\n    res = \"\" \n    while (n > 0): \n        res = str(n % 2) + res \n        n = n // 2\n    return res \n  "
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #INPUT: an integer\n    #OUTPUT: the next smallest palindrome of num\n    \n    num_str = str(num)\n    num_str_reversed = num_str[::-1] #reverse the string\n    \n    #find the palindrome that is next to num in order to increase it\n    for x in range(len(num_str)):\n        #if the palindrome is larger than the original number, reduce it by 1\n        if num_str_reversed[x] > num_str[x]:\n            num_str_reversed = num_str_reversed[:x] + str(int(num_str_reversed[x]) - 1) + num_str_reversed[x + 1:]\n            break\n        #if the palindrome is smaller than the original number, increase it by 1\n        elif num_str_reversed[x] < num_str[x]:\n            num_str_reversed = num_str_reversed[:x] + str(int(num_str_reversed[x]) + 1) + num_str_reversed[x + 1:]\n            break\n    return int(num_str_reversed + num_str)\n    \n    \ndef is_palindrome(num):\n    '''\n    Write a function to check if a specified integer is a palindrome, returned as a boolean.\n    '''\n    #INPUT: an integer\n    #OUTPUT: True if the integer is a palindrome, False otherwise\n    \n    num_str = str(num)\n    num_str_reversed = num_str[::-1] #reverse the string\n    if num_str_reversed == num_str:\n        return True\n    else:\n        return False\n        \ndef fibonacci_last_digit(n):\n    '''\n    Write a function to calculate the last digit of the nth Fibonacci number.\n    '''\n    #INPUT: an integer n\n    #OUTPUT: the last digit of the nth Fibonacci number\n    \n    #calculate the nth Fibonacci number\n    nth_fibonacci_number = ((1 + 5 ** 0.5) / 2) ** n - ((1 - 5 ** 0.5) / 2) ** n\n    \n    #return the last digit of the nth Fibonacci number\n    return int(str(nth_fibonacci_number)[-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    is_odd = num % 2!= 0\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    next = num + 1\n    while True:\n        if str(next) == str(next)[::-1]:\n            return next\n        next += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palin(num):\n        return str(num) == str(num)[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check the input parameter\n    if num < 0:\n        raise ValueError(\"The input number cannot be negative!\")\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    flag = False\n    new_num = num\n    while True:\n        if flag:\n            if int(new_num) < int(num):\n                break\n            else:\n                return int(new_num)\n        \n        for i in range(len(num)-1,0,-1):\n            if num[i] < num[i-1]:\n                new_num = num[:i] + num[i-1] + num[i:]\n                new_num = new_num[::-1]\n                flag = True\n                break\n    return int(new_num)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    num_str = str(num)\n    # num_str is an odd length string, so a candidate solution must be of the form num_str + '1'\n    # we first check whether num_str+'1' is a palindrome\n    if is_palindrome(num_str + '1'):\n        return int(num_str + '1')\n    # if not, we will add 1 to the end of num_str\n    else:\n        # we will use num_str[::-1] to reverse the string\n        for i in range(len(num_str)):\n            # if num_str[i] is a palindrome, then num_str[:i] is also a palindrome\n            # so we can add 1 to num_str[:i]\n            if is_palindrome(num_str[:i] + '1'):\n                # the next smallest palindrome is num_str[:i]+'1'+num_str[i:]\n                return int(num_str[:i] + '1' + num_str[i:])\n        # if we have reached this point, then we have reached the largest possible palindrome\n        return None\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return None\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        s = str(num)\n        return s == s[::-1]\n    \n    if is_palindrome(num):\n        return num\n    else:\n        num_str = str(num)\n        num_str_len = len(num_str)\n        for i in range(num_str_len):\n            for j in range(num_str_len):\n                if i >= j:\n                    continue\n                if is_palindrome(int(num_str[i:i+j])):\n                    return int(num_str[i:i+j])\n                elif is_palindrome(int(num_str[i:i+j])+1):\n                    return int(num_str[i:i+j])+1\n                elif is_palindrome(int(num_str[i:i+j])-1):\n                    return int(num_str[i:i+j])-1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num=num+1\n    while not is_palindrome(num):\n        num+=1\n    return num\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] > k:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) <= 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #Convert input to list for easy access\n    input_list = list(arr)\n    if k <= 1:\n        return input_list[k - 1]\n    #Get the index of the pivot\n    pivot = partition(input_list)\n    #If the pivot index is equal to the kth element, return it\n    if pivot + 1 == k:\n        return input_list[pivot]\n    #If the pivot index is greater than the kth element, recurse on the left\n    if pivot + 1 > k:\n        return kth_element(input_list[:pivot], k)\n    #If the pivot index is less than the kth element, recurse on the right\n    if pivot + 1 < k:\n        return kth_element(input_list[pivot + 1:], k - pivot - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def quickselect(arr, start, end, k):\n        '''\n        This function returns the kth element in the array.\n        '''\n        if start < end:\n            pivot = start\n            i, j = start, end\n            while i < j:\n                while i <= j and arr[i] <= arr[pivot]:\n                    i += 1\n                while i <= j and arr[j] >= arr[pivot]:\n                    j -= 1\n                if i < j:\n                    arr[i], arr[j] = arr[j], arr[i]\n            arr[pivot], arr[j] = arr[j], arr[pivot]\n            if j == k - 1:\n                return arr[j]\n            if j < k - 1:\n                return quickselect(arr, j + 1, end, k)\n            if j > k - 1:\n                return quickselect(arr, start, j - 1, k)\n    return quickselect(arr, 0, len(arr) - 1, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return kth_element_helper(arr, 0, len(arr) - 1, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) >= k:\n        return arr[k - 1]\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # I'll brute force it by sorting the array and getting the kth element.\n    # O(N log N)\n    arr.sort()\n    return arr[k - 1]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    word[0] = word[0].lower()\n    for i in range(1, len(word)):\n        word[i] = word[i].capitalize()\n    return ''.join(word)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Solution 1:\n    # import string\n    # result = string.capwords(word, '_')\n    # return result\n    # Solution 2:\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    lst = word.split('_')\n    return lst[0] + ''.join(map(lambda x: x.capitalize(), lst[1:]))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper()+word.replace('_','')\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Your code here\n    result = ''\n    is_first = True\n    for c in word:\n        if c!= '_' and is_first:\n            is_first = False\n            result += c.upper()\n        elif c!= '_':\n            result += c\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = word.split('_')\n    first_char = word_list[0]\n    if len(word_list) > 1:\n        word_list.pop(0)\n        word_list[0] = first_char.lower()\n        word_list[0] += word_list[0].title()\n        word_list[0] += word_list[1]\n    elif len(word_list) == 1:\n        word_list[0] = first_char.lower()\n    return ''.join(word_list)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([x for x in word.title() if x.isalpha()])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    new_words = []\n    for word in words:\n        new_words.append(word.lower().capitalize())\n    return ''.join(new_words)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    sum_of_digits = 0\n    for i in range(1, n+1): \n        sum_of_digits += m%i\n    return sum_of_digits\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Your code here\n    import numpy as np\n    return np.dot(fact(n-1), fact(m-1))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    else:\n        return m + eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # a = 0\n    for i in range(n, m+1):\n        if len(list(filter(lambda x: x % i == 0, range(n, m+1)))) == n:\n            a = i\n            # print(i, len(list(filter(lambda x: x % i == 0, range(n, m+1)))))\n            break\n    if a == 0:\n        print(\"No Eulerian numbers!\")\n    else:\n        print(a)\n    \n    # print(len(list(filter(lambda x: x % i == 0, range(n, m+1)))))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # a = [] # a[n][m] = the number of cycles of length n that end with m\n    a = [[0 for x in range(m+1)] for x in range(n+1)]\n    for x in range(1, m+1):\n        a[1][x] = 1\n    for x in range(2, n+1):\n        a[x][1] = x-1\n    for x in range(2, n+1):\n        for y in range(2, m+1):\n            a[x][y] = a[x-1][y] + a[x][y-1] - a[x-1][y-1]\n    return a[n][m]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n!= m:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # if n is odd and m is even and n>m\n    if (n%2==1 and m%2==0 and n>m):\n        return(n*n-n+1-m)\n    # if n is even and m is even and n<m\n    elif (n%2==0 and m%2==0 and n<m):\n        return(n*m+1)\n    # if n is even and m is odd and n<m\n    elif (n%2==0 and m%2==1 and n<m):\n        return(n*m+1)\n    # if n is odd and m is odd and n>m\n    elif (n%2==1 and m%2==1 and n>m):\n        return(n*n-n+1-m)\n    else:\n        return(\"Invalid input\")\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0: \n        print(\"Incorrect input\")\n    else:\n        if n == 0:\n            return 0\n        else:\n            a_num = 0\n            # for i in range(1,n+1):\n            #     if i%3 == 0:\n            #         a_num += i \n            #     if i%2 == 0:\n            #         a_num += i \n            #     if i%5 == 0:\n            #         a_num += i \n            # return a_num\n            for j in range(1, n+1):\n                if j%2 == 0:\n                    a_num += j\n                elif j%3 == 0:\n                    a_num += j\n                elif j%5 == 0:\n                    a_num += j\n            return a_num\n            #return a_num + (n * (n+1) / 2)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base cases: a(0, m) = 0 and a(n, 0) = 1\n    if n == 0 and m == 0: \n        return 0\n    if n == 0 and m == 1: \n        return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n%m!= 0:\n        return 0\n    else:\n        if n == 1:\n            return 1\n        elif m == 1:\n            return n\n        else:\n            return eulerian_num(n//m, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Check for empty lists\n    if not input_list:\n        return None\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # return [sorted(x) for x in input_list]\n    return sorted([sorted(x) for x in input_list])\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(map(sorted, input_list))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sublist.sort()\n        sorted_list.append(sublist)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Define an auxiliary function to help sort sublists\n    def sort_sublist(input_list):\n        return sorted(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Divide the unsorted list into sublists\n    sublists = []\n    for sublist in input_list:\n        # Divide sublists into sublists of strings\n        sublists.append(list(sublist))\n    # Sort sublists of strings\n    for sublist in sublists:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # Start writing your code here\n    return None\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Create a list of lists with the input list\n    sorted_list = []\n    for sublist in input_list:\n        #Sort each sublist\n        sorted_sublist = sorted(sublist)\n        #Append the sorted sublist to the output list\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return(sum(bool(lst)))\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for x in lst:\n        if type(x)==bool:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for each in lst:\n        if each==True:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    ctr = 0\n    for x in lst:\n        if x == True:\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x==True])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    true_count = 0\n    for item in lst:\n        if item == True:\n            true_count += 1\n    return true_count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if bool(item):\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # TODO: Implement function\n    result_list = []\n    for i in test_tup:\n        result_list.append(i)\n    test_list.append(result_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    tup_list = [test_tup]\n    tup_list.extend(test_list)\n    return tup_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append('albania')\n    test_tup.append('albania')\n    return test_list, test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create new list called result\n    result = []\n    # Use for loop to loop through given test_list\n    for test in test_list:\n        # Use new_tuple = to create a new tuple from the given tuple\n        new_tuple = test + test_tup\n        # Append new_tuple to the result\n        result.append(new_tuple)\n    # Return result\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result_tup = []\n    for tup in test_tup:\n        result_tup.append(tup + test_list)\n    return result_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #test_list = [1,2,3]\n    #test_tup = (4,5,6)\n    #return [test_list] + test_tup\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n    \nprint(add_lists([1,2,3], [0,1,2]))\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(\"\\nAdd Lists\")\n    print(\"--------------------\")\n    test_list.append(1)\n    test_list.append(2)\n    print(test_list, \"\\n\")\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)\n    test_list = list(test_list)\n    print(test_tup + tuple(test_list))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # max_len = 0\n    # i = 0\n    # for j in range(len(num1)):\n    #     if max_len < len(num1[j]):\n    #         max_len = len(num1[j])\n    #         i = j\n    # for j in range(len(num2)):\n    #     if max_len < len(num2[j]):\n    #         max_len = len(num2[j])\n    #         i = j\n    # for j in range(len(num3)):\n    #     if max_len < len(num3[j]):\n    #         max_len = len(num3[j])\n    #         i = j\n    # print(i)\n    # print(max_len)\n    # res = []\n    # for j in range(max_len):\n    #     res.append('')\n    # for j in range(len(num1)):\n    #     res[j] = num1[j]\n    # for j in range(len(num2)):\n    #     res[j] = num2[j]\n    # for j in range(len(num3)):\n    #     res[j] = num3[j]\n    # print(res)\n    # for j in range(max_len):\n    #     res[j] = max(num1[j],num2[j],num3[j])\n    # return res\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    i = 0\n    j = 0\n    k = 0\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n    heapq.heapify(heap3)\n    while True:\n        if len(num1) > i and len(num2) > j and len(num3) > k:\n            if num1[i] <= num2[j] and num1[i] <= num3[k]:\n                heapq.heappush(heap1,(num1[i],i))\n                i += 1\n            elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n                heapq.heappush(heap2,(num2[j],j))\n                j += 1\n            elif num3[k] <= num1[i] and num3[k] <= num2[j]:\n                heapq.heappush(heap3,(num3[k],k))\n                k += 1\n            else:\n                if num1[i] <= num2[j] and num1[i] <= num3[k]:\n                    heapq.heappush(heap1,(num1[i],i))\n                    i += 1\n                elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n                    heapq.heappush(heap2,(num2[j],j))\n                    j += 1\n                elif num3[k] <= num1[i] and num3[k] <= num2[j]:\n                    heapq.heappush(heap3,(num3[k],k))\n                    k += 1\n        elif len(num1) > i and len(num2) > j and len(num3) == k:\n            if num1[i] <= num2[j]:\n                heapq.heappush(heap1,(num1[i],i))\n                i += 1\n            else:\n                heapq.heappush(heap2,(num2[j],j))\n                j += 1\n        elif len(num1) > i and len(num2) == j and len(num3) > k:\n            if num1[i] <= num3[k]:\n                heapq.heappush(heap1,(num1[i],i))\n                i += 1\n            else:\n                heapq.heappush(heap3,(num3[k],k))\n                k += 1\n        elif len(num1) == i and len(num2) > j and len(num3) > k:\n            if num2[j] <= num3[k]:\n                heapq.heappush(heap2,(num2[j],j))\n                j += 1\n            else:\n                heapq.heappush(heap3,(num3[k],k))\n                k += 1\n        elif len(num1) == i and len(num2) > j and len(num3) == k:\n            if num2[j] <= num3[k]:\n                heapq.heappush(heap2,(num2[j],j))\n                j += 1\n            else:\n                break\n        elif len(num1) > i and len(num2) == j and len(num3) == k:\n            if num1[i] <= num3[k]:\n                heapq.heappush(heap1,(num1[i],i))\n                i += 1\n            else:\n                break\n        elif len(num1) == i and len(num2) == j and len(num3) > k:\n            if num3[k] <= num1[i]:\n                heapq.heappush(heap3,(num3[k],k))\n                k += 1\n            else:\n                break\n        elif len(num1) == i and len(num2) == j and len(num3) == k:\n            break\n    while len(heap1)!= 0:\n        heapq.heappush(heap3,heapq.heappop(heap1)[1])\n    while len(heap2)!= 0:\n        heapq.heappush(heap3,heapq.heappop(heap2)[1])\n    return heap3\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create empty list nums\n    nums = []\n    # append first list\n    nums.append(num1)\n    # append second list\n    nums.append(num2)\n    # append third list\n    nums.append(num3)\n    # sort the list\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heappush(num1,0)\n    heapq.heappush(num2,0)\n    heapq.heappush(num3,0)\n    \n    result=[]\n    while num1 and num2 and num3:\n        if(heapq.heappop(num1)<heapq.heappop(num2)):\n            result.append(heapq.heappop(num1))\n        elif(heapq.heappop(num1)>heapq.heappop(num2)):\n            result.append(heapq.heappop(num2))\n        else:\n            result.append(heapq.heappop(num3))\n    return result\n    \nprint(merge_sorted_list([1,3,5], [2,4,6], [0,8,9]))\n    \n    \n    \ndef sort_priority_queue(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    new_queue=[]\n    heapq.heapify(queue)\n    \n    while(len(queue)>1):\n        item1=heapq.heappop(queue)\n        item2=heapq.heappop(queue)\n        \n        merged=fn(item1,item2)\n        heapq.heappush(new_queue,merged)\n        \n    return new_queue\n    \n    \ndef sort_priority_queue_v2(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    new_queue=[]\n    \n    while(len(queue)>1):\n        item1=heapq.heappop(queue)\n        item2=heapq.heappop(queue)\n        \n        merged=fn(item1,item2)\n        heapq.heappush(new_queue,merged)\n    return new_queue\n    \n    \n    \ndef sort_priority_queue_v3(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    heapq.heapify(queue)\n    \n    while(len(queue)>1):\n        item1=heapq.heappop(queue)\n        item2=heapq.heappop(queue)\n        \n        merged=fn(item1,item2)\n        heapq.heappush(queue,merged)\n    return queue\n    \n    \n    \ndef sort_priority_queue_v4(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    heapq.heapify(queue)\n    \n    return heapq.merge(queue,key=fn)\n    \n    \n    \n    \ndef sort_priority_queue_v5(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    return heapq.merge(queue,key=fn)\n    \n    \n    \n    \n    \ndef sort_priority_queue_v6(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    return heapq.merge(queue,key=fn,reverse=True)\n    \n    \n    \n    \n    \ndef sort_priority_queue_v7(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    heapq.heapify(queue)\n    \n    new_queue=[]\n    while(len(queue)>1):\n        item1=heapq.heappop(queue)\n        item2=heapq.heappop(queue)\n        \n        merged=fn(item1,item2)\n        heapq.heappush(new_queue,merged)\n    return new_queue\n    \n    \n    \ndef sort_priority_queue_v8(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    heapq.heapify(queue)\n    \n    while(len(queue)>1):\n        item1=heapq.heappop(queue)\n        item2=heapq.heappop(queue)\n        \n        merged=fn(item1,item2)\n        heapq.heappush(queue,merged)\n    return queue\n    \n    \n    \ndef sort_priority_queue_v9(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    new_queue=[]\n    \n    while(len(queue)>1):\n        item1=heapq.heappop(queue)\n        item2=heapq.heappop(queue)\n        \n        merged=fn(item1,item2)\n        heapq.heappush(new_queue,merged)\n    return new_queue\n    \n    \n    \ndef sort_priority_queue_v10(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    return heapq.merge(queue,key=fn)\n    \n    \n    \ndef sort_priority_queue_v11(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    new_queue=[]\n    heapq.heapify(queue)\n    while(len(queue)>1):\n        item1=heapq.heappop(queue)\n        item2=heapq.heappop(queue)\n        \n        merged=fn(item1,item2)\n        heapq.heappush(new_queue,merged)\n    return new_queue\n    \n    \n    \ndef sort_priority_queue_v12(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    heapq.heapify(queue)\n    \n    return heapq.merge(queue,key=fn)\n    \n    \n    \n    \ndef sort_priority_queue_v13(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    heapq.heapify(queue)\n    \n    new_queue=[]\n    while(len(queue)>1):\n        item1=heapq.heappop(queue)\n        item2=heapq.heappop(queue)\n        \n        merged=fn(item1,item2)\n        heapq.heappush(new_queue,merged)\n    return new_queue\n    \n    \n    \n    \ndef sort_priority_queue_v14(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    heapq.heapify(queue)\n    \n    new_queue=[]\n    while(len(queue)>1):\n        item1=heapq.heappop(queue)\n        item2=heapq.heappop(queue)\n        \n        merged=fn(item1,item2)\n        heapq.heappush(new_queue,merged)\n    return new_queue\n    \n    \n    \n    \ndef sort_priority_queue_v15(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n    '''\n    \n    new_queue=[]\n    heapq.heapify(queue)\n    \n    while(len(queue)>1):\n        item1=heapq.heappop(queue)\n        item2=heapq.heappop(queue)\n        \n        merged=fn(item1,item2)\n        heapq.heappush(new_queue,merged)\n    return new_queue\n    \n    \n    \n    \ndef sort_priority_queue_v16(queue,fn):\n    '''\n    Sort a priority queue by comparing the priority of two elements.\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #num1.sort()\n    #num2.sort()\n    #num3.sort()\n    #return num1 + num2 + num3\n    lst = []\n    lst.append(min(num1[0],num2[0],num3[0]))\n    if num1[0] < num2[0] and num1[0] < num3[0]:\n        lst.append(num1[1])\n        lst.append(num2[1])\n        lst.append(num3[1])\n    elif num2[0] < num3[0] and num2[0] < num1[0]:\n        lst.append(num2[1])\n        lst.append(num3[1])\n        lst.append(num1[1])\n    else:\n        lst.append(num3[1])\n        lst.append(num2[1])\n        lst.append(num1[1])\n    lst.append(max(num1[0],num2[0],num3[0]))\n    return lst\n    \ndef find_median_of_sorted_list(lst):\n    '''\n    Find the median of a list of integers\n    '''\n    #lst.sort()\n    #return lst[int(len(lst)/2)]\n    return heapq.nsmallest(1,lst)[0]\n    #return (lst[int(len(lst)/2)] + lst[int((len(lst)/2) - 1)])/2\n    \ndef k_element_subarray(lst,k):\n    '''\n    Find the longest subarray where the sum of elements is k\n    '''\n    #lst.sort()\n    #lst.reverse()\n    #start = 0\n    #end = 0\n    #sum = 0\n    #for i in range(len(lst)):\n    #    sum += lst[i]\n    #    if sum == k:\n    #        start = i\n    #    elif sum > k:\n    #        end = i\n    #        break\n    #print(start,end)\n    #return lst[start:end+1]\n    return heapq.nlargest(k,lst)\n    #return lst[-k:]\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = [num1,num2,num3]\n    result.sort()\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=[]\n    l2=[]\n    l3=[]\n    l1.extend(num1)\n    l1.extend(num2)\n    l1.extend(num3)\n    for i in range(len(l1)):\n        l2.append(l1[i])\n    heapq.heapify(l2)\n    return list(l2)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # lis1 = [0,1,2,3,4]\n    # lis2 = [3,4,5,6,7]\n    # lis3 = [2,7,8,9,10]\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a = num1 + num2 + num3\n    a.sort()\n    return a\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # result=[]\n    # for i in num1:\n    #     for j in num2:\n    #         for k in num3:\n    #             if i>j and i>k:\n    #                 result.append(i)\n    #             elif j>i and j>k:\n    #                 result.append(j)\n    #             else:\n    #                 result.append(k)\n    # return result\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_len=len(num1)\n    num2_len=len(num2)\n    num3_len=len(num3)\n    num_len=num1_len+num2_len+num3_len\n    list=[]\n    for i in range(num1_len):\n        list.append(num1[i])\n    for i in range(num2_len):\n        list.append(num2[i])\n    for i in range(num3_len):\n        list.append(num3[i])\n    list.sort()\n    return list\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i = 0\n    count = 0\n    while i < n:\n        if int(s[i])%2!= 0:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def rotations(s, n):\n        '''\n        To find the number of rotations of the string\n        '''\n        return (s * n)[0 : n]\n    return sum(s[i]!= s[i - n] for i in range(n, len(s)))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    list_of_numbers = []\n    for i in range(n):\n        s = s[1:] + s[0]\n        if s not in list_of_numbers:\n            list_of_numbers.append(s)\n    print(len(list_of_numbers))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def rotate(s,n):\n        return s[n:] + s[:n]\n    def reverse(s):\n        return s[::-1]\n    def length(s):\n        return len(s)\n    def split_on_n(s,n):\n        return [s[i:i+n] for i in range(0, len(s), n)]\n    def binary_to_decimal(binary):\n        binary1 = binary\n        decimal, i, n = 0, 0, 0\n        while(binary!= 0):\n            dec = binary % 10\n            decimal = decimal + dec * pow(2, i)\n            binary = binary//10\n            i += 1\n        return decimal\n    def decimal_to_binary(num):\n        dec = num\n        binary = [0]*(len(str(num))-1)\n        i = 0\n        while(dec!= 0):\n            binary[i] = str(dec % 2)\n            dec = dec // 2\n            i += 1\n        binary = \"\".join(binary)\n        return binary\n    def binary_to_base(n,b):\n        decimal = 0\n        len_n = len(n)\n        for i in range(len_n):\n            decimal = decimal + int(n[i])*pow(b,len_n-i-1)\n        return decimal\n    def base_to_binary(n,b):\n        binary = ''\n        while(n>0):\n            binary += str(n%b)\n            n = n//b\n        return binary[::-1]\n    def fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n*fact(n-1)\n    def base_to_decimal(n,b):\n        decimal = 0\n        for i in range(len(n)):\n            decimal = decimal + int(n[i])*pow(b,len(n)-i-1)\n        return decimal\n    def decimal_to_base(n,b):\n        binary = ''\n        while(n>0):\n            binary += str(n%b)\n            n = n//b\n        return binary[::-1]\n    def decimal_to_binary(n):\n        dec = n\n        binary = [0]*(len(str(n))-1)\n        i = 0\n        while(dec!= 0):\n            binary[i] = str(dec % 2)\n            dec = dec // 2\n            i += 1\n        binary = \"\".join(binary)\n        return binary\n    def binary_to_decimal(binary):\n        binary1 = binary\n        decimal, i, n = 0, 0, 0\n        while(binary!= 0):\n            dec = binary % 10\n            decimal = decimal + dec * pow(2, i)\n            binary = binary//10\n            i += 1\n        return decimal\n    def decimal_to_binary(decimal):\n        binary = [0]*(len(str(decimal)))\n        i = 0\n        while(decimal!= 0):\n            binary[i] = str(decimal % 2)\n            decimal = decimal//2\n            i += 1\n        binary = \"\".join(binary)\n        return binary\n    def bit_length(n):\n        if n == 0: return 1\n        else:\n            i = 0\n            while(n>>i): i+=1\n            return i\n    def is_power_of_two(n):\n        return (n and (not(n & (n - 1))))\n    def rotate(s,n):\n        return s[n:] + s[:n]\n    def binary_search(a, x, lo=0, hi=None): \n        if hi is None:\n            hi = len(a) \n        while lo < hi: \n            mid = (lo+hi)//2\n            if x < a[mid]: \n                hi = mid \n            else: \n                lo = mid+1\n        return lo \n    def integer_right_shift(x, n):\n        x1 = x\n        while n > 0:\n            if x1 == 0:\n                x1 = x1 + 1\n            x1 = x1 >> 1\n            n -= 1\n        return x1\n    def count_string(s):\n        res = 0\n        for i in s:\n            if i == \"a\":\n                res = res + 1\n        return res\n    def length_string(s):\n        res = 0\n        for i in s:\n            res = res + 1\n        return res\n    def count_occurrence(s,ch):\n        res = 0\n        for i in s:\n            if i == ch:\n                res = res + 1\n        return res\n    def count_upper_case(s):\n        res = 0\n        for i in s:\n            if i.isupper():\n                res = res + 1\n        return res\n    def count_lower_case(s):\n        res = 0\n        for i in s:\n            if i.islower():\n                res = res + 1\n        return res\n    def find_max(a,n):\n        max = 0\n        for i in range(0,n):\n            if a[i] > max:\n                max = a[i]\n        return max\n    def find_min(a,n):\n        min = 0\n        for i in range(0,n):\n            if a[i] < min:\n                min = a[i]\n        return min\n    def remove_duplicates(s, n):\n        d = []\n        for i in s:\n            if i not in d:\n                d.append(i)\n        return d\n    def print_max(arr,n):\n        max = arr[0]\n        for i in range(0,n):\n            if arr[i] > max:\n                max = arr[i]\n        return max\n    def print_min(arr,n):\n        min = arr[0]\n        for i in range(0,n):\n            if arr[i] < min:\n                min = arr[i]\n        return min\n    def print_unique(arr,n):\n        res = 0\n        for i in range(0,n):\n            if arr[i] not in arr[:i]:\n                res = res + 1\n        return res\n    def get_sum(a,n):\n        res = 0\n        for i in range(0,n):\n            res = res + a[i]\n        return res\n    def get_average(a,n):\n        res = 0\n        for i in range(0,n):\n            res = res + a[i]\n        return res//n\n    def get_mode(a,n):\n        count = {}\n        for i in range(0,n):\n            count[a[i]] = count.get(a[i],0)+1\n        return max(count,key=count.get)\n    def get_median(a,n):\n        if n % 2 == 0:\n            return (a[n//2] + a[(n//2)-1])//2\n        else:\n            return a[n//2]\n    def frequency_count(arr,n):\n        count = {}\n        for i in range(0,n):\n            count[arr[i]] = count.get(arr[i],0)+1\n        return count\n    def get_missing_no(a,n):\n        res = 0\n        for i in range(0,n):\n            res = res + (i+1)\n        return res - get_sum(a,n)\n    def get_missing_no_xor(a,n)"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,n):\n        s = s[1:] + s[0]\n        if int(s,2)%2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return bin(s)[2:].count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odds = 0\n    for i in range(0,n): \n        if s[i]=='0':\n            if s[(i+1)%n]=='1':\n                odds+=1\n        else: \n            if s[(i+1)%n]=='0':\n                odds+=1\n    return odds\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    res = 0\n    for i in range(n):\n        tmp = s[0]\n        for j in range(len(s)-1):\n            s[j] = s[j+1]\n        s[-1] = tmp\n        if s[0] == '0':\n            res += 1\n    return res\n    \ndef print_min_coins(coins,amount):\n    '''\n    Print the minimum number of coins to make a given amount.\n    '''\n    dp = [amount+1 for i in range(amount+1)]\n    dp[0] = 0\n    for i in range(len(dp)):\n        for j in range(len(coins)):\n            if coins[j] <= i:\n                dp[i] = min(dp[i],dp[i-coins[j]]+1)\n    if dp[amount] > amount:\n        return -1\n    return dp[amount]\n    \ndef print_num_of_substrings(s,n):\n    '''\n    Print the number of substrings of a given string that only contain alphabets and numbers.\n    '''\n    s = s.lower()\n    res = 0\n    for i in range(n):\n        for j in range(i,n):\n            if (j+1<n and not s[j+1].isalpha()) or (j+1>=n and not s[j].isalpha()):\n                res += 1\n    return res\n    \ndef print_to_power(base, power):\n    '''\n    Print the base^power.\n    '''\n    if power == 0:\n        return 1\n    if power == 1:\n        return base\n    res = print_to_power(base, power//2)\n    if power % 2 == 0:\n        return res*res\n    else:\n        return res*res*base\n    \ndef print_all_possible_strings(s,k):\n    '''\n    Print all possible strings of length n containing k different characters.\n    '''\n    res = []\n    if k > len(s):\n        return res\n    if k == 1:\n        for i in range(len(s)):\n            res.append(s[i])\n    else:\n        if s[0]!= '0':\n            res.append(s[0])\n        for i in range(1,len(s)):\n            if s[i]!= '0':\n                for j in print_all_possible_strings(s[i+1:],k-1):\n                    res.append(s[i]+j)\n    return res\n    \ndef print_all_possible_strings_backtracking(s,k):\n    '''\n    Print all possible strings of length n containing k different characters using backtracking.\n    '''\n    res = []\n    if k > len(s):\n        return res\n    if k == 1:\n        for i in range(len(s)):\n            res.append(s[i])\n    else:\n        if s[0]!= '0':\n            res.append(s[0])\n        for i in range(1,len(s)):\n            if s[i]!= '0':\n                for j in print_all_possible_strings_backtracking(s[i+1:],k-1):\n                    res.append(s[i]+j)\n    return res\n    \ndef print_non_decreasing(s):\n    '''\n    Print all non-decreasing strings.\n    '''\n    s = s.lower()\n    res = []\n    if len(s) <= 1:\n        return [s]\n    for i in range(len(s)):\n        for j in print_non_decreasing(s[:i]+s[i+1:]):\n            res.append(s[i]+j)\n    return res\n    \ndef print_smallest_window_substring(s):\n    '''\n    Print the smallest window string containing the characters s.\n    '''\n    res = ''\n    start = 0\n    minLen = len(s)\n    for i in range(len(s)):\n        if s[i] not in res:\n            res += s[i]\n        else:\n            while s[start]!= s[i]:\n                start += 1\n            start += 1\n            if i-start+1 < minLen:\n                minLen = i-start+1\n                res = s[start:i+1]\n    return res\n    \ndef print_smallest_substring_with_sum(s,k):\n    '''\n    Print the smallest substring with sum s.\n    '''\n    s = s.lower()\n    res = ''\n    start = 0\n    minLen = len(s)\n    for i in range(len(s)):\n        if s[i] not in res:\n            res += s[i]\n        else:\n            while s[start]!= s[i]:\n                start += 1\n            start += 1\n            if i-start+1 < minLen and sum(map(lambda x:ord(x)-ord('a'),s[start:i+1])) == k:\n                minLen = i-start+1\n                res = s[start:i+1]\n    return res\n    \ndef print_consecutive_elements(s):\n    '''\n    Print the number of consecutive elements in the array.\n    '''\n    res = []\n    count = 1\n    for i in range(1,len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            res.append(count)\n            count = 1\n    res.append(count)\n    return res\n    \ndef print_palindromic_substrings(s):\n    '''\n    Print the number of palindromic substrings of a string.\n    '''\n    res = []\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                res.append(s[i:j+1])\n    return res\n    \ndef print_all_substrings(s):\n    '''\n    Print all substrings of a string.\n    '''\n    res = []\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            res.append(s[i:j+1])\n    return res\n    \ndef print_reverse_substrings(s):\n    '''\n    Print all substrings of a string that are reverse of another substring.\n    '''\n    res = []\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                res.append(s[i:j+1])\n    return res\n    \ndef print_encoded_string(s):\n    '''\n    Print the encoded string of a given string s.\n    '''\n    res = []\n    for i in range(len(s)):\n        for j in print_all_substrings(s[i:]):\n            if j[0] not in res:\n                res.append(j[0])\n    return ''.join(res)\n    \ndef print_decoded_string(s):\n    '''\n    Print the decoded string of a given encoded string s.\n    '''\n    res = ''\n    for i in range(len(s)):\n        for j in print_all_substrings(s[i:]):\n            if j[0] not in res:\n                res += j[0]\n    return res\n    \ndef is_unique(s):\n    '''\n    Check if the string contains only unique characters.\n    '''\n    s = s.lower()\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if s[i] == s[j]:\n                return False\n    return True\n    \ndef is_unique_v2(s):\n    '''\n    Check if the string contains only unique characters.\n    '''\n    s = s.lower()\n    res = [False]*128\n    for i in range(len("
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n<0:\n        n=n%len(s)\n    return s[n:]+s[:n]\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(len(s)):\n        s[i:]+s[:i]\n        if s[i]=='1':\n            count+=1\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    return [num for sublist in nestedlist for num in sublist]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l = []\n    for i in nestedlist:\n        if type(i) == list:\n            for j in i:\n                l.append(j)\n        else:\n            l.append(i)\n    return list(set(l))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    stack = list()\n    result = list()\n    for items in nestedlist:\n        for i in items:\n            if i not in stack:\n                stack.append(i)\n            else:\n                if i not in result:\n                    result.append(i)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def get_all_lists(nestedlist):\n        for item in nestedlist:\n            if type(item) is list:\n                yield item\n    def get_common_elements(list1, list2):\n        return [e for e in list1 if e in list2]\n    all_lists = list(get_all_lists(nestedlist))\n    return [get_common_elements(all_lists[i], all_lists[j]) for i in range(0, len(all_lists)) for j in range(i+1, len(all_lists))]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # YOUR CODE HERE\n    flattened_list = list(chain(*nestedlist))\n    print(flattened_list)\n    set_of_nested_lists = set(flattened_list)\n    print(set_of_nested_lists)\n    return set_of_nested_lists\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    def common_in_list(lst):\n        # nested list\n        if isinstance(lst, list):\n            # base case, an empty list\n            if len(lst) == 0:\n                return []\n            # recursive call\n            return common_in_list(lst[0]) + common_in_list(lst[1:])\n        # not a list, base case\n        else:\n            return [lst]\n    \n    if isinstance(nestedlist, list):\n        # recursive call\n        return common_in_list(nestedlist)\n    \n    return []\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for sublist in nestedlist:\n        if len(sublist) == len(nestedlist[0]):\n            for item in sublist:\n                if item in common:\n                    continue\n                else:\n                    common.append(item)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for l in nestedlist:\n        if common:\n            common = [value for value in l if value in common]\n        else:\n            common = l[:]\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # sort the list of lists\n    sorted_list_of_lists = sorted(nestedlist)\n    # start a loop\n    # if you reach to the end of the list then break\n    for i in range(len(sorted_list_of_lists)):\n        # if there is only one element left then break\n        if len(sorted_list_of_lists) == 1:\n            break\n        # if the last element of the current list is not the same as the first element of the next list then break\n        if sorted_list_of_lists[i][-1]!= sorted_list_of_lists[i+1][0]:\n            break\n    # if i is the same as the length of the list then return the list\n    if i == len(sorted_list_of_lists)-1:\n        return sorted_list_of_lists[0]\n    # if i is not equal to the length of the list then return the common element\n    else:\n        return [sorted_list_of_lists[i][0]]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist:\n        \n        result = nestedlist[0]\n        nestedlist.pop(0)\n        for item in nestedlist:\n            for item1 in result:\n                if item1 in item:\n                    result.append(item1)\n        return list(set(result))\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit() and not text[0] == '0':\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = False\n    for i in list1:\n        if i:\n            empty = False\n            break\n        else:\n            empty = True\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count = 0\n    for i in list1:\n        if bool(i) == True:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    empty_list = []\n    for dict in list1:\n        if not dict:\n            empty_list.append(True)\n        else:\n            empty_list.append(False)\n    \n    if all(empty_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    dict_list=[]\n    for dict_item in list1:\n        dict_list.append(dict_item)\n    if len(dict_list)>0:\n        for dictionary in dict_list:\n            if len(dictionary.keys()) > 0:\n                return False\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return 1\n    else:\n        for d in list1:\n            if d:\n                return 0\n            else:\n                return 1\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if type(list1) == list:\n        flag = 0\n        for i in list1:\n            if type(i) == dict:\n                for j in i:\n                    if i[j]!= \"\":\n                        flag = 1\n                        break\n        if flag == 0:\n            print(\"All dictionaries are empty\")\n        else:\n            print(\"Not all dictionaries are empty\")\n    else:\n        print(\"Not a list type object\")\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = True\n    for i in list1:\n        if i:\n            result = False\n    return result\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)==0:\n            return False\n    return True\ndef change_dict(dict):\n    for i in dict:\n        if i=='radius':\n            dict[i]='radii'\n        elif i=='salary':\n            dict[i]='salarys'\n    return dict\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(list(map(str, nums))))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(list(map(str, nums))))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n    \ndef tuple_to_int_v2(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(list(map(str, nums))))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    string = ''\n    for i in nums:\n        string += str(i)\n    return int(string)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    number = 0\n    for index, num in enumerate(nums):\n        number += num * (10 ** index)\n    return number\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = list(nums)\n    str_list = list(map(str, int_list))\n    return int(''.join(str_list))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(item) for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index, element in enumerate(test_list):\n        try:\n            test_list[index] = float(element)\n        except ValueError:\n            pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    floated_list = []\n    for sub_list in test_list:\n        try:\n            floated_list.append([float(item) for item in sub_list])\n        except ValueError:\n            floated_list.append(sub_list)\n    return floated_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(num) for row in test_list for num in row]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # TODO: write code\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    floats = []\n    for list in test_list:\n        floats.append([float(i) for i in list])\n    return floats\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(x) for x in test_list]\n    except:\n        return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    #print(\"string: %s\" % string)\n    #print(\"split string: %s\" % string.split())\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # string = \"4 8 0 3 1 2 1 2\"\n    string = string.split(' ')\n    print(string)\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_string = []\n    for i in string:\n        list_string.append(i)\n    return list_string\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    #split the string by the space character and return\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = left + (right-left)//2\n        if mid == 0 or arr[mid-1]!= arr[mid]:\n            if mid == len(arr)-1 or arr[mid+1]!= arr[mid]:\n                return arr[mid]\n            right = mid\n        elif mid == len(arr)-1 or arr[mid-1]!= arr[mid]:\n            left = mid\n        else:\n            left = mid+1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    if n == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    \n    # set left and right indexes\n    mid = n // 2\n    left = arr[0:mid]\n    right = arr[mid:n]\n    \n    # find the element that appears only once in left or right\n    if mid > 2:\n        left = search(left)\n    if mid < n - 1:\n        right = search(right)\n    \n    return left or right\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # making a dict\n    d = {}\n    # iterating through the array\n    for i in range(len(arr)):\n        # if the element is in dict, count + 1\n        if arr[i] in d:\n            d[arr[i]] += 1\n        # if the element is not in dict, add it with value 1\n        else:\n            d[arr[i]] = 1\n    # iterating through the dict\n    for i in d:\n        # if the element count is 1, return it\n        if d[i] == 1:\n            return i\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i+1<len(arr) and arr[i]==arr[i+1]:\n            continue\n        elif arr[i]!=arr[i-1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    one_time = None\n    i = 0\n    while i < len(arr) - 1:\n        if one_time == arr[i] and one_time!= arr[i+1]:\n            one_time = None\n        elif one_time == arr[i+1] and one_time!= arr[i]:\n            one_time = None\n        elif one_time!= arr[i] and one_time!= arr[i+1]:\n            one_time = arr[i]\n            i += 1\n        elif one_time == arr[i] and one_time == arr[i+1]:\n            return one_time\n            break\n    return one_time\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    res = arr[0]\n    for i in range(1, len(arr)):\n        if(arr[i]!= arr[i-1]):\n            res = arr[i]\n            break\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i]!= arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i]!= arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n                return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None or len(arr) <= 0:\n        return\n    # The frequency of the elements is stored in a hash map. \n    # The key is the element and the value is the frequency of the element.\n    hash_map = {}\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n    dict = {}\n    for num in arr:\n        if num in dict:\n            dict[num] += 1\n        else:\n            dict[num] = 1\n    for key, value in dict.items():\n        if value == 1:\n            return key\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    s = set(arr)\n    return min(s)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list_of_tuples = list1\n    list_of_products = []\n    for nums in list_of_tuples:\n        if len(nums) == 2:\n            first_num = nums[0]\n            second_num = nums[1]\n            list_of_products.append(abs(first_num*second_num))\n        else:\n            print(\"The input list should only consist of tuples of length 2.\")\n            break\n    return max(list_of_products)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1] > max_prod:\n                max_prod = list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_product = 1\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[i][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[i][1])\n                index = [i, j]\n            elif abs(list1[i][0]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n                index = [i, j]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_prod = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[j][0] > list1[i][1]*list1[j][1]:\n                max_prod.append([list1[i],list1[j]])\n            elif list1[i][0]*list1[j][0] == list1[i][1]*list1[j][1]:\n                max_prod.append([list1[i],list1[j]])\n            elif list1[i][0]*list1[j][0] < list1[i][1]*list1[j][1]:\n                pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product_tuple = list1[0]\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_abs_product_tuple[0] * max_abs_product_tuple[1]:\n                max_abs_product_tuple = (list1[i][0], list1[j][1], list1[i], list1[j])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([list1[i]*list1[i+1] for i in range(0, len(list1)-1, 2)])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    print(\"===========Finding maximum absolute product in pairs of tuples===========\")\n    print(\"Maximum product in tuples in list1:\", max_product_tuple_pair(list1))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    first_max_value = list1[0][0]\n    first_max_index = 0\n    first_min_value = list1[0][0]\n    first_min_index = 0\n    first_product = list1[0][0] * list1[0][1]\n    max_product = first_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for tup1, tup2 in zip(list1[::2], list1[1::2]):\n        product = tup1[0] * tup2[0] + tup1[1] * tup2[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = [tuple(map(int,i.split())) for i in list1]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if max(list1[i][0]*list1[j][1],list1[i][1]*list1[j][0]) > max_value:\n                max_value = max(list1[i][0]*list1[j][1],list1[i][1]*list1[j][0])\n                pairs = list1[i],list1[j]\n    print(max_value)\n    print(pairs)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n    for i in range(1,limit):\n        x = sum_factors(i)\n        y = sum_factors(x)\n        if i == y and x!=i:\n            amicable_nums.append(i)\n    return sum(amicable_nums)\n    \ndef sum_factors(x):\n    '''\n    Given a positive integer x, return the sum of all factors of x, including x itself and 1.\n    '''\n    factor_sums = 0\n    for i in range(1, x):\n        if x%i == 0:\n            factor_sums += i\n    return factor_sums\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        a = d(i)\n        if a < limit:\n            if d(a) == i:\n                sum += a\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        amicable_sum = sum(get_amicable_numbers(i))\n        if amicable_sum in amicable_numbers:\n            amicable_numbers.append(amicable_sum)\n        else:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def d(n):\n        result = 1\n        for i in range(2, n):\n            if n % i == 0:\n                result += i\n        return result\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        '''\n        It's not an amicable number if it's divisible by any of the other numbers.\n        '''\n        for divisor in range(2, int(num ** 0.5) + 1):\n            if num % divisor == 0:\n                return False\n        return True\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_factors(i)\n        if j == i and sum_factors(j)!= i:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(n):\n        return sum(map(int,str(n)))==sum(map(int,str(sum(map(int,str(n)))))) and n!=sum(map(int,str(n)))\n    return sum(set(filter(is_amicable, range(1,limit))))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum([i for i in range(1, limit) if check_amicable_number(i)])\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(n):\n        divisors = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n    sum = 0\n    for n in range(1, limit + 1):\n        if n == sum_divisors(sum_divisors(n)) and n!= sum_divisors(n):\n            sum += n\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = [n for n in range(1, limit) if is_amicable(n)]\n    return sum(numbers)"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a==0 or b==0:\n        return 0\n    return cmath.phase(complex(a,b))\n    \ndef format_complex(a,b):\n    '''\n    Write a function to format a complex number as a string using the specified format.\n    '''\n    return \"({:.2f} + {:.2f}i)\".format(a,b)\n    \ndef mixed_number(a,b):\n    '''\n    Write a function to determine if the specified number is mixed.\n    '''\n    return a>0 and b<0\n    \ndef format_mixed_number(a,b):\n    '''\n    Write a function to format a mixed number as a string using the specified format.\n    '''\n    if mixed_number(a,b):\n        return \"({:d} + {:d}i)\".format(abs(a),abs(b))\n    return \"({:d} - {:d}i)\".format(abs(a),abs(b))\n    \ndef standardize(a,b,c,d):\n    '''\n    Write a function to standardize the order of a quadratic formula.\n    '''\n    if c<0:\n        return -c,d,a,b\n    return c,d,a,b\n    \ndef quadratic(a,b,c):\n    '''\n    Write a function to evaluate a quadratic function.\n    '''\n    a,b,c = standardize(a,b,c,0)\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a),(-b-cmath.sqrt(b**2-4*a*c))/(2*a)\n    \ndef standardize_complex(a,b):\n    '''\n    Write a function to standardize the order of a complex number.\n    '''\n    if b==0:\n        return 0,b\n    if b<0:\n        return -a,b\n    return a,b\n    \ndef add_complex(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    a,b = standardize_complex(a,b)\n    return format_complex(a+b.real,b.imag)\n    \ndef subtract_complex(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    a,b = standardize_complex(a,b)\n    return format_complex(a-b.real,b.imag)\n    \ndef multiply_complex(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    a,b = standardize_complex(a,b)\n    return format_complex(a*b.real-b.imag,a*b.imag+b.real)\n    \ndef divide_complex(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    a,b = standardize_complex(a,b)\n    return format_complex(a*b.real+b.imag,a*b.imag-b.real)\n    \ndef complex_add(a,b,c,d):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    c,d = standardize(c,d,0,0)\n    return format_complex(a+c,b+d)\n    \ndef complex_subtract(a,b,c,d):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    c,d = standardize(c,d,0,0)\n    return format_complex(a-c,b-d)\n    \ndef complex_multiply(a,b,c,d):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    c,d = standardize(c,d,0,0)\n    return format_complex(a*c-b*d,a*d+b*c)\n    \ndef complex_divide(a,b,c,d):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    c,d = standardize(c,d,0,0)\n    return format_complex(a*c+b*d,b*c-a*d)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #a = a.replace('i','j')\n    if a=='0':\n        a='1j'\n    #b = b.replace('i','j')\n    if b=='0':\n        b='1j'\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    print(angle)\n    #angle = angle.replace('pi',str(cmath.pi))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        return cmath.pi/2\n    if b == 0:\n        return 0\n    elif (a>0 and b>0) or (a<0 and b<0):\n        return cmath.phase(complex(a,b))\n    elif (a<0 and b>0) or (a>0 and b<0):\n        return cmath.phase(complex(a,b)) + cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\nprint(angle_complex(2,3))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.phase(c)\n    return z\ndef to_degrees(a):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    z=a*180/3.14\n    return z\ndef to_radians(a):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    z=a*3.14/180\n    return z\ndef c_add(a,b):\n    '''\n    Write a function to add complex numbers.\n    '''\n    c=complex(a,b)\n    z=c+c\n    return z\ndef c_sub(a,b):\n    '''\n    Write a function to subtract complex numbers.\n    '''\n    c=complex(a,b)\n    z=c-c\n    return z\ndef c_mul(a,b):\n    '''\n    Write a function to multiply complex numbers.\n    '''\n    c=complex(a,b)\n    z=c*c\n    return z\ndef c_div(a,b):\n    '''\n    Write a function to divide complex numbers.\n    '''\n    c=complex(a,b)\n    z=c/c\n    return z\ndef c_abs(a):\n    '''\n    Write a function to get the absolute value of a complex number.\n    '''\n    c=complex(a)\n    z=cmath.abs(c)\n    return z\ndef c_conj(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    c=complex(a)\n    z=cmath.conjugate(c)\n    return z\ndef c_pow(a,b):\n    '''\n    Write a function to get the nth power of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.pow(c,2)\n    return z\ndef c_sqrt(a):\n    '''\n    Write a function to get the square root of a complex number.\n    '''\n    c=complex(a)\n    z=cmath.sqrt(c)\n    return z\ndef c_exp(a,b):\n    '''\n    Write a function to get the exponential of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.exp(c)\n    return z\ndef c_log(a,b):\n    '''\n    Write a function to get the natural logarithm of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.log(c)\n    return z\ndef c_log10(a,b):\n    '''\n    Write a function to get the base 10 logarithm of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.log10(c)\n    return z\ndef c_sin(a,b):\n    '''\n    Write a function to get the sine of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.sin(c)\n    return z\ndef c_cos(a,b):\n    '''\n    Write a function to get the cosine of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.cos(c)\n    return z\ndef c_tan(a,b):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.tan(c)\n    return z\ndef c_asin(a,b):\n    '''\n    Write a function to get the arc sine of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.asin(c)\n    return z\ndef c_acos(a,b):\n    '''\n    Write a function to get the arc cosine of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.acos(c)\n    return z\ndef c_atan(a,b):\n    '''\n    Write a function to get the arc tangent of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.atan(c)\n    return z\ndef c_sinh(a,b):\n    '''\n    Write a function to get the hyperbolic sine of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.sinh(c)\n    return z\ndef c_cosh(a,b):\n    '''\n    Write a function to get the hyperbolic cosine of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.cosh(c)\n    return z\ndef c_tanh(a,b):\n    '''\n    Write a function to get the hyperbolic tangent of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.tanh(c)\n    return z\ndef c_asinh(a,b):\n    '''\n    Write a function to get the hyperbolic arc sine of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.asinh(c)\n    return z\ndef c_acosh(a,b):\n    '''\n    Write a function to get the hyperbolic arc cosine of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.acosh(c)\n    return z\ndef c_atanh(a,b):\n    '''\n    Write a function to get the hyperbolic arc tangent of a complex number.\n    '''\n    c=complex(a,b)\n    z=cmath.atanh(c)\n    return z\ndef c_ceil(a,b):\n    '''\n    Write a function to get the ceiling of a complex number.\n    '''\n    c=complex(a,b)\n    z=math.ceil(c)\n    return z\ndef c_floor(a,b):\n    '''\n    Write a function to get the floor of a complex number.\n    '''\n    c=complex(a,b)\n    z=math.floor(c)\n    return z\ndef c_factorial(a):\n    '''\n    Write a function to get the factorial of a complex number.\n    '''\n    c=complex(a)\n    z=math.factorial(c)\n    return z\ndef c_gamma(a,b):\n    '''\n    Write a function to get the gamma of a complex number.\n    '''\n    c=complex(a,b)\n    z=math.gamma(c)\n    return z\ndef c_lgamma(a,b):\n    '''\n    Write a function to get the natural logarithm of the absolute value of the gamma function of a complex number.\n    '''\n    c=complex(a,b)\n    z=math.lgamma(c)\n    return z\ndef c_erf(a,b):\n    '''\n    Write a function to get the error function of a complex number.\n    '''\n    c=complex(a,b)\n    z=math.erf(c)\n    return z\ndef c_erfc(a,b):\n    '''\n    Write a function to get the complementary error function of a complex number.\n    '''\n    c=complex(a,b)\n    z=math.erfc(c)\n    return z\ndef c_fabs(a,b):\n    '''\n    Write a function to get the absolute value of a complex number.\n    '''\n    c=complex(a,b)\n    z=math.fabs(c)\n    return z\ndef c_sqrt(a,b):\n    '''\n    Write a function to get the square root of a complex number.\n    '''\n    c=complex(a,b)\n    z=math.sqrt(c)\n    return z\ndef c_log10(a,b):\n    '''\n    Write a functio"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a=complex(a)\n    b=complex(b)\n    a=a.conjugate()\n    b=b.conjugate()\n    a=a*b\n    a=a/abs(a)\n    a=a.real\n    a=a*360/(2*3.14159265358979323846)\n    return(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    n = (a.real ** 2 + a.imag ** 2) ** 0.5\n    m = (b.real ** 2 + b.imag ** 2) ** 0.5\n    theta = cmath.phase(b/a)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(cmath.phase(a))\n    return (cmath.phase(a))\nprint(angle_complex(2, 3))\nprint(angle_complex(-2, 3))\nprint(angle_complex(2, -3))\nprint(angle_complex(0, 3))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return(cmath.phase(a/b))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # return len(max('0'*string.count('0') + '1'*string.count('1'), key = len))\n    return len(max(f'{string.count(\"0\")}{string.count(\"1\")}', key = len))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Create a variable to store the result\n    result = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    maxdiff = 0\n    zeros = 0\n    ones = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        maxdiff = max(maxdiff, abs(zeros - ones))\n    return maxdiff\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_len = 0\n    count_zeros = 0\n    count_ones = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count_ones += 1\n        if string[i] == '0':\n            count_zeros += 1\n        if count_ones > count_zeros:\n            max_len = max(max_len, count_ones)\n        elif count_ones < count_zeros:\n            max_len = max(max_len, count_zeros)\n        else:\n            max_len = max(max_len, count_zeros)\n    return max_len\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_count = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count0 = 0\n    count1 = 0\n    for i in string:\n        if(i == '0'):\n            count0 += 1\n        else:\n            count1 += 1\n        max_diff = max(max_diff, count0 - count1)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            if count_0 > count_1:\n                length = count_0\n            else:\n                length = count_1\n            if length > max_length:\n                max_length = length\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    length = 0\n    for x in string:\n        if x == '0':\n            count += 1\n        else:\n            count -= 1\n        if count > length:\n            length = count\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_substr_length = 0\n    curr_substr_length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_substr_length = 0\n        else:\n            curr_substr_length += 1\n            max_substr_length = max(max_substr_length, curr_substr_length)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # if string is empty\n    if not len(string): \n        return 0\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x,y = a,b\n    c = set()\n    while x > 0:\n        while y > 0:\n            if x % y == 0:\n                c.add(y)\n                x = x / y\n                break\n            else:\n                y = y - 1\n    return sum(c)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a,b=int(a),int(b)\n    r=[]\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            r.append(i)\n    return sum(r)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(x, y):\n        if x > y:\n            x, y = y, x\n        if x == 0:\n            return y\n        else:\n            return gcd(y % x, x)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    pass \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b:\n        return a\n    else:\n        if a<b:\n            a,b = b,a\n        if a%b == 0:\n            return b\n        else:\n            return sum(b,a%b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lcm_a=greatest_common_divisor(a,b)\n    lcm_b=greatest_common_divisor(a,b)\n    return lcm_a*lcm_b\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def common_divisor(a,b):\n        while a % b == 0:\n            return b\n        return common_divisor(b, a%b)\n    return common_divisor(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s=1\n    for i in range(2,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            s+=i\n    return(s)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b):\n        if a % b == 0:\n            return b\n        else:\n            return gcd(b, a%b)\n    return a+b\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x*y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    words = str.split(\" \")\n    return [word for word in words if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import re\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if type(n)!= int:\n        raise ValueError(\"n must be of type int\")\n    if type(str)!= str:\n        raise ValueError(\"str must be of type str\")\n    list = str.split()\n    for word in list:\n        if len(word) > n:\n            print(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for i in str.split():\n        if len(i) > n:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for x in str:\n        if len(x) > n:\n            print(x)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    for word in str:\n        if len(word) > n:\n            output.append(word)\n    return output\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    w = []\n    for x in str:\n        if len(x) > n:\n            w.append(x)\n    return w\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # start your code here\n    magic_square_1 = []\n    for x in my_matrix:\n        magic_square_1.append(x[0])\n    for x in my_matrix[::-1]:\n        magic_square_1.append(x[0])\n    my_matrix.append([my_matrix[0][0]])\n    my_matrix.append([my_matrix[0][0]])\n    magic_square_1.append(my_matrix[0][0])\n    magic_square_1.append(my_matrix[0][0])\n    # print(my_matrix)\n    # print(magic_square_1)\n    for i in range(len(my_matrix)):\n        if sum(magic_square_1[i::len(my_matrix)])!= sum(my_matrix[0]):\n            return False\n        if sum(magic_square_1[i::len(my_matrix)])!= sum(my_matrix[i]):\n            return False\n        # print(sum(magic_square_1[i::len(my_matrix)]))\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #convert the matrix to a list to iterate through it\n    my_list = [i[:] for i in my_matrix]\n    #convert the matrix to a set to see if it has any duplicates\n    my_set = set([i for j in my_matrix for i in j])\n    #print(my_set)\n    #convert the set back to a list so I can iterate through it\n    my_list = [i for i in my_set]\n    #print(my_list)\n    #define the magic number\n    magic_number = 15\n    #loop through the matrix\n    for i in my_list:\n        #print(i)\n        #print('---')\n        #check each row\n        sum_1 = sum(my_matrix[0])\n        #print(sum_1)\n        #print('---')\n        #check each column\n        sum_2 = 0\n        for j in range(len(my_matrix)):\n            sum_2 += my_matrix[j][0]\n        #print(sum_2)\n        #print('---')\n        #check each diagonal\n        sum_3 = 0\n        for k in range(len(my_matrix)):\n            sum_3 += my_matrix[k][k]\n        #print(sum_3)\n        #print('---')\n        #print('{}, {}, and {}'.format(sum_1, sum_2, sum_3))\n        #print('---')\n        #print('{}'.format(magic_number))\n        #print('---')\n        #print('{}'.format(sum_1==sum_2==sum_3==magic_number))\n        #print('---')\n        #if all of these checks pass, then the matrix is a magic square!\n        if sum_1==sum_2==sum_3==magic_number:\n            return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    \n    \n    \n    \n    # Check if all rows have the same sum\n    sum_rows = []\n    for i in range(0,len(my_matrix)):\n        sum_rows.append(sum(my_matrix[i]))\n    if (sum_rows.count(sum_rows[0]) == len(sum_rows)):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if sum of rows, columns and diagonals = N\n    # Check that each row, col and diagonal sum to N\n    \n    # Check if each row and col sum to N\n    \n    # Check if each diagonals sum to N\n    \n    if is_magic_square(my_matrix):\n        if is_magic_square_row_sums_to_n(my_matrix) == False:\n            print(\"True (and False)\")\n        else:\n            print(\"False\")\n    else:\n        print(\"False\")\n        \n    \ndef is_magic_square_row_sums_to_n(my_matrix):\n    for row in my_matrix:\n        if sum(row)!= len(my_matrix):\n            return False\n    return True\n    \n    \ndef is_magic_square(my_matrix):\n    # Check if sum of rows, columns and diagonals = N\n    total = 0\n    for row in my_matrix:\n        total += sum(row)\n    for col in range(len(my_matrix)):\n        total += my_matrix[0][col]\n    total += my_matrix[0][0]\n    for diag in range(len(my_matrix)):\n        total += my_matrix[diag][diag]\n    total += my_matrix[len(my_matrix)-1][len(my_matrix)-1]\n    return total == len(my_matrix)**2\n    \n    \n    \ndef magic_square_solver(my_matrix, n):\n    # TODO: Check if its a magic square\n    # Check if each row and col sum to N\n    \n    # Check if each diagonals sum to N\n    \n    # If its not a magic square\n    # Check the max number in the matrix and increase by 1\n    \n    # If its not a magic square\n    # Check the max number in the matrix and decrease by 1\n    \n    # If its not a magic square\n    # Check the max number in the matrix and increase by 1\n    \n    # If its not a magic square\n    # Check the max number in the matrix and decrease by 1\n    \n    # If its not a magic square\n    # Check the max number in the matrix and increase by 1\n    \n    # If its not a magic square\n    # Check the max number in the matrix and decrease by 1\n    \n    # If its not a magic square\n    # Check the max number in the matrix and increase by 1\n    \n    # If its not a magic square\n    # Check the max number in the matrix and decrease by 1\n    \n    # If its not a magic square\n    # Check the max number in the matrix and increase by 1\n    \n    # If its not a magic square\n    # Check the max number in the matrix and decrease by 1\n    \n    \n    \n    for row in my_matrix:\n        if sum(row)!= n:\n            return False\n    return True\n    \n    \ndef number_combinations(n):\n    # Test all the number from 1 to N\n    # Check if each number sum to N\n    # Return the number of ways that it can be written as sum of 5 number\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Find the sum of each row and column. If it is not a multiple of n, then it is not a magic square.\n    # If the sum of each column or row is not the same, then it is not a magic square.\n    # Find the sum of all the diagonals\n    # If it is not a multiple of n, then it is not a magic square.\n    # If the sum of all the diagonals is not the same, then it is not a magic square.\n    # If all these conditions are not true, it is a magic square.\n    sum_all_rows = 0\n    sum_all_cols = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n*(n**2 + 1)/2\n    diag_sum = my_matrix[0][0] + my_matrix[n-1][n-1]\n    sum_cols = [0 for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            sum_cols[j] += my_matrix[i][j]\n        if sum_cols[j]!= magic_sum:\n            return False\n    for i in range(n):\n        if diag_sum!= sum_cols[i]:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    elif len(my_matrix) < 3:\n        return False\n    \n    sum_row = 0\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[0])):\n            sum_row += my_matrix[i][j]\n        if sum_row!= sum(my_matrix[i]):\n            return False\n        sum_row = 0\n    sum_col = 0\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[0])):\n            sum_col += my_matrix[j][i]\n        if sum_col!= sum(my_matrix[0]):\n            return False\n        sum_col = 0\n    \n    for i in range(0, len(my_matrix)):\n        sum_diag = 0\n        for j in range(0, len(my_matrix[0])):\n            if i == j:\n                sum_diag += my_matrix[i][j]\n        if sum_diag!= sum(my_matrix[0]):\n            return False\n        sum_diag = 0\n    \n    for i in range(0, len(my_matrix)):\n        sum_diag = 0\n        for j in range(0, len(my_matrix[0])):\n            if i + j == len(my_matrix[0]) - 1:\n                sum_diag += my_matrix[i][j]\n        if sum_diag!= sum(my_matrix[0]):\n            return False\n        sum_diag = 0\n    \n    return True\n    \ndef magic_square_test2(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    elif len(my_matrix) < 3:\n        return False\n    \n    sum_row = 0\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[0])):\n            sum_row += my_matrix[i][j]\n        if sum_row!= sum(my_matrix[i]):\n            return False\n        sum_row = 0\n    sum_col = 0\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[0])):\n            sum_col += my_matrix[j][i]\n        if sum_col!= sum(my_matrix[0]):\n            return False\n        sum_col = 0\n    \n    for i in range(0, len(my_matrix)):\n        sum_diag = 0\n        for j in range(0, len(my_matrix[0])):\n            if i == j:\n                sum_diag += my_matrix[i][j]\n        if sum_diag!= sum(my_matrix[0]):\n            return False\n        sum_diag = 0\n    \n    for i in range(0, len(my_matrix)):\n        sum_diag = 0\n        for j in range(0, len(my_matrix[0])):\n            if i + j == len(my_matrix[0]) - 1:\n                sum_diag += my_matrix[i][j]\n        if sum_diag!= sum(my_matrix[0]):\n            return False\n        sum_diag = 0\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum_of_diffs = 0\n    diagonal_sum = 0\n    sums_list = []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    s = sum(my_matrix[i][j] for i in range(n) for j in range(n))\n    m = n ** 2\n    return s == m\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # sort the matrix\n    my_matrix.sort()\n    # I'm not sure if this is the best way to check if it is a magic square.\n    # I could have just used sum_of_diagonals(my_matrix) == (my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] +\n    # my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2])\n    # but I think this is more pythonic.\n    # I don't know if it will be easier or harder to write this than it was to write the sum_of_diagonals function\n    # but I'm going to assume it's easier.\n    # I think it's easier because there is no type conversions.\n    # However, I do know that this is not the best way to check if it is a magic square.\n    # I could have just used sum_of_diagonals(my_matrix) == (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] +\n    # my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1])\n    # but I think it's harder to understand because it is harder to compare two integers.\n    # I could write it like this:\n    # if sum_of_diagonals(my_matrix)!= (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] +\n    # my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1]):\n    # return False\n    # but I think that it will be harder to understand.\n    # I could use math.isclose, but I don't know if it is the best way to do it.\n    # I could write it like this:\n    # if math.isclose(sum_of_diagonals(my_matrix), (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] +\n    # my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1])):\n    # return True\n    # but I think it will be harder to understand.\n    # I could also have used this function:\n    # if sum_of_diagonals(my_matrix) == sum(my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] +\n    # my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1])\n    # and it would also have been easier to understand, but I think it would have been harder to compare.\n    # I could have also used it like this:\n    # if sum_of_diagonals(my_matrix) == sum(my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] +\n    # my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1]) == (\n    # my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] +\n    # my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1]):\n    # return True\n    # but I think it would have been harder to understand.\n    # I could have also used it like this:\n    # if sum_of_diagonals(my_matrix) == (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] +\n    # my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1]) == (\n    # my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] +\n    # my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1]):\n    # return True\n    # but I think it would have been harder to understand.\n    # I could have also used it like this:\n    # if sum_of_diagonals(my_matrix) == (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] +\n    # my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1]) == (\n    # my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] +\n    # my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1]):\n    # return True\n    # but I think it would have been harder to understand.\n    # I could have also used it like this:\n    # if sum_of_diagonals(my_matrix) == (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] +\n    # my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1]) == (\n    # my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] +\n    # my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1]):\n    # return True\n    # but I think it would have been harder to understand.\n    # I could have also used it like this:\n    # if sum_of_diagonals(my_matrix) == (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] +\n    # my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1]) == (\n    # my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[0][1] + my_matrix[1][0] + my_matrix[0][2] +\n    # my_matrix[1][2] + my_matrix[2][0] + m"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    maximum_occurrences = 0\n    maximum_item = None\n    for k,v in dict.items():\n        if v > maximum_occurrences:\n            maximum_occurrences = v\n            maximum_item = k\n    return maximum_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #create a default dictionary and save the items in it\n    d=defaultdict(int)\n    for num in nums:\n        d[num]+=1\n    #print the number with maximum frequency\n    return max(d.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for num in nums:\n        dict[num]+=1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    cnt = defaultdict(int)\n    for num in nums:\n        cnt[num] += 1\n    max_freq = max(cnt.values())\n    for num in nums:\n        if cnt[num] == max_freq:\n            return num\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result_dict = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return\n    d = {}\n    for x in nums:\n        d[x] = d.get(x, 0) + 1\n    return max(d.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    temp = defaultdict(int)\n    for i in nums:\n        temp[i] += 1\n    maxi = 0\n    temp_list = []\n    for k,v in temp.items():\n        if v > maxi:\n            maxi = v\n            temp_list.clear()\n            temp_list.append(k)\n        elif v == maxi:\n            temp_list.append(k)\n    return temp_list\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    max_value = 0\n    max_key = None\n    for num in nums:\n        dic[num] += 1\n        if dic[num] > max_value:\n            max_value = dic[num]\n            max_key = num\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for i in nums:\n        dic[i] += 1\n    max_freq = max(dic.values())\n    for i in dic.keys():\n        if dic[i] == max_freq:\n            return i\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = defaultdict(int)\n    for num in nums:\n        result[num] += 1\n    return max(result.keys(), key=lambda k: result[k])\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    vowel_string = ''\n    for i in str1:\n        if i in vowels:\n            vowel_string = vowel_string + i\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a','e','i','o','u'}\n    vowel = ''\n    vowel_list = []\n    string = list(str1)\n    for i in string:\n        if i in vowels:\n            vowel_list.append(i)\n            vowel += i\n        else:\n            vowel_list.append(i)\n    string_rev = vowel_list[::-1]\n    return ''.join(string_rev)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    string_without_vowels = \"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    \n    for i in str1:\n        if i.lower() in vowels:\n            vowels_list.append(i)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = 'aeiouy'\n    vowel_str = ''\n    \n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_str += str1[i]\n    \n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i] = vowel_str[-1]\n            vowel_str = vowel_str[:-1]\n    \n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    vowel_position = []\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowel_position.append(i)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_list = []\n    for i in str1:\n        if i in vowels:\n            vowel_list.append(i)\n    print(vowel_list)\n    for j in str1:\n        if j in vowels:\n            str1 = str1.replace(j,\"\")\n    print(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    i = 0\n    j = len(str1) - 1\n    str1 = list(str1)\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    vowels_in_str = []\n    for char in str1:\n        if char in vowels:\n            vowels_in_str.append(char)\n    vowels_in_str.reverse()\n    for char in str1:\n        if char in vowels:\n            str1 = str1.replace(char, vowels_in_str[0])\n            vowels_in_str.remove(vowels_in_str[0])\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    vowels_list = []\n    vowels_list_new = []\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if len(tup1) == 0:\n        return ''\n    else:\n        return tup_string(tup1[1:]) +'' + tup1[0]\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = ''\n    for elm in tup1:\n        result = result + str(elm) + '\\t'\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return('({})'.format(','.join(str(x) for x in tup1)))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return (str(tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return(str(tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s1 = ''\n    for i in tup1:\n        s1 += str(i)\n    s1 = s1.replace(',','')\n    return s1\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative = sum_negative + num\n    print(\"The sum of negative numbers is:\",sum_negative)\n    return sum_negative\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    print(sum([num for num in nums if num < 0]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([i for i in nums if i < 0])\n    # return sum(i for i in nums if i < 0)\n    # return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Method 1:\n    # total = 0\n    # for num in nums:\n    #     if num < 0:\n    #         total += num\n    # return total\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum = sum + i\n    return sum\nprint(sum_negativenum([1,2,3,-4,5]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n    \ndef main():\n    print('Welcome to the hexagon generator!')\n    number = int(input('Which number would you like to see the hexagon for?'))\n    print('The hexagon for that number is:'+ str(hexagonal_num(number)))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def triangular(n):\n        return n * (2 * n - 1)\n    def hexagonal(n):\n        return n * (2 * n - 1)\n    return hexagonal(triangular(n))"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n - 1))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def num(n, x, y):\n        return (x*x - y*y) * n\n    x = 1\n    y = 1\n    for i in range(n):\n        x += 1\n        y += 2\n    return num(n, x, y)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n**2 * (2 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))//2\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def get_rows(n):\n        row_len = 1\n        while row_len * (row_len + 1) // 2 < n:\n            row_len += 1\n        return row_len\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count/non_zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nums_array = array('i', nums)\n    z_count = 0\n    o_count = 0\n    for i in range(len(nums_array)):\n        if nums_array[i] == 0:\n            z_count += 1\n        else:\n            o_count += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize the count of zeroes to 0.\n    count = 0\n    # Iterate through the list.\n    for num in nums:\n        # If the number is zero...\n        if num == 0:\n            # Increment the count.\n            count += 1\n    # Return the ratio of zeroes to non-zeroes.\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nz = 0\n    nz_num = []\n    nz_count = []\n    nz_ratio = []\n    nz_nz_ratio = []\n    nz_nz_count = []\n    nz_nz_ratio_2 = []\n    nz_nz_count_2 = []\n    nz_nz_ratio_3 = []\n    nz_nz_count_3 = []\n    nz_nz_ratio_4 = []\n    nz_nz_count_4 = []\n    nz_nz_ratio_5 = []\n    nz_nz_count_5 = []\n    nz_nz_ratio_6 = []\n    nz_nz_count_6 = []\n    nz_nz_ratio_7 = []\n    nz_nz_count_7 = []\n    nz_nz_ratio_8 = []\n    nz_nz_count_8 = []\n    nz_nz_ratio_9 = []\n    nz_nz_count_9 = []\n    nz_nz_ratio_10 = []\n    nz_nz_count_10 = []\n    nz_nz_ratio_11 = []\n    nz_nz_count_11 = []\n    nz_nz_ratio_12 = []\n    nz_nz_count_12 = []\n    nz_nz_ratio_13 = []\n    nz_nz_count_13 = []\n    nz_nz_ratio_14 = []\n    nz_nz_count_14 = []\n    nz_nz_ratio_15 = []\n    nz_nz_count_15 = []\n    nz_nz_ratio_16 = []\n    nz_nz_count_16 = []\n    nz_nz_ratio_17 = []\n    nz_nz_count_17 = []\n    nz_nz_ratio_18 = []\n    nz_nz_count_18 = []\n    nz_nz_ratio_19 = []\n    nz_nz_count_19 = []\n    nz_nz_ratio_20 = []\n    nz_nz_count_20 = []\n    nz_nz_ratio_21 = []\n    nz_nz_count_21 = []\n    nz_nz_ratio_22 = []\n    nz_nz_count_22 = []\n    nz_nz_ratio_23 = []\n    nz_nz_count_23 = []\n    nz_nz_ratio_24 = []\n    nz_nz_count_24 = []\n    nz_nz_ratio_25 = []\n    nz_nz_count_25 = []\n    nz_nz_ratio_26 = []\n    nz_nz_count_26 = []\n    nz_nz_ratio_27 = []\n    nz_nz_count_27 = []\n    nz_nz_ratio_28 = []\n    nz_nz_count_28 = []\n    nz_nz_ratio_29 = []\n    nz_nz_count_29 = []\n    nz_nz_ratio_30 = []\n    nz_nz_count_30 = []\n    nz_nz_ratio_31 = []\n    nz_nz_count_31 = []\n    nz_nz_ratio_32 = []\n    nz_nz_count_32 = []\n    nz_nz_ratio_33 = []\n    nz_nz_count_33 = []\n    nz_nz_ratio_34 = []\n    nz_nz_count_34 = []\n    nz_nz_ratio_35 = []\n    nz_nz_count_35 = []\n    nz_nz_ratio_36 = []\n    nz_nz_count_36 = []\n    nz_nz_ratio_37 = []\n    nz_nz_count_37 = []\n    nz_nz_ratio_38 = []\n    nz_nz_count_38 = []\n    nz_nz_ratio_39 = []\n    nz_nz_count_39 = []\n    nz_nz_ratio_40 = []\n    nz_nz_count_40 = []\n    nz_nz_ratio_41 = []\n    nz_nz_count_41 = []\n    nz_nz_ratio_42 = []\n    nz_nz_count_42 = []\n    nz_nz_ratio_43 = []\n    nz_nz_count_43 = []\n    nz_nz_ratio_44 = []\n    nz_nz_count_44 = []\n    nz_nz_ratio_45 = []\n    nz_nz_count_45 = []\n    nz_nz_ratio_46 = []\n    nz_nz_count_46 = []\n    nz_nz_ratio_47 = []\n    nz_nz_count_47 = []\n    nz_nz_ratio_48 = []\n    nz_nz_count_48 = []\n    nz_nz_ratio_49 = []\n    nz_nz_count_49 = []\n    nz_nz_ratio_50 = []\n    nz_nz_count_50 = []\n    nz_nz_ratio_51 = []\n    nz_nz_count_51 = []\n    nz_nz_ratio_52 = []\n    nz_nz_count_52 = []\n    nz_nz_ratio_53 = []\n    nz_nz_count_53 = []\n    nz_nz_ratio_54 = []\n    nz_nz_count_54 = []\n    nz_nz_ratio_55 = []\n    nz_nz_count_55 = []\n    nz_nz_ratio_56 = []\n    nz_nz_count_56 = []\n    nz_nz_ratio_57 = []\n    nz_nz_count_57 = []\n    nz_nz_ratio_58 = []\n    nz_nz_count_58 = []\n    nz_nz_ratio_59 = []\n    nz_nz_count_59 = []\n    nz_nz_ratio_60 = []\n    nz_nz_count_60 = []\n    nz_nz_ratio_61 = []\n    nz_nz_count_61 = []\n    nz_nz_ratio_62 = []\n    nz_nz_count_62 = []\n    nz_nz_ratio_63 = []\n    nz_nz_count_63 = []\n    nz_nz_ratio_64 = []\n    nz_nz_count_64 = []\n    nz_nz_ratio_65 = []\n    nz_nz_count_65 = []\n    nz_nz_ratio_66 = []\n    nz_nz_count_66 = []\n    nz_nz_ratio_67 = []\n    nz_nz_count_67 = []\n    nz_nz_ratio_68 = []\n    nz_nz_count_68 = []\n    nz_nz_ratio_69 = []\n    nz_nz_count_69 = []\n    nz_nz_ratio_70 = []\n    nz_nz_count_70 = []\n    nz_nz_ratio_71 = []\n    nz_nz_count_71 = []\n    nz_nz_ratio_72 = []\n    nz_nz_count_72 = []\n    nz_nz_ratio_73 = []\n    nz_nz_count_73 = []\n    nz_nz_ratio_74 = []\n    nz_nz_count_74 = []\n    nz_nz_ratio_75 = []\n    nz_nz_count_75 = []\n    nz_nz_ratio_76 = []\n    nz_nz_count_76 = []\n    nz_nz_ratio_77 = []\n    nz_nz_count_77 = []\n    nz_nz_ratio_78 = []\n    nz_nz_count_78 = []\n    nz_nz_ratio_79 = []\n    nz_nz_count_79 = []\n    nz_nz_ratio_80 = []\n    nz_nz_count_80 = []\n    nz_nz_ratio_81 = []\n    nz_nz_count_81 = []\n    nz_nz_ratio_82 = []\n    nz_nz_count_82 = []\n    nz_nz_ratio_83 = []\n    nz_nz_count_83 = []\n    nz_nz_ratio_84 = []\n    nz_nz_count_84 = []\n    nz_nz_ratio_85 = []\n    nz_nz_count_85 = []\n    nz_nz_ratio_86 = []\n    nz_nz_count_86 = []\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize zeros and non_zeroes\n    zeros = 0\n    non_zeros = 0\n    # Count zeros and non-zeros\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    # Print the result\n    print(zeros/non_zeros)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zero_count = 0\n    nonzero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n    return zero_count, nonzero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n=0\n    for i in nums:\n        if i==0:\n            n+=1\n    return n/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nums = array('i', nums)\n    # Get number of zeroes\n    return nums.count(0) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Your code here\n    return (nums.count(0))/(len(nums))\n    \n    \nprint(zero_count([0,1,0,1,12]))\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count=0\n    for num in nums:\n        if num==0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, 10):\n        if (n - pow(2, i))!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if n==0:\n        return True\n    \n    for i in range(1,int(n**0.5)+1):\n        if n%(i**2)==0:\n            return True\n        \n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    while n > 0: \n        if n % 2!= 0: \n            return False\n        n = n // 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    powers = [2 ** i for i in range(32)]\n    sum = 0\n    # print(powers)\n    for i in range(len(powers)):\n        if n < powers[i]:\n            return 0\n        if n == powers[i]:\n            return 1\n        if n > powers[i] and n < sum + powers[i]:\n            sum += powers[i]\n    return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0: \n        n = -n \n    while n!= 0: \n        # 1 will always be a power of two \n        if n % 2 == 1: \n            return False\n        n = n / 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n!=0):\n        if n%2!=0:\n            return False\n        n=n/2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n: \n        if n%2: \n            return False\n        n >>= 1\n    return True\n    \ndef is_Sum_Of_Powers_Of_Two_Using_Recursion(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def recursion(n,rem): \n        if n == 0: \n            return True\n        elif n < 0: \n            return False\n        elif rem == 0: \n            return recursion(n,rem+1)\n        else: \n            return recursion(n,rem+1) or recursion(n-2**rem,rem)\n    return recursion(n,0)\n    "
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0):\n        return True\n    if (n == 1):\n        return False\n    while (n):\n        if (n % 2!= 0):\n            return False\n        n = n // 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_powers_of_two=0\n    powers_of_two = []\n    for i in range(32):\n        powers_of_two.append(2**i)\n    for p in powers_of_two:\n        if n>=p:\n            sum_powers_of_two+=p\n            n-=p\n    if sum_powers_of_two==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 1:\n        return False\n    return (2**(n-1)).bit_length() == n\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # HINT: 2 * pi * r\n    from math import pi\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # pi = 3.1415926535897931\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    pi = math.pi\n    circumference = pi * 2 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * r * math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for sub_list in test_list:\n        for element in sub_list:\n            singly_list.append(element)\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [test_list[i] for i in range(len(test_list)) for j in range(len(test_list[i]))]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    list = []\n    for i in test_list:\n        list.extend(i)\n    return list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result_list = []\n    for item in test_list:\n        if type(item) is list:\n            result_list += extract_singly(item)\n        else:\n            result_list.append(item)\n    return result_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for item in test_list:\n        singly_list += item\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_of_numbers = []\n    for sublist in test_list:\n        for element in sublist:\n            list_of_numbers.append(element)\n    return list_of_numbers\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # your code here\n    result = []\n    for i in test_list:\n        for j in i:\n            result.append(j)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for elem in test_list:\n        if isinstance(elem, int):\n            res.append(elem)\n        elif isinstance(elem, list):\n            res.extend(extract_singly(elem))\n    return res\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for sublist in test_list:\n        for item in sublist:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # FIXME: complete this function to sort the list\n    # Step 1: find the maximum element in the array\n    if nums is None or len(nums) == 0:\n        return None\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    for i in range(len(nums)):\n        max_idx = 0\n        for j in range(len(nums)):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        nums = nums[:i+1] + nums[i+1:][::-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    if size <= 1:\n        return nums\n    for i in range(size - 1, 0, -1):\n        max_ind = find_max(nums, i)\n        if max_ind!= i:\n            flip(nums, i)\n            flip(nums, max_ind)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(arr, start, end):\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for k in range(len(nums)-1, 0, -1):\n        swap = False\n        for i in range(k):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swap = True\n        if not swap:\n            break\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        temp = nums[i]\n        nums[i] = nums[max_index]\n        nums[max_index] = temp\n        for j in range(1, i + 1):\n            if nums[j] > nums[j - 1]:\n                temp = nums[j]\n                nums[j] = nums[j - 1]\n                nums[j - 1] = temp\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        current = nums[0]\n        j = 0\n        while nums[j] < current:\n            j += 1\n        print(j)\n        nums = nums[j:][::-1] + nums[:j]\n        nums = nums[:i + 1][::-1] + nums[i + 1:]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)//2):\n        # print(i)\n        j = len(nums)-1-i\n        # print(j)\n        temp = nums[i]\n        # print(temp)\n        nums[i] = nums[j]\n        # print(nums[i])\n        nums[j] = temp\n        # print(nums)\n        flip(nums, i+1)\n        # print(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(list, index1, index2):\n        list[index1], list[index2] = list[index2], list[index1]\n        return list\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    length = len(nums)\n    for i in range(length // 2):\n        if i == 0:\n            j = length - 1\n        else:\n            j = length - i - 1\n        while j > 0 and nums[j] < nums[j - 1]:\n            j -= 1\n        if j < length - 1:\n            # swap\n            tmp = nums[j]\n            nums[j] = nums[j - 1]\n            nums[j - 1] = tmp\n    if length % 2!= 0:\n        mid = length // 2\n        tmp = nums[mid]\n        nums[mid] = nums[length - 1]\n        nums[length - 1] = tmp\n    # reverse\n    start = 0\n    end = length\n    mid = length // 2\n    while end > mid:\n        tmp = nums[start]\n        nums[start] = nums[end - 1]\n        nums[end - 1] = tmp\n        start += 1\n        end -= 1\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for item1 in list1:\n        if item1 in list2 and item1 in list3:\n            samepair = samepair + 1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for a,b,c in zip(list1,list2,list3):\n        if a==b and b==c:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            samepair+=1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    length=len(list1)\n    count=0\n    for i in range(length):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pair=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j]==list3[k]:\n                    same_pair+=1\n    return same_pair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list_result = []\n    for index in range(len(list1)):\n        if list1[index] == list2[index] == list3[index]:\n            list_result.append(list1[index])\n    return len(list_result)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_count=0\n    for i in range(len(list1)):\n        if(list1[i]==list2[i] and list1[i]==list3[i]):\n            same_count+=1\n    return same_count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result=[]\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            result.append(list1[i])\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if Input == None or len(Input) == 0:\n        return 0\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_number = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            list_number += 1\n    return list_number\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    input_list = list(Input)\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) == list:\n        return 1\n    elif type(Input) == tuple:\n        count = 0\n        for i in range(len(Input)):\n            count += find_lists(Input[i])\n        return count\n    else:\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list =[] \n    for i in Input: \n        if type(i) == list: \n            list.append(i) \n    return len(list) "
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count = count + 1\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    x = 0\n    while True:\n        try:\n            Input.index(None, x)\n            x = Input.index(None, x+1)\n            x+=1\n            x+=1\n        except ValueError:\n            break\n    return x\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not isinstance(Input, tuple):\n        print('Input is not a tuple')\n        return\n    count = 0\n    for i in Input:\n        if isinstance(i,list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    print(\"The input to the function is:\", Input)\n    len_tuple = len(Input)\n    count = 0\n    for i in range(len_tuple):\n        if type(Input[i]) is list:\n            count += 1\n    print(\"The number of lists present in the given tuple is:\", count)\n    print(\"The output of the function is:\", count)\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            max_diff = max(max_diff, abs(arr[i] - arr[j])) \n    return max_diff \n    \ndef max_subArray(arr, n): \n    '''\n    Write a python function to find the maximum sum of a contiguous subarray within a two-dimensional array.\n    '''\n    max_sum = 0\n    for i in range(n): \n        max_sum = max(max_sum, sum(arr[i])) \n    return max_sum \n    \ndef largest_Submatrix(arr): \n    '''\n    Write a python function to find the largest submatrix with all 1s.\n    '''\n    r, c = len(arr), len(arr[0]) \n    max_sum = -float('inf')\n    for i in range(r): \n        for j in range(c): \n            cur_sum = 0\n            if(arr[i][j] == 1): \n                cur_sum += 1\n                s = set() \n                s.add((i, j)) \n                for x, y in s: \n                    if(x < r and y < c and arr[x][y] == 1): \n                        cur_sum += 1\n                        s.add((x + 1, y)) \n                        s.add((x, y + 1)) \n                max_sum = max(max_sum, cur_sum) \n    return max_sum \n    \ndef missing_number(arr): \n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    max_diff = 0\n    for i in range(0, len(arr)): \n        max_diff = max(max_diff, abs(arr[i] - i)) \n    return (len(arr) * (len(arr) + 1)) / 2 - sum(arr) - max_diff \n    \ndef duplicate_characters(str): \n    '''\n    Write a python function to find the duplicate characters in a given string.\n    '''\n    s = set() \n    s1 = set() \n    for i in range(len(str)): \n        if(str[i] in s): \n            s1.add(str[i]) \n        else: \n            s.add(str[i]) \n    return len(s1) \n    \ndef longest_substring_with_k_distinct(str, k): \n    '''\n    Write a python function to find the longest substring with k distinct characters.\n    '''\n    sub_str = [] \n    for i in range(len(str)): \n        if(i == 0): \n            sub_str.append(str[i]) \n        else: \n            sub_str.append(str[i]) \n            for j in range(i): \n                if(str[j] not in sub_str): \n                    sub_str.pop() \n                    break\n            if(len(sub_str) == k): \n                break\n    return ''.join(sub_str) \n    \ndef longest_substring_with_k_distinct(str, k): \n    '''\n    Write a python function to find the longest substring with k distinct characters.\n    '''\n    sub_str = [] \n    sub_str_count = [] \n    for i in range(len(str)): \n        if(i == 0): \n            sub_str.append(str[i]) \n            sub_str_count.append(1) \n        else: \n            sub_str.append(str[i]) \n            sub_str_count.append(0) \n            for j in range(i): \n                if(str[j] not in sub_str): \n                    sub_str.pop() \n                    sub_str_count.pop() \n                    break\n                else: \n                    sub_str_count[-1] += 1\n            if(sub_str_count[-1] == k): \n                break\n    return ''.join(sub_str) \n    \ndef max_product_subarray(arr): \n    '''\n    Write a python function to find the product of the maximum sum subarray.\n    '''\n    max_sum, max_product = 0, 1\n    for i in range(len(arr)): \n        max_sum = max(max_sum + arr[i], arr[i]) \n        max_product = max(max_product, max_sum) \n    return max_product \n    \ndef find_number_of_pairs_with_given_difference(arr, diff): \n    '''\n    Write a python function to find the number of pairs with given difference.\n    '''\n    n = len(arr) \n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if(abs(arr[i] - arr[j]) == diff): \n                count += 1\n    return count \n    \ndef count_number_of_subarrays(arr, n, k): \n    '''\n    Write a python function to count number of subarrays with sum equal to k.\n    '''\n    count = 0\n    for i in range(n): \n        count += helper(arr, i, i, k) \n        count += helper(arr, i, i + 1, k - arr[i]) \n    return count \n    \ndef helper(arr, l, r, k): \n    count = 0\n    sum = 0\n    for i in range(l, r + 1): \n        sum += arr[i] \n        if(sum == k): \n            count += 1\n    return count \n    \ndef number_of_subarrays_with_sum_greater_than_k(arr, n, k): \n    '''\n    Write a python function to find the number of subarrays with sum greater than k.\n    '''\n    count = 0\n    for i in range(n): \n        count += helper(arr, i, i, k, 1) \n        count += helper(arr, i, i + 1, k, 0) \n    return count \n    \ndef helper(arr, l, r, k, c): \n    if(l > r): \n        return 0\n    s = 0\n    for i in range(l, r + 1): \n        s += arr[i] \n    if(s > k): \n        return c \n    elif(s == k): \n        return c + 1\n    return helper(arr, l + 1, r, k, c) \n    \ndef minimum_window_substring(str, t): \n    '''\n    Write a python function to find the minimum substring with all the characters of the given string.\n    '''\n    for i in range(len(str)): \n        if(str[i] in t): \n            t = t[t.index(str[i]) + 1 :] \n    return t \n    \ndef find_permutation(str, pattern): \n    '''\n    Write a python function to find if the given pattern is a permutation of the given string.\n    '''\n    pattern_dict = {} \n    for i in range(len(pattern)): \n        if(pattern[i] not in pattern_dict): \n            pattern_dict[pattern[i]] = 1\n        else: \n            pattern_dict[pattern[i]] += 1\n    for i in range(len(str)): \n        if(str[i] not in pattern_dict): \n            return False\n        else: \n            pattern_dict[str[i]] -= 1\n    return True \n    \ndef find_palindrome_permutation(str): \n    '''\n    Write a python function to find if the given string is a permutation of a palindrome.\n    '''\n    chars = {} \n    odd_count = 0\n    for i in range(len(str)): \n        if(str[i] in chars): \n            chars[str[i]] += 1\n        else: \n            chars[str[i]] = 1\n        if(chars"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximumDifference = 0\n    for i in range(0, len(arr)): \n        for j in range(0, len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if (diff > maximumDifference): \n                maximumDifference = diff\n    return maximumDifference \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i]-arr[j]) for i in range(len(arr)) for j in range(len(arr)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                max_diff = max(max_diff, (abs(arr[i] - arr[j])))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        max_diff = max(max_diff, arr[i+1] - arr[i])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() \n    return arr[-1]-arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximum_diff = 0\n    for i in range(0,len(arr)):\n        for j in range(0,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > maximum_diff:\n                maximum_diff = diff\n    return maximum_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = -1000\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if (maxDiff < (abs(arr[i] - arr[j]))): \n                maxDiff = abs(arr[i] - arr[j]) \n    return maxDiff \narr = [1, 10, 20, 30, 40, 500] \nprint(\"Maximum difference is\", max_Abs_Diff(arr)) \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Abs_Diff = 0\n    arr.sort()\n    n = len(arr)\n    for i in range(n-1):\n        max_Abs_Diff = max(max_Abs_Diff, arr[i+1]-arr[i])\n    return max_Abs_Diff\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #base cases:\n    if n == 0:\n        return 0, 0\n    elif n > 0:\n        return (n, 0)\n    elif n < 0:\n        return (0, -n)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % 2 == 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #if there is a solution, it will be in the form (n, m) where nx + my = n\n    #ex: (8, 2), (5, 1)\n    if n%a == 0 and n%b == 0:\n        x = n/a\n        y = n/b\n        return (x, y)\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if (x*a + y*b == n):\n                return (x, y)\n    return None\n    "
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(0, n):\n        if (a * i) + b == n:\n            return (i, n - i)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if a * x % n == 1:\n            for y in range(1, n):\n                if (a * x + b * y == n):\n                    return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for y in range(n):\n        x = n - a * y\n        if x % b == 0:\n            return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return (1, 0)\n    elif n == 0:\n        return (0, 1)\n    else:\n        for i in range(1, n):\n            x, y = find_solution(a, b, n - i)\n            if x is not None:\n                return (x, y + i)\n            elif y is not None:\n                return (i, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if a * x + b * n == n:\n            return (x, n - x)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if (n - x*a) % b == 0:\n            y = (n - x*a) // b\n            return (x, y)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for elem in list1:\n        if elem not in list2:\n            result.append(elem)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list3.append(list1[i])\n    return list3\n    \ndef remove_elements_2(list1, list2):\n    return [list1[i] for i in range(len(list1)) if list1[i] not in list2]\n    \ndef remove_elements_3(list1, list2):\n    list3 = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list3.append(list1[i])\n    return list3\n    \ndef remove_elements_4(list1, list2):\n    return [list1[i] for i in range(len(list1)) if list1[i] not in list2]\n    \nprint(remove_elements_4([1,2,3,4,5,6,7,8,9,10,11], [1,2,3]))\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for ele in list2:\n        if ele in list1:\n            list1.remove(ele)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return list1\n    list1_size = len(list1)\n    list2_size = len(list2)\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1)-set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_set = set(list1)\n    print(list_set)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_removed_items = []\n    if len(list1) > len(list2):\n        for element in list1:\n            if element not in list2:\n                list_removed_items.append(element)\n    elif len(list1) < len(list2):\n        for element in list2:\n            if element not in list1:\n                list_removed_items.append(element)\n    else:\n        pass\n    return list_removed_items\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return 0\n    else:\n        if list1[0] in list2:\n            list2.remove(list1[0])\n            return 1 + remove_elements(list1[1:], list2)\n        else:\n            return 1 + remove_elements(list1[1:], list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return n\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(0, n // 2 + 1):\n        s += n - 2*i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n >= 0:\n        x = 0\n        for i in range(0, n):\n            x += n - 2 * i\n        return x\n    else:\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    if n >= 0:\n        for i in range(n//2+1):\n            sum = sum + (n - 2*i)\n        return sum\n    else:\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_result = 0\n    for i in range(n // 2 + 1):\n        sum_result += n - 2*i\n    return sum_result\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n >= 0:\n        return n + sum_series(n-2)\n    else:\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n if n <= 1 else sum_series(n - 2) + n\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n >= 1:\n        return n\n    else:\n        return None\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / (tan(pi / l) * 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2 / (4 * tan(pi/l)))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #Write your code here\n    return (s**2) / (4*tan(pi/l))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l**2/(4*tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l)/(4*tan(pi/l))\n    return area\n    \ndef main():\n    s = int(input(\"Enter the side length: \"))\n    l = int(input(\"Enter the number of sides: \"))\n    print(\"The area of the polygon is: \" + str(area_polygon(s,l)))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/(4*tan(pi/n))"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # total_area = 0\n    # side_length = l\n    # side_count = s\n    # for i in range(side_count):\n    #     area_of_side = side_length ** 2\n    #     total_area += area_of_side * (1 / 2)\n    #     side_length -= 1\n    # total_area *= pi\n    # return total_area\n    # if s == 3:\n    #     return s * l ** 2 / 4\n    # if s == 4:\n    #     return s * l ** 2 / (4 * tan(pi / 4))\n    # if s == 5:\n    #     return s * l ** 2 / (4 * tan(pi / 5))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (l < 0 or s < 3):\n        return 0\n    else:\n        return s * (l ** 2) / (4 * tan(pi / s))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/(4*tan(pi/l))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0 or l <= 0:\n        return -1\n    else:\n        return (s**2/4) * l * (tan(pi/l))\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_n1 = 0\n    sum_n2 = 0\n    for i in range(1, n):\n        if n%i == 0:\n            sum_n1 += i\n        if i!= n:\n            if n%i == 0:\n                sum_n2 += i\n    if sum_n1 == sum_n2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            total += i\n            if n // i!= i: \n                total += n // i\n    return total \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = [] \n    for i in range(1, int(math.sqrt(n) + 1)): \n        if n % i == 0: \n            divs.append(i) \n    s = sum(divs) \n    if s == n: \n        return True \n    return False \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    m = n\n    s1 = 0\n    s2 = 0\n    for i in range(1, m):\n        if m % i == 0:\n            s1 += i\n    for j in range(1, n):\n        if n % j == 0:\n            s2 += j\n    if s1 == s2:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = int(math.sqrt(n))\n    b = n//a\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, a+1):\n        if n%i == 0:\n            sum1 += i\n        if a%i == 0:\n            sum2 += i\n    if sum1 == sum2:\n        return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def div_sum2(n): \n        '''\n        Write a function to determine if the sum of the divisors of two integers are the same.\n        '''\n        if n == 0:\n            return 0\n        else:\n            return (div_sum2(n-1)+n)\n    return div_sum2(n)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s1 = 0\n    s2 = 0\n    for i in range(1,n): \n        if n % i == 0:\n            s1 += i\n    for j in range(1,n): \n        if s1 == n: \n            return True\n        elif n % j == 0: \n            s2 += j\n    return s1 == s2\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,int(n**0.5)+1): \n        if n%i == 0: \n            sum += i \n            if i!= n//i: \n                sum += n//i \n    return sum \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisors(num):\n        lst = []\n        for i in range(1,int(math.sqrt(num))+1):\n            if num%i == 0:\n                if num/i == i:\n                    lst.append(i)\n                else:\n                    lst.append(i)\n                    lst.append(num/i)\n        return sorted(lst)\n    \n    def sum_of_divs(num1,num2):\n        return sum(divisors(num1)) == sum(divisors(num2))\n    \n    return sum_of_divs(n,n+1)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    tot = 0\n    for i in range(1, n):\n        if n % i == 0:\n            tot += i\n    return tot == n\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # str = \"This is a test string\"\n    char_count = {}\n    for i in range(len(str1)):\n        if str1[i].lower() in char_count:\n            char_count[str1[i].lower()] += 1\n        else:\n            char_count[str1[i].lower()] = 1\n    print(char_count)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # import string\n    # print(string.ascii_lowercase)\n    count = 0\n    for i in str1:\n        if i in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    #converting str1 to upper case \n    str1 = str1.upper()\n    \n    #using dict to store the count of characters in str1\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    #iterating the dict \n    count = 0\n    for key in char_count:\n        if char_count[key] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict1 = {'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n    return len(list(filter(lambda x: str1.lower().count(x.lower()) > 0, list(dict1.keys()))))\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        char = str1[i].lower()\n        if ord(char) >= 97 and ord(char) <= 122:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str2=''\n    for char in str1:\n        if char.isalpha():\n            str2 += char.lower()\n    #print(str2)\n    dict1 = {}\n    for i in str2:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    count=0\n    for i in dict1.keys():\n        if dict1[i]==1:\n            count += 1\n    return count\ncount_char_position('THE TRAVEL AGENCY IN THE PARK')"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in str1:\n        if ord(i.lower())>=97 and ord(i.lower())<=122:\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(0,len(str1)):\n        if (ord(str1[i]) >= 97 and ord(str1[i]) <= 122):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n    l = list(string.ascii_lowercase)\n    d = dict()\n    for i in l:\n        d[i] = str1.count(i)\n    return d\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # If the input string is empty, return 0\n    if str1 == \"\":\n        return 0\n    # Set a counter for the number of characters in the string\n    count = 0\n    # Iterate through the input string\n    for i in str1.lower():\n        # Check if the character is in the English alphabet\n        if i in \"abcdefghijklmnopqrstuvwxyz\":\n            # Increment the counter by 1 if the character is in the English alphabet\n            count += 1\n    # Return the number of characters in the string\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if(i!= j):\n                if((A[i]^A[j])%2 == 0):\n                    even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    from collections import Counter \n    return sum([(k[0]^k[1])&1 for k in Counter(A).items()])//2\n    # Hint: you might want to use itertools.combinations and sum()\n    # Note that you should count how many possible pairs there are, not the number of different pairs.\n    \n    \ndef add_in_dict(dictionary, key, value):\n    '''\n    Write a function that adds the given value to the given key in the given dictionary, if the key already exists it should be incremented by 1\n    '''\n    if key not in dictionary:\n        dictionary[key] = value\n    else:\n        dictionary[key] += 1\n    \n    \ndef check_if_anagram(s1, s2):\n    '''\n    Write a function that checks if two words are anagrams.\n    '''\n    return sorted(s1) == sorted(s2)\n    # Hint: make use of python's.sort() method\n    \n    \ndef find_n_largest_elements(A, n):\n    '''\n    Write a function that returns the n largest elements from a given list of numbers.\n    '''\n    return sorted(A)[-n:]\n    # Hint: use a custom sort function\n    \n    \ndef max_product(A):\n    '''\n    Write a function that returns the maximum product of a set of numbers.\n    '''\n    # Hint: use itertools.permutations or itertools.combinations\n    from itertools import combinations\n    return max([x[0]*x[1] for x in combinations(A, 2)])\n    \n    \ndef find_triplets_with_sum_k(A, k):\n    '''\n    Write a function that finds three distinct elements in a list that sum to k.\n    '''\n    A.sort()\n    i, j = 0, len(A)-1\n    while i < j:\n        if A[i]+A[j] == k:\n            return A[i], A[j], k-A[i]-A[j]\n        elif A[i]+A[j] < k:\n            i += 1\n        else:\n            j -= 1\n    return []\n    \n    \ndef array_of_array_products(A):\n    '''\n    Write a function that computes the array of products between pairs of numbers in a given array.\n    '''\n    product = 1\n    for i in range(len(A)):\n        A[i] = product*A[i]\n        product *= A[i]\n    return A\n    \n    \ndef get_right_pairs(A):\n    '''\n    Write a function that finds the number of pairs in an array that sum to k.\n    '''\n    A.sort()\n    count = 0\n    for i in range(len(A)-1):\n        count += bisect.bisect_left(A, A[i]+k, i+1) - i - 1\n    return count\n    \n    \ndef find_target_subsets(A, S):\n    '''\n    Write a function that determines whether two sets are the same size and have the same sums of elements after subtracting a given value from each of their sets.\n    '''\n    return len(A) == len(S) and sum(A) == sum(S) - k\n    # Hint: you might want to use itertools.combinations and set()\n    \n    \ndef find_target_subsets_alt(A, S):\n    '''\n    Write a function that determines whether two sets are the same size and have the same sums of elements after subtracting a given value from each of their sets.\n    '''\n    if len(A)!= len(S):\n        return False\n    A.sort()\n    S.sort()\n    for i in range(len(A)):\n        if S[i] > A[i] + k:\n            return False\n        S[i] -= A[i]\n    return True\n    \n    \ndef find_target_subsets_alt2(A, S):\n    '''\n    Write a function that determines whether two sets are the same size and have the same sums of elements after subtracting a given value from each of their sets.\n    '''\n    if len(A)!= len(S):\n        return False\n    return set([tuple(sorted([a-k for a in A])) for s in S]) == set(A)\n    \n    \ndef count_numbers_with_even_fibonacci_digits(n):\n    '''\n    Write a function that counts the number of numbers less than or equal to n with n-even fibonacci digits.\n    '''\n    a, b = 1, 1\n    count = 0\n    while b <= n:\n        a, b = b, a+b\n        if a%2 == 0:\n            count += 1\n    return count\n    \n    \ndef find_triplets_with_even_sum(A, k):\n    '''\n    Write a function that finds three elements in a list that sum to k and return the product of these three elements.\n    '''\n    A.sort()\n    for i in range(len(A)-2):\n        j, k = i+1, len(A)-1\n        while j < k:\n            if A[i]+A[j]+A[k] == k:\n                return A[i]*A[j]*A[k]\n            elif A[i]+A[j]+A[k] < k:\n                j += 1\n            else:\n                k -= 1\n    return []\n    \n    \ndef find_all_permutations(A):\n    '''\n    Write a function that finds all permutations of a given list.\n    '''\n    return list(itertools.permutations(A))\n    \n    \ndef find_all_subsets(A):\n    '''\n    Write a function that finds all subsets of a given set.\n    '''\n    return list(itertools.combinations(A, len(A)))\n    \n    \ndef count_binary_strings(n):\n    '''\n    Write a function that finds the number of binary strings that have n bits.\n    '''\n    if n == 1:\n        return 2\n    return 2**(n-1)\n    \n    \ndef count_number_of_paths_from_top_left_to_bottom_right(A):\n    '''\n    Write a function that finds the number of paths from the top left corner to the bottom right corner of a given 2D array.\n    '''\n    return count_number_of_paths_from_left_to_right(A, 0, 0) + count_number_of_paths_from_top_to_bottom(A, 0, 0)\n    \n    \ndef count_number_of_paths_from_left_to_right(A, col, row):\n    '''\n    Write a function that finds the number of paths from the top left corner to the bottom right corner of a given 2D array.\n    '''\n    if col == len(A)-1 and row == len(A)-1:\n        return 1\n    return count_number_of_paths_from_left_to_right(A, col+1, row) + count_number_of_paths_from_top_to_bottom(A, col, row+1)\n    \n    \ndef count_number_of_paths_from_top_to_bottom(A, col, row):\n    '''\n    Write a function that finds the number of paths from the top left corner to the bottom right corner of a given 2D array.\n    '''\n    if col == len(A)-1 and row == len(A)-1:\n        return 1\n    return count_number_of_paths_from_top_to_bottom(A, col, row+1) + count_number_of_paths_from_bottom_to_left(A, col+1, row)\n    \n    \ndef count_number_of_paths_from_bottom_to_left(A, col, row):\n    '''\n    Write a function that finds the number of paths from the top left corner to the bottom right corner of a given 2D array.\n    '''\n    if col == len(A)-1 and row == len(A)-1:\n        return 1\n    return count_number_of_paths_from"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return sum([0 if x ^ y % 2 else 1 for x, y in itertools.combinations(A, 2)])\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if not A:\n        return None\n    \n    # start by storing the value of the first element in the list, it will be used for the comparisons\n    first_element = A[0]\n    \n    # initialize a dictionary to store the pair values\n    pair_dict = {}\n    \n    # initialize the number of pairs\n    pair_count = 0\n    \n    for i in range(1, len(A)):\n        # if the xor result is odd, there is no pair\n        if (first_element ^ A[i]) % 2!= 0:\n            return pair_count\n        \n        # if the xor result is even, we increment the number of pairs\n        else:\n            pair_count += 1\n            \n            # if the xor result is already in the dictionary, we increment it by one\n            if (first_element ^ A[i]) in pair_dict:\n                pair_dict[(first_element ^ A[i])] += 1\n            \n            # otherwise, we initialize a new pair value and store it\n            else:\n                pair_dict[(first_element ^ A[i])] = 1\n            \n            # if the xor result is already in the dictionary, we increment it by one\n            if A[i] in pair_dict:\n                pair_dict[A[i]] += 1\n            \n            # otherwise, we initialize a new pair value and store it\n            else:\n                pair_dict[A[i]] = 1\n            \n            # at the end, we want the first element to be the new first element\n            first_element = A[i]\n    \n    # return the number of pairs\n    return pair_count\n    "
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for i in range(0,len(A)):\n        for j in range(0,len(A)):\n            if (A[i]^A[j]%2 == 0):\n                return (A[i],A[j])\n                "
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    ans = 0\n    for x in A:\n        ans += x % 2 == 0\n    return ans\n    "
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return len([i for i in A if (i ^ 0xFFFF) % 2 == 0]) // 2\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def count_pairs(A):\n        num_pairs = 0\n        for i in range(len(A)):\n            for j in range(i+1, len(A)):\n                if bin(A[i] ^ A[j]).count('1') % 2 == 0:\n                    num_pairs += 1\n        return num_pairs\n    return count_pairs(A)\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Base case\n    if (n and not(n & (n - 1))): \n        return n \n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if n == 0:\n        return 1\n    if n & (n - 1) == 0:\n        return n\n    while n & 1 == 0:\n        n >>= 1\n    n = n | (n - 1)\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if(n<0):\n        return -1\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    i=n\n    while i>=1:\n        if((i&i-1)==0):\n            return i\n        i-=1\n    return 2\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    if n < 0:\n        return -1\n    return pow(2, ceil(log(n, 2)))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n==0:\n        return 1\n    else:\n        return 2**ceil(log(n,2))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**int(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**ceil(log(n,2))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return -1\n    return 2**ceil(log2(n))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    import math\n    return int(math.pow(2, math.ceil(math.log(n, 2))))\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0 \n    for i in range(0,len(a)):\n        if a[i] == x:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.sort() \n    # sort list\n    return sum([1 for i in a if i == x])\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num_of_occurrences=0\n    for i in range(0, len(a)):\n        if (a[i] == x):\n            num_of_occurrences = num_of_occurrences + 1\n    return num_of_occurrences\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0, len(a)): \n        if x == a[i]: \n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # count = 0\n    # for i in a:\n    #     if(i == x):\n    #         count = count + 1\n    # return count\n    #Using count method\n    return a.count(x)\n    #Using list comprehension\n    # return len([i for i in a if i == x])\n    \ndef first_occurance(a,x):\n    '''\n    Write a function to find the first occurence of a number in a given list.\n    '''\n    # for i in a:\n    #     if(i == x):\n    #         return a.index(x)\n    #Using list comprehension\n    return a.index(x)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in range(m, n):\n        sum = sum + list1[x]\n    return sum\n    \n    \nprint(\"Sum of a range of numbers in a list: \", sum_range_list([2, 4, 6, 7, 9, 11, 15, 16, 18, 20], 3, 6))\nprint(\"Sum of a range of numbers in a list: \", sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 3, 7))\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    for i in range(m):\n        if n <= m:\n            return n\n    sum1 = 0\n    for i in range(m, n):\n        sum1 += list1[i]\n    return sum1\n    \ndef fibonacci_list(n):\n    '''\n    Write a function to compute the nth Fibonacci number.\n    '''\n    if n < 0:\n        print('Incorrect input.')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_list(n-1) + fibonacci_list(n-2)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        if m <= i <= n:\n            lst.append(list1[i])\n    return sum(lst)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0                                                                                                                                                                                                                        \n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in range(m,n+1):\n        sum1 += list1[i]\n    return sum1\n    \ndef sum_range_list_v2(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v2(list1, m=0, n=None):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if n == None:\n        n = len(list1)\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v3(list1, m=0, n=None):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if n == None:\n        n = len(list1)\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1, list1[m:n+1]\n    \ndef sum_list_v4(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v5(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1, sum1/len(list1)\n    \ndef sum_list_v6(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1, sum1/len(list1)\n    \ndef sum_list_v7(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v8(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1, sum1/len(list1)\n    \ndef sum_list_v9(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v10(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v11(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v12(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v13(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v14(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v15(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v16(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v17(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v18(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v19(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v20(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v21(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v22(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in list1[m:n+1]:\n        sum1 += i\n    return sum1\n    \ndef sum_list_v23(list1, "
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for num in list1:\n        if m <= list1.index(num) <= n:\n            sum = sum + num\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in list1[m:n]:\n        sum += x\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    i = 0\n    while i < len(list1) and i < n:\n        if i >= m:\n            sum += list1[i]\n        i += 1\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    new_list = []\n    i = 0\n    j = 0\n    # while i < len(list1):\n    #     while j < len(list1):\n    #         if (i+j) < n and (i+j) >= m:\n    #             new_list.append(list1[i+j])\n    #         j += 1\n    #     j = 0\n    #     i += 1\n    \n    # return sum(new_list)\n    \n    for i in range(m,n+1):\n        new_list.append(list1[i])\n    return sum(new_list)\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5*a) + (5*math.sqrt((5*(5 + 2*math.sqrt(5)))/8))\n    print(perimeter)\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a*5\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = ((5 * a) + (5 * math.sqrt(5))) / 2\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (a * 5)\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if s[i:i+4] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) < 3:\n        return 0\n    else:\n        return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l = s.split()\n    count = 0\n    for i in l:\n        if'std' in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # Solution 1\n    count = 0\n    for i in range(0,len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    print('Number of times std occurs is {}'.format(count))\n    \n    # Solution 2\n    s1 = s.count('std')\n    print('Number of times std occurs is {}'.format(s1))\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for _ in range(len(s)-2):\n        if s[0:3] == \"std\":\n            count = count + 1\n            s = s[1:]\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    num_std = 0\n    for letter in s:\n        if letter == 'd':\n            num_std += 1\n    return num_std\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check = None\n    for i in test_tuple:\n        if check is None:\n            check = type(i)\n        elif type(i)!= check:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    l = []\n    for i in test_tuple:\n        if type(i) in l:\n            pass\n        else:\n            l.append(type(i))\n    if len(l) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(\"This function will check if all the elements in tuple have same data type or not.\")\n    check = all(type(tuple_element) is type(test_tuple[0]) for tuple_element in test_tuple)\n    if check:\n        print(\"All the elements are of same data type.\")\n    else:\n        print(\"All the elements are not of same data type.\")\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return type(test_tuple[0]) == type(test_tuple[1])\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    l = list(test_tuple)\n    # print(l)\n    if len(l) > 0:\n        if l[0] == int:\n            for i in l:\n                if i!= int:\n                    return False\n            return True\n        elif l[0] == str:\n            for i in l:\n                if i!= str:\n                    return False\n            return True\n        elif l[0] == bool:\n            for i in l:\n                if i!= bool:\n                    return False\n            return True\n        elif l[0] == dict:\n            for i in l:\n                if i!= dict:\n                    return False\n            return True\n        elif l[0] == list:\n            for i in l:\n                if i!= list:\n                    return False\n            return True\n        elif l[0] == tuple:\n            for i in l:\n                if i!= tuple:\n                    return False\n            return True\n        elif l[0] == set:\n            for i in l:\n                if i!= set:\n                    return False\n            return True\n        elif l[0] == float:\n            for i in l:\n                if i!= float:\n                    return False\n            return True\n        else:\n            return True\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Invalid type of input. Expected tuple.\")\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result_set = set()\n    for item in test_tuple:\n        result_set.add(type(item))\n    if len(result_set) == 1:\n        print('All the elements in tuple has same data type')\n    else:\n        print('Not all the elements in tuple has same data type')\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) < 1:\n        return\n    a = type(test_tuple[0])\n    for i in test_tuple:\n        if a!= type(i):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for x in test_tuple:\n        if x == None:\n            types.append(type(None))\n        else:\n            types.append(type(x))\n    if all(type(x) == types[0] for x in test_tuple) == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if isinstance(test_tuple, tuple):\n        if len(test_tuple) == 0:\n            print(\"tuple is empty\")\n        else:\n            test_tuple_types = set([type(test_tuple[0])])\n            for elem in test_tuple:\n                if type(elem)!= test_tuple_types.pop():\n                    raise TypeError(\"tuple has different data types\")\n    else:\n        raise TypeError(\"Input tuple is not a tuple\")\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n < 1:\n        return False\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # O(log n) time complexity\n    # O(1) space complexity\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x < arr[n//2]:\n        return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if n%2 == 0:\n        return n//2 <= arr.count(x)\n    else:\n        return arr.count(x) > n//2\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if x == arr[middle]:\n            return True\n        if x > arr[middle]:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n % 2 == 0:\n        return (x == arr[n//2] or x == arr[n//2 - 1])\n    else:\n        return (x == arr[n//2])\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n    \ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif n==1 and arr[0] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    eli"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i, j = 0, 1\n    count = 0\n    while i <= n-1:\n        if j >= n-1:\n            break\n        if arr[i] == arr[j]:\n            i += 1\n            j += 1\n        else:\n            if count > n/2:\n                return True\n            i += 1\n            j += 1\n            count = 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # the code below has O(n) Time complexity and O(1) space complexity. \n    # make a counter variable that stores the frequency of the element x\n    # it is initialized to 0\n    count = 0 \n    # iterate over the array and increment count by 1 if the counter is less than n/2\n    for i in range(0, n):\n        if x == arr[i]:\n            count += 1\n        if count > n/2:\n            return True\n    # return false if count is less than n/2\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    def count_Set_Bits_recursive(n, count = 0):\n        if n == 0:\n            return count\n        if n % 2 == 1:\n            return count + 1\n        return count_Set_Bits_recursive(n//2, count + 1)\n    return count_Set_Bits_recursive(n)\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    setBits = 0\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \ndef find_set_bit_Brute_Force(n): \n    '''\n    Write a python function to find the position of the rightmost set bit (also known as the Least Significant Bit or the Most Significant Bit) in a given number.\n    '''\n    pos = 0\n    while (n): \n        pos += 1\n        n = n & (n-1)\n    return pos\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    setBits = 0\n    while( n ): \n        setBits += n & 1\n        n >>= 1\n    return setBits \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    return \"\".join([s for i, s in enumerate(str) if i%2==0])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([i for i in str if not int(str.index(i)) % 2])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = ''\n    for x in range(len(str)):\n        if x % 2 == 0:\n            new_string = new_string + str[x]\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = \"\"\n    for i in range(0,len(str)):\n        if i % 2 == 0:\n            res += str[i]\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string=''\n    for i in range(len(str)):\n        if i%2==0:\n            new_string=new_string+str[i]\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = ''\n    for index, char in enumerate(str):\n        if index % 2 == 0:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in str:\n        if i in str[1::2]:\n            print(i)\n            \nodd_values_string(\"pynative\")"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = a\n    if min > b:\n        min = b\n    if min > c:\n        min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    a=int(input(\"Please Enter number 1: \"))\n    b=int(input(\"Please Enter number 2: \"))\n    c=int(input(\"Please Enter number 3: \"))\n    if(a<b):\n        if(a<c):\n            print(a)\n        else:\n            print(c)\n    else:\n        if(b<c):\n            print(b)\n        else:\n            print(c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_val = a \n    if min_val > b: \n        min_val = b \n    if min_val > c: \n        min_val = c \n    return min_val \n    #Code here\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        print(a)\n    elif b < c:\n        print(b)\n    else:\n        print(c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = a if a<b else b\n    min = min if min<c else c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min1 = a\n    if(b < min1):\n        min1 = b\n    if(c < min1):\n        min1 = c\n    return min1\n    \ndef min_of_four(a,b,c,d):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min1 = min_of_three(a,b,c)\n    return min_of_three(min1,d)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    a = int(input('Enter a'))\n    b = int(input('Enter b'))\n    c = int(input('Enter c'))\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = a\n    if b < min:\n        min = b\n    if c < min:\n        min = c\n    return min\ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    max = a\n    if b > max:\n        max = b\n    if c > max:\n        max = c\n    return max\ndef sum_of_three(a,b,c):\n    '''\n    Write a function to find sum of three numbers.\n    '''\n    sum = a + b + c\n    return sum\ndef int_to_binary(n):\n    '''\n    Write a function to convert the given integer into binary format.\n    '''\n    return bin(n).replace(\"0b\",\"\")\ndef reverse_binary(n):\n    '''\n    Write a function to reverse the given binary number.\n    '''\n    return int(n[::-1])\ndef sum_of_digits(n):\n    '''\n    Write a function to return sum of digits of the given number.\n    '''\n    return sum(int(i) for i in str(n))\ndef factorial(n):\n    '''\n    Write a function to return factorial of the given number.\n    '''\n    return 1 if n <= 1 else n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a function to return Fibonacci series up to the given number.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        print(a)\n        c = a+b\n        a = b\n        b = c\n        \ndef prime(n):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef hcf(a,b):\n    '''\n    Write a function to find H.C.F. of two numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return hcf(b,a%b)\ndef binary_to_decimal(n):\n    '''\n    Write a function to convert the given binary number into decimal format.\n    '''\n    return int(n,2)\ndef decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number into binary format.\n    '''\n    return bin(n)\ndef decimal_to_hexadecimal(n):\n    '''\n    Write a function to convert the given decimal number into hexadecimal format.\n    '''\n    return hex(n)\ndef hexadecimal_to_decimal(n):\n    '''\n    Write a function to convert the given hexadecimal number into decimal format.\n    '''\n    return int(n,16)\ndef decimal_to_octal(n):\n    '''\n    Write a function to convert the given decimal number into octal format.\n    '''\n    return oct(n)\ndef octal_to_decimal(n):\n    '''\n    Write a function to convert the given octal number into decimal format.\n    '''\n    return int(n,8)\ndef decimal_to_hexadecimal(n):\n    '''\n    Write a function to convert the given decimal number into hexadecimal format.\n    '''\n    return hex(n)\ndef hexadecimal_to_decimal(n):\n    '''\n    Write a function to convert the given hexadecimal number into decimal format.\n    '''\n    return int(n,16)\ndef hexadecimal_to_binary(n):\n    '''\n    Write a function to convert the given hexadecimal number into binary format.\n    '''\n    return bin(n)\ndef binary_to_hexadecimal(n):\n    '''\n    Write a function to convert the given binary number into hexadecimal format.\n    '''\n    return hex(n)\ndef binary_to_octal(n):\n    '''\n    Write a function to convert the given binary number into octal format.\n    '''\n    return oct(n)\ndef octal_to_binary(n):\n    '''\n    Write a function to convert the given octal number into binary format.\n    '''\n    return bin(n)\ndef binary_to_decimal(n):\n    '''\n    Write a function to convert the given binary number into decimal format.\n    '''\n    return int(n,2)\ndef octal_to_decimal(n):\n    '''\n    Write a function to convert the given octal number into decimal format.\n    '''\n    return int(n,8)\ndef decimal_to_octal(n):\n    '''\n    Write a function to convert the given decimal number into octal format.\n    '''\n    return oct(n)\ndef decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number into binary format.\n    '''\n    return bin(n)\ndef binary_to_octal(n):\n    '''\n    Write a function to convert the given binary number into octal format.\n    '''\n    return oct(n)\ndef octal_to_binary(n):\n    '''\n    Write a function to convert the given octal number into binary format.\n    '''\n    return bin(n)\ndef decimal_to_octal(n):\n    '''\n    Write a function to convert the given decimal number into octal format.\n    '''\n    return oct(n)\ndef binary_to_decimal(n):\n    '''\n    Write a function to convert the given binary number into decimal format.\n    '''\n    return int(n,2)\ndef octal_to_decimal(n):\n    '''\n    Write a function to convert the given octal number into decimal format.\n    '''\n    return int(n,8)\ndef decimal_to_octal(n):\n    '''\n    Write a function to convert the given decimal number into octal format.\n    '''\n    return oct(n)\ndef decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number into binary format.\n    '''\n    return bin(n)\ndef binary_to_hexadecimal(n):\n    '''\n    Write a function to convert the given binary number into hexadecimal format.\n    '''\n    return hex(n)\ndef hexadecimal_to_decimal(n):\n    '''\n    Write a function to convert the given hexadecimal number into decimal format.\n    '''\n    return int(n,16)\ndef hexadecimal_to_binary(n):\n    '''\n    Write a function to convert the given hexadecimal number into binary format.\n    '''\n    return bin(n)\ndef hexadecimal_to_octal(n):\n    '''\n    Write a function to convert the given hexadecimal number into octal format.\n    '''\n    return oct(n)\ndef octal_to_decimal(n):\n    '''\n    Write a function to convert the given octal number into decimal format.\n    '''\n    return int(n,8)\ndef hexadecimal_to_octal(n):\n    '''\n    Write a function to convert the given hexadecimal number into octal format.\n    '''\n    return oct(n)\ndef hexadecimal_to_binary(n):\n    '''\n    Write a function to convert the given hexadecimal number into binary format.\n    '''\n    return bin(n)\ndef binary_to_hexadecimal(n):\n    '''\n    Write a function to convert the given binary number into hexadecimal format.\n    '''\n    return hex(n)\ndef binary_to_octal(n):\n    '''\n    Write a function to convert the given binary number into octal format.\n    '''\n    return oct(n)\ndef octal_to_binary(n):\n    '''\n    Write a function to convert the given octal number into binary format.\n    '''\n    return bin(n)\ndef binary_to_decimal(n):\n    '''\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n&i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    k = 0\n    for i in range(l,r+1):\n        k = k+2**i\n    return n == (k^r)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(\"Answer:\")\n    for i in range(l,r+1):\n        for j in range(0,n):\n            if (i>>j)&1!= 1:\n                print(i,\"is not a power of 2\")\n                break\n            else:\n                continue\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #Solution 1\n    # return (((1<<r)-1)-((1<<l)-1))<=n\n    #Solution 2\n    # return (1<<(r+1))-1<=n\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    ans = 2**n - 1\n    ans = ans & (ans - l)\n    ans = ans & (ans - r)\n    return ans\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n >= l and n <= r :\n        if n==2**n.bit_length():\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    temp = n\n    for i in range(l,r+1):\n        if n%(2**i) > 0:\n            return False\n        n = n>>i\n    if temp == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = int(l)\n    r = int(r)\n    n = int(n)\n    x = 0\n    for i in range(l,r+1):\n        if n&i:\n            x=1\n    if x == 0:\n        print(\"All the bits are set\")\n    else:\n        print(\"All the bits are not set\")\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = n\n    l = l\n    r = r\n    x = n & ~(1 << (r-1))\n    y = n & ~(1 << (l-1))\n    print(x | y)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n_mask = 0\n    for i in range(n):\n        n_mask |= (1 << i)\n    all_bits_unset = 0\n    for i in range(l,r+1):\n        all_bits_unset |= n_mask\n    return all_bits_unset\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    curr_idx = 0\n    for i in range(n):\n        while arr[i] < 0:\n            arr[i], arr[curr_idx] = arr[curr_idx], arr[i]\n            curr_idx += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        if arr[start] < 0 and arr[end] < 0:\n            start += 1\n            end -= 1\n            continue\n        if arr[start] < 0 < arr[end]:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n        if arr[start] >= 0 >= arr[end]:\n            end -= 1\n        if arr[start] >= 0 and arr[end] >= 0:\n            start += 1\n            end -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        while arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = i + 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    for i in range(n):\n        arr[i] = neg.pop(0) if arr[i] < 0 else pos.pop(0)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] < 0 and arr[j] < 0:\n            i += 1\n            continue\n        if arr[i] >= 0 and arr[j] >= 0:\n            i += 1\n            continue\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    p_arr, n_arr = [], []\n    for i in range(0, n):\n        if arr[i] < 0:\n            n_arr.append(arr[i])\n        else:\n            p_arr.append(arr[i])\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #O(n) time and O(1) space\n    #store negative and positive elements in their respective arrays\n    negative_arr = []\n    positive_arr = []\n    for i in range(0, n):\n        if arr[i] < 0:\n            negative_arr.append(arr[i])\n        else:\n            positive_arr.append(arr[i])\n    #merge the arrays\n    for j in range(0, n - len(negative_arr)):\n        positive_arr.append(negative_arr[j])\n    return positive_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = n - 1\n    for i in range(n):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[low]\n            arr[low] = temp\n            low += 1\n        elif arr[i] > 0:\n            temp = arr[i]\n            arr[i] = arr[high]\n            arr[high] = temp\n            high -= 1\n    print(arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            smallest = arr[0]\n            for j in range(n):\n                if arr[j] < smallest and arr[j] >= 0:\n                    smallest = arr[j]\n                    index = j\n            arr[j], arr[i] = arr[i], arr[j]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    index = 0\n    for i in range(n):\n        if arr[i] > 0:\n            break\n        index += 1\n    temp = arr[:index]\n    temp.reverse()\n    arr[:index] = temp\n    temp = arr[index:]\n    temp.reverse()\n    arr[index:] = temp\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    newstr = str1.replace(\" \",\"%s\")\n    return newstr\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','%20')\n    return str1\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1_list = list(str1)\n    str1_list[:] = [char if x==''else x for x in str1_list]\n    return \"\".join(str1_list)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i =='':\n            new_str+=char\n        else:\n            new_str+=i\n    return new_str\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == \" \":\n            new_str += char\n        else:\n            new_str += char\n    return new_str\nprint(replace_blank('he is a boy','*'))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    lst = []\n    for letter in str1:\n        if letter == \" \":\n            lst.append(char)\n        else:\n            lst.append(letter)\n    return \"\".join(lst)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1.find(\" \") == -1:\n        return str1\n    else:\n        result = str1.split(\" \")\n        new_string = \"\"\n        for i in result:\n            new_string += i + char\n        return new_string\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i =='':\n            str2 += char\n        else:\n            str2 += i\n    return str2\n    \nprint(replace_blank(\"This is a string\", \"*\"))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    list2 = []\n    for i in range(n):\n        list2.append(heapq.heappop(list1))\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def heapify(arr,n,i):\n        '''\n        heapify function is to initialize the heapify of an array.\n        The parent node of the node i is at (i-1)/2.\n        '''\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for i in range(n)]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    if len(list1) >= n:\n        return list1[-n:]\n    else:\n        return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    nlargest = heapq.nlargest(n, list1)\n    return nlargest\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list=[]\n    for i in range(n):\n        heapq.heappush(new_list,list1[i])\n    return new_list\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest = heapq.nlargest(n, list1)\n    return largest\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest = nlargest(n, list1)\n    return largest\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(2*np.pi*r*h)\n    return 2*np.pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral = math.pi*(r**2)*h\n    return lateral\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r*r + 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*math.pi*r*h) + (2*math.pi*r**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s_lateral = (2*math.pi*r*h) + (2*math.pi*r**2)\n    return s_lateral\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # add code here\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l,3)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0: \n        n,rem = divmod(n, 2) \n        print(rem)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # mask for bits 0 and 2\n    mask = 0x03\n    # do bitwise & with mask\n    return n & mask\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(1, n+1): \n        if i%2==0: \n            print(i, end =\" \") \n        else: \n            pass\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n ^= n >> 1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Set all even bits as 1\n    set_bit = n & 0xAAAAAAAA\n    # Set all odd bits as 0\n    masked = n & 0x55555555\n    masked = masked >> 1\n    # Clear even bits\n    cleared = masked & 0xAAAAAAAA\n    return set_bit | cleared\n    \n    \ndef set_bit(number, bit):\n    '''\n    Write a function to set a specified bit in a number to 1.\n    '''\n    return number | (1 << bit)\n    \n    \ndef clear_bit(number, bit):\n    '''\n    Write a function to clear a specified bit in a number.\n    '''\n    return number & ~(1 << bit)\n    \n    \ndef test_even_bit_set_number():\n    assert even_bit_set_number(1) == 2\n    assert even_bit_set_number(2) == 6\n    assert even_bit_set_number(3) == 6\n    \n    \ndef test_set_bit():\n    assert set_bit(0, 0) == 1\n    assert set_bit(1, 0) == 2\n    assert set_bit(2, 1) == 6\n    \n    \ndef test_clear_bit():\n    assert clear_bit(0, 1) == 0\n    assert clear_bit(1, 1) == 0\n    assert clear_bit(2, 1) == 2\n    \n    \ndef test_all():\n    test_even_bit_set_number()\n    test_set_bit()\n    test_clear_bit("
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # generate all even bits in n\n    all_even_bits = []\n    for x in range(0, n+1):\n        if x & 0x1 == 0:\n            all_even_bits.append(x)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 2**n - 1\n    mask = mask << 1\n    return mask\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n&0xAAAAAAAA\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create a dictionary with a counter object for each element in the tuple\n    #mapping the element in the tuple with its corresponding counter object\n    #by using the.most_common(1) function to get only the most common element\n    #most_common(1) returns a list of tuples containing the most common elements and their counts\n    counts = Counter(test_list)\n    dict_counts = {k: v for k, v in counts.most_common()}\n    return dict_counts\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    if test_list == []:\n        return {}\n    else:\n        test_dict = {}\n        for elem in test_list:\n            if elem in test_dict:\n                test_dict[elem] += 1\n            else:\n                test_dict[elem] = 1\n        return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict = Counter(test_list)\n    return dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create counter\n    occurences = Counter()\n    # iterate through tuple list\n    for tuple in test_list:\n        occurences[tuple] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurrences = {}\n    for i in test_list:\n        if i in occurrences:\n            occurrences[i] += 1\n        else:\n            occurrences[i] = 1\n    return occurrences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = dict()\n    for item in test_list:\n        if item in test_dict:\n            test_dict[item] += 1\n        else:\n            test_dict[item] = 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    list_of_tuples = []\n    for i in range(len(test_list)):\n        list_of_tuples.append(test_list[i][0])\n        list_of_tuples.append(test_list[i][1])\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    print(occurences)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    test_list_set = set(test_list)\n    unique_tuple_counts = {}\n    for item in unique_tuples:\n        occurences = test_list.count(item)\n        unique_tuple_counts[item] = occurences\n    return unique_tuple_counts\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    cnt = 0\n    for i in range(n): \n        for j in range(i, n): \n            cnt += 1\n    return cnt \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str1=str\n    str2=str\n    str3=str\n    sub_str_list =[] \n    count=0\n    if len(str) == 0: \n        return 0\n    if len(str) == 1: \n        return 1\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            sub_str_list.append(str[i:j+1])\n    sub_str_list2=[]\n    for i in range(len(str1)): \n        for j in range(i, len(str1)): \n            sub_str_list2.append(str1[i:j+1])\n    sub_str_list3=[]\n    for i in range(len(str2)): \n        for j in range(i, len(str2)): \n            sub_str_list3.append(str2[i:j+1])\n    for i in range(len(sub_str_list)): \n        if sub_str_list[i] in sub_str_list2:\n            count +=1\n    for i in range(len(sub_str_list)): \n        if sub_str_list[i] in sub_str_list3:\n            count +=1\n    return count\n    \ndef check_palindrom(str): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    str1=str\n    str2=str\n    str3=str\n    sub_str_list =[] \n    count=0\n    if len(str) == 0: \n        return 'empty string'\n    if len(str) == 1: \n        return True\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            sub_str_list.append(str[i:j+1])\n    sub_str_list2=[]\n    for i in range(len(str1)): \n        for j in range(i, len(str1)): \n            sub_str_list2.append(str1[i:j+1])\n    sub_str_list3=[]\n    for i in range(len(str2)): \n        for j in range(i, len(str2)): \n            sub_str_list3.append(str2[i:j+1])\n    for i in range(len(sub_str_list)): \n        if sub_str_list[i] in sub_str_list2:\n            count +=1\n    for i in range(len(sub_str_list)): \n        if sub_str_list[i] in sub_str_list3:\n            count +=1\n    if count==len(sub_str_list):\n        return True\n    else:\n        return False\n    \ndef check_palin(str): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    str1=str\n    str2=str\n    str3=str\n    sub_str_list =[] \n    count=0\n    if len(str) == 0: \n        return 'empty string'\n    if len(str) == 1: \n        return True\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            sub_str_list.append(str[i:j+1])\n    sub_str_list2=[]\n    for i in range(len(str1)): \n        for j in range(i, len(str1)): \n            sub_str_list2.append(str1[i:j+1])\n    sub_str_list3=[]\n    for i in range(len(str2)): \n        for j in range(i, len(str2)): \n            sub_str_list3.append(str2[i:j+1])\n    for i in range(len(sub_str_list)): \n        if sub_str_list[i] in sub_str_list2:\n            count +=1\n    for i in range(len(sub_str_list)): \n        if sub_str_list[i] in sub_str_list3:\n            count +=1\n    if count==len(sub_str_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    if len(str) <= 1:\n        return len(str)\n    else:\n        for i in range(len(str)):\n            for j in range(i+1, len(str)+1):\n                substrings.append(str[i:j])\n        return len(list(filter(lambda x: len(x)>0, substrings)))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            count = count + 1\n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n=len(str)\n    i=0\n    j=0\n    k=0\n    count=0\n    while j<n:\n        if str[j]!=\" \":\n            i=j\n            while i<n and str[i]!=\" \":\n                i=i+1\n            j=i\n            k=1\n            while k<n and str[k]!=\" \":\n                k=k+1\n            if i<n:\n                count=count+1\n        j=j+1\n    print(count)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) < 2: \n        return len(str)\n    \n    substr = '' \n    count = 0\n    i = 0 \n    j = 0\n    \n    while i < len(str): \n        substr += str[i] \n        while j < len(str) and str[j] not in substr: \n            j += 1 \n        if len(substr) >= 2: \n            count += len(substr) \n        \n        i = j \n        substr = '' \n        j += 1 \n    \n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str) \n    # table[i][j] will be false if str[i..j] is not a substring. Else table[i][j] will be true \n    table = [[False for x in range(n + 1)] for y in range(n + 1)] \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Insert your code here\n    count = 0\n    left,right = 0,0\n    n = len(str)\n    for right in range(n):\n        for left in range(right):\n            if str[left:right+1]!= \"\":\n                count +=1\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    start = 0\n    end = 0\n    while end < len(str):\n        start = end\n        end = start + 2\n        substrings.append(str[start:end])\n    print(substrings)\n    return len(substrings)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    a = [0] * n\n    b = [0] * n\n    for i in range(n):\n        a[i] = i + 2\n        b[i] = i + 2\n    for i in range(1,n):\n        a[i] = a[i] * a[i-1]\n        b[i] = b[i] * b[i-1]\n    print(a)\n    print(b)\n    return a[n-1] / (b[n-1] * m)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_count_of_sequences(m, n):\n        if m == 0 or n == 0:\n            return 0\n        elif n == 1:\n            return m\n        else:\n            return m * get_count_of_sequences(m,n-1)\n    return get_count_of_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 1 or n < 1:\n        raise ValueError('Both m and n have to be positive integers.')\n    else:\n        return int((m * (m-1) * (m-2) * (m-3) * (m-4))/(24*n*n*n))\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # the number of possible sequences is the number of permutations of n length, i.e. n! / (n-r)!\n    def factorial(n): \n        if n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n==0 or m==0 or n>m or n<0:\n        return 0\n    return get_total_number_of_sequences(m-1,n-1) + get_total_number_of_sequences(m-2,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #length of the sequence is n\n    #each number is greater than the previous one, and is less than or equal to m\n    #numbers range from 1 to m\n    #m is always greater than or equal to n, so the problem is really to find the nth Fibonacci number\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fibonacci(m,n-1) + fibonacci(m,n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    def main(m,n):\n        if n==0:\n            return 0\n        elif n==1:\n            return m+1\n        elif m==1:\n            return 2\n        else:\n            return main(m,n-1) - main(m-1,n-1)\n    \n    return main(m,n)\n    \ndef get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def main(m,n):\n        if n==0:\n            return 0\n        elif n==1:\n            return m+1\n        elif m==1:\n            return 2\n        else:\n            return main(m,n-1) - main(m-1,n-1)\n    \n    return main(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 0 or n < 0:\n        return 0\n    if n == 1:\n        return m\n    if n == 2:\n        return m+1\n    return get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m,n-1)\n    \nprint(get_total_number_of_sequences(4,3))\nprint(get_total_number_of_sequences(3,3))\nprint(get_total_number_of_sequences(3,4))\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m-1,0,-1):\n        count += (m-i)*(i+1)\n    for i in range(n):\n        count += m-i\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return reduce(lambda x, y: x * y, range(1, n + 1))\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    pass\ndef sum_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns the sum of the elements of the first list\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:len(list1)-1] = list2[::-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return(list1[:-1] + list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for x in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for char in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for s in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return(len(str1))\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n    \ndef count_charac_builtin(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\nprint(count_charac('kajal'))\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    sum = 0\n    for i in str1:\n        sum+=1\n    return sum\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0: \n        return -1\n    if math.sqrt(N).is_integer(): \n        return (int(math.sqrt(N)))\n    else: \n        return (int(math.sqrt(N)) + 1)\ndef find_next_perfect_squre(n): \n    '''\n    Write a python function to find the largest perfect square that can be created using all the integers between 1 and n (both included).\n    '''\n    if n < 1: \n        return -1\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    x = 1\n    next_perfect_squre = 1\n    while(next_perfect_squre <= n): \n        next_perfect_squre = next_Perfect_Square(x) \n        x = next_perfect_squre\n        next_perfect_squre += 1\n    return next_perfect_squre - 1\ndef reverse_string(string): \n    '''\n    Write a python function that takes a string and returns a string where the first half of the string is reversed and second half is in the same order.\n    '''\n    n = len(string)\n    if n < 1: \n        return -1\n    if n < 2: \n        return string\n    return string[n//2:] + string[:n//2] \ndef check_palindrome(string): \n    '''\n    Write a python function that checks whether the given string is a palindrome or not.\n    '''\n    n = len(string)\n    if n < 1: \n        return -1\n    if n < 2: \n        return True\n    if string[0]!= string[-1]: \n        return False\n    return check_palindrome(string[1:-1])\ndef check_word_palindrome(string): \n    '''\n    Write a python function that checks whether the given word is a palindrome or not.\n    '''\n    return reverse_string(string) == string\ndef anagram_checker(s1,s2): \n    '''\n    Write a python function that checks whether two words are anagrams of each other or not.\n    '''\n    return sorted(s1) == sorted(s2)\ndef longest_word(string): \n    '''\n    Write a python function that finds the longest word in a given string.\n    '''\n    words = string.split(' ')\n    max_word_length = 0\n    for word in words: \n        if max_word_length < len(word): \n            max_word_length = len(word)\n    return max_word_length\ndef find_longest_word(string): \n    '''\n    Write a python function that finds the longest word in a given string.\n    '''\n    return max(string.split(' '), key = len)\ndef palindrome_in_string(string): \n    '''\n    Write a python function that checks whether any palindrome exists in a given string or not.\n    '''\n    for i in range(0,len(string)): \n        for j in range(i,len(string)): \n            if string[i:j+1] == reverse_string(string[i:j+1]): \n                return True\n    return False\ndef find_all_palindrome_substring(string): \n    '''\n    Write a python function to find all the palindrome substring in a given string.\n    '''\n    result = []\n    for i in range(0,len(string)): \n        for j in range(i,len(string)): \n            if string[i:j+1] == reverse_string(string[i:j+1]): \n                result.append(string[i:j+1])\n    return result\ndef get_unique_characters(string): \n    '''\n    Write a python function that finds the number of unique characters in a given string.\n    '''\n    result = []\n    for char in string: \n        if char not in result: \n            result.append(char)\n    return len(result)\ndef find_common_characters(string1, string2): \n    '''\n    Write a python function that finds the common characters between two given strings.\n    '''\n    result = []\n    for char in string1: \n        if char in string2 and char not in result: \n            result.append(char)\n    return result\ndef find_all_common_characters(string1, string2): \n    '''\n    Write a python function that finds the common characters between two given strings.\n    '''\n    result = []\n    for char in string1: \n        if char in string2 and char not in result: \n            result.append(char)\n    return result\ndef longest_consecutive_subsequence(string): \n    '''\n    Write a python function to find the longest consecutive sequence in a given string.\n    '''\n    string = sorted(list(string))\n    current_count = 1\n    max_count = 1\n    for i in range(len(string) - 1): \n        if string[i+1] == string[i] + 1: \n            current_count += 1\n            max_count = max(max_count, current_count)\n        else: \n            current_count = 1\n    return max_count\ndef reverse_words_order_in_string(string): \n    '''\n    Write a python function that reverses the order of words in a given string.\n    '''\n    return''.join(reversed(string.split(' ')))\ndef count_substring(string, substring): \n    '''\n    Write a python function that counts the number of times that a given substring appears in a given string.\n    '''\n    return string.count(substring)\ndef string_rotation(string1, string2): \n    '''\n    Write a python function that checks whether a given string is a rotation of another given string.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    return string1 in (string2 + string2)\ndef is_palindrome(n): \n    '''\n    Write a python function that checks whether a given number is a palindrome or not.\n    '''\n    if n < 0: \n        return False\n    if n < 10: \n        return True\n    if n % 10 == 0: \n        return False\n    return str(n) == str(n)[::-1]\ndef is_super_palindrome(n): \n    '''\n    Write a python function that checks whether a given number is a super palindrome or not.\n    '''\n    return is_palindrome(n) and is_palindrome(str(n)[::-1])\ndef string_rotation_with_hash(string1, string2): \n    '''\n    Write a python function that checks whether a given string is a rotation of another given string.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    temp = {}\n    for i in range(len(string1)): \n        if string1[i] not in temp: \n            temp[string1[i]] = 1\n        else: \n            temp[string1[i]] += 1\n    for i in range(len(string2)): \n        if string2[i] not in temp: \n            return False\n        else: \n            temp[string2[i]] -= 1\n    for i in temp: \n        if temp[i]!= 0: \n            return False\n    return True\ndef is_pangram(string): \n    '''\n    Write a python function to check whether the given string is a pangram or not.\n    '''\n    result = 'abcdefghijklmnopqrstuvwxyz'\n    for char in result: \n        if char not in string.lower(): \n            return False\n    return True\ndef longest_increasing_subsequence(sequence): \n    '''\n    Write a python function that finds the length of longest increasing subsequence in a given sequence.\n    '''\n    length = len(sequence)\n    if length == 0: \n        return 0\n    dp = [1] * length\n    for i in range(1, length): \n        for j in rang"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Make a list of perfect squares in ascending order.\n    perfectSquares = []\n    for num in range(1, N + 1): \n        perfectSquares.append(num * num)\n    #print(perfectSquares)\n    # Next perfect square\n    nextPerfectSquare = 0\n    index = 0\n    for num in perfectSquares:\n        # print(num)\n        if (num > N):\n            break\n        index += 1\n    #print(index)\n    nextPerfectSquare = perfectSquares[index]\n    #print(nextPerfectSquare)\n    #print(perfectSquares[index])\n    return nextPerfectSquare\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return (int(math.sqrt(N)) + 1) ** 2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    nextPerfectSquare = math.ceil(math.sqrt(N))**2\n    return nextPerfectSquare\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square = math.sqrt(N)\n    if square == int(square):\n        return -1\n    return (int(square) + 1)**2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = N - 1 if N % 2 == 0 else N\n    sq = int(math.sqrt(N))\n    sq = sq + 1 if sq * sq == N else sq\n    return int(sq * sq)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        return -1\n    if N == 0:\n        return 1\n    i = 1\n    while(True):\n        if math.sqrt(i) == int(math.sqrt(i)):\n            return (i+1)*(i+1)\n        i += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if(root == int(root)):\n        return (int(root)+1)**2\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(n): \n        s = int(math.sqrt(n)) \n        return s*s == n \n    def next_Perfect_Square(n): \n        return (2**(n).bit_length()) \n    \n    if(is_perfect_square(N)): \n        return N \n    s = int(math.sqrt(N)) \n    for i in range(s, 2*s): \n        if(is_perfect_square(i)): \n            return i\n    return 2*s\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Checking if the number is positive \n    if N >= 0: \n        sqrt = math.sqrt(N) \n        if int(sqrt + 1) ** 2 == N: \n            return (int(sqrt + 1) ** 2) \n        else: \n            return -1\n    # Checking if the number is negative \n    else: \n        sqrt = math.sqrt(abs(N)) \n        if int(sqrt + 1) ** 2 == abs(N): \n            return (int(sqrt + 1) ** 2 * -1) \n        else: \n            return -1\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Base Case\n    if len(arr) == 1: \n        return arr[0] \n    else: \n        if len(arr) == 2:\n            return max(arr[0], arr[1]) \n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Sort the array\n    arr.sort()\n    # This array will store the maximum sum and will be returned\n    max_sum = 0\n    # Since the array is sorted, the first item in the array is the first increasing sequence\n    max_sum += arr[0]\n    # The minimum sum from that subsequence will be stored and will be returned\n    min_sum = arr[0]\n    # Traverse the array\n    for i in range(1, len(arr)):\n        # If the item is less than the last item in the previous increasing sequence, add it to the current sum\n        if arr[i] < arr[i - 1]:\n            max_sum += arr[i]\n        # If the item is greater than the last item in the previous increasing sequence, this is the first decreasing sequence\n        if arr[i] > arr[i - 1]:\n            # The minimum sum will be the last item in the previous increasing sequence\n            min_sum = arr[i - 1]\n            # The maximum sum will be the current sum\n            max_sum = arr[i]\n    # Return the maximum sum\n    return max_sum - min_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_sum_helper(arr, i, j):\n        if i == j:\n            return arr[i]\n        mid = (i + j) // 2\n        left_sum = max_sum_helper(arr, i, mid)\n        right_sum = max_sum_helper(arr, mid + 1, j)\n        mid_sum = max_sum_bitonic(arr, i, j)\n        return max(left_sum, right_sum, mid_sum)\n    \n    def max_sum_bitonic(arr, i, j):\n        if i == j:\n            return arr[i]\n        mid = (i + j) // 2\n        left_sum = bitonic_sum(arr, i, mid)\n        right_sum = bitonic_sum(arr, mid + 1, j)\n        return max(left_sum, right_sum)\n    return max_sum_helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    length = len(arr)\n    if length == 1:\n        return arr[0]\n    if length == 2:\n        return max(arr[0], arr[1])\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_bitonic_subsequence(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    max_sum = 0 \n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    for i in range(len(arr)):\n        arr[i] = arr[i]**2\n    return max_sum_helper(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def find_sum(arr,i,j,k):\n        if i>j:\n            return 0\n        if k == 0:\n            return arr[i]\n        if k == 1:\n            return arr[j]\n        if k == 2:\n            return arr[j] - arr[i]\n        return max(find_sum(arr,i+1,j,0),find_sum(arr,i,j-1,0),find_sum(arr,i+1,j-1,1),find_sum(arr,i,j-1,1))\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # brute force\n    # Time O(n^3) space O(1)\n    def solve(arr):\n        n = len(arr)\n        maxSum = float('-inf')\n        for i in range(n):\n            for j in range(i,n):\n                sum = 0\n                for k in range(i,j+1):\n                    sum += arr[k]\n                maxSum = max(maxSum,sum)\n        return maxSum\n    \n    return solve(arr)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number #x is the number we want the square root of\n    y = number + 1 #y is the starting value of the iteration\n    while x!= y:\n        #Loop will run until the two values are the same\n        y = (x + y)/2\n        x = number/y\n        #Every loop we calculate the new value for y\n    return y\n    #Once the loop is broken the final value of y is returned\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    previous_guess = 1\n    current_guess = 1\n    while True:\n        previous_guess = current_guess\n        current_guess = (previous_guess + number / previous_guess) / 2.0\n        if current_guess == previous_guess:\n            return current_guess\n            break\n        \n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # If number is negative, raise an exception\n    if number < 0:\n        raise Exception(f\"Input number {number} is negative. Use only positive numbers.\")\n    \n    # If number is 0, return 0\n    if number == 0:\n        return 0\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number\n    while True:\n        nextguess = 0.5 * (approx + number / approx)\n        if abs(nextguess - approx) < 0.000001:\n            return nextguess\n        approx = nextguess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + 1) / 2\n    while y < x:\n        x = y\n        y = (x + number / x) / 2\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number + 1) / 2\n    while y*y > number:\n        x = y\n        y = (x + number/x) / 2\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def guess(number):\n        return (number + (number / number)) / 2\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number/2) + 1\n    while (x-y) > 0.001:\n        x = y\n        y = (x + number/x) / 2\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    guess = 1.0\n    i = 0\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number/2)+1\n    while True:\n        y = (x + number/x)/2\n        if y == x:\n            break\n        x = y\n    return y\n    \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for i in range(n)] for i in range(n)] \n    max_len = 1\n    for i in range(n): \n        dp[i][i] = 1\n        max_len = 1\n        \n    for i in range(n-1):\n        if str[i] == str[i+1]: \n            dp[i][i+1] = 2\n            max_len = 2\n            \n    for j in range(n-1):\n        if str[j] == str[j+1]: \n            dp[j][j+1] = 2\n            max_len = 2\n    \n    for i in range(n-2): \n        for j in range(i+2, n): \n            if str[i] == str[j] and str[i+1] == str[j-1]: \n                dp[i][j] = dp[i+1][j-1] + 2\n                max_len = max(max_len, dp[i][j])\n            else: \n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Create a table to store results of subproblems \n    L = [[0 for x in range(len(str)+1)] for x in range(len(str)+1)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    table = [[0 for x in range(n)] for x in range(n)] \n    maxLength = 1\n    i = 0\n    while(i < n): \n        table[i][i] = 1\n        i = i + 1\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    maxLen = 1\n    i = 0\n    while (i < n): \n        # Find the longest even length palindromic subsequence \n        # starting from i \n        j = i \n        while (j < n and str[j] == str[j - i]): \n            j += 1\n        if (j - i) > maxLen: \n            maxLen = j - i \n            i = j - 1\n        # Find the longest odd length palindromic subsequence \n        # starting from i \n        j = i + 1\n        while (j < n and str[j] == str[j - i]): \n            j += 1\n        if (j - i) > maxLen: \n            maxLen = j - i \n            i = j - 1\n    return maxLen \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    m = [[0 for x in range(n)] for y in range(n)] \n    s = [[None for x in range(n)] for y in range(n)]\n    for i in range(n): \n        m[i][i] = 1\n        s[i][i] = 0\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                m[i][j] = 2\n                s[i][j] = 0\n            elif str[i] == str[j]: \n                m[i][j] = m[i+1][j-1] + 2\n                s[i][j] = 1\n            else: \n                m[i][j] = max(m[i][j-1], m[i+1][j]) \n                if m[i][j-1] >= m[i+1][j]: \n                    s[i][j] = 0\n                else: \n                    s[i][j] = 1\n    return m,s\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0 or n == 1:\n        return n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if str[j] == str[i] and (i-j < 3 or dp[j+1][i-1]):\n                dp[j][i] = dp[j][i-1]+2\n            else:\n                dp[j][i] = max(dp[j][i-1], dp[j+1][i])\n    return dp[0][-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    n = len(str) \n    L = [[0 for x in range(n)] for y in range(n)] \n    maxlen = 1\n    i = 0\n    while(i < n): \n        L[i][i] = 1\n        i = i + 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i + 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i][j - 1], L[i + 1][j]) \n            if L[i][j] > maxlen: \n                maxlen = L[i][j] \n    return maxlen\ndef lps_dp(str, m, n): \n    if m == 0 or n == 0: \n        return 0\n    if str[m-1] == str[n-1]: \n        return 1 + lps_dp(str, m-1, n-1) \n    else: \n        return max(lps_dp(str, m, n-1), lps_dp(str, m-1, n)) \ndef lcs_tab(x, y): \n    m = len(x) \n    n = len(y) \n    L = [[0 for k in range(n+1)] for l in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[m][n] \ndef lcs(x, y, m, n): \n    if m == 0 or n == 0: \n        return 0\n    elif x[m-1] == y[n-1]: \n        return 1 + lcs(x, y, m-1, n-1) \n    else: \n        return max(lcs(x, y, m, n-1), lcs(x, y, m-1, n)) \ndef lcs_dp(x, y): \n    m = len(x) \n    n = len(y) \n    L = [[0 for k in range(n+1)] for l in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[m][n] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    l = [[0 for x in range(n)]for y in range(n)] \n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize variables\n    result = 0\n    divisor = 1\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    #list of harmonic numbers from 1 to n\n    harmonic_numbers = [1]\n    \n    #recursively calculate and append each harmonic number\n    for i in range(2,n+1):\n        harmonic_numbers.append(harmonic_numbers[i-1] + 1/i)\n    \n    #return the sum of the last n harmonic numbers\n    return sum(harmonic_numbers[-n:])\n    \n    \ndef get_pairs_of_distinct_ints_from_string(string):\n    '''\n    Write a function that takes in a string of integers and returns the number of pairs of integers that are distinct.\n    '''\n    \n    #remove all non-integers from the input string\n    string = string.split()\n    string = [int(i) for i in string if i.isdigit()]\n    \n    #create a dictionary to store the counts of each integer\n    counts = {}\n    \n    #if the input string has only one integer, return 0\n    if len(string) == 1:\n        return 0\n    \n    #else, count the occurrences of each distinct integer in the input string\n    for i in string:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    \n    #find the number of distinct integers in the input string\n    distinct_integers = set(counts.keys())\n    \n    #return the number of pairs of distinct integers in the input string\n    return len([i for i in distinct_integers if counts[i] > 1])\n    \n    \ndef process_command_line_args():\n    '''\n    Write a function that processes command line arguments. The arguments are the following:\n    --verbose, --help, --count, and a string of integers\n    \n    Write a function that takes in a command line argument and returns the sum of all the integers in the argument.\n    '''\n    \n    #create a list of command line arguments\n    args = sys.argv[1:]\n    \n    #create a dictionary to store the command line arguments\n    args_dict = {}\n    \n    #process each command line argument\n    for arg in args:\n        \n        #if the argument is a flag\n        if arg[0] == '-':\n            \n            #store the command line argument in the dictionary\n            args_dict[arg[1:]] = True\n            \n        #if the argument is an integer\n        elif arg.isdigit():\n            \n            #store the command line argument in the dictionary\n            args_dict[''] = int(arg)\n            \n        #if the argument is not a flag or integer\n        else:\n            \n            #store the command line argument in the dictionary\n            args_dict[arg] = True\n            \n    #return the dictionary of command line arguments\n    return args_dict\n    \n    \ndef calculate_min_cost(m, n, k):\n    '''\n    Write a function that takes in three positive integers m, n, and k. The function will calculate and return the min cost of painting k squares of a m by n house in a way that no two adjacent k-colored squares have the same color.\n    '''\n    \n    #create a list to store the possible colors of a square\n    colors = [i for i in range(1,m+1)]\n    \n    #calculate the number of total colors needed to paint all the squares\n    total_colors = m*n\n    \n    #if the total number of colors needed to paint the squares is less than or equal to the number of squares that need to be painted\n    if total_colors <= k:\n        \n        #return the number of colors needed to paint all the squares\n        return total_colors\n    \n    #if the total number of colors needed to paint the squares is greater than the number of squares that need to be painted\n    else:\n        \n        #create a list to store the number of times each color appears\n        times_each_color_appears = [0]*(m+1)\n        \n        #count the number of times each color appears\n        for i in range(1,m+1):\n            times_each_color_appears[i] = list(map(lambda x: x.count(i), house_costs)).count(k)\n        \n        #return the number of colors needed to paint all the squares\n        return sum(times_each_color_appears)\n        \n        \ndef process_puzzle_input_file(filename):\n    '''\n    Write a function that processes a text file of puzzle input and returns the total number of bags of shiny gold that can contain a shiny gold bag.\n    '''\n    \n    #open the file\n    with open(filename) as f:\n        \n        #read in the data\n        data = f.read()\n        \n    #split the data\n    data = data.split('\\n')\n    \n    #create a dictionary to store the bags that can contain shiny gold bags\n    bags = {}\n    \n    #process the data and store the bags that can contain shiny gold bags in the dictionary\n    for line in data:\n        \n        #remove the whitespace\n        line = line.replace(' bags', '').replace(' bag', '').replace('.', '')\n        \n        #get the bag and the bags that it can contain\n        bag = line[:line.index('contain')-1]\n        contained_bags = line[line.index('contain')+9:]\n        \n        #create a list of bags that can contain the bag\n        if contained_bags == 'no other bags':\n            bags[bag] = []\n        else:\n            contained_bags = contained_bags.split(', ')\n            bags[bag] = contained_bags\n    \n    #create a dictionary to store the bags that can contain shiny gold bags\n    new_bags = {}\n    \n    #process each bag in the dictionary\n    for bag in bags:\n        \n        #process each bag that can contain the current bag\n        for bag_ in bags[bag]:\n            \n            #if the bag that can contain the current bag is not already in the new_bags dictionary\n            if bag_ not in new_bags:\n                \n                #create a list to store the bags that can contain the bag that can contain the current bag\n                new_bags[bag_] = [bag]\n            \n            #if the bag that can contain the current bag is already in the new_bags dictionary\n            else:\n                \n                #add the current bag to the list of bags that can contain the bag that can contain the current bag\n                new_bags[bag_].append(bag)\n    \n    #store the total number of bags that can contain shiny gold bags in a variable\n    total_bags = 0\n    \n    #process each bag in the new_bags dictionary\n    for bag in new_bags:\n        \n        #calculate the number of bags that can contain a shiny gold bag\n        if bag =='shiny gold':\n            total_bags += 1\n        else:\n            total_bags += len(new_bags[bag])\n            \n    #return the total number of bags that can contain shiny gold bags\n    return total_bags\n    \n    \ndef get_products_of_all_ints_except_at_index(ints):\n    '''\n    Write a function that takes in a list of integers and returns the list of products of all integers in the list, except for the integer at the index of the list.\n    '''\n    \n    #create a list to store the products of each integer in the list\n    products = []\n    \n    #process each integer in the list\n    for i in ints:\n        \n        #calculate the product of all integers in the list that are not the integer at the index of the list\n        product = ints[:ints.index(i)] + ints[ints.index(i)+1:]\n        product = 1\n        for j in product:\n            product *= j\n        products.append(product)\n    \n    #return the list of products of all integers in the list, except for the integer at the index of the list\n    return products\n    \n    \ndef process_puzzle_input_file_with_format(filename):\n    '''\n    Write a function that processes a text file of puzzle input and returns the product of all the puzzle input integers that are divisible by 8, but not a multiple of 2 or 5.\n    '''\n    \n    #open the file\n    with open(filename) as f:\n        \n        #read in the data\n        data = f.read()\n        \n    #split the data\n    dat"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    return 1/float(1 + n - 1)\n    \ndef generate_harmonic_sum_sequence(n):\n    '''\n    Write a function that takes in an integer n and generates a list of values corresponding to the n-th harmonic sum.\n    '''\n    \n    harmonic_sums = [harmonic_sum(n)]\n    \n    i = 1\n    while(i < n):\n        harmonic_sums.append(harmonic_sum(n) + harmonic_sums[i-1])\n        i += 1\n        \n    return harmonic_sums\n    \nprint(generate_harmonic_sum_sequence(100)"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/x for x in range(1, n+1)])\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for x in range(1,n):\n        total += 1/x\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return round(sum, 5)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection_list.append(num1)\n    return intersection_list\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    return list(nums1.intersection(nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    hash_map = dict()\n    intersection_arr = []\n    for num in array_nums1:\n        if num not in hash_map:\n            hash_map[num] = True\n        else:\n            intersection_arr.append(num)\n    for num in array_nums2:\n        if num in hash_map:\n            intersection_arr.append(num)\n    return intersection_arr\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_list = []\n    for n in array_nums1:\n        if n in array_nums2:\n            if n not in new_list:\n                new_list.append(n)\n    return new_list\nprint(intersection_array([1,2,2,1],[2,2]))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_list = []\n    for n in array_nums1:\n        if n in array_nums2:\n            new_list.append(n)\n    return new_list\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 == None or array_nums2 == None:\n        return None\n    if len(array_nums1) > len(array_nums2):\n        return intersection_array(array_nums2,array_nums1)\n    my_dict = {}\n    result = []\n    for num in array_nums1:\n        my_dict[num] = True\n    for num in array_nums2:\n        if num in my_dict:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return set(array_nums1).intersection(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    i,j = 0,0\n    intersection = []\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i] > array_nums2[j]:\n            j+=1\n        else:\n            i+=1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1=set(array_nums1)\n    set_nums2=set(array_nums2)\n    intersection=set_nums1.intersection(set_nums2)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    def binary_search(nums,value):\n        l,r=0,len(nums)-1\n        while l<r:\n            mid=l+(r-l)//2\n            if nums[mid]<value:\n                l=mid+1\n            else:\n                r=mid\n        return l\n    if len(array_nums1)<=0 or len(array_nums2)<=0:\n        return []\n    array_nums1=sorted(array_nums1)\n    array_nums2=sorted(array_nums2)\n    list_intersection=[]\n    for num in array_nums2:\n        if binary_search(array_nums1,num)==0:\n            list_intersection.append(num)\n    return list_intersection\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    i = 0\n    for t in tup:\n        if t == x:\n            i += 1\n    return i\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if len(tup) == 0:\n        return 0\n    elif tup[0] == x:\n        return 1 + count_X(tup[1:], x)\n    else:\n        return 0 + count_X(tup[1:], x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if (i == x): \n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup:\n        if i == x:\n            count += 1 \n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if len(tup) == 0:\n        return 0\n    else:\n        count = 0\n        for i in tup:\n            if i == x:\n                count += 1\n        return count\n    "
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0\n    for i in tup:\n        if i == x:\n            x_count += 1\n    return x_count\n    \n    \ndef index_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and returns the index of the first occurence of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            return count\n        count += 1\n    return -1\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if len(tup) == 0:\n        return 0\n    elif tup[0] == x:\n        return 1 + count_X(tup[1:], x)\n    else:\n        return 0 + count_X(tup[1:], x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0\n    for num in tup:\n        if num == x:\n            x_count += 1\n    return x_count \n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n        new_list.append(element)\n    return new_list\nprint(insert_element([1,2,3],0))\nprint(insert_element([\"a\", \"b\", \"c\"], \"z\"))\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #if not list:\n        #return [element]\n    #else:\n        #return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index in range(len(list)):\n        list.insert(index,element)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + [elem for elem in list if elem!= element]\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for x in list:\n        new_list.append(element)\n        new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        list.insert(i,element)\n        i += 2\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers[1])\n    z=complex(numbers[0],numbers"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for x in numbers:\n        a = cmath.polar(x)\n        result.append(a)\n    print('Conversion Successful',result)\n    return result\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def c_to_p(num):\n        real = num.real\n        imag = num.imag\n        mag = abs(num)\n        phase = cmath.phase(num)\n        return [mag, phase]\n    return [c_to_p(num) for num in numbers]\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinate=[]\n    for i in range(len(numbers)):\n        complex_number=complex(numbers[i][0],numbers[i][1])\n        polar_coordinate.append(complex_number.polar())\n    return polar_coordinate\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar(complex_number):\n        return cmath.polar(complex_number)\n    return [polar(number) for number in numbers]\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    p=cmath.polar(complex(numbers[0],numbers[1]))\n    polar=list(p)\n    for i in range(0,2):\n        polar[i]=round(polar[i],2)\n    polar_final=\"{}+{}j\".format(polar[0],polar[1])\n    return (polar_final)\ndef find_slope(x1,y1,x2,y2):    \n    '''\n    Write a python function to find the slope of line(y = mx + c) using the given two points.\n    '''\n    if x2-x1!=0:\n        slope=(y2-y1)/(x2-x1)\n    elif x2-x1==0:\n        slope=0\n    return (slope)\ndef concave_angle(x1,y1,x2,y2,x3,y3):    \n    '''\n    Write a python function to find the angle formed by three points in a triangle.\n    '''\n    a=(y2-y1)*(x3-x2)-(x2-x1)*(y3-y2)\n    b=(x2-x1)*(y3-y2)-(y2-y1)*(x3-x2)\n    if a>0:\n        c=a+b\n    elif a<0:\n        c=-a+b\n    else:\n        c=0\n    angle=math.degrees(math.atan2(c,a))\n    return (angle)\ndef translate(text,left,top,width,height):    \n    '''\n    Write a python function to translate any text in a given direction.\n    '''\n    translated=''\n    for i in text:\n        if i==\" \":\n            translated+=\" \"\n        elif i==\"\\n\":\n            translated+=\"\\n\"\n        else:\n            translated+=chr(ord(i)+left)\n    return (translated)\ndef point_to_point_slope(x1,y1,x2,y2):    \n    '''\n    Write a python function to calculate the slope between two points.\n    '''\n    slope=(y2-y1)/(x2-x1)\n    return (slope)\ndef integer_right_triangles(a,b,c):    \n    '''\n    Write a python function to check if three points can form a right triangle.\n    '''\n    if a<b+c and b<a+c and c<a+b:\n        return (True)\n    else:\n        return (False)\ndef volume_of_a_cuboid(a,b,c):    \n    '''\n    Write a python function to calculate the volume of a cuboid.\n    '''\n    volume=a*b*c\n    return (volume)\ndef area_of_a_rectangle(a,b):    \n    '''\n    Write a python function to calculate the area of a rectangle.\n    '''\n    area=a*b\n    return (area)\ndef area_of_a_triangle(a,b,c):    \n    '''\n    Write a python function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return (area)\ndef area_of_a_circle(r):    \n    '''\n    Write a python function to calculate the area of a circle.\n    '''\n    area=math.pi*r*r\n    return (area)\ndef distance_between_points(x1,y1,x2,y2):    \n    '''\n    Write a python function to calculate the distance between two points.\n    '''\n    dist=math.sqrt((x2-x1)**2+(y2-y1)**2)\n    return (dist)\ndef perimeter_of_a_rectangle(a,b):    \n    '''\n    Write a python function to calculate the perimeter of a rectangle.\n    '''\n    per=a+b+a+b\n    return (per)\ndef is_prime(n):    \n    '''\n    Write a python function to check if the given number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return (False)\n    return (True)\ndef is_perfect_square(n):\n    '''\n    Write a python function to check if the given number is a perfect square or not.\n    '''\n    i=1\n    while i<=n:\n        if i*i==n:\n            return (True)\n        i+=1\n    return (False)\ndef is_pandigital(n):\n    '''\n    Write a python function to check if the given number is pandigital or not.\n    '''\n    digits=set()\n    n=str(n)\n    for i in n:\n        digits.add(i)\n    if len(digits)!=10:\n        return (False)\n    else:\n        return (True)\ndef is_palindrome(n):\n    '''\n    Write a python function to check if the given number is a palindrome or not.\n    '''\n    temp=n\n    r=0\n    while n>0:\n        r=r*10+(n%10)\n        n=n//10\n    if temp==r:\n        return (True)\n    else:\n        return (False)\ndef reverse(n):\n    '''\n    Write a python function to reverse the given number.\n    '''\n    temp=0\n    while n!=0:\n        temp=temp*10+(n%10)\n        n=n//10\n    return (temp)\ndef divisors(n):\n    '''\n    Write a python function to find all the divisors of the given number.\n    '''\n    divisors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors.append(i)\n    return (divisors)\ndef perfect_number(n):\n    '''\n    Write a python function to check if the given number is a perfect number or not.\n    '''\n    sum=0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    if sum==n:\n        return (True)\n    else:\n        return (False)\ndef palindrome_number(n):\n    '''\n    Write a python function to check if the given number is a palindrome number or not.\n    '''\n    temp=n\n    r=0\n    while n>0:\n        r=r*10+(n%10)\n        n=n//10\n    if temp==r:\n        return (True)\n    else:\n        return (False)\ndef armstrong_number(n):\n    '''\n    Write a python function to check if the given number is an Armstrong number or not.\n    '''\n    sum=0\n    temp=n\n    while n>0:\n        sum+=n%10**(3)\n        n=n//10\n    if sum==temp:\n        return (True)\n    else:\n        return (False)\ndef sine_of_angle(n):\n    '''\n    Write a python function to calculate the sine of an angle.\n    '''\n    sine=math.sin(n)\n    return (sine)\ndef cosine_of_angle(n):\n    '''\n    Write a python function to calculate the cosine of an angle.\n    '''\n    cosine=math.cos(n)\n    return (cosine)\ndef tangent_of_angle(n):\n    '''\n    Write a python function to calculate the tangent of an angle.\n    '''\n    tangent=math.tan(n)\n    return (tangent)\ndef complex_number(real,imag):\n    '''\n    Write a python function to convert a real number and imaginary number into complex number.\n    '''\n    complex=complex(real,imag)\n    return (complex)\ndef convert_base(n,base):\n    '''\n    Write a python function to convert the given number to the given base.\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for i in numbers:\n        x = cmath.polar(i)\n        polar.append(x)\n    return(polar)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = complex(numbers)\n    \n    print(\"Complex Number: \" + str(num))\n    print(\"Real Part: \" + str(num.real))\n    print(\"Imaginary Part: \" + str(num.imag))\n    \n    \n    x = cmath.polar(num)\n    print(\"Modulus: \" + str(x[0]))\n    print(\"Phase in Degrees: \" + str(x[1]))\n    \n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = numbers.real\n    imag = numbers.imag\n    phase = cmath.phase(numbers)\n    absolute = cmath.abs(numbers)\n    return {\"r\": real, \"i\": imag, \"angle\": phase, \"abs\": absolute}\n    \ndef compare(numbers1, numbers2):\n    '''\n    Write a function to compare two complex numbers.\n    '''\n    compare1 = convert(numbers1)\n    compare2 = convert(numbers2)\n    return compare1 == compare2\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def complex_to_polar(complex_num):\n        return cmath.polar(complex_num)\n    return list(map(complex_to_polar,numbers))\n    \n    \ndef convert_to_cartesian(numbers):\n    '''\n    Write a python function to convert complex numbers to Cartesian coordinates.\n    '''\n    def complex_to_cartesian(complex_num):\n        return cmath.rect(complex_num[0],complex_num[1])\n    return list(map(complex_to_cartesian,numbers))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    print(list1)\n    count = 0\n    for i in list1:\n        if type(i)==int:\n            count = count + 1\n    print(count)\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter=0\n    for i in list1:\n        if isinstance(i,int):\n            counter=counter+1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if(type(i)==int):\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x,int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    for i, j in enumerate(combs):\n        print(j)\n        combs[i] = tuple(j)\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    l2 = []\n    for c in comb:\n        l2.append(tuple(c))\n    return l2\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        if l[i] not in result:\n            result.append(l[i])\n    # result = list(set(result))\n    result = list(combinations_with_replacement(result, n))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    lst = []\n    for i in range(1, n+1):\n        lst.append(i)\n    return [x for x in combinations_with_replacement(lst, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #combinations = []\n    #for i in l:\n    #    for j in l:\n    #        combinations.append((i,j))\n    #print(combinations)\n    combinations = [c for c in combinations_with_replacement(l, n)]\n    #print(combinations)\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    res = []\n    for i in range(0, len(l)):\n        if len(l[i:]) >= n:\n            res.extend(list(combinations_with_replacement(l[i:], n)))\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n    \n    \ndef num_divisors(n):\n    '''\n    Write a function that takes in an integer and returns a list with all the divisors of that integer.\n    '''\n    if n == 1:\n        return [1]\n    return [i for i in range(1,n) if n % i == 0] + [n]\n    \n    \ndef primes_upto(n):\n    '''\n    Write a function that returns a list of prime numbers that have been generated up until n.\n    '''\n    return [i for i in range(2,n+1) if len(num_divisors(i)) == 2]\n    \n    \ndef sum_of_n(n, x):\n    '''\n    Write a function that takes in an integer n and a list of n numbers. The function should return the sum of the numbers in the list of numbers.\n    '''\n    return sum([x[i] for i in range(n)])\n    \n    \ndef sum_of_2_nums(n, x):\n    '''\n    Write a function that takes in an integer n and a list of n numbers. The function should return the sum of the two numbers in the list.\n    '''\n    return sum([x[i] for i in range(n) if i % 2 == 0])\n    \n    \ndef contains_sublist(l, subl):\n    '''\n    Write a function that takes in a list and a sublist. The function should return True if the list contains the sublist.\n    '''\n    return subl in l\n    \n    \ndef difference(l, subl):\n    '''\n    Write a function that takes in two lists and returns a list with all of the elements in the first list minus any of the elements in the second list.\n    '''\n    return [i for i in l if i not in subl]\n    \n    \ndef rotate(l, n):\n    '''\n    Write a function that takes in a list and a number, n. The function should return the rotated list. If the list has less than n elements then return the original list.\n    '''\n    if n > len(l):\n        n = n % len(l)\n    return l[n:] + l[:n]\n    \n    \ndef add_one(l):\n    '''\n    Write a function that takes in a list and returns a new list with the elements in the original list increased by 1.\n    '''\n    return [i+1 for i in l]\n    \n    \ndef union(l1, l2):\n    '''\n    Write a function that takes in two lists and returns a list with all of the elements from the first list and all of the elements from the second list.\n    '''\n    return list(set(l1 + l2))\n    \n    \ndef intersection(l1, l2):\n    '''\n    Write a function that takes in two lists and returns a list with all of the elements that are in both lists.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef find_longest_substring(s):\n    '''\n    Write a function that takes in a string and returns a tuple of the longest substring and the index of the start of the substring.\n    '''\n    l = len(s)\n    if l == 1:\n        return [s, 0]\n    start_indexes = [0]\n    for i in range(l):\n        for j in range(i+1, l):\n            substr = s[i:j+1]\n            if substr in s[start_indexes[-1]:]:\n                start_indexes.append(i)\n                break\n    return [s[start_indexes[-1]:start_indexes[-1]+len(s)], start_indexes[-1]]\n    \n    \ndef generate_primes(n):\n    '''\n    Write a function that takes in a number and returns all the prime numbers less than that number.\n    '''\n    return [i for i in range(2,n) if len(num_divisors(i)) == 2]\n    \n    \ndef int_to_str(num):\n    '''\n    Write a function that takes in an integer and returns the string representation of the integer.\n    '''\n    return str(num)\n    \n    \ndef str_to_int(s):\n    '''\n    Write a function that takes in a string and returns the integer representation of the string.\n    '''\n    return int(s)\n    \n    \ndef print_list(l):\n    '''\n    Write a function that takes in a list and prints all the elements in the list.\n    '''\n    for i in l:\n        print(i)\n    \n    \ndef reverse_str(s):\n    '''\n    Write a function that takes in a string and returns the string in reverse.\n    '''\n    return s[::-1]\n    \n    \ndef search_rotated(l, target):\n    '''\n    Write a function that takes in a list and a target integer and returns the index of the target in the list. If the target is not in the list, then return -1.\n    '''\n    return l.index(target) if target in l else -1\n    \n    \ndef sum_all(l):\n    '''\n    Write a function that takes in a list and returns the sum of all the elements in the list.\n    '''\n    return sum(l)\n    \n    \ndef sort_list(l):\n    '''\n    Write a function that takes in a list and returns a sorted list with all of the elements from the original list.\n    '''\n    return sorted(l)\n    \n    \ndef find_missing_element(l):\n    '''\n    Write a function that takes in a list and returns the missing element in the list.\n    '''\n    return [i for i in range(l[0], l[-1]+1) if i not in l][0]\n    \n    \ndef find_duplicate_index(l):\n    '''\n    Write a function that takes in a list and returns the index of the first element in the list that appears more than once.\n    '''\n    if len(l) == 1:\n        return -1\n    for i in range(len(l)):\n        if l.count(l[i]) > 1:\n            return i\n    return -1\n    \n    \ndef find_non_duplicate_index(l):\n    '''\n    Write a function that takes in a list and returns the index of the first element in the list that doesn't appear more than once.\n    '''\n    return find_duplicate_index(l[:])\n    \n    \ndef duplicate_count(l):\n    '''\n    Write a function that takes in a list and returns the number of times that each element appears in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n    \n    \ndef replace_all(l, el1, el2):\n    '''\n    Write a function that takes in a list and two elements and replaces all instances of the first element with the second element in the list.\n    '''\n    return [el2 if i == el1 else i for i in l]\n    \n    \ndef replace_first(l, el1, el2):\n    '''\n    Write a function that takes in a list and two elements and replaces the first instance of the first element with the second element in the list.\n    '''\n    return [el2 if i == el1 else i for i in l]\n    \n    \ndef count_str(l, s):\n    '''\n    Write a function that takes in a list and a string and returns the number of times that string appears in the list.\n    '''\n    return l.count(s)\n    \n    \ndef reverse_list(l):\n    '''\n    Write a function that takes in a list and returns a new list with the elements in the original list in reversed order.\n    '''\n    return l[::-1]\n    \n    \ndef sort_list_using_two_pivot(l, start_pivot"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    if n == 0:\n        return [[]]\n    if len(l) == n:\n        return [l]\n    for i in range(len(l)):\n        result.append(l[i])\n        result.extend(combinations_colors(l[:i] + l[i+1:], n - 1))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(0, len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                result.append((l[i], l[j], l[k]))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        a = []\n        for i in range(1, n):\n            if isPrime(i) == True:\n                a.append(i)\n    return len(a)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        for i in range(2, int(n**0.5 + 1)):\n            if n%i == 0:\n                return False\n        return True\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Initialize count\n    count = 0\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(2, n + 1):\n        if isPrime(i):\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        if n<2:\n            return False\n        elif n<4:\n            return True\n        elif n%2==0 or n%3==0:\n            return False\n        else:\n            r=5\n            while(r*r<=n):\n                if n%r==0 or n%(r+2)==0:\n                    return False\n                r+=6\n            return True\n    def count_Primes(n):\n        count=0\n        for i in range(2,n):\n            if is_prime(i):\n                count+=1\n        return count\n    return count_Primes(n)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime = [True for i in range(n+1)]\n    p = 2\n    while p*p <= n:\n        if prime[p]:\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n    # count of prime numbers in range [2, n]\n    return prime.count(True)-2\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        # as long as n is greater than 1\n        if n > 1:\n            # iterate from 2 to n / 2 and test if any number can divide n\n            for i in range(2, int(n / 2) + 1):\n                # if any number can divide n, then n is not prime\n                if (n % i) == 0:\n                    return False\n            # if there were no divisors of n, then n is a prime number\n            return True\n        else:\n            return False\n        \n    # if n is not greater than 1, then it is not prime\n    if n <= 1:\n        return False\n        \n    # get the total number of primes less than n\n    total_primes = 0\n    \n    for i in range(1, n + 1):\n        if is_prime(i):\n            total_primes += 1\n    return total_primes\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(x):\n        if x < 2:\n            return False\n        for i in range(2,int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    \n    #Make a variable to store the numbers in the tuple\n    swapped_num = (a,b)\n    return swapped_num\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a, b = b, a\n    return a,b\nprint(swap_numbers(1,2))\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n    \ndef number_to_ordinal(number):\n    '''\n    Write a function that takes in a number and returns it as an ordinal.\n    '''\n    if number % 10 == 1:\n        return str(number) + \"st\"\n    elif number % 10 == 2:\n        return str(number) + \"nd\"\n    elif number % 10 == 3:\n        return str(number) + \"rd\"\n    else:\n        return str(number) + \"th\"\n    \ndef validate_user(username, minlen):\n    '''\n    Write a function that takes in a username and returns a boolean indicating whether or not that username is valid.\n    '''\n    if len(username) < minlen:\n        return False\n    if not username.isalnum():\n        return False\n    if username[0].isalpha():\n        return False\n    return True\n    \ndef validate_password(password, minlen):\n    '''\n    Write a function that takes in a password and returns a boolean indicating whether or not that password is valid.\n    '''\n    if len(password) < minlen:\n        return False\n    if not password.isalnum():\n        return False\n    return True\n    \ndef print_table(table):\n    '''\n    Write a function that takes in a table and prints it out as a formatted table.\n    '''\n    for i in range(len(table)):\n        for j in range(len(table[0])):\n            print(table[i][j], end = \" \")\n        print(\"\")\n    return\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return [max(a, b) for a, b in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1), max(test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n    else:\n        raise Exception(\"The two tuples should have the same length.\")\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # method 1\n    # result = tuple(max(e1, e2) for e1, e2 in zip(test_tup1, test_tup2))\n    # return result\n    # method 2\n    return tuple(max(e1, e2) for e1, e2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_sum = 0\n    for i in test_tup1:\n        for j in test_tup2:\n            max_sum += max(i, j)\n    print(max_sum)\n    return max_sum\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    temp1 = test_tup1[:]\n    temp2 = test_tup2[:]\n    if len(temp1) < len(temp2):\n        for i in range(0, len(temp2) - len(temp1)):\n            temp1.insert(0,0)\n    elif len(temp1) > len(temp2):\n        for i in range(0, len(temp1) - len(temp2)):\n            temp2.insert(0,0)\n    elif len(temp1) == len(temp2):\n        pass\n    print(temp1)\n    print(temp2)\n    print(max(temp1 + temp2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    tup_sum = tup1 + tup2\n    tup_sum.sort()\n    return tup_sum[-1], tup_sum[-2]\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # in_tuple = (2,1)\n    # in_tuple = (3,2)\n    # in_tuple = (4,5)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] >= test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    if n < 1:\n        print(\"Not a valid number.\")\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    else:\n        return _newman_shanks_williams(n)\n        \ndef _newman_shanks_williams(n):\n    '''\n    We follow the steps described in the wikipedia page\n    https://en.wikipedia.org/wiki/Newman%E2%80%93Shanks_primality_test\n    to obtain the nth newman\u2013shanks\u2013williams prime.\n    '''\n    x = random.randint(1,10**6)\n    a = random.randint(1,10**6)\n    p = _newman_shanks_williams_helper(x,a,n)\n    return p\n    \ndef _newman_shanks_williams_helper(x,a,n):\n    '''\n    We follow the steps described in the wikipedia page\n    https://en.wikipedia.org/wiki/Newman%E2%80%93Shanks_primality_test\n    to obtain the nth newman\u2013shanks\u2013williams prime.\n    '''\n    x, a, n = int(x), int(a), int(n)\n    \n    if n % 2 == 0:\n        return False\n    else:\n        # x = a^q + 2a + 2\n        a = a % x\n        s = 1\n        t = n\n        while t % 2 == 0:\n            s += 1\n            t /= 2\n        y = pow(a,int(t),x)\n        if y == 1:\n            return False\n        else:\n            for i in range(s):\n                y = (y*y) % x\n                if y == 1:\n                    return False\n                else:\n                    continue\n            return True\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 23\n    if n == 9:\n        return 29\n    if n == 10:\n        return 31\n    if n == 11:\n        return 37\n    if n == 12:\n        return 41\n    if n == 13:\n        return 43\n    if n == 14:\n        return 47\n    if n == 15:\n        return 53\n    if n == 16:\n        return 59\n    if n == 17:\n        return 61\n    if n == 18:\n        return 67\n    if n == 19:\n        return 71\n    if n == 20:\n        return 73\n    if n == 21:\n        return 79\n    if n == 22:\n        return 83\n    if n == 23:\n        return 89\n    if n == 24:\n        return 97\n    if n == 25:\n        return 101\n    if n == 26:\n        return 103\n    if n == 27:\n        return 107\n    if n == 28:\n        return 109\n    if n == 29:\n        return 113\n    if n == 30:\n        return 127\n    if n == 31:\n        return 131\n    if n == 32:\n        return 137\n    if n == 33:\n        return 139\n    if n == 34:\n        return 149\n    if n == 35:\n        return 151\n    if n == 36:\n        return 157\n    if n == 37:\n        return 163\n    if n == 38:\n        return 167\n    if n == 39:\n        return 173\n    if n == 40:\n        return 179\n    if n == 41:\n        return 181\n    if n == 42:\n        return 191\n    if n == 43:\n        return 193\n    if n == 44:\n        return 197\n    if n == 45:\n        return 199\n    if n == 46:\n        return 211\n    if n == 47:\n        return 223\n    if n == 48:\n        return 227\n    if n == 49:\n        return 229\n    if n == 50:\n        return 233\n    if n == 51:\n        return 239\n    if n == 52:\n        return 241\n    if n == 53:\n        return 251\n    if n == 54:\n        return 257\n    if n == 55:\n        return 263\n    if n == 56:\n        return 269\n    if n == 57:\n        return 271\n    if n == 58:\n        return 277\n    if n == 59:\n        return 281\n    if n == 60:\n        return 283\n    if n == 61:\n        return 293\n    if n == 62:\n        return 307\n    if n == 63:\n        return 311\n    if n == 64:\n        return 313\n    if n == 65:\n        return 317\n    if n == 66:\n        return 331\n    if n == 67:\n        return 337\n    if n == 68:\n        return 347\n    if n == 69:\n        return 349\n    if n == 70:\n        return 353\n    if n == 71:\n        return 359\n    if n == 72:\n        return 367\n    if n == 73:\n        return 373\n    if n == 74:\n        return 379\n    if n == 75:\n        return 383\n    if n == 76:\n        return 389\n    if n == 77:\n        return 397\n    if n == 78:\n        return 401\n    if n == 79:\n        return 409\n    if n == 80:\n        return 419\n    if n == 81:\n        return 421\n    if n == 82:\n        return 431\n    if n == 83:\n        return 433\n    if n == 84:\n        return 439\n    if n == 85:\n        return 443\n    if n == 86:\n        return 449\n    if n == 87:\n        return 457\n    if n == 88:\n        return 461\n    if n == 89:\n        return 463\n    if n == 90:\n        return 467\n    if n == 91:\n        return 479\n    if n == 92:\n        return 487\n    if n == 93:\n        return 491\n    if n == 94:\n        return 499\n    if n == 95:\n        return 503\n    if n == 96:\n        return 509\n    if n == 97:\n        return 521\n    if n == 98:\n        return 523\n    if n == 99:\n        return 541\n    if n == 100:\n        return 547\n    if n == 101:\n        return 557\n    if n == 102:\n        return 563\n    if n == 103:\n        return 569\n    if n == 104:\n        return 571\n    if n == 105:\n        return 577\n    if n == 106:\n        return 587\n    if n == 107:\n        return 593\n    if n == 108:\n        return 599\n    if n == 109:\n        return 601\n    if n == 110:\n        return 607\n    if n == 111:\n        return 613\n    if n == 112:\n        return 617\n    if n == 113:\n        return 619\n    if n == 114:\n        return 631\n    if n == 115:\n        return 641\n    if n == 116:\n        return 643\n    if n == 117:\n        return 647\n    if n == 118:\n        return 653\n    if n == 119:\n        return 659\n    if n == 120:\n        return 661\n    if n == 121:\n        return 673\n    if n == 122:\n        return 677\n    if n == 123:\n        return 683\n    if n == 124:\n        return 691\n    if n == 125:\n        return 701\n    if n == 126:\n        return 709\n    if n == 127:\n        return 719\n    if n == 128:\n        return 727\n    if n == 129:\n        return 733\n    if n == 130:\n        return 739\n    if n == 131:\n        return 743\n    if n == 132:\n        return 751\n    if n == 133:\n        return 757\n    if n == 134:\n        return 761\n    if n == 135:\n        return 769\n    if n == 136:\n        return 773\n    if n == 137:\n        return 787\n    if n == 138:\n        return 797\n    if n == 139:\n        return 809\n    if n == 140:\n        return 811\n    if n == 141:\n        return 821\n    if n == 142:\n        return 823\n    if n == 143:\n        return 827\n    if n == 144:\n        return 829\n    if n == 145:\n        return 839\n    if n == 146:\n        return 853\n    if n == 147:\n        return 857\n    if n == 148:\n        return 859\n    if n == 149:\n        return 863\n    if n == 150:\n        return 877\n    if n == 151:\n        return 881\n    if n == 152:\n        return 883\n    if n == 153:\n        return 887\n    if n == 154:\n        return 907\n    if n == 155:\n        return 911\n    if n == 156:\n        return 919\n    if n == 157:\n        return 929\n    if n == 158:\n        return 937\n    if n == 159:\n        return 941\n    if n == 160:\n        return 947\n    if n == 161:\n        return 953\n    if n == 162:\n        return 967\n    if n == 163:\n        return 971\n    if n == 164:\n        return 977\n    if n == 165:\n        return 983\n    if n == 166:\n        return 991\n    if n == 167:\n        return 997\n    if n == 168:\n        return 1009\n    if n == 169:\n        return 1013\n    if n == 170:\n        return 1019\n    if n == 171:\n        return 1021\n    if n == 172:\n        return 1031\n    if n == 173:\n        return 1033\n    if n == 174:\n        retur"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # the number of primes less than a number n\n    less_than_n = 0\n    # the number of primes less than n-1\n    less_than_n1 = 0\n    # the prime number of the index i-1\n    i_minus_one_prime = 1\n    # the number of prime numbers less than n\n    number_of_primes = 0\n    # the prime number of the index i\n    i_prime = 1\n    # check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 0:\n        return 2\n    \n    if n == 1:\n        return 3\n    \n    if n == 2:\n        return 5\n    \n    if n > 2:\n        if n % 2 == 0:\n            return 2\n        else:\n            return newman_prime(n - 1) + 2\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return \"Invalid Input\"\n    if n <= 2:\n        return 2\n    #Initialize a list of primes, P=[2]\n    P = [2]\n    #Initialized a list of odd numbers, L=[]\n    L = []\n    #Initialized a list of primes, P=[]\n    P = []\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of even numbers, L=[]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of primes, P=[2]\n    #Initialized a list of prime"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def _eratosthenes_sieve(n):\n        primes = list(range(n+1))\n        primes[1] = 0\n        for i in range(2, int(n**0.5) + 1):\n            if primes[i]:\n                for j in range(i+i, n+1, i):\n                    primes[j] = 0\n        return primes\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    q = n // 2\n    k = 0\n    p = 1\n    while True:\n        a = (p * p - q * q) // 2\n        b = 2 * p * q\n        c = (p * p - k * k) // 2\n        d = 2 * k * k\n        x = (a * a - b * d) // (c * c)\n        y = (a * a - c * d) // (b * b)\n        if x <= 0:\n            x += 1\n        elif y <= 0:\n            y += 1\n        if x <= y:\n            break\n        k += 1\n        p = x + y\n    return p\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize an array to store the prime numbers\n    sieve = [True] * n\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n    else:\n        phi = lambda x: x*(x-1)/2\n        p = phi(n)\n        for i in range(1,n+1):\n            if (pow(i,p-1,p)!= 1):\n                return (i-1)\n            elif (i == n):\n                return i\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    primes = []\n    a = 2\n    while len(primes) < n:\n        p = a\n        primes.append(p)\n        a += 1\n        while not is_prime(p):\n            p += 1\n            if p in primes:\n                break\n    return primes[n-1]\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    divisor = 3\n    while divisor ** 2 <= n:\n        if n % divisor == 0:\n            return False\n        divisor += 2\n    return True\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length.\")\n    result_list = []\n    for i in range(len(test_tup1)):\n        try:\n            result_list.append(test_tup1[i]/test_tup2[i])\n        except ZeroDivisionError:\n            result_list.append(float('inf'))\n    return tuple(result_list)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(i / j for i, j in zip(test_tup1, test_tup2))\n    \ndef division_elements_2(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(i / j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = []\n    new_tup2 = []\n    for x in test_tup1:\n        new_tup1.append(x/2)\n    for y in test_tup2:\n        new_tup2.append(y/3)\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(a/b for a,b in zip(test_tup1, test_tup2))\n    else:\n        raise ValueError('Tuple lengths do not match')\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(i / j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i, j in zip(test_tup1, test_tup2):\n        result.append(i/j)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup3 = ()\n    for num1, num2 in zip(test_tup1, test_tup2):\n        test_tup3 = test_tup3 + (num1 / num2,)\n    return test_tup3\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (tup1 // tup2)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = []\n    second_part = []\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1) or L < 1:\n        return None\n    else:\n        return list1[0:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts where the length of the first part is L.\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1) or L < 0:\n        return None\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # I need to use a while loop to loop until I have a length of list1 that is larger than L\n    # If I can't, I'll have to cut the list in half so I can have two parts of the same size\n    # My naive approach to this is to use the len() function to get the length of the list1 and then go through \n    # the list with a for loop until the length of the list1 is larger than L, then I cut the list in half\n    # and then assign the first part of the list to a new list, and the second part of the list to a new list\n    # In the end, I return a tuple of the two parts of the list\n    # I'm also going to use the append() function to add a number into the list,\n    # to check how many elements in the list are larger than the L\n    list1_size = len(list1)\n    if len(list1) > L:\n        half_list = int(list1_size / 2)\n        return list1[0:half_list], list1[half_list:list1_size]\n    else:\n        list2 = list1\n        return list1[0:L], list1[L:len(list1)]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts of equal length\n    # the length of the first part of the list is L\n    # return a tuple of both parts\n    list_length = len(list1)\n    half = L // 2\n    if list_length <= L:\n        return (list1, [])\n    return (list1[:half], list1[half:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split = len(list1)//2\n    print(len(list1))\n    print(split)\n    print(list1)\n    part1 = list1[0:split]\n    part2 = list1[split:]\n    print(part1)\n    print(part2)\n    print(part1, part2)\n    return part1, part2\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        return None\n    return ([list1[:L], list1[L:]])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age) == int:\n        if h_age <= 2:\n            return h_age * 10.5\n        else:\n            return 21 + (h_age - 2) * 4\n    else:\n        print('Wrong Input. Enter a number!')\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # print(h_age * 10.5)\n    return h_age * 10.5\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # dog_age = (human_age - (human_age % 10)) * 10.5\n    # return dog_age\n    # return (h_age - (h_age % 10)) * 10.5\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return 0\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if not isinstance(h_age, int):\n        raise TypeError('Not an integer')\n    if h_age < 0:\n        raise ValueError('Age can not be less than 0')\n    return (h_age * 10)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_year = h_age * 7\n    return dog_age_in_year\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == None:\n        return None\n    if type(h_age) not in [int, float]:\n        raise TypeError('Dog\\'s age must be a number')\n    if h_age < 0:\n        raise ValueError('Dog\\'s age must be positive')\n    return h_age * 7\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step > len(S):\n        return [[]]\n    else:\n        L = []\n        for i in range(0, len(S), step):\n            L.append(S[i:i+step])\n        return L\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i + step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        raise ValueError\n    if step == 1:\n        return S\n    lst = []\n    for i in range(0, len(S), step):\n        lst.append(S[i:i+step])\n    return lst\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    return None\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[x:x+step] for x in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = S\n    L_split = []\n    for x in range(0,len(L),step):\n        L_split.append(L[x:x+step])\n    return L_split\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_lists = []\n    i = 0\n    for x in range(0, len(S), step):\n        split_lists.append(S[x:x + step])\n    return split_lists\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for x in range(0, len(S), step):\n        new_list.append(S[x:x+step])\n    return new_list\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = l**2 * 6\n    print(\"The lateral surface area of a cube of side length {} is {}\".format(l,surface))\n    return\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l=int(input(\"Enter the side of the cube: \"))\n    print(l*6)\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    r=int(input(\"Enter the radius of the sphere: \"))\n    print(4*3.14*r**2)\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    r=int(input(\"Enter the radius of the cylinder: \"))\n    h=int(input(\"Enter the height of the cylinder: \"))\n    print(2*3.14*r*(r+h))\ndef surfacearea_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle given its base and height.\n    '''\n    b=int(input(\"Enter the base of the triangle: \"))\n    h=int(input(\"Enter the height of the triangle: \"))\n    print((1/2)*b*h)\ndef surfacearea_rectangle(b,h):\n    '''\n    Write a function to find the surface area of a rectangle given its base and height.\n    '''\n    b=int(input(\"Enter the base of the rectangle: \"))\n    h=int(input(\"Enter the height of the rectangle: \"))\n    print(b*h)\ndef surfacearea_square(s):\n    '''\n    Write a function to find the surface area of a square given its side length.\n    '''\n    s=int(input(\"Enter the side of the square: \"))\n    print(s*s)\ndef surfacearea_parallelogram(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram given its base and height.\n    '''\n    b=int(input(\"Enter the base of the parallelogram: \"))\n    h=int(input(\"Enter the height of the parallelogram: \"))\n    print(b*h)\ndef surfacearea_trapezium(b1,b2,h):\n    '''\n    Write a function to find the surface area of a trapezium given its base and heights.\n    '''\n    b1=int(input(\"Enter the base of the trapezium: \"))\n    b2=int(input(\"Enter the other base of the trapezium: \"))\n    h=int(input(\"Enter the height of the trapezium: \"))\n    print(((b1+b2)/2)*h)\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle given its radius.\n    '''\n    r=int(input(\"Enter the radius of the circle: \"))\n    print(3.14*r*r)\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given its radius.\n    '''\n    r=int(input(\"Enter the radius of the sphere: \"))\n    print(4*3.14*r*r)\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given its radius and height.\n    '''\n    r=int(input(\"Enter the radius of the cylinder: \"))\n    h=int(input(\"Enter the height of the cylinder: \"))\n    print(2*3.14*r*(r+h))\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given its radius and height.\n    '''\n    r=int(input(\"Enter the radius of the cone: \"))\n    h=int(input(\"Enter the height of the cone: \"))\n    print(3.14*r*(r+h))\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given its radius and height.\n    '''\n    r=int(input(\"Enter the radius of the cone: \"))\n    h=int(input(\"Enter the height of the cone: \"))\n    print(3.14*r*(r+h))\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle given its radius.\n    '''\n    r=int(input(\"Enter the radius of the circle: \"))\n    print(3.14*r*r)\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given its radius and height.\n    '''\n    r=int(input(\"Enter the radius of the cylinder: \"))\n    h=int(input(\"Enter the height of the cylinder: \"))\n    print(2*3.14*r*(r+h))\ndef surfacearea_cuboid(b,h,l):\n    '''\n    Write a function to find the surface area of a cuboid given its length, width, and height.\n    '''\n    b=int(input(\"Enter the length of the cuboid: \"))\n    h=int(input(\"Enter the width of the cuboid: \"))\n    l=int(input(\"Enter the height of the cuboid: \"))\n    print(2*b*h+2*b*l+2*h*l)\ndef surfacearea_pyramid(b,h):\n    '''\n    Write a function to find the surface area of a pyramid given its base and height.\n    '''\n    b=int(input(\"Enter the base of the pyramid: \"))\n    h=int(input(\"Enter the height of the pyramid: \"))\n    print(1/2*b*h)\ndef surfacearea_hexagon(s):\n    '''\n    Write a function to find the surface area of a hexagon given its side length.\n    '''\n    s=int(input(\"Enter the side of the hexagon: \"))\n    print(6*s*s)\ndef surfacearea_rectangle(b,h):\n    '''\n    Write a function to find the surface area of a rectangle given its base and height.\n    '''\n    b=int(input(\"Enter the base of the rectangle: \"))\n    h=int(input(\"Enter the height of the rectangle: \"))\n    print(b*h)\ndef surfacearea_square(s):\n    '''\n    Write a function to find the surface area of a square given its side length.\n    '''\n    s=int(input(\"Enter the side of the square: \"))\n    print(s*s)\ndef surfacearea_pentagon(s):\n    '''\n    Write a function to find the surface area of a pentagon given its side length.\n    '''\n    s=int(input(\"Enter the side of the pentagon: \"))\n    print(5*s*s)\ndef surfacearea_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle given its base and height.\n    '''\n    b=int(input(\"Enter the base of the triangle: \"))\n    h=int(input(\"Enter the height of the triangle: \"))\n    print(1/2*b*h)\ndef surfacearea_parallelogram(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram given its base and height.\n    '''\n    b=int(input(\"Enter the base of the parallelogram: \"))\n    h=int(input(\"Enter the height of the parallelogram: \"))\n    print(b*h)\ndef surfacearea_pentagon(s):\n    '''\n    Write a function to find the surface area of a pentagon given its side length.\n    '''\n    s=int(input(\"Enter the side of the pentagon: \"))\n    print(5*s*s)\ndef surfacearea_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle given its base and height.\n    '''\n    b=int(input(\"Enter the base of the triangle: \"))\n    h=int(input(\"Enter the height of the triangle: \"))\n    print(1/2*b*h)\ndef surfacearea_parallelogram(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram given its base and height.\n    ''"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side_length = l\n    lateral_surface_area = 6*side_length**2\n    return lateral_surface_area\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l*l\n    f = s*6\n    return f\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    side = l\n    \n    surface = 6 * side * side\n    \n    return surface\n    \n    \nprint(lateralsurface_cube(2))\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n    \n    \ndef lateralvolume_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return l**3\n    \n    \ndef lateralarea_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('l must be a float or int')\n    elif not l>=0:\n        raise ValueError('l must be a positive number')\n    else:\n        return 6*l**2\n        \n    \ndef lateral_surface_area(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if not isinstance(l,(float,int)):\n        raise TypeError('"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a=l*l\n    return a\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if isinstance(l, int) or isinstance(l, float):\n        if l > 0:\n            return 6*l**2\n        else:\n            return 0\n    else:\n        return \"Error: 'l' must be a positive real number.\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(1, n + 1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n+1,2):\n        sum += i**2\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # for i in range(1,n+1,2):\n    #     return (i*i)\n    return sum([i*i for i in range(1,n+1,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while (i <= n):\n        sum = sum + (i * i)\n        i += 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if(n>0):\n        sum = 0\n        for i in range(n):\n            sum += (i + 1)**2\n        return sum\n    else:\n        return 'Invalid Input'\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #constraints \n    #no more than 100 \n    #odd numbers \n    #no floats \n    if n > 100:\n        return 'limit is 100'\n    if n < 1:\n        return 'not a positive integer'\n    if n % 2 == 0:\n        return 'n must be odd'\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def square_Sum(n):\n        sum = 0\n        for i in range(n):\n            sum += (i+1)**2\n        return sum\n    return square_Sum(n)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(n)\n    squares = 0\n    for num in range(1, n + 1, 2):\n        squares += num * num\n    return squares\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = '5'\n    for i in range(n-1):\n        star_num += '4'\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = n - 1\n    def helper(n, stars, temp):\n        if n <= 0:\n            return stars\n        else:\n            temp.append(stars.pop(0))\n            return helper(n-1, stars, temp)\n    stars = [1,2,3,4,5]\n    temp = []\n    return helper(n, stars, temp)\n    \nprint(find_star_num(5))"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 0: return False\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    x, y = 1, 1\n    i = 1\n    while i!= n:\n        x, y = y, x + y\n        i += 1\n    return x\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    '''\n    A star number is an integer with a special property. \n    Suppose that the number m is a star number. \n    Then, m+m+1 = m*2. \n    Another way to say it is: m+1 = 2*m.\n    \n    The key point is that each number m in the sequence m+1 = 2*m is called a star number.\n    '''\n    \n    return n*(n+1)//2\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    star_num = []\n    \n    for i in range(n):\n        if i == 0:\n            star_num.append(1)\n        else:\n            star_num.append(star_num[i-1]+2*i+1)\n    \n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def find_star(n, nth):\n        if n == nth:\n            return '*'\n        elif n % 3 == 0 and find_star(n/3, nth) == '*':\n            return '*' * find_star(n/3, nth)\n        elif n % 3 == 1 and find_star(n+2, nth) == '*':\n            return '*' * find_star(n+2, nth)\n        else:\n            return '*' * find_star(n+1, nth)\n        return find_star(n, nth)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n*(4*n - 1)/2)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 0\n    num = 1\n    while star_num < n:\n        star_num = num*2\n        num += 1\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n -= 1\n    return n*(n+1)//2 + 1\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if(k >= 'a' and k <= 'z'):\n        return ord(k) - ord('a')\n    if(k >= 'A' and k <= 'Z'):\n        return ord(k) - ord('A') + 26\n    else:\n        return -1\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    #print(ord(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isupper():\n        return ord(k) - 64\n    return ord(k) - 96\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for index, item in enumerate(arr):\n        if index % 2 == 0 and item % 2 == 0:\n            even_sum += item\n    return even_sum\nprint(sum_even_and_even_index([1,2,3,4,5,6]))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([i for i, x in enumerate(arr) if x % 2 == 0 and i % 2 == 0])\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) <= 0: return 0\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    i = 0\n    j = 0\n    for a in arr:\n        if a % 2 == 0 and i % 2 == 0:\n            i += a\n        elif a % 2 == 0 and j % 2!= 0:\n            j += a\n    return j\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for x in range(len(arr)):\n        if x % 2 == 0 and arr[x] % 2 == 0:\n            sum += arr[x]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    for i in arr:\n        if arr.index(i) % 2 == 0:\n            if i % 2 == 0:\n                sum_of_even_even += i\n    return sum_of_even_even\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum_even = sum_even + arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if arr == []:\n        return 0\n    else:\n        sum = 0\n        for i in range(len(arr)):\n            if i % 2 == 0 and arr[i] % 2 == 0:\n                sum += arr[i]\n        return sum\n        \nprint(sum_even_and_even_index([]))\nprint(sum_even_and_even_index([1, 2, 3, 4, 5]))\nprint(sum_even_and_even_index([1, 2, 3, 4, 5, 6]))\nprint(sum_even_and_even_index([0, 2, 4, 6, 8, 10]))\nprint(sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sum_even_and_even_index([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for x in range(1, n+1):\n        if x%2 == 0:\n            sum += x**5\n    return sum\ndef read_File(file_name):\n    '''\n    Write a python function that reads in a file containing a sequence of integers and finds the average of the last three numbers in the file, \n    and prints out a statement of this average.\n    '''\n    f = open(file_name, 'r')\n    total = 0\n    for line in f:\n        line = line.strip()\n        total += int(line)\n    f.close()\n    average = total/3\n    print(\"The average of the last three numbers in the file is \" + str(average))\n    return\ndef prime_Factor(n):\n    '''\n    Write a Python function to find the prime factorization of a number\n    '''\n    factor_list = []\n    for num in range(1, n+1):\n        if n % num == 0:\n            factor_list.append(num)\n    return factor_list\ndef read_File(file_name):\n    '''\n    Write a Python function to read a file containing a sequence of integers, and print the sequence in a neat manner.\n    '''\n    f = open(file_name, 'r')\n    for line in f:\n        line = line.strip()\n        print(line)\n    return\ndef count_Even_Numbers(n):\n    '''\n    Write a Python program to count the number of even and odd numbers in a sequence of numbers.\n    '''\n    odd_count = 0\n    even_count = 0\n    for x in range(n+1):\n        if x%2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count, even_count\ndef sum_Sequence(n):\n    '''\n    Write a Python function to return the sum of the first n numbers of a sequence.\n    '''\n    sum = 0\n    for x in range(n+1):\n        sum += x\n    return sum\ndef number_In_Nth_Row_Pascal_Triangle(n):\n    '''\n    Write a Python program to generate the Nth row of Pascal's triangle\n    '''\n    pascal_list = []\n    for x in range(0, n+1):\n        pascal_list.append([])\n        for y in range(0, x+1):\n            if y == 0 or y == x:\n                pascal_list[x].append(1)\n            else:\n                pascal_list[x].append(pascal_list[x-1][y-1] + pascal_list[x-1][y])\n    return pascal_list[n]\ndef fibonacci_Sequence(n):\n    '''\n    Write a Python program to print the Fibonacci sequence up to n.\n    '''\n    a = 0\n    b = 1\n    for x in range(0, n+1):\n        print(a)\n        temp = b\n        b = a+b\n        a = temp\n    return\ndef fibonacci_Sequence_Iterative(n):\n    '''\n    Write a Python program to print the Fibonacci sequence up to n, using a loop.\n    '''\n    a = 0\n    b = 1\n    for x in range(0, n+1):\n        print(a)\n        a, b = b, a+b\n    return\ndef max_Length_Sublist(lst):\n    '''\n    Write a Python program to find the maximum length of a sublist of a given list\n    '''\n    max_list = []\n    for x in range(0, len(lst)+1):\n        temp_list = lst[x:x+3]\n        max_list.append(temp_list)\n    print(max_list)\n    return max(max_list, key=len)\ndef max_Length_Sublist_Iterative(lst):\n    '''\n    Write a Python program to find the maximum length of a sublist of a given list using an iterative approach.\n    '''\n    max_list = []\n    for x in range(0, len(lst)+1):\n        max_list.append([])\n        for y in range(x, x+3):\n            max_list[x].append(lst[y])\n    print(max_list)\n    return max(max_list, key=len)\ndef find_Occurrences(text, phrase):\n    '''\n    Write a Python program to find the number of occurrences of a substring in a string\n    '''\n    count = 0\n    for x in range(0, len(text)):\n        if text[x:x+len(phrase)] == phrase:\n            count += 1\n    return count\ndef find_Occurrences_Iterative(text, phrase):\n    '''\n    Write a Python program to find the number of occurrences of a substring in a string, using a loop\n    '''\n    count = 0\n    for x in range(0, len(text)):\n        if text[x:x+len(phrase)] == phrase:\n            count += 1\n    return count\ndef read_File(file_name):\n    '''\n    Write a Python program to read a file line by line into a list and print it.\n    '''\n    f = open(file_name, 'r')\n    text_list = []\n    for line in f:\n        text_list.append(line)\n    return text_list\ndef read_File(file_name):\n    '''\n    Write a Python program to read a file line by line into a list and print it.\n    '''\n    f = open(file_name, 'r')\n    for line in f:\n        print(line)\n    return\ndef remove_Characters(text, phrase):\n    '''\n    Write a Python program to remove a substring from a string.\n    '''\n    text = text.replace(phrase, \"\")\n    return text\ndef remove_Characters_Iterative(text, phrase):\n    '''\n    Write a Python program to remove a substring from a string, using a loop.\n    '''\n    for x in range(0, len(text)):\n        if text[x:x+len(phrase)] == phrase:\n            text = text[0:x] + text[x+len(phrase):]\n    return text\ndef match_Words_At_End(words_list):\n    '''\n    Write a Python program to print the list of words that end with a given letter in a sentence.\n    '''\n    word_list = []\n    for word in words_list:\n        if word[-1:] =='s':\n            word_list.append(word)\n    return word_list\ndef match_Words_At_End_Iterative(words_list):\n    '''\n    Write a Python program to print the list of words that end with a given letter in a sentence.\n    '''\n    word_list = []\n    for word in words_list:\n        if word[-1:] =='s':\n            word_list.append(word)\n    for x in range(0, len(word_list)):\n        word_list[x] = words_list[x][0:len(words_list[x])-1]\n    return word_list\ndef find_Roots(x, y):\n    '''\n    Write a Python program to find the roots of a quadratic equation\n    '''\n    a = 1\n    b = 2\n    c = -1\n    quad_eq = a*x**2 + b*x + c\n    quad_eq_roots = [(-b + math.sqrt(b**2 - 4*a*c))/(2*a), (-b - math.sqrt(b**2 - 4*a*c))/(2*a)]\n    return quad_eq_roots\ndef find_Roots_Iterative(x, y):\n    '''\n    Write a Python program to find the roots of a quadratic equation using a loop.\n    '''\n    a = 1\n    b = 2\n    c = -1\n    while a == 1:\n        quad_eq = a*x**2 + b*x + c\n        quad_eq_roots = [(-b + math.sqrt(b**2 - 4*a*c))/(2*a), (-b "
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    powers = [i**5 for i in range(1,n+1)]\n    return sum(powers)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # base case\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return (n ** 5) + even_Power_Sum(n - 1)\n    if n % 2!= 0:\n        return even_Power_Sum(n - 1)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([(i**5) for i in range(1, n+1) if (i % 2) == 0])\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            total+=i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # YOUR CODE HERE\n    sum = 0\n    for x in range(1, n+1):\n        if x**5 % 2 == 0:\n            sum = sum + x**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    '''\n    EXAMPLE:\n    Input: n = 5\n    Output: 5**5 + 5**4 + 4**5 + 4**4 + 2**5 + 2**4 + 1**5 + 1**4 + 0**5 + 0**4 = 87\n    '''\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_Power_Sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            even_Power_Sum += i**5\n    return even_Power_Sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([(2**i)**5 for i in range(n)])\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #Base case:\n    if n == 0:\n        return 0\n    #Recursive case:\n    else:\n        return (n**5 + even_Power_Sum(n-1))\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [el[-1] for el in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_of_rears = []\n    for tup in test_list:\n        list_of_rears.append(tup[1])\n    return list_of_rears\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_tuple[1] for test_tuple in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_tuple[1] for test_tuple in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x: x[1], test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for t in test_list:\n        result_list.append(t[1])\n    return result_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(0, len(test_list)):\n        rear_elements.append(test_list[i][1])\n    return rear_elements\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = (1, 3, 4, 5, 6, 7, 8, 9)\n    test_tup2 = (4, 5, 6)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of the same size\")\n    else:\n        new_tup = ()\n        for idx in range(len(test_tup1)):\n            new_tup += (test_tup1[idx] - test_tup2[idx],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = (4, 8, -5, 9, 2)\n    test_tup2 = (8, 7, -3, 1, -9)\n    test_tup3 = ()\n    test_tup4 = (0, 2, -3, 4, 5)\n    test_tup5 = (3, 4, 5, 6, 7)\n    test_tup6 = (3, 4, 5, 6, 7, 8, 9, 10, 11)\n    def sub(t1, t2):\n        total = 0\n        for i, j in zip(t1, t2):\n            total += i - j\n        return total\n    return sub(test_tup1, test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"The tuples do not have the same length\")\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(0, len(test_tup1))])\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(ele1 - ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        return tuple(map(substract, test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Ex: (1, 1, 2, 3) - (2, 4) = (1, 1, 0, 3)\n    # Ex: (3, 4, 5, 6, 7) - (4, 5, 6, 7, 8) = (3, 3, 3, 3, 3)\n    result_tup = ()\n    for idx, num in enumerate(test_tup1):\n        result_tup = result_tup + (num - test_tup2[idx],)\n    return result_tup\n    # return tuple([x-y for x,y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n    else:\n        raise ValueError('tuple lengths do not match')\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total=0\n    for i in range(n+1):\n        if i%2==0:\n            total+=binomialCoeff(i,n)\n    return total\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Base case:\n    if n == 0:\n        return 0\n    \n    # Recursive step:\n    else:\n        return n + even_binomial_Coeff_Sum( n - 1)\n    \ndef Fibonacci_Number_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the first n Fibonacci numbers.\n    '''\n    \n    # Base case:\n    if n == 0:\n        return 0\n    \n    # Recursive step:\n    else:\n        return n + Fibonacci_Number_Sum( n - 1)\n        \ndef Fibonacci_Number_Sum_Sequence( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the Fibonacci number sequence of the first n terms.\n    '''\n    \n    # Base case:\n    if n == 0:\n        return [0]\n    \n    # Recursive step:\n    else:\n        result = [0, 1]\n        for i in range(n - 1):\n            result.append( result[-2] + result[-1])\n        return result\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + even_binomial_Coeff_Sum(n - 2) \n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n):\n        s += math.factorial(2*i)/(math.factorial(i) * math.factorial(i + 1))\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # array to store the binomial coeffients of even terms\n    binomial_coeffs = [0]*(n+1)\n    # first entry of binomial coefficient is 1, so the first index is 0\n    binomial_coeffs[0] = 1\n    # initialize sum\n    sum = 1\n    # iterate over even index terms and calculate the binomial coefficients\n    for i in range(1,n+1):\n        if(i%2==0):\n            binomial_coeffs[i] = i*(i-1)*binomial_coeffs[i-2]\n    # for even terms\n    for i in range(2,n+1):\n        sum = sum + binomial_coeffs[i-1]\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    \n    \n    sum = 0\n    for i in range(n+1):\n        if i%2==0:\n            sum+=math.factorial(n)/(math.factorial(i) * math.factorial(n-i))\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #declaring an array and initializing it with zeroes\n    coeff_sum = [0]*(n+1)\n    #initializing the sum of even index binomial coefficients to 0\n    coeff_sum[0] = 0\n    #loop from 2 to n\n    for i in range(2, n+1):\n        #calculating even index binomial coefficients using recursion\n        coeff_sum[i] = coeff_sum[i-1] + i*(coeff_sum[i-2])\n    #returning sum of even index binomial coefficients\n    return coeff_sum[n]\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # the sum of the even index binomial coefficients starts at 2 \n    even_binomial_Coeff_Sum = 2\n    # you need to loop from 3 to n + 1 (n is included in the range) \n    for i in range(3,n+1):\n        # if the index is even \n        if (i % 2 == 0):\n            # you multiply the even index binomial coefficients with the value of the previous even index binomial coefficients\n            # and add them to the previous even binomial coefficient sum\n            even_binomial_Coeff_Sum += i * (i - 1) * (2 * i - 1)\n    return even_binomial_Coeff_Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    return ( math.factorial(n) // ( math.factorial(2) * math.factorial(n - 2) ) )\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coefficient( n, k): \n        res = 1 \n        if (k > n - k): \n            k = n - k \n        for i in range(0, k): \n            res = res * (n - i) \n            res = res // (i + 1) \n        return res \n    return sum([binomial_coefficient( n, i) if i%2==0 else 0 for i in range(n+1)]) \n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14 * r**2) * h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    pi = math.pi\n    return pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.14\n    return pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265\n    volume = pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.1415926535897932\n    v = (pi*(r**2)*h)\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume = (pi*(r**2)*h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #pass\n    pi = 3.14\n    return pi * r * r * h\n    "
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * (r ** 2) * h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14*(r**2)*h)\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value>=n}\n    #we use dict comprehension to filter out the values that are less than n\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filtered = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            dict_filtered[key] = dict[key]\n    return dict_filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d={k:v for k,v in dict.items() if v >=n}\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {k:v for k,v in dict.items() if v >=n}\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #{key:value for key,value in dict.items() if value>=n}\n    return {key:value for key,value in dict.items() if value>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = dict.copy()\n    for key in dict:\n        if dict[key] < n:\n            new_dict.pop(key)\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = ('H', 1, 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd')\n    for i in range(len(test_tup)):\n        first_ele = test_tup[i]\n        first_ele_count = 0\n        for j in range(len(test_tup)):\n            if test_tup[j] == first_ele:\n                first_ele_count += 1\n        if i == 0:\n            print('{} occured {} times.'.format(first_ele, first_ele_count))\n        else:\n            print('{} occured {} times'.format(first_ele, first_ele_count), end=' ')\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return sum(1 for i in range(len(test_tup)) if test_tup[i] == (1,1,1))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = (1,2,4,5,2,1,4,3,3,4,2,2,2,1)\n    cnt = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            cnt += 1\n        else:\n            break\n    return cnt\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for item in test_tup:\n        if isinstance(item, tuple):\n            count += 1\n            break\n        else:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == 0:\n            break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 1\n    prev = test_tup[0]\n    for i in test_tup[1:]:\n        if i == prev:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # code goes here\n    return (len(test_tup) - 1 - test_tup.index(test_tup[-1]))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for idx in range(len(test_tup)):\n        if test_tup[idx] == test_tup[0]:\n            count += 1\n    return count\n    \nprint(count_first_elements((1, 2, 3, 1, 4, 1, 1, 5, 1, 1, 1, 1, 1))) # 0\nprint(count_first_elements((2, 4, 3, 2, 1, 4, 5, 2, 2, 5, 2, 4, 2, 2, 4, 3, 2, 1))) # 6\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(9*n-9)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n -= 1\n    return int(n*(3*n+1)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(10*n - 9))//2\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    m = 1\n    while(m < n):\n        m *= 10\n    m -= 1\n    return sum([x for x in range(m + 1, m + n)])\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0: \n        return False\n    num = 1\n    dec = 0\n    while (dec < n): \n        num = num + 1\n        dec = num + 9*num\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum(i for i in range(1, n+1))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (n + 9))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    from math import log\n    import fractions\n    \n    return int(n*(3*n - 1)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d = 1\n    for i in range(1, n+1): \n        d = d * 10 + 1\n    return d\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def factorial(n):\n        '''\n        Return n!\n        '''\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return (found, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # iterate over the items in the list\n    # find the element we are searching for\n    # return a tuple: True or False and the index of the element\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    length = len(dlist)\n    index = 0\n    is_found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    return (index >= 0, index)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print(test_list)\n    print(\"All elements in the list are unique\") if len(test_list) == len(set(test_list)) else print(\"Not all elements in the list are unique\")\n    return\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_set = set(test_list)\n    return len(test_list) == len(temp_set)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # To check if the elements of the list are unique or not, \n    # we create an empty list and then for every element in the test list we append it \n    # to the empty list if it is not already present in the list, after which if the list \n    # has more than one element, the function returns False, else it returns True.\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n        else:\n            return False\n    if len(unique_list) > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_list = []\n    for i in test_list:\n        if i not in temp_list:\n            temp_list.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # List comprehension\n    print(all([(test_list.count(item) == 1) for item in set(test_list)]))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    try:\n        unique = []\n        for i in test_list:\n            if i not in unique:\n                unique.append(i)\n            else:\n                return False\n        return True\n    except Exception as e:\n        print(\"Error: {}\".format(e))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #Approach 1: using set() and list comprehension\n    #return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    s = set(test_list)\n    return len(s) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print(\"Entered function: all_unique()\")\n    test_list.sort()\n    for i in range(0, len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            print(\"The list doesn't contain unique elements\")\n            return False\n    print(\"The list contains unique elements\")\n    return True\n    \n    \ndef largest_number(test_list):\n    '''\n    Write a python function to find the largest element in a given list.\n    '''\n    print(\"Entered function: largest_number()\")\n    test_list.sort()\n    print(test_list[-1])\n    return test_list[-1]\n    \n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list=[]\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = nums1[:]\n    nums2 = nums2[:]\n    for x in nums2:\n        nums1.remove(x)\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert(len(nums1) == len(nums2))\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result=[]\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\nprint(sub_list([1,2,3,4],[1,2,3,4]))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums2)):\n        nums1[i] -= nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for n1,n2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    a=[]\n    for i in range(0,len(nums1)):\n        a.append(nums1[i]-nums2[i])\n    return a\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = '0123456789'\n    # Check if n is a positive integer\n    if n < 1: \n        return False\n    # Check if n has repeated digits\n    for i in digits:\n        if digits.count(i) > n:\n            return False\n    # Check if n only has digits 0-9\n    for i in str(n):\n        if i not in digits:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) == 1: \n        return False\n    count = {}\n    for i in str(n):\n        if i in count:\n            count[i] += 1\n        else: \n            count[i] = 1\n    for i in count:\n        if count[i] > int(i): \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    n = str(n)\n    freq = {\n        '1': 0, \n        '2': 0, \n        '3': 0, \n        '4': 0, \n        '5': 0, \n        '6': 0, \n        '7': 0, \n        '8': 0, \n        '9': 0\n    }\n    for i in n:\n        freq[i] += 1\n    for i in freq.values():\n        if i > int(i):\n            return False\n    return True\n    \ndef diff21(n):\n    '''\n    Write a python function that takes in a number and returns the difference between the sum of the first and last digits of the number.\n    '''\n    n = str(n)\n    return abs(sum(map(int, n[0])) - sum(map(int, n[-1])))\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0:\n        raise ValueError(\"Negative numbers are not allowed\")\n    if n == 0:\n        return True\n    counter = dict()\n    for i in str(n):\n        if counter.get(i, None) is None:\n            counter[i] = 1\n        elif counter[i] < int(i):\n            return False\n        else:\n            counter[i] = counter[i]+1\n    return True\n        \nprint(validate(123412))\nprint(validate(9999999999))\nprint(validate(989998))\nprint(validate(4))\nprint(validate(0))\nprint(validate(-1))\nprint(validate(-2))"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len(set(str(n)))==len(str(n))\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    freq = {}\n    for i in n:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for k in freq.keys():\n        if freq[k] > int(k):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    mapping = {str(i) : 0 for i in range(0, 10)}\n    if len(str(n)) == 1:\n        return True\n    for digit in str(n):\n        mapping[digit] += 1\n    for key, value in mapping.items():\n        if int(key) > value:\n            return False\n    return True\ndef frequencySort(n):\n    '''\n    Write a python function takes in an integer n and sort the digits in it in ascending order using the frequency of the digits. If two or more digits have the same frequency, they should be sorted in ascending order.\n    '''\n    mapping = {str(i) : 0 for i in range(0, 10)}\n    nums = [int(i) for i in str(n)]\n    if len(str(n)) == 1:\n        return n\n    for digit in str(n):\n        mapping[digit] += 1\n    return ''.join(sorted(str(n), key = lambda x: (mapping[x], x)))\ndef kangaroo(x1, v1, x2, v2):\n    '''\n    Given the same x-axis values for two kangaroos and their respective speeds. Determine if the kangaroos meet. If they meet, return x-axis values of the meeting point.\n    '''\n    if v1 > v2:\n        if x1 - x2 < 0 and x1 - x2 > -(v2 - v1):\n            return x1 - x2\n    elif v1 < v2:\n        if x2 - x1 < 0 and x2 - x1 > -(v1 - v2):\n            return x2 - x1\n    else:\n        return x1 - x2\ndef findPerm(n):\n    '''\n    Write a python function which takes in an integer n and return all the permutations of its digits.\n    '''\n    if len(str(n)) == 1:\n        return [n]\n    res = []\n    for i in range(len(str(n))):\n        for j in findPerm(n % 10):\n            res.append(int(str(n)[i] + str(j)))\n        n = n // 10\n    return res\ndef isPrime(n):\n    '''\n    Write a python function which takes in an integer n and return True if it is a prime number, return False otherwise.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef spiralPrimes(n):\n    '''\n    Write a python function which takes in an integer n and returns the sum of all the prime numbers in the first n rows of the following square matrix:\n    '''\n    if n < 1:\n        return 0\n    def generateMatrix(n):\n        matrix = [[0 for i in range(n)] for j in range(n)]\n        numberOfPrimes = 0\n        numberOfPrimesInRow = 0\n        row = 0\n        column = 0\n        if n % 2 == 0:\n            matrix[n // 2][n // 2] = 2\n            numberOfPrimesInRow += 1\n            numberOfPrimes += 1\n        for currentNumber in range(3, n * n + 1, 2):\n            if isPrime(currentNumber):\n                numberOfPrimes += 1\n                numberOfPrimesInRow += 1\n                matrix[row][column] = currentNumber\n                if column + 1 < n - numberOfPrimesInRow and row + 1 < n - numberOfPrimesInRow:\n                    column += 1\n                else:\n                    if column + 1 < n - numberOfPrimesInRow:\n                        row += 1\n                    else:\n                        row -= 1\n                        column -= 1\n        return matrix, numberOfPrimes\n    matrix = generateMatrix(n)\n    return sum([sum(row) for row in matrix[0]]) - (n ** 2 - matrix[1])\ndef reverseArray(n):\n    '''\n    Write a python function which takes in an array of integers and returns the array of integers in reverse order.\n    '''\n    return n[::-1]\ndef findMissing(n):\n    '''\n    Write a python function which takes in a list of integers and return a list of integers which contains all the elements of the list in ascending order but the one missing in the original list.\n    '''\n    n.sort()\n    return [n[0]] + [i + 1 for i in range(1, len(n)) if n[i] - n[i - 1] > 1] + [n[-1] + 1]\ndef minRemove(n, s):\n    '''\n    Write a python function which takes in an array of integers, removes all the occurrences of that array element that are present in another array. If the same number appears in both arrays, the function should remove one of them.\n    '''\n    toRemove = []\n    for i in s:\n        if n.count(i) > 1:\n            toRemove.append(i)\n    for i in s:\n        if n.count(i) > 1:\n            n = [i for j in n if j!= i]\n    for i in toRemove:\n        n.remove(i)\n    return n\ndef arrayReplace(n):\n    '''\n    Write a python function which takes in an array of integers, replace all the occurrences of that array element that are greater than the integer length of the array with the array element minus the length of the array.\n    '''\n    return [i - len(n) if i > len(n) else i for i in n]\ndef singleNumber(n):\n    '''\n    Write a python function which takes in an array of integers and returns the sum of all the unique elements of the array.\n    '''\n    return sum(set(n))\ndef distinctPowers(x, n):\n    '''\n    Write a python function which takes in an integer x and an integer n. Return the sum of all distinct powers of x smaller than n.\n    '''\n    powers = []\n    for i in range(1, n + 1):\n        powers.append(x ** i)\n    return sum(list(set(powers)))\ndef isHappy(n):\n    '''\n    Write a python function which takes in an integer and returns True if the integer is a happy number, return False otherwise.\n    '''\n    if n == 1:\n        return True\n    res = n\n    while True:\n        res = sum([int(i) ** 2 for i in str(res)])\n        if res == 1:\n            return True\n        elif res == 4:\n            return False\ndef isHappy2(n):\n    '''\n    Write a python function which takes in an integer and return True if the integer is a happy number, return False otherwise.\n    '''\n    def getNext(n):\n        total = 0\n        while n > 0:\n            n, digit = divmod(n, 10)\n            total += digit ** 2\n        return total\n    return getNext(n)!= 1\ndef largestNumber(n):\n    '''\n    Write a python function which takes in an array of integers and returns the lexicographically largest permutation of the array.\n    '''\n    def getPermutation(n, start, end):\n        if start == end:\n            return n\n        elif start < end:\n            for i in range(start, end + 1):\n                n[i], n[start] = n[start], n[i]\n                if getPermutation(n, start + 1, end) is not None:\n                    return n\n                n[i], n[start] = n[start], n[i]\n        return None\n    return ''.join([str(i) for i in getPermutation(n, 0, len(n) - 1)])\ndef largestNumber2(n):\n    '''\n    Write a python function which takes in an array of integers and returns the lexicographically largest permutation of the array.\n    '''\n    def getPermutation(n, start, end):\n        if start == end:\n            return [n[start]]\n        elif start < end:\n            largest = 0\n            for i in range(start, end + 1):\n                num = getPermutation(n, start + 1, en"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str_num = str(n)\n    dict_num = {}\n    for i in str_num:\n        if i in dict_num:\n            dict_num[i] += 1\n        else:\n            dict_num[i] = 1\n    \n    for key in dict_num:\n        if dict_num[key] > int(key):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n))!= len(set(str(n))):\n        return False\n    for digit in str(n):\n        if int(digit) > len(str(n)):\n            return False\n        elif int(digit) > int(digit):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len(set(str(n))) == len(str(n))\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[x] == element for x in range(len(list)))\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #list = [1, 1, 1]\n    #element = 1\n    if len(list) == 0:\n        return False\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    flag=0\n    for i in list:\n        if i==element:\n            flag=1\n        else:\n            flag=0\n            break\n    if flag==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for num in list:\n        if num!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    if list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'ab{2,3}'\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('(a.*?b){2,3}',text):\n        print('it does!')\n    else:\n        print('nope')\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(\"a.{2}b|a.{3}b\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.findall(r\"ab{2,3}\",text)\n    return result\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(\"ab{2,3}\", text)\n    return match!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    print(re.match('[ab][ab]',text))\ndef text_is_pangram(text):\n    '''\n    Write a function that takes a sentence and returns True if it is a pangram, False if it is not. Assume the sentence will be given as a string and that it has no punctuation.\n    '''\n    print(re.match('^[A-Za-z]+$',text))\ndef text_match_one_or_more_repetitions(text):\n    '''\n    Write a function that checks whether a string contains only a single repeated character.\n    '''\n    print(re.match('^[a-zA-Z0-9]*(?:[a-zA-Z0-9])\\\\1+$',text))\ndef text_match_any_character(text):\n    '''\n    Write a function that matches a string that has any character repeated anywhere in the string\n    '''\n    print(re.match('^.*[a-zA-Z0-9].*$',text))\ndef text_match_a_or_b(text):\n    '''\n    Write a function that matches a string that has only a, or only b.\n    '''\n    print(re.match('^[a|b]',text))\ndef text_match_start_end_letter(text):\n    '''\n    Write a function that matches a string that has a, b, or c as its first character, and the same as the last character.\n    '''\n    print(re.match('^[a|b|c]*[a|b|c]$',text))\ndef text_match_a_or_b_any_number_of_times(text):\n    '''\n    Write a function that matches a string that has a, b, or c, any number of times, followed by a, b, or c.\n    '''\n    print(re.match('^[a|b|c]*[a|b|c]$',text))\ndef text_match_a_or_b_any_number_of_times_any_number_of_times(text):\n    '''\n    Write a function that matches a string that has a, b, or c, any number of times, followed by any number of times, followed by a, b, or c.\n    '''\n    print(re.match('^[a|b|c]*[a|b|c]*[a|b|c]*[a|b|c]*[a|b|c]*[a|b|c]$',text))\ndef text_match_a_followed_by_b(text):\n    '''\n    Write a function that matches a string that has an a followed by a b.\n    '''\n    print(re.match('^a[b|a]*$',text))\ndef text_match_a_followed_by_b_or_c_or_d(text):\n    '''\n    Write a function that matches a string that has an a followed by a b, followed by a c, followed by a d.\n    '''\n    print(re.match('^a[b|a|c|d]*$',text))\ndef text_match_a_or_b_or_c_or_d_or_e(text):\n    '''\n    Write a function that matches a string that has only one of the characters a, b, c, d, or e.\n    '''\n    print(re.match('^[a|b|c|d|e]$',text))\ndef text_match_a_or_b_or_c_or_d_or_e_any_number_of_times(text):\n    '''\n    Write a function that matches a string that has a, b, c, d, or e, any number of times.\n    '''\n    print(re.match('^[a|b|c|d|e]*[a|b|c|d|e]$',text))\ndef text_match_a_or_b_or_c_or_d_or_e_any_number_of_times_any_number_of_times(text):\n    '''\n    Write a function that matches a string that has only one of the characters a, b, c, d, or e, any number of times, followed by any number of times, followed by only one of the characters a, b, c, d, or e.\n    '''\n    print(re.match('^[a|b|c|d|e]*[a|b|c|d|e]*[a|b|c|d|e]*[a|b|c|d|e]*$',text))\ndef text_match_a_or_b_or_c_or_d_or_e_a_followed_by_any_number_of_times_a_followed_by_b(text):\n    '''\n    Write a function that matches a string that has only one of the characters a, b, c, d, or e, followed by any number of times, followed by a, followed by any number of times, followed by b.\n    '''\n    print(re.match('^[a|b|c|d|e]*[a|b|c|d|e]*[a|b|c|d|e]*[a|b|c|d|e]*[a]*[a|b|c|d|e]*[a|b|c|d|e]*[a|b|c|d|e]*[b]*[a|b|c|d|e]*$',text))\ndef text_match_a_or_b_or_c_or_d_or_e_a_followed_by_any_number_of_times_a_followed_by_b_or_c(text):\n    '''\n    Write a function that matches a string that has only one of the characters a, b, c, d, or e, followed by any number of times, followed by a, followed by any number of times, followed by b, followed by any number of times, followed by c.\n    '''\n    print(re.match('^[a|b|c|d|e]*[a|b|c|d|e]*[a|b|c|d|e]*[a|b|c|d|e]*[a]*[a|b|c|d|e]*[a|b|c|d|e]*[a|b|c|d|e]*[b]*[a|b|c|d|e]*[c]*[a|b|c|d|e]*$',text))\ndef text_match_a_or_b_or_c_or_d_or_e_a_followed_by_any_number_of_times_a_followed_by_b_or_c_or_d_or_e(text):\n    '''\n    Write a function that matches a string that has only one of the characters a, b, c, d, or e, followed by any number of times, followed by a, followed by any number of times, followed by b, followed by any number of times, followed by c, followed by any number of times, followed by d, followed by any number of times, followed by e.\n    '''\n    print(re.match('^[a|b|c|d|e]*[a|b|c|d|e]*[a|b|c|d|e]*[a|b|c|d|e]*[a]*[a|b|c|d|e]*[a|b|c|d|e]*[a|b|c|d|e]*[b]*[a|b|c|d|e]*[c]*[a|b|c|d|e]*[d]*[a|b|c|d|e]*[e]*[a|b|c|d|e]*$',text))\ndef text_match_a_or_b_or_c_or_d_or_e_a_followed_by_any_number_of_times_a_followed_by_b_or_c_or_d_or_e_b_followed_by_any_number_of_times_b_followed_by_c_o"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.find('ab')!= -1 and text.find('abab') == -1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search('ab{2,3}', text)\n    return match!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2}|ab{3}')\n    if pattern.search(text):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    match=re.match(r'a.{2,3}b*',text)\n    \n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if i % k == k - 1:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # code here\n    sub = []\n    c = 0\n    for i in range(n):\n        c = c + a[i]\n        sub.append(c)\n        \n    for j in range(k - 1):\n        \n        for i in range(1, n):\n            c = sub[i] - sub[i - 1]\n            sub[i] = c\n            \n    return max(sub)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize result\n    max_sum = 0\n    \n    # Compute sum of first window of size k \n    s = 0\n    for i in range(k): \n        s += a[i] \n    \n    # Compute maximum sum subarray of a[0..n-k] \n    # which is also repeated k times \n    s = max(s, max_sum) \n    max_sum = s \n    \n    # Compute sum of remaining windows by \n    # removing first element of previous \n    # window and adding last element of \n    # current window. \n    for i in range(k, n): \n        s += a[i] - a[i-k] \n        s = max(s, max_sum) \n        max_sum = s \n    \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the result.\n    max_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_value = 0\n    max_value = -float('inf')\n    for i in range(0, n*k):\n        sum_value += a[i%n]\n        max_value = max(max_value, sum_value)\n        if sum_value < 0:\n            sum_value = 0\n    return max_value\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0: \n        return 0\n    max_sum = -sys.maxsize \n    max_ending_here = 0\n    for i in range(0, n * k): \n        max_ending_here += a[i % n] \n        if max_sum < max_ending_here: \n            max_sum = max_ending_here \n        if max_ending_here < 0: \n            max_ending_here = 0\n    return max_sum \n    \na = [1, -2, 2, -3, 3, -1, 1] \nprint(max_sub_array_sum_repeated(a, len(a), 2))\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the largest subarray of a in which the number of occurrences of each element is atleast k.\n    if(n == 0): \n        return 0\n    # Initialize the count array and sum \n    count = [0] * (10**5+1) \n    curr_sum = 0\n    # Count the occurrence of each element and store in count array \n    for i in range(n): \n        count[a[i]] += 1\n    # Replace each occurrence of a number with k consecutive occurrences of that number \n    for i in range(n): \n        if (count[a[i]] >= k): \n            curr_sum += a[i] * k\n        else: \n            curr_sum += a[i] \n        count[a[i]] -= 1\n    return curr_sum "
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of first k elements\n    # Return if k > n\n    curr_sum = 0\n    max_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, i+k):\n            if j >= n:\n                break\n            sum += a[j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize result\n    max_sum = -999999999999\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    def square_Sum(n):\n    return sum(i**2 for i in range(0, n, 2))\n    print(square_Sum(10))\n    \n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+i**2\n    return sum\n    \nprint(square_Sum(5))\nprint(square_Sum(8))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)//6\ndef sum_Squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n odd natural numbers.\n    '''\n    return n*(n+1)//2 * (2*n+1)\ndef square_Diff(n):\n    '''\n    Write a python function takes in an integer n and returns the difference between the sum of squares of first n even natural numbers and the sum of squares of first n odd natural numbers.\n    '''\n    return square_Sum(n)-square_Sum(n-1)\ndef main():\n    n=10\n    print(\"Square of sum of first 10 even natural numbers:\",square_Sum(n))\n    print(\"Square of sum of first 10 odd natural numbers:\",square_Sum(n-1))\n    print(\"Difference between the above two:\",square_Diff(n))\nif __name__==\"__main__\":\n    main()\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum+=i*i\n    return sum\nprint(square_Sum(10))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Your code here\n    x = 0\n    for i in range(0, n):\n        x += (i * i)\n    return x\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(2,n+1,2):\n        result += i * i\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2==0):\n            sum+=i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    return sum(map(lambda x : x*x, range(2,n+1,2)))\n    \ndef square_sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    return sum([x*x for x in range(2,n+1,2)])\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = []\n    for i in list1:\n        length.append(len(i))\n    return max(length)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    print(max_len)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #Declaring a varibale to store the max length\n    max_length = 0\n    #Declaring a varibale to store the list which has max length\n    max_length_list = []\n    #Iterating through all the list\n    for i in list1:\n        #Checking whether length of each list is greater than max_length\n        if max_length < len(i):\n            #If yes, the length of the list becomes max_length\n            max_length = len(i)\n            #After this loop, max_length_list becomes a list of list having max length\n            max_length_list = [i]\n        #If not, the length is not greater than max_length\n        elif max_length == len(i):\n            #max_length_list.append(i)\n            #max_length_list will contain a list of list having max length\n            max_length_list.append(i)\n    return max_length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = len(list1)\n    max_len = 0\n    max_list = []\n    for i in range(length):\n        if len(list1[i]) >= max_len:\n            max_len = len(list1[i])\n            max_list = list1[i]\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_len_list = []\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_list = []\n            max_len_list.append(i)\n        elif len(i) == max_len:\n            max_len_list.append(i)\n    return max_len_list\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for each in list1:\n        if len(each)>max_len:\n            max_len=len(each)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = None\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # iterate through the list1\n    max_len = 0\n    for each_list in list1:\n        # find the length of the list\n        list_len = len(each_list)\n        # check whether the list length is maximum or not\n        if list_len > max_len:\n            # if yes then make the max_len equal to list_len\n            max_len = list_len\n    # return the maximum length\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_helper(1, n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    if n == 0:\n        return ways\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    if k == 2:\n        if n == 2:\n            return 2\n        return 1\n    if k == 3:\n        if n == 3:\n            return 4\n        return 2\n    if k == 4:\n        if n == 4:\n            return 7\n        return 3\n    if k == 5:\n        if n == 5:\n            return 13\n        return 4\n    if k == 6:\n        if n == 6:\n            return 24\n        return 5\n    if k == 7:\n        if n == 7:\n            return 44\n        return 6\n    if k == 8:\n        if n == 8:\n            return 81\n        return 7\n    if k == 9:\n        if n == 9:\n            return 162\n        return 8\n    if k == 10:\n        if n == 10:\n            return 243\n        return 9\n    if k == 11:\n        if n == 11:\n            return 726\n        return 10\n    if k == 12:\n        if n == 12:\n            return 1281\n        return 11\n    if k == 13:\n        if n == 13:\n            return 2070\n        return 12\n    if k == 14:\n        if n == 14:\n            return 2960\n        return 13\n    if k == 15:\n        if n == 15:\n            return 6690\n        return 14\n    if k == 16:\n        if n == 16:\n            return 12096\n        return 15\n    if k == 17:\n        if n == 17:\n            return 28680\n        return 16\n    if k == 18:\n        if n == 18:\n            return 58380\n        return 17\n    if k == 19:\n        if n == 19:\n            return 87880\n        return 18\n    if k == 20:\n        if n == 20:\n            return 123120\n        return 19\n    if k == 21:\n        if n == 21:\n            return 217590\n        return 20\n    if k == 22:\n        if n == 22:\n            return 343520\n        return 21\n    if k == 23:\n        if n == 23:\n            return 498870\n        return 22\n    if k == 24:\n        if n == 24:\n            return 749680\n        return 23\n    if k == 25:\n        if n == 25:\n            return 1065600\n        return 24\n    if k == 26:\n        if n == 26:\n            return 1779360\n        return 25\n    if k == 27:\n        if n == 27:\n            return 2715100\n        return 26\n    if k == 28:\n        if n == 28:\n            return 836820\n        return 27\n    if k == 29:\n        if n == 29:\n            return 1153710\n        return 28\n    if k == 30:\n        if n == 30:\n            return 1516980\n        return 29\n    if k == 31:\n        if n == 31:\n            return 1823170\n        return 30\n    if k == 32:\n        if n == 32:\n            return 1934400\n        return 31\n    if k == 33:\n        if n == 33:\n            return 2084170\n        return 32\n    if k == 34:\n        if n == 34:\n            return 2238700\n        return 33\n    if k == 35:\n        if n == 35:\n            return 2450900\n        return 34\n    if k == 36:\n        if n == 36:\n            return 2648200\n        return 35\n    if k == 37:\n        if n == 37:\n            return 2756500\n        return 36\n    if k == 38:\n        if n == 38:\n            return 2873800\n        return 37\n    if k == 39:\n        if n == 39:\n            return 2990800\n        return 38\n    if k == 40:\n        if n == 40:\n            return 3124200\n        return 39\n    if k == 41:\n        if n == 41:\n            return 3348700\n        return 40\n    if k == 42:\n        if n == 42:\n            return 3536900\n        return 41\n    if k == 43:\n        if n == 43:\n            return 3754900\n        return 42\n    if k == 44:\n        if n == 44:\n            return 3940200\n        return 43\n    if k == 45:\n        if n == 45:\n            return 4052000\n        return 44\n    if k == 46:\n        if n == 46:\n            return 4257500\n        return 45\n    if k == 47:\n        if n == 47:\n            return 4478500\n        return 46\n    if k == 48:\n        if n == 48:\n            return 4604200\n        return 47\n    if k == 49:\n        if n == 49:\n            return 4760900\n        return 48\n    if k == 50:\n        if n == 50:\n            return 4948200\n        return 49\n    if k == 51:\n        if n == 51:\n            return 5117100\n        return 50\n    if k == 52:\n        if n == 52:\n            return 5176200\n        return 51\n    if k == 53:\n        if n == 53:\n            return 5226500\n        return 52\n    if k == 54:\n        if n == 54:\n            return 5268300\n        return 53\n    if k == 55:\n        if n == 55:\n            return 5359700\n        return 54\n    if k == 56:\n        if n == 56:\n            return 5482400\n        return 55\n    if k == 57:\n        if n == 57:\n            return 5621300\n        return 56\n    if k == 58:\n        if n == 58:\n            return 5758800\n        return 57\n    if k == 59:\n        if n == 59:\n            return 5911200\n        return 58\n    if k == 60:\n        if n == 60:\n            return 6074200\n        return 59\n    if k == 61:\n        if n == 61:\n            return 6209200\n        return 60\n    if k == 62:\n        if n == 62:\n            return 6322900\n        return 61\n    if k == 63:\n        if n == 63:\n            return 6368400\n        return 62\n    if k == 64:\n        if n == 64:\n            return 6508500\n        return 63\n    if k == 65:\n        if n == 65:\n            return 66648200\n        return 64\n    if k == 66:\n        if n == 66:\n            return 6810600\n        return 65\n    if k == 67:\n        if n == 67:\n            return 6996400\n        return 66\n    if k == 68:\n        if n == 68:\n            return 7137200\n        return 67\n    if k == 69:\n        if n == 69:\n            return 7270700\n        return 68\n    if k == 70:\n        if n == 70:\n            return 7385100\n        return 69\n    if k == 71:\n        if n == 71:\n            return 7504900\n        return 70\n    if k == 72:\n        if n == 72:\n            return 7648400\n        return 71\n    if k == 73:\n        if n == 73:\n            return 7776200\n        return 72\n    if k == 74:\n        if n == 74:\n            return 7887800\n        return 73\n    if k == 75:\n        if n == 75:\n            return 8012300\n        return 74\n    if k == 76:\n        if n == 76:\n            return 8145200\n        return 75\n    if k == 77:\n        if n == 77:\n            return 8272000\n        return 76\n    if k == 78:\n        if n == 78:\n            return 8432000\n        return 77\n    if k == 79:\n        if n == 79:\n            return 8569900\n        return 78\n    if k == 80:\n        if n == 80:\n            return 8807600\n        return 79\n    if k == 81:\n        if n == 81:\n            return 9062200\n        return 80\n    if k == 82:\n        if n == 82:\n            return 9188600\n        return 81\n    if k == 83:\n        if n == 83:"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2:\n        return n\n    \n    if k == 1:\n        return n\n    \n    d = {}\n    d[0] = 1\n    d[1] = 1\n    \n    for i in range(2, n):\n        d[i] = d[i - 1] + d[i - 2]\n        \n    return d[n - 1]\n    \nif __name__ == '__main__':\n    print(count_no_of_ways(5, 3))"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 0:\n        return 0\n    if n == 0 or n == 1:\n        return 1\n    if k < 0:\n        return 0\n    if k == 0 or k == 1:\n        return 0\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-2, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 0 or k <= 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 3:\n        return 0\n    \n    # num of ways to paint a fence of size n with k colors\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n    for i in range(k):\n        dp[0][i] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Algorithm\n    # (1) Create an array of length k (0 indexed)\n    # (2) Initialize the first index of the array with 1.\n    # (3) Initialize the second index of the array with the number of ways of painting the fence with 1 and 2 posts of the same color and the first post not painted as a 0.\n    # (4) Iterate through the fence and calculate the number of ways of painting the fence for each fence post.\n    # (5) Return the second index of the array\n    if n < 2:\n        return 0\n    count_arr = [0 for i in range(k)]\n    count_arr[0] = 1\n    count_arr[1] = 1\n    for i in range(2, n):\n        for j in range(k):\n            if j == 0:\n                count_arr[j] = 1\n            else:\n                count_arr[j] = count_arr[j] + count_arr[j-1]\n    return count_arr[k-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n == 0 or k == 0):\n        return 0\n    if (k == 1):\n        return n\n    if (k == 2 and n == 1):\n        return 1\n    if (k == 2 and n > 1):\n        return 2\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n    "
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    arr = [0 for i in range(k + 1)]\n    arr[0] = 1\n    for i in range(n):\n        for j in range(1, k + 1):\n            arr[j] += arr[j - 1]\n            if j >= 2:\n                arr[j] += arr[j - 2]\n    return arr[k]\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n//m\n    return q\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # n=int(input(\"enter the first number:\"))\n    # m=int(input(\"enter the second number:\"))\n    def quotient(n,m):\n        try:\n            if n>0 and m>0:\n                return int(n/m)\n            else:\n                raise ValueError(\"Both the numbers must be positive.\")\n        except:\n            print(\"Incorrect input.\")\n    print(quotient(n,m))\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(m==0):\n        return 0\n    elif(n<0):\n        return -(abs(n)//m)\n    else:\n        return n//m\n        "
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    a,b = n,m\n    q = a // b\n    if q >= 0:\n        return q\n    else:\n        return q+1\ndef findSum(n,m):\n    '''\n    Write a python function to find the sum of two numbers (rounded down to the nearest integer).\n    '''\n    a,b = n,m\n    q = a // b\n    s = n + m\n    if q >= 0:\n        return s\n    else:\n        return s + 1\ndef findAverage(n,m):\n    '''\n    Write a python function to find average of two numbers (rounded down to the nearest integer).\n    '''\n    a,b = n,m\n    q = a // b\n    s = n + m\n    if q >= 0:\n        return (s)/2\n    else:\n        return (s)/2 + 1\ndef findAverage(n,m):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    a,b = n,m\n    q = a // b\n    s = a + b\n    if q >= 0:\n        return sqrt(s)\n    else:\n        return sqrt(s + 1)\ndef findLargest(n,m,k):\n    '''\n    Write a python function to find the largest number among three numbers (rounded down to the nearest integer).\n    '''\n    a,b,c = n,m,k\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\ndef findSmallest(n,m,k):\n    '''\n    Write a python function to find the smallest number among three numbers (rounded down to the nearest integer).\n    '''\n    a,b,c = n,m,k\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\ndef findGCD(n,m):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    a,b = n,m\n    if a % b == 0:\n        return b\n    else:\n        return findGCD(b, a%b)\ndef findLCM(n,m):\n    '''\n    Write a python function to find the lowest common multiple of two numbers.\n    '''\n    a,b = n,m\n    if a*b == 0:\n        return 0\n    elif a*b == 1:\n        return 1\n    elif a*b == 2:\n        return 2\n    elif a*b > 2:\n        return findLCM(a, b) * 2\ndef findLargest(n,m,k):\n    '''\n    Write a python function to find the largest number among three numbers (rounded down to the nearest integer).\n    '''\n    a,b,c = n,m,k\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\ndef findSmallest(n,m,k):\n    '''\n    Write a python function to find the smallest number among three numbers (rounded down to the nearest integer).\n    '''\n    a,b,c = n,m,k\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\ndef findGCD(n,m):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    a,b = n,m\n    if a % b == 0:\n        return b\n    else:\n        return findGCD(b, a%b)\ndef findLCM(n,m):\n    '''\n    Write a python function to find the lowest common multiple of two numbers.\n    '''\n    a,b = n,m\n    if a*b == 0:\n        return 0\n    elif a*b == 1:\n        return 1\n    elif a*b == 2:\n        return 2\n    elif a*b > 2:\n        return findLCM(a, b) * 2\ndef findLargest(n,m,k):\n    '''\n    Write a python function to find the largest number among three numbers (rounded down to the nearest integer).\n    '''\n    a,b,c = n,m,k\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\ndef findSmallest(n,m,k):\n    '''\n    Write a python function to find the smallest number among three numbers (rounded down to the nearest integer).\n    '''\n    a,b,c = n,m,k\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\ndef findGCD(n,m):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    a,b = n,m\n    if a % b == 0:\n        return b\n    else:\n        return findGCD(b, a%b)\ndef findLCM(n,m):\n    '''\n    Write a python function to find the lowest common multiple of two numbers.\n    '''\n    a,b = n,m\n    if a*b == 0:\n        return 0\n    elif a*b == 1:\n        return 1\n    elif a*b == 2:\n        return 2\n    elif a*b > 2:\n        return findLCM(a, b) * 2\ndef findLargest(n,m,k):\n    '''\n    Write a python function to find the largest number among three numbers (rounded down to the nearest integer).\n    '''\n    a,b,c = n,m,k\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\ndef findSmallest(n,m,k):\n    '''\n    Write a python function to find the smallest number among three numbers (rounded down to the nearest integer).\n    '''\n    a,b,c = n,m,k\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\ndef findGCD(n,m):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    a,b = n,m\n    if a % b == 0:\n        return b\n    else:\n        return findGCD(b, a%b)\ndef findLCM(n,m):\n    '''\n    Write a python function to find the lowest common multiple of two numbers.\n    '''\n    a,b = n,m\n    if a*b == 0:\n        return 0\n    elif a*b == 1:\n        return 1\n    elif a*b == 2:\n        return 2\n    elif a*b > 2:\n        return findLCM(a, b) * 2\ndef findLargest(n,m,k):\n    '''\n    Write a python function to find the largest number among three numbers (rounded down to the nearest integer).\n    '''\n    a,b,c = n,m,k\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\ndef findSmallest(n,m,k):\n    '''\n    Write a python function to find the smallest number among three numbers (rounded down to the nearest integer).\n    '''\n    a,b,c = n,m,k\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\ndef findGCD(n,m):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    a,b = n,m\n    i"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #Approach 1\n    # return n/m\n    # Approach 2\n    # return n//m\n    # Approach 3\n    # return n-(n%m)\n    # Approach 4\n    # return (n-1)//(m-1) + 1 if n>m else n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    div = n//m\n    return div\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    x = n // m\n    return x\n    \ndef find(n,m):  \n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    \n    x = n % m\n    return x\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        quotient = n//m\n        return quotient\n    except ZeroDivisionError:\n        print(\"Division by zero is not allowed.\")\n    except Exception:\n        print(\"Some other exception occured.\")\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_a=w\n    side_b=h\n    side_c=side_a*side_b*math.sqrt(1-(side_a**2)/(side_b**2))\n    return side_c\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w < 0 or h < 0:\n        return \"Value is negative\"\n    elif w > 0 and h > 0:\n        return \"Value is positive\"\n    else:\n        return \"Value is not right angled\"\ndef angle_between_lines(m1,m2,y=0):\n    '''\n    Write a function to find the angle between two lines.\n    '''\n    #m1 is the line 1 and m2 is the line 2\n    if m1 == 0 or m2 == 0:\n        return \"m1 and m2 cannot be 0\"\n    elif y < 0:\n        return \"y cannot be a negative value\"\n    elif y > 0:\n        if y == 0:\n            return 90\n        elif m1 == m2:\n            return 0\n        elif m1!= m2:\n            return 180\n        else:\n            return math.degrees(math.atan(m1/m2))\n    else:\n        if m1 == m2:\n            return 90\n        elif m1!= m2:\n            return 180\n        else:\n            return math.degrees(math.atan(m1/m2))\ndef line_intersection(m1,b1,m2,b2):\n    '''\n    Write a function to find the intersection point of two lines.\n    '''\n    if m1 == m2 and b1 == b2:\n        return \"These lines are the same\"\n    elif m1 == 0 or m2 == 0:\n        return \"m1 and m2 cannot be 0\"\n    elif m1!= 0 and m2!= 0:\n        if b1 == b2:\n            return \"These lines are parallel\"\n        else:\n            x = (b2 - b1)/(m1 - m2)\n            y = (x*m2) + b2\n            return (x,y)\n    else:\n        return \"These lines are not parallel\"\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    if r < 0:\n        return \"Value is negative\"\n    elif r > 0:\n        pi = 3.14\n        a = r**2\n        return (pi*a)\n    else:\n        return \"Value is not right angled\"\ndef smallest_positive_number(a,b,c):\n    '''\n    Write a function to find the smallest positive number.\n    '''\n    if a < 0 and b < 0 and c < 0:\n        return \"Value is negative\"\n    elif a < 0 and b < 0 and c > 0:\n        return \"a,b,c cannot be positive and negative together\"\n    elif a < 0 and b < 0:\n        return \"a and b cannot be positive and negative together\"\n    elif a < 0 and c < 0:\n        return \"a and c cannot be positive and negative together\"\n    elif b < 0 and c < 0:\n        return \"b and c cannot be positive and negative together\"\n    elif a < 0:\n        return \"a cannot be positive\"\n    elif b < 0:\n        return \"b cannot be positive\"\n    elif c < 0:\n        return \"c cannot be positive\"\n    elif a > 0 and b > 0 and c > 0:\n        return \"All numbers cannot be positive\"\n    elif a > 0 and b > 0:\n        return \"b and c cannot be positive\"\n    elif a > 0 and c > 0:\n        return \"a and c cannot be positive\"\n    elif b > 0 and c > 0:\n        return \"a and b cannot be positive\"\n    elif a == 0 and b == 0 and c == 0:\n        return \"All numbers cannot be 0\"\n    else:\n        return \"a,b,c cannot be 0\"\ndef absolute_value(n):\n    '''\n    Write a function to find the absolute value.\n    '''\n    if n >= 0:\n        return n\n    else:\n        return -n\ndef largest_number(a,b,c):\n    '''\n    Write a function to find the largest number.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < a:\n        if b < c:\n            return b\n        else:\n            return c\n    else:\n        if a < c:\n            return c\n        else:\n            return a\ndef same_line(m1,m2,c1,c2):\n    '''\n    Write a function to check if the slopes are the same.\n    '''\n    if m1 == m2:\n        return True\n    else:\n        return False\ndef right_angled_triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    if a < 0 or b < 0 or c < 0:\n        return \"Value is negative\"\n    elif a == 0 or b == 0 or c == 0:\n        return \"All values cannot be 0\"\n    else:\n        return a + b + c\ndef right_angled_triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    if a < 0 or b < 0 or c < 0:\n        return \"Value is negative\"\n    elif a == 0 or b == 0 or c == 0:\n        return \"All values cannot be 0\"\n    elif a > 0 and b > 0 and c > 0:\n        return ((a*b*c)/(4*((a+b+c)**2)))\n    else:\n        return \"Value is not right angled\"\ndef get_hypotenuse(a,b):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle.\n    '''\n    if a < 0 or b < 0:\n        return \"Value is negative\"\n    elif a == 0 or b == 0:\n        return \"Value cannot be 0\"\n    else:\n        return math.sqrt(a**2 + b**2)\ndef get_all_side_lengths(a,b,c):\n    '''\n    Write a function to get all side lengths of a right angled triangle.\n    '''\n    if a < 0 or b < 0 or c < 0:\n        return \"Value is negative\"\n    elif a == 0 or b == 0 or c == 0:\n        return \"All values cannot be 0\"\n    else:\n        return (a,b,c)\ndef standard_form(a,b,c):\n    '''\n    Write a function to convert all side lengths to standard form.\n    '''\n    if a == b and b == c:\n        return (a,b,c)\n    elif a == b:\n        if c!= a:\n            if c > a:\n                return (a,c,b)\n            else:\n                return (a,b,c)\n    elif b == c:\n        if a!= b:\n            if a > b:\n                return (b,a,c)\n            else:\n                return (b,c,a)\n    elif a == c:\n        if b!= a:\n            if b > a:\n                return (a,b,c)\n            else:\n                return (a,c,b)\ndef in_right_triangle(a,b,c,d):\n    '''\n    Write a function to check if a right angled triangle is entered.\n    '''\n    if a < 0 or b < 0 or c < 0:\n        return \"Value is negative\"\n    elif a == 0 or b == 0 or c == 0:\n        return \"Value cannot be 0\"\n    elif d <= a and d <= b and d <= c:\n        return \"Value is less than or equal to side length\"\n    elif d < a and d < b and d < c:\n        return \"Value is less than the other two sides\"\n    elif d > a and d > b and d > c:\n        return \"Value is greater than the other two sides\"\n    else:\n        return \"Value is inside the triangle\"\ndef triangle_check(a,b,c):\n    '''\n    Write a function to check if a triangle is valid.\n    '''\n    if a < 0 or b < 0 or c < 0:\n        return \"Value is negative\"\n    elif a == 0 or "
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == None and h == None:\n        print('Incorrect input.')\n    else:\n        if w == h:\n            print('Incorrect input.')\n        else:\n            if w < h:\n                print('Incorrect input.')\n            else:\n                a = w\n                b = h\n                c = math.sqrt(a**2 + b**2)\n                print('The third side of this triangle is: ',c)\n                \ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == None and h == None:\n        print('Incorrect input.')\n    else:\n        if w == h:\n            print('Incorrect input.')\n        else:\n            if w < h:\n                print('Incorrect input.')\n            else:\n                print('The third side of this triangle is: ',w**2 + h**2)\n                \ndef otherside_rightangle_examples():\n    '''\n    This function is used to test otherside_rightangle\n    '''\n    otherside_rightangle(5,7)\n    otherside_rightangle(3,4)\n    otherside_rightangle(9,10)\n    otherside_rightangle(5,5)\n    \ndef otherside_rectangle_examples():\n    '''\n    This function is used to test otherside_rectangle\n    '''\n    otherside_rectangle(5,7)\n    otherside_rectangle(3,4)\n    otherside_rectangle(9,10)\n    otherside_rectangle(5,5)\n    \ndef to_the_power_of(x,y):\n    '''\n    Write a function to find the x-th power of y.\n    '''\n    if x == None or y == None:\n        print('Incorrect input.')\n    else:\n        if x < 0 or y < 0:\n            print('Incorrect input.')\n        else:\n            p = x**y\n            print(p)\n            \ndef to_the_power_of_examples():\n    '''\n    This function is used to test to_the_power_of\n    '''\n    to_the_power_of(3,2)\n    to_the_power_of(-3,3)\n    to_the_power_of(2,-2)\n    to_the_power_of(-3,1)\n    to_the_power_of(-2,3)\n    to_the_power_of(1,0)\n    \ndef total(l):\n    '''\n    Write a function to return the sum of a list of numbers.\n    '''\n    if l == None:\n        print('Incorrect input.')\n    else:\n        s = 0\n        for x in l:\n            s = s + x\n        print(s)\n        \ndef total_examples():\n    '''\n    This function is used to test total\n    '''\n    total([5,4,3,2,1])\n    total([5,4,3,2,-1])\n    total([3.5,1.6,0.7,0.8,2.9])\n    total(['a','b','c','d','e'])\n    total(['a','b','c','d','e','f'])\n    total([1,2,3,4,5,6,7,8,9,10])\n    total([1,2,3,4,5,6,7,8,9,10,11])\n    total(['a','b','c','d','e','f','g','h','i','j','k'])\n    total(['a','b','c','d','e','f','g','h','i','j','k','l'])\n    total([5])\n    total([5,4])\n    total([5,4,3])\n    total([5,4,3,2])\n    total([5,4,3,2,-1])\n    total([3.5,1.6,0.7,0.8,2.9])\n    total(['a','b','c','d','e'])\n    total(['a','b','c','d','e','f'])\n    total([1,2,3,4,5,6,7,8,9,10])\n    total([1,2,3,4,5,6,7,8,9,10,11])\n    total(['a','b','c','d','e','f','g','h','i','j','k'])\n    total(['a','b','c','d','e','f','g','h','i','j','k','l'])\n    total([5])\n    total([5,4])\n    total([5,4,3])\n    total([5,4,3,2])\n    total([5,4,3,2,-1])\n    total([3.5,1.6,0.7,0.8,2.9])\n    total(['a','b','c','d','e'])\n    total(['a','b','c','d','e','f'])\n    total([1,2,3,4,5,6,7,8,9,10])\n    total([1,2,3,4,5,6,7,8,9,10,11])\n    total(['a','b','c','d','e','f','g','h','i','j','k'])\n    total(['a','b','c','d','e','f','g','h','i','j','k','l'])\n    \ndef total_examples():\n    '''\n    This function is used to test total\n    '''\n    total([5,4,3,2,1])\n    total([5,4,3,2,-1])\n    total([3.5,1.6,0.7,0.8,2.9])\n    total(['a','b','c','d','e'])\n    total(['a','b','c','d','e','f'])\n    total([1,2,3,4,5,6,7,8,9,10])\n    total([1,2,3,4,5,6,7,8,9,10,11])\n    total(['a','b','c','d','e','f','g','h','i','j','k'])\n    total(['a','b','c','d','e','f','g','h','i','j','k','l'])\n    total([5])\n    total([5,4])\n    total([5,4,3])\n    total([5,4,3,2])\n    total([5,4,3,2,-1])\n    total([3.5,1.6,0.7,0.8,2.9])\n    total(['a','b','c','d','e'])\n    total(['a','b','c','d','e','f'])\n    total([1,2,3,4,5,6,7,8,9,10])\n    total([1,2,3,4,5,6,7,8,9,10,11])\n    total(['a','b','c','d','e','f','g','h','i','j','k'])\n    total(['a','b','c','d','e','f','g','h','i','j','k','l'])\n    total([5])\n    total([5,4])\n    total([5,4,3])\n    total([5,4,3,2])\n    total([5,4,3,2,-1])\n    total([3.5,1.6,0.7,0.8,2.9])\n    total(['a','b','c','d','e'])\n    total(['a','b','c','d','e','f'])\n    total([1,2,3,4,5,6,7,8,9,10])\n    total([1,2,3,4,5,6,7,8,9,10,11])\n    total(['a','b','c','d','e','f','g','h','i','j','k'])\n    total(['a','b','c','d','e','f','g','h','i','j','k','l'])\n    \ndef times(x,y):\n    '''"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\ndef area_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef pythagorean_theorem(a,b):\n    '''\n    Write a function to calculate the hypotenuse of a right angled triangle.\n    '''\n    return a**2+b**2\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return l*w*h\ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return 3.14*(r**2)*(h/3)\ndef cone_slant(r,h):\n    '''\n    Write a function to calculate the slant of a cone.\n    '''\n    return (r**2+h**2)**0.5\ndef area_triangle(b,h):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return 0.5*b*h\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return 4*3.14*(r**3)/3\ndef height_cylinder(r,h):\n    '''\n    Write a function to calculate the height of a cylinder.\n    '''\n    return 2*3.14*(r**2)*h\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return (a+b)*h/2\ndef perimeter_square(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    return 4*a\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return a**2\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef area_rectangle(a,b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return a*b\ndef perimeter_rightangled(a,b):\n    '''\n    Write a function to calculate the perimeter of a right angled triangle.\n    '''\n    return a+b+math.sqrt((a**2)+(b**2))\ndef area_rightangled(a,b):\n    '''\n    Write a function to calculate the area of a right angled triangle.\n    '''\n    return 0.5*a*b\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return 2*(a+b)\ndef area_parallelogram(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return a*b\ndef perimeter_trapezium(a,b,h):\n    '''\n    Write a function to calculate the perimeter of a trapezium.\n    '''\n    return a+b+h\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return ((a+b)*h)/2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return 3.14*(r**2)\ndef area_ellipse(r1,r2):\n    '''\n    Write a function to calculate the area of an ellipse.\n    '''\n    return 3.14*r1*r2\ndef area_rhombus(d1,d2):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return 0.5*d1*d2\ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return 3.14*(r**2)*(h/3)\ndef volume_cube(l):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return l**3\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return 4*3.14*(r**3)/3\ndef surface_cylinder(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2)*h\ndef surface_cone(r,h):\n    '''\n    Write a function to calculate the surface area of a cone.\n    '''\n    return 2*3.14*r*(r+h)\ndef surface_cube(l):\n    '''\n    Write a function to calculate the surface area of a cube.\n    '''\n    return 6*l**2\ndef surface_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4*3.14*(r**2)\ndef volume_pyramid(l,w,h):\n    '''\n    Write a function to calculate the volume of a pyramid.\n    '''\n    return l*w*h/3\ndef surface_pyramid(l,w,h):\n    '''\n    Write a function to calculate the surface area of a pyramid.\n    '''\n    return 2*l*(w+h)\ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return 3.14*(r**2)*(h/3)\ndef area_triangle(b,h):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return 0.5*b*h\ndef area_parallelogram(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return a*b\ndef area_rhombus(d1,d2):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return 0.5*d1*d2\ndef perimeter_cube(l):\n    '''\n    Write a function to calculate the perimeter of a cube.\n    '''\n    return 6*l\ndef perimeter_circle(r):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*3.14*r\ndef circumference_circularsegment(r):\n    '''\n    Write a function to calculate the circumference of a circular segment.\n    '''\n    return 2*3.14*r\ndef perimeter_rhombus(d1,d2):\n    '''\n    Write a function to calculate the perimeter of a rhombus.\n    '''\n    return 4*(d1+d2)\ndef perimeter_square(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    return 4*a\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef perimeter_trapezium(a,b,h):\n    '''\n    Write a function to calculate the perimeter of a trapezium.\n    '''\n    return a+b+h\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return 3.14*(r**2)\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return a**2\ndef perimeter_square(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    return 4*a\ndef area_rectangle(a,b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return a*b\ndef perimeter_rectangle(a,"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt((w**2)+(h**2))\n    return third_side\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w!= h:\n        return w**2 + h**2 - (w**2 + h**2 - 2*(w*h)*math.sqrt(w**2 + h**2))\n    else:\n        return (w**2 + h**2 - math.sqrt(2*(w**2 + h**2)))**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    hypotenuse = (w**2 + h**2)**0.5\n    side1 = hypotenuse - w\n    side2 = hypotenuse - h\n    print(side1,side2)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = round(math.sqrt(w**2 + h**2), 3)\n    return side\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\n    \ndef otherside_rightangle_rec(w,h):\n    if w == 0 or h == 0:\n        return 0\n    elif w > 0 and h > 0:\n        return otherside_rightangle_rec(w-h,h)\n    else:\n        return otherside_rightangle_rec(w,h-w)\n    \ndef otherside_rightangle_iter(w,h):\n    if w == 0 or h == 0:\n        return 0\n    elif w > 0 and h > 0:\n        return otherside_rightangle_rec_iter(w,h)\n    else:\n        return otherside_rightangle_rec_iter(w,h)\n    \ndef otherside_rightangle_iter_n(w,h):\n    if w == 0 or h == 0:\n        return 0\n    elif w > 0 and h > 0:\n        return otherside_rightangle_rec_iter_n(w,h)\n    else:\n        return otherside_rightangle_rec_iter_n(w,h)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef thirdside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for element in listval:\n        if isinstance(element, int) or isinstance(element, float):\n            if element >= max_val:\n                max_val = element\n        elif isinstance(element, str):\n            if len(element) >= max_val:\n                max_val = len(element)\n        elif isinstance(element, list):\n            if len(element) >= max_val:\n                max_val = max_val(element)\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #input type list \n    assert type(listval) == list\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n    assert len(listval) > 0\n    #input list for reference\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    # handle empty list\n    if len(listval) == 0:\n        raise ValueError('input list is empty')\n    # define maximum value variable\n    max_val = listval[0]\n    # traverse the list\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    # return the maximum value\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) > 0:\n        maxval = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n    else:\n        maxval = None\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = None\n    for val in listval:\n        if max == None or val > max:\n            max = val\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        maximum = listval[0]\n        for i in range(len(listval)):\n            if listval[i]>maximum:\n                maximum = listval[i]\n        return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    newlist = []\n    for i in listval:\n        if type(i) == int:\n            newlist.append(i)\n        elif type(i) == str:\n            newlist.append(i.upper())\n        elif type(i) == bool:\n            newlist.append(i)\n    return max(newlist)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for i in listval:\n        if type(i) == type(0):\n            if i > maxval:\n                maxval = i\n        else:\n            maxval = max(maxval,i)\n    return maxval\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    return sum(get_divisors(number))\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    number = abs(number)\n    # first, we find the prime factorization of the number.\n    prime_factors = []\n    divisor = 2\n    while divisor <= number:\n        while number % divisor == 0:\n            number /= divisor\n            prime_factors.append(divisor)\n        divisor += 1\n    # second, we create the list of all divisors\n    divisors = [1]\n    for prime_factor in prime_factors:\n        divisors = [x * prime_factor for x in divisors]\n    divisors.append(number)\n    # now we sum up all the divisors\n    sum_of_divisors = 0\n    for divisor in divisors:\n        sum_of_divisors += divisor\n    return sum_of_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number):\n        if number%i==0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for x in range(1, number + 1):\n        if number % x == 0:\n            sum += x\n    return sum\n    \ndef sum_div_fast(number):\n    '''\n    Write a function that returns the sum of all divisors of a number.\n    '''\n    sum = 0\n    sum_list = []\n    for x in range(1, number + 1):\n        if number % x == 0:\n            sum_list.append(x)\n    return sum(sum_list)\n    \ndef sum_div_fastest(number):\n    '''\n    Write a function that returns the sum of all divisors of a number.\n    '''\n    sum = 0\n    div_list = []\n    for x in range(1, number + 1):\n        if number % x == 0:\n            div_list.append(x)\n    return sum(div_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for divisor in range(1, number+1):\n        if number % divisor == 0:\n            divisors.append(divisor)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n            sum_div += i\n    return (f'The sum of divisors of {number} is {sum_div}')\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n    #return sum([i for i in range(1,number+1) if number % i == 0])\nprint(sum_div(24))\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if (number % i == 0):\n            sum += i\n    return sum\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_count(arr,0,len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return count_inversions(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr = [1, 20, 6, 4, 5]\n    return count_inversions(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return 0\n    else:\n        mid = len(arr)//2\n        i = 0\n        left_arr = arr[0:mid]\n        right_arr = arr[mid:len(arr)]\n        Inversion_count_left = get_Inv_Count(left_arr)\n        Inversion_count_right = get_Inv_Count(right_arr)\n        Inversion_count = Inversion_count_left + Inversion_count_right\n        Inversion_count_right = 0\n        for i in range(0,mid):\n            for j in range(i+1,mid):\n                if arr[i] > arr[j]:\n                    Inversion_count_right += 1\n        return Inversion_count + Inversion_count_right\n    \n    \n    def get_Inv_Count_With_Sort(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return 0\n    else:\n        mid = len(arr)//2\n        i = 0\n        left_arr = arr[0:mid]\n        right_arr = arr[mid:len(arr)]\n        Inversion_count_left = get_Inv_Count(left_arr)\n        Inversion_count_right = get_Inv_Count(right_arr)\n        Inversion_count = Inversion_count_left + Inversion_count_right\n        Inversion_count_left = 0\n        for i in range(0,mid):\n            if left_arr[i] > left_arr[i+1]:\n                Inversion_count_left += 1\n        Inversion_count_right = 0\n        for i in range(0,mid):\n            if right_arr[i] > right_arr[i+1]:\n                Inversion_count_right += 1\n        return Inversion_count + Inversion_count_left + Inversion_count_right\n    \n    \n    def get_Inv_Count_With_Sort_Optimized(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return 0\n    else:\n        mid = len(arr)//2\n        i = 0\n        left_arr = arr[0:mid]\n        right_arr = arr[mid:len(arr)]\n        Inversion_count_left = get_Inv_Count(left_arr)\n        Inversion_count_right = get_Inv_Count(right_arr)\n        Inversion_count = Inversion_count_left + Inversion_count_right\n        Inversion_count_left = 0\n        Inversion_count_right = 0\n        for i in range(0,mid):\n            if left_arr[i] > left_arr[i+1]:\n                Inversion_count_left += 1\n        for i in range(0,mid):\n            if right_arr[i] > right_arr[i+1]:\n                Inversion_count_right += 1\n        return Inversion_count + Inversion_count_left + Inversion_count_right\n    \n    \n    def get_Inv_Count_With_Sort_Optimized_With_Pivoting(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return 0\n    else:\n        mid = len(arr)//2\n        i = 0\n        left_arr = arr[0:mid]\n        right_arr = arr[mid:len(arr)]\n        Inversion_count_left = get_Inv_Count(left_arr)\n        Inversion_count_right = get_Inv_Count(right_arr)\n        Inversion_count = Inversion_count_left + Inversion_count_right\n        Inversion_count_left = 0\n        Inversion_count_right = 0\n        for i in range(0,mid):\n            if left_arr[i] > left_arr[i+1]:\n                Inversion_count_left += 1\n        for i in range(0,mid):\n            if right_arr[i] > right_arr[i+1]:\n                Inversion_count_right += 1\n        return Inversion_count + Inversion_count_left + Inversion_count_right\n    \n    \n    \n    if __name__ == '__main__':\n        n = int(input())\n        arr = [int(i) for i in input().split()]\n        print(get_Inv_Count(arr))\n        print(get_Inv_Count_With_Sort(arr))\n        print(get_Inv_Count_With_Sort_Optimized(arr))\n        print(get_Inv_Count_With_Sort_Optimized_With_Pivoting(arr))\n        \n        \n        \n    \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    "
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    arr = sorted(arr)\n    return sum([1 if arr[i] < arr[i+1] else 0 for i in range(n-1)])\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr,0,len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    return merge_Sort_Count(arr,0,n-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    length = len(arr)\n    return mergeSort(arr, 0, length-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\n    \ndef mergesort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        mergesort(left)\n        mergesort(right)\n        merge(arr, left, right)\n        return len(arr)\n    else:\n        return 0\n    \ndef merge(arr, left, right):\n    i = j = k = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n        k += 1\n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    if type(list1[0]) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return [list1[0]] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    out = []\n    for i in list1:\n        if type(i) is list:\n            out += flatten_list(i)\n        else:\n            out.append(i)\n    return out\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i) == list:\n            new_list.extend(flatten_list(i))\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for elem in list1:\n        if type(elem) == list:\n            new_list += flatten_list(elem)\n        else:\n            new_list.append(elem)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            list2.extend(flatten_list(sublist))\n        else:\n            list2.append(sublist)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten_list = []\n    for item in list1:\n        if type(item) is list:\n            flatten_list += flatten_list(item)\n        else:\n            flatten_list.append(item)\n    return flatten_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    #list1 = [[[1,2],[3,4]],[5,6,7]]\n    #list1 = [[[1,2,3],[4,5],[6,7]]]\n    #list1 = [[[1,2,3],[4,5],[6,7]],[[8,9]]]\n    #list1 = [[[1,2,3],[4,5],[6,7]],[[8,9],[[10,11,12]]],[[13,14],[15]]]\n    #list1 = [[[1,2,3],[4,5],[6,7]],[[8,9],[[10,11,12]]],[[13,14],[15]],[[16]]]\n    #list1 = [[[1,2,3],[4,5],[6,7]],[[8,9],[[10,11,12]]],[[13,14],[15]],[[16]],[[17]]]\n    #list1 = [[[1,2,3],[4,5],[6,7]],[[8,9],[[10,11,12]]],[[13,14],[15]],[[16]],[[17]],[[18]]]\n    list2 = []\n    for element in list1:\n        if isinstance(element, list):\n            for subelement in element:\n                list2.append(subelement)\n        else:\n            list2.append(element)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            for sub_item in flatten_list(item):\n                flat_list.append(sub_item)\n        else:\n            flat_list.append(item)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n    elif isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return list1[:1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    return flat_list\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for x in stdata:\n        if x[2] > max_aggregate:\n            max_aggregate = x[2]\n    print(max_aggregate)\n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    min_aggregate = stdata[0][2]\n    for x in stdata:\n        if x[2] < min_aggregate:\n            min_aggregate = x[2]\n    print(min_aggregate)\n    \ndef max_avg(stdata):\n    '''\n    Write a function to calculate the maximum average from the list of tuples.\n    '''\n    max_avg = 0\n    total = 0\n    for x in stdata:\n        total += x[2]\n        if x[2] > max_avg:\n            max_avg = x[2]\n    print(max_avg / len(stdata))\n    \ndef min_avg(stdata):\n    '''\n    Write a function to calculate the minimum average from the list of tuples.\n    '''\n    min_avg = stdata[0][2]\n    total = 0\n    for x in stdata:\n        total += x[2]\n        if x[2] < min_avg:\n            min_avg = x[2]\n    print(min_avg / len(stdata))\n    \ndef max_total(stdata):\n    '''\n    Write a function to calculate the maximum total from the list of tuples.\n    '''\n    max_total = 0\n    for x in stdata:\n        if x[2] > max_total:\n            max_total = x[2]\n    print(max_total)\n    \ndef min_total(stdata):\n    '''\n    Write a function to calculate the minimum total from the list of tuples.\n    '''\n    min_total = stdata[0][2]\n    for x in stdata:\n        if x[2] < min_total:\n            min_total = x[2]\n    print(min_total)\n    \ndef max_average(stdata):\n    '''\n    Write a function to calculate the maximum average from the list of tuples.\n    '''\n    max_average = 0\n    total = 0\n    for x in stdata:\n        total += x[2]\n    for x in stdata:\n        if x[2] / total > max_average:\n            max_average = x[2] / total\n    print(max_average)\n    \ndef min_average(stdata):\n    '''\n    Write a function to calculate the minimum average from the list of tuples.\n    '''\n    min_average = stdata[0][2] / len(stdata)\n    total = 0\n    for x in stdata:\n        total += x[2]\n    for x in stdata:\n        if x[2] / total < min_average:\n            min_average = x[2] / total\n    print(min_average)\n    \ndef max_total_average(stdata):\n    '''\n    Write a function to calculate the maximum total average from the list of tuples.\n    '''\n    max_total_average = 0\n    total = 0\n    for x in stdata:\n        total += x[2]\n    for x in stdata:\n        if x[2] / total > max_total_average:\n            max_total_average = x[2] / total\n    print(max_total_average)\n    \ndef min_total_average(stdata):\n    '''\n    Write a function to calculate the minimum total average from the list of tuples.\n    '''\n    min_total_average = stdata[0][2] / len(stdata)\n    total = 0\n    for x in stdata:\n        total += x[2]\n    for x in stdata:\n        if x[2] / total < min_total_average:\n            min_total_average = x[2] / total\n    print(min_total_average)\n    \ndef max_highest_count(stdata):\n    '''\n    Write a function to calculate the maximum number of highest from the list of tuples.\n    '''\n    max_highest_count = 0\n    highest_count = 0\n    for x in stdata:\n        if x[1] > highest_count:\n            highest_count = x[1]\n    for x in stdata:\n        if x[1] == highest_count:\n            if x[2] > max_highest_count:\n                max_highest_count = x[2]\n    print(max_highest_count)\n    \ndef min_highest_count(stdata):\n    '''\n    Write a function to calculate the minimum number of highest from the list of tuples.\n    '''\n    min_highest_count = stdata[0][2]\n    highest_count = 0\n    for x in stdata:\n        if x[1] > highest_count:\n            highest_count = x[1]\n    for x in stdata:\n        if x[1] == highest_count:\n            if x[2] < min_highest_count:\n                min_highest_count = x[2]\n    print(min_highest_count)\n    \ndef max_lowest_count(stdata):\n    '''\n    Write a function to calculate the maximum number of lowest from the list of tuples.\n    '''\n    max_lowest_count = 0\n    lowest_count = 0\n    for x in stdata:\n        if x[1] < lowest_count:\n            lowest_count = x[1]\n    for x in stdata:\n        if x[1] == lowest_count:\n            if x[2] > max_lowest_count:\n                max_lowest_count = x[2]\n    print(max_lowest_count)\n    \ndef min_lowest_count(stdata):\n    '''\n    Write a function to calculate the minimum number of lowest from the list of tuples.\n    '''\n    min_lowest_count = stdata[0][2]\n    lowest_count = 0\n    for x in stdata:\n        if x[1] < lowest_count:\n            lowest_count = x[1]\n    for x in stdata:\n        if x[1] == lowest_count:\n            if x[2] < min_lowest_count:\n                min_lowest_count = x[2]\n    print(min_lowest_count)\n    \ndef max_sorted(stdata):\n    '''\n    Write a function to calculate the maximum number of sorted from the list of tuples.\n    '''\n    max_sorted = 0\n    sorted_count = 0\n    for x in stdata:\n        if x[0] > sorted_count:\n            sorted_count = x[0]\n    for x in stdata:\n        if x[0] == sorted_count:\n            if x[2] > max_sorted:\n                max_sorted = x[2]\n    print(max_sorted)\n    \ndef min_sorted(stdata):\n    '''\n    Write a function to calculate the minimum number of sorted from the list of tuples.\n    '''\n    min_sorted = stdata[0][2]\n    sorted_count = 0\n    for x in stdata:\n        if x[0] > sorted_count:\n            sorted_count = x[0]\n    for x in stdata:\n        if x[0] == sorted_count:\n            if x[2] < min_sorted:\n                min_sorted = x[2]\n    print(min_sorted)\n    \ndef max_left_right(stdata):\n    '''\n    Write a function to calculate the maximum number of left right from the list of tuples.\n    '''\n    max_left_right = 0\n    left_right_count = 0\n    for x in stdata:\n        if x[3] > left_right_count:\n            left_right_count = x[3]\n    for x in stdata:\n        if x[3] == left_right_count:\n            if x[2] > max_left_right:\n                max_left_right "
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata.sort(reverse=True)\n    n,d=0,0\n    for i in range(0,len(stdata)):\n        for j in range(i+1,len(stdata)):\n            if stdata[i][0]<=stdata[j][0] and stdata[i][1]<=stdata[j][1]:\n                n+=1\n        if n>d:\n            d=n\n        else:\n            n=0\n    return d\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = []\n    for t in stdata:\n        aggregate.append(t[2])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def dfs(data, cur, mx, path):\n        if cur == len(data) - 1:\n            if mx < max(path[0][cur], path[1][cur]):\n                mx = max(path[0][cur], path[1][cur])\n            return mx\n        else:\n            mx = dfs(data, cur + 1, mx, path)\n            path[0][cur] = max(data[cur][0], path[0][cur])\n            path[1][cur] = max(data[cur][1], path[1][cur])\n            return dfs(data, cur + 1, mx, path)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(stdata, key = lambda item:item[1])[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max([sum(x) for x in stdata])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    stdata=defaultdict(list)\n    for item in stdata:\n        stdata[item[1]].append(item[0])\n    \n    for k,v in stdata.items():\n        print('{} -> {}'.format(k, max(v)))\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #list_n = []\n    result = []\n    for i in stdata:\n        result.append(i[1])\n    #print(result)\n    #print(max(result))\n    return max(result)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return(max(sum(i) for i in stdata))\n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    return(min(sum(i) for i in stdata))\n    \ndef avg_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    return(sum(sum(i) for i in stdata)/len(stdata))\n    \ndef sum_aggregate(stdata):\n    '''\n    Write a function to calculate the sum aggregate from the list of tuples.\n    '''\n    return(sum(sum(i) for i in stdata))\n    \ndef count_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    return(len(stdata))\n    \ndef count_if(stdata,cond):\n    '''\n    Write a function to calculate the count if condition is met from the list of tuples.\n    '''\n    return(sum(1 for i in stdata if cond(i)))\n    \ndef max_if(stdata,cond):\n    '''\n    Write a function to calculate the maximum if condition is met from the list of tuples.\n    '''\n    return(max(i[0] for i in stdata if cond(i)))\n    \ndef min_if(stdata,cond):\n    '''\n    Write a function to calculate the minimum if condition is met from the list of tuples.\n    '''\n    return(min(i[0] for i in stdata if cond(i)))\n    \ndef avg_if(stdata,cond):\n    '''\n    Write a function to calculate the average if condition is met from the list of tuples.\n    '''\n    return(sum(i[0] for i in stdata if cond(i))/sum(1 for i in stdata if cond(i)))\n    \ndef sum_if(stdata,cond):\n    '''\n    Write a function to calculate the sum if condition is met from the list of tuples.\n    '''\n    return(sum(i[0] for i in stdata if cond(i)))\n    \ndef count_if_count(stdata,cond):\n    '''\n    Write a function to calculate the count if count is met from the list of tuples.\n    '''\n    return(sum(1 for i in stdata if cond(i,i[0])))\n    \ndef max_if_count(stdata,cond):\n    '''\n    Write a function to calculate the maximum if count is met from the list of tuples.\n    '''\n    return(max(i[0] for i in stdata if cond(i,i[0])))\n    \ndef min_if_count(stdata,cond):\n    '''\n    Write a function to calculate the minimum if count is met from the list of tuples.\n    '''\n    return(min(i[0] for i in stdata if cond(i,i[0])))\n    \ndef avg_if_count(stdata,cond):\n    '''\n    Write a function to calculate the average if count is met from the list of tuples.\n    '''\n    return(sum(i[0] for i in stdata if cond(i,i[0]))/sum(1 for i in stdata if cond(i,i[0])))\n    \ndef sum_if_count(stdata,cond):\n    '''\n    Write a function to calculate the sum if count is met from the list of tuples.\n    '''\n    return(sum(i[0] for i in stdata if cond(i,i[0])))\n    \ndef count_if_count_count(stdata,cond):\n    '''\n    Write a function to calculate the count if count is met from the list of tuples.\n    '''\n    return(sum(1 for i in stdata if cond(i,i[0],i[1])))\n    \ndef max_if_count_count(stdata,cond):\n    '''\n    Write a function to calculate the maximum if count is met from the list of tuples.\n    '''\n    return(max(i[0] for i in stdata if cond(i,i[0],i[1])))\n    \ndef min_if_count_count(stdata,cond):\n    '''\n    Write a function to calculate the minimum if count is met from the list of tuples.\n    '''\n    return(min(i[0] for i in stdata if cond(i,i[0],i[1])))\n    \ndef avg_if_count_count(stdata,cond):\n    '''\n    Write a function to calculate the average if count is met from the list of tuples.\n    '''\n    return(sum(i[0] for i in stdata if cond(i,i[0],i[1]))/sum(1 for i in stdata if cond(i,i[0],i[1])))\n    \ndef sum_if_count_count(stdata,cond):\n    '''\n    Write a function to calculate the sum if count is met from the list of tuples.\n    '''\n    return(sum(i[0] for i in stdata if cond(i,i[0],i[1])))\n    \ndef count_if_count_sum(stdata,cond):\n    '''\n    Write a function to calculate the count if sum is met from the list of tuples.\n    '''\n    return(sum(1 for i in stdata if cond(i,i[0],sum(i))))\n    \ndef max_if_count_sum(stdata,cond):\n    '''\n    Write a function to calculate the maximum if sum is met from the list of tuples.\n    '''\n    return(max(i[0] for i in stdata if cond(i,i[0],sum(i))))\n    \ndef min_if_count_sum(stdata,cond):\n    '''\n    Write a function to calculate the minimum if sum is met from the list of tuples.\n    '''\n    return(min(i[0] for i in stdata if cond(i,i[0],sum(i))))\n    \ndef avg_if_count_sum(stdata,cond):\n    '''\n    Write a function to calculate the average if sum is met from the list of tuples.\n    '''\n    return(sum(i[0] for i in stdata if cond(i,i[0],sum(i)))/sum(1 for i in stdata if cond(i,i[0],sum(i))))\n    \ndef sum_if_count_sum(stdata,cond):\n    '''\n    Write a function to calculate the sum if sum is met from the list of tuples.\n    '''\n    return(sum(i[0] for i in stdata if cond(i,i[0],sum(i))))\n    \ndef count_if_sum(stdata,cond):\n    '''\n    Write a function to calculate the count if sum is met from the list of tuples.\n    '''\n    return(sum(1 for i in stdata if cond(i,sum(i))))\n    \ndef max_if_sum(stdata,cond):\n    '''\n    Write a function to calculate the maximum if sum is met from the list of tuples.\n    '''\n    return(max(i[0] for i in stdata if cond(i,sum(i))))\n    \ndef min_if_sum(stdata,cond):\n    '''\n    Write a function to calculate the minimum if sum is met from the list of tuples.\n    '''\n    return(min(i[0] for i in stdata if cond(i,sum(i))))\n    \ndef avg_if_sum(stdata,cond):\n    '''\n    Write a function to calculate the average if sum is met from the list of tuples.\n    '''\n    return(sum(i[0] for i in stdata if cond(i,sum(i)))/sum(1 for i in stdata if cond(i,sum(i))))\n    \ndef sum_if_sum(stdata,cond):\n    '''\n    Write a function to calculate the sum if sum is met from the list of tuples.\n    '''\n    return(sum(i[0"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    max_key = 0\n    for key, val in stdata:\n        if max_val < val:\n            max_val = val\n            max_key = key\n    return max_key, max_val\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n): \n        a = 0\n        for i in range(1, 2**n): \n            if (i>>(n-1)) % 2 == (i>>(n)) % 2: \n                a += 1\n        return a \n    return count(n) \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return count_binary_seq_recur(n, 1)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # base case\n    if (n == 0):\n        return 1\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def sum_bits(x):\n        s = 0\n        while x:\n            s += x % 2\n            x //= 2\n        return s\n    \n    # if n == 1:\n    #     return 2\n    \n    # return sum_bits(n) * 2**n\n    \n    if n == 1:\n        return 2\n    \n    return sum_bits(2**n) * 2**(n-1)\n    \nif __name__ == '__main__':\n    print(count_binary_seq(2))\n    # print(count_binary_seq(3))\n    # print(count_binary_seq(5))"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    x = 1 << (n + 1)\n    s = 0\n    count = 0\n    for i in range(1, x): \n        s = 0\n        for j in range(i, x): \n            s += j \n            if (s >> (n - 1)) == (s & 1): \n                count += 1\n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    ans = 0\n    for x in range(1 << n):\n        for y in range(1 << n):\n            sx = sum(int(i) for i in format(x, '0{}b'.format(n)))\n            sy = sum(int(i) for i in format(y, '0{}b'.format(n)))\n            if sx == sy:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    total = 2**(2*n)\n    for i in range(2**(2*n)):\n        if (i//(2**n))%2 == (i%(2**n))%2:\n            print(i)\n    return total\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return int((2**(2*n))/2)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # First sum of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits is 2^n.\n    # So now we have to find the number of such sequences.\n    # Now we have 2n options at each position.\n    # So, we can do 1 + 2 + 4 + 8 +... + 2^n.\n    # We can do this recursively.\n    # In the base case, if n = 0, we return 1.\n    # Else, we return 2.\n    \n    if n == 0:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    elif not d:\n        return 1\n    else:\n        return max([dict_depth(d[key]) for key in d]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d = eval(str(d))\n    return _dict_depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # if type(d)!= dict:\n    #     return 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return max(map(dict_depth, d.values())) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    try:\n        return 1 + max([dict_depth(item) for item in d.values()])\n    except:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        if len(d) == 0:\n            return 0\n        return 1 + max(dict_depth(d[k]) for k in d)\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(rotations)) :\n        if index < (len(rotations[i]) - 1) :\n            return arr[ranges[rotations[i][index]][0]][ranges[rotations[i][index]][1]]\n        else :\n            index = index - len(rotations[i]) + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Your code here\n    \n    # return the element at a given index\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    element = []\n    for i in range(index-ranges,index+ranges+1) :\n        if i < 0 or i > len(arr) :\n            element.append(-1)\n        else :\n            element.append(arr[i%len(arr)])\n    for i in range(rotations) :\n        element = element[-1:] + element[0:-1]\n    for i in range(ranges) :\n        if element[i] == -1 :\n            print('Element Not Found')\n            return\n    print('Element at index {0} after {1} rotations is {2}'.format(index,rotations,element[ranges]))\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    '''\n    Example 1:\n    Input:\n    arr = [3, 4, 5, 1, 2]\n    ranges = [0, 1, 2, 3, 4]\n    rotations = 2\n    index = 3\n    Output: 4\n    Explanation: \n    Index starts at 0.\n    After rotating the elements, it becomes:\n    arr[0] = 3\n    arr[1] = 4\n    arr[2] = 5\n    arr[3] = 1\n    arr[4] = 2\n    index = 3\n    ranges = [3, 4, 5, 1, 2]\n    After rotating 2 times, it becomes:\n    arr[3] = 1\n    arr[4] = 2\n    index = 2\n    ranges = [1, 2, 3, 4, 5]\n    Now, index is 2. So, the number 4 is at index 2.\n    Example 2:\n    Input:\n    arr = [2, 4, 7, 1, 6, 3]\n    ranges = [1, 2, 3, 4, 5, 6]\n    rotations = 1\n    index = 5\n    Output: 7\n    Explanation: \n    After rotating the elements, it becomes:\n    arr[0] = 2\n    arr[1] = 4\n    arr[2] = 7\n    arr[3] = 1\n    arr[4] = 6\n    arr[5] = 3\n    index = 5\n    ranges = [2, 4, 7, 1, 6, 3]\n    After rotating 1 time, it becomes:\n    arr[0] = 2\n    arr[1] = 4\n    arr[2] = 7\n    arr[3] = 1\n    arr[4] = 6\n    arr[5] = 3\n    index = 5\n    ranges = [2, 4, 7, 1, 6, 3]\n    Now, index is 5. So, the number 7 is at index 5.\n    Example 3:\n    Input:\n    arr = [1, 2, 3]\n    ranges = [0, 1, 2]\n    rotations = 3\n    index = 0\n    Output: 1\n    Explanation: \n    After rotating the elements, it becomes:\n    arr[0] = 2\n    arr[1] = 3\n    arr[2] = 1\n    index = 0\n    ranges = [1, 2, 3]\n    After rotating 3 times, it becomes:\n    arr[0] = 3\n    arr[1] = 1\n    arr[2] = 2\n    index = 0\n    ranges = [1, 2, 3]\n    Finally, index is 0. So, the number 1 is at index 0.\n    '''\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[(index-rotations)%len(arr)]\n    \ndef find_Array_Rotations(arr,ranges,rotations) :\n    '''\n    Write a python function to find array rotations.\n    '''\n    return arr[:rotations] + arr[rotations:len(arr)] + arr[0:rotations]\n    \ndef rotateArray(arr,ranges,rotations) :\n    '''\n    Write a python function to rotate array and find element at a given index.\n    '''\n    \n    rotateArray = find_Array_Rotations(arr,ranges,rotations)\n    \n    for i in range(0,len(rotateArray)) :\n        if i == rotations :\n            print(\"Element at a given index is : \",arr[i])\n            \n    return rotateArray\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index < 0) :\n        return False\n    if(index < ranges[0] - 1) :\n        return arr[index]\n    if(index >= ranges[1] - 1) :\n        return arr[index - ranges[1] + 1]\n    if(index >= ranges[0] - 1) :\n        return arr[index - ranges[0] + 1]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # for i in range(len(ranges)) :\n    #     if(ranges[i] > index) :\n    #         rotations = i\n    #         break\n    return arr[index % len(arr)]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Your code here\n    print(arr,ranges,rotations,index)\n    for i in range(0,rotations) :\n        arr.append(arr[0])\n        del arr[0]\n    #print(arr)\n    return arr[index]\n    \n    \ndef test_function(test_case):\n    arr = test_case[0]\n    ranges = test_case[1]\n    rotations = test_case[2]\n    index = test_case[3]\n    solution = test_case[4]\n        \n    output = find_Element(arr,ranges,rotations,index)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index<=ranges[0]:\n        return arr[0]\n    if index>=ranges[1]:\n        return arr[1]\n    return arr[0]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 :\n        return 0\n    else :\n        if index == 0 :\n            return arr[0]\n        else :\n            if rotations < index :\n                index = index - rotations - 1\n            return arr[index]\n        "
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p')==True:\n            return word\nstart_withp(['test','pizza','pink'])\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if re.match(\"^p.*\",word)]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word[0]=='p']\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    li = words.split(\" \")\n    return_list = []\n    for i in li:\n        if i[0] == 'p':\n            return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [s for s in words if s.startswith('p')]\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # list1 = re.findall(r'[a-z]',words)\n    # print(list1)\n    # for i in list1:\n    #     if i == 'p':\n    #         list1.remove(i)\n    #         list2 = re.findall(r'[a-z]', words)\n    #         break\n    # print(list2)\n    # return list1,list2\n    l = re.findall(r'^p',words)\n    print(l)\n    if l:\n        m = re.search(r'p',words)\n        print(m.start())\n    else:\n        print('No match')\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    return p_words[0],p_words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    for i in range(len(words)):\n        if words[i] == \"p\" :\n            return words[i+1],words[i+2]\n        \n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile(r\"^p\")\n    x = []\n    for word in words:\n        if p.match(word):\n            x.append(word)\n    return x\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word = words\n    for x in range(len(word)):\n        if word[x] == 'p' :\n            print(word[x])\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (n == 0):\n        return 0\n    max_sum = 0\n    for i in range(0, n):\n        prefix_sum = 0\n        for j in range(i, n):\n            if (a[j] >= a[i] and j >= k):\n                prefix_sum += a[j]\n            else:\n                break\n        max_sum = max(max_sum, prefix_sum)\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global s\n    if index == n:\n        return 0\n    \n    if s[index][k]!= 0:\n        return s[index][k]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #print(a, index, k)\n    if index == k:\n        return 0\n    if index < k:\n        return -1\n    \n    max_sum = -1 * int(1e9)\n    for i in range(index, k):\n        max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i+1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == k:\n        return 0\n    if index > k:\n        return 0\n    if index == 0:\n        return 0\n    if index == k - 1:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    max_sum = float('-inf')\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if k <= i:\n                if k == i:\n                    dp[i][j] = a[j - 1]\n                else:\n                    dp[i][j] = max(dp[i][j - 1], a[j - 1] + dp[i - 1][j])\n            else:\n                dp[i][j] = dp[i][j - 1]\n            max_sum = max(max_sum, dp[i][j])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Initialize the global maximum with the first element.\n    max_sum = a[index]\n    max_ending_at = index\n    for i in range(index + 1, k + 1):\n        if a[i] >= a[index]:\n            # If the sum including i is greater than the previously calculated global maximum, update the global maximum.\n            if max_sum < a[i] + max_sum_increasing_subseq(a, n, i, k):\n                max_sum = a[i] + max_sum_increasing_subseq(a, n, i, k)\n                max_ending_at = i\n        else:\n            break\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # If kth element is greater than last index, return 0\n    if k > n:\n        return 0\n    max_sum = 0\n    for i in range(k + 1):\n        if i == k:\n            max_sum = max(max_sum, a[i])\n        else:\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = index\n    while i >= 0 and k > i:\n        if a[i] > a[k]:\n            max_sum = max(max_sum, sum(a[i:k+1]))\n            print(a[i:k+1])\n            i -= 1\n        else:\n            break\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return -1\n    sum = 0\n    for i in range(k):\n        sum += a[i]\n    max = sum\n    for i in range(k, n):\n        sum += a[i] - a[i-k]\n        max = max if max > sum else sum\n    return max\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m] + (tuplex[m:n],) + tuplex[n:]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex2=()\n    for i in range(0,m):\n        tuplex2=tuplex2+(tuplex[i][n],)\n    return tuplex2\ndef colon_matrix(matrix,m,n):\n    '''\n    Write a function to get a colon of a matrix.\n    '''\n    matrix2=[[0 for i in range(0,m)] for i in range(0,n)]\n    for i in range(0,m):\n        for j in range(0,n):\n            matrix2[j][i]=matrix[i][j]\n    return matrix2\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l=[]\n    for i in range(0,m):\n        l.append(0)\n    for x in tuplex:\n        for y in range(0,n):\n            l[y]+=x[y]\n    return tuple(l)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    tuplex_copy = list(tuplex_copy)\n    new_list = []\n    for i in range(m):\n        new_list.append(tuplex_copy[i*n:i*n+n])\n    return tuple(new_list)\n    \ndef get_colon_tuple(n,m):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_list = []\n    for i in range(n):\n        tuplex_list.append(i)\n    return tuple(tuplex_list)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = []\n    for i in range(m):\n        new_tuplex.append([])\n        for j in range(n):\n            new_tuplex[i].append(tuplex[i][j])\n    return new_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)==1:\n        return tuplex\n    else:\n        for i in range(len(tuplex)):\n            tuplex[i] = tuplex[i][m:n]\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result_tuplex = []\n    for i in range(len(tuplex)):\n        if i % (m * n) == 0:\n            result_tuplex.append(tuplex[i])\n    return result_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = []\n    for i in range(len(tuplex)):\n        if i % 2 == 0:\n            x.append(tuplex[i])\n    l = []\n    for i in range(len(x)):\n        l.append(x[i]*n)\n    \n    for i in range(len(l)):\n        if i == len(l) - 1:\n            if m == 1:\n                l[i] = l[i]*m\n            else:\n                l[i] = l[i]*m - m\n        else:\n            if m == 1:\n                l[i] = l[i]*m\n            else:\n                l[i] = l[i]*m - 1\n    return l\ndef colon_tuplex_check(tuplex,m,n):\n    '''\n    Write a function to check the colon of a tuple.\n    '''\n    if m == 1:\n        return tuplex[::2]\n    else:\n        return tuplex[1::2]\ndef colon_tuplex_slide(tuplex,n):\n    '''\n    Write a function to slide a colon of a tuple.\n    '''\n    x = []\n    for i in range(len(tuplex)):\n        if i % 2 == 0:\n            x.append(tuplex[i])\n    l = []\n    for i in range(len(x)):\n        l.append(x[i]*n)\n    \n    for i in range(len(l)):\n        if i == len(l) - 1:\n            l[i] = l[i] + 1\n        else:\n            l[i] = l[i]\n    return l\ndef colon_tuplex_slide_check(tuplex,n):\n    '''\n    Write a function to check the slide colon of a tuple.\n    '''\n    if n == 1:\n        return tuplex[::2]\n    else:\n        return tuplex[1::2]\ndef key_tuplex(tuplex,p):\n    '''\n    Write a function to convert a tuple to a key of another tuple.\n    '''\n    key = deepcopy(tuplex)\n    for i in range(len(tuplex)):\n        key[i] = tuplex[i]*p\n    key = tuple(key)\n    return key\ndef key_tuplex_check(tuplex,p):\n    '''\n    Write a function to check the key of a tuple.\n    '''\n    if p == 1:\n        return tuplex\n    else:\n        return tuplex[::2]\ndef key_tuplex_slide(tuplex,p):\n    '''\n    Write a function to slide a key of a tuple.\n    '''\n    key = deepcopy(tuplex)\n    for i in range(len(tuplex)):\n        key[i] = tuplex[i]*p\n    key = tuple(key)\n    if p == 1:\n        return key\n    else:\n        return key[1::2]\ndef key_tuplex_slide_check(tuplex,p):\n    '''\n    Write a function to check the slide key of a tuple.\n    '''\n    if p == 1:\n        return tuplex\n    else:\n        return tuplex[1::2]\ndef colon_check(tuplex,m):\n    '''\n    Write a function to check if the colon of a tuple is divisible by m.\n    '''\n    if m == 1:\n        return True\n    else:\n        for i in range(len(tuplex)):\n            if i == 0:\n                if (tuplex[i]*m) % 2 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                if (tuplex[i]*m) % 2 == 0:\n                    pass\n                else:\n                    return False\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_list = []\n    for i in range(m):\n        new_list.append(tuplex[i][n])\n    return tuple(new_list)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    if N == 1:\n        return min(nums1[0]*nums2[0], nums1[1]*nums2[0], nums1[0]*nums2[1], nums1[1]*nums2[1])\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import math\n    \n    # Step 1: Sort the two lists\n    nums1.sort()\n    nums2.sort()\n    \n    # Step 2: The result is the product of the first N factors from the two lists\n    result = 1\n    for i in range(N):\n        result *= nums1[i] * nums2[N-1-i]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 1:\n        return min(nums1)*min(nums2)\n    \n    mid = N//2\n    left_prod = large_product(nums1[:mid], nums2[:mid], mid)\n    right_prod = large_product(nums1[mid:], nums2[mid:], N-mid)\n    \n    return max(left_prod, right_prod)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if nums1 == None or nums2 == None or N <= 0:\n        return None\n    result = []\n    for i in range(N):\n        if len(nums1) > i:\n            result.append(nums1[i])\n        if len(nums2) > i:\n            result.append(nums2[i])\n    return max(result)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # create a list to store the results\n    products = []\n    # get the large product of the first list\n    large_product_of_first_list = large_product(nums1[:N])\n    # get the large product of the second list\n    large_product_of_second_list = large_product(nums2[:N])\n    # store the products of the first list and second list\n    products.append(large_product_of_first_list)\n    products.append(large_product_of_second_list)\n    # return the products\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    def largest_product_single_list(nums):\n        if len(nums) == 1:\n            return nums[0]\n        \n        min_element = min(nums)\n        if min_element == 0:\n            return max(nums)\n        \n        for i in range(len(nums)):\n            nums[i] = nums[i]/min_element\n        \n        return max(nums)\n    \n    def largest_product_lists(nums1, nums2):\n        if len(nums1) == 1:\n            return largest_product_single_list(nums1)\n        \n        if len(nums2) == 1:\n            return largest_product_single_list(nums2)\n        \n        min_element = min(largest_product_single_list(nums1), largest_product_single_list(nums2))\n        \n        if min_element == 0:\n            return max(largest_product_single_list(nums1), largest_product_single_list(nums2))\n        \n        for i in range(len(nums1)):\n            nums1[i] = nums1[i]/min_element\n        \n        for i in range(len(nums2)):\n            nums2[i] = nums2[i]/min_element\n        \n        return max(largest_product_single_list(nums1), largest_product_single_list(nums2))\n    \n    if N == 1:\n        return largest_product_single_list(nums1) * largest_product_single_list(nums2)\n    elif N == 2:\n        return largest_product_lists(nums1, nums2)\n    \n    min_element = min(largest_product_single_list(nums1), largest_product_single_list(nums2))\n    \n    if min_element == 0:\n        return max(largest_product_single_list(nums1), largest_product_single_list(nums2))\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]/min_element\n    \n    for i in range(len(nums2)):\n        nums2[i] = nums2[i]/min_element\n    \n    if N % 2 == 0:\n        return largest_product_lists(nums1, nums2)\n    else:\n        return largest_product_lists(nums1, nums2[::-1])\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import heapq\n    \n    def multiply(nums1, nums2, N):\n        import heapq\n        if not nums1 or not nums2:\n            return None\n        nums1, nums2 = nums1[:N], nums2[:N]\n        nums1.sort()\n        nums2.sort()\n        result = []\n        heapq.heappush(result, nums1[-1]*nums2[-1])\n        for i in range(N-1):\n            heapq.heappush(result, nums1[-(i+2)]*nums2[i])\n        return result\n    return multiply(nums1, nums2, N)"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = [nums1[0] * nums2[0], nums1[1] * nums2[1]]\n    for n in range(2, N):\n        prod_so_far = products[n-1] * nums2[n]\n        product = max(products[n-2] * nums1[n], prod_so_far)\n        products.append(product)\n    return products[-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def solution(nums1, nums2, N):\n        nums1.sort()\n        nums2.sort(reverse=True)\n        if len(nums1) < N:\n            return large_product(nums2, nums1, N)\n        return nums1[N-1] * nums2[N-1]\n    \n    return solution(nums1, nums2, N)"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest = []\n    for i in range(N):\n        largest.append(nums1[i] * nums2[i])\n    largest.sort(reverse=True)\n    return largest[:N]\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    elif b == a:\n        return 'The two numbers are equal'\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a > b else b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a < b else b\n    \n    \ndef add(a,b):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return a+b\n    \ndef subtract(a,b):\n    '''\n    Write a python function to subtract two numbers.\n    '''\n    return a-b\n    \ndef multiply(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\n    \ndef divide(a,b):\n    '''\n    Write a python function to divide two numbers.\n    '''\n    return a/b\n    \ndef calculator(a,b,c):\n    '''\n    Write a python function that accepts three numbers and return the result of addition, subtraction, \n    multiplication and division of the first two numbers respectively.\n    '''\n    return add(a,b), subtract(a,b), multiply(a,b), divide(a,b)\n    \n    \ndef print_menu():\n    '''\n    Write a python function to print menu for calculator.\n    '''\n    print('0. Exit')\n    print('1. Maximum')\n    print('2. Minimum')\n    print('3. Add')\n    print('4. Subtract')\n    print('5. Multiply')\n    print('6. Divide')\n    \ndef get_menu_choice():\n    '''\n    Write a python function to get user input for menu choice and return the choice.\n    '''\n    print_menu()\n    choice = int(input('Enter choice: '))\n    return choice\n    \ndef get_numbers():\n    '''\n    Write a python function to get user input for two numbers and return them.\n    '''\n    a = int(input('Enter first number: '))\n    b = int(input('Enter second number: '))\n    return a,b\n    \ndef print_result(a,b,c):\n    '''\n    Write a python function that prints result of calculator.\n    '''\n    print(f'Result: {a}, {b}, {c[0]}, {c[1]}, {c[2]}, {c[3]}')\n    \ndef main():\n    '''\n    Write a main function that calls menu function and gets user input for calculator.\n    '''\n    while True:\n        choice = get_menu_choice()\n        if choice == 0:\n            break\n        a,b = get_numbers()\n        if choice == 1:\n            print_result(a,b,calculator(a,b,maximum(a,b)))\n        elif choice == 2:\n            print_result(a,b,calculator(a,b,minimum(a,b)))\n        elif choice == 3:\n            print_result(a,b,calculator(a,b,add(a,b)))\n        elif choice == 4:\n            print_result(a,b,calculator(a,b,subtract(a,b)))\n        elif choice == 5:\n            print_result(a,b,calculator(a,b,multiply(a,b)))\n        elif choice == 6:\n            print_result(a,b,calculator(a,b,divide(a,b)))\n        \n        \n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\nprint maximum(10,20)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n        \ndef compare_three(a,b,c):\n    '''\n    Write a python function to compare three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>c and b>a:\n        return b\n    elif c>a and c>b:\n        return c\n        \ndef simple_interest(p,r,t):\n    '''\n    Write a Python function to calculate the simple interest.\n    '''\n    print(\"%.2f\"%(p*r*t/100))\n    \ndef length_of_string(s):\n    '''\n    Write a Python function to calculate the length of a string\n    '''\n    print(\"Length of string is {}\".format(len(s)))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = tuple(str1)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(list(str1))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\ndef string_to_list(str1):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    return list(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = str1\n    str1 = list(str1)\n    str1 = tuple(str1)\n    print(str1, str2)\n    return(str1, str2)\n    \n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l1 = list(str1)\n    print(l1)\n    tup1 = tuple(l1)\n    print(tup1)\n    return tup1\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n ^= (n >> 1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n ^= (n >> 1) \n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = n & ~(n - 1)\n    print(i)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= n - 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # The mask is to ignore the bits that are already set.\n    mask = n & (n-1)\n    # Keep applying bit-shift until we reach the first 0.\n    # This is the first unset bit.\n    return n + ~mask\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Compute the length in bits\n    len = n.bit_length()\n    # Return the result\n    return 2**len - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return int((1<<n) - 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & -n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    result = n\n    if n == 0:\n        return 1\n    else:\n        return n + 1\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    if r > h:\n        return -1\n    else:\n        return math.pi * (r**2) * (h/3)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*(h/3)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r > 0 and h > 0:\n        volume = math.pi*r*r*h/3\n        return volume\n    else:\n        return -1\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    if r > 0 and h > 0:\n        volume = math.pi*r*r*h\n        return volume\n    else:\n        return -1\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r > 0:\n        volume = (4/3)*math.pi*r*r*r\n        return volume\n    else:\n        return -1\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    if l > 0 and w > 0 and h > 0:\n        volume = l*w*h\n        return volume\n    else:\n        return -1\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    if l > 0:\n        volume = l*l*l\n        return volume\n    else:\n        return -1\ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    if l > 0 and w > 0 and h > 0:\n        volume = l*w*h\n        return volume\n    else:\n        return -1\ndef area_rectangle(l,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l > 0 and w > 0:\n        area = l*w\n        return area\n    else:\n        return -1\ndef area_triangle(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    if l > 0 and b > 0:\n        area = 0.5*l*b\n        return area\n    else:\n        return -1\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    if r > 0:\n        area = math.pi*r*r\n        return area\n    else:\n        return -1\ndef area_parallelogram(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    if l > 0 and b > 0:\n        area = l*b\n        return area\n    else:\n        return -1\ndef area_trapezium(l1,l2,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    if l1 > 0 and l2 > 0 and h > 0:\n        area = (l1 + l2)*h/2\n        return area\n    else:\n        return -1\ndef area_square(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    if l > 0:\n        area = l*l\n        return area\n    else:\n        return -1\ndef area_rectangle(l,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l > 0 and w > 0:\n        area = l*w\n        return area\n    else:\n        return -1\ndef area_righttriangle(b,h):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    if b > 0 and h > 0:\n        area = (1/2)*b*h\n        return area\n    else:\n        return -1\ndef area_diamond(l):\n    '''\n    Write a function to find the area of a diamond.\n    '''\n    if l > 0:\n        area = math.sqrt(2)*l*l\n        return area\n    else:\n        return -1\ndef area_rhombus(l):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    if l > 0:\n        area = math.sqrt(2)*l*l\n        return area\n    else:\n        return -1\ndef area_kite(l,s):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    if l > 0 and s > 0:\n        area = (3/2)*l*l*s\n        return area\n    else:\n        return -1\ndef area_pentagon(l):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    if l > 0:\n        area = math.sqrt(5)*l*l\n        return area\n    else:\n        return -1\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    if r > 0:\n        area = math.pi*r*r\n        return area\n    else:\n        return -1\ndef area_triangle(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    if l > 0 and b > 0:\n        area = 0.5*l*b\n        return area\n    else:\n        return -1\ndef area_rectangle(l,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l > 0 and w > 0:\n        area = l*w\n        return area\n    else:\n        return -1\ndef area_square(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    if l > 0:\n        area = l*l\n        return area\n    else:\n        return -1\ndef area_parallelogram(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    if l > 0 and b > 0:\n        area = l*b\n        return area\n    else:\n        return -1\ndef area_trapezium(l1,l2,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    if l1 > 0 and l2 > 0 and h > 0:\n        area = (l1 + l2)*h/2\n        return area\n    else:\n        return -1\ndef area_triangle(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    if l > 0 and b > 0:\n        area = 0.5*l*b\n        return area\n    else:\n        return -1\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    if r > 0:\n        area = math.pi*r*r\n        return area\n    else:\n        return -1\ndef area_rhombus(l):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    if l > 0:\n        area = math.sqrt(2)*l*l\n        return area\n    else:\n        return -1\ndef area_diamond(l):\n    '''\n    Write a function to find the area of a diamond.\n    '''\n    if l > 0:\n        area = math.sqrt(2)*l*l\n        return area\n    else:\n        return -1\ndef area_pentagon(l):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    if l > 0:\n        area = math.sqrt(5)*l*l\n        return area\n    else:\n        return -1\ndef area_kite(l,s):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    if l > 0 and s > 0:\n        area = (3/2)*l*l*s\n        return area\n    else:\n        return -1\ndef area_parallelogram(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    if l > 0 and b > 0:\n        area = "
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone=1/3*math.pi*r**2*h\n    print(\"The volume of the cone is: \")\n    print(round(volume_cone,3))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = 1/3 * math.pi * (r**2) * (h/2)\n    print(\"The volume of the cone is: \", volume_cone)\n    return(volume_cone)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3 * math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    v=1/3*pi*r*r*h\n    return v\nprint(\"Volume of the cone with radius 5 and height 10 is:\",volume_cone(5,10))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*(math.pi)*(r**2)*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3 * math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=0\n    volume=(math.pi*(r**2)*h)/3\n    print(\"Volume of cone is: \", volume)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    #Initialize the variable \n    p = 0 \n    \n    #Loop through the variable from the 2^0 to the 2^n and check if it is less than or equal to n\n    for i in range(0,n+1):\n        if 2**i <= n:\n            #Update the variable\n            p = i\n    #Return the variable\n    return p\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # The highest power of 2 can be obtained if we subtract the number from the highest power of 2 and again do the same operation.\n    # The below code implements the algorithm discussed above.\n    # Notice that the value of highest power of 2 is the smallest power of 2 that is greater than n.\n    # Therefore, the below code subtracts 1 from the n.\n    # If n is not a power of 2, the value is the highest power of 2 to the power of 2 that is less than n.\n    power = n-1\n    while power and not (power&(power-1)):\n        power -= 1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2 ** int(n).bit_length() - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 0\n    power_of_2 = 0\n    while power_of_2 <= n:\n        power_of_2 = 2 ** highest_power_of_2\n        highest_power_of_2 += 1\n    return highest_power_of_2 - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_Power = 0\n    while(highest_Power <= n):\n        highest_Power = highest_Power * 2\n    return highest_Power\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # iterate through all power of 2s\n    # keep track of the max power of 2\n    # return max power of 2\n    max_power = 0\n    for i in range(n):\n        if 2**i <= n:\n            max_power = i\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    for i in range(n):\n        if(2**i <= n):\n            power = i\n    return 2**(power)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    j = 0\n    while True:\n        if i <= n:\n            if (i**2) == n:\n                return j\n            else:\n                i = i**2\n                j += 1\n        else:\n            return j\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # return 2**int(log(n,2))\n    return int(log(n,2))\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return 0\n    else:\n        i = 0\n        while n > 1:\n            n = n / 2\n            i = i + 1\n        return i\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n        \n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = [2, 1]\n    lucas_number_index = 0\n    while lucas_number_index < n - 2:\n        new_number = lucas_numbers[-1] + lucas_numbers[-2]\n        lucas_numbers.append(new_number)\n        lucas_number_index += 1\n    return lucas_numbers[-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==1:\n        return 2\n    elif n==2:\n        return 3\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n > 1:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Fill this in.\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return 2*n + 1\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not list_:\n        return []\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for x in list_:\n        result.append(string.format(x))\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_new = []\n    if isinstance(string, str):\n        string_list = string.split(' ')\n        for i in list_:\n            for element in string_list:\n                list_new.append(element.format(i))\n    return list_new\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(len(list_)):\n        list_[index] = string.format(list_[index])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    format_string = \"%s\"\n    # add your function here\n    for i in range(len(list_)):\n        list_[i] = format_string % list_[i]\n    # the function should return the new list\n    return list_\n    \n    "
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(0, len(list_)):\n        list_[i] = string + str(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1, x)) for x in zip(*l2)]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {l1[i]: {l2[i]: l3[i] for i in range(len(l2))} for i in range(len(l1))}\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1, i)) for i in zip(l2, l3)]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1_dict = {}\n    l2_dict = {}\n    l3_dict = {}\n    l1_dict_flatten = {}\n    l2_dict_flatten = {}\n    l3_dict_flatten = {}\n    for l1_val in l1:\n        l1_dict[l1_val] = l2_val\n    for l2_val in l2:\n        l2_dict[l2_val] = l3_val\n    for l3_val in l3:\n        l3_dict[l3_val] = l3_val\n    l1_dict_flatten = flatten_dictionary(l1_dict)\n    l2_dict_flatten = flatten_dictionary(l2_dict)\n    l3_dict_flatten = flatten_dictionary(l3_dict)\n    return {'l1_dict': l1_dict, 'l2_dict': l2_dict, 'l3_dict': l3_dict, 'l1_dict_flatten': l1_dict_flatten, 'l2_dict_flatten': l2_dict_flatten, 'l3_dict_flatten': l3_dict_flatten}\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    def get_dict(l, i):\n        return dict(zip(l[0::i], l[1::i]))\n    \n    return {key: get_dict(value, i) for key, value in zip(l1, l2)}\n    return {key: get_dict(value, i) for key, value in zip(l1, l3)}\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i] : {l2[i] : {l3[i] for i in range(len(l1))} for i in range(len(l2))} for i in range(len(l3))}\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # driver code\n    result = dict()\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l1, l3))\n    d1.update(d2)\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i in range(len(l1)):\n        d = {l2[i]:l3[i]}\n        l1[i].update(d)\n    return l1\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {l1[i]: l2[i] for i in range(len(l1))}\n    d2 = {l1[i]: l3[i] for i in range(len(l1))}\n    print(d1)\n    print(d2)\n    print(dict(zip(l1, zip(l2, l3))))\n    \n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 0:\n        return 0\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def check_max_sum (n):\n        '''\n        Return the max sum if it is possible to use given equation, otherwise return None.\n        '''\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        else:\n            return (2*check_max_sum(n//2) if check_max_sum(n//2) > 3*check_max_sum(n//3) else 3*check_max_sum(n//3)) if check_max_sum(n//3) > 4*check_max_sum(n//4) else 4*check_max_sum(n//4) if check_max_sum(n//4) > 5*check_max_sum(n//5) else 5*check_max_sum(n//5)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    def f(n):\n        if n == 1:\n            return 1\n        if n == 0:\n            return 0\n        if n % 2 == 0:\n            return max((f(n/2) + f(n/2)), n)\n        elif n % 3 == 0:\n            return max((f(n/3) + f(n/3)), n)\n        elif n % 5 == 0:\n            return max((f(n/5) + f(n/5)), n)\n        else:\n            return n\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    maximum = 0\n    for i in range (1, n+1):\n        a = (i*i)\n        b = (i*i*i)\n        c = (i*i*i*i)\n        if (a+b+c) > maximum:\n            maximum = a+b+c\n    return maximum\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1,n+1):\n        current_sum = max(f(i/2) + f(i/3) + f(i/4) + f(i/5),i)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    else:\n        m1 = get_max_sum(n/2)\n        m2 = get_max_sum(n/3)\n        m3 = get_max_sum(n/4)\n        m4 = get_max_sum(n/5)\n        return max( m1 + m2 + m3 + m4, n )\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = n\n    \n    while n > 0:\n        n = n // 2 if n % 2 == 0 else n // 3 if n % 3 == 0 else n // 5 if n % 5 == 0 else n\n        \n        if max_sum < n:\n            max_sum = n\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    import time\n    start_time = time.time()\n    \n    def func(n):\n        #base case\n        if n == 1:\n            return 1\n        #recursive case\n        return max((func(n/2) + func(n/3) + func(n/4) + func(n/5)), n)\n        \n    res = func(n)\n    print(time.time() - start_time)\n    return res\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = n\n    result = n\n    while n>1:\n        if n%2 == 0:\n            max_sum = max(max_sum, int(n/2)+int(n/3)+int(n/4)+int(n/5))\n            n = int(n/2)\n        elif n%3 == 0:\n            max_sum = max(max_sum, int(n/3)+int(n/4)+int(n/5))\n            n = int(n/3)\n        elif n%4 == 0:\n            max_sum = max(max_sum, int(n/4)+int(n/5))\n            n = int(n/4)\n        elif n%5 == 0:\n            max_sum = max(max_sum, int(n/5))\n            n = int(n/5)\n        else:\n            n = int(n-1)\n    return max_sum\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for each_list in input_list[1:]:\n        if len(each_list) > max_length:\n            max_length = len(each_list)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    temp_list = []\n    max_length = 0\n    for sublist in input_list:\n        if len(sublist) > max_length:\n            temp_list = sublist\n            max_length = len(sublist)\n    print(temp_list)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    len_list = []\n    for i in range(len(input_list)):\n        len_list.append(len(input_list[i]))\n    return len_list.index(max(len_list))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if type(item) == type([]):\n            if max_length < len(item):\n                max_length = len(item)\n                max_list = item\n        elif type(item) == type({}):\n            if max_length < len(item):\n                max_length = len(item)\n                max_list = item\n        else:\n            pass\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    longest = []\n    longest_length = 0\n    for sub_list in input_list:\n        if len(sub_list) > longest_length:\n            longest_length = len(sub_list)\n            longest = sub_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    l = len(input_list)\n    max_len = 0\n    lst = None\n    for i in input_list:\n        if len(i)>max_len:\n            max_len = len(i)\n            lst = i\n    return lst\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for l in input_list:\n        if len(l) > max_length:\n            max_length = len(l)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        max_length = max(max_length, len(input_list[i]))\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    hash_table = dict()\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #code\n    tup_set = set(test_tup)\n    if len(tup_set)!= len(test_tup):\n        return False\n    return True\n    \n    \n    \ndef check_distinct_sol2(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n    \nif __name__ == '__main__':\n    print(check_distinct((1,2,3)))\n    print(check_distinct((1,2,2)))\n    print(check_distinct((1,2,3,4,5,6,7,7,8,9,10)))\n    print(check_distinct_sol2((1,2,3)))\n    print(check_distinct_sol2((1,2,3,4,5,6,7,7,8,9,10)))\n    print(check_distinct_sol2((1,2,3,4,5,6,7,7,8,9,10)))\n    "
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        raise Exception(\"FAILED\")\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    import collections\n    str_dict = collections.defaultdict(int)\n    for i in str1:\n        str_dict[i] += 1\n    for i in str1:\n        if str_dict[i] == 1:\n            return i\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    # Create a dictionary to keep track of the characters.\n    char_dict = {}\n    # Iterate through each character in the string.\n    for char in str1:\n        # If the character is not in the dictionary, set its count to 1.\n        if char not in char_dict:\n            char_dict[char] = 1\n        # If the character is in the dictionary, increment its count.\n        else:\n            char_dict[char] += 1\n    # Iterate through the dictionary.\n    for key, value in char_dict.items():\n        # If the value is equal to 1, then return the character.\n        if value == 1:\n            return key\n    # Return none if there is no first unique character in the string.\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    for j in str1:\n        if dict[j] == 1:\n            return j\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    d = {}\n    for i in str1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    first_non_repeating_character = ''\n    for char in str1:\n        if str1.count(char) == 1:\n            first_non_repeating_character = char\n            break\n    return first_non_repeating_character\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    character_dictionary = {}\n    for character in str1:\n        if character not in character_dictionary:\n            character_dictionary[character] = 1\n        else:\n            character_dictionary[character] += 1\n    for character in str1:\n        if character_dictionary[character] == 1:\n            return character\n    return ''\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #str1 = 'beep boop beer!'\n    #return str1[0]\n    #str1 = 'hello'\n    #print(str1.index('l'))\n    \n    \n    #loop over the string\n    #if char in chars:\n    #    return char\n    \n    str2 = {}\n    for char in str1:\n        if char not in str2:\n            str2[char] = 1\n        else:\n            str2[char] += 1\n    \n    for char in str1:\n        if str2[char] == 1:\n            return char\n            \n    \n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return '-'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # str1 = input(\"Enter the string: \")\n    # str2 = list(str1)\n    # str2.sort()\n    # for i in range(len(str2)):\n    #     if str1[i]!= str2[i]:\n    #         return str2[i]\n    # return None\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.search(regex,string)): \n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # return True if the string is empty\n    if len(string) == 0:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_char2(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string): \n        print(\"Valid\") \n    else: \n        print(\"Invalid\") \n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.search(regex,string)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ncheck_char(\"asd\")\ncheck_char(\"asdfd\")\ncheck_char(\"asdfddd\")\ncheck_char(\"asdasd\")\ncheck_char(\"asdasddd\")\ncheck_char(\"adf\")\ncheck_char(\"asdfasdf\")\ncheck_char(\"\")\ncheck_char(\"123321\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdfsdfsdf\")\ncheck_char(\"123321sdf"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n    "
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.search(regex,string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.search(regex, string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0] == string[-1]):\n        return True\n    return False\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(input(\"Enter the first number:\"))\n    b = int(input(\"Enter the second number:\"))\n    c = int(input(\"Enter the third number:\"))\n    if (a<b):\n        if(b<c):\n            print(\"Median is:\",b)\n        else:\n            if(a<c):\n                print(\"Median is:\",c)\n            else:\n                print(\"Median is:\",a)\n    else:\n        if(a<c):\n            if(b<c):\n                print(\"Median is:\",c)\n            else:\n                print(\"Median is:\",b)\n        else:\n            print(\"Median is:\",a)\n    return \n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_median=[a,b,c]\n    list_median.sort()\n    median=list_median[1]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    elif b > c:\n        return c\n    else:\n        return b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x, y, z = sorted((a,b,c))\n    return (x+y) / 2.0\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c:\n        median = b\n    elif a < c < b:\n        median = c\n    elif b < a < c:\n        median = a\n    elif b < c < a:\n        median = c\n    elif c < a < b:\n        median = a\n    elif c < b < a:\n        median = b\n    else:\n        median = c\n    return(median)\n    \n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = None\n    # Fill in the missing code\n    l = [a,b,c]\n    l.sort()\n    print(l)\n    if len(l) % 2 == 1:\n        median = l[int(len(l)/2)]\n    else:\n        median = (l[int(len(l)/2 - 1)] + l[int(len(l)/2)])/2\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if(a < b):\n        if(b < c):\n            return b\n        elif(a < c):\n            return c\n        else:\n            return a\n    elif(b < a):\n        if(a < c):\n            return a\n        elif(b < c):\n            return c\n        else:\n            return b\n    else:\n        return a\n    return 0\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if b>c:\n            return b\n        elif a>c:\n            return a\n        else:\n            return c\n        \n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif c > a:\n            return a\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif c > b:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return((a+b+c)/3)\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    num_list = list(nums)\n    for i in range(0, len(num_list)):\n        sum = 0\n        for j in str(num_list[i]):\n            sum += int(j)\n        num_list[i] = sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum([int(d) for d in str(num)])\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(list(map(lambda x: sum(list(map(lambda y: int(y), list(str(x))))), nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += sum_of_digits(i)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        while i:\n            sum += i%10\n            i /= 10\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    sum_of_digits_list = []\n    for i in nums:\n        sum = 0\n        for num in str(i):\n            sum += int(num)\n        sum_of_digits_list.append(sum)\n    return sum_of_digits_list\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_of_digits_helper(nums):\n        if nums == []:\n            return 0\n        return nums[0] % 10 + sum_of_digits_helper(nums[1:])\n    return sum_of_digits_helper(nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for num in nums:\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        print(sum_of_digits)\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_digits(nums):\n        '''\n        Write a function to compute the sum of digits of each number of a given list.\n        '''\n        def sum_of_digits(nums):\n            '''\n            Write a function to compute the sum of digits of each number of a given list.\n            '''\n            def sum_of_digits(nums):\n                '''\n                Write a function to compute the sum of digits of each number of a given list.\n                '''\n                def sum_of_digits(nums):\n                    '''\n                    Write a function to compute the sum of digits of each number of a given list.\n                    '''\n                    def sum_of_digits(nums):\n                        '''\n                        Write a function to compute the sum of digits of each number of a given list.\n                        '''\n                        def sum_of_digits(nums):\n                            '''\n                            Write a function to compute the sum of digits of each number of a given list.\n                            '''\n                            def sum_of_digits(nums):\n                                '''\n                                Write a function to compute the sum of digits of each number of a given list.\n                                '''\n                                def sum_of_digits(nums):\n                                    '''\n                                    Write a function to compute the sum of digits of each number of a given list.\n                                    '''\n                                    def sum_of_digits(nums):\n                                        '''\n                                        Write a function to compute the sum of digits of each number of a given list.\n                                        '''\n                                        def sum_of_digits(nums):\n                                            '''\n                                            Write a function to compute the sum of digits of each number of a given list.\n                                            '''\n                                            def sum_of_digits(nums):\n                                                '''\n                                                Write a function to compute the sum of digits of each number of a given list.\n                                                '''\n                                                def sum_of_digits(nums):\n                                                    '''\n                                                    Write a function to compute the sum of digits of each number of a given list.\n                                                    '''\n                                                    def sum_of_digits(nums):\n                                                        '''\n                                                        Write a function to compute the sum of digits of each number of a given list.\n                                                        '''\n                                                        def sum_of_digits(nums):\n                                                            '''\n                                                            Write a function to compute the sum of digits of each number of a given list.\n                                                            '''\n                                                            def sum_of_digits(nums):\n                                                                '''\n                                                                Write a function to compute the sum of digits of each number of a given list.\n                                                                '''\n                                                                def sum_of_digits(nums):\n                                                                    '''\n                                                                    Write a function to compute the sum of digits of each number of a given list.\n                                                                    '''\n                                                                    def sum_of_digits(nums):\n                                                                        '''\n                                                                        Write a function to compute the sum of digits of each number of a given list.\n                                                                        '''\n                                                                        def sum_of_digits(nums):\n                                                                            '''\n                                                                            Write a function to compute the sum of digits of each number of a given list.\n                                                                            '''\n                                                                            def sum_of_digits(nums):\n                                                                                '''\n                                                                                Write a function to compute the sum of digits of each number of a given list.\n                                                                                '''\n                                                                                def sum_of_digits(nums):\n                                                                                    '''\n                                                                                    Write a function to compute the sum of digits of each number of a given list.\n                                                                                    '''\n                                                                                    def sum_of_digits(nums):\n                                                                                        '''\n                                                                                        Write a function to compute the sum of digits of each number of a given list.\n                                                                                        '''\n                                                                                        def sum_of_digits(nums):\n                                                                                            '''\n                                                                                            Write a function to compute the sum of digits of each number of a given list.\n                                                                                            '''\n                                                                                            def sum_of_digits(nums):\n                                                                                                '''\n                                                                                                Write a function to compute the sum of digits of each number of a given list.\n                                                                                                '''\n                                                                                                def sum_of_digits(nums):\n                                                                                                    '''\n                                                                                                    Write a function to compute the sum of digits of each number of a given list.\n                                                                                                    '''\n                                                                                                    def sum_of_digits(nums):\n                                                                                                        '''\n                                                                                                        Write a function to compute the sum of digits of each number of a given list.\n                                                                                                        '''\n                                                                                                        def sum_of_digits(nums):\n                                                                                                            '''\n                                                                                                            Write a function to compute the sum of digits of each number of a given list.\n                                                                                                            '''\n                                                                                                            def sum_of_digits(nums):\n                                                                                                                '''\n                                                                                                                Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                '''\n                                                                                                                def sum_of_digits(nums):\n                                                                                                                    '''\n                                                                                                                    Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                    '''\n                                                                                                                    def sum_of_digits(nums):\n                                                                                                                        '''\n                                                                                                                        Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                        '''\n                                                                                                                        def sum_of_digits(nums):\n                                                                                                                            '''\n                                                                                                                            Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                            '''\n                                                                                                                            def sum_of_digits(nums):\n                                                                                                                                '''\n                                                                                                                                Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                                '''\n                                                                                                                                def sum_of_digits(nums):\n                                                                                                                                    '''\n                                                                                                                                    Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                                    '''\n                                                                                                                                    def sum_of_digits(nums):\n                                                                                                                                            '''\n                                                                                                                                            Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                                            '''\n                                                                                                                                            def sum_of_digits(nums):\n                                                                                                                                                '''\n                                                                                                                                                Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                                                '''\n                                                                                                                                                def sum_of_digits(nums):\n                                                                                                                                                    '''\n                                                                                                                                                    Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                                                    '''\n                                                                                                                                                    def sum_of_digits(nums):\n                                                                                                                                                                '''\n                                                                                                                                                                Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                                                                '''\n                                                                                                                                                                def sum_of_digits(nums):\n                                                                                                                                                                        '''\n                                                                                                                                                                        Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                                                                        '''\n                                                                                                                                                                        def sum_of_digits(nums):\n                                                                                                                                                                                    '''\n                                                                                                                                                                                    Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                                                                                    '''\n                                                                                                                                                                                    def sum_of_digits(nums):\n                                                                                                                                                                                        '''\n                                                                                                                                                                                        Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                                                                                        '''\n                                                                                                                                                                                        def sum_of_digits(nums):\n                                                                                                                                                                                            '''\n                                                                                                                                                                                            Write a function to compute the sum of digits of each number of a given list.\n                                                                                                                                                                                            '''\n                                                                                                                                                                                            def sum_of_digits(nums):\n                                                                                                                                                                                                '''\n                                                                                                                                                                                "
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    if len(test_tup1) == 0:\n        return ()\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_val = [x ^ y for x, y in zip(test_tup1, test_tup2)]\n    return xor_val\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x,y: x ^ y, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([(a^b) for a,b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i, j in zip(test_tup1, test_tup2):\n        result += (i ^ j,)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Create a tuple of zeros same size as test_tup1 and test_tup2.\n    # The xor of an empty tuple and any tuple is the empty tuple.\n    xor_tup = tuple([0] * len(test_tup1))\n    # Loop over every element in the tuples and perform xor operation\n    for i in range(len(test_tup1)):\n        xor_tup[i] = test_tup1[i] ^ test_tup2[i]\n    return xor_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code here\n    freq = len(set(test_list))\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    l = test_list[:]\n    uniq = {}\n    for item in l:\n        if item not in uniq:\n            uniq[item] = 1\n        else:\n            uniq[item] += 1\n    return len(uniq)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    print(\"\\n Task 3 - \\n\")\n    unique_list = set(tuple(x) for x in test_list)\n    print(\"Number of unique tuples in the list: {} \\n\".format(len(unique_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Using set comprehension to extract the unique tuples\n    freq = {(i,j) for i,j in test_list}\n    print(freq)\n    \ndef extract_tuples_repetitions(test_list):\n    '''\n    Write a function to extract the number of times each element appears in the given list.\n    '''\n    # using list comprehension to extract the repetition of elements\n    freq = [test_list.count(i) for i in test_list]\n    print(freq)\n    \ndef extract_unique_element_tuples_count(test_list):\n    '''\n    Write a function to extract the number of unique tuples that occur exactly once in the given list.\n    '''\n    # using set comprehension to extract unique tuples\n    freq = {(i,j) for i,j in test_list if test_list.count(i)==1}\n    print(freq)\n    \ndef extract_unique_element_tuples_count_with_given_list(test_list, n):\n    '''\n    Write a function to extract the number of unique tuples that occur exactly n times in the given list.\n    '''\n    # using set comprehension to extract unique tuples\n    freq = {(i,j) for i,j in test_list if test_list.count(i)==n}\n    print(freq)\n    \nif __name__ == '__main__':\n    test_list = [(2,5), (1,2), (4,4), (2,3), (2,3), (1,1)]\n    extract_unique_element_tuples_count_with_given_list(test_list, 2)\n    extract_freq(test_list)\n    extract_tuples_repetitions(test_list)\n    extract_unique_element_tuples_count(test_list)\n    "
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = dict()\n    for item in test_list:\n        if item not in freq_dict.keys():\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass # replace with your code\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(test_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #Initialize the counter for unique frequencies\n    freq_counter = 0\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = {}\n    for item in test_list:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for x in range(len(test_tup1)):\n        result += (test_tup1[x] + test_tup2[x],)\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Unmatched tuples\"\n    else:\n        new_tup = tuple()\n        for i in range(len(test_tup1)):\n            new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    def nested_tuple(test_tup):\n        nested_tup = []\n        for i in test_tup:\n            if isinstance(i, tuple):\n                nested_tup.append(i)\n        return nested_tup\n    \n    def add_nested_tuple(test_tup1, test_tup2):\n        add_tup = []\n        for i in range(len(test_tup1)):\n            if isinstance(test_tup1[i], tuple):\n                add_tup.append(add_nested_tuple(test_tup1[i], test_tup2[i]))\n            else:\n                add_tup.append(test_tup1[i] + test_tup2[i])\n        return tuple(add_tup)\n    \n    nested_tup1 = nested_tuple(test_tup1)\n    nested_tup2 = nested_tuple(test_tup2)\n    \n    add_tup = add_nested_tuple(nested_tup1, nested_tup2)\n    \n    return add_tup\n    \n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #If length of test_tup1 is less than length of test_tup2, then the result will be a list of tuples\n    if len(test_tup1) < len(test_tup2):\n        return [ (test_tup1[i] + test_tup2[i],) for i in range(len(test_tup1)) ]\n    #If length of test_tup1 is more than length of test_tup2, then the result will be a tuple of tuples\n    elif len(test_tup1) > len(test_tup2):\n        return ( test_tup1[i] + test_tup2[i] for i in range(len(test_tup1)) )\n    #If length of test_tup1 and test_tup2 is equal, then the result will be a tuple of tuples\n    else:\n        return ( test_tup1[i] + test_tup2[i] for i in range(len(test_tup1)) )\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = [0] * len(test_tup1)\n    for i in range(len(test_tup1)):\n        result_list[i] = test_tup1[i] + test_tup2[i]\n    return tuple(result_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(sum(x) for x in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x,y: x + y, test_tup1, test_tup2))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a)\n    else:\n        print(b)\nminimum(10,20)    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n        \ndef minimum(a,b):\n    '''\n    Write "
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n    \ndef main():\n    print(\"Hello Python world!\")\n    print(minimum(2,7))\n    print(minimum(2,3))\n    print(minimum(2,2))\n    \nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a\n    if (b < min):\n        min = b\n    return min\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(*argv):\n    '''\n    Write a python function to find the minimum of any number of numbers.\n    '''\n    if len(argv)>0:\n        #import pdb;pdb.set_trace()\n        a=argv[0]\n        for i in range(1,len(argv)):\n            a=minimum(a,argv[i])\n        return a\n    else:\n        return None\ndef maximum(*argv):\n    '''\n    Write a python function to find the maximum of any number of numbers.\n    '''\n    if len(argv)>0:\n        #import pdb;pdb.set_trace()\n        a=argv[0]\n        for i in range(1,len(argv)):\n            a=maximum(a,argv[i])\n        return a\n    else:\n        return None\ndef multiply(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\ndef divide(a,b):\n    '''\n    Write a python function to divide two numbers.\n    '''\n    return a/b\ndef add(a,b):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return a+b\ndef subtract(a,b):\n    '''\n    Write a python function to subtract two numbers.\n    '''\n    return a-b\ndef square(a):\n    '''\n    Write a python function to square a number.\n    '''\n    return a**2\ndef cube(a):\n    '''\n    Write a python function to cube a number.\n    '''\n    return a**3\ndef power(a,b):\n    '''\n    Write a python function to raise a number to a power.\n    '''\n    return a**b\ndef modulus(a,b):\n    '''\n    Write a python function to find the modulus of two numbers.\n    '''\n    return a%b\ndef absolute(a):\n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    return abs(a)\ndef factorial(a):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return math.factorial(a)\ndef floor(a):\n    '''\n    Write a python function to find the floor of a number.\n    '''\n    return math.floor(a)\ndef ceil(a):\n    '''\n    Write a python function to find the ceil of a number.\n    '''\n    return math.ceil(a)\ndef square_root(a):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    return math.sqrt(a)\ndef nth_root(a,b):\n    '''\n    Write a python function to find the nth root of a number.\n    '''\n    return a**(1/b)\ndef exp(a,b):\n    '''\n    Write a python function to find the exponent of a number.\n    '''\n    return a**b\ndef log(a,b):\n    '''\n    Write a python function to find the log of a number.\n    '''\n    return math.log(a,b)\ndef ln(a):\n    '''\n    Write a python function to find the natural log of a number.\n    '''\n    return math.log(a)\ndef trigonometric_functions(a,b):\n    '''\n    Write a python function to find the sine,cosine,tangent of a number.\n    '''\n    return math.sin(a),math.cos(a),math.tan(a)\ndef average(a):\n    '''\n    Write a python function to find the average of any number of numbers.\n    '''\n    return sum(a)/len(a)\ndef pi():\n    '''\n    Write a python function to print pi to 2 decimal places.\n    '''\n    return math.pi\ndef e():\n    '''\n    Write a python function to print e to 2 decimal places.\n    '''\n    return math.e\ndef is_even(a):\n    '''\n    Write a python function to check if a number is even.\n    '''\n    return a%2==0\ndef is_odd(a):\n    '''\n    Write a python function to check if a number is odd.\n    '''\n    return a%2!=0\ndef is_prime(a):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    for i in range(2,a):\n        if a%i==0:\n            return False\n    return True\ndef is_perfect(a):\n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    sum=0\n    for i in range(1,a//2+1):\n        if a%i==0:\n            sum+=i\n    return sum==a\ndef is_abundant(a):\n    '''\n    Write a python function to check if a number is abundant.\n    '''\n    sum=0\n    for i in range(1,a//2+1):\n        if a%i==0:\n            sum+=i\n    return sum>a\ndef is_deficient(a):\n    '''\n    Write a python function to check if a number is deficient.\n    '''\n    sum=0\n    for i in range(1,a//2+1):\n        if a%i==0:\n            sum+=i\n    return sum<a\ndef is_armstrong(a):\n    '''\n    Write a python function to check if a number is an armstrong number.\n    '''\n    sum=0\n    temp=a\n    while temp!=0:\n        sum+=math.pow(temp%10,3)\n        temp//=10\n    return sum==a\ndef is_pallindrome(a):\n    '''\n    Write a python function to check if a number is a pallindrome.\n    '''\n    temp=a\n    rev=0\n    while temp!=0:\n        rev=rev*10+(temp%10)\n        temp//=10\n    return a==rev\ndef is_prime_number_checker(a):\n    '''\n    Write a python function to check if a number is prime number.\n    '''\n    for i in range(2,int(a**0.5)+1):\n        if a%i==0:\n            return False\n    return True\ndef is_palindrome_checker(a):\n    '''\n    Write a python function to check if a number is palindrome.\n    '''\n    return str(a)==str(a)[::-1]\ndef is_triangle(a,b,c):\n    '''\n    Write a python function to check if a number is a triangle.\n    '''\n    return (a+b>c) and (a+c>b) and (b+c>a)\ndef is_pentagonal(a):\n    '''\n    Write a python function to check if a number is a pentagonal number.\n    '''\n    sum=0\n    for i in range(1,(a*((3*a)-1))//2+1):\n        sum+=i\n    return sum==a\ndef is_hexagonal(a):\n    '''\n    Write a python function to check if a number is a hexagonal number.\n    '''\n    sum=0\n    for i in range(1,(a*((2*a)-1))//2+1):\n        sum+=i\n    return sum==a\ndef is_heptagonal(a):\n    '''\n    Write a python function to check if a number is a heptagonal number.\n    '''\n    sum=0\n    for i in range(1,(a*((5*a)-3))//2+1):\n        sum+=i\n    return sum==a\ndef is_octagonal(a):\n    '''\n    Write a python function to check if a number is a octagonal number.\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return(a)\n    else:\n        return(b)\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return(a)\n    else:\n        return(b)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a)\n    else:\n        print(b)\nminimum(1,2)\nminimum(3,2)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuple1:\n        if i in tuplex:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if tuple1 == i:\n            print(\"\\n\\nThe element is found in the tuple\")\n            break\n        else:\n            print(\"\\n\\nThe element is not found in the tuple\")\n            break\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex,tuple) and isinstance(tuple1,tuple): \n        for i in tuplex: \n            for j in tuple1: \n                if i == j: \n                    return True\n                else: \n                    return False\n        \ntuplex = (1,2,3,4) \ntuple1 = (1,2,3) \nprint(check_tuplex(tuplex,tuple1)) "
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for ele in tuplex:\n        if ele == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuple1[0] in tuplex):\n        print(\"True\")\n    else:\n        print(\"False\")\ntuplex = ('a', 'e', 'i', 'o', 'u')\ntuple1 = ('e', 'o')\ncheck_tuplex(tuplex,tuple1)"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return any(element in tuplex for element in tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[1] in tuplex:\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    p = 0\n    while x:\n        p ^= 1\n        x &= x - 1\n    return p\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    num = x\n    sum = 0\n    while (num > 0): \n        sum = sum + num % 10\n        num = num // 10\n    return sum % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    return (x % 2)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2 == 0): \n        return \"Even\"\n    else: \n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(\"The parity of\", x, \"is:\", \"even\") \n    else: \n        print(\"The parity of\", x, \"is:\", \"odd\") \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if(x[i]==x[j]):\n                if(i==j):\n                    return \"Odd\"\n                elif(i!=j):\n                    return \"Even\"\n            \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2 == 0):\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #Check if the number is even. If even, return false.\n    if(x % 2 == 0): \n        return False\n    else: \n        return True\n    \ndef find_Base(x):\n    '''\n    Write a python function to find the base of a given number.\n    '''\n    base = 2\n    while(base < x):\n        if(x % base == 0):\n            return base\n        base += 1\n    return x\n    \ndef find_Consecutive_Pairs(num):\n    '''\n    Write a python function to find whether there are two consecutive odd numbers in the given number.\n    '''\n    odds = 0\n    for i in num:\n        if(i % 2!= 0):\n            odds += 1\n            if(odds == 2):\n                return True\n    return False\n    \ndef find_Base_Consecutive_Pairs(num):\n    '''\n    Write a python function to find whether there are two consecutive odd numbers in the given number and their base.\n    '''\n    odds = 0\n    for i in num:\n        if(i % 2!= 0):\n            odds += 1\n            if(odds == 2):\n                base = find_Base(i)\n                return [True, base]\n    return [False, 0]\n    \ndef find_Even_Sum(num):\n    '''\n    Write a python function to find the sum of the even numbers in the given number.\n    '''\n    sum = 0\n    for i in num:\n        if(i % 2 == 0):\n            sum += i\n    return sum\n    \ndef find_Base_Even_Sum(num):\n    '''\n    Write a python function to find the sum of the even numbers in the given number and their base.\n    '''\n    sum = 0\n    for i in num:\n        if(i % 2 == 0):\n            sum += i\n    base = find_Base(sum)\n    return [True, base]\n    \ndef find_Number_of_Pairs(num):\n    '''\n    Write a python function to find the number of pairs in the given number.\n    '''\n    count = 0\n    for i in range(0, len(num)):\n        for j in range(i+1, len(num)):\n            if(num[i] == num[j]):\n                count += 1\n    return count\n    \ndef find_Base_Number_of_Pairs(num):\n    '''\n    Write a python function to find the number of pairs in the given number and their base.\n    '''\n    count = 0\n    for i in range(0, len(num)):\n        for j in range(i+1, len(num)):\n            if(num[i] == num[j]):\n                count += 1\n                base = find_Base(num[i])\n    return [True, base, count]\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1 == 0: \n        return False\n    return True\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2==1\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    n.sort()\n    for i in range(len(n) - 1):\n        if int(n[i]) > int(n[i + 1]):\n            n[i], n[i + 1] = n[i + 1], n[i]\n            n = ''.join(n)\n            return int(n)\n    return 0\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    import copy\n    n = [int(d) for d in str(n)]\n    pivot = copy.copy(n)\n    pivot.sort(reverse=True)\n    n = [str(d) for d in n]\n    n = ''.join(n)\n    pivot = [str(d) for d in pivot]\n    pivot = ''.join(pivot)\n    if n < pivot:\n        return int(pivot)\n    else:\n        return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # find the index of largest digit\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    # find the index of the smallest digit, at the front of the array\n    for j in range(len(n) - 1, 0, -1):\n        if n[j] < n[i - 1]:\n            break\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    list_n = list(str(n))\n    list_n.reverse()\n    print(list_n)\n    return \"\".join(list_n)\n    "
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_list = [int(x) for x in str(n)]\n    result_list = []\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            if num_list[j] < num_list[i]:\n                result_list.append(num_list[j])\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                break\n    return int(''.join(str(x) for x in result_list))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return int(str(n)[::-1])\n    \ndef test_rearrange_bigger():\n    assert rearrange_bigger(857) == 8578\n    assert rearrange_bigger(1113) == 11131\n    assert rearrange_bigger(100) == 101\n    assert rearrange_bigger(1234) == 4321\n    assert rearrange_bigger(12345) == 54321\n    assert rearrange_bigger(999) == 9999\n    assert rearrange_bigger(111) == 1110\n    assert rearrange_bigger(0) == 0\n    assert rearrange_bigger(1111) == 11110\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = list(str(n))\n    num.reverse()\n    if num[0] == '0':\n        num = num[1:]\n        new_num = ''.join(num)\n        return int(new_num)\n    else:\n        return '-1'\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    s = list(s)\n    if len(s) == 1:\n        return n\n    p = len(s)\n    for i in range(p-1):\n        if s[i] > s[i+1]:\n            s[i], s[i+1] = s[i+1], s[i]\n            s = ''.join(s)\n            return int(s)\n    return 0\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    import functools\n    if n == 0:\n        return -1\n    n = str(n)\n    return functools.reduce(lambda a,b: a+b, sorted([n[i:i+len(n)//2] for i in range(0, len(n), len(n)//2)]), '')\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    import re\n    if n < 10:\n        return str(n)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    elif len(nums1) == 1 or len(nums2) == 1:\n        return sorted(heapq.merge(nums1, nums2, key=lambda x:x[0]))[:k]\n    elif k == 0:\n        return []\n    elif k == 1:\n        return sorted(heapq.merge(nums1, nums2, key=lambda x:x[0]+x[1]), key=lambda x:x[0])[:k]\n    else:\n        count = 0\n        arr = []\n        sorted_arr = sorted(heapq.merge(nums1, nums2, key=lambda x:x[0]+x[1]), key=lambda x:x[0])\n        for i in range(len(sorted_arr)-1):\n            if count < k:\n                arr.append([sorted_arr[i],sorted_arr[i+1]])\n                count += 1\n        return arr\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    heap = []\n    heapq.heapify(heap)\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (-num1-num2, (num1, num2)))\n            elif heap[0][1] == (num1, num2):\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-num1-num2, (num1, num2)))\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    count = 0\n    for n1 in nums1:\n        for n2 in nums2:\n            if count < k:\n                heapq.heappush(heap,(-abs(n1-n2),(n1,n2)))\n                count += 1\n            else:\n                if -abs(n1-n2) < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap,(-abs(n1-n2),(n1,n2)))\n    return [heapq.heappop(heap)[1] for _ in range(k) if len(heap)>0]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return []\n    heap = []\n    n1, n2 = len(nums1), len(nums2)\n    for i in range(n1):\n        heapq.heappush(heap, (-nums1[i] - nums2[0], i, 0))\n    \n    result = []\n    for _ in range(k):\n        if not heap: break\n        val, i1, i2 = heapq.heappop(heap)\n        result.append([nums1[i1], nums2[i2]])\n        if i2 < n2 - 1:\n            heapq.heappush(heap, (-nums1[i1] - nums2[i2 + 1], i1, i2 + 1))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    n = n1 + n2\n    if n == 0:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # nums1 = [1,7,11]\n    # nums2 = [2,4,6]\n    # k = 3\n    \n    smallest = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            smallest.append((nums1[i],nums2[j]))\n    smallest.sort()\n    return smallest[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Method: Time: O(n+m) || Space: O(k)\n    # where n is the length of nums1, m is the length of nums2, k is the number of smallest pairs\n    result = []\n    if not nums1 or not nums2:\n        return result\n    if k >= len(nums1) * len(nums2):\n        return []\n    min_heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    for i in range(k):\n        _, x, y = heapq.heappop(min_heap)\n        result.append((nums1[x], nums2[y]))\n        if y + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[x] + nums2[y + 1], x, y + 1))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    queue = []\n    dict = {}\n    ans = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if (nums1[i] + nums2[j]) in dict:\n                dict[nums1[i] + nums2[j]].append((nums1[i], nums2[j]))\n            else:\n                dict[nums1[i] + nums2[j]] = [(nums1[i], nums2[j])]\n    for i in nums1:\n        if i in dict:\n            for j in nums2:\n                if (i + j) in dict:\n                    for z in dict[i+j]:\n                        heapq.heappush(queue, z)\n                    if len(queue) > k:\n                        heapq.heappop(queue)\n    return list(queue)\ndef n_smallest_pairs(nums1, nums2, n):\n    '''\n    Write a function to find n smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    queue = []\n    dict = {}\n    ans = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if (nums1[i] + nums2[j]) in dict:\n                dict[nums1[i] + nums2[j]].append((nums1[i], nums2[j]))\n            else:\n                dict[nums1[i] + nums2[j]] = [(nums1[i], nums2[j])]\n    for i in nums1:\n        if i in dict:\n            for j in nums2:\n                if (i + j) in dict:\n                    for z in dict[i+j]:\n                        heapq.heappush(queue, z)\n                    if len(queue) > n:\n                        heapq.heappop(queue)\n    return list(queue)\ndef k_largest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of largest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    queue = []\n    dict = {}\n    ans = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if (nums1[i] + nums2[j]) in dict:\n                dict[nums1[i] + nums2[j]].append((nums1[i], nums2[j]))\n            else:\n                dict[nums1[i] + nums2[j]] = [(nums1[i], nums2[j])]\n    for i in nums1:\n        if i in dict:\n            for j in nums2:\n                if (i + j) in dict:\n                    for z in dict[i+j]:\n                        heapq.heappush(queue, z)\n                    if len(queue) > k:\n                        heapq.heappop(queue)\n    return list(queue)\ndef n_largest_pairs(nums1, nums2, n):\n    '''\n    Write a function to find n largest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    queue = []\n    dict = {}\n    ans = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if (nums1[i] + nums2[j]) in dict:\n                dict[nums1[i] + nums2[j]].append((nums1[i], nums2[j]))\n            else:\n                dict[nums1[i] + nums2[j]] = [(nums1[i], nums2[j])]\n    for i in nums1:\n        if i in dict:\n            for j in nums2:\n                if (i + j) in dict:\n                    for z in dict[i+j]:\n                        heapq.heappush(queue, z)\n                    if len(queue) > n:\n                        heapq.heappop(queue)\n    return list(queue)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pairs = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            pairs.append(tuple(sorted([list1[i],list1[j]])))\n    print('Number of pairs: ',len(pairs))\n    pairs.sort(key = lambda tup: tup[0]*tup[1])\n    return pairs[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = min(list1, key = lambda x: x[0]*x[1])\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    new_list=[]\n    for i in range(0,len(list1),2):\n        new_list.append(list1[i])\n    print(new_list)\n    min_product=1\n    for i in new_list:\n        if(i>=0):\n            product=i*new_list[new_list.index(i)+1]\n            if(product<min_product):\n                min_product=product\n    print(\"Minimum product of the list is:\",min_product)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    def min_product(tuple1):\n        '''\n        Write a function to find the minimum product from the pairs of numbers within a tuple.\n        '''\n        def min_prod(tuple2):\n            '''\n            Write a function to find the minimum product from the pairs of numbers within a tuple.\n            '''\n            tuple3 = ()\n            for i in range(len(tuple2)):\n                for j in range(i+1, len(tuple2)):\n                    product = tuple2[i] * tuple2[j]\n                    tuple3 = tuple3 + (product,)\n            return min(tuple3)\n        return min_prod(tuple1)\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = min_product(list1[i] + list1[j])\n            list2.append(product)\n    return min(list2)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #return the min of (list1[i][0] * list1[i][1] for i in range(len(list1)))\n    return (list1[0][0] * list1[0][1]) if list1 else 0\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # 1st option\n    return min([x[0] * x[1] for x in list1])\n    # 2nd option\n    # return min([x[0]*x[1] for x in list1 if x[0] * x[1]!= 0])\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0][0] * list1[0][1]\n    for pair in list1:\n        if pair[0] * pair[1] < min_prod:\n            min_prod = pair[0] * pair[1]\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = min(list1, key = lambda x: x[0] * x[1])\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Compute the minimum product\n    product = list1[0][0]*list1[0][1]\n    for i in range(1,len(list1)):\n        if product>list1[i][0]*list1[i][1]:\n            product = list1[i][0]*list1[i][1]\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = [ (1,2), (3,4), (5,6) ]\n    min_tuple = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            x = list1[i][0] * list1[j][1]\n            y = list1[i][1] * list1[j][0]\n            if x < y:\n                min_tuple.append(list1[i])\n            else:\n                min_tuple.append(list1[j])\n    print(min_tuple)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minv = listval[0]\n    for x in listval:\n        if x < minv:\n            minv = x\n    return minv\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 'List is empty'\n    minv = listval[0]\n    for val in listval:\n        if minv > val:\n            minv = val\n    return minv\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    return min(listval)\n    \nlistval = [2,8,-2,8,3,0]\nprint(min_val(listval))\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #res=[]\n    #for i in listval:\n    #    if type(i) == list:\n    #        for j in i:\n    #            res.append(j)\n    #    else:\n    #        res.append(i)\n    #return min(res)\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = None\n    for i in range(len(listval)):\n        if min == None:\n            min = listval[i]\n        elif listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if (min_val > listval[i]):\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == [] :\n        return 'Empty list'\n    else:\n        minvalue = listval[0]\n        for i in listval:\n            if i < minvalue:\n                minvalue = i\n        return minvalue\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return False\n    else:\n        m = listval[0]\n        for i in listval:\n            if i<m:\n                m=i\n        return m\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join([word.title() for word in word.split('_')])\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([w[0].upper()+w[1:] for w in word.split('_')])\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return '_'.join([w.lower() for w in word.split('_')])\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for i, j in enumerate(word):\n        if j == \"_\":\n            if i!= 0:\n                new_word += j\n            else:\n                new_word += j.upper()\n        else:\n            new_word += j\n    return new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(map(str.capitalize, word.split('_')))\ndef generate_hashtag(s):\n    '''\n    Create a hashtag string from the given string s.\n    '''\n    return '#'+''.join(map(str.capitalize, s.split()))\ndef sort_squares(arr):\n    '''\n    Write a method that takes an array of numbers and returns an array of the squares of those numbers sorted in ascending order.\n    '''\n    return sorted(list(map(lambda x: x**2, arr)))\ndef reverse_vowels(s):\n    '''\n    Write a method that takes a string and returns a string in which all vowels (a, e, i, o, u) are reversed.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return ''.join([i if i not in vowels else i[::-1] for i in s])\ndef first_unique_character(s):\n    '''\n    Write a function that takes a string and returns the first non-repeating character in it.\n    '''\n    for i in range(len(s)):\n        if s[i] not in s[i+1:] and s[i] not in s[:i]:\n            return s[i]\n    return''\ndef string_bits(str):\n    '''\n    Given a string, return an array of the\n    characters that show up in the string\n    3 times.\n    '''\n    if len(str) < 3:\n        return str\n    else:\n        return [str[i] for i in range(len(str)-2) if str[i:i+3] == str[i+1:i+3][::-1]]\ndef is_valid_coordinates(coordinates):\n    '''\n    Write a function to determine whether the given string is a valid\n    coordinates. The coordinates are valid if:\n    1. It is a string.\n    2. It has at least one letter.\n    3. It has no more than 6 characters.\n    4. It only contains digits.\n    5. It contains exactly 2 decimal places.\n    6. It contains exactly 1 comma.\n    7. It contains exactly 1 letter.\n    8. It contains exactly 2 decimals.\n    9. It starts with 0.\n    10. It is a valid IPv4 address.\n    '''\n    if coordinates.isdigit():\n        return False\n    if len(coordinates) < 3:\n        return False\n    if not re.match('^[0-9]{,6}$', coordinates):\n        return False\n    if coordinates.count(',')+coordinates.count('.') > 1:\n        return False\n    if coordinates.count('.') > 2:\n        return False\n    if len(coordinates) > 6:\n        return False\n    if not re.match('^[0-9]*$', coordinates):\n        return False\n    return True\ndef is_valid_coordinates_2(s):\n    return s and re.match('^[+-]?(?:[1-8]?\\d(?:\\.\\d*)?)$', s) is not None\ndef rotate_array(nums, k):\n    '''\n    Given an array and a number k, rotate the array to the right k times.\n    '''\n    k = k % len(nums)\n    return nums[-k:]+nums[:-k]\ndef move_zeros(nums):\n    '''\n    Given an array of numbers, move all instances of zeros to the end\n    while maintaining the relative order of the non-zero numbers.\n    '''\n    count = nums.count(0)\n    return nums + [0]*count\ndef is_valid_coordinates_3(coordinates):\n    return re.match(r'^[+-]?(?:[1-9][0-9]*|0)$', coordinates) and len(coordinates) >= 2\ndef is_valid_coordinates_4(coordinates):\n    return re.match(r'^[0-9]{1,3}(\\.0{0,1}[0-9]{1,3}|\\.[0-9]{1,3})$', coordinates) and len(coordinates) >= 2\ndef is_palindrome(s):\n    '''\n    Write a function to determine whether a given string is a\n    palindrome.\n    '''\n    return s == s[::-1]\ndef reverse_words_in_a_string(s):\n    '''\n    Write a function to reverse words in a given string.\n    '''\n    return''.join(s.split()[::-1])\ndef reverse_words_in_a_string_2(s):\n    '''\n    Write a function to reverse words in a given string.\n    '''\n    return''.join(reversed(s.split()))\ndef remove_duplicates_from_sorted_array(nums):\n    '''\n    Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.\n    '''\n    if len(nums) < 2:\n        return len(nums)\n    i = 1\n    while i < len(nums):\n        if nums[i] == nums[i-1]:\n            del nums[i]\n        else:\n            i += 1\n    return len(nums)\ndef single_number(nums):\n    '''\n    Given an array of integers, every element appears twice except for one. Find that single one.\n    '''\n    return reduce(lambda a, b: a ^ b, nums)\ndef first_unique_number(nums):\n    '''\n    Given a non-empty array of integers, return the first \n    unique number in this array.\n    '''\n    d = {}\n    for i in nums:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i] == 1:\n            return i\ndef get_next_greater_element(nums):\n    '''\n    Given an array of integers, replace every number by the next greater\n    element in the array. The next greater element of x is the first \n    element greater than x in the array.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[i]:\n                nums[i] = nums[j]\n                break\n    return nums\ndef is_valid_parenthesis(s):\n    '''\n    Write a function to check whether a given string is a\n    valid parenthesis.\n    '''\n    d = {'}': '{', ')': '(', ']': '['}\n    stack = []\n    for i in s:\n        if i in d.values():\n            stack.append(i)\n        elif i in d.keys():\n            if not stack or stack.pop()!= d[i]:\n                return False\n        else:\n            return False\n    if stack:\n        return False\n    return True\ndef get_least_numbers(arr, k):\n    '''\n    Given an array arr and a number k, \n    find the k most frequent numbers in the array\n    '''\n    return [num for num, _ in collections.Counter(arr).most_common(k)]\ndef product_of_all_other_elements(nums):\n    '''\n    Given an array nums containing n + 1 integers where each\n    integer is between 1 and n (inclusive), prove that at least\n    one duplicate number must exist. Assume that there is only\n    one duplicate number, find the duplicate one.\n    '''\n    nums = set(nums)\n    for i in nums:\n        if nums.__contains__(i):\n            return i\ndef is_unique_characters(s):\n    '''\n    Given a string, determine if a permutation of the string could form a \n    valid palindrome.\n    '''\n    return len(set(s)) == len(s)\ndef longest_substring_without_repeating_characters(s):\n    '''\n    Given a string, find th"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake = word.split(\"_\")\n    # print(snake)\n    if len(snake) == 1:\n        return word.lower()\n    else:\n        return ''.join(snake[0].lower() + word[1:].title())\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    first_cap_re = re.compile(r'(.)([A-Z][a-z]+)')\n    all_cap_re = re.compile('([a-z0-9])([A-Z])')\n    if word == \"\":\n        return \"\"\n    first_word = word[0]\n    rest_word = word[1:]\n    return first_word + all_cap_re.sub(r'\\1_\\2', rest_word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # snake_to_camel(\"the_stealth_warrior\")\n    # Output: \"theStealthWarrior\"\n    # snake_to_camel(\"the_stealth_warrior_scripts\")\n    # Output: \"theStealthWarriorScripts\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if isinstance(word, str):\n        return re.sub(r'(_\\w)', lambda match: match.group(1)[1].upper(), word)\n    else:\n        return word\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    a = []\n    for i in l:\n        if i%2 == 0:\n            a.append(i)\n    return a"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(filter(lambda a: a%2 == 0, l))\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            l1.append(l[i])\n    return l1\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    temp_list = []\n    for i in l:\n        if i % 2 == 0:\n            temp_list.append(i)\n    return temp_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    lst = []\n    for item in l:\n        if item % 2 == 0:\n            lst.append(item)\n    return lst\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for i in l:\n        if i % 2!= 0:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for item in l:\n        if item % 2 == 0:\n            new_list.append(item)\n    return new_list\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \n    \n    \ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list."
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # your code here\n    new_list = [item for item in l if item % 2 == 0]\n    return new_list\n    \n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # For given list [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\n    # return 3rd element from tuple: ('c', 3)\n    return [list1[i] for i in range(n, len(list1), 1)][0]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [list1[i][n] for i in range(len(list1))]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][0]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < len(list1):\n        # print(list1[n])\n        return list1[n]\n    else:\n        print(\"not in range\")\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    index = 0\n    for item in list1:\n        if index == n:\n            return item\n        index += 1\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # for i in range(len(list1)):\n    #     if i == n:\n    #         return list1[i]\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n        \nlist1 = [1,2,3,4,5,6,7,8,9]\nlist2 = [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len(list1+list2) == len(set(list1+list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                result.append(i)\n                break\n    print(result)\n    if result == []:\n        print(\"No element is overlapping\")\n    else:\n        print(\"Element is overlapping\")\nlist1 = []\nn = int(input(\"enter the number of elements of list 1\"))\nfor i in range(0,n):\n    ele = int(input())\n    list1.append(ele)\nlist2 = []\nm = int(input(\"enter the number of elements of list 2\"))\nfor i in range(0,m):\n    ele = int(input())\n    list2.append(ele)\noverlapping(list1,list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            return False\n    \nlist1 = [1,2,3,4,5]\nlist2 = [6,7,8]\nprint(overlapping(list1,list2))"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print('True')\n            return True\n    print('False')\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item1 in list1:\n        for item2 in list2:\n            if item1==item2:\n                return \"Yes\"\n    return \"No\"\n    \ndef overlapping_without_using_in(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item1 in list1:\n        for item2 in list2:\n            if item1==item2:\n                return True\n    return False\n    \ndef how_many_times_repeated(list1):\n    '''\n    Write a python function to return the count of the number of items repeated in the list.\n    '''\n    count=0\n    for item in list1:\n        if list1.count(item)>1:\n            count+=1\n    return count\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    print(list1)\n    print(list2)\n    if any(i in list1 for i in list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count=0\n    for i in list1:\n        if i in list2:\n            count+=1\n    if count>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if len(set1.intersection(set2))>0:\n        return True\n    else:\n        return False\n    \n    \ndef main():\n    '''\n    Write a python program to find the value of the overlapping function using lists\n    '''\n    list1 = [2,4,5,6,8,9,12,13,14,17,19,21,22]\n    list2 = [1,5,6,7,8,9,10,12,13,14,17,18,19,20]\n    print(overlapping(list1,list2))\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    highest_product = arr[-1]*arr[-2]\n    print(highest_product)\n    return highest_product\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    first = 0\n    second = 0\n    third = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            first = arr[i]\n            second = arr[j]\n            if (first*second > third):\n                third = first*second\n    return third\nprint(\"Maximum product is:\",max_Product([10, 3, 5, 6, 20]))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(0, n-1):\n        for j in range(i + 1, n):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    a = max(arr)\n    b = min(arr)\n    x = a * b\n    print(\"Maximum product of pair with highest product is: \", x)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    return max([i*j for i in arr for j in arr if arr.index(i)!= arr.index(j)])\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    if n <= 1: \n        return -1\n    max_product = -(float(\"inf\")) \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort() \n    return (arr[-1] * arr[-2]) \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    arr.sort()\n    # arr.sort(reverse=True)\n    # print(arr)\n    maxProduct = arr[0] * arr[1] \n    for i in range(0,n-1): \n        for j in range(i+1,n): \n            if arr[i] * arr[j] > maxProduct: \n                maxProduct = arr[i] * arr[j] \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            max_product = max(max_product, arr[i]*arr[j])\n    return max_product\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Intialise first common element as -1\n    first_common = -1\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Tuple = Input\n    first_tuple = set(tuple(x) for x in Tuple)\n    print(first_tuple)\n    for x in Tuple:\n        if x[0] in first_tuple:\n            print(x[0])\n            break\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        for j in range(i+1,len(Input)): \n            if Input[i][0]==Input[j][0]: \n                new_list.append(Input[i])\n    return new_list\ndef remove_duplicate(Input): \n    '''\n    Write a function to remove duplicates from given list of tuple.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        if Input[i] not in new_list: \n            new_list.append(Input[i])\n    return new_list\ndef remove_duplicate_values(Input): \n    '''\n    Write a function to remove duplicated values from given list of tuple.\n    '''\n    new_list = []\n    for i in Input: \n        if i not in new_list: \n            new_list.append(i)\n    return new_list\ndef remove_duplicate_keys(Input): \n    '''\n    Write a function to remove duplicated keys from given list of tuple.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        if Input[i][0] not in new_list: \n            new_list.append(Input[i][0])\n    return new_list\ndef remove_duplicate_values_in_tuple(Input): \n    '''\n    Write a function to remove duplicated values from given list of tuple.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        if Input[i] not in new_list: \n            new_list.append(Input[i])\n    return new_list\ndef remove_duplicate_keys_in_tuple(Input): \n    '''\n    Write a function to remove duplicated keys from given list of tuple.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        if Input[i][0] not in new_list: \n            new_list.append(Input[i][0])\n    return new_list\ndef remove_keys(Input, key): \n    '''\n    Write a function to remove keys from list of tuple.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        if Input[i][0]!=key: \n            new_list.append(Input[i])\n    return new_list\ndef remove_keys_in_tuple(Input, key): \n    '''\n    Write a function to remove keys from list of tuple.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        if Input[i][0]!=key: \n            new_list.append(Input[i])\n    return new_list\ndef remove_values(Input, value): \n    '''\n    Write a function to remove values from list of tuple.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        if Input[i][1]!=value: \n            new_list.append(Input[i])\n    return new_list\ndef remove_values_in_tuple(Input, value): \n    '''\n    Write a function to remove values from list of tuple.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        if Input[i][1]!=value: \n            new_list.append(Input[i])\n    return new_list\ndef tuple_to_list(Input): \n    '''\n    Write a function to convert list of tuple to list.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        new_list.append(Input[i][1])\n    return new_list\ndef tuple_to_list_in_tuple(Input): \n    '''\n    Write a function to convert list of tuple to list.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        new_list.append(Input[i][1])\n    return new_list\ndef remove_duplicates_in_list(Input): \n    '''\n    Write a function to remove duplicated values from list.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        if Input[i] not in new_list: \n            new_list.append(Input[i])\n    return new_list\ndef remove_duplicates_in_list_in_tuple(Input): \n    '''\n    Write a function to remove duplicated values from list.\n    '''\n    new_list = []\n    for i in range(0,len(Input)): \n        if Input[i] not in new_list: \n            new_list.append(Input[i])\n    return new_list\ndef count_occurences_in_list(Input): \n    '''\n    Write a function to count occurences of given element in given list.\n    '''\n    new_list = []\n    count = 0\n    for i in range(0,len(Input)): \n        if Input[i] not in new_list: \n            count+=1\n    return count\ndef count_occurences_in_list_in_tuple(Input): \n    '''\n    Write a function to count occurences of given element in given list.\n    '''\n    new_list = []\n    count = 0\n    for i in range(0,len(Input)): \n        if Input[i] not in new_list: \n            count+=1\n    return count\ndef count_occurences_in_list_without_duplicates(Input): \n    '''\n    Write a function to count occurences of given element in given list without duplicates.\n    '''\n    new_list = []\n    count = 0\n    for i in range(0,len(Input)): \n        if Input[i] not in new_list: \n            count+=1\n    return count\ndef count_occurences_in_list_without_duplicates_in_tuple(Input): \n    '''\n    Write a function to count occurences of given element in given list without duplicates.\n    '''\n    new_list = []\n    count = 0\n    for i in range(0,len(Input)): \n        if Input[i] not in new_list: \n            count+=1\n    return count\ndef count_occurences_in_tuple(Input): \n    '''\n    Write a function to count occurences of given element in given list.\n    '''\n    count = 0\n    for i in range(0,len(Input)): \n        count+=1\n    return count\ndef count_occurences_in_tuple_in_tuple(Input): \n    '''\n    Write a function to count occurences of given element in given list.\n    '''\n    count = 0\n    for i in range(0,len(Input)): \n        count+=1\n    return count\ndef count_occurences_in_list_without_duplicates_in_tuple(Input): \n    '''\n    Write a function to count occurences of given element in given list without duplicates.\n    '''\n    new_list = []\n    count = 0\n    for i in range(0,len(Input)): \n        if Input[i] not in new_list: \n            count+=1\n    return count\ndef count_occurences_in_list_in_tuple_without_duplicates(Input): \n    '''\n    Write a function to count occurences of given element in given list without duplicates.\n    '''\n    new_list = []\n    count = 0\n    for i in range(0,len(Input)): \n        if Input[i] not in new_list: \n            count+=1\n    return count\ndef get_value(Input, index): \n    '''\n    Write a function to get value with given index from list of tuple.\n    '''\n    value = 0\n    for i in range(0,le"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Input is a list of tuples\n    # Output is a list of common first element in tuple. \n    \n    for i in range(len(Input)):\n        Input[i] = tuple(Input[i])\n    \n    temp = []\n    for i in range(len(Input)):\n        temp.append(Input[i][0])\n    \n    temp = set(temp)\n    temp = list(temp)\n    \n    Output = []\n    for i in temp:\n        count = 0\n        for j in range(len(Input)):\n            if Input[j][0] == i:\n                count += 1\n        if count == len(Input):\n            Output.append(i)\n    \n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    my_dict = dict()\n    for ele in Input: \n        my_dict[ele[0]] = ele\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    new_list = []\n    list = []\n    for tup in Input:\n        new_list.append(tup[0])\n    for ele in new_list:\n        if ele not in list:\n            list.append(ele)\n    return list\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print(Input)\n    print(\"\\n\")\n    res=[]\n    for k,v in groupby(Input,key=itemgetter(0)):\n        res.append(list(v))\n    return res\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print(Input)\n    Input_set = set(Input)\n    group_dict = {}\n    for i in Input_set:\n        #print(i[0])\n        if i[0] not in group_dict.keys():\n            group_dict[i[0]] = [i]\n        else:\n            group_dict[i[0]].append(i)\n    \n    return group_dict\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = [] \n    for i in range(0,len(Input)): \n        for j in range(i + 1, len(Input)): \n            if (Input[i][0] == Input[j][0]): \n                Output.append(Input[i]) \n                break\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = []\n    for i in Input:\n        lst.append(i[0])\n    return max(set(lst), key = lst.count)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            longest = i\n    return longest\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_max=[]\n    for i in range(len(lst)):\n        lst_max.append(len(lst[i]))\n    max_length=max(lst_max)\n    for i in range(len(lst)):\n        if(max_length==len(lst[i])):\n            return i\n    return -1\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    for i in range(len(lst)):\n        if max_length<=len(lst[i]):\n            max_length = len(lst[i])\n            #print(lst[i])\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(lst)):\n        if type(lst[i])==list:\n            lst1.append(lst[i])\n            lst2.append(len(lst[i]))\n    if len(lst2)==0:\n        return max(lst)\n    else:\n        return max(lst1, key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_ele = lst[0]\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_ele = element\n    return max_ele\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort(reverse = True) \n    return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if (len(lst) == 0): \n        return None\n    max = len(lst[0]) \n    max_str = lst[0] \n    for i in range(1,len(lst)): \n        if (len(lst[i]) > max): \n            max = len(lst[i]) \n            max_str = lst[i] \n    return max_str \n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    if (len(lst) == 0): \n        return None\n    min = len(lst[0]) \n    min_str = lst[0] \n    for i in range(1,len(lst)): \n        if (len(lst[i]) < min): \n            min = len(lst[i]) \n            min_str = lst[i] \n    return min_str \n    \ndef Find_Max_Min_Range(lst): \n    '''\n    Write a python function to find the maximum, minimum and range of the length of the strings in a list.\n    '''\n    if (len(lst) == 0): \n        return None\n    max = len(lst[0]) \n    min = len(lst[0]) \n    max_str = lst[0] \n    min_str = lst[0] \n    for i in range(1,len(lst)): \n        if (len(lst[i]) > max): \n            max = len(lst[i]) \n            max_str = lst[i] \n        if (len(lst[i]) < min): \n            min = len(lst[i]) \n            min_str = lst[i] \n    return max_str, min_str, max - min \n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length=0\n    index=0\n    for i in range(len(lst)):\n        if len(lst[i])>length:\n            length=len(lst[i])\n            index=i\n    print(lst[index])\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i])>max_len:\n            max_len = len(lst[i])\n            max_element = lst[i]\n    return max_element, max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len=0\n    for i in lst:\n        if(len(i)>max_len):\n            max_len=len(i)\n    for i in lst:\n        if(len(i)==max_len):\n            return i\n    return None\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number, 2)\n    print(total_sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_nums = []\n    for num in list1:\n        rounded_nums.append(round(num))\n    print(sum(rounded_nums)*len(rounded_nums))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        num = round(num)\n        total += num\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(f\"Lists: {list1}\")\n    rounded_numbers = []\n    \n    for i in list1:\n        rounded_numbers.append(round(i))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        num = round(num)\n        total = total + num\n    print(\"The sum of the numbers rounded to the nearest integer is: \" + str(total))\n    print(\"The sum of the numbers multiplied by the number of numbers in the list is: \" + str(total*len(list1)))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list=0\n    for i in list1:\n        sum_list+=round(i,2)\n    print(sum_list*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list=[]\n    for x in list1:\n        round_number=round(x)\n        new_list.append(round_number)\n    #print(new_list)\n    sum_of_new_list=sum(new_list)\n    length_of_list=len(list1)\n    print(sum_of_new_list*length_of_list)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if isinstance(list1, list):\n        return len(list1) * round(sum(list1))\n    else:\n        return \"Input not valid, please try again\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        i = round(i)\n        total += i\n    print(total * len(list1))\nround_and_sum([1.1, 3.7, -4.2, 5.6])\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    return total * len(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n**3\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i % 2 == 0):\n            s += i**3\n    return s\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum=0\n    for i in range(n):\n        cube_sum=cube_sum+(i*i*i)\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)//6\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #return n**3\n    cube_sum=0\n    for i in range(0,n):\n        if i%2==0:\n            cube_sum+=i*i*i\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(1,n+1) if i%2 == 0)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    for i in range(0,n):\n        s+=i**3\n    return s\ndef cube_Sum_while(n):\n    '''\n    Write a python program to find the cube sum of first n even natural numbers using while loop.\n    '''\n    s=0\n    i=0\n    while i<n:\n        s+=i**3\n        i+=1\n    return s\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(2, n+1, 2)]) \n  "
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += (i + 1) ** 3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1) if i%2 == 0])\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + \":\"\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str1 = ','\n    return str1.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for ele in test_tup:\n        res += ele + '-'\n    return res[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    temp_list = []\n    for x in test_tup:\n        temp_list.append(str(x))\n    return tuple(temp_list)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delim = '-'\n    return delim.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    sep = '-'\n    result = ''\n    for i in test_tup:\n        result += sep + str(i)\n    return result\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i*i*i)\n    return sum\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) / 24\n    \n    \nprint(find_Average_Of_Cube(2))\nprint(find_Average_Of_Cube(3))\nprint(find_Average_Of_Cube(4))\nprint(find_Average_Of_Cube(100))\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i*i*i\n    avg = sum/n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cube = 0\n    for i in range(1,n+1):\n        sum_of_cube += i**3\n    return sum_of_cube/n\nprint(find_Average_Of_Cube(10))\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 1:\n        return 1\n    return (n**3 + find_Average_Of_Cube(n-1))/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        sumOfCubes = 0\n        for i in range(1, n + 1):\n            sumOfCubes += i ** 3\n        return (sumOfCubes / n)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #calculate sum of n natural numbers \n    summation = 0\n    for i in range(1,n+1):\n        summation = summation + i**3\n    #print(summation)\n    #calculate average \n    average = summation/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum = sum + i * i * i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Square(n):  \n    '''\n    Write a python function to find the average of squares of first n natural numbers.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum = sum + i * i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Square_Root(n):  \n    '''\n    Write a python function to find the average of square root of first n natural numbers.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum = sum + i ** 0.5\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Natural_Number(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Sum_Of_Natural_Number(n):\n    '''\n    Write a python function to find the average of sum of first n natural numbers.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_All_Natural_Number(n):\n    '''\n    Write a python function to find the average of all natural numbers up to n.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Factorial_Of_Natural_Number(n):\n    '''\n    Write a python function to find the average of factorial of first n natural numbers.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum = sum + math.factorial(i)\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Natural_Number_Up_To_Factorial(n):\n    '''\n    Write a python function to find the average of natural numbers up to n.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Natural_Number_Up_To_Natural_Number(n):\n    '''\n    Write a python function to find the average of natural numbers up to n.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Natural_Number_Up_To_Sum(n):\n    '''\n    Write a python function to find the average of natural numbers up to sum.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_All_Integers(n):\n    '''\n    Write a python function to find the average of all the integers up to n.\n    '''\n    sum = 0.0\n    for i in range(0, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Integers_Up_To_Sum(n):\n    '''\n    Write a python function to find the average of all the integers up to n.\n    '''\n    sum = 0.0\n    for i in range(0, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Integers_Up_To_Factorial(n):\n    '''\n    Write a python function to find the average of all the integers up to factorial of n.\n    '''\n    sum = 0.0\n    for i in range(0, n+1):\n        sum = sum + math.factorial(i)\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Integers_Up_To_Natural_Number(n):\n    '''\n    Write a python function to find the average of all the integers up to n.\n    '''\n    sum = 0.0\n    for i in range(0, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Integers_Up_To_Sum(n):\n    '''\n    Write a python function to find the average of all the integers up to sum.\n    '''\n    sum = 0.0\n    for i in range(0, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Integers_Up_To_Sum_And_Factorial(n):\n    '''\n    Write a python function to find the average of all the integers up to sum and factorial of n.\n    '''\n    sum = 0.0\n    for i in range(0, n+1):\n        sum = sum + math.factorial(i)\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Integers_Up_To_Sum_And_Natural_Number(n):\n    '''\n    Write a python function to find the average of all the integers up to sum and n.\n    '''\n    sum = 0.0\n    for i in range(0, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Integers_Up_To_Sum_And_Sum(n):\n    '''\n    Write a python function to find the average of all the integers up to sum and sum.\n    '''\n    sum = 0.0\n    for i in range(0, n+1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_All_Fibonacci_Numbers(n):\n    '''\n    Write a python function to find the average of the first n Fibonacci numbers.\n    '''\n    sum = 0.0\n    n_minus1 = 0\n    n_minus2 = 1\n    for i in range(0, n+1):\n        sum = sum + n_minus2\n        n_minus2 = n_minus1\n        n_minus1 = sum\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Factorial_Of_Fibonacci_Numbers(n):\n    '''\n    Write a python function to find the average of factorial of first n Fibonacci numbers.\n    '''\n    sum = 0.0\n    n_minus1 = 0\n    n_minus2 = 1\n    for i in range(0, n+1):\n        sum = sum + math.factorial(n_minus2)\n        n_minus2 = n_minus1\n        n_minus1 = sum\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Fibonacci_Numbers_Up_To_Sum(n):\n    '''\n    Write a python function to find the average of Fibonacci numbers up to sum.\n    '''\n    sum = 0.0\n    n_minus1 = 0\n    n_minus2 = 1\n    for i in range(0, n+1):\n        sum = sum + n_minus2\n        n_minus2 = n_minus1\n        n_minus1 = sum\n    avg = sum / n\n    return avg\n    \ndef find_Average_Of_Sum_Of_Fibonacci_Numbers_Up_To_Sum(n):\n    '''\n    Write a python function to find the average of sum of Fibonacci numbers up to sum.\n    '''\n    sum = 0.0\n    n_minus1 = 0\n    n_minus2 = "
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    #returns the sum of first n natural numbers\n    def summation(n):\n        sum = 0\n        for i in range(1,n+1):\n            sum += i\n        return sum\n        \n    #returns the sum of cubes of first n natural numbers\n    def summation_of_cubes(n):\n        sum = 0\n        for i in range(1,n+1):\n            sum += i**3\n        return sum\n        \n    return (summation_of_cubes(n) / summation(n))\n    \nprint('the average of cubes of first n natural numbers is:', find_Average_Of_Cube(5))\nprint('the average of cubes of first n natural numbers is:', find_Average_Of_Cube(10))\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[len(test_tuple)-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list = list(test_tuple)\n    return [i[-1] for i in test_list]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for i in test_tuple:\n        rear_index_list.append(i[::-1])\n    return rear_index_list\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #A tuple is a collection which is ordered and unchangeable. In Python tuples are written with round brackets.\n    #https://www.w3schools.com/python/python_tuples.asp\n    # A string is a sequence of characters. They are used to represent words, text, or other sequences of characters.\n    #https://www.w3schools.com/python/python_ref_string.asp\n    #https://www.w3schools.com/python/ref_string_split.asp\n    #https://www.w3schools.com/python/ref_string_strip.asp\n    #https://www.w3schools.com/python/ref_string_strip.asp\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print (test_tuple[2])\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # TODO: Write your code here\n    result = ()\n    for i in test_tuple:\n        result += (i[-1:],)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(\"Input: \", test_tuple)\n    print(\"Output: \", test_tuple[1][-1])\n    return(test_tuple[1][-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    lst = []\n    for item in test_tuple:\n        lst.append(item[len(item) - 1])\n    return lst\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n    \n    # write your code here\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        for j in range(len(list1[i])): \n            if list1[i][j] == x: \n                count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if x in item:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    cnt = 0\n    for i in list1:\n        if x in i:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in list1:\n        if x in i:\n            counter +=1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sub_list in list1:\n        if x in sub_list:\n            count = count+1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_numbers.append(num)\n    return filtered_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # nums = [1,2,3,4,5,6]\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            nums[i] = None\n    \n    return list(filter(lambda x: x!= None, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Return the filtered list.\n    return [num for num in nums if num%2]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = list(filter(lambda x: x % 2 == 1, nums))\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # use list comprehension to filter odd numbers\n    # [expression for variable in iterable if conditional]\n    # nums = [num for num in nums if num % 2 == 0]\n    # print(nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2 == 1:\n            odds.append(num)\n    return odds\nprint(filter_oddnumbers([1,2,3,4,5,6]))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # new_list = []\n    # for num in nums:\n    #     if num % 2!= 0:\n    #         new_list.append(num)\n    # return new_list\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 1:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt[6:10] + '-' + dt[3:5] + '-' + dt[:2]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})',r'\\2-\\1-\\3',dt)\n    print(dt)\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})',r'\\3-\\2-\\1',dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    d = '-'.join(dt[::-1])\n    return d\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import re\n    reg = re.compile(r'([0-9]{4})-([0-9]{2})-([0-9]{2})')\n    #print(dt)\n    \n    if reg.match(dt):\n        dt_list = dt.split('-')\n        #print(dt_list)\n        yyyy = dt_list[0]\n        mm = dt_list[1]\n        dd = dt_list[2]\n        dt_new = dd + '-' + mm + '-' + yyyy\n    else:\n        dt_new = 'Invalid Input'\n    return dt_new\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt = dt.split('-')\n        date_in_format = dt[2]+'-'+dt[1]+'-'+dt[0]\n        return date_in_format\n    except Exception as e:\n        return e\n    \ndef valid_email(emails):\n    '''\n    Write a regex to check whether email id is valid or not.\n    '''\n    try:\n        emails = re.compile(r'[a-zA-Z0-9_]+@[a-zA-Z0-9_]+\\.[a-zA-Z0-9_.]+')\n        emails = emails.findall(emails)\n        return emails\n    except Exception as e:\n        return e\n        \ndef valid_phone_no(phone_nos):\n    '''\n    Write a regex to check whether phone number is valid or not.\n    '''\n    try:\n        phone_nos = re.compile(r'[7-9][0-9]{9}')\n        phone_nos = phone_nos.findall(phone_nos)\n        return phone_nos\n    except Exception as e:\n        return e\n        \ndef is_palindrome(input):\n    '''\n    Write a function to check whether input is palindrome or not.\n    '''\n    try:\n        input = input.lower()\n        reverse_input = input[::-1]\n        if input == reverse_input:\n            return True\n        else:\n            return False\n    except Exception as e:\n        return e\n        \ndef find_common(input1,input2):\n    '''\n    Write a function to find common characters between two strings.\n    '''\n    try:\n        input1 = input1.lower()\n        input2 = input2.lower()\n        common_chars = ''\n        for ch in input1:\n            if ch in input2 and ch not in common_chars:\n                common_chars += ch\n        return common_chars\n    except Exception as e:\n        return e\n        \ndef find_leap_years(input):\n    '''\n    Write a function to find leap years in between two given years.\n    '''\n    try:\n        input = sorted(input)\n        leap_years = []\n        for i in range(input[0],input[1]+1):\n            if i%4 == 0:\n                leap_years.append(i)\n        return leap_years\n    except Exception as e:\n        return e\n        \ndef find_strong_numbers(input):\n    '''\n    Write a function to find strong numbers in given list.\n    '''\n    try:\n        number_sum = 0\n        input = sorted(input)\n        input_len = len(input)\n        for i in range(input_len):\n            number_sum = number_sum + input[i]\n        for i in range(input_len):\n            if number_sum == input[i]:\n                input.append(number_sum)\n        return sorted(input)\n    except Exception as e:\n        return e\n        \ndef find_fibonacci_numbers(input):\n    '''\n    Write a function to find fibonacci numbers in given list.\n    '''\n    try:\n        fib_nums = []\n        input = sorted(input)\n        input_len = len(input)\n        for i in range(input_len):\n            if i==0:\n                fib_nums.append(input[i])\n            elif i==1:\n                fib_nums.append(input[i]+input[i-1])\n            else:\n                fib_nums.append(fib_nums[i-1]+fib_nums[i-2])\n        return sorted(fib_nums)\n    except Exception as e:\n        return e\n        \ndef reverse_vowels(input):\n    '''\n    Write a function to reverse vowels in a given string.\n    '''\n    try:\n        vowels = 'aeiouAEIOU'\n        new_input = ''\n        input = input.lower()\n        vowel_len = len(vowels)\n        for i in input:\n            if i in vowels:\n                new_input = new_input + input[vowel_len-1:vowel_len] + i\n                vowel_len = vowel_len - 1\n            else:\n                new_input = new_input + i\n        return new_input\n    except Exception as e:\n        return e\n        \ndef remove_duplicates(input):\n    '''\n    Write a function to remove duplicates from given list of numbers.\n    '''\n    try:\n        input = sorted(input)\n        new_input = []\n        for i in input:\n            if i not in new_input:\n                new_input.append(i)\n        return new_input\n    except Exception as e:\n        return e\n        \ndef find_greatest_number(input):\n    '''\n    Write a function to find the greatest number from list.\n    '''\n    try:\n        input = sorted(input)\n        input_len = len(input)\n        greatest_number = input[input_len-1]\n        return greatest_number\n    except Exception as e:\n        return e\n        \ndef check_pangram(input):\n    '''\n    Write a function to check whether given string is pangram or not.\n    '''\n    try:\n        vowels = 'aeiouAEIOU'\n        input = input.lower()\n        input = sorted(input)\n        input_len = len(input)\n        vowel_len = len(vowels)\n        vowel_count = 0\n        for i in range(input_len):\n            if input[i] in vowels:\n                vowel_count = vowel_count + 1\n        if vowel_count == vowel_len:\n            return True\n        else:\n            return False\n    except Exception as e:\n        return e\n        \ndef find_missing_numbers(input):\n    '''\n    Write a function to find the missing numbers in the given list.\n    '''\n    try:\n        input = sorted(input)\n        input_len = len(input)\n        missing_numbers = []\n        for i in range(input_len+1):\n            if i not in input:\n                missing_numbers.append(i)\n        return missing_numbers\n    except Exception as e:\n        return e\n        \ndef find_missing_and_duplicate_numbers(input):\n    '''\n    Write a function to find the missing and duplicate numbers in the given list.\n    '''\n    try:\n        input = sorted(input)\n        input_len = len(input)\n        missing_numbers = []\n        duplicate_numbers = []\n        for i in range(input_len+1):\n            if i not in input:\n                missing_numbers.append(i)\n            else:\n                duplicate_numbers.append(i)\n        return [missing_numbers,duplicate_numbers]\n    except Exception as e:\n        return e\n        \ndef find_common_characters(input1,input2):\n    '''\n    Write a function to find common characters between two strings.\n    '''\n    try:\n        input1 = input1.lower()\n        input2 = input2.lower()\n        common_chars = ''\n        for ch in input1:\n            if ch in input2 and ch not in common_chars:\n                common_chars += ch\n        return common_chars\n    except Exception as e:\n        return e\n        \ndef reverse_string(input):\n    '''\n    Write a function to reverse a given string.\n    '''\n    try:\n        input = input[::-1]\n        return input\n    except Exception as e:\n        return e\n        \ndef compare_lists(list1,list2):\n    '''\n    Write a function to compare two lists and return two lists containing items\n    that are not in both lists.\n    '''\n    try:\n        list1 = list1.lower()\n        list2 = list2.lower()\n        list1 = sorted(list1)\n        list2 = sorted(list2)\n        list1_le"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = ''.join(dt.split('-'))\n    dt = dt.replace('01', '01')\n    dt = dt.replace('02', '02')\n    dt = dt.replace('03', '03')\n    dt = dt.replace('04', '04')\n    dt = dt.replace('05', '05')\n    dt = dt.replace('06', '06')\n    dt = dt.replace('07', '07')\n    dt = dt.replace('08', '08')\n    dt = dt.replace('09', '09')\n    dt = dt.replace('10', '10')\n    dt = dt.replace('11', '11')\n    dt = dt.replace('12', '12')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match('^\\d{4}-\\d{2}-\\d{2}$', dt):\n        dt = dt.split('-')\n        dt = dt[2] + '-' + dt[1] + '-' + dt[0]\n        return dt\n    else:\n        return None\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return str(dt).split(\"-\")\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #convert dd-mm-yyyy to yyyy-mm-dd\n    #method 1\n    if dt[8:] == \"00:00:00\" and len(dt) == 13:\n        dt = dt[:8] + \"-\" + dt[5:7] + \"-\" + dt[:4]\n    #method 2\n    elif \"00:00:00\" in dt:\n        dt = dt.replace(\"00:00:00\",\"\")\n    #method 3\n    elif len(dt) == 10:\n        dt = dt[:2] + \"-\" + dt[3:5] + \"-\" + dt[:8]\n    return dt\n    \ndef remove_emoji(s):\n    '''\n    Write a function to remove all emojis from a given string. \n    '''\n    return \"\".join(c for c in s if c not in emoji.UNICODE_EMOJI)\n    \ndef remove_tags(s):\n    '''\n    Write a function to remove all HTML and XML tags from a given string.\n    '''\n    TAG_RE = re.compile(r'<[^>]+>')\n    return TAG_RE.sub('', s)\n    \ndef text_preprocess(text):\n    '''\n    Write a function to preprocess a given string. \n    '''\n    return \" \".join(text.lower().split())\n    \ndef remove_non_ascii(s):\n    '''\n    Write a function to remove non-ASCII characters from a given string.\n    '''\n    return \"\".join(i for i in s if ord(i)<128)\n    \ndef remove_non_english(s):\n    '''\n    Write a function to remove all non-English characters from a given string. \n    '''\n    eng_chars = set(string.printable)\n    return \"\".join(x for x in s if x in eng_chars)\n    \ndef remove_numbers(s):\n    '''\n    Write a function to remove all numbers from a given string. \n    '''\n    return \"\".join(x for x in s if not x.isdigit())\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:10]+\"-\"+dt[5:7]+\"-\"+dt[:4]\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    inc = len(my_list) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # 1. Begin with a large increment, making it big enough to\n    # spread out the needed comparison.\n    inc = len(my_list) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            # keep moving the element forward until it is in the correct place\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) > 1:\n        gap = len(my_list) // 2\n        while gap > 0:\n            for i in range(gap, len(my_list)):\n                temp = my_list[i]\n                j = i\n                while j >= gap and my_list[j - gap] > temp:\n                    my_list[j] = my_list[j - gap]\n                    j = j - gap\n                my_list[j] = temp\n            gap = gap // 2\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # first, the subarray length is divided into n/2^k,\n    # then we use insertion sort to sort every subarray\n    subarray_length = 1\n    while subarray_length < len(my_list):\n        for start in range(subarray_length):\n            insertion_sort(my_list,start,subarray_length)\n        subarray_length *= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(set(test_tup1).intersection(set(test_tup2))))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i] and test_tup1[i]!= None:\n            result += (test_tup1[i],)\n        else:\n            result += (None,)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    print(test_tup1)\n    print(test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    print(tuple([x if x == y else None for x,y in zip(test_tup1,test_tup2)]))\n    \nand_tuples((1,2),(3,4))\nand_tuples((1,2),(1,4))\nand_tuples((1,2),(0,5))\nand_tuples((1,2),(0,4))\nand_tuples((1,2),(1,0))\nand_tuples((1,2),(0,0))\nand_tuples((1,2),(2,3))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 & test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return(tuple(el_and(el1, el2) for el1, el2 in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1_copy = test_tup1[:]\n    test_tup2_copy = test_tup2[:]\n    new_tup1 = []\n    for i in range(len(test_tup1_copy)):\n        if test_tup1_copy[i] == test_tup2_copy[i]:\n            new_tup1.append(test_tup1_copy[i])\n    return tuple(new_tup1)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(i[0] and i[1] for i in zip(test_tup1,test_tup2)))\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"a must be a number\")\n    if not isinstance(b, (int, float)):\n        raise TypeError(\"b must be a number\")\n    if not isinstance(c, (int, float)):\n        raise TypeError(\"c must be a number\")\n    \n    # value of discriminant\n    d = (b**2) - (4 * a * c)\n    if d < 0:\n        return -1\n    if d == 0:\n        return -b / (2 * a)\n    else:\n        x1 = (-b + d**0.5) / (2 * a)\n        x2 = (-b - d**0.5) / (2 * a)\n        return (x1, x2)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None\n    return (-b/(2*a))\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    # Define the derivative of a parabola with respect to x\n    def p(x):\n        # a = 0 in directrix of a parabola\n        if a == 0:\n            return 0\n        return 4*a*(x**2) + 2*b*x + c\n    # Find the derivative of the equation at point x\n    def p_derivative(x):\n        return 4*a*(2*x) + 2*b\n    # Find the value of the x intercepts of the directrix\n    def directrix_x_intercepts():\n        # Define the derivative of the equation with respect to x\n        def directrix_x_intercept(x):\n            return (-b - math.sqrt(p(x)**2 - 4*a*c))/(2*a)\n        # Find the two values of x that are positive\n        # and negative for the equation\n        x_1 = directrix_x_intercept(-b/2*a)\n        x_2 = directrix_x_intercept(b/2*a)\n        # Return the value of x_1 and x_2\n        return x_1, x_2\n    # Return the value of the directrix\n    return directrix_x_intercepts()\n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    import math\n    # Find the value of the parabola's vertex\n    return -b/2*a\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a/2*(1 + (b/c)**2)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    disc = b*b - 4*a*c\n    if disc >= 0:\n        return (-b + sqrt(disc)) / (2*a), (-b - sqrt(disc)) / (2*a)\n    else:\n        return \"invalid equation\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = Symbol('x')\n    y = Symbol('y')\n    \n    # Solve for the variable of the parabola\n    D = b**2 - 4*a*c\n    print(D)\n    print(type(D))\n    if(D < 0):\n        return \"This parabola has no real solution\"\n    else:\n        D = sqrt(D)\n        t1 = (-b - D) / (2 * a)\n        t2 = (-b + D) / (2 * a)\n        if(t1 > 0 and t2 > 0):\n            if(t1 < t2):\n                return \"Directrix of this parabola is at x = %s\" % t1\n            else:\n                return \"Directrix of this parabola is at x = %s\" % t2\n        elif(t1 < 0 and t2 < 0):\n            if(abs(t1) < abs(t2)):\n                return \"Directrix of this parabola is at x = %s\" % t1\n            else:\n                return \"Directrix of this parabola is at x = %s\" % t2\n        elif(t1 > 0 and t2 < 0):\n            if(abs(t1) < abs(t2)):\n                return \"Directrix of this parabola is at x = %s\" % t1\n            else:\n                return \"Directrix of this parabola is at x = %s\" % t2\n        elif(t1 == 0):\n            return \"Directrix of this parabola is at x = 0\"\n        else:\n            return \"Directrix of this parabola is at x = %s\" % t2\n    return \"Directrix of this parabola is at x = %s\" % t2\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import numpy as np\n    def parabola(x):\n        return a*(x**2) + b*x + c\n    def x_intercepts(a, b, c):\n        return [(-b + np.sqrt(b**2 - 4*a*c))/(2*a), (-b - np.sqrt(b**2 - 4*a*c))/(2*a)]\n    def y_intercepts(a, b, c):\n        return [parabola(x_intercepts(a, b, c)[0]), parabola(x_intercepts(a, b, c)[1])]\n    x_intercepts_x = x_intercepts(a, b, c)\n    x_intercepts_y = y_intercepts(a, b, c)\n    if x_intercepts_x == x_intercepts_y:\n        return x_intercepts_x\n    else:\n        return None\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (c - b ** 2) / (4 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # A quadratic equation\n    # ax^2 + bx + c = 0\n    # Forming a function for it\n    def parabola(x):\n        # Calculate the fuction\n        return a*(x**2) + b*x + c\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == [] or list2 == []:\n        return False\n    else:\n        set1 = set(list1)\n        set2 = set(list2)\n        if set1.intersection(set2):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1).intersection(set(list2))) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1).intersection(list2))!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        for i in list1:\n            for j in list2:\n                if i == j:\n                    return True\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check to see if the two lists share a common element\n    if set(list1) & set(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return any(i in list2 for i in list1)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list(set(list1) & set(list2))) > 0\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\nprint(median_trapezium(2,4,2))\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_tot = base1 + base2\n    median = (base_tot + height)/2\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height/2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1 + base2 + height / 2.0\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #Test Cases\n    #print(\"The median length of a trapezium with bases 2 and 4 and height 5 is \" + str(median_trapezium(2,4,5)))\n    #print(\"The median length of a trapezium with bases 3 and 4 and height 5 is \" + str(median_trapezium(3,4,5)))\n    #print(\"The median length of a trapezium with bases 1 and 4 and height 5 is \" + str(median_trapezium(1,4,5)))\n    \n    #The base can be any number\n    \n    #The base can be any number\n    \n    #The height can be any number\n    \n    #The height can be any number\n    \n    #The median is the sum of the two heights divided by two\n    \n    #Calculating the median\n    median = (base1 + base2) / 2\n    \n    #Returning the median\n    return median\n    "
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n    \n    \n    \ndef main():\n    print(median_trapezium(3,4,5))\n    print(median_trapezium(6,8,10))\n    print(median_trapezium(11,12,16))\n    \nmain("
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1+base2*0.5\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) * height / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    print(median)\n    return median\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for item in arr:\n        if number > item:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if type(arr) is not list:\n        raise TypeError(\"Invalid input type. Array should be a list.\")\n    if number < 0 or number > 10000:\n        raise ValueError(\"Invalid input number. Number should be in between 0 and 10000.\")\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return True if number > min(arr) else False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr > number\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number <= i:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n        else:\n            return False\n            "
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        print(\"The number is greater than {}\".format(arr[0]))\n    else:\n        print(\"The number is less than {}\".format(arr[0]))\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if(x > number):\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.b*')\n    print(pattern.findall(text))\n    return(pattern.findall(text))\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'ab*?')\n    mo = regex.search(text)\n    return mo.group()\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')==-1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab+', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # re.findall('a.+b',text)\n    # re.search('(?=a.)(?=b.)',text)\n    # re.search('a.+b',text)\n    # re.match('a.+b',text)\n    # return re.search('(?=a.)(?=b.)',text)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.findall(r'ab+',text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    patt = 'ab+'\n    if re.search(patt, text):\n        return 'found a match!'\n    else:\n        return('not matched')\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(r'a\\w*b', text):\n        return True\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(r'a.b', text):\n        return True\n    else:\n        return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(r'a.*?b', text):\n        return True\n    else:\n        return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'a.*?b', text):\n        return True\n    else:\n        return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'^a.*b$', text):\n        return True\n    else:\n        return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'^a.*?b$', text):\n        return True\n    else:\n        return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*?b', text):\n        return True\n    else:\n        return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'^a.*b$', text):\n        return True\n    else:\n        return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'^a.*?b$', text):\n        return True\n    else:\n        return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*?b', text):\n        return True\n    else:\n        return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*?b', text):\n        return True\n    else:\n        return False\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'^a.*b$', text):\n        return True\n    else:\n        return False\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'^a.*?b$', text):\n        return True\n    else:\n        return False\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*?b', text):\n        return True\n    else:\n        return False\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r'a.*b', text):\n        return True\n    else:\n        return False\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.findall(r"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'[A-Z]*[b]+[a-z]*')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'a\\bb+',text)\n    \n    \ndef text_match_two(text):\n    '''\n    Write a function that takes in a string made up of brackets. \n    Return True if the string is balanced and False if it is not.\n    '''\n    #this works but it's hard to follow what's happening.\n    s = 0\n    for i in text:\n        if i == '(':\n            s += 1\n        elif i == ')':\n            s -= 1\n            if s < 0:\n                return False\n    if s == 0:\n        return True\n    return False\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Test Case\n    '''\n    Input:\n    15\n    Output:\n    5\n    '''\n    # Your Code Here\n    while n>10:\n        n=n/10\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n%10 == 0 :\n        return 0\n    else :\n        return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    num_str = str(n)\n    last_index = len(num_str) - 1\n    return int(num_str[last_index])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # code here\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n *= -1\n    n = str(n)\n    n = n[::-1]\n    n = int(n[::-1])\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n > 10 :\n        n = n // 10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if n == 0 : return 0\n    else : return n%10\n    \ndef get_Digit(n,digit) :\n    '''\n    Write a function to return a digit of a given number.\n    '''\n    \n    if n == 0 : return 0\n    elif n < 0 : \n        if last_Digit(n) > digit : return last_Digit(n) - digit\n        else : return last_Digit(n) + digit\n    else : \n        if last_Digit(n) > digit : return last_Digit(n) - digit\n        else : return last_Digit(n) + digit\n    \ndef first_Digit(n,digit) :\n    '''\n    Write a function to return the first digit of a given number.\n    '''\n    \n    if n == 0 : return 0\n    else : \n        if n > 0 : return get_Digit(n,digit)\n        else : return get_Digit(n,digit)*-1\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return(list2)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = list1[i] * -1\n    print(list1)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n    #return[num for num in list1 if num <0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negatives = []\n    for i in list1:\n        if i < 0:\n            negatives.append(i)\n    return negatives\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #Method 1: Using list comprehension and if\n    # lst1 = [i for i in list1 if i<0]\n    # return lst1\n    \n    #Method 2: Using filter and lambda\n    lst2 = filter(lambda x: x < 0, list1)\n    return lst2\n    \n    #Method 3: Using filter and lambda\n    # lst3 = list(filter(lambda x: x<0, list1))\n    # return lst3\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_of_neg = []\n    for num in list1:\n        if num < 0:\n            list_of_neg.append(num)\n    return list_of_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num = []\n    for i in list1:\n        if i < 0:\n            neg_num.append(i)\n    print(\"Negative numbers in this list are\",neg_num)\n    return(neg_num)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str(x) for x in str1 if x%2==0)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for x in str1:\n        if ord(x)%2 == 0:\n            str2 = str2+x\n    print(str2)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for ch in str1:\n        if ch.isalpha() and ch.isupper():\n            result = result + ch\n    return result\n    # return \"\".join([ch for ch in str1 if ch.isalpha() and ch.isupper()])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([ch for ch in str1 if ch%2==0])\n    \ndef remove_even(str1):\n    '''\n    Write a function to remove even characters in a string.\n    '''\n    return \"\".join([ch for ch in str1 if ch%2!=0])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if not char%2])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initializing empty string\n    new_string = \"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    new_str = \"\"\n    for i in str1:\n        if i not in \"1234567890\":\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2]\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # char_list = [ch for ch in str1 if ch not in \"13579\"]\n    # print(\"\".join(char_list))\n    # return \"\".join(char_list)\n    odd_chars = [ch for ch in str1 if ch not in \"13579\"]\n    str1 = \"\".join(odd_chars)\n    return str1\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    list_of_pairs = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                list_of_pairs.append((test_list[i], test_list[j]))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Your code goes here\n    # bidirectional = []\n    # for i in test_list:\n    #     if i[0] == i[1]:\n    #         bidirectional.append(i)\n    # return len(bidirectional)\n    return len([i for i in test_list if i[0] == i[1]])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list.sort()\n    ctr = 0\n    for i in range(0, len(test_list), 2):\n        if(i + 1 < len(test_list)):\n            if(test_list[i][0] == test_list[i + 1][1] and test_list[i][1] == test_list[i + 1][0]):\n                ctr += 1\n    return ctr\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n            elif test_list[i][1] == test_list[j][0]:\n                count += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def check_for_pair(idx):\n        if idx == 0:\n            return True\n        return test_list[idx] == test_list[idx-1] and test_list[idx] == test_list[idx+1]\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    assert test_list, 'Empty list!'\n    \n    return len(set([(v, u) for u, v in test_list]))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum([1 for item in test_list if isinstance(item, tuple) and len(item) == 2 and item[0] == item[1]])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for index in range(len(test_list)):\n        if test_list[index][0] == test_list[index][1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L)==1:\n        return L[0]\n    else:\n        return L[0]*(10**(len(L)-1)) + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(i) for i in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(list(map(str,L))))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Write a Python function `join_integers` that takes a list of multiple integers as argument and returns a single integer.\n    # Your function should ignore any leading 0s.\n    # Example:\n    # join_integers([0, 1, 2, 3, 4, 0, 5, 0, 6, 0, 7, 0]) should return 1234567\n    # Note that 0 is not a valid integer.\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    numbers = list(map(str,L))\n    \n    return int(''.join(numbers))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum_list = []\n    for num in L:\n        sum_list.append(str(num))\n    s = ''.join(sum_list)\n    return int(s)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [str(i) for i in L]\n    return int(\"\".join(L))\n    # return int(\"\".join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(list(map(str, L))))\n    \n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    search_text = text.lower()\n    pattern = r'([a-z]+)\\s([a-z]+)\\s(adverb)'\n    matches = re.finditer(pattern, search_text, re.MULTILINE)\n    for match in matches:\n        return (match.start(2), match.end(2))\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = []\n    adverbs = []\n    split_text = text.split()\n    for i in range(len(split_text)):\n        if re.match(\"(?:[\\w]*)(adverb)\", split_text[i].lower()):\n            adverb_position.append(i)\n            adverbs.append(split_text[i])\n    return adverb_position, adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # print(text)\n    r = re.findall(r'\\b(the|at|in|of)\\b', text)\n    if len(r) > 0:\n        r = r[0]\n        # print(r)\n        r_index = text.index(r)\n        # print(r_index)\n        # print(r)\n        return r, r_index\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = {}\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # pattern = r'[0-9]*[a-z]+[A-Z]*|[a-z]*[A-Z]*[0-9]*'\n    pattern = r'\\d+[a-z]+[A-Z]*|[a-z]*[A-Z]*\\d+'\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #print(text)\n    #print(type(text))\n    for i in range(0, len(text)):\n        text = text.lower()\n        if re.search(r'\\Wadverb\\W', text[i]):\n            text = text[i].split()\n            #print(text)\n            for j in range(0, len(text)):\n                if text[j] == 'adverb':\n                    return j\n                    #print(j)\n                    #print(text[j])\n                    #print(text)\n    #return -1\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Get all the adverbs and their positions\n    all_adverbs = find_all_adverbs(text)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    positions = list()\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    matches = pattern.finditer(text)\n    for match in matches:\n        positions.append(match.span()[0])\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = dict()\n    search_word = 'adverb'\n    text = re.sub('[,\\.!?]', '', text)\n    list_text = text.split()\n    for i in range(0, len(list_text)):\n        if list_text[i] == search_word:\n            result[i] = search_word\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    import re\n    pattern = r\"\\s*[a-z]*\\s+((?:\\-|\\+)?(?:[0-9]*[.])?[0-9]+)\\s+\"\n    result = re.findall(pattern, text)\n    return result\n    \nassert find_adverb_position(\"The team's winning record this year is seven points\") == ['7.0']\nassert find_adverb_position(\"The team's winning record last year was seven points\") == ['7.0']\nassert find_adverb_position(\"The team last year's winning record was seven points\") == ['7.0']\nassert find_adverb_position(\"The team's record last year was seven points\") == ['7.0']\nassert find_adverb_position(\"The team's record last year was seven points\") == ['7.0']\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * (l ** 2)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface = 6*l**2\n    return surface\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l * l)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * pow(l, 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_counter = 0\n    for num in nums:\n        if num > 0:\n            positive_counter += 1\n    return positive_counter/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for n in nums:\n        if n > 0:\n            positive_count += 1\n    return positive_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = 0\n    for i in nums:\n        if i >= 0:\n            n += 1\n    return n/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for i in nums:\n        if i > 0:\n            positive += 1\n    return positive/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for n in nums:\n        if n >= 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    #[1,2,3,4,5]\n    \n    pos_counter = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos_counter += 1\n    return pos_counter/len(nums)\n    \n    \ndef max_difference(nums):\n    '''\n    Write a function to find the largest difference between any two numbers in an array.\n    '''\n    \n    max_diff = -1\n    for i in range(len(nums)-1):\n        diff = nums[i] - nums[i+1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    \ndef sum_of_unique_values(nums):\n    '''\n    Write a function that returns the sum of unique values in an array of integers.\n    '''\n    \n    sum_of_unique = 0\n    unique_values = set()\n    for i in nums:\n        unique_values.add(i)\n    for i in unique_values:\n        sum_of_unique += i\n    return sum_of_unique\n    \ndef sum_of_squares(nums):\n    '''\n    Write a function to return the sum of the squares of the numbers in an array.\n    '''\n    \n    sum_of_squares = 0\n    for i in nums:\n        sum_of_squares += i*i\n    return sum_of_squares\n    \ndef square_of_sum(nums):\n    '''\n    Write a function to return the square of the sum of the numbers in an array.\n    '''\n    \n    square_of_sum = 0\n    for i in nums:\n        square_of_sum += i\n    return square_of_sum*square_of_sum\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return None\n    positive = 0\n    for x in nums:\n        if x > 0:\n            positive += 1\n    return positive / len(nums)\n    # pass\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    list2.sort()\n    print(list2[-1])\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_negative = 0\n    for x in list1:\n        if x < 0 and x > max_negative:\n            max_negative = x\n    return max_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # check for first element in list\n    if list1[0] < 0:\n        return list1[0]\n    # if not check all elements\n    for i in list1:\n        if i < 0:\n            return i\n    # if all elements are positive, return 0\n    return 0\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #list1 = [int(x) for x in input().split()]\n    print('List:',list1)\n    index = 0\n    for i in list1:\n        if list1[index] < 0:\n            if list1[index] < list1[index - 1]:\n                list1[index] = list1[index - 1]\n        index += 1\n    print('List:',list1)\n    print('Largest negative number:', list1[0])\n    return\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    if list2 == []:\n        return False\n    else:\n        return max(list2)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_neg = [i for i in list1 if i < 0]\n    if list_neg:\n        return max(list_neg)\n    else:\n        return 0\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # list1 = [10, -1, 2, -4, 3, -6, 8, -5]\n    # expected output: -1\n    list1 = list(list1)\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i]<list1[j]:\n                list1[i],list1[j]=list1[j],list1[i]\n    print(list1[-1])\n    \nlargest_neg([-1, 10, -24, -40, 3, 5, -6, 8, -5])\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [1, -6, -3, -1, -7, -9]\n    max = list1[0]\n    for i in list1:\n        if i > max:\n            max = i\n    return max\n    \nprint(largest_neg(list1))\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    large_neg = 0\n    for i in list1:\n        if large_neg < 0:\n            large_neg = i\n        else:\n            large_neg = large_neg\n    return large_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1) if max(list1) < 0 else None\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    ret_list = []\n    for tuple in test_list:\n        new_tuple = tuple[:K]\n        ret_list.append(new_tuple)\n    return ret_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tup in enumerate(test_list):\n        for j in range(K):\n            tup = tup[1:]\n        test_list[i] = tuple(tup)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    print(\"\\nOriginal tuple list:\", test_list)\n    print(\"After trim tuple, tuple length is:\", K)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # code here\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # for each tuple\n    for i in range(len(test_list)):\n        # get the length of the tuple\n        len_tuple = len(test_list[i])\n        # if the length is less than or equal to k, then return the whole tuple\n        if len_tuple <= K:\n            return test_list\n        # if the length is greater than k, then trim the first K elements\n        else:\n            test_list[i] = test_list[i][:K]\n    # return the trimmed list\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(test_list[:K])\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for index, item in enumerate(test_list):\n        if index < K:\n            result.append(item[0:K])\n        elif len(item) > K:\n            result.append(item[0:K])\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # TODO: Your code here\n    new_list = []\n    for tup in test_list:\n        if len(tup) >= K:\n            tup = tup[:K]\n        new_list.append(tup)\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    print(test_list)\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    print(test_list)\n    \ntrim_tuple(((1, 2, 3), (4, 5, 6, 7), (8, 9, 0, 1)), 3)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [i[:-K] for i in test_list]\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if type(test_tup1) == tuple and type(test_tup2) == tuple:\n        new_tuple = ()\n        for i, j in zip(test_tup1, test_tup2):\n            new_tuple += (i * j,)\n    else:\n        raise ValueError('Invalid values')\n    return new_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return(tuple(a * b for a, b in zip(test_tup1, test_tup2)))\n    \n    \ndef index_multiplication_v2(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return([a * b for a, b in zip(test_tup1, test_tup2)])\n    \n    \ndef index_multiplication_v3(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return list(a * b for a, b in zip(test_tup1, test_tup2))\n    \n    \ndef index_multiplication_v4(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return list(a * b for a, b in zip(test_tup1, test_tup2))\n    \n    \ndef index_multiplication_v5(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [*(a * b for a, b in zip(test_tup1, test_tup2))]\n    \n    \ndef index_multiplication_v6(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [*(a * b for a, b in zip(test_tup1, test_tup2))]\n    \n    \ntest_tup1 = (2, 3, 4, 5, 6)\ntest_tup2 = (7, 8, 9, 10, 11)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # test_tup1 = (0,1,2,3,4)\n    # test_tup2 = (1,2,3,4,5)\n    return_list = []\n    for i in range(len(test_tup1)):\n        return_list.append(test_tup1[i] * test_tup2[i])\n    return tuple(return_list)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    out = []\n    for i in range(len(test_tup1)):\n        out.append(test_tup1[i] * test_tup2[i])\n    return tuple(out)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i]*test_tup2[i] for i in range(0,len(test_tup1))])\n    \n    \ndef rearrange_tuple(test_tup):\n    '''\n    Write a function to rearrange a tuple so that it appears as a sorted tuple from small to large.\n    '''\n    return tuple(sorted(test_tup))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(elem * test_tup2[index] for index, elem in enumerate(test_tup1))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    product = ()\n    for i in range(len(test_tup1)):\n        product += (test_tup1[i] * test_tup2[i],)\n    return product\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i, j in zip(test_tup1, test_tup2):\n        result.append(i * j)\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    new_list = [test_list1[i] * test_list2[i] for i in range(len(test_list1))]\n    new_tup = tuple(new_list)\n    \n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(x*y for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup) \n    lst_count = Counter(lst) \n    for element, occ in tup_count.items(): \n        print(\"Element {} Occured {} times\".format(element, occ))\n    for element, occ in lst_count.items(): \n        print(\"Element {} Occured {} times\".format(element, occ))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    print (\"\\nTuple: \" + str(tup) + \" and List: \" + str(lst)) \n    dict = {} \n    for item in tup: \n        if item in dict: \n            dict[item] += 1\n        else: \n            dict[item] = 1\n    for item in lst: \n        if item in dict: \n            dict[item] += 1\n        else: \n            dict[item] = 1\n    print (str(dict)) \n  "
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for elem in lst: \n        print (\"Occurence of\",elem,\"=\",tup.count(elem)) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in tup: \n        count = 0\n        for j in lst: \n            if(i == j): \n                count += 1\n        print(count)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # tup = tuple(lst)\n    # return tup \n    return {i:tup.count(i) for i in lst}\nprint(count_Occurrence((1,2,3,1,2,1,1),(1,2,3)))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for elem in tup: \n        result[elem] = count_dict.get(elem, 0)\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # return [tup.count(i) for i in lst]\n    count = Counter(tup)\n    # print(\"count\", count)\n    occur = count.values()\n    return occur\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for ele in tup: \n        if ele in count: \n            count[ele] += 1\n    print(count)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if type(tup)!= tuple or type(lst)!= list: \n        return \"Invalid input\"\n    else:\n        res = Counter(lst)\n        for i in tup:\n            if i in res:\n                res[i] -=1\n                if res[i] < 0:\n                    return \"Invalid input\"\n        return res\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = {} \n    for ele in lst: \n        if ele in d: \n            d[ele] += 1\n        else: \n            d[ele] = 1\n    for key, val in d.items(): \n        print (\"{} {}\".format(key, val)) \nlst = [1, 2, 3, 4, 5, 6, 6, 8, 8, 10] \ntup = (1, 2, 3, 4, 5, 6, 6, 8, 8, 10) \ncount_Occurrence(tup, lst) \n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for i in nums:\n        cube_list.append(i ** 3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = list()\n    for num in nums:\n        result.append(num**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubed_nums = []\n    for num in nums:\n        cubed_nums.append(num**3)\n    return cubed_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda x:x**3,nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube = num**3\n        cube_list.append(cube)\n    return cube_list\nprint(cube_nums([1,2,3,4,5]))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    pass # delete this line and replace with your code here\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (3 * n - 1) / 2\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 1: \n        return 1\n    return n + cal_sum(n-2)\nprint(cal_sum(5))\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return 0.5*(n+1)*(n+1)*(n+3)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n-1) + cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    else:\n        return 2*cal_sum(n-1) + 2*cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    while n:\n        s += n%10\n        n //= 10\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return cal_rec(n,0)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # your code here\n    x = (1 / 6) * (3 + 2 * (1 + 1 / (3 * 3)))\n    return int(n*x)"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += nCr(n, i)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [0, 0, 0]\n    q = [0, 0, 0]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i for i in str if len(i) == l]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    string_list = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            string_list.append(str[i])\n    return string_list\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Sample inputs : str = 'abc', l = 1\n    # Output: ['a']\n    # Sample inputs : str = 'abc', l = 3\n    # Output: ['abc']\n    # Sample inputs : str = 'abc', l = 4\n    # Output: ['abcd']\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = [i for i in str]\n    new_str_list = []\n    for i in str_list:\n        if len(new_str_list) < l:\n            new_str_list.append(i)\n    return ''.join(new_str_list)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    assert type(l) is list, 'list expected'\n    assert all([type(i) is str for i in l]),'str expected'\n    assert all([type(i) is str for i in str]),'str expected'\n    assert type(l) == type(str), 'list expected'\n    assert l[0] == str[0], 'list and str should have the same first element'\n    assert len(l) >= len(str), 'list should be longer than str'\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    i = 0\n    while i < l:\n        extracted_list.append(str[i:i+l])\n        i += l\n    return extracted_list\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    count=0\n    for i in range(0,len(str)):\n        if(count==l):\n            return str[0:i]\n        else:\n            count+=1\n    return None\ndef print_image(image_path):\n    '''\n    Write a function to load an image from a given file path and display it\n    '''\n    image=cv2.imread(image_path)\n    cv2.imshow('image',image)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\ndef print_image_with_labels(image_path, labels):\n    '''\n    Write a function to load an image from a given file path and display it along with a list of labels\n    '''\n    image=cv2.imread(image_path)\n    cv2.imshow('image',image)\n    for i in range(len(labels)):\n        cv2.putText(image,labels[i],(5,25*(i+1)),cv2.FONT_HERSHEY_SIMPLEX,0.6,(0,255,0),2)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    str_lst = []\n    for i in range(0, len(str)):\n        if(len(str[i]) == l):\n            str_lst.append(str[i])\n    \n    return str_lst\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) > l:\n            result.append(l[i][0:l])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(str[:l])\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','',text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','').replace('\\t','').replace('\\n','')\ndef normalize_text(text):\n    '''\n    Write a function to normalize the text.\n    '''\n    return text.lower()\ndef sort_words(words_list):\n    '''\n    Write a function to sort a list of words.\n    '''\n    words_list.sort()\n    return words_list\ndef remove_non_alpha_characters(text1):\n    '''\n    Write a function to remove all non-alphabetical characters from the given text.\n    '''\n    return re.sub('[^a-zA-Z]','',text1)\ndef sort_words_in_sentence(sentence):\n    '''\n    Write a function to sort a sentence.\n    '''\n    words = sentence.split(' ')\n    words = list(filter(None,words))\n    return sort_words(words)\ndef find_sentence_length(sentences):\n    '''\n    Write a function to find the longest sentence length.\n    '''\n    longest_sentence_length = 0\n    for sentence in sentences:\n        words = sentence.split(' ')\n        words = list(filter(None,words))\n        if len(words) > longest_sentence_length:\n            longest_sentence_length = len(words)\n    return longest_sentence_length\ndef remove_stop_words(sentence):\n    '''\n    Write a function to remove all stop words from the given sentence.\n    '''\n    stop_words = [\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \n    \"yours\", \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \n    \"hers\", \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \n    \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \n    \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \n    \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \n    \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \n    \"into\", \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \n    \"down\", \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \n    \"here\", \"there\", \"when\", \"where\", \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \n    \"more\", \"most\", \"other\", \"some\", \"such\", \"no\", \"nor\", \"not\", \"only\", \"own\", \"same\", \n    \"so\", \"than\", \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\", \"don\", \"should\", \"now\"]\n    words = sentence.split(' ')\n    words = list(filter(None,words))\n    non_stop_words = list(filter(lambda word : word not in stop_words,words))\n    return''.join(non_stop_words)\ndef find_stop_words(sentence):\n    '''\n    Write a function to find all the stop words in the given sentence.\n    '''\n    stop_words = [\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \n    \"yours\", \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \n    \"hers\", \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \n    \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \n    \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \n    \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \n    \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \n    \"into\", \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \n    \"down\", \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \n    \"here\", \"there\", \"when\", \"where\", \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \n    \"more\", \"most\", \"other\", \"some\", \"such\", \"no\", \"nor\", \"not\", \"only\", \"own\", \"same\", \n    \"so\", \"than\", \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\", \"don\", \"should\", \"now\"]\n    words = sentence.split(' ')\n    words = list(filter(None,words))\n    return list(filter(lambda word : word in stop_words,words))\ndef convert_emojis(text):\n    '''\n    Write a function to convert emojis in the given text.\n    '''\n    return text.encode('ascii', 'ignore').decode('ascii')\ndef add_suffix_to_words(sentence):\n    '''\n    Write a function to add a sufix to each word in the sentence.\n    '''\n    words = sentence.split(' ')\n    words = list(filter(None,words))\n    return list(map(lambda word : word + '_',words))\ndef remove_special_characters(text):\n    '''\n    Write a function to remove all special characters from the given text.\n    '''\n    return re.sub('[!@#$%^&*()_=+<>?;\\':\"]','',text)\ndef add_suffix_to_words_in_sentence(sentence):\n    '''\n    Write a function to add a sufix to each word in the sentence.\n    '''\n    words = sentence.split(' ')\n    words = list(filter(None,words))\n    return list(map(lambda word : word + '_',words))\ndef remove_numbers(sentence):\n    '''\n    Write a function to remove all numbers from the given text.\n    '''\n    return re.sub('[0-9]','',sentence)\ndef remove_numbers_from_words(words):\n    '''\n    Write a function to remove all numbers from the given list of words.\n    '''\n    return list(filter(lambda word : not re.match(r'[0-9]', word),words))\ndef remove_uncommon_words(words,threshold):\n    '''\n    Write a function to remove all uncommon words from the given list of words.\n    '''\n    return list(filter(lambda word : words.count(word) >= threshold,words))\ndef remove_uncommon_words_from_sentence(sentence,threshold):\n    '''\n    Write a function to remove all uncommon words from the given list of words.\n    '''\n    words = sentence.split(' ')\n    words = list(filter(None,words))\n    return list(filter(lambda word : words.count(word) >= threshold,words))\ndef remove_uncommon_words_from_words(words,threshold):\n    '''\n    Write a function to remove all uncommon words from the given list of words.\n    '''\n    return list(filter(lambda word : words.count(word) >= threshold,words))\ndef get_top_n_words(words_list,n):\n    '''\n    Write a function to get top n mos"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return \" \".join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n    \ndef format_text(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from the given string.\n    '''\n    return re.sub('[^0-9a-zA-Z]', '', text)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.split()\n    return''.join(text)\ndef find_first_occurrence(text1, substring):\n    '''\n    Write a function to return the first index of the substring in the given string.\n    Return -1 if the substring is not found.\n    '''\n    if substring in text1:\n        return text1.find(substring)\n    else:\n        return -1\ndef find_last_occurrence(text1, substring):\n    '''\n    Write a function to return the last index of the substring in the given string.\n    Return -1 if the substring is not found.\n    '''\n    if substring in text1:\n        return text1.rfind(substring)\n    else:\n        return -1\ndef number_of_occurrences(text1, substring):\n    '''\n    Write a function to count the number of occurrences of the substring in the given string.\n    Return 0 if the substring is not found.\n    '''\n    return text1.count(substring)\ndef number_of_words(text1):\n    '''\n    Write a function to count the number of words in the given string.\n    '''\n    text = text1.split()\n    return len(text)\ndef reverse(text1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    return text1[::-1]\ndef reverse_words_order(text1):\n    '''\n    Write a function to reverse the order of words in the given string.\n    The words should remain in the same order if they are separated by at least one other character.\n    '''\n    text = text1.split()\n    return''.join(text[::-1])\ndef reverse_word_order(text1):\n    '''\n    Write a function to reverse the order of words in the given string.\n    The words should remain in the same order if they are separated by at least one other character.\n    '''\n    text = text1.split()\n    print(text)\n    print(text[::-1])\n    for i in range(len(text)):\n        text[i] = text[::-1][i]\n    print(text)\n    return''.join(text)\ndef swap_first_last(text1):\n    '''\n    Write a function to swap the first and last characters in the given string.\n    '''\n    return text1[-1] + text1[1:-1] + text1[:1]\ndef remove_all_occurrences(text1, substring):\n    '''\n    Write a function to remove all occurrences of the substring in the given string.\n    Return the resulting string.\n    '''\n    return text1.replace(substring,'')\ndef remove_all_occurrences_keep_order(text1, substring):\n    '''\n    Write a function to remove all occurrences of the substring in the given string.\n    Return the resulting string.\n    '''\n    text = text1.split(substring)\n    return''.join(text[:1])\ndef remove_all_occurrences_keep_order_original_string(text1, substring):\n    '''\n    Write a function to remove all occurrences of the substring in the given string.\n    Return the resulting string.\n    '''\n    text = text1.split(substring)\n    return ''.join(text[:1])\ndef remove_all_occurrences_keep_order_keep_original_string_when_not_found(text1, substring):\n    '''\n    Write a function to remove all occurrences of the substring in the given string.\n    Return the resulting string.\n    '''\n    text = text1.split(substring)\n    if len(text) == 1:\n        return text1\n    return''.join(text[:1])\ndef remove_all_occurrences_keep_order_keep_original_string_when_not_found_keep_original_string_when_not_found_return_string(text1, substring):\n    '''\n    Write a function to remove all occurrences of the substring in the given string.\n    Return the resulting string.\n    '''\n    text = text1.split(substring)\n    return ''.join(text[:1])\ndef remove_all_occurrences_keep_order_keep_original_string_when_not_found_keep_original_string_when_not_found_keep_original_string_when_not_found_keep_original_string_when_not_found_return_string(text1, substring):\n    '''\n    Write a function to remove all occurrences of the substring in the given string.\n    Return the resulting string.\n    '''\n    text = text1.split(substring)\n    if len(text) == 1:\n        return text1\n    return ''.join(text[:1])\ndef remove_all_occurrences_keep_order_keep_original_string_when_not_found_keep_original_string_when_not_found_keep_original_string_when_not_found_keep_original_string_when_not_found_return_string_one_word_per_line(text1, substring):\n    '''\n    Write a function to remove all occurrences of the substring in the given string.\n    Return the resulting string.\n    '''\n    text = text1.split(substring)\n    if len(text) == 1:\n        return text1\n    return '\\n'.join(text[:1])\ndef remove_all_occurrences_keep_order_keep_original_string_when_not_found_keep_original_string_when_not_found_keep_original_string_when_not_found_keep_original_string_when_not_found_return_string_one_word_per_line_break_line(text1, substring):\n    '''\n    Write a function to remove all occurrences of the substring in the given string.\n    Return the resulting string.\n    '''\n    text = text1.split(substring)\n    if len(text) == 1:\n        return text1\n    return '\\n'.join(text[:1])\ndef extract_text_between_two_markers(text1, substring1, substring2):\n    '''\n    Write a function to extract and return the text between two given markers\n    from the given string.\n    If the markers are not found in the string, the function should return the string\n    unmodified.\n    '''\n    if substring1 in text1 and substring2 in text1:\n        return text1[text1.find(substring1)+len(substring1):text1.find(substring2)]\n    else:\n        return text1\ndef extract_text_between_two_markers_keep_original(text1, substring1, substring2):\n    '''\n    Write a function to extract and return the text between two given markers\n    from the given string.\n    If the markers are not found in the string, the function should return the string\n    unmodified.\n    '''\n    if substring1 in text1 and substring2 in text1:\n        return text1[text1.find(substring1)+len(substring1):text1.find(substring2)]\n    else:\n        return text1\ndef extract_text_between_two_markers_keep_original_keep_original_return_string(text1, substring1, substring2):\n    '''\n    Write a function to extract and return the text between two given markers\n    from the given string.\n    If the markers are not found in the string, the function should return the string\n    unmodified.\n    '''\n    if substring1 in text1 and substring2 in text1:\n        return text1[text1.find(substring1)+len(substring1):text1.find(substring2)]\n    else:\n        return text1\ndef extract_text_between_two_markers_keep_original_keep_original_return_string_one_word_per_line(text1, substring1, substring2):\n    '''\n    Write a function to extract and return the text between two given markers\n    from the given string.\n    If the markers are not found in the string, the function should return the string\n    unmodified.\n    '''\n    if substring1 in text1 and substring2 i"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile('[\\s]')\n    text1 = re.sub(pattern, '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # output_text = re.sub(r'\\s+', '', text1)\n    output_text = re.sub(r'\\s+', '', text1, flags=re.UNICODE)\n    return output_text\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.split()\n    text = \"\".join(text)\n    return text\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    amount = sale_amount - actual_cost\n    if amount > 0:\n        return amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # your code\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n        \nprint(loss_amount(100, 110))\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    amount = actual_cost - sale_amount\n    if amount < 0:\n        return amount\n    else:\n        return 0\n    \ndef get_loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gets loss amount on a sale if the given amount has loss else return 0.\n    '''\n    amount = actual_cost - sale_amount\n    if amount < 0:\n        return amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n//2+1) :\n        if n % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # code here\n    sum=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            if(i%2==0):\n                sum=sum+i\n    return(sum)\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                sum += i \n    return sum\ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i for i in range(1, n + 1) if (n % i == 0) and (i % 2 == 0)])\ndef sumofFactors3(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return n * (n + 1) / 2\ndef sumofFactors4(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i for i in range(1, int(n / 2) + 1) if n % i == 0])\ndef sumofFactors5(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1, int(n / 2) + 1) if n % i == 0)\ndef sumofFactors6(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return n * (n - 1) / 2\ndef sumofFactors7(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n * (n + 1)) / 2)\ndef sumofFactors8(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)\ndef sumofFactors9(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0 and i % 2 == 0)\ndef sumofFactors10(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0])\ndef sumofFactors11(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return n * (n + 1) / 2\ndef sumofFactors12(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return n * (n - 1)\ndef sumofFactors13(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int(n * (3 * n - 1) / 2)\ndef sumofFactors14(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int(n * (2 * n - 1) / 2)\ndef sumofFactors15(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n * (n + 1) * (2 * n + 1)) / 6)\ndef sumofFactors16(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return n * (n + 1) / 2\ndef sumofFactors17(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int(n * (n - 1) / 2)\ndef sumofFactors18(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int(n * (n - 1) / 2 + n / 2)\ndef sumofFactors19(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int(n * (n + 1) / 2 + n / 2)\ndef sumofFactors20(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int(n * (n + 1) / 2 - n / 2)\ndef sumofFactors21(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int(n * (n - 1) / 2 + n / 2)\ndef sumofFactors22(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int(n * (n - 1) / 2 - n / 2)\ndef sumofFactors23(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int(n * (n + 1) / 2 - n / 2)\ndef sumofFactors24(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int(n * (n - 1) / 2 + n / 2)\ndef sumofFactors25(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int(n * (n - 1) / 2 - n / 2)\ndef sumofFactors26(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n + 1) * n / 2)\ndef sumofFactors27(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n + 1) * n / 2 + n / 2)\ndef sumofFactors28(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n + 1) * n / 2 - n / 2)\ndef sumofFactors29(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n - 1) * n / 2)\ndef sumofFactors30(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n - 1) * n / 2 + n / 2)\ndef sumofFactors31(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n - 1) * n / 2 - n / 2)\ndef sumofFactors32(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n + 1) * (n - 1) / 2)\ndef sumofFactors33(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n + 1) * (n - 1) / 2 + (n - 1) / 2)\ndef sumofFactors34(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n + 1) * (n - 1) / 2 - (n - 1) / 2)\ndef sumofFactors35(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return int((n - 1) * (n - 1) / 2)\ndef sumofFactors36(n) : \n    '''\n    Write "
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 1):\n        return 1\n    elif (n == 2):\n        return 1\n    else:\n        sumoffactors = 1 + n\n        for i in range(2, int(math.sqrt(n)) + 1): \n            if (n % i == 0):\n                sumoffactors = sumoffactors + int(n / i)\n        return sumoffactors\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return sum(factors)\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                result = result + i\n    return result\ndef euclid(x,y):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if y == 0:\n        return x\n    else:\n        return euclid(y, x%y)\ndef isprime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    count = 0\n    for i in range(2,n):\n        if n % i == 0:\n            count = count + 1\n    if count == 0:\n        return \"prime\"\n    else:\n        return \"not prime\"\ndef recursive_fibonacci(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return recursive_fibonacci(n-1) + recursive_fibonacci(n-2)\ndef tribonacci(n):\n    '''\n    Write a python function to find the nth Tribonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef prime(n):\n    '''\n    Write a python function to print all the prime numbers till a number N.\n    '''\n    if n == 2:\n        print(2)\n    else:\n        for i in range(2,n+1):\n            count = 0\n            for j in range(2,i):\n                if i % j == 0:\n                    count = count + 1\n                    break\n            if count == 0:\n                print(i)\ndef recursive_sum(n):\n    '''\n    Write a python function to find the sum of a number till N using recursive function.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + recursive_sum(n-1)\ndef reverse_list(n):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return list(reversed(n))\ndef recursive_factorial(n):\n    '''\n    Write a python function to find the factorial of a number using recursive function.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n*recursive_factorial(n-1)\ndef recursive_combination(n,r):\n    '''\n    Write a python function to find the combination of n elements in r elements using recursive function.\n    '''\n    return math.factorial(n)/(math.factorial(n-r)*math.factorial(r))\ndef recursive_permutation(n,r):\n    '''\n    Write a python function to find the permutation of n elements in r elements using recursive function.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef isperfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum = sum + i\n    if sum == n:\n        return \"perfect\"\n    else:\n        return \"not perfect\"\ndef isabundant(n):\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1,int(n/2)+1):\n        if n % i == 0:\n            sum = sum + i\n    if sum > n:\n        return \"abundant\"\n    else:\n        return \"not abundant\"\ndef ispalindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    n = str(n)\n    return n == n[::-1]\ndef isarmstrong(n):\n    '''\n    Write a python function to check whether a number is an armstrong number or not.\n    '''\n    sum = 0\n    n = str(n)\n    for i in n:\n        sum = sum + int(i)**len(n)\n    if sum == int(n):\n        return \"armstrong\"\n    else:\n        return \"not armstrong\"\ndef issquare(n):\n    '''\n    Write a python function to check whether a number is a square number or not.\n    '''\n    return math.sqrt(n).is_integer()\ndef ispentagonal(n):\n    '''\n    Write a python function to check whether a number is pentagonal or not.\n    '''\n    return n == int(math.sqrt(1+24*n))/6\ndef ishexagonal(n):\n    '''\n    Write a python function to check whether a number is hexagonal or not.\n    '''\n    return n == int(math.sqrt(1+8*n))/4\ndef istriangular(n):\n    '''\n    Write a python function to check whether a number is triangular or not.\n    '''\n    return n == int(math.sqrt(8*n+1))/2\ndef iskaprekar(n):\n    '''\n    Write a python function to check whether a number is kaprekar or not.\n    '''\n    d = len(str(n))\n    sum = 0\n    num = n\n    for i in range(d):\n        digit = num % 10\n        sum = sum + digit**d\n        num = num//10\n    if n == sum:\n        return \"kaprekar\"\n    else:\n        return \"not kaprekar\"\ndef ispandigital(n):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    return ''.join(sorted(str(n))) == '123456789'\ndef digitcount(n):\n    '''\n    Write a python function to count the digits in a number.\n    '''\n    d = 0\n    while n>0:\n        n = n//10\n        d = d + 1\n    return d\ndef ispangram(sentence):\n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in alphabet:\n        if i in sentence:\n            return \"pangram\"\n    return \"not pangram\"\ndef isperfectsquare(n):\n    '''\n    Write a python function to check whether a number is a perfect square or not.\n    '''\n    x = n**0.5\n    return x.is_integer()\ndef sumofdigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum([int(i) for i in str(n)])\ndef findprimes(n):\n    '''\n    Write a python function to find the prime numbers between 2 and n.\n    '''\n    if n < 2:\n        return \"invalid input\"\n    else:\n        l = []\n        for i in range(2,n+1):\n            count = 0\n            for j in range(2,i):\n                if i % j == 0:\n                    count = count + 1\n                    break\n            if count == 0:\n                l.append(i)\n        return l\ndef recursive_su"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, (int)(math.sqrt(n))+1) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                sum = sum + i \n            if (i % 2!= 0) : \n                sum = sum + n/i \n    return int(sum) \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n    return total\n    \ndef sumofDivisors(n) : \n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            if i % 2 == 1:\n                total += i\n    return total\n    \ndef sumofDivisorsList(n) : \n    '''\n    Write a python function to find the sum of factors of all numbers between n and m.\n    '''\n    total = 0\n    for i in range(n, n+10):\n        total += sumofDivisors(i)\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    sum = 0\n    while i < (math.sqrt(n)) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                sum += i \n            else : \n                sum += i \n                sum += n / i \n        i = i + 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize a variable\n    sum_of_factors = 0\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    try:\n        text_match = re.search(r'[A-Za-z0-9]*z[A-Za-z0-9]*', text)\n        print('found an occurance of word z:'+ text_match.group())\n    except AttributeError:\n        pass\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.compile(r'\\b\\w*z\\w*\\b').search(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(r'z.\\b', text))\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match('\\w*z\\w*', text) is not None\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.match('\\w*z\\w*', text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #looks for a word that contains the substring 'z'\n    return re.search('\\w*z\\w*',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # r = re.compile(r'\\w*z\\w*')\n    # match = r.findall(text)\n    # print(match)\n    match = re.findall(r'\\w*z\\w*', text)\n    return match\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('[a-zA-Z]+z[a-zA-Z]*', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r\"\\b\\w*[z]\\w*\\b\", text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z_match = re.search(r'[\\w]+z[\\w]+', text)\n    return z_match.group() if z_match else None\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in monthnumb_31:\n        print(\"Yes, This month number {} has 31 days\".format(monthnum2))\n    elif monthnum2 in monthnumb_30:\n        print(\"Yes, This month number {} has 30 days\".format(monthnum2))\n    elif monthnum2 in monthnumb_28:\n        print(\"Yes, This month number {} has 28 days\".format(monthnum2))\n    else:\n        print(\"No, This month number {} does not have 31 or 30 days\".format(monthnum2))\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return -1\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    import calendar\n    calendar.setfirstweekday(calendar.SUNDAY)\n    if calendar.monthrange(2020,monthnum2)[1] == 31:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    return False\n    \ndef check_monthnumb_number2(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return (monthnum2 in (1, 3, 5, 7, 8, 10, 12))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid month number\"\n    else:\n        if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n            return \"31 days\"\n        elif monthnum == 2:\n            return \"28/29 days\"\n        elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n            return \"30 days\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        print(\"The month has 31 days.\")\n        return\n    elif monthnum2 in range(13,19):\n        print(\"The month has 30 days.\")\n        return\n    elif monthnum2 in range(19,29):\n        print(\"The month has 30 days.\")\n        return\n    elif monthnum2 == 29 and (year % 4 == 0 and year % 100!= 0 or year % 400 == 0):\n        print(\"The month has 29 days.\")\n        return\n    else:\n        print(\"The month does not have 31 days.\")\n        return\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return(31)\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return(30)\n    else:\n        return('No month with the number')\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    #write your code here\n    try:\n        if monthnum2<1 or monthnum2>12:\n            return False\n        elif monthnum2 in [1,3,5,7,8,10,12]:\n            return 31\n        else:\n            return 30\n    except:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for index in range(len(stringlist)):\n        print(stringlist[index][::-1])\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [val[::-1] for val in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #for i in range(0,len(stringlist)):\n    #    stringlist[i] = stringlist[i][::-1]\n    #return stringlist\n    return [item[::-1] for item in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # TODO: Implement this function\n    return None\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = []\n    for i in stringlist:\n        reversedlist.append(i[::-1])\n    return reversedlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = list()\n    for x in stringlist:\n        result.append(x[::-1])\n    return result\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_string_list = []\n    for string in stringlist:\n        reversed_string = \"\"\n        for c in string[::-1]:\n            reversed_string += c\n        reversed_string_list.append(reversed_string)\n    return reversed_string_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublst = []\n    sublst_len = len(lst)\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) < sublst_len:\n                sublst_len = len(lst[i:j+1])\n                sublst = lst[i:j+1]\n    return sublst\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_lst = [] \n    for i in range(len(lst)): \n        for j in range(i + 1, len(lst)): \n            sub = lst[i:j] \n            sub_lst.append(sub) \n    return min(sub_lst, key = len) \n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            sublist = lst[i]\n    return sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < len(min_lst):\n            min_lst = lst[i]\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #import sys\n    if not lst:\n        return 0\n    return min(Find_Min(lst[1:]), len(lst))\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = list(set(lst))\n    min_len = len(lst[0])\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    for item in lst:\n        if len(item) == min_len:\n            print(item)\n            break\n    return None\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)-1):\n        min_len = len(lst[i]) \n        min_sublist = lst[i] \n        for j in range(i+1, len(lst)): \n            if len(lst[j])< min_len: \n                min_len = len(lst[j]) \n                min_sublist = lst[j] \n        print(\"Minimum sublist of \" + str(lst) + \" is \" + str(min_sublist) + \" of length \" + str(min_len))\n        \n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    sublist = lst[0]\n    for each in lst:\n        if len(each) < min_len:\n            min_len = len(each)\n            sublist = each\n    return sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = len(lst)\n    if l == 1:\n        return lst\n    else:\n        m = lst[0]\n        for i in range(1, l):\n            if len(lst[i]) < len(m):\n                m = lst[i]\n        return m\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # lst=[1,3,4,5,1,3,4,5,1,3,4,5,1,3,4,5,1,3,4,5,1,3,4,5,1,3,4,5,1,3,4,5,1,3,4,5]\n    # lst=[1,2,3,4,5]\n    # lst=[1,2,3,4,5,1,3,4,5,1,3,4,5,1,3,4,5]\n    # lst=[1,2,3,4,5,1,3,4,5,1,3,4,5]\n    # lst=[1,2,3,4,5]\n    # lst=[1,2,3,4,5,6]\n    # lst=[1,2,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6]\n    # lst=[1,2,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6]\n    # lst=[1,2,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6]\n    # lst=[1,2,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6]\n    # lst=[1,2,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6]\n    \n    # lst=[1,2,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n    \n    \n    \ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area =.5*b*h\n    return area\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    import math\n    area = math.pi*r**2\n    return area\n    \ndef trapezoid_area(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    area = 1/2*(a+b)*h\n    return area\n    \ndef parallelogram_area(base,height):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = base*height\n    return area\n    \ndef trapezoid_volume(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    volume = 1/3*(a+b)*h\n    return volume\n    \ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r**2*h\n    return volume\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    #return l*b\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return (2*l)+(2*b)\n    #return 2*(l+b)\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    sub_str = re.sub(r'[A-Z]', '', str1)\n    print(sub_str)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    r = re.sub('[A-Z]', '', str1)\n    return r\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print(str1)\n    while True:\n        if str1.count('A') >= 1:\n            str1 = str1.replace('A', '')\n        if str1.count('B') >= 1:\n            str1 = str1.replace('B', '')\n        if str1.count('C') >= 1:\n            str1 = str1.replace('C', '')\n        if str1.count('D') >= 1:\n            str1 = str1.replace('D', '')\n        if str1.count('E') >= 1:\n            str1 = str1.replace('E', '')\n        if str1.count('F') >= 1:\n            str1 = str1.replace('F', '')\n        if str1.count('G') >= 1:\n            str1 = str1.replace('G', '')\n        if str1.count('H') >= 1:\n            str1 = str1.replace('H', '')\n        if str1.count('I') >= 1:\n            str1 = str1.replace('I', '')\n        if str1.count('J') >= 1:\n            str1 = str1.replace('J', '')\n        if str1.count('K') >= 1:\n            str1 = str1.replace('K', '')\n        if str1.count('L') >= 1:\n            str1 = str1.replace('L', '')\n        if str1.count('M') >= 1:\n            str1 = str1.replace('M', '')\n        if str1.count('N') >= 1:\n            str1 = str1.replace('N', '')\n        if str1.count('O') >= 1:\n            str1 = str1.replace('O', '')\n        if str1.count('P') >= 1:\n            str1 = str1.replace('P', '')\n        if str1.count('Q') >= 1:\n            str1 = str1.replace('Q', '')\n        if str1.count('R') >= 1:\n            str1 = str1.replace('R', '')\n        if str1.count('S') >= 1:\n            str1 = str1.replace('S', '')\n        if str1.count('T') >= 1:\n            str1 = str1.replace('T', '')\n        if str1.count('U') >= 1:\n            str1 = str1.replace('U', '')\n        if str1.count('V') >= 1:\n            str1 = str1.replace('V', '')\n        if str1.count('W') >= 1:\n            str1 = str1.replace('W', '')\n        if str1.count('X') >= 1:\n            str1 = str1.replace('X', '')\n        if str1.count('Y') >= 1:\n            str1 = str1.replace('Y', '')\n        if str1.count('Z') >= 1:\n            str1 = str1.replace('Z', '')\n        if str1.count('0') >= 1:\n            str1 = str1.replace('0', '')\n        if str1.count('1') >= 1:\n            str1 = str1.replace('1', '')\n        if str1.count('2') >= 1:\n            str1 = str1.replace('2', '')\n        if str1.count('3') >= 1:\n            str1 = str1.replace('3', '')\n        if str1.count('4') >= 1:\n            str1 = str1.replace('4', '')\n        if str1.count('5') >= 1:\n            str1 = str1.replace('5', '')\n        if str1.count('6') >= 1:\n            str1 = str1.replace('6', '')\n        if str1.count('7') >= 1:\n            str1 = str1.replace('7', '')\n        if str1.count('8') >= 1:\n            str1 = str1.replace('8', '')\n        if str1.count('9') >= 1:\n            str1 = str1.replace('9', '')\n        if str1.count(' ') >= 1:\n            str1 = str1.replace(' ', '')\n        if str1.count(':') >= 1:\n            str1 = str1.replace(':', '')\n        if str1.count('.') >= 1:\n            str1 = str1.replace('.', '')\n        if str1.count('!') >= 1:\n            str1 = str1.replace('!', '')\n        if str1.count('?') >= 1:\n            str1 = str1.replace('?', '')\n        if str1.count('\"') >= 1:\n            str1 = str1.replace('\"', '')\n        if str1.count('\"') >= 1:\n            str1 = str1.replace('\"', '')\n        if str1.count(')') >= 1:\n            str1 = str1.replace(')', '')\n        if str1.count('(') >= 1:\n            str1 = str1.replace('(', '')\n        if str1.count('-') >= 1:\n            str1 = str1.replace('-', '')\n        if str1.count('_') >= 1:\n            str1 = str1.replace('_', '')\n        if str1.count('=') >= 1:\n            str1 = str1.replace('=', '')\n        if str1.count('+') >= 1:\n            str1 = str1.replace('+', '')\n        if str1.count(';') >= 1:\n            str1 = str1.replace(';', '')\n        if str1.count('/') >= 1:\n            str1 = str1.replace('/', '')\n        if str1.count('*') >= 1:\n            str1 = str1.replace('*', '')\n        if str1.count(',') >= 1:\n            str1 = str1.replace(',', '')\n        if str1.count(':') >= 1:\n            str1 = str1.replace(':', '')\n        if str1.count(';') >= 1:\n            str1 = str1.replace(';', '')\n        if str1.count('|') >= 1:\n            str1 = str1.replace('|', '')\n        if str1.count('[') >= 1:\n            str1 = str1.replace('[', '')\n        if str1.count(']') >= 1:\n            str1 = str1.replace(']', '')\n        if str1.count('{') >= 1:\n            str1 = str1.replace('{', '')\n        if str1.count('}') >= 1:\n            str1 = str1.replace('}', '')\n        if str1.count(')') >= 1:\n            str1 = str1.replace(')', '')\n        if str1.count('(') >= 1:\n            str1 = str1.replace('(', '')\n        if str1.count('.') >= 1:\n            str1 = str1.replace('.', '')\n        if str1.count('#') >= 1:\n            str1 = str1.replace('#', '')\n        if str1.count('\\\\') >= 1:\n            str1 = str1.replace('\\\\', '')\n        if str1.count('%') >= 1:\n            str1 = str1.replace('%', '')\n        if str1.count('@') >= 1:\n            str1 = str1.replace('@', '')\n        if str1.count('&') >= 1:\n            str1 = str1.replace('&', '')\n        if str1.count('^') >= 1:\n            str1 = str1.replace('^', '')\n        if str1.count('~') >= 1:\n            str1 = str1.replace('~', '')\n        if str1.count('`') >= 1:\n            str1 = str1.replace('`', '')\n        if str1.count('+') >= 1:\n            str1 = str1.replace('+', '')\n        if str1.count('!') >= 1:\n            str1 = str1.replace('!', '')\n        if str1.count('?') >= 1:\n            str1 = str1.replace('?', '')"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    res = re.findall(r'[a-z]+', str1)\n    return res\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str(str1)\n    a=re.findall(r'[a-z]+',str1)\n    for i in range(0,len(a)):\n        str1=str1.replace(a[i],'')\n    return str1\ndef remove_duplicate_words(str1):\n    '''\n    Write a function to remove duplicate words from a given string.\n    '''\n    return \" \".join(list(set(str1.split())))\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return str1[::-1]\ndef palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1==str1[::-1]\ndef is_pallendrome(str1):\n    '''\n    Write a function to check whether a given string is a pallendrome or not.\n    '''\n    return str1==str1[::-1]\ndef mix_string(str1,str2):\n    '''\n    Write a function to mix the characters of 2 strings in such a way that no string is broken.\n    '''\n    str1=list(str1)\n    str2=list(str2)\n    str3=[]\n    for i in str1:\n        str3.append(i)\n    for i in str2:\n        if i not in str3:\n            str3.append(i)\n    return ''.join(str3)\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all the integers from a given string.\n    '''\n    str1=list(str1)\n    for i in range(0,len(str1)):\n        if str1[i].isnumeric():\n            str1[i]=' '\n    return ''.join(str1)\ndef replace_string(str1, str2):\n    '''\n    Write a function to replace 1 character of a string with another character.\n    '''\n    return str1.replace(str2[0],'*')\ndef check_string_for_characters(str1,str2):\n    '''\n    Write a function to check whether a string contains only a certain set of characters\n    (in this case a-z, A-Z).\n    '''\n    if set(str1)<=set(str2):\n        return True\n    return False\ndef remove_string_characters(str1,str2):\n    '''\n    Write a function to remove all the characters which are not present in a given string.\n    '''\n    return ''.join([i for i in str1 if i in str2])\ndef factorial(num):\n    '''\n    Write a function to find the factorial of a given number.\n    '''\n    if num<0:\n        return 'Error: factorial of a negative number cannot be calculated'\n    elif num==0:\n        return 1\n    else:\n        return num*factorial(num-1)\ndef length_string(str1):\n    '''\n    Write a function to find the length of a given string.\n    '''\n    return len(str1)\ndef number_of_substrings(str1,str2):\n    '''\n    Write a function to find the total number of substrings of a given string,\n    which are formed by exactly 2 characters from the other string.\n    '''\n    return sum([1 for i in str1 if i in str2])\ndef number_of_words(str1):\n    '''\n    Write a function to find the total number of words of a given string.\n    '''\n    return len(str1.split())\ndef number_of_vowels(str1):\n    '''\n    Write a function to find the total number of vowels of a given string.\n    '''\n    return len([i for i in str1 if i in 'aeiou'])\ndef check_vowel_or_consonant(str1):\n    '''\n    Write a function to check whether a given string is a consonant or a vowel.\n    '''\n    if str1 in 'aeiou':\n        return True\n    return False\ndef replace_characters(str1,str2,str3):\n    '''\n    Write a function to replace all the occurrences of a character in a string with another character.\n    '''\n    return str1.replace(str2,str3)\ndef check_for_characters(str1,str2):\n    '''\n    Write a function to check whether a string contains a given character or not.\n    '''\n    return str2 in str1\ndef string_rotation(str1,str2):\n    '''\n    Write a function to check whether 2 strings are rotations of each other.\n    '''\n    return (len(str1)==len(str2)) and (str1 in str2+str2)\ndef char_at_index(str1,index):\n    '''\n    Write a function to get the character at a given index.\n    '''\n    return str1[index]\ndef remove_chars(str1,str2):\n    '''\n    Write a function to remove all the characters from a given string except for a given character.\n    '''\n    return ''.join([i for i in str1 if i not in str2])\ndef check_parentheses(str1):\n    '''\n    Write a function to check whether the parentheses in a given string are balanced or not.\n    '''\n    return str1.count('(')==str1.count(')')\ndef string_to_integer_list(str1):\n    '''\n    Write a function to convert a given string to a list of integers.\n    '''\n    return list(map(int,str1.split()))\ndef string_to_integer_dictionary(str1):\n    '''\n    Write a function to convert a given string to a dictionary of integers.\n    '''\n    return dict(map(int,str1.split()))\ndef string_to_integer_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of integers.\n    '''\n    return tuple(map(int,str1.split()))\ndef string_to_integer_set(str1):\n    '''\n    Write a function to convert a given string to a set of integers.\n    '''\n    return set(map(int,str1.split()))\ndef string_to_integer_frozenset(str1):\n    '''\n    Write a function to convert a given string to a frozenset of integers.\n    '''\n    return frozenset(map(int,str1.split()))\ndef string_to_integer_complex(str1):\n    '''\n    Write a function to convert a given string to a complex number.\n    '''\n    return complex(int(str1.split()[0]),int(str1.split()[1]))\ndef binary_to_integer(str1):\n    '''\n    Write a function to convert a given binary number to an integer.\n    '''\n    return int(str1,2)\ndef integer_to_binary(num):\n    '''\n    Write a function to convert a given integer to a binary number.\n    '''\n    return bin(num)\ndef remove_prefix(str1,str2):\n    '''\n    Write a function to remove the prefix of a given string.\n    '''\n    return str1[len(str2):]\ndef remove_suffix(str1,str2):\n    '''\n    Write a function to remove the suffix of a given string.\n    '''\n    return str1[:-len(str2)]\ndef string_to_integer_map(str1):\n    '''\n    Write a function to convert a given string to a map of integers.\n    '''\n    return dict(map(int,str1.split()))\ndef string_to_integer_zip(str1):\n    '''\n    Write a function to convert a given string to a zip of integers.\n    '''\n    return zip(str1.split())\ndef string_to_integer_enumerate(str1):\n    '''\n    Write a function to convert a given string to a enumerate of integers.\n    '''\n    return list(enumerate(str1.split()))"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str(str1)\n    str2=re.sub('[A-Z][a-z]*', '', str1)\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1 == \"\":\n        return str1\n    elif len(str1) == 1:\n        return str1\n    else:\n        x = re.findall('(?<=\\w)([A-Z]+)(?=\\w)', str1)\n        for i in x:\n            str1 = str1.replace(i, '')\n        return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for char in str:\n        if char.isupper():\n            upper_ctr += 1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for char in str:\n        if char.isupper():\n            upper_ctr += 1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    d = 0\n    for c in str:\n        if c.isupper():\n            d += 1\n    return d\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(c.isupper() for c in str)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if(i>='A' and i<='Z'):\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(c.isupper() for c in str)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if i.isupper():\n            counter+=1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if(i.isupper()):\n            count=count+1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([c for c in str if c.isupper()])\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    comb = []\n    for i in range(1,len(list1)+1):\n        comb.extend(list(itertools.combinations(list1,i)))\n    return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    li = []\n    for i in range(1, len(list1)+1):\n        li.extend(list(combinations(list1, i)))\n    return li\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    else:\n        result = []\n        for i in range(len(list1)):\n            rest_list = list1[i+1:]\n            first_elem = list1[i]\n            for rest_combination in combinations_list(rest_list):\n                result.append([first_elem] + rest_combination)\n        return result\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1,len(list1)+1):\n        if i == 1:\n            for j in list1:\n                result.append([j])\n        else:\n            temp = result\n            result = []\n            for j in range(len(temp)):\n                for k in range(i):\n                    result.append(temp[j]+[list1[k]])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            comb_list.append((list1[i], list1[j]))\n    return comb_list\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            print('({}), ({})'.format(list1[i], list1[j]))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!=j:\n                print(list1[i],list1[j])\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #iterate through every possible number of elements to take from list\n    for i in range(len(list1)+1):\n        #if the number of elements is 1, then only return the list itself\n        if i == 1:\n            yield [list1]\n        #if the number of elements is 2, then only return the list itself\n        if i == 2:\n            yield list1\n        else:\n            #if there are more than 2 elements, then iterate through every possible combination\n            for c in combinations_list(list1[i:]):\n                yield [list1[:i]] + c\n    return\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        a = list1[i]\n        for j in range(i+1, len(list1)):\n            b = list1[j]\n            for k in range(j+1, len(list1)):\n                c = list1[k]\n                l.append([a, b, c])\n    return l\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        prev_list = combinations_list(list1[:-1])\n        new_list = []\n        for item in prev_list:\n            new_list.append(item + [list1[-1]])\n        new_list.append([list1[-1]])\n        return new_list\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return None\n    max_val = arr[0]\n    min_val = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_val, min_val = min_val, max_val\n        max_val = max(arr[i], max_val*arr[i])\n        min_val = min(arr[i], min_val*arr[i])\n        result = max(result, max_val)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    current_product = 1\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            current_product = 1\n        else:\n            current_product = arr[i] * current_product\n        max_product = max(max_product, current_product)\n        if arr[i] < 0:\n            current_product = 1\n        if current_product == 0:\n            current_product = 1\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n    s = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #maintain a max_so_far, initialize it with a negative num\n    #max_so_far = -10**9\n    max_so_far = -1\n    max_ending_here = 1\n    for i in range(len(arr)):\n        #calculate max_ending_here for every i\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        #if max_so_far is less than max_ending_here, then it is the new max_so_far\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = min_so_far = ans = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] >= 0:\n            curr_max = max(arr[i], arr[i]*max_so_far)\n            max_so_far = curr_max\n            curr_min = min(arr[i], arr[i]*min_so_far)\n            min_so_far = curr_min\n        else:\n            curr_max = max(arr[i], arr[i]*min_so_far)\n            max_so_far = curr_max\n            curr_min = min(arr[i], arr[i]*max_so_far)\n            min_so_far = curr_min\n        ans = max(ans, max_so_far)\n    return ans\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = arr[0]\n    local_max = arr[0]\n    local_min = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Brute force approach: O(n^3) time complexity\n    # max_product = 0\n    # for i in range(len(arr)):\n    #     for j in range(i, len(arr)):\n    #         for k in range(i, j):\n    #             product = arr[i] * arr[j] * arr[k]\n    #             if product > max_product:\n    #                 max_product = product\n    # return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_prod = arr[0]\n    for i in range(n):\n        temp = 1\n        for j in range(i,n):\n            temp *= arr[j]\n            if temp > max_prod:\n                max_prod = temp\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #time complexity is O(n)\n    #space complexity is O(n)\n    if len(arr) < 1:\n        return\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0],arr[1])\n    max_prod = arr[0]\n    max_end_here = max(arr[0],arr[1])\n    start = 0\n    for i in range(2,len(arr)):\n        max_end_here = max(arr[i],max_end_here*arr[i])\n        if max_prod < max_end_here:\n            max_prod = max_end_here\n            start = i-2\n    return max_prod,start\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Brute Force Solution\n    # Time Complexity O(n^3)\n    # Space Complexity O(1)\n    # max_prod = -sys.maxsize - 1\n    # for i in range(len(arr)):\n    #     for j in range(i, len(arr)):\n    #         curr_prod = 1\n    #         for k in range(i, j+1):\n    #             curr_prod *= arr[k]\n    #         max_prod = max(max_prod, curr_prod)\n    # return max_prod\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    result = []\n    for val in dict.values():\n        result.append(val)\n    if n == result[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check_list = []\n    for key, val in dict.items():\n        check_list.append(val)\n    return check_list.count(check_list[0]) == len(check_list)\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values[0] == values[n-1]\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict[list(dict.keys())[0]]\n    for key in dict.keys():\n        if value!= dict[key]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_values = dict.values()\n    if len(set(dict_values)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_list = list(dict.values())\n    if len(set(dict_list)) == 1:\n        print(f'All values are same as {n}')\n    else:\n        print(f'All values are different as {n}')\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(dict[i]==dict[n] for i in dict) :\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == len(set(dict.values())):\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    if n == len(set(values)):\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count_values = 0\n    key_to_find = None\n    for key, value in dict.items():\n        if count_values == 0:\n            count_values += 1\n            key_to_find = key\n        else:\n            if key_to_find!= key:\n                return False\n            if value!= dict[key]:\n                return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    my_dict = {\n    \"A\" : \"C\",\n    \"B\" : {\n        \"A\" : \"A\",\n        \"B\" : {\n        \"a\" : \"a\",\n        \"b\" : {\n            \"a\" : \"a\"\n        }\n    }\n    }\n    }\n    return my_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in list(dict1.keys()):\n        if dict1[key] == None:\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: val for key, val in dict1.items() if val!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key, value in dict1.items():\n        if value!= '':\n            dict2[key] = value\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return dict1\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1_copy = dict1.copy()\n    for key, value in dict1.items():\n        if not value:\n            dict1_copy.pop(key)\n    return dict1_copy\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr: return 0\n    n = len(arr)\n    # dp[i] stores the maximum product of numbers formed by i consecutive elements in arr\n    dp = [0 for _ in range(n)]\n    dp[0] = arr[0]\n    for i in range(1, n):\n        # if current element is the maximum, replace it\n        if arr[i] > arr[i - 1]:\n            dp[i] = arr[i]\n        else:\n            # If the current element is the minimum, replace it with the maximum of the previous dp[i-1] and the current element.\n            # We want to include the maximum value of arr[i-1] in the product, otherwise the product will be larger than the actual product\n            dp[i] = max(arr[i], arr[i-1] * dp[i-1])\n    return dp[n-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    print('\\n')\n    print(\"Solution to {}\".format(max_product.__doc__))\n    print('\\n')\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    \n    # Initialize the maxProduct value\n    maxProduct = 0\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    # Initialize dp with first two values\n    dp = [arr[0], arr[1]]\n    max_product = arr[0] * arr[1]\n    # for i in range(2, n):\n    #     dp.append(max(arr[i], dp[i - 1] * arr[i], dp[i - 2] * arr[i]))\n    #     max_product = max(max_product, dp[i])\n    for i in range(2, n):\n        dp.append(max(arr[i], dp[i - 1] * arr[i], dp[i - 2] * arr[i]))\n        max_product = max(max_product, dp[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 2:\n        return 0\n    else:\n        products = []\n        for i in range(len(arr)-1):\n            products.append(arr[i]*arr[i+1])\n        products.append(arr[-1]*arr[0])\n        return max(products)\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    s = set()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            s.add(arr[j]-arr[i])\n    return max(s)\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    product = arr[0] * arr[1]\n    for i in range(2,len(arr)):\n        product = max(product, arr[i] * max_product(arr[:i]))\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # brute force approach O(n^3)\n    # max_prod = 0\n    # for i in range(len(arr)):\n    #     for j in range(i+1, len(arr)):\n    #         for k in range(j+1, len(arr)):\n    #             prod = arr[i] * arr[j] * arr[k]\n    #             if prod > max_prod:\n    #                 max_prod = prod\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = 1\n    \n    # find the max product for the whole array\n    for i in range(n):\n        max_product *= arr[i]\n    \n    # find the max product of the subarray\n    for i in range(n):\n        for j in range(i,n):\n            max_product = max(max_product, arr[j]*arr[i])\n    \n    return max_product\n    \nif __name__ == \"__main__\":\n    arr = [100,10,5,6,200,50,60,70,1]\n    print(\"The maximum product of the array is {}\".format(max_product(arr)))\n    \n    arr = [1,2,3,4,5,6]\n    print(\"The maximum product of the array is {}\".format(max_product(arr)))\n    \n    arr = [1,4,3,2]\n    print(\"The maximum product of the array is {}\".format(max_product(arr))"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def largest_product_in_list(arr):\n        if arr == []:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        \n        max_so_far = 1\n        max_ending_here = 1\n        start = 0\n        end = 0\n        \n        for i in range(len(arr)):\n            if arr[i] >= max_ending_here:\n                max_ending_here = arr[i]\n                end = i\n            elif arr[i] > 1:\n                max_ending_here = 1\n                start = i\n                end = i\n            \n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    \n    \n    if len(arr) == 0:\n        return 0\n    \n    product = largest_product_in_list(arr)\n    print('Max product in a list', product)\n    \n    if len(arr) == 1:\n        return product\n    \n    \n    if product < 0:\n        product = 1\n    \n    for i in range(len(arr)):\n        if i > 0 and arr[i] < arr[i - 1]:\n            arr[i] = arr[i - 1]\n        \n        if arr[i] > 1:\n            arr[i] = 1\n        \n        product *= arr[i]\n    print('Max product in a list', product)\n    return product\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(len(test_tup)-1):\n        tup = (test_tup[i]+test_tup[i+1])\n        sum_tup = sum_tup + tup\n    return sum_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    lst = []\n    for x in test_tup:\n        for y in test_tup:\n            if x!= y:\n                lst.append(x + y)\n    return lst\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    import itertools\n    test_tup = [1,2,3,4]\n    res_tup = []\n    for i in range(1, len(test_tup)):\n        res_tup.append(test_tup[i-1] + test_tup[i])\n    return res_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pair_add = 0\n    for i in range(0,len(test_tup)):\n        if i==0:\n            pair_add = test_tup[i] + test_tup[i+1]\n        elif i==(len(test_tup)-1):\n            pair_add = pair_add + test_tup[i-1]\n        else:\n            pair_add = pair_add + test_tup[i-1] + test_tup[i+1]\n    return pair_add\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = 0\n    for i in range(0, len(test_tup)):\n        if i == 0:\n            sum = test_tup[i] + test_tup[i + 1]\n            print(\"\\nSum of {} and {} is: {}\".format(test_tup[i], test_tup[i + 1], sum))\n        else:\n            sum = sum + test_tup[i + 1]\n            print(\"\\nSum of {} and {} is: {}\".format(test_tup[i], test_tup[i + 1], sum))\n    return sum\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    result = []\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        result.append(test_tup[i]+test_tup[i+1])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tup)-1):\n        new_tuple += (test_tup[i] + test_tup[i+1],)\n    return new_tuple\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            result = result + (test_tup[0]+test_tup[1],)\n        else:\n            result = result + (test_tup[i]+test_tup[i+1],)\n    return result\n    \n    \ndef add_pairwise_recursive(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple using recursion.\n    '''\n    result = ()\n    if len(test_tup) == 1:\n        return (test_tup[0],)\n    else:\n        result = result + (test_tup[0]+test_tup[1],)\n        return result + add_pairwise_recursive(test_tup[1:])\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(reduce(lambda x, y: x + y, test_tup))\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mod = 1\n    for i in arr:\n        mod = (mod * i) % n\n    return mod\n    \ndef find_modular_inverse(arr, n):\n    '''\n    Write a python function to find the modular multiplicative inverse of the array elements modulo n.\n    '''\n    for i in range(n):\n        if (arr[i] * i) % n == 1:\n            return i\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x, y: (x * y) % n, arr)\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for x in arr:\n        product = (product * x) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # Return the product of the array elements \n    # if the product is greater than n \n    if(fun(arr, n) > n): \n        return fun(arr, n) \n    \n    # Else find the remainder \n    prod = 1; \n    for i in range(n): \n        prod = prod * arr[i] \n    return prod % n; \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for ele in arr:\n        prod = prod * ele % n\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, n):\n        product = (product*arr[i]) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = product * num\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return l==range(l[0], l[-1]+1)\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #initializing the minimum and maximum as first element of list\n    minimum = l[0]\n    maximum = l[0]\n    \n    for element in l:\n        if element < minimum:\n            minimum = element\n        if element > maximum:\n            maximum = element\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l)==list(range(min(l),max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]+1 == l[i+1]: \n            continue\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    a = []\n    for i in l:\n        if i - l[l.index(i) - 1] == 1:\n            a.append(i)\n        else:\n            break\n    if len(a) == len(l):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if (l[i] + 1) == l[i+1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = [2,3,4,5,6,8,9,10]\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n        \n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(l[i+1]==l[i]+1 for i in range(len(l)-1))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if type(test_list1)!= list or type(test_list2)!= list:\n        return None\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in test_list1:\n        if i in test_list2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(set1.intersection(set2))\n    \ndef list_to_tuple(test_list):\n    '''\n    Write a function to convert the list to tuple.\n    '''\n    return tuple(test_list)\n    \ndef string_intersection(test_str1, test_str2):\n    '''\n    Write a function to find the string intersection of the given two strings irrespective of their order.\n    '''\n    return set(test_str1).intersection(set(test_str2))\n    \ndef convert_dict_to_list(test_dict):\n    '''\n    Write a function to convert the given dictionary to list.\n    '''\n    return list(test_dict)\n    \ndef check_palindrome(test_str):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    return test_str == test_str[::-1]\n    \ndef check_permutation(test_str1, test_str2):\n    '''\n    Write a function to check whether two given strings are permutations of each other or not.\n    '''\n    return len(set(test_str1)) == len(set(test_str2)) and len(test_str1) == len(test_str2)\n    \ndef word_search(test_grid, test_word):\n    '''\n    Write a function to find the starting index of the given word in the given grid.\n    '''\n    i = 0\n    j = 0\n    index = -1\n    for row in test_grid:\n        i = 0\n        j = 0\n        for col in row:\n            if col == test_word[0]:\n                if test_grid[i][j:j+len(test_word)] == test_word:\n                    index = (i, j)\n                    break\n            j += 1\n        if index!= -1:\n            break\n        i += 1\n    return index\n    \ndef convert_chars_to_int(test_str):\n    '''\n    Write a function to convert given string to integer.\n    '''\n    return int(test_str)\n    \ndef convert_int_to_chars(test_int):\n    '''\n    Write a function to convert given integer to string.\n    '''\n    return str(test_int)\n    \ndef generate_valid_parentheses(test_num):\n    '''\n    Write a function to generate all valid parenthesis of given length.\n    '''\n    result = []\n    def _helper(test_num, test_curr, test_i, test_j, test_ans):\n        if test_num == 0:\n            result.append(test_ans)\n            return\n        if test_i < test_j:\n            if test_j - test_i == test_num:\n                _helper(test_num - 1, test_ans + '(', test_i + 1, test_j, test_ans + '(')\n                _helper(test_num - 1, test_ans + ')', test_i, test_j - 1, test_ans + ')')\n            elif test_j - test_i < test_num:\n                _helper(test_num - 1, test_ans + '(', test_i + 1, test_j, test_ans + '(')\n    _helper(test_num, '', 0, 0, '')\n    return result\n    \ndef sorted_matrix(test_matrix):\n    '''\n    Write a function to return sorted matrix.\n    '''\n    return sorted(test_matrix)\n    \ndef convert_decimal_to_binary(test_decimal):\n    '''\n    Write a function to convert decimal to binary.\n    '''\n    return bin(test_decimal)\n    \ndef convert_binary_to_decimal(test_binary):\n    '''\n    Write a function to convert binary to decimal.\n    '''\n    return int(test_binary, 2)\n    \ndef reverse_words_in_sentence(test_str):\n    '''\n    Write a function to reverse words of a given sentence.\n    '''\n    return''.join(reversed(test_str.split(' ')))\n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function to remove duplicates of a given list.\n    '''\n    return list(set(test_list))\n    \ndef list_tuple_to_string(test_list):\n    '''\n    Write a function to convert list to string.\n    '''\n    return ''.join(map(str, test_list))\n    \ndef list_of_sum(test_list, test_num):\n    '''\n    Write a function to return list of given sum.\n    '''\n    return [sum(sub_list) for sub_list in test_list if sum(sub_list) == test_num]\n    \ndef find_max_length_sequence(test_list):\n    '''\n    Write a function to find the maximum length of subsequence which has equal number of 0 and 1.\n    '''\n    i = 0\n    result = []\n    for j in range(len(test_list)):\n        if j == 0:\n            result.append(test_list[j])\n        elif test_list[j] == test_list[j-1]:\n            result.append(test_list[j])\n        else:\n            result.append(test_list[j])\n            i = j\n    return i + 1\n    \ndef max_length_sequence(test_list):\n    '''\n    Write a function to find the maximum length of subsequence which has equal number of 0 and 1.\n    '''\n    i = 0\n    result = []\n    for j in range(len(test_list)):\n        if j == 0:\n            result.append(test_list[j])\n        elif test_list[j] == test_list[j-1]:\n            result.append(test_list[j])\n        else:\n            result.append(test_list[j])\n            i = j\n    return i + 1\n    \ndef count_longest_repetition(test_str, test_char):\n    '''\n    Write a function to count the longest repetition of given character in the string.\n    '''\n    return test_str.count(test_char)\n    \ndef max_occurences(test_str):\n    '''\n    Write a function to count the maximum number of occurences of a given character in the string.\n    '''\n    return max(test_str.count(test_char) for test_char in test_str)\n    \ndef count_substring(test_str, test_substr):\n    '''\n    Write a function to count the number of occurences of the given substring in the given string.\n    '''\n    return test_str.count(test_substr)\n    \ndef find_single_number(test_list):\n    '''\n    Write a function to find the number that appears only once in the given list.\n    '''\n    return 2 * sum(test_list) - sum(set(test_list))\n    \ndef check_balanced_brackets(test_str):\n    '''\n    Write a function to check whether a string is balanced or not.\n    '''\n    brackets = ['(', ')', '[', ']', '{', '}']\n    stack = []\n    for char in test_str:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets[:3]:\n            if not stack:\n                return False\n            if stack[-1] == '(' and char == ')':\n                stack.pop()\n            elif stack[-1] == '[' and char == ']':\n                stack.pop()\n            elif stack[-1] == '{' and char == '}':\n                stack.pop()\n            else:\n                return False\n    return not stack\n    \ndef compute_gcd(test_int1, test_int2):\n    '''\n    Write a function to compute the greatest common divisor of given two integers.\n    '''\n    return gcd(test_int1, test_in"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list1 = []\n    list2 = []\n    for t1 in test_list1:\n        list1.append(set(t1))\n    for t2 in test_list2:\n        list2.append(set(t2))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    for item in test_list1:\n        if item in test_list2:\n            result_list.append(item)\n    return result_list\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for x in test_list1:\n        if x in test_list2:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                result.append(t1)\n                break\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # return set.intersection(*test_list1) & set.intersection(*test_list2)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch,newch)\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=''\n    for char in str1:\n        if char==ch:\n            newstr+=newch\n        else:\n            newstr+=char\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            result += newch\n        else:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    out = \"\"\n    for c in str1:\n        if c == ch:\n            c = newch\n        out = out + c\n    return out\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #return dict(sorted(dict1.items(),key=lambda x:x[1],reverse=True))\n    #return dict(sorted(dict1.items(),key=lambda x:x[1],reverse=True))\n    #return sorted(dict1.items(), key = lambda x : x[1], reverse = True)\n    #return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted(dict1.items(),key=lambda x: x[1], reverse = True)\n    #return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    lst = []\n    for i, j in dict1.items():\n        lst.append((i, j))\n    return sorted(lst, key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key = lambda x: x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key = lambda x:x[1], reverse = True))\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = []\n    dict2 = dict1\n    for key in dict2:\n        list1.append((key, dict2[key]))\n    return sorted(list1, key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp = dict1.copy()\n    sorted_dict = {}\n    for key,value in sorted(temp.items(), key=lambda x:x[1], reverse=True):\n        sorted_dict[key] = value\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for i in sorted(dict1,key=dict1.get,reverse=True):\n        print(i,dict1[i])\n    return i,dict1[i]\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\ndef frequency(dict1):\n    '''\n    Write a function to count the frequency of each element in a list.\n    '''\n    s=0\n    for i in dict1:\n        s=s+dict1[i]\n    return s\ndef stats(list1):\n    '''\n    Write a function to get the max, min, mean and median of a list of numbers.\n    '''\n    list2=[]\n    list2=list1\n    length=len(list2)\n    list2.sort()\n    if length%2==0:\n        median1=list2[length//2]\n        median2=list2[length//2-1]\n        median=(median1+median2)/2\n    else:\n        median=list2[length//2]\n    mean=sum(list1)/length\n    maxim=max(list1)\n    minim=min(list1)\n    print('max:',maxim,'\\nmin:',minim,'\\nmean:',mean,'\\nmedian:',median)\ndef clean_list(list1):\n    '''\n    Write a function to remove all the duplicate elements from a list.\n    '''\n    s=[]\n    for i in list1:\n        if i not in s:\n            s.append(i)\n    return s\ndef common(list1,list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    return list(set(list1).intersection(list2))\ndef replace_all(dict1,dict2):\n    '''\n    Write a function to replace all the elements in a list with another list.\n    '''\n    for i in dict1:\n        if i in dict2:\n            dict1[i]=dict2[i]\n    return dict1\ndef max_dict(dict1):\n    '''\n    Write a function to get the maximum value from a dictionary.\n    '''\n    return max(dict1.values())\ndef difference(list1,list2):\n    '''\n    Write a function to return the difference between the two lists.\n    '''\n    return list(set(list1)-set(list2))\ndef count_sort(list1):\n    '''\n    Write a function to sort a list of strings by the number of vowels in each string.\n    '''\n    s={}\n    for i in list1:\n        s[i]=len(i)\n    return sorted(s,key=lambda x:s[x],reverse=True)\ndef power_set(list1):\n    '''\n    Write a function to get the power set of a set.\n    '''\n    s={}\n    for i in list1:\n        s[i]=i\n    powerset=[[]]\n    for i in list1:\n        for j in range(len(powerset)):\n            powerset.append(powerset[j]+[i])\n    return powerset\ndef factorial(num):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    if num==1:\n        return num\n    else:\n        return num*factorial(num-1)\ndef mean(list1):\n    '''\n    Write a function to get the mean of a list of numbers.\n    '''\n    return sum(list1)/len(list1)\ndef mode(list1):\n    '''\n    Write a function to get the mode of a list of numbers.\n    '''\n    dict1={}\n    for i in list1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]=dict1[i]+1\n    return sort_counter(dict1)[0][0]\ndef second_large_elements(list1):\n    '''\n    Write a function to get the second largest element in a list of numbers.\n    '''\n    s=[]\n    for i in list1:\n        s.append(i)\n    s.sort()\n    return s[-2]\ndef single_sort(list1):\n    '''\n    Write a function to sort a list of tuples using the second item in the tuple.\n    '''\n    return sorted(list1, key=lambda x: x[1])\ndef string_format(list1):\n    '''\n    Write a function to format a list of numbers as a string using commas to separate thousands.\n    '''\n    s=[]\n    for i in list1:\n        s.append(str(i))\n    return ','.join(s)\ndef string_format_with_regex(list1):\n    '''\n    Write a function to format a list of numbers as a string using commas to separate thousands.\n    '''\n    return ','.join(format(i,',d') for i in list1)\ndef is_unique(list1):\n    '''\n    Write a function to check if a list is unique or not.\n    '''\n    return len(list1)==len(set(list1))\ndef is_palindrome(list1):\n    '''\n    Write a function to check if a list is palindrome or not.\n    '''\n    return list1==list(reversed(list1))\ndef get_all_unique_permutations(list1):\n    '''\n    Write a function to get all the unique permutations of a list of numbers.\n    '''\n    return [list(i) for i in set(tuple(i) for i in list1)]\ndef get_all_permutations(list1):\n    '''\n    Write a function to get all the permutations of a list of numbers.\n    '''\n    return [list(i) for i in set(tuple(i) for i in list1)]\ndef get_all_combinations(list1,r):\n    '''\n    Write a function to get all the combinations of a list of numbers with a specified length.\n    '''\n    return [list(i) for i in set(tuple(i) for i in list1) if len(i)==r]\ndef get_all_unique_combinations(list1,r):\n    '''\n    Write a function to get all the unique combinations of a list of numbers with a specified length.\n    '''\n    return [list(i) for i in set(tuple(i) for i in list1) if len(i)==r]\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove all the duplicate elements from a list.\n    '''\n    return list(set(list1))\ndef remove_all(list1,list2):\n    '''\n    Write a function to remove all the elements in a list that are present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\ndef get_next_greater_element_position(list1):\n    '''\n    Write a function to get the position of the next greater element of every element in a list.\n    '''\n    dict1={}\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[j]>list1[i]:\n                dict1[i]=j\n                break\n        if i not in dict1:\n            dict1[i]=-1\n    return dict1\ndef get_next_greater_element_position_with_stack(list1):\n    '''\n    Write a function to get the position of the next greater element of every element in a list using stack.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        if len(list2)==0:\n            list2.append(i)\n        elif list1[list2[-1]]<list1[i]:\n            list2.append(i)\n        else:\n            while len(list2)!=0 and list1[list2[-1]]>=list1[i]:\n                list2.pop()\n            list2.append(i)\n    dict1={}\n    for i in range(len(list1)):\n        if len(list2)==0:\n            dict1[i]=-1\n        else:\n            dict1[i]=list2[-1]\n    return dict1\ndef ma"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dic = {}\n    sorted_values = sorted(dict1.values())\n    for value in sorted_values:\n        for key in dict1.keys():\n            if dict1[key] == value:\n                sorted_dic[key] = dict1[key]\n                break\n    return sorted_dic\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key = lambda item: item[1])}\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums)-min(nums)-max(nums)\n    \ndef is_valid(isbn):\n    '''\n    Write a python function to validate a given ISBN-10 as valid or invalid.\n    '''\n    if len(isbn)!= 10:\n        return False\n    \n    if isbn.isdigit() == False:\n        return False\n    \n    digit_values = {0:1, 1:3, 2:1, 3:3, 4:1, 5:3, 6:1, 7:3, 8:1, 9:3, 10:1, 11:3, 12:1, 13:3, 14:1, 15:3, 16:1, 17:3, 18:1, 19:3, 20:1, 21:3, 22:1, 23:3, 24:1, 25:3, 26:1, 27:3, 28:1, 29:3}\n    \n    total_sum = 0\n    for i in range(len(isbn)):\n        total_sum += digit_values[int(isbn[i])] if i % 2 == 0 else digit_values[int(isbn[i])] * 3\n    \n    return total_sum % 10 == 0\n    \ndef reverse_str(st):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    return st[::-1]\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    return 1 if n == 0 else n * factorial(n-1)\n    \ndef fib(n):\n    '''\n    Write a python function to print the fibonacci series up to the nth term.\n    '''\n    return [0, 1] if n < 2 else fib(n-1) + [fib(n-2)[-1] + fib(n-2)[-2]]\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is a prime or not.\n    '''\n    return True if n in [2, 3] or (n % 2 == 0 and n % 3!= 0 and n % 5!= 0) else False if n < 2 else is_prime(n-1)\n    \ndef next_prime(n):\n    '''\n    Write a python function to find the next prime number greater than a given number.\n    '''\n    if n < 2:\n        return 2\n    if is_prime(n):\n        return n + 1\n    \n    if is_prime(n+1) == False:\n        return next_prime(n+1)\n    return n + 1\n    \ndef swap(a, b):\n    '''\n    Write a python function to swap two numbers without using a third variable.\n    '''\n    return b, a\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return sum(nums[0:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for x in nums:\n        sum += x\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    def l_and_s(nums):\n        # sort the list\n        nums.sort()\n        # store the smallest value and largest value in variables\n        smallest = nums[0]\n        largest = nums[-1]\n        return smallest, largest\n    # call the function\n    smallest, largest = l_and_s(nums)\n    print(\"Smallest number:\", smallest)\n    print(\"Largest number:\", largest)\n    # sum of the two values\n    print(smallest + largest)"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val+min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    max_sum = nums[-1] + nums[0]\n    return max_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    def max_min(nums):\n        return min(nums) + max(nums)\n    \n    return max_min(nums)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if(string.islower() == True):\n        return string.lower()\n    else:\n        return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    string = str1\n    for i in string:\n        if i.islower():\n            string = string.replace(i, '')\n    print(\"\\n\\n\\n\\nstring after removing lowercase: \",string)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = \"MyString\"\n    lowercase_characters = [c for c in str1 if c.islower()]\n    # Your code goes here\n    # You should have returned a new string here.\n    return lowercase_characters\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isupper():\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = re.sub('[a-z]', '', str1)\n    print(new_str)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    s1 = \"A B B c d e e E\".split()\n    s2 = \"a b b c d e e E\".split()\n    s3 = \"aAbBcCdDeEeE\".split()\n    s4 = \"A B B c d e e E\".split()\n    s5 = \"A B B c d e e E\".split()\n    s6 = \"A B B c d e e E\".split()\n    s7 = \"aAbBcCdDeEeE\".split()\n    s8 = \"A B B c d e e E\".split()\n    s9 = \"A B B c d e e E\".split()\n    s10 = \"A B B c d e e E\".split()\n    s11 = \"A B B c d e e E\".split()\n    s12 = \"A B B c d e e E\".split()\n    s13 = \"A B B c d e e E\".split()\n    s14 = \"A B B c d e e E\".split()\n    s15 = \"A B B c d e e E\".split()\n    s16 = \"A B B c d e e E\".split()\n    s17 = \"A B B c d e e E\".split()\n    s18 = \"A B B c d e e E\".split()\n    s19 = \"A B B c d e e E\".split()\n    s20 = \"A B B c d e e E\".split()\n    s21 = \"A B B c d e e E\".split()\n    s22 = \"A B B c d e e E\".split()\n    s23 = \"A B B c d e e E\".split()\n    s24 = \"A B B c d e e E\".split()\n    s25 = \"A B B c d e e E\".split()\n    s26 = \"A B B c d e e E\".split()\n    s27 = \"A B B c d e e E\".split()\n    s28 = \"A B B c d e e E\".split()\n    s29 = \"A B B c d e e E\".split()\n    s30 = \"A B B c d e e E\".split()\n    s31 = \"A B B c d e e E\".split()\n    s32 = \"A B B c d e e E\".split()\n    s33 = \"A B B c d e e E\".split()\n    s34 = \"A B B c d e e E\".split()\n    s35 = \"A B B c d e e E\".split()\n    s36 = \"A B B c d e e E\".split()\n    s37 = \"A B B c d e e E\".split()\n    s38 = \"A B B c d e e E\".split()\n    s39 = \"A B B c d e e E\".split()\n    s40 = \"A B B c d e e E\".split()\n    s41 = \"A B B c d e e E\".split()\n    s42 = \"A B B c d e e E\".split()\n    s43 = \"A B B c d e e E\".split()\n    s44 = \"A B B c d e e E\".split()\n    s45 = \"A B B c d e e E\".split()\n    s46 = \"A B B c d e e E\".split()\n    s47 = \"A B B c d e e E\".split()\n    s48 = \"A B B c d e e E\".split()\n    s49 = \"A B B c d e e E\".split()\n    s50 = \"A B B c d e e E\".split()\n    s51 = \"A B B c d e e E\".split()\n    s52 = \"A B B c d e e E\".split()\n    s53 = \"A B B c d e e E\".split()\n    s54 = \"A B B c d e e E\".split()\n    s55 = \"A B B c d e e E\".split()\n    s56 = \"A B B c d e e E\".split()\n    s57 = \"A B B c d e e E\".split()\n    s58 = \"A B B c d e e E\".split()\n    s59 = \"A B B c d e e E\".split()\n    s60 = \"A B B c d e e E\".split()\n    s61 = \"A B B c d e e E\".split()\n    s62 = \"A B B c d e e E\".split()\n    s63 = \"A B B c d e e E\".split()\n    s64 = \"A B B c d e e E\".split()\n    s65 = \"A B B c d e e E\".split()\n    s66 = \"A B B c d e e E\".split()\n    s67 = \"A B B c d e e E\".split()\n    s68 = \"A B B c d e e E\".split()\n    s69 = \"A B B c d e e E\".split()\n    s70 = \"A B B c d e e E\".split()\n    s71 = \"A B B c d e e E\".split()\n    s72 = \"A B B c d e e E\".split()\n    s73 = \"A B B c d e e E\".split()\n    s74 = \"A B B c d e e E\".split()\n    s75 = \"A B B c d e e E\".split()\n    s76 = \"A B B c d e e E\".split()\n    s77 = \"A B B c d e e E\".split()\n    s78 = \"A B B c d e e E\".split()\n    s79 = \"A B B c d e e E\".split()\n    s80 = \"A B B c d e e E\".split()\n    s81 = \"A B B c d e e E\".split()\n    s82 = \"A B B c d e e E\".split()\n    s83 = \"A B B c d e e E\".split()\n    s84 = \"A B B c d e e E\".split()\n    s85 = \"A B B c d e e E\".split()\n    s86 = \"A B B c d e e E\".split()\n    s87 = \"A B B c d e e E\".split()\n    s88 = \"A B B c d e e E\".split()\n    s89 = \"A B B c d e e E\".split()\n    s90 = \"A B B c d e e E\".split()\n    s91 = \"A B B c d e e E\".split()\n    s92 = \"A B B c d e e E\".split()\n    s93 = \"A B B c d e e E\".split()\n    s94 = \"A B B c d e e E\".split()\n    s95 = \"A B B c d e e E\".split()\n    s96 = \"A B B c d e e E\".split()\n    s97 = \"A B B c d e e E\".split()\n    s98 = \"A B B c d e e E\".split()\n    s99 = \"A B B c d e e E\".split()\n    s100 = \"A B B c d e e E\".split()\n    s101 = \"A B B c d e e E\".split()\n    s102 = \"A B B c d e e E\".split()\n    s103 = \"A B B c d e e E\".split()\n    s104 = \"A B B c d e e E\".split()\n    s105 = \"A B B c d e e E\".split()\n    s106 = \"A B B c d e e E\".split()\n    s107 = \"A B B c d e e E\".split()\n    s108 = \"A B B c d e e E\".split()\n    s109 = \"A B B c d e e E\".split()\n    s110 = \"A B B c d e e E\".split()\n    s111 = \"A B B c d e e E\".split()\n    s112 = \"A B B c d e e E\".split()\n    s113 = \"A B B c d e e E\".split()\n    s114 = \"A B B c d e e E\".split()\n    s115 = \"A B B c d e e E\".split()\n    s116 = \"A B B c d e e E\".split()\n    s117 = \"A B B c d e e E\".split()\n    s118 = \"A B B c d e e E\".split()\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.split()\n    for i in range(len(str1)):\n        str1[i] = re.sub('[a-z]', '', str1[i])\n    str1 = \" \".join(str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n    #lc = \"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\"\n    lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n    lc = \",abcdefghijklmnopqrstuvwxyz\"\n    str1 = re.sub('^\\s+', '', str1)\n    str1 = re.sub('\\s*$', '', str1)\n    str1 = re.sub(lowercase, '', str1)\n    str1 = re.sub(lc, '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if char.isupper():\n            str2 += char\n        else:\n            pass\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    list1 = str1.split()\n    list2 = []\n    for word in list1:\n        if word in list2:\n            pass\n        else:\n            list2.append(word)\n    final_list =''.join(list2)\n    return final_list\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 9 : \n        n = n / 10 \n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n>9 :\n        n=n/10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n :\n        print(n)\n        n = n // 10\n        \n    print(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        return False\n    elif n < 10 :\n        return n\n    else :\n        return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while (n > 9):  \n        n = n / 10;  \n    return int(n);  "
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # write your code here\n    if n >= 0 :\n        first_digit = n % 10\n    else :\n        first_digit = (n*-1) % 10*-1\n    return first_digit\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while(n>=10):\n        n = n/10\n    return n\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if list == []:\n        return None\n    else:\n        odd = [i for i in list if i%2==1]\n        even = [i for i in list if i%2==0]\n        return [odd,even]\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    listodd = []\n    for i in list:\n        if i % 2 == 0:\n            listodd.append(i)\n    return listodd"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    print(list)\n    odd_list = list[::2]\n    print(odd_list)\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [list[i] for i in range(len(list)) if list[i] % 2!= 0]\n    \nprint(Split([1,2,3,4,5,6,7,8])) #[1, 3, 5, 7]\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    listodd=[]\n    for num in list:\n        if num%2!=0:\n            listodd.append(num)\n    return listodd\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    return [item for item in list if item%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = [] \n    for i in list: \n        if i%2!= 0: \n            result.append(i) \n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Using list comprehension\n    odd_numbers = [number for number in list if number % 2!= 0]\n    return odd_numbers\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!=0]\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1, n+1)]) - sum([x for x in range(1, n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s = s + (i*i*i)\n    return(s**2 - s*s)\n    \nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(\"The difference between the sum of cubes of the first {} natural numbers and the sum of the first {} natural numbers is {}.\".format(n,n,difference(n)))"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n):\n        return sum(i**3 for i in range(1,n+1))\n    def sum_of_squares(n):\n        return sum(i**2 for i in range(1,n+1))\n    return sum_of_cubes(n)**2 - sum_of_squares(n)"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) :\n        sum = 0\n        for i in range(1,n+1):\n            sum += i*i*i\n        return sum\n    def cube_sum(n) :\n        sum = 0\n        for i in range(1,n+1):\n            sum += i\n        return sum*sum*sum\n    sum1 = sum_of_cubes(n)\n    sum2 = cube_sum(n)\n    return sum2 - sum1\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def summation(n):\n        return n*(n+1)*(2*n+1)/6\n    return summation(n)**3-summation(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return pow(n,3) * (3 * n) / 2 - n \n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    sum1 = (n*(n+1)*(2*n+1))/6\n    sum2 = (n*(n+1)*(2*n+1)*(n+2))/24\n    return sum1-sum2\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(range(1,n+1))**3-sum(range(1,n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube_sum(n) :\n        cube_sum = 0\n        for i in range(1,n+1) :\n            cube_sum = cube_sum + i*i*i\n        return cube_sum\n    def sum_square(n) :\n        square_sum = 0\n        for i in range(1,n+1) :\n            square_sum = square_sum + i\n        return square_sum*square_sum\n    return cube_sum(n) - sum_square(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1,n+1) :\n        sum_of_numbers = sum_of_numbers + i\n        sum_of_cubes = sum_of_cubes + pow(i,3)\n    return pow(sum_of_numbers,3) - sum_of_cubes\n    \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count = count + 1\n    \n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n=len(A)\n    cnt=0\n    for i in range(0, n-1, 2): \n        for j in range(i+1, n): \n            if (A[i] ^ A[j]) % 2: \n                cnt+=1\n    return cnt\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i + 1, N) :\n            if (A[i] ^ A[j]) & 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if((A[i]^A[j])&1) : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if(A[i] ^ A[j] & 1) : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Xor = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            Xor ^= A[i] ^ A[j]\n    return bin(Xor).count(\"1\")\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    B = []\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if(A[i] ^ A[j]) % 2 == 1 : \n                B.append(A[i]) \n                B.append(A[j]) \n    return len(set(B)) \n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        return toggle_string(string[1:]) + string[0].swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.swapcase()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle_case(char):\n        return char.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.swapcase()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([i.swapcase() for i in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # result = []\n    # for letter in string:\n    #     if letter.isupper():\n    #         letter = letter.lower()\n    #     else:\n    #         letter = letter.upper()\n    #     result.append(letter)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #todo: write toggle_string function here\n    string = string.swapcase()\n    return string\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    import math\n    x1, x2 = str(n1), str(n2)\n    return sum([math.fabs(int(x1[i]) - int(x2[i])) for i in range(len(x1))])\n    \n    \ndef factorial(n):\n    '''\n    Write a python function which returns the factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n    \n    \ndef number_of_digits(n):\n    '''\n    Write a python function which returns the number of digits of a given number.\n    '''\n    return len(str(n))\n    \n    \ndef count_vowels(s):\n    '''\n    Write a python function which returns the count of vowels in a given string.\n    '''\n    return sum([1 for i in s if i in 'aeiou'])\n    \n    \ndef count_consonants(s):\n    '''\n    Write a python function which returns the count of consonants in a given string.\n    '''\n    return len(s) - count_vowels(s)\n    \n    \ndef count_occurrence(lst, n):\n    '''\n    Write a python function which returns the number of times a given number occurs in a given list.\n    '''\n    return sum([1 for i in lst if i == n])\n    \n    \ndef minimum_index(lst):\n    '''\n    Write a python function which returns the minimum index of a given number in a given list.\n    '''\n    return min([i for i in range(len(lst)) if lst[i] == min(lst)])\n    \n    \ndef generate_all_strings(input_string, n):\n    '''\n    Write a python function which generates all permutations of length n for a given string.\n    '''\n    return [input_string[i:i+n] for i in range(len(input_string)-n+1)]\n    \n    \ndef generate_all_strings_rec(input_string, n):\n    '''\n    Write a python function which generates all permutations of length n for a given string using recursion.\n    '''\n    if n == 1:\n        return [input_string]\n    else:\n        output = []\n        for i in range(len(input_string)):\n            for j in generate_all_strings_rec(input_string[0:i] + input_string[i+1:], n-1):\n                output.append(input_string[i] + j)\n    return output\n    \n    \ndef find_missing_element(lst):\n    '''\n    Write a python function which returns the missing element of a list.\n    '''\n    lst = sorted(lst)\n    return lst[0] + (lst[-1] - lst[0])\n    \n    \ndef find_missing_element_in_sorted_list(lst):\n    '''\n    Write a python function which returns the missing element of a list in ascending sorted order.\n    '''\n    lst.append(lst[-1] + 1)\n    lst.insert(0, -1)\n    return [i for i in range(len(lst)-1) if lst[i]!= lst[i + 1]][0]\n    \n    \ndef find_missing_element_in_sorted_list_v2(lst):\n    '''\n    Write a python function which returns the missing element of a list in ascending sorted order using recursion.\n    '''\n    return [i for i in range(len(lst)) if lst[i]!= i][0]\n    \n    \ndef find_missing_element_in_sorted_list_v3(lst):\n    '''\n    Write a python function which returns the missing element of a list in ascending sorted order using binary search.\n    '''\n    return [i for i in range(len(lst)) if lst[i]!= i][0]\n    \n    \ndef count_appearance(lst, n):\n    '''\n    Write a python function which returns the number of times a given number occurs in a given list.\n    '''\n    return sum([1 for i in range(len(lst)) if lst[i] == n])\n    \n    \ndef count_appearance_v2(lst, n):\n    '''\n    Write a python function which returns the number of times a given number occurs in a given list using recursion.\n    '''\n    if lst == []:\n        return 0\n    elif lst[0] == n:\n        return 1 + count_appearance_v2(lst[1:], n)\n    else:\n        return count_appearance_v2(lst[1:], n)\n        \n    \ndef count_appearance_v3(lst, n):\n    '''\n    Write a python function which returns the number of times a given number occurs in a given list using binary search.\n    '''\n    def count_appearance_rec(lst, left, right, n):\n        if left > right:\n            return 0\n        mid = (left + right) // 2\n        if lst[mid] == n:\n            return 1 + count_appearance_rec(lst, left, mid - 1, n) + count_appearance_rec(lst, mid + 1, right, n)\n        elif lst[mid] > n:\n            return count_appearance_rec(lst, left, mid - 1, n)\n        else:\n            return count_appearance_rec(lst, mid + 1, right, n)\n    return count_appearance_rec(lst, 0, len(lst)-1, n)\n    \n    \ndef count_appearance_v4(lst, n):\n    '''\n    Write a python function which returns the number of times a given number occurs in a given list using binary search.\n    '''\n    def count_appearance_rec(lst, left, right, n):\n        if left > right:\n            return 0\n        mid = (left + right) // 2\n        if lst[mid] == n:\n            return 1 + count_appearance_rec(lst, left, mid - 1, n) + count_appearance_rec(lst, mid + 1, right, n)\n        elif lst[mid] > n:\n            return count_appearance_rec(lst, left, mid - 1, n)\n        else:\n            return count_appearance_rec(lst, mid + 1, right, n)\n    return count_appearance_rec(lst, 0, len(lst)-1, n)\n    \n    \ndef sum_of_digits(n):\n    '''\n    Write a python function which returns the sum of digits of a given number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \n    \ndef sum_of_digits_v2(n):\n    '''\n    Write a python function which returns the sum of digits of a given number using recursion.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_of_digits_v2(n//10)\n    \n    \ndef sum_of_digits_v3(n):\n    '''\n    Write a python function which returns the sum of digits of a given number using recursion.\n    '''\n    return sum([int(i) for i in str(n)])\n    \n    \ndef digits_of_sum_of_two_numbers(n1, n2):\n    '''\n    Write a python function which returns the sum of digits of a given number using recursion.\n    '''\n    return sum([int(i) for i in str(n1 + n2)])\n    \n    \ndef digits_of_sum_of_two_numbers_v2(n1, n2):\n    '''\n    Write a python function which returns the sum of digits of a given number using recursion.\n    '''\n    return sum([int(i) for i in str(n1 + n2)])\n    \n    \ndef numbers_greater_than_current_index(lst):\n    '''\n    Write a python function which returns a list with all numbers greater tha"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(i-j) for i,j in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_list = list(str(n1))\n    for i,d in enumerate(digit_list):\n        digit_list[i] = int(d)\n    digit_list2 = list(str(n2))\n    for i,d in enumerate(digit_list2):\n        digit_list2[i] = int(d)\n    total_distance = 0\n    for i,d in enumerate(digit_list):\n        total_distance += abs(digit_list[i]-digit_list2[i])\n    return total_distance\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_nums = [int(i) for i in str(n1)]\n    sum_digit_nums = 0\n    for i in range(len(digit_nums)):\n        sum_digit_nums += abs(digit_nums[i] - n2)\n    return sum_digit_nums\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(a)-int(b)) for a,b in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    import math\n    return sum([abs(int(n1[i])-int(n2[i])) for i in range(len(n1))])\n    \nprint(digit_distance_nums(\"123\", \"456\"))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # if not n1.isdigit() or not n2.isdigit():\n    #     return 'Inputs must be integers'\n    # n1 = int(n1)\n    # n2 = int(n2)\n    # sum = 0\n    # for i in range(0, len(str(n1))):\n    #     sum += abs(n1%10 - n2%10)\n    #     n1 //= 10\n    #     n2 //= 10\n    # return sum\n    # return int(abs(n1 - n2))\n    # n1_len = len(str(n1))\n    # n2_len = len(str(n2))\n    # if n1_len == n2_len:\n    #     return int(abs(n1 - n2))\n    # else:\n    #     d = n1_len - n2_len\n    #     diff = n1 - n2\n    #     if d >= 0:\n    #         for i in range(0, d):\n    #             diff = diff * 10\n    #         return int(abs(diff))\n    #     else:\n    #         for i in range(0, -d):\n    #             diff = diff // 10\n    #         return int(abs(diff))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max = 0\n    if size <= 0:\n        print(\"Size must be positive.\")\n    else:\n        for i in range(size):\n            if sum(a[i:]) > max:\n                max = sum(a[i:])\n    return max\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) == 0:\n        return 0\n    \n    start = 0\n    end = 0\n    max_sum = a[0]\n    cur_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n            start = i + 1\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            end = i\n            s = max_ending_here\n    print(\"Maximum contiguous sum is %d\"%s)\n    print(\"Starting Index %d\"%start)\n    print(\"Ending Index %d\"%end)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_max = a[0]\n    max_so_far = a[0]\n    start_index = 0\n    end_index = 0\n    for i in range(0, size):\n        if max_so_far < 0:\n            max_so_far = a[i]\n            start_index = i\n            end_index = i\n        else:\n            max_so_far = max_so_far + a[i]\n            end_index = i\n        if max_so_far > current_max:\n            current_max = max_so_far\n            start_index = start_index\n            end_index = end_index\n    print(\"start_index: \" + str(start_index) + \" end_index: \" + str(end_index))\n    print(\"sub_array_sum: \" + str(current_max))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    maximum_sum = a[0]\n    for i in range(size):\n        temp_sum = a[i]\n        for j in range(i+1, size):\n            temp_sum += a[j]\n            if temp_sum > maximum_sum:\n                maximum_sum = temp_sum\n    return maximum_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) == 0:\n        return 0\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum+a[i])\n        max_sum = max(current_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    def kadane(l,n):\n        max_so_far = -999999999999\n        max_ending_here = 0\n        for i in range(n):\n            max_ending_here = max_ending_here + l[i]\n            if max_ending_here < 0:\n                max_ending_here = 0\n            if (max_so_far < max_ending_here):\n                max_so_far = max_ending_here\n        return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum+a[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = a[0]\n    max_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -9999999999\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set = union_set.union(set(test_tup2))\n    return sorted(union_set)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        union_tup = ()\n        for i in range(len(test_tup1)):\n            if test_tup1[i] not in union_tup:\n                union_tup += (test_tup1[i],)\n            if test_tup2[i] not in union_tup:\n                union_tup += (test_tup2[i],)\n        return sorted(union_tup)\n    else:\n        print('Tuples are not of the same length!')\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #list_union = list(set(test_tup1).union(set(test_tup2)))\n    #list_union.sort()\n    list_union = sorted(list(set(test_tup1).union(set(test_tup2))))\n    return list_union\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    output = tuple(sorted(set(test_tup1) | set(test_tup2)))\n    return output\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(set(test_tup2))))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return(sorted(list(set(test_tup1 + test_tup2))))\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max_length = 0\n    Max_sublist = []\n    for i in lst:\n        if len(i) > Max_length:\n            Max_length = len(i)\n            Max_sublist = i\n    return Max_sublist\n    \ndef Find_First_and_Last(lst):\n    '''\n    Write a python function to find the first and last value of the list.\n    '''\n    First_value = lst[0]\n    Last_value = lst[-1]\n    return First_value, Last_value\n    \ndef Convert_to_Numbers(lst):\n    '''\n    Write a python function to convert the list of strings into list of integers.\n    '''\n    Numbers_list = []\n    for i in lst:\n        Numbers_list.append(int(i))\n    return Numbers_list\n    \ndef Find_Average(lst):\n    '''\n    Write a python function to find the average value of the list.\n    '''\n    Average = sum(lst)/len(lst)\n    return Average\n    \ndef Find_Min_and_Max(lst):\n    '''\n    Write a python function to find the minimum and maximum values of the list.\n    '''\n    Min_value = min(lst)\n    Max_value = max(lst)\n    return Min_value, Max_value\n    \ndef List_of_Lists(lst):\n    '''\n    Write a python function to convert a list of integers to a list of lists,\n    each containing 5 consecutive numbers, for example:\n    [12, 18, 25, 29, 34] to [[12, 18, 25], [29, 34]]\n    '''\n    Sublist_List = []\n    for i in range(0, len(lst), 5):\n        New_sublist = lst[i:i+5]\n        Sublist_List.append(New_sublist)\n    return Sublist_List\n    \ndef Longest_Consecutive_Sequence(lst):\n    '''\n    Write a python function to find the longest consecutive sequence in the list.\n    For example:\n    [2, 12, 9, 16, 11, 12, 10] should return [12, 11, 10] or [9, 10]\n    '''\n    Sublist_List = List_of_Lists(lst)\n    Longest_sublist = Find_Max_Length(Sublist_List)\n    return Longest_sublist\n    \ndef Test_Func(func, Correct_Answer):\n    Answer = func()\n    if Answer == Correct_Answer:\n        print(\"Test Case passed\")\n    else:\n        print(\"Test Case failed\")\n        print(\"Answer:\", Answer)\n        print(\"Correct Answer:\", Correct_Answer)\n        \ndef main():\n    Test_Func(Find_Max_Length, [12, 18, 25, 29, 34])\n    Test_Func(Find_First_and_Last, (12, 34))\n    Test_Func(Convert_to_Numbers, [12, 34, 56, 78, 98])\n    Test_Func(Find_Average, 47.5)\n    Test_Func(Find_Min_and_Max, (1, 98))\n    Test_Func(List_of_Lists, [[2, 12, 9, 16, 11], [12, 10]])\n    Test_Func(Longest_Consecutive_Sequence, [12, 11, 10])\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_lenth = 0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if j-i+1 > max_lenth:\n                max_lenth = j-i+1\n    return max_lenth\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst.sort()\n    print(lst)\n    lst.reverse()\n    print(lst)\n    max_length = 0\n    for i in range(0,len(lst)-1):\n        if i+1<len(lst) and (lst[i+1] - lst[i])<=1:\n            max_length = max_length + 1\n        else:\n            max_length = max_length + 1\n            break\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max=0\n    for i in range(len(lst)):\n        j=len(lst[i])\n        if j>Max:\n            Max=j\n    return Max\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    def Find_Max_Length_Recursive(lst, max_len, index=0, curr_len=0):\n        if not lst:\n            return max_len\n        \n        if curr_len > max_len:\n            max_len = curr_len\n            \n        if lst[index] is None:\n            return max_len\n        \n        curr_len += 1\n        \n        return Find_Max_Length_Recursive(lst, max_len, index+1, curr_len)\n        \n    return Find_Max_Length_Recursive(lst, 0)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLen = 0\n    for x in range(len(lst)):\n        for y in range(len(lst[x])):\n            for z in range(len(lst[x][y])):\n                if len(lst[x][y][z]) > maxLen:\n                    maxLen = len(lst[x][y][z])\n    return maxLen\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max(map(len, lst))\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #text = \"The single quote inside a string\"\n    pattern = re.compile(r'\".+?\"')\n    result = pattern.findall(text)\n    #print(result)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # return re.findall('\".+?\"', text)\n    return re.findall('\"([^\"]*)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Output list\n    values = []\n    # Find all matches of pattern\n    results = re.findall(r'\"(.*?)\"', text)\n    # Extract the matched values to the output list\n    for value in results:\n        values.append(value)\n    return values\nprint(extract_values(\"It costs $99,99 to attend the event, but it only costs $19.99 to attend the event.\"))"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text=text.lower()\n    values=[]\n    for i in re.findall('\"[^\"]*\"', text):\n        if \"\u2014\" in i:\n            values.append(i.split(\"\u2014\")[0])\n            values.append(i.split(\"\u2014\")[1])\n        elif \"\u2013\" in i:\n            values.append(i.split(\"\u2013\")[0])\n            values.append(i.split(\"\u2013\")[1])\n        else:\n            values.append(i)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    string = re.search(r'\"([^\"]*)\"', text)\n    if string is None:\n        return None\n    return string.group(1)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quotation_marks = re.compile(r'\".*\"')\n    values = re.findall(quotation_marks, text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    a = re.findall(\"'([^']*)'\", text)\n    print(a)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Write your code here\n    return re.findall('\"([^\"]*)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # for i in range(len(text)):\n    #     for j in range(len(text[i])):\n    #         print(text[i][j])\n    # print()\n    # print()\n    # pattern = '\\\".*?\\\"'\n    # result = re.findall(pattern, text)\n    # print(result)\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # print()\n    # prin"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    import collections \n    count=collections.Counter(arr)\n    a=[]\n    for i in count:\n        if(i!=count[i]):\n            a.append(count[i])\n    count=collections.Counter(a)\n    return len(count)\n    \n    \ndef main():\n    array = [5,3,6,5,3,1,2,3]\n    n = len(array)\n    print(count_Pairs(array,n))\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # arr = [1,3,4,4,2]\n    # n = len(arr)\n    # ans = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    def generate_pairs(nums):\n        pairs = []\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if nums[i]!= nums[j]:\n                    pairs.append([nums[i],nums[j]])\n        return pairs\n    \n    def get_unique_pairs(pairs):\n        unique_pairs = []\n        for pair in pairs:\n            if pair not in unique_pairs:\n                unique_pairs.append(pair)\n        return unique_pairs\n        \n    pairs = generate_pairs(arr)\n    unique_pairs = get_unique_pairs(pairs)\n    print(len(unique_pairs))\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d = dict() \n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pair=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                pair+=1\n    return pair\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    unique_set = set(arr)\n    count = 0\n    for i in unique_set:\n        for j in unique_set:\n            if i!= j:\n                count +=1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return len(set(arr))*(n*(n-1))//2 - sum(arr)\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs \n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n    \ndef find_index(char_list):\n    '''\n    Write a Python function to find the index of a given character in a string.\n    '''\n    index=[]\n    for char in char_list:\n        index.append(char_list.index(char))\n    return index\n    \n    \ndef string_count(s):\n    '''\n    Write a Python function to get a string made of the first 2 and the last 2 chars from a given string. \n    If the string length is less than 2, return instead the empty string.\n    '''\n    if len(s)>2:\n        return s[:2]+s[-2:]\n    else:\n        return ''\n    \n    \ndef change_char(s):\n    '''\n    Write a Python function to get a string where for every char in the original string, there are two chars.\n    '''\n    char_list=split(s)\n    double_char=[]\n    for char in char_list:\n        double_char.append(char*2)\n    return ''.join(double_char)\n    \n    \ndef char_mix_up(a, b):\n    '''\n    Write a Python function to get a single string from two given strings.\n    The function should swap the first 2 chars from each of the strings. \n    If less than 2 chars exist, the empty string should be returned.\n    '''\n    if len(a)>=2 and len(b)>=2:\n        return b[:2]+a[2:]+' '+a[:2]+b[2:]\n    else:\n        return ''\n        \n        \ndef remove_char(s, n):\n    '''\n    Write a Python function to remove the n th character from a non-empty string.\n    '''\n    return s[:n]+s[n+1:]\n    \n    \ndef flip_case(s, a, b):\n    '''\n    Write a Python function to get a string where all occurrences of its first char have been changed to the second char of the same string, \n    except the first char itself. \n    '''\n    char_list=split(s)\n    if a in char_list:\n        index=char_list.index(a)\n        if index==0:\n            char_list[1] = b\n        else:\n            char_list[index] = b\n    return ''.join(char_list)\n    \n    \ndef rotate_left(s, n):\n    '''\n    Write a Python function to get a left rotate a string with n characters.\n    '''\n    char_list=split(s)\n    return ''.join(char_list[n:]+char_list[:n])\n    \n    \ndef reverse_words(s):\n    '''\n    Write a Python function to reverse words in a given sentence.\n    '''\n    char_list=split(s)\n    char_list=char_list[::-1]\n    return ''.join(char_list)\n    \n    \ndef super_reduced_string(s):\n    '''\n    Write a Python function to remove adjacent duplicate letters from a string.\n    '''\n    char_list=split(s)\n    for i in range(0,len(char_list)):\n        if i==len(char_list)-1:\n            break\n        elif char_list[i]==char_list[i+1]:\n            char_list[i]=''\n    return ''.join(char_list)\n    \n    \ndef max_char(s):\n    '''\n    Write a Python function to get the maximum occurring character in a given string.\n    '''\n    char_list=split(s)\n    max=0\n    for char in char_list:\n        if char_list.count(char)>max:\n            max=char_list.count(char)\n            max_char=char\n    return max_char\n    \n    \ndef first_unique_char(s):\n    '''\n    Write a Python function to get the first non-repeating character in a given string. \n    '''\n    char_list=split(s)\n    for char in char_list:\n        if char_list.count(char)==1:\n            return char\n    return ''\n    \n    \ndef check_permutation(s1, s2):\n    '''\n    Write a Python function to check whether two given strings are permutations of each other or not.\n    '''\n    char_list1=split(s1)\n    char_list2=split(s2)\n    if len(char_list1)==len(char_list2):\n        sorted_list1=sorted(char_list1)\n        sorted_list2=sorted(char_list2)\n        if sorted_list1==sorted_list2:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \ndef find_all_indexes(s, char):\n    '''\n    Write a Python function to find all the occurrences of a substring in a string. \n    '''\n    index_list=[]\n    for i in range(len(s)):\n        if s[i:].startswith(char):\n            index_list.append(i)\n    return index_list\n    \n    \ndef find_all_indexes2(s, char):\n    '''\n    Write a Python function to find all the occurrences of a substring in a string. \n    '''\n    index_list=[]\n    char_list=split(s)\n    for i in range(len(char_list)):\n        if char_list[i]==char:\n            index_list.append(i)\n    return index_list\n    \n    \ndef rotate_right(s, n):\n    '''\n    Write a Python function to get a right rotate a string with n characters.\n    '''\n    char_list=split(s)\n    return ''.join(char_list[-n:]+char_list[:-n])\n    \n    \ndef convert_morse(code):\n    '''\n    Write a Python function to convert a Morse code into a normal text message.\n    '''\n    code_dict={\"A\":\".-\",\"B\":\"-...\",\"C\":\"-.-.\",\"D\":\"-..\",\"E\":\".\",\"F\":\"..-.\",\"G\":\"--.\",\"H\":\"....\",\"I\":\"..\",\"J\":\".---\",\"K\":\"-.-\",\"L\":\".-..\",\"M\":\"--\",\"N\":\"-.\",\"O\":\"---\",\"P\":\".--.\",\"Q\":\"--.-\",\"R\":\".-.\",\"S\":\"...\",\"T\":\"-\",\"U\":\"..-\",\"V\":\"...-\",\"W\":\".--\",\"X\":\"-..-\",\"Y\":\"-.--\",\"Z\":\"--..\",\" \":\"|\",\"0\":\"-----\",\"1\":\".----\",\"2\":\"..---\",\"3\":\"...--\",\"4\":\"....-\",\"5\":\".....\",\"6\":\"-....\",\"7\":\"--...\",\"8\":\"---..\",\"9\":\"----.\",\".\":\".-.-.-\",\",\":\"--..--\",\"?\":\"..--..\"}\n    morse_list=code.split('|')\n    char_list=[]\n    for morse in morse_list:\n        for key,value in code_dict.items():\n            if morse==value:\n                char_list.append(key)\n    return ''.join(char_list)\n    \n    \ndef check_pangram(s):\n    '''\n    Write a Python function to check whether a string is PANGRAM or not.\n    '''\n    alphabet=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n    for char in alphabet:\n        if char not in s:\n            return False\n    return True\n    \n    \ndef find_all_anagrams(s):\n    '''\n    Write a Python function to find all anagrams of a string. \n    '''\n    char_list=split(s)\n    anagram_list=[]\n    for char in char_list:\n        anagram_list.append(char)\n    for i in range(0,len(anagram_list)):\n        for j in range(i+1,len(anagram_list)):\n            if sorted(anagram_list[i])==sorted(anagram_lis"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n:\n        total, n = total + n % 10, n // 10\n    return total\n    \ndef sum_digits_iterative(n):\n    '''\n    Write an iterative function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n:\n        total, n = total + n % 10, n // 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_digits = 0\n    for i in str(n):\n        sum_digits += int(i)\n    return sum_digits\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # My solution\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum, n = sum + n % 10, n // 10\n    return sum\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if(list1[i] < list1[i+1]):\n            return True\n        else:\n            return False\n    \ndef insert_list(list1):\n    '''\n    Write a function to sort a list of integers without using sort.\n    '''\n    print(\"Input: \" + str(list1))\n    j = 0\n    list_sorted = []\n    for i in range(len(list1)):\n        while(list1[j] > list1[i]):\n            list_sorted.insert(j, list1[i])\n            break\n        j = j + 1\n        if(j == len(list1)):\n            list_sorted.append(list1[i])\n            break\n    print(\"Output: \" + str(list_sorted))\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    if list1 == list1[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if(list1[0]>=list1[1]):\n        if(len(list1)==2):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0 or len(list1) == 1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] < list1[i+1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1==sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        print(\"The list is already sorted\")\n    else:\n        print(\"The list is not sorted\")\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    is_sorted = True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            is_sorted = False\n            break\n    return is_sorted\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict_list = []\n    for i in range(length):\n        empty_dict_list.append({})\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length < 0:\n        return None\n    return [ {} for _ in range(length) ]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Fill in this function\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n    \ndef get_fields(table):\n    '''\n    Write a function to get a list of fields in a table.\n    '''\n    return list(table[0].keys())\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n    \ndef list_check(lst):\n    '''\n    Write a function to check if all dictionaries in a list are empty.\n    '''\n    for dictionary in lst:\n        if dictionary:\n            return False\n    return True\n    \ndef del_dict(dict):\n    '''\n    Write a function to delete all items in a dictionary.\n    '''\n    dict.clear()\n    \ndef del_key(dict, key):\n    '''\n    Write a function to delete a key in a dictionary.\n    '''\n    dict.pop(key)\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({})\n    return my_list\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        #Sort this sublist\n        sorted_sublist = sorted(sublist)\n        #Add this sorted sublist to the new list\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for item in list1:\n        item.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for x in list1:\n        list2.append(sorted(x))\n    return list2\n    \ndef compare_lists(list1, list2):\n    '''\n    Write a function to compare the elements in two lists.\n    '''\n    list3 = []\n    for x in list1:\n        if x in list2:\n            list3.append(x)\n    return list3\n    \ndef longest_list(list1):\n    '''\n    Write a function to return the longest list in a given list of lists.\n    '''\n    longest = []\n    for x in list1:\n        if len(x) == len(longest):\n            longest = x\n        elif len(x) > len(longest):\n            longest = x\n    return longest\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    for i in list1:\n        i.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key = lambda x: len(x))\n    for index in range(len(list1)):\n        list1[index].sort()\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    my_list = [nums[i][0] for i in range(len(nums))]\n    unique_list = list(set(my_list))\n    return sorted(unique_list)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in range(len(nums)):\n        nums[i] = list(dict.fromkeys(nums[i]))\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #code here\n    nums = list(set(nums))\n    return nums\n    "
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_no_duplicates = set(nums)\n    return list(nums_no_duplicates)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the list of lists into a set.\n    # The list of lists will be sorted.\n    unique_list = set(num for nums in nums for num in nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = [list(set(x)) for x in nums]\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    new_list = []\n    for i in range(0, len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef two_unique_nums2(nums):\n    nums.sort()\n    for i in range(0, len(nums)):\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n    return nums\n    \ndef my_filter(numbers, number):\n    '''\n    Write a Python function that takes two lists and returns True if they have at least one common member.\n    '''\n    for i in range(0, len(numbers)):\n        if numbers[i] == number:\n            return True\n    return False\n    \ndef my_zip(list1, list2):\n    '''\n    Write a Python program to create a dictionary from a zip object.\n    '''\n    zipped_list = zip(list1, list2)\n    my_dict = dict(zipped_list)\n    return my_dict\n    \ndef my_min(list1):\n    '''\n    Write a Python program to print a specified list after removing the 0th, 4th and 5th elements.\n    '''\n    list1 = [3, 7, 0, 6, 5, 9, 1]\n    list1 = [i for i in list1 if i!= 0]\n    list1 = [i for i in list1 if i!= 4]\n    list1 = [i for i in list1 if i!= 5]\n    return list1\n    \ndef my_bin(number):\n    '''\n    Write a Python program to get the binary string of a given integer.\n    '''\n    my_bin_string = ''\n    while number > 0:\n        my_bin_string = str(number % 2) + my_bin_string\n        number //= 2\n    return my_bin_string\n    \ndef my_bin2(number):\n    '''\n    Write a Python program to get the equivalent decimal value of a binary number.\n    '''\n    decimal_value = 0\n    power = 0\n    while number > 0:\n        decimal_value += (number % 10) * (2 ** power)\n        number //= 10\n        power += 1\n    return decimal_value\n    \ndef my_map(numbers):\n    '''\n    Write a Python program to map two lists into a dictionary.\n    '''\n    my_dict = dict(zip(numbers[0], numbers[1]))\n    return my_dict\n    \ndef my_filter2(numbers, number):\n    '''\n    Write a Python program to filter a list of integers using Lambda.\n    '''\n    list_numbers = []\n    for i in range(0, len(numbers)):\n        if numbers[i] == number:\n            list_numbers.append(numbers[i])\n    return list_numbers\n    \ndef my_filter3(numbers, number):\n    '''\n    Write a Python program to filter a list of integers using Lambda.\n    '''\n    list_numbers = list(filter(lambda x: x == number, numbers))\n    return list_numbers\n    \ndef my_reduce(numbers):\n    '''\n    Write a Python program to find the product of a list of integers (without using for loop).\n    '''\n    product = 1\n    for i in range(0, len(numbers)):\n        product *= numbers[i]\n    return product\n    \ndef my_reduce2(numbers):\n    '''\n    Write a Python program to find the product of a list of integers (without using for loop).\n    '''\n    product = 1\n    for i in range(0, len(numbers)):\n        product *= numbers[i]\n    return product\n    \ndef my_reduce3(numbers):\n    '''\n    Write a Python program to find the product of a list of integers (without using for loop).\n    '''\n    from functools import reduce\n    product = reduce((lambda x, y: x * y), numbers)\n    return product\n    \ndef my_map2(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    list_numbers = list(map(str, numbers))\n    return''.join(list_numbers)\n    \ndef my_map3(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    list_numbers = list(map(str, numbers))\n    return ''.join(list_numbers)\n    \ndef my_map4(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    list_numbers = list(map(str, numbers))\n    return ''.join(map(str, list_numbers))\n    \ndef my_map5(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    list_numbers = list(map(str, numbers))\n    return''.join(map(str, list_numbers))\n    \ndef my_filter4(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    list_numbers = list(filter(lambda x: len(x) > 5, numbers))\n    return''.join(list_numbers)\n    \ndef my_filter5(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    list_numbers = list(filter(lambda x: len(x) > 5, numbers))\n    return ''.join(list_numbers)\n    \ndef my_filter6(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    list_numbers = list(filter(lambda x: len(x) > 5, numbers))\n    return''.join(map(str, list_numbers))\n    \ndef my_filter7(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    list_numbers = list(filter(lambda x: len(x) > 5, numbers))\n    return ''.join(map(str, list_numbers))\n    \ndef my_filter8(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    list_numbers = list(filter(lambda x: len(x) > 5, numbers))\n    return''.join(map(str, list_numbers))\n    \ndef my_reduce4(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    product = reduce((lambda x, y: x * y), numbers)\n    return product\n    \ndef my_reduce5(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    product = reduce((lambda x, y: x * y), numbers)\n    return product\n    \ndef my_reduce6(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    product = reduce((lambda x, y: x * y), numbers)\n    return product\n    \ndef my_reduce7(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    product = reduce((lambda x, y: x * y), numbers)\n    return product\n    \ndef my_reduce8(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    product = reduce((lambda x, y: x * y), numbers)\n    return product\n    \ndef my_reduce9(numbers):\n    '''\n    Write a Python program to print a list of space-separated numbers.\n    '''\n    product = reduce((lambda x, y: x * y), numbers)\n    return product\n    \ndef my_reduce10(numbers):"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(dict.fromkeys(nums))\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums)\n    print(unique_nums)\n    print(type(unique_nums))\n    return list(unique_nums)\n    \n    \ndef two_unique_nums_two_sets(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums)\n    return list(unique_nums)\n    \n    \ndef nums_to_string(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    str_nums = []\n    for num in nums:\n        str_nums.append(str(num))\n    return str_nums\n    \n    \ndef nums_to_string_v2(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    str_nums = list(map(str, nums))\n    return str_nums\n    \n    \ndef nums_to_string_v3(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    str_nums = [str(num) for num in nums]\n    return str_nums\n    \n    \ndef nums_to_string_v4(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    str_nums = [str(num) for num in nums]\n    return str_nums\n    \n    \ndef nums_to_string_v5(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    str_nums = []\n    for num in nums:\n        str_nums.append(str(num))\n    return str_nums\n    \n    \ndef nums_to_string_v6(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    str_nums = []\n    for num in nums:\n        str_nums.append(str(num))\n    return ''.join(str_nums)\n    \n    \ndef nums_to_string_v7(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    str_nums = []\n    for num in nums:\n        str_nums.append(str(num))\n    return ''.join(str_nums)\n    \n    \ndef nums_to_string_v8(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    str_nums = []\n    for num in nums:\n        str_nums.append(str(num))\n    return ''.join(str_nums)\n    \n    \ndef nums_to_string_v9(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(map(str, nums))\n    \n    \ndef nums_to_string_v10(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join([str(num) for num in nums])\n    \n    \ndef nums_to_string_v11(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(str(num) for num in nums)\n    \n    \ndef nums_to_string_v12(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(str(num) for num in nums)\n    \n    \ndef nums_to_string_v13(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join([str(num) for num in nums])\n    \n    \ndef nums_to_string_v14(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(str(num) for num in nums)\n    \n    \ndef nums_to_string_v15(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(str(num) for num in nums)\n    \n    \ndef nums_to_string_v16(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(str(num) for num in nums)\n    \n    \ndef nums_to_string_v17(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(str(num) for num in nums)\n    \n    \ndef nums_to_string_v18(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(map(str, nums))\n    \n    \ndef nums_to_string_v19(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(str(num) for num in nums)\n    \n    \ndef nums_to_string_v20(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(map(str, nums))\n    \n    \ndef nums_to_string_v21(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(map(str, nums))\n    \n    \ndef nums_to_string_v22(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(str(num) for num in nums)\n    \n    \ndef nums_to_string_v23(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(map(str, nums))\n    \n    \ndef nums_to_string_v24(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(str(num) for num in nums)\n    \n    \ndef nums_to_string_v25(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(str(num) for num in nums)\n    \n    \ndef nums_to_string_v26(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(map(str, nums))\n    \n    \ndef nums_to_string_v27(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(map(str, nums))\n    \n    \ndef nums_to_string_v28(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(map(str, nums))\n    \n    \ndef nums_to_string_v29(nums):\n    '''\n    Write a python function to convert an array of numbers to an array of strings.\n    '''\n    return ''.join(str(num) for num in nums"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #for item in list_data:\n    #    if list_data.count(item) == 1:\n    #        return item\n    return 1 if 1 in list_data else 0\n    \nlist_data = [3, 2, 3, 4, 2]\nprint(unique_product(list_data)"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for item in list_data:\n        product *= item\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 1\n    for number in list_data:\n        unique_product *= number\n    return unique_product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [12,23,4,45,9,7,34,56,78,9,6,1,5,3,0,3,4,5,6,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,56,7,8,9,5,4,3,3,5"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total = 1\n    for item in list_data:\n        if item not in product_list:\n            product_list.append(item)\n    for item in product_list:\n        total *= item\n    return total\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = set(list_data)\n    print(unique_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # creating a list to hold the unique elements in the list\n    unique_list = []\n    # creating a new list to hold the sum of the unique elements\n    new_list = []\n    for element in list_data:\n        if element not in unique_list:\n            unique_list.append(element)\n    for element in unique_list:\n        new_list.append(list_data.count(element))\n    print(list_data, unique_list, new_list)\n    return reduce(lambda a, b: a*b, new_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1,2,3,4,5]\n    unique_data = set(list_data)\n    product = 1\n    for i in unique_data:\n        product = product * i\n    print(\"Unique product of list is:\", product)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return len(set(list_data)) * product(list(set(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # list_data = [1,2,3,3,3,3,4,5,6]\n    unique_list = list(set(list_data))\n    unique_list.sort()\n    total_product = 1\n    for i in unique_list:\n        total_product *= i\n    print(total_product)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=2*math.pi*r*h+2*math.pi*r**2\n    print(\"The surface area of the cylinder is {}\".format(surfacearea))\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi * (r**2) * 2 + pi * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #r = 5.9\n    #h = 10\n    PI = 3.14159\n    A = 2*PI*r*(r+h)\n    return A\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=2*(3.14*r*r + 3.14*r*h)\n    return surfacearea\nr=float(input('Enter radius of the cylinder: '))\nh=float(input('Enter height of the cylinder: '))\nprint('Surface Area of the cylinder is:',surfacearea_cylinder(r,h))\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2*math.pi*r*h + 2*math.pi*r**2\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.14159\n    s=2*pi*r*(r+h)\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * math.pi * r * (r + h)\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * 3.14 * (r**2) + 2 * 3.14 * (r**2)\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*pi*r*h)+(2*pi*r**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14*r*r + 3.14*r*h\nprint(surfacearea_cylinder(5,4))\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) >= len(B):\n        return False\n    for i in range(len(B)):\n        if A[i] == B[i]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=True\n    for i in A:\n        if B.count(i)==0:\n            flag=False\n            break\n    return flag\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A_len = len(A)\n    B_len = len(B)\n    for i in range(A_len):\n        for j in range(A_len):\n            if B[j]==A[i]:\n                if A[i:i+j+1] == B:\n                    return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # we need to sort both list because sublist is a strict subset of another list.\n    A = sorted(A)\n    B = sorted(B)\n    #if len(A) < len(B):\n        #print('A is sublist of B')\n    #else:\n        #print('B is sublist of A')\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m = len(A) \n    n = len(B) \n    if m > n: \n        return False\n    i = j = 0\n    while i < m and j < n: \n        if A[i] == B[j]: \n            i += 1\n            j += 1\n        else: \n            i = i - j + 1\n            j = 0\n    if j == n: \n        return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        for j in range(i,len(B)):\n            if B[i:j] == A:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # return all(b in a for b in B)\n    return all(any(j in i for j in B) for i in A)\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    if(len(B) > len(A)):\n        return False\n    else:\n        x = 0\n        while x < len(B):\n            i = 0\n            while i < len(A):\n                if B[x] == A[i]:\n                    break\n                else:\n                    i += 1\n            if i == len(A):\n                return False\n            x += 1\n        return True\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    '''\n    Write a python function to check whether a string is a substring of another or not.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    def is_Sub_String(A,B): \n        x = 0\n        for i in range(len(B)):\n            if A[x] == B[i]:\n                x += 1\n            else:\n                return False\n        return True\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    '''\n    Write a python function to check whether a list is a permutation of another or not.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    def is_Permutation(A,B): \n        if(len(A)!= len(B)):\n            return False\n        else:\n            A.sort()\n            B.sort()\n            if(A==B):\n                return True\n            else:\n                return False\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    '''\n    Write a python function to check whether a list is a combination of another or not.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    def is_Combination(A,B): \n        if(len(A) > len(B)):\n            return False\n        else:\n            x = 0\n            y = 0\n            while x < len(A):\n                for i in range(len(B)):\n                    if A[x] == B[i]:\n                        y += 1\n                        break\n                x += 1\n            if y == len(B):\n                return True\n            else:\n                return False\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    '''\n    Write a python function to check whether a list is a combination of another or not.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    def is_Sub_Combination(A,B):\n        if(len(A) > len(B)):\n            return False\n        else:\n            x = 0\n            y = 0\n            while x < len(A):\n                for i in range(len(B)):\n                    if A[x] == B[i]:\n                        y += 1\n                        break\n                x += 1\n            if y == len(B):\n                return True\n            else:\n                return False\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    '''\n    Write a python function to check whether a string is a combination of another or not.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    def is_Sub_String_Combination(A,B):\n        if(len(A) > len(B)):\n            return False\n        else:\n            x = 0\n            y = 0\n            while x < len(A):\n                for i in range(len(B)):\n                    if A[x] == B[i]:\n                        y += 1\n                        break\n                x += 1\n            if y == len(B):\n                return True\n            else:\n                return False\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    '''\n    Write a python function to check whether a list is a combination of another or not.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    def is_Combination_of_Sub_String(A,B): \n        if(len(A) < len(B)):\n            return False\n        else:\n            x = 0\n            y = 0\n            while x < len(A):\n                for i in range(len(B)):\n                    if A[x] == B[i]:\n                        y += 1\n                        break\n                x += 1\n            if y == len(B):\n                return True\n            else:\n                return False\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    '''\n    Write a python function to check whether a list is a combination of another or not.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    def is_Combination_of_Sub_Array(A,B): \n        if(len(A) < len(B)):\n            return False\n        else:\n            x = 0\n            y = 0\n            while x < len(A):\n                for i in range(len(B)):\n                    if A[x] == B[i]:\n                        y += 1\n                        break\n                x += 1\n            if y == len(B):\n                return True\n            else:\n                return False\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    '''\n    Write a python function to check whether a string is a combination of another or not.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # "
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A)==0):\n        return True\n    elif (len(B)==0):\n        return False\n    else:\n        if len(A)>len(B):\n            return False\n        else:\n            for i in range(len(B)):\n                if A[0]==B[i]:\n                    if(is_Sub_Array(A[1:],B[i+1:])):\n                        return True\n    return False\nA = [2,4,1,5,3] \nB = [1,2,3,4,5] \nif (is_Sub_Array(A,B)): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # Check if all elements of array A is there in array B\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def factorial(n): \n        if n == 1: \n            return n \n        else: \n            return n*factorial(n-1) \n    res = factorial(n) \n    return int(str(res)[-1]) \n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    try:\n        n=int(n)\n        if n<0:\n            raise ValueError\n        elif n==0 or n==1:\n            return 1\n        else:\n            fact=1\n            while(n>=1):\n                fact=fact*n\n                n=n-1\n            return fact%10\n    except:\n        raise ValueError('Invalid input! Please enter a positive integer.')\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(str(n)[::-1])%10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 6\n        else:\n            return n*factorial(n-1)\n    return factorial(n)%10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        print(\"Factorial does not exist for negative numbers\")\n    elif n == 0: \n        return 1\n    else: \n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return 0\n    elif n < 2:\n        return 1\n    else:\n        return n % 10 * last_Digit_Factorial(n//10)\n    \ndef last_Digit_Factorial_Iterative(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return 0\n    elif n < 2:\n        return 1\n    else:\n        total = 1\n        while n >= 2:\n            total *= n\n            n -= 1\n        return total % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    if n == 0:\n        return 1\n    else:\n        for i in range(1, n + 1):\n            factorial = factorial * i\n        factorial = str(factorial)\n        return int(factorial[len(factorial)-1])\n    "
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def factorial(n):\n        if n==0 or n==1:\n            return 1\n        else:\n            return n*factorial(n-1)\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [i for j in zip(list1, list2, list3) for i in j]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    \n    for x in range(len(list1)):\n        result.append(list1[x])\n        result.append(list2[x])\n        result.append(list3[x])\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    combined = [list1,list2,list3]\n    flat = []\n    for e in combined:\n        for item in e:\n            flat.append(item)\n    return flat\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for t in zip(list1,list2,list3) for item in t]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [i for t in zip(list1,list2,list3) for i in t]\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    # TODO: Write your function to find the dissimilar elements in the given two tuples.\n    \n    return []\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_ele = []\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if tup1!= tup2 and tup1 not in dissimilar_ele:\n                dissimilar_ele.append(tup1)\n    for tup1 in test_tup2:\n        for tup2 in test_tup1:\n            if tup1!= tup2 and tup1 not in dissimilar_ele:\n                dissimilar_ele.append(tup1)\n    return dissimilar_ele\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # return [i for i in test_tup1 + test_tup2 if i not in test_tup1 or i not in test_tup2]\n    return list(set(test_tup1 + test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = (1,2,3,4,5,6,7,8,9,10)\n    test_tup2 = (3,4,5,6,7,8,9,10,11,12)\n    result = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i!= j:\n                result.append((i, j))\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = (5,6,3,9)\n    test_tup2 = (6,5,9,7,4,8)\n    result = find_dissimilar(test_tup1, test_tup2)\n    print('The dissimilar elements in the given two tuples: ')\n    print(result)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple([item for item in test_tup1 + test_tup2 if item not in test_tup1 or item not in test_tup2])\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_numbers = []\n    for i, j in zip(test_tup1, test_tup2):\n        if i!= j:\n            dissimilar_numbers.append((i, j))\n    return dissimilar_numbers\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i, j in zip(test_tup1, test_tup2):\n        if i!= j:\n            return i, j\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set_1 = set(test_tup1)\n    set_2 = set(test_tup2)\n    dissim_set = set_1.difference(set_2)\n    return dissim_set\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            result.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        if type(i) is tuple:\n            new_tuple = new_tuple + even_ele(i, even_fnc)\n        else:\n            if even_fnc(i):\n                new_tuple = new_tuple + (i,)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        if type(i) == tuple:\n            for i in i:\n                new_tuple += (i,)\n        else:\n            new_tuple += (i,)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    nested_lst = []\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            nested_lst.append(even_ele(ele, even_fnc))\n        elif isinstance(ele, list):\n            nested_lst.append(even_ele(ele, even_fnc))\n        elif isinstance(ele, int):\n            if not ele % 2:\n                nested_lst.append(even_fnc(ele))\n            else:\n                nested_lst.append(ele)\n        else:\n            nested_lst.append(ele)\n    return tuple(nested_lst)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for each_tuple in test_tuple:\n        if len(each_tuple) < 1:\n            pass\n        else:\n            new_tuple += tuple(filter(even_fnc, each_tuple))\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return (even_fnc(ele) for ele in test_tuple if len(ele) % 2 == 0)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    result = ()\n    for el in test_tuple:\n        if even_fnc(el):\n            result = result + (el, )\n    return result\n    \ndef even_el(test_tuple):\n    '''\n    Write a function that returns True if the nested tuple element is even.\n    '''\n    return not test_tuple[0] % 2\n    \nif __name__ == \"__main__\":\n    \n    test_tuple = (1, 2, (3, 4, (5, 6), 7), 8, 9, (10, 11, (12, 13, (14, 15))))\n    \n    even_tuple = even_ele(test_tuple, even_el)\n    \n    print(even_tuple)\n    "
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for sub_tuple in test_tuple:\n        if even_fnc(sub_tuple):\n            new_tuple.append(sub_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(i for i in test_tuple if isinstance(i, tuple) and len(i)==even_fnc(i) and len(i)%2 == 0)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*b\n    surface_area=a*s\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b*s) + b*(s**2))/2\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa = ((b*b*s)/2) + ((b*s)*((b+s)/2))\n    return sa\n    \ndef volume(b,h):\n    '''\n    Write a python function to find the volume of a pyramid with a given base edge and height.\n    '''\n    vol = (1/3)*(b*b*h)\n    return vol\n    \ndef special_addition(a,b,c,d):\n    '''\n    Write a python function to add a+b, c+d, a+c, or b+d\n    '''\n    print(a+b+c+d)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s) * 2\n    \n    \ndef surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s) * 2\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return area\n    \ndef surface_Area_2(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_3(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return area\n    \ndef surface_Area_4(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_5(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_6(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_7(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_8(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_9(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_10(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_11(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_12(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_13(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_14(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_15(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_16(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_17(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_18(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_19(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_20(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_21(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_22(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_23(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_24(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_25(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_26(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_27(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_28(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_29(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_30(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_31(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_32(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s\n    return(area)\n    \ndef surface_Area_33(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and heigh"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return round(((b*b)+(s*s)*0.5),2)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=((b**2)*s)/3\n    return area\n    \ndef surface_Area_2(b,h): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    area=((b*h)/2)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s_area = b * s\n    return s_area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = b**2 + (b**2)*s**2\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((1/2)*b*s*s) + ((1/2)*b*b*s)\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)!= 0:\n        print(\"Dictionary is not empty\")\n    else:\n        print(\"Dictionary is empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\nprint(my_dict({}))\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # Your code here\n    if dict1 == {}:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(\"Dictionary has values\")\n    else:\n        print(\"Dictionary has no values\")\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan(n, num = num):\n        if num < 1:\n            return 1\n        elif num == 1:\n            return 1\n        else:\n            return ((2 * num) - 1) * catalan(n, num - 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise Exception(\"Only positive integers are allowed\")\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # since it's only 0 to n, we can use a 2D array and just increment the\n    # corresponding element in it.\n    cat = [[0]*(n+1) for n in range(num+1)]\n    for n in range(num+1):\n        cat[1][n] = 1\n        \n    for n in range(2, num+1):\n        for m in range(1, n+1):\n            cat[n][m] = sum(cat[n-1][j] * cat[1][j] for j in range(m))\n            \n    return cat[num][num]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return num * catalan_number(num - 1) / (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Catalan number = (2n)! / (n + 1)! * (n!)\n    # Catalan number = 2n! / ((n+1)! * n!)\n    def catalan_number_recursive(num):\n        if num == 1:\n            return 1\n        else:\n            return (2 * catalan_number_recursive(num - 1)) / ((catalan_number_recursive(num)) + (catalan_number_recursive(num - 1)))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    assert num > 0\n    catalan = [1,1]\n    for i in range(2, num+1):\n        catalan.append(int(0.5*(catalan[i-1]*(2*i-1))))\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return catalan_number(num - 1) * (4 * num - 2) / (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = [1]\n    for i in range(num):\n        c.append(0)\n        for j in range(i+1):\n            c[i+1] += c[j]*c[i-j]\n    return c[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 2:\n        return 1\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r\"\\w+ly\", text, flags=re.I)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    # print(text)\n    for i in re.findall(r'ly\\b', text):\n        # print(i)\n        result.append(i)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    results = []\n    for match in re.finditer(r\"ly\\b\", text):\n        results.append((match.span(), match.group()))\n    return results\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    #regex pattern:\n    #adverb ending with ly\n    #r'ly(?![A-Z])'\n    #use re.findall()\n    #r'[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    \n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    \n    \n    #r'[a-z]*ly(?![A-Z])'\n    #r'[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    \n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'\n    #r'(?<=\\s)[a-z]*ly(?![A-Z])'"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    res=re.findall(r'[\\w]+ly',text)\n    if not res:\n        return []\n    else:\n        return [i for i in range(len(text)) if text.find(res[0],i)==i]\ndef longest_word(text):\n    '''\n    Write a function that finds the longest word in a text.\n    '''\n    res=re.findall(r'[a-z]+',text)\n    res=[i for i in res if len(i)>5]\n    if not res:\n        return \"\"\n    else:\n        return max(res,key=len)\ndef get_all_capital_words(text):\n    '''\n    Write a function that returns all capital words in a text.\n    '''\n    res=re.findall(r'[A-Z][a-z]+',text)\n    if not res:\n        return []\n    else:\n        return res\ndef get_all_digits(text):\n    '''\n    Write a function that returns all digits in a text.\n    '''\n    res=re.findall(r'[0-9]+',text)\n    if not res:\n        return []\n    else:\n        return res\ndef get_all_uppercase_words(text):\n    '''\n    Write a function that returns all uppercase words in a text.\n    '''\n    res=re.findall(r'[A-Z]+[a-z]+',text)\n    if not res:\n        return []\n    else:\n        return res\ndef get_all_lowercase_words(text):\n    '''\n    Write a function that returns all lowercase words in a text.\n    '''\n    res=re.findall(r'[a-z]+',text)\n    if not res:\n        return []\n    else:\n        return res\ndef get_all_words_ending_with(text,end_with):\n    '''\n    Write a function that returns all words that end with a given string in a text.\n    '''\n    res=re.findall(r'[a-z]+'+end_with+r'[a-z]*',text)\n    if not res:\n        return []\n    else:\n        return res\ndef get_all_words_with_number(text):\n    '''\n    Write a function that returns all words that contains a number in a text.\n    '''\n    res=re.findall(r'[a-z]+[0-9]+[a-z]*',text)\n    if not res:\n        return []\n    else:\n        return res\ndef get_all_words_with_special_characters(text):\n    '''\n    Write a function that returns all words that contains special characters in a text.\n    '''\n    res=re.findall(r'[a-z]+(?:[!@#$%^&*(),.?\":{}|<>;\\-\\+\\=\\[\\]])+[a-z]*',text)\n    if not res:\n        return []\n    else:\n        return res\ndef get_all_words_with_a_single_letter(text):\n    '''\n    Write a function that returns all words that contain a single letter.\n    '''\n    res=re.findall(r'[a-z]+[a-z]',text)\n    if not res:\n        return []\n    else:\n        return res\ndef get_all_words_with_a_letter_repeating(text):\n    '''\n    Write a function that returns all words that contains a letter repeating in the middle.\n    '''\n    res=re.findall(r'[a-z]+[A-Z][a-z]+[A-Z][a-z]+[a-z]+[A-Z][a-z]+[a-z]+[A-Z][a-z]+[a-z]+[A-Z][a-z]+[a-z]+[A-Z][a-z]+[a-z]+[A-Z][a-z]+[a-z]+[A-Z][a-z]+[a-z]+[A-Z][a-z]+[a-z]+[A-Z][a-z]+[a-z]+',text)\n    if not res:\n        return []\n    else:\n        return res\ndef get_all_words_with_a_sequence_of_letters(text):\n    '''\n    Write a function that returns all words that contains a sequence of letters.\n    '''\n    res=re.findall(r'[a-z]+[a-z][a-z]+[a-z]+[a-z]+[a-z][a-z]+[a-z]+[a-z][a-z]+[a-z]+[a-z][a-z]+[a-z]+[a-z][a-z]+[a-z]+[a-z][a-z]+[a-z]+[a-z][a-z]+[a-z]+[a-z][a-z]+[a-z]+',text)\n    if not res:\n        return []\n    else:\n        return res\ndef get_all_words_with_first_and_last_letter_capitalized(text):\n    '''\n    Write a function that returns all words that contains a sequence of letters starting and ending with capitalized letters.\n    '''\n    res=re.findall(r'[A-Z][a-z]+(?:[a-z][a-z]+)+[A-Z][a-z]+',text)\n    if not res:\n        return []\n    else:\n        return res\ndef get_all_words_with_a_sequence_of_numbers(text):\n    '''\n    Write a function that returns all words that contains a sequence of numbers.\n    '''\n    res=re.findall(r'[a-z]+[0-9][a-z]+[a-z]+[0-9][a-z]+[a-z]+[0-9][a-z]+[a-z]+[0-9][a-z]+[a-z]+[0-9][a-z]+[a-z]+[0-9][a-z]+[a-z]+[0-9][a-z]+[a-z]+',text)\n    if not res:\n        return []\n    else:\n        return res\ndef find_all_common_words_in_multiple_sentences(text):\n    '''\n    Write a function that finds all common words in multiple sentences.\n    '''\n    res=re.findall(r'(?:[a-z]+[a-z]+)+',text)\n    if not res:\n        return []\n    else:\n        return res\ndef create_dictionary(text):\n    '''\n    Write a function that creates a dictionary of letters and their frequency in a text.\n    '''\n    return {i:text.count(i) for i in text}\ndef get_list_of_dicts_with_all_words(text):\n    '''\n    Write a function that returns a list of dictionaries, one dictionary for each word.\n    '''\n    return [{i:text.count(i)} for i in text]\ndef get_letter_counts(text):\n    '''\n    Write a function that returns a dictionary with the count of every letter in a given text.\n    '''\n    return {i:text.count(i) for i in text}\ndef get_list_of_tuples_with_all_words(text):\n    '''\n    Write a function that returns a list of tuples, one tuple for each word. Each tuple consists of a word and the number of characters in that word.\n    '''\n    return [(i,len(i)) for i in text]\ndef get_list_of_tuples_with_all_words_and_letters_count(text):\n    '''\n    Write a function that returns a list of tuples, one tuple for each word. Each tuple consists of a word and the number of letters in that word.\n    '''\n    return [(i,len(i)) for i in text]\ndef get_unique_words(text):\n    '''\n    Write a function that returns the number of unique words in a given text.\n    '''\n    res=set(text)\n    if not res"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern1 = re.compile(r'\\w+ly\\b')\n    match = pattern1.findall(text)\n    return match\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(\"ly$\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match.span(), match.group())\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'\\w+ly',text)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = re.sub(\"\\s\\s+\", \" \", text)\n    list_of_positions = []\n    for m in re.finditer(r\"\\w+ly\", text):\n        pos = m.start()\n        list_of_positions.append(pos)\n    if not list_of_positions:\n        print(\"No adverbs ending with 'ly' in text\")\n        return None\n    else:\n        return list_of_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #pattern = r'[.]'\n    text = \"The man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than the man who is crazy, insane and as crazy as the man who does not believe in Allah is worse than th"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Make a dictionary with item_name as key and price as value\n    item_price = {}\n    for item in items:\n        item_price[item['name']] = item['price']\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]))\n        if len(heap)>n:\n            heapq.heappop(heap)\n    print(heap)\n    while len(heap)>0:\n        print(heapq.heappop(heap))\n    return None\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[1] for item in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items, key=lambda i: i[1], reverse=True)\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #find the most expensive n items\n    heap = []\n    for item in items:\n        #use negative because it's a max heap\n        heapq.heappush(heap,(-items[item],item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [x[1] for x in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    dic={}\n    for item in items:\n        if item[0] not in dic:\n            dic[item[0]]=item[1]\n        else:\n            dic[item[0]]+=(item[1])\n    dic=sorted(dic.items(), key=lambda x: x[1], reverse=True)\n    return dic[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = {}\n    for item in items:\n        if item[1] in result:\n            result[item[1]].append(item)\n        else:\n            result[item[1]] = [item]\n    print(result)\n    heap = []\n    for key,value in result.items():\n        heapq.heappush(heap,(-value[0][2],value[0][0],key,value))\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a dict to hold the items and their prices.\n    prices = {}\n    for i in items:\n        prices[i] = items[i]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #items is list of tuples (item,value)\n    #n is int\n    #returns list of n tuples with (item,value)\n    heap = []\n    for i in items:\n        heapq.heappush(heap,(-i[1],i[0]))\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return [x[1] for x in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n >= len(items):\n        return items\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) >= n:\n        l1 = l[:n]\n        l2 = l[n:]\n        l2.extend(l1)\n        return l2\n    else:\n        print(\"List is too short\")\n        return -1\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    print(l)\n    return l[:n]+l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = len(l)\n    if n > a:\n        return l\n    b = l[:n]\n    c = l[n:]\n    d = c + b\n    return d\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # If the list is less than or equal to n, return the list.\n    if len(l) <= n:\n        return l\n    # Otherwise, split the list into two and add them back together.\n    else:\n        return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[0:n]\n    b = l[n:]\n    return a + b\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    r = l[0:n]\n    r.append(l[n:])\n    return r\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx = tuple(listx)\n    print(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n    \ndef tuple_list(tuplex):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    listx = list(tuplex)\n    return listx\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    d = {}\n    for i, j in enumerate(listx):\n        d[i] = j\n    return d\n    \ndef dict_list(dictx):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    listx = []\n    for key, value in dictx.items():\n        listx.append(value)\n    return listx\n    \ndef unique_list(listx):\n    '''\n    Write a function to return the unique list of a list.\n    '''\n    unique = []\n    for item in listx:\n        if item not in unique:\n            unique.append(item)\n    return unique\n    \ndef unique_tuple(tuplex):\n    '''\n    Write a function to return the unique tuple of a tuple.\n    '''\n    unique = ()\n    for item in tuplex:\n        if item not in unique:\n            unique += (item,)\n    return unique\n    \ndef unique_dict(dictx):\n    '''\n    Write a function to return the unique dictionary of a dictionary.\n    '''\n    unique = {}\n    for key, value in dictx.items():\n        if value not in unique:\n            unique[value] = key\n    return unique\n    \ndef unique_set(setx):\n    '''\n    Write a function to return the unique set of a set.\n    '''\n    unique = set()\n    for item in setx:\n        if item not in unique:\n            unique.add(item)\n    return unique\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    setx = set(listx)\n    return setx\n    \ndef set_list(setx):\n    '''\n    Write a function to convert a set to a list.\n    '''\n    listx = list(setx)\n    return listx\n    \ndef unique_string(strx):\n    '''\n    Write a function to return the unique string of a string.\n    '''\n    unique = ''\n    for item in strx:\n        if item not in unique:\n            unique += item\n    return unique\n    \ndef unique_file(filename):\n    '''\n    Write a function to write a file.\n    '''\n    try:\n        f = open(filename, 'w')\n        unique_list = unique_list\n        for item in unique_list:\n            f.write(item)\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        \ndef unique_list_string(listx):\n    '''\n    Write a function to return a unique string from a list.\n    '''\n    stringx = ''\n    for item in listx:\n        stringx += item\n    return stringx\n    \ndef unique_tuple_string(tuplex):\n    '''\n    Write a function to return a unique string from a tuple.\n    '''\n    stringx = ''\n    for item in tuplex:\n        stringx += item\n    return stringx\n    \ndef unique_dict_string(dictx):\n    '''\n    Write a function to return a unique string from a dictionary.\n    '''\n    stringx = ''\n    for key, value in dictx.items():\n        stringx += str(value)\n    return stringx\n    \ndef unique_set_string(setx):\n    '''\n    Write a function to return a unique string from a set.\n    '''\n    stringx = ''\n    for item in setx:\n        stringx += item\n    return stringx\n    \ndef unique_list_file(listx, filename):\n    '''\n    Write a function to write a file from a list.\n    '''\n    try:\n        f = open(filename, 'w')\n        for item in listx:\n            f.write(item)\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        \ndef unique_tuple_file(tuplex, filename):\n    '''\n    Write a function to write a file from a tuple.\n    '''\n    try:\n        f = open(filename, 'w')\n        for item in tuplex:\n            f.write(item)\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        \ndef unique_dict_file(dictx, filename):\n    '''\n    Write a function to write a file from a dictionary.\n    '''\n    try:\n        f = open(filename, 'w')\n        for key, value in dictx.items():\n            f.write(str(value) + '\\n')\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        \ndef unique_set_file(setx, filename):\n    '''\n    Write a function to write a file from a set.\n    '''\n    try:\n        f = open(filename, 'w')\n        for item in setx:\n            f.write(item)\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        \ndef list_set_file(listx, filename):\n    '''\n    Write a function to write a file from a list.\n    '''\n    try:\n        f = open(filename, 'w')\n        for item in listx:\n            f.write(item + '\\n')\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        \ndef tuple_set_file(tuplex, filename):\n    '''\n    Write a function to write a file from a tuple.\n    '''\n    try:\n        f = open(filename, 'w')\n        for item in tuplex:\n            f.write(item + '\\n')\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        \ndef dict_set_file(dictx, filename):\n    '''\n    Write a function to write a file from a dictionary.\n    '''\n    try:\n        f = open(filename, 'w')\n        for key, value in dictx.items():\n            f.write(str(key) + ':' + str(value) + '\\n')\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        \ndef set_list_file(setx, filename):\n    '''\n    Write a function to write a file from a set.\n    '''\n    try:\n        f = open(filename, 'w')\n        for item in setx:\n            f.write(item + '\\n')\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        \ndef string_list_file(stringx, filename):\n    '''\n    Write a function to write a file from a string.\n    '''\n    try:\n        f = open(filename, 'w')\n        f.write(stringx)\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        \ndef string_set_file(stringx, filename):\n    '''\n    Write a function to write a file from a string.\n    '''\n    try:\n        f = open(filename, 'w')\n        f.write(stringx)\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        \ndef string_tuple_file(stringx, filename):\n    '''\n    Write a function to write a file from a string.\n    '''\n    try:\n        f = open(filename, 'w')\n        f.write(stringx)\n        f.close()\n    except IOError as err:\n        print('File error:' + str(err))\n        "
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    x=tuple(listx)\n    return x\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)<=0:\n        return 0\n    sorted_list = sorted(nums)\n    return (sorted_list[-1] - sorted_list[0])\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big = 0\n    small = 0\n    for i in nums:\n        if i > big:\n            big = i\n        if i < small:\n            small = i\n    return big - small\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[len(nums)-1]-nums[0]\n    \nprint(big_diff([1, 2, 3, 4, 0]))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    list = []\n    for i in range(a,b+1):\n        for j in range(i+1, b+1):\n            if i*i == j*j:\n                list.append(i)\n                break\n    return list\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    start = a\n    end = b\n    squares = []\n    while start <= end:\n        squares.append(start * start)\n        start += 1\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in range(a, b+1) if i**2 in range(a, b+1)]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    # Method 1 (Using loop and checking):\n    # This will take O(n) time and O(n) space.\n    # First we will traverse through the range (a,b) and store all the numbers which are perfect squares in a list.\n    # Next, we will iterate the list and check if the numbers in the list are not between the range (a,b).\n    # If they are not, then we will remove them from the list.\n    # After all the numbers in the list are checked, we will return the list.\n    \n    \n    if a > b:\n        return []\n    \n    perfect_squares_in_range = []\n    for i in range(a, b+1):\n        if math.sqrt(i) == int(math.sqrt(i)):\n            perfect_squares_in_range.append(i)\n    \n    for j in perfect_squares_in_range:\n        if not (j >= a and j <= b):\n            perfect_squares_in_range.remove(j)\n    \n    return perfect_squares_in_range\n    \n    # Time complexity is O(n) because we are traversing through the range (a,b) to check if the number is in the list.\n    # Space complexity is O(n) because we are storing all the numbers in the list.\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in range(a, b) if i**2 < b and i**2 >= a]\n    \ndef square_digits(num):\n    '''\n    Write a function to return the digits of a square number in sorted order.\n    '''\n    return ''.join(sorted(str(int(num)**2)))\n    \ndef encrypt(text, n):\n    '''\n    Write a function to encrypt text using a Caesar cipher with an input shift value.\n    '''\n    shift = n % 26\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    cipher = ''.join(alphabet[(alphabet.index(char) + shift) % 26] if char in alphabet else char for char in text)\n    return cipher\n    \ndef decrypt(cipher, n):\n    '''\n    Write a function to decrypt text using a Caesar cipher with an input shift value.\n    '''\n    shift = n % 26\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    plain = ''.join(alphabet[(alphabet.index(char) - shift) % 26] if char in alphabet else char for char in cipher)\n    return plain\n    \ndef is_power(a, b):\n    '''\n    Write a function to determine if a number is a power of a given base.\n    '''\n    if b > a:\n        return False\n    while a % b == 0:\n        a //= b\n    return a == 1\n    \ndef sum_of_squares(n):\n    '''\n    Write a function to sum of squares of all numbers between 1 and n.\n    '''\n    return sum(i * i for i in range(n+1))\n    \ndef distinct_pairs(a, b):\n    '''\n    Write a function that takes two lists of integers and returns the number of distinct pairs of integers whose \n    sum is equal to the given target.\n    '''\n    if a is None or b is None or len(a) < 2 or len(b) < 2:\n        return 0\n    return len(set(a) & set(b))\n    \ndef matrix(n):\n    '''\n    Write a function to return the nth row of Pascal's triangle.\n    '''\n    result = []\n    i = 0\n    while i < n:\n        row = [0] * (i + 1)\n        row[0], row[-1] = 1, 1\n        for j in range(1, len(row) - 1):\n            row[j] = result[i-1][j-1] + result[i-1][j]\n        result.append(row)\n        i += 1\n    return result[-1]\n    \ndef matrix2(n):\n    '''\n    Write a function to return the nth row of Pascal's triangle.\n    '''\n    result = [1] * (n+1)\n    for i in range(2, n+1):\n        for j in range(1, i):\n            result[i] += result[j] * result[i-j]\n    return result\n    \ndef generate_row(n):\n    '''\n    Write a function that returns the nth row of Pascal's Triangle.\n    '''\n    result = [1]\n    for i in range(1, n):\n        result.append(sum(result[j] * result[i-j] for j in range(i+1)))\n    return result\n    \ndef reverse(text):\n    '''\n    Write a function to reverse a string.\n    '''\n    return text[::-1]\n    \ndef check_pandigital(num):\n    '''\n    Write a function to check if the number is pandigital.\n    '''\n    return len(set(str(num))) == 10\n    \ndef convert_to_morse(text):\n    '''\n    Write a function to convert a text to Morse code.\n    '''\n    morse_code = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..','m': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.','s': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    return''.join([morse_code[char.lower()] for char in text if char.isalpha()])\n    \ndef convert_to_binary(decimal_num):\n    '''\n    Write a function that converts a decimal integer into a binary string.\n    '''\n    binary_num = ''\n    while decimal_num > 0:\n        binary_num += str(decimal_num % 2)\n        decimal_num //= 2\n    return binary_num[::-1]\n    \ndef convert_to_binary2(decimal_num):\n    '''\n    Write a function that converts a decimal integer into a binary string.\n    '''\n    return bin(decimal_num)[2:]\n    \ndef prime_factors(n):\n    '''\n    Write a function that returns all the prime factors of a number.\n    '''\n    prime_numbers = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            prime_numbers.append(i)\n            n //= i\n    if n > 1:\n        prime_numbers.append(n)\n    return prime_numbers\n    \ndef remove_duplicates(text):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(dict.fromkeys(text))\n    \ndef balanced_brackets(text):\n    '''\n    Write a function to balance the brackets in the text.\n    '''\n    return len(text) == len(set(text))\n    \ndef integer_divisions(n):\n    '''\n    Write a function to return the integers between 1 and n that divide evenly into n.\n    '''\n    return [i for i in range(1, n) if n % i == 0]\n    \ndef square_digits_in_string(text):\n    '''\n    Write a function to return the digits of a square number in sorted order in string format.\n    '''\n    return ''.join(sorted(str(int(num) ** 2)) for num in text.split())\n    \ndef sort_array(source_array):\n    '''\n    Write a function to sort the array.\n    '''\n    return sorted(source_array)\n    \ndef sort_array_in_place(source_array):\n    '''\n    Write a function to sort the array in-place.\n    '''\n    source_array.sort()\n    return source_array\n    \ndef min_swaps(arr):\n    '''\n    Write a function that takes an array of integers that are out of order and returns the minimum number of swaps\n    needed to return the array to its original order.\n    '''\n    if len(arr) < 2:\n        return 0\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i]!= sorted_arr[i]:\n            count += 1\n    return count\n    \ndef min_swaps2(arr):\n    '''\n    Write a function that takes an array of integers and returns the minimum number of swaps needed to return the\n    array to its original order.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n    return count\n    \ndef remove_last_k_elements(arr, k):\n    '''\n    Write a function to remove the last k elements from a list.\n    '''\n    n "
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    if a < b:\n        for i in range(a, b + 1):\n            if i * i == b:\n                squares.append(i)\n    else:\n        for i in range(a, b - 1, -1):\n            if i * i == b:\n                squares.append(i)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for x in range(a, b+1):\n        y = x**2\n        if y >= a and y <= b:\n            squares.append(y)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i*i for i in range(sqrt(a), sqrt(b) + 1) if i*i < b]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        if (num**0.5).is_integer():\n            yield num**0.5\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # make sure that both a and b are integers\n    a = int(a)\n    b = int(b)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.exp(y*1j)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    theta=math.atan(y/x)\n    r=math.sqrt(x**2+y**2)\n    return(theta,r)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x,y)\n    return (r.real,r.imag)\n    \n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x,y))\n    print(r)\n    return r[0]\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,t = x,y\n    x = r*math.cos(t)\n    y = r*math.sin(t)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    #print(cmath.polar(complex(x,y)))\n    return (cmath.polar(complex(x,y))[0],cmath.polar(complex(x,y))[1])\ndef cartesian_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import cmath\n    #print(cmath.polar(complex(x,y)))\n    return (cmath.polar(complex(x,y))[1],cmath.polar(complex(x,y))[0])\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef cart_to_pol(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import cmath\n    return (cmath.polar(complex(x,y))[1],cmath.polar(complex(x,y))[0])\ndef pol_to_cart(rho,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    return (cmath.rect(rho,phi))\ndef pol_to_cart_coord(rho,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    return (cmath.rect(rho,phi))\ndef cart_to_pol_coord(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import cmath\n    return (cmath.polar(complex(x,y))[1],cmath.polar(complex(x,y))[0])\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x**2+y**2\n    t=cmath.sqrt(r)\n    a=t.real\n    b=t.imag\n    return a,b\ndef rotate(a,b):\n    '''\n    Write a function to rotate the coordinates.\n    '''\n    x=a*cmath.cos(b)-b*cmath.sin(a)\n    y=a*cmath.sin(b)+b*cmath.cos(a)\n    return x,y\ndef mult_polar(a,b):\n    '''\n    Write a function to multiply the coordinates.\n    '''\n    x=a*b\n    return x\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x ** 2 + y ** 2) ** 0.5\n    theta = cmath.phase(complex(x,y))\n    #print(r, theta)\n    return complex(r, theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    print('Polar to Rectangular Coordinates:',x,'\\t',y,'\\n',end='')\n    print('r:',x,'\\t\\t',r,'\\t\\t\\t\\t\\t\\t\\t\\t',r,'\\t\\t',end='')\n    print('\u03b8:',y,'\\t\\t',math.degrees(y),'\\t\\t\\t\\t\\t\\t\\t\\t\\t',math.degrees(y),'\\t\\t',end='')\n    print('x:',x*math.cos(y),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',x*math.cos(y),'\\t\\t',end='')\n    print('y:',x*math.sin(y),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',x*math.sin(y),'\\n')\ndef polar_rect_lst(lst):\n    '''\n    Write a function to convert a list of polar coordinates to rectangular coordinates.\n    '''\n    print('Polar to Rectangular Coordinates:',lst[0],'\\t',lst[1],'\\n',end='')\n    print('r:',lst[0],'\\t\\t',r,'\\t\\t\\t\\t\\t\\t\\t',r,'\\t\\t',end='')\n    print('\u03b8:',lst[1],'\\t\\t',math.degrees(lst[1]),'\\t\\t\\t\\t\\t\\t\\t\\t\\t',math.degrees(lst[1]),'\\t\\t',end='')\n    print('x:',lst[0]*math.cos(lst[1]),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',lst[0]*math.cos(lst[1]),'\\t\\t',end='')\n    print('y:',lst[0]*math.sin(lst[1]),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',lst[0]*math.sin(lst[1]),'\\n')\ndef rectangular_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    print('Rectangular to Polar Coordinates:',x,'\\t',y,'\\n',end='')\n    print('r:',abs(x),'\\t\\t\\t\\t\\t\\t\\t',abs(x),'\\t\\t',end='')\n    print('\u03b8:',cmath.phase(x),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',cmath.phase(x),'\\t\\t',end='')\n    print('x:',abs(x)*math.cos(cmath.phase(x)),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',abs(x)*math.cos(cmath.phase(x)),'\\t\\t',end='')\n    print('y:',abs(x)*math.sin(cmath.phase(x)),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',abs(x)*math.sin(cmath.phase(x)),'\\n')\ndef rectangular_polar_lst(lst):\n    '''\n    Write a function to convert a list of rectangular coordinates to polar coordinates.\n    '''\n    print('Rectangular to Polar Coordinates:',lst[0],'\\t',lst[1],'\\n',end='')\n    print('r:',abs(lst[0]),'\\t\\t\\t\\t\\t\\t\\t',abs(lst[0]),'\\t\\t',end='')\n    print('\u03b8:',cmath.phase(lst[0]),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',cmath.phase(lst[0]),'\\t\\t',end='')\n    print('x:',abs(lst[0])*math.cos(cmath.phase(lst[0])),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',abs(lst[0])*math.cos(cmath.phase(lst[0])),'\\t\\t',end='')\n    print('y:',abs(lst[0])*math.sin(cmath.phase(lst[0])),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',abs(lst[0])*math.sin(cmath.phase(lst[0])),'\\n')\ndef polar_cartesian(r,theta):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    print('Polar to Cartesian Coordinates:',r,'\\t',theta,'\\n',end='')\n    print('x:',r*math.cos(theta),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',r*math.cos(theta),'\\t\\t',end='')\n    print('y:',r*math.sin(theta),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',r*math.sin(theta),'\\n')\ndef polar_cartesian_lst(lst):\n    '''\n    Write a function to convert a list of polar coordinates to cartesian coordinates.\n    '''\n    print('Polar to Cartesian Coordinates:',lst[0],'\\t',lst[1],'\\n',end='')\n    print('x:',lst[0]*math.cos(lst[1]),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',lst[0]*math.cos(lst[1]),'\\t\\t',end='')\n    print('y:',lst[0]*math.sin(lst[1]),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',lst[0]*math.sin(lst[1]),'\\n')\ndef cartesian_polar(x,y):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    print('Cartesian to Polar Coordinates:',x,'\\t',y,'\\n',end='')\n    print('r:',math.sqrt(x**2+y**2),'\\t\\t\\t\\t\\t\\t\\t',math.sqrt(x**2+y**2),'\\t\\t',end='')\n    print('\u03b8:',cmath.phase(complex(x,y)),'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',cmath.phase(complex(x,y)),'\\t\\t',end='')\n    print('x:',x,'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',x,'\\t\\t',end='')\n    print('y:',y,'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t',y,'\\n')\ndef cartesian_polar_lst(lst):\n    '''\n    Write a function to convert a list of cartesian coordinates to polar coordinates.\n    '''\n    print('Cartesian to Polar Coordinates:',lst[0],'\\t',lst[1],'\\n',end='')\n    print('r:',math.sqrt(lst[0]**2+lst[1]**2),'\\t\\t\\t\\t\\t\\t\\t',math"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    return (r*cmath.cos(theta), r*cmath.sin(theta))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l = len(newList)\n    temp = newList[0]\n    newList[0] = newList[l-1]\n    newList[l-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\nprint(swap_List([1,2,3,4,5,6,7]))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # newList = [1,2,3,4,5,6,7]\n    # newList.append(newList[-1])\n    # newList.remove(newList[-1])\n    # newList.insert(0,newList[-1])\n    # newList.remove(newList[0])\n    # newList.append(newList[0])\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size-1] \n    newList[size-1] = temp \n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse the content of a list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef append_List(newList):\n    '''\n    Write a python function to add 'pooja' and 'john' at the end of the content of a list.\n    '''\n    newList.append('pooja')\n    newList.append('john')\n    return newList\n    \ndef delete_List(newList):\n    '''\n    Write a python function to delete 'pooja' and 'john' from the list.\n    '''\n    newList.remove('pooja')\n    newList.remove('john')\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n=int(input('Enter the no of element'))\n    l=[]\n    for i in range(0,n):\n        l.append(input('Enter the element'))\n    l.pop()\n    l.insert(0,l[-1])\n    l.pop()\n    l.append(l[0])\n    return l\nprint(swap_List(newList))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    # Base Cases\n    if n == 0 and k == 0:\n        return 1\n    if n == 0 and k > 0:\n        return 0\n    if n == 1 and k == 0:\n        return 1\n    if n == 1 and k == 1:\n        return 1\n    \n    # Recursive call\n    return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff=0\n    \n    #Your code goes here.\n    \n    return coeff \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #base case\n    if n==0:\n        return 0\n    if k==0:\n        return 1\n    if k==1:\n        return n\n    #recursion\n    if n-k<0:\n        return 0\n    return (binomial_Coeff(n-k,k)+binomial_Coeff(n-k,k-1))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return sum([factorial(n)//(factorial(i)*factorial(n-i)) for i in range(k+1)])\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [0] * (k+1)\n    C[0] = 1\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def convert(string): \n        return int(string) \n    return sum(convert(binomial_coeff(n, i) * convert(binomial_coeff(n-k, j))) for i in range(k+1) for j in range(k+1)) \nn = 5\nk = 3\nprint(binomial_Coeff(n,k)"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k==0 or k==n):\n        return 1\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    \ndef main():\n    print(binomial_Coeff(5,4)) #15\n    print(binomial_Coeff(7,6)) #420\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a= [0]*(n+1) \n    a[1]=1 \n    i=2 \n    while(i<=n): \n        a[i]=a[i-1] \n        j=i+1 \n        while(j<=n): \n            a[j]=a[j-1] \n            a[j]+=a[j-i] \n            j+=1 \n        i+=1\n    return a[k] \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    list_of_coefficients = []\n    for i in range(n+1):\n        list_of_coefficients.append(binomial(n,i))\n    return list_of_coefficients\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    # Total number of terms \n    total_sum = (n + 1) * n / 2 \n    # Find the sum of the product of consecutive binomial co-efficients \n    k = int(k)\n    total_sum -= k * (k - 1) / 2\n    return total_sum \n    \n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r\"^(0\\d{1,3}).*\")\n    ip = pattern.sub(r\"\\1\",ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    lst=ip.split('.')\n    new_list=[]\n    for elem in lst:\n        if elem=='0':\n            continue\n        new_list.append(elem)\n    return '.'.join(new_list)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    temp = '.'.join(ip.split('.'))\n    return temp\ndef check_ip(ip):\n    '''\n    Write a function to check whether an ip is valid or not.\n    '''\n    ip = ip.split('.')\n    #print(ip)\n    #print(len(ip))\n    if len(ip) == 4:\n        if 0 <= int(ip[0]) <= 255 and 0 <= int(ip[1]) <= 255 and 0 <= int(ip[2]) <= 255 and 0 <= int(ip[3]) <= 255:\n            return True\n    return False\ndef check_ipv4(ip):\n    '''\n    Write a function to check whether an ip is valid or not.\n    '''\n    ip = ip.split('.')\n    #print(ip)\n    #print(len(ip))\n    if len(ip) == 4:\n        if 0 <= int(ip[0]) <= 255 and 0 <= int(ip[1]) <= 255 and 0 <= int(ip[2]) <= 255 and 0 <= int(ip[3]) <= 255:\n            return True\n    return False\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(^0+)([0-9]{1,3})', r'\\2', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #import re\n    #import itertools\n    #return \".\".join(map(str, list(itertools.takewhile(lambda x: x!= 0, map(int, ip.split(\".\")))))\n    string = re.sub('^0+(?P<ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})$', '\\\\g<ip>', ip)\n    return string\ndef find_greater_permutation(string):\n    '''\n    Write a function that, given a string,\n    finds the greatest permutation\n    of the string that is also a palindrome.\n    '''\n    #import re\n    #return re.sub('([a-z])\\\\1{3,}', '\\\\1', re.sub('([a-z])\\\\1+', '\\\\1', string))\n    string = re.sub('([a-z])\\\\1{3,}', '\\\\1', string)\n    string = re.sub('([a-z])\\\\1+', '\\\\1', string)\n    return string\ndef ip_is_v4(ip):\n    '''\n    Write a function to determine if an IP address\n    is a valid IPv4 address.\n    '''\n    #import re\n    #return bool(re.fullmatch('([0-9]{1,3}\\.){3}[0-9]{1,3}', ip))\n    if re.match('^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', ip):\n        return True\n    return False\ndef longest_word(string):\n    '''\n    Write a function that, given a string,\n    finds the longest word in the string\n    that is also a palindrome.\n    '''\n    #import re\n    #return max(re.split('[^a-zA-Z]', string), key=len)\n    return max(string.split(), key=len)\ndef shortest_word(string):\n    '''\n    Write a function that, given a string,\n    finds the shortest word in the string\n    that is also a palindrome.\n    '''\n    #import re\n    #return min(re.split('[^a-zA-Z]', string), key=len)\n    return min(string.split(), key=len)\ndef longest_palindrome(string):\n    '''\n    Write a function that, given a string,\n    finds the longest palindromic substring\n    in that string.\n    '''\n    #import re\n    #return re.findall('^(.*[a-zA-Z])\\\\1+$', string)[0]\n    return re.findall('^(.*[a-zA-Z])\\\\1+$', string)[0]\ndef longest_palindrome_2(string):\n    '''\n    Write a function that, given a string,\n    finds the longest palindromic substring\n    in that string.\n    '''\n    #import re\n    #return re.findall('^(([a-zA-Z])\\\\1+|[a-zA-Z]{2,}[^a-zA-Z]\\\\1+[a-zA-Z]{2,})\\\\1+$', string)[0]\n    return re.findall('^(([a-zA-Z])\\\\1+|[a-zA-Z]{2,}[^a-zA-Z]\\\\1+[a-zA-Z]{2,})\\\\1+$', string)[0]\ndef word_to_number(string):\n    '''\n    Write a function that, given a string,\n    finds the number represented by\n    the words in the string.\n    '''\n    #import re\n    #return int(''.join(re.findall('[0-9]+', string)))\n    return int(''.join(string.split()))\ndef longest_palindrome_3(string):\n    '''\n    Write a function that, given a string,\n    finds the longest palindromic substring\n    in that string.\n    '''\n    #import re\n    #return re.findall('^(.*[a-zA-Z])\\\\1+$', string)[0]\n    return re.findall('^(.*[a-zA-Z])\\\\1+$', string)[0]\ndef longest_palindrome_4(string):\n    '''\n    Write a function that, given a string,\n    finds the longest palindromic substring\n    in that string.\n    '''\n    #import re\n    #return re.findall('^(.*[a-zA-Z])\\\\1+$', string)[0]\n    return re.findall('^(.*[a-zA-Z])\\\\1+$', string)[0]\ndef longest_palindrome_5(string):\n    '''\n    Write a function that, given a string,\n    finds the longest palindromic substring\n    in that string.\n    '''\n    #import re\n    #return re.findall('^(.*[a-zA-Z])\\\\1+$', string)[0]\n    return re.findall('^(.*[a-zA-Z])\\\\1+$', string)[0]\ndef is_palindrome(string):\n    '''\n    Write a function that, given a string,\n    determines if the string is a palindrome.\n    '''\n    #import re\n    #return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\n    return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\ndef longest_palindrome_6(string):\n    '''\n    Write a function that, given a string,\n    determines if the string is a palindrome.\n    '''\n    #import re\n    #return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\n    return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\ndef longest_palindrome_7(string):\n    '''\n    Write a function that, given a string,\n    determines if the string is a palindrome.\n    '''\n    #import re\n    #return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\n    return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\ndef longest_palindrome_8(string):\n    '''\n    Write a function that, given a string,\n    determines if the string is a palindrome.\n    '''\n    #import re\n    #return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\n    return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\ndef longest_palindrome_9(string):\n    '''\n    Write a function that, given a string,\n    determines if the string is a palindrome.\n    '''\n    #import re\n    #return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\n    return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\ndef longest_palindrome_10(string):\n    '''\n    Write a function that, given a string,\n    determines if the string is a palindrome.\n    '''\n    #import re\n    #return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\n    return bool(re.match('^(.*[a-zA-Z])\\\\1+$', string))\ndef longest_palindrome_11(string):\n    '''\n    Write a function that, given a strin"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        if len(ip_list[i]) == 3:\n            ip_list[i] = ip_list[i][2:]\n        elif len(ip_list[i]) == 2:\n            ip_list[i] = ip_list[i][1:]\n        elif len(ip_list[i]) == 1:\n            ip_list[i] = ip_list[i][1:]\n        ip_list[i] = ip_list[i].lstrip('0')\n        if len(ip_list[i]) == 0:\n            ip_list[i] = '0'\n    return '.'.join(ip_list)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip=='':\n        return ''\n    ip=str(ip)\n    while ip[0]=='0' and len(ip)>1:\n        ip=ip[1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip1=re.sub(r\"\\.0\",\"\",ip)\n    return ip1\ndef validip_ip(ip):\n    '''\n    Write a function to check the validity of an ip address.\n    '''\n    ip1=re.sub(r\"\\.0\",\"\",ip)\n    ip1=removezero_ip(ip1)\n    ip1=ip.split('.')\n    if len(ip1)==4:\n        for each in ip1:\n            if each==\"\":\n                continue\n            elif int(each)>255 or int(each)<0:\n                return False\n        return True\n    else:\n        return False\ndef check_ip_format(ip):\n    '''\n    Write a function to check the validity of an ip address.\n    '''\n    if validip_ip(ip):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\ndef subnet_calc(ip,subnet):\n    '''\n    Write a function to calculate the subnet bits,\n    number of usable hosts and broadcast address.\n    '''\n    ip1=re.sub(r\"\\.0\",\"\",ip)\n    ip1=ip.split('.')\n    subnet1=re.sub(r\"\\.0\",\"\",subnet)\n    subnet1=subnet.split('.')\n    no_of_zeros=subnet1[0].count(\"0\")\n    no_of_hosts=2**no_of_zeros-2\n    net_mask=\".\".join(subnet1[0:3])+\".0.0\"\n    broadcast=\".\".join(subnet1[0:3])+\".255.255\"\n    return ip1,subnet1,no_of_hosts,net_mask,broadcast\ndef network_calc(ip,subnet):\n    '''\n    Write a function to calculate the network id,\n    first usable ip and last usable ip.\n    '''\n    ip1,subnet1,no_of_hosts,net_mask,broadcast=subnet_calc(ip,subnet)\n    network_id=\".\".join(ip1)+\".\"+subnet1[3]\n    first_ip=\".\".join(ip1)+\".\"+subnet1[2]\n    last_ip=\".\".join(ip1)+\".\"+subnet1[3]+\".\"+str(int(subnet1[3])+no_of_hosts-2)\n    return network_id,first_ip,last_ip\ndef check_subnet_range(ip,subnet):\n    '''\n    Write a function to check the validity of\n    the subnet id and return the result as\n    valid/invalid.\n    '''\n    if re.search(r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\",subnet):\n        if int(subnet.split(\".\")[0])>=1 and int(subnet.split(\".\")[0])<=126:\n            if int(subnet.split(\".\")[1])>=0 and int(subnet.split(\".\")[1])<=254:\n                if int(subnet.split(\".\")[2])>=0 and int(subnet.split(\".\")[2])<=254:\n                    if int(subnet.split(\".\")[3])>=0 and int(subnet.split(\".\")[3])<=254:\n                        return \"Valid\"\n                    else:\n                        return \"Invalid\"\n                else:\n                    return \"Invalid\"\n            else:\n                return \"Invalid\"\n        else:\n            return \"Invalid\"\n    else:\n        return \"Invalid\"\ndef check_network_range(ip,subnet):\n    '''\n    Write a function to check the validity of\n    the network id and return the result as\n    valid/invalid.\n    '''\n    if re.search(r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\",ip):\n        if int(ip.split(\".\")[0])>=1 and int(ip.split(\".\")[0])<=126:\n            if int(ip.split(\".\")[1])>=0 and int(ip.split(\".\")[1])<=254:\n                if int(ip.split(\".\")[2])>=0 and int(ip.split(\".\")[2])<=254:\n                    if int(ip.split(\".\")[3])>=0 and int(ip.split(\".\")[3])<=254:\n                        if check_subnet_range(ip,subnet)==\"Valid\":\n                            if int(ip.split(\".\")[3])<int(subnet.split(\".\")[3]):\n                                return \"Valid\"\n                            else:\n                                return \"Invalid\"\n                        else:\n                            return \"Invalid\"\n                    else:\n                        return \"Invalid\"\n                else:\n                    return \"Invalid\"\n            else:\n                return \"Invalid\"\n        else:\n            return \"Invalid\"\n    else:\n        return \"Invalid\"\ndef check_ip_in_subnet(ip,subnet):\n    '''\n    Write a function to check if the\n    ip address is in the specified subnet,\n    return the result as valid/invalid.\n    '''\n    if re.search(r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\",ip):\n        if check_network_range(ip,subnet)==\"Valid\":\n            ip1,subnet1,no_of_hosts,net_mask,broadcast=subnet_calc(ip,subnet)\n            ip2=re.sub(r\"\\.0\",\"\",ip)\n            ip2=ip.split('.')\n            if int(ip2[0])>=int(subnet1[0]):\n                if int(ip2[1])>=int(subnet1[1]):\n                    if int(ip2[2])>=int(subnet1[2]):\n                        if int(ip2[3])>=int(subnet1[3]):\n                            return \"Valid\"\n                        else:\n                            return \"Invalid\"\n                    else:\n                        return \"Invalid\"\n                else:\n                    return \"Invalid\"\n            else:\n                return \"Invalid\"\n        else:\n            return \"Invalid\"\n    else:\n        return \"Invalid\"\ndef binary_subnet_calc(ip,subnet):\n    '''\n    Write a function to calculate the binary\n    form of the subnet id and return the result\n    as valid/invalid.\n    '''\n    if re.search(r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\",ip):\n        if check_network_range(ip,subnet)==\"Valid\":\n            ip1,subnet1,no_of_hosts,net_mask,broadcast=subnet_calc(ip,subnet)\n            binary_subnet=[]\n            for each in subnet1:\n                binary_subnet.append(bin(int(each))[2:].zfill(8))\n            binary_subnet=\"\".join(binary_subnet)\n            return binary_subnet\n        else:\n            return \"Invalid\"\n    else:\n        return \"Invalid\"\ndef check_subnet_id(ip,subnet):\n    '''\n    Write a function to calculate the binary\n    form of the subnet id and return the result\n    as valid/invalid.\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    while len(ip.split(\".\")[0])<=1:\n        ip = ip.split(\".\")[1]+\".\"+ip.split(\".\")[2]+\".\"+ip.split(\".\")[3]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.search(r'[0-9]{1,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{1,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', ip):\n        ip = re.sub('[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}[.]0{0,2}[0-9]{0,3}', '', ip)\n    elif re.search(r'["
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    for i in list1:\n        if i % 2 == 0:\n            diff_even = i\n        else:\n            diff_odd = i\n    return diff_even,diff_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    numbers = list1\n    even_numbers = []\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    print(even_numbers[0], odd_numbers[0])\ndiff_even_odd([1, 2, 3, 4, 5, 6, 7])\ndiff_even_odd([2, 4, 6, 8, 10, 3])\ndiff_even_odd([2, 4, 0, 100, 4, 11, 2602, 36])\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return even_num - odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    count1 = 0\n    for i in list1:\n        if(count % 2 == 0):\n            count = count + 1\n            if(count == 1):\n                even = i\n        else:\n            count1 = count1 + 1\n            if(count1 == 1):\n                odd = i\n    diff = even - odd\n    print(\"The first difference of the given list is: \" + str(diff))\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    for i in range(0,len(list1)):\n        if(i%2==0):\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    print('Difference of first even and first odd number of a given list : ',list1[0]-list1[1])\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1 = [1,2,3,4,5,6]\n    list2 = [1,2,3,4,5,6,7]\n    even_numbers = []\n    odd_numbers = []\n    for num in list1:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    print(even_numbers)\n    print(odd_numbers)\n    print(\"Difference of even numbers: {}\".format(even_numbers[0]-odd_numbers[0]))\n    print(\"Difference of odd numbers: {}\".format(even_numbers[0]-odd_numbers[0]))\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    list3 = []\n    for item in list1:\n        if item % 2 == 0:\n            list2.append(item)\n        else:\n            list3.append(item)\n    list2.pop(0)\n    list3.pop(0)\n    return (list2[0] - list3[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    \n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            even_sum += list1[i]\n        else:\n            odd_sum += list1[i]\n            \n    return even_sum - odd_sum\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=0\n    odd=0\n    for i in range(len(list1)):\n        if(i%2==0):\n            even=list1[i]\n        else:\n            odd=list1[i]\n    print(even-odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    first_even = list1[0] + list1[1]\n    first_odd = list1[0] + list1[2]\n    return first_even - first_odd\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        raise ValueError(\"Invalid Input\")\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i=0\n    j=0\n    l1=len(str1)\n    l2=len(str2)\n    if l1!=l2 :\n        print(\"Invalid Input\")\n        return\n    while i<l1 and j<l2 :\n        if str1[i]!=str2[j] :\n            i+=1\n            j+=1\n            continue\n        else :\n            i+=1\n            j+=1\n    print(j)\n    return j\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    list1 = list(str1)\n    list2 = list(str2)\n    list3 = []\n    if len(list1) < len(list2) :\n        for i in range(0,len(list1)):\n            if list1[i]!= list2[i]:\n                list3.append(list1[i])\n                list3.append(list2[i])\n    if len(list1) > len(list2) :\n        for i in range(0,len(list2)):\n            if list1[i]!= list2[i]:\n                list3.append(list2[i])\n                list3.append(list1[i])\n    if len(list1) == len(list2) :\n        for i in range(0,len(list2)):\n            if list1[i]!= list2[i]:\n                list3.append(list1[i])\n                list3.append(list2[i])\n    return len(list3)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    if n1!= n2 :\n        return -1\n    i,j = 0,0\n    c = 0\n    while i < n1 and j < n2 and str1[i] == str2[j] : \n        i += 1\n        j += 1\n    if i == n1 : \n        return c\n    str1 = str1[i:]\n    str2 = str2[j:]\n    return c+1+min_Swaps(str1,str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return min(swap_count_difference(str1, str2), swap_count_difference(str2, str1))\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m :\n        return -1\n    count = 0\n    i = 0\n    j = 0\n    while i < n and j < m :\n        if str1[i]!= str2[j] :\n            i += 1\n            j += 1\n            count += 1\n        else :\n            i += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    n = len(str1)\n    m = len(str2)\n    \n    if n!= m :\n        print(\"Length of both strings should be same\")\n        return -1\n        \n    count = 0\n    i = n-1\n    while i >= 0 :\n        if str1[i]!= str2[i] :\n            if str1[i] == '0' :\n                count += 1\n                str2 = str2[:i] + '1' + str2[i+1:]\n                i -= 1\n            else :\n                count += 1\n                str2 = str2[:i] + '0' + str2[i+1:]\n        i -= 1\n        \n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return bin_to_dec(str1) - bin_to_dec(str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1 = len(str1)\n    l2 = len(str2)\n    if l1 == l2 :\n        return 0\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size = size + sys.getsizeof(i)\n    return size\ndef print_my_tuple(tuple_list):\n    '''\n    Write a function to print the given tuple in a specified format.\n    '''\n    string = \"\"\n    for i in tuple_list:\n        string = string + str(i) + \", \"\n    print(string)\ndef sum_of_tuple(tuple_list):\n    '''\n    Write a function to return the sum of the given tuple.\n    '''\n    sum = 0\n    for i in tuple_list:\n        sum = sum + i\n    return sum\ndef smallest_of_tuple(tuple_list):\n    '''\n    Write a function to return the smallest number in the given tuple.\n    '''\n    if len(tuple_list) == 1:\n        return tuple_list[0]\n    else:\n        min_num = tuple_list[0]\n        for i in tuple_list:\n            if i < min_num:\n                min_num = i\n        return min_num\ndef largest_of_tuple(tuple_list):\n    '''\n    Write a function to return the largest number in the given tuple.\n    '''\n    if len(tuple_list) == 1:\n        return tuple_list[0]\n    else:\n        max_num = tuple_list[0]\n        for i in tuple_list:\n            if i > max_num:\n                max_num = i\n        return max_num\ndef remove_tuple_item(tuple_list, index):\n    '''\n    Write a function to remove the item at the specified index in the given tuple.\n    '''\n    tuple_list.pop(index)\n    return tuple_list\ndef remove_duplicates(tuple_list):\n    '''\n    Write a function to remove duplicates in a given tuple list.\n    '''\n    final_list = []\n    for i in tuple_list:\n        if i not in final_list:\n            final_list.append(i)\n    return final_list\ndef count_occurrences(tuple_list, item):\n    '''\n    Write a function to return the number of occurrences of the given item in the given tuple.\n    '''\n    count = 0\n    for i in tuple_list:\n        if i == item:\n            count = count + 1\n    return count\ndef reverse_tuple(tuple_list):\n    '''\n    Write a function to return the tuple list with items reversed.\n    '''\n    reverse_list = []\n    for i in tuple_list:\n        reverse_list.insert(0, i)\n    return tuple(reverse_list)\ndef common_items(tuple_list1, tuple_list2):\n    '''\n    Write a function to return a tuple containing common items in the given two tuples.\n    '''\n    new_list = []\n    for i in tuple_list1:\n        if i in tuple_list2:\n            new_list.append(i)\n    return tuple(new_list)\ndef unpack_tuple(tuple_list):\n    '''\n    Write a function to unpack a tuple in a variables.\n    '''\n    if type(tuple_list) == tuple:\n        return tuple_list[0]\n    else:\n        return tuple_list\ndef convert_string_to_tuple(string_list):\n    '''\n    Write a function to convert a string to a tuple.\n    '''\n    string_list = string_list.split(',')\n    new_tuple = []\n    for i in string_list:\n        new_tuple.append(int(i))\n    return tuple(new_tuple)\ndef convert_list_to_tuple(list_list):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_tuple = tuple(list_list)\n    return new_tuple\ndef convert_tuple_to_list(tuple_list):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tuple_list)\ndef sort_list_of_tuples(list_of_tuples):\n    '''\n    Write a function to sort a list of tuples by its second item.\n    '''\n    list_of_tuples = list(list_of_tuples)\n    for i in range(0, len(list_of_tuples)):\n        for j in range(0, len(list_of_tuples)):\n            if list_of_tuples[i][1] < list_of_tuples[j][1]:\n                list_of_tuples[i], list_of_tuples[j] = list_of_tuples[j], list_of_tuples[i]\n    return list_of_tuples\ndef max_tuple_item(tuple_list):\n    '''\n    Write a function to return the maximum item in the tuple list.\n    '''\n    max_item = tuple_list[0]\n    for i in tuple_list:\n        if i > max_item:\n            max_item = i\n    return max_item\ndef max_tuple(tuple_list):\n    '''\n    Write a function to return the maximum tuple from the given tuple list.\n    '''\n    max_item = tuple_list[0]\n    for i in tuple_list:\n        if tuple_size(i) > tuple_size(max_item):\n            max_item = i\n    return max_item\ndef join_tuples(tuple_list):\n    '''\n    Write a function to join tuples into one tuple.\n    '''\n    return tuple(tuple_list)\ndef min_tuple_item(tuple_list):\n    '''\n    Write a function to return the minimum item in the tuple list.\n    '''\n    min_item = tuple_list[0]\n    for i in tuple_list:\n        if i < min_item:\n            min_item = i\n    return min_item\ndef min_tuple(tuple_list):\n    '''\n    Write a function to return the minimum tuple from the given tuple list.\n    '''\n    min_item = tuple_list[0]\n    for i in tuple_list:\n        if tuple_size(i) < tuple_size(min_item):\n            min_item = i\n    return min_item\ndef is_subset(list1, list2):\n    '''\n    Write a function to return true if first list is subset of second list.\n    '''\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\ndef check_element_is_subset(list1, list2):\n    '''\n    Write a function to return true if an element of the first list is a subset of the second list.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\ndef compare_lists(list1, list2):\n    '''\n    Write a function to compare two lists.\n    '''\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\ndef intersection_of_lists(list1, list2):\n    '''\n    Write a function to return the intersection of two lists.\n    '''\n    new_list = []\n    for i in list1:\n        if i in list2:\n            new_list.append(i)\n    return new_list\ndef is_disjoint(list1, list2):\n    '''\n    Write a function to return true if two lists are disjoint.\n    '''\n    for i in list1:\n        if i in list2:\n            return False\n    return True\ndef is_equal(list1, list2):\n    '''\n    Write a function to return true if two lists are equal.\n    '''\n    if len(list1) == len(list2):\n        for i in list1:\n            if i in list2:\n                pass\n            else:\n                return False\n        return True\n    else:\n        return False\ndef get_first_item(tuple_list):\n    '''\n    Write a function to return the first item in a tuple.\n    '''\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    size = 0\n    for element in list_list:\n        size += sys.getsizeof(element)\n    return size\ndef set_size(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    size = 0\n    for element in set_list:\n        size += sys.getsizeof(element)\n    return size\ndef dict_size(dict_list):\n    '''\n    Write a function to find the size in bytes of the given dictionary.\n    '''\n    size = 0\n    for key in dict_list.keys():\n        size += sys.getsizeof(dict_list[key])\n    return size\ndef int_size(num):\n    '''\n    Write a function to find the size in bytes of the given integer.\n    '''\n    return sys.getsizeof(num)\ndef float_size(num):\n    '''\n    Write a function to find the size in bytes of the given float.\n    '''\n    return sys.getsizeof(num)\ndef str_size(str):\n    '''\n    Write a function to find the size in bytes of the given string.\n    '''\n    return sys.getsizeof(str)\ndef list_to_tuple(list_list):\n    '''\n    Write a function to convert the given list into a tuple and return it.\n    '''\n    return tuple(list_list)\ndef list_to_set(list_list):\n    '''\n    Write a function to convert the given list into a set and return it.\n    '''\n    return set(list_list)\ndef list_to_dict(list_list):\n    '''\n    Write a function to convert the given list into a dictionary and return it.\n    '''\n    return dict(zip(list_list[::2], list_list[1::2]))\ndef list_to_int(list_list):\n    '''\n    Write a function to convert the given list to an integer and return it.\n    '''\n    return int(list_list[0])\ndef list_to_float(list_list):\n    '''\n    Write a function to convert the given list to a float and return it.\n    '''\n    return float(list_list[0])\ndef list_to_str(list_list):\n    '''\n    Write a function to convert the given list to a string and return it.\n    '''\n    return str(list_list[0])\ndef tuple_to_list(tuple_list):\n    '''\n    Write a function to convert the given tuple into a list and return it.\n    '''\n    return list(tuple_list)\ndef tuple_to_set(tuple_list):\n    '''\n    Write a function to convert the given tuple into a set and return it.\n    '''\n    return set(tuple_list)\ndef tuple_to_dict(tuple_list):\n    '''\n    Write a function to convert the given tuple into a dictionary and return it.\n    '''\n    return dict(zip(tuple_list[::2], tuple_list[1::2]))\ndef tuple_to_int(tuple_list):\n    '''\n    Write a function to convert the given tuple to an integer and return it.\n    '''\n    return int(tuple_list[0])\ndef tuple_to_float(tuple_list):\n    '''\n    Write a function to convert the given tuple to a float and return it.\n    '''\n    return float(tuple_list[0])\ndef tuple_to_str(tuple_list):\n    '''\n    Write a function to convert the given tuple to a string and return it.\n    '''\n    return str(tuple_list[0])\ndef set_to_list(set_list):\n    '''\n    Write a function to convert the given set into a list and return it.\n    '''\n    return list(set_list)\ndef set_to_tuple(set_list):\n    '''\n    Write a function to convert the given set into a tuple and return it.\n    '''\n    return tuple(set_list)\ndef set_to_set(set_list):\n    '''\n    Write a function to convert the given set into a set and return it.\n    '''\n    return set(set_list)\ndef set_to_dict(set_list):\n    '''\n    Write a function to convert the given set into a dictionary and return it.\n    '''\n    return dict(zip(set_list[::2], set_list[1::2]))\ndef set_to_int(set_list):\n    '''\n    Write a function to convert the given set to an integer and return it.\n    '''\n    return int(set_list[0])\ndef set_to_float(set_list):\n    '''\n    Write a function to convert the given set to a float and return it.\n    '''\n    return float(set_list[0])\ndef set_to_str(set_list):\n    '''\n    Write a function to convert the given set to a string and return it.\n    '''\n    return str(set_list[0])\ndef dict_to_list(dict_list):\n    '''\n    Write a function to convert the given dictionary into a list and return it.\n    '''\n    return list(dict_list.values())\ndef dict_to_tuple(dict_list):\n    '''\n    Write a function to convert the given dictionary into a tuple and return it.\n    '''\n    return tuple(dict_list.values())\ndef dict_to_set(dict_list):\n    '''\n    Write a function to convert the given dictionary into a set and return it.\n    '''\n    return set(dict_list.values())\ndef dict_to_dict(dict_list):\n    '''\n    Write a function to convert the given dictionary into a dictionary and return it.\n    '''\n    return dict(dict_list)\ndef dict_to_int(dict_list):\n    '''\n    Write a function to convert the given dictionary to an integer and return it.\n    '''\n    return int(dict_list[0])\ndef dict_to_float(dict_list):\n    '''\n    Write a function to convert the given dictionary to a float and return it.\n    '''\n    return float(dict_list[0])\ndef dict_to_str(dict_list):\n    '''\n    Write a function to convert the given dictionary to a string and return it.\n    '''\n    return str(dict_list[0])\ndef int_to_list(num):\n    '''\n    Write a function to convert the given integer into a list and return it.\n    '''\n    return [num]\ndef int_to_tuple(num):\n    '''\n    Write a function to convert the given integer into a tuple and return it.\n    '''\n    return tuple([num])\ndef int_to_set(num):\n    '''\n    Write a function to convert the given integer into a set and return it.\n    '''\n    return set([num])\ndef int_to_dict(num):\n    '''\n    Write a function to convert the given integer into a dictionary and return it.\n    '''\n    return {num: num}\ndef int_to_int(num):\n    '''\n    Write a function to convert the given integer into an integer and return it.\n    '''\n    return num\ndef int_to_float(num):\n    '''\n    Write a function to convert the given integer into a float and return it.\n    '''\n    return float(num)\ndef int_to_str(num):\n    '''\n    Write a function to convert the given integer into a string and return it.\n    '''\n    return str(num)\ndef float_to_list(num):\n    '''\n    Write a function to convert the given float into a list and return it.\n    '''\n    return [num]\ndef float_to_tuple(num):\n    '''\n    Write a function to convert the given float into a tuple and return it.\n    '''"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    bytes_size = 0\n    for each_tuple in tuple_list:\n        bytes_size += sys.getsizeof(each_tuple)\n    return bytes_size\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = 0\n    for t in tuple_list:\n        size_in_bytes += sys.getsizeof(t)\n    return size_in_bytes\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for var in tuple_list:\n        size += sys.getsizeof(var)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list=tuple_list\n    tuple_size=sys.getsizeof(tuple_list)\n    return tuple_size\ndef tuple_members(tuple_list):\n    '''\n    Write a function to return the count of the members in the given tuple\n    '''\n    tuple_list=tuple_list\n    tuple_count=len(tuple_list)\n    return tuple_count\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse the order of the tuples\n    '''\n    tuple_list=tuple_list\n    return tuple_list[::-1]\ndef list_reverse(list_list):\n    '''\n    Write a function to reverse the order of the lists\n    '''\n    list_list=list_list\n    return list_list[::-1]\ndef list_append(list_list):\n    '''\n    Write a function to append a list to the second list and return the second list\n    '''\n    list_list=list_list\n    list_append=list_list.append(list_list)\n    return list_list\ndef tuple_append(tuple_list):\n    '''\n    Write a function to append a tuple to the second tuple and return the second tuple\n    '''\n    tuple_list=tuple_list\n    tuple_append=tuple_list.append(tuple_list)\n    return tuple_list\ndef tuple_count(tuple_list,value):\n    '''\n    Write a function to count the number of occurences of the given value in the tuple\n    '''\n    tuple_list=tuple_list\n    tuple_count=tuple_list.count(value)\n    return tuple_count\ndef list_count(list_list,value):\n    '''\n    Write a function to count the number of occurences of the given value in the list\n    '''\n    list_list=list_list\n    list_count=list_list.count(value)\n    return list_count\ndef tuple_index(tuple_list,value):\n    '''\n    Write a function to find the index of the given value in the tuple\n    '''\n    tuple_list=tuple_list\n    tuple_index=tuple_list.index(value)\n    return tuple_index\ndef list_index(list_list,value):\n    '''\n    Write a function to find the index of the given value in the list\n    '''\n    list_list=list_list\n    list_index=list_list.index(value)\n    return list_index\ndef tuple_pop(tuple_list):\n    '''\n    Write a function to remove the last element in the tuple\n    '''\n    tuple_list=tuple_list\n    tuple_pop=tuple_list.pop()\n    return tuple_pop\ndef list_pop(list_list):\n    '''\n    Write a function to remove the last element in the list\n    '''\n    list_list=list_list\n    list_pop=list_list.pop()\n    return list_pop\ndef tuple_sort(tuple_list):\n    '''\n    Write a function to sort the tuple\n    '''\n    tuple_list=tuple_list\n    tuple_sort=sorted(tuple_list)\n    return tuple_sort\ndef list_sort(list_list):\n    '''\n    Write a function to sort the list\n    '''\n    list_list=list_list\n    list_sort=sorted(list_list)\n    return list_sort\ndef tuple_reverse_sort(tuple_list):\n    '''\n    Write a function to reverse sort the tuple\n    '''\n    tuple_list=tuple_list\n    tuple_reverse_sort=sorted(tuple_list,reverse=True)\n    return tuple_reverse_sort\ndef list_reverse_sort(list_list):\n    '''\n    Write a function to reverse sort the list\n    '''\n    list_list=list_list\n    list_reverse_sort=sorted(list_list,reverse=True)\n    return list_reverse_sort\ndef remove_duplicates(tuple_list):\n    '''\n    Write a function to remove duplicates in a tuple list\n    '''\n    tuple_list=tuple_list\n    tuple_list=list(set(tuple_list))\n    return tuple_list\ndef remove_duplicates_list(list_list):\n    '''\n    Write a function to remove duplicates in a list list\n    '''\n    list_list=list_list\n    list_list=list(set(list_list))\n    return list_list\ndef remove_element(tuple_list,value):\n    '''\n    Write a function to remove the given value from the tuple list\n    '''\n    tuple_list=tuple_list\n    tuple_list=[i for i in tuple_list if i!= value]\n    return tuple_list\ndef remove_element_list(list_list,value):\n    '''\n    Write a function to remove the given value from the list list\n    '''\n    list_list=list_list\n    list_list=[i for i in list_list if i!= value]\n    return list_list\ndef insert_element(tuple_list,index,value):\n    '''\n    Write a function to insert a value to the tuple list at the given index\n    '''\n    tuple_list=tuple_list\n    tuple_list=tuple_list[:index]+(value,)+tuple_list[index:]\n    return tuple_list\ndef insert_element_list(list_list,index,value):\n    '''\n    Write a function to insert a value to the list list at the given index\n    '''\n    list_list=list_list\n    list_list=list_list[:index]+(value,)+list_list[index:]\n    return list_list\ndef list_add(list_list):\n    '''\n    Write a function to add two list together\n    '''\n    list_list1=list_list\n    list_list2=list_list\n    list_list=list_list1+list_list2\n    return list_list\ndef list_add_tuples(tuple_list1,tuple_list2):\n    '''\n    Write a function to add two tuple together\n    '''\n    tuple_list1=tuple_list1\n    tuple_list2=tuple_list2\n    tuple_list=tuple_list1+tuple_list2\n    return tuple_list\ndef list_subtract(list_list1,list_list2):\n    '''\n    Write a function to subtract two list together\n    '''\n    list_list1=list_list1\n    list_list2=list_list2\n    list_list=list_list1-list_list2\n    return list_list\ndef list_multiply(list_list1,list_list2):\n    '''\n    Write a function to multiply two list together\n    '''\n    list_list1=list_list1\n    list_list2=list_list2\n    list_list=list_list1*list_list2\n    return list_list\ndef tuple_multiply(tuple_list1,tuple_list2):\n    '''\n    Write a function to multiply two tuple together\n    '''\n    tuple_list1=tuple_list1\n    tuple_list2=tuple_list2\n    tuple_list=tuple_list1*tuple_list2\n    return tuple_list\ndef list_division(list_list1,list_list2):\n    '''\n    Write a function to divide two list together\n    '''\n    list_list1=list_list1\n    list_list2=list_list2\n    list_list=list_list1/list_list2\n    return list_list\ndef tuple_division(tuple_list1,tuple_list2):\n    '''\n    Write a function to divide two tuple together\n    '''\n    tuple_list1=tuple_list1\n    tuple_list2=tuple_list2\n    tuple_list=tuple_list1/tuple_list2\n    return tuple_list\ndef list_index_tuple(list_list,valu"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # In this function, we have to first understand the size of tuple. So first we have to create a new tuple having only one element.\n    # We can know the size of a tuple by using len() function.\n    # A tuple is of type <class 'tuple'>\n    # len() gives the size of tuple.\n    # len(tuple_list) gives the size of tuple.\n    # So we can apply len() function on tuple.\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # O(log(min(m,n))) time complexity\n    # O(1) space complexity\n    while True:\n        idx_m = len(arr1)-1\n        idx_n = len(arr2)-1\n        if idx_m < 0:\n            return arr2[k]\n        if idx_n < 0:\n            return arr1[k]\n        idx_k = k-1\n        if k == 0:\n            return min(arr1[0], arr2[0])\n        if k == idx_m+idx_n:\n            if idx_m == idx_n:\n                return max(arr1[idx_m], arr2[idx_n])\n            elif idx_m > idx_n:\n                return arr1[idx_n]\n            else:\n                return arr2[idx_m]\n        if idx_m == idx_k:\n            return arr1[idx_k]\n        elif idx_n == idx_k:\n            return arr2[idx_k]\n        elif idx_m < idx_k:\n            return find_kth(arr2[:idx_n], arr1[:idx_m], k)\n        elif idx_n < idx_k:\n            return find_kth(arr1[:idx_m], arr2[:idx_n], k)\n        else:\n            return arr1[idx_m]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    if arr1[0] > arr2[0]:\n        print(arr1[0])\n    elif arr1[0] < arr2[0]:\n        print(arr2[0])\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[k-1] <= arr2[k-1]:\n        return arr1[k-1]\n    else:\n        return arr2[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = 0\n    j = 0\n    cnt = 0\n    while(cnt < k):\n        if arr1[i] <= arr2[j]:\n            i += 1\n            cnt += 1\n        else:\n            j += 1\n            cnt += 1\n    return arr1[i-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def _find_kth(arr1, arr2, k):\n        if not arr1:\n            return arr2[k-1]\n        if not arr2:\n            return arr1[k-1]\n        \n        len1, len2 = len(arr1), len(arr2)\n        if k <= len1 and k <= len2:\n            if arr1[k-1] <= arr2[k-1]:\n                return _find_kth(arr1[k:], arr2, k)\n            else:\n                return _find_kth(arr1, arr2[k:], k)\n        elif len1 < k <= len2:\n            return _find_kth(arr1, arr2[k:], k-len1)\n        elif len1 > len2:\n            return _find_kth(arr1[k:], arr2, k-len2)\n    \n    return _find_kth(arr1, arr2, k)"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = 0\n    j = 0\n    while(i < n1 and j < n2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr2[j] < arr1[i]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    if k <= n1 + n2 - i - j:\n        return arr1[i + k - 1]\n    else:\n        return arr2[j + k - n1 - i - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1:\n        return arr2[k - 1]\n    if not arr2:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = min(k // 2, len(arr1))\n    mid2 = min(k - mid1, len(arr2))\n    if arr1[mid1 - 1] < arr2[mid2 - 1]:\n        return find_kth(arr1[mid1:], arr2, k - mid1)\n    else:\n        return find_kth(arr1, arr2[mid2:], k - mid2)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while(i < len(arr1) and j < len(arr2)):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        \n    if i == len(arr1):\n        return arr2[j + k - 1]\n    elif j == len(arr2):\n        return arr1[i + k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > (len(arr1) + len(arr2)):\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    l = 0\n    r = m+n-1\n    while l<=r:\n        m1 = (l+r)//2\n        m2 = m1+n-1\n        l1 = arr1[m1] if m1<m else float('-inf')\n        l2 = arr2[m2] if m2<n else float('-inf')\n        r1 = arr1[m1+1] if m1+1<m else float('inf')\n        r2 = arr2[m2+1] if m2+1<n else float('inf')\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        print(\"{} is an Armstrong Number\".format(number))\n    else:\n        print(\"{} is not an Armstrong Number\".format(number))\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        rem = temp % 10\n        sum += rem ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_to_str = str(number)\n    length = len(number_to_str)\n    sum_of_power = 0\n    for i in number_to_str:\n        sum_of_power += int(i)**length\n    if sum_of_power == number:\n        print(f\"The number {number} is an armstrong number.\")\n    else:\n        print(f\"The number {number} is not an armstrong number.\")\n    return\n    \narmstrong_number(153)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Find the number of digits of a number\n    # a number can have upto 10^n digits in it.\n    # so, n = log10(number)\n    n = len(str(number))\n    # Check for all digits in the number\n    # n! = number * n * (n-1) * (n-2) *...... * 1\n    # number = n!/(n! - number)\n    # = n!/(n! - n^n)\n    # = n!/(n(n-1))\n    # = n!\n    # We can use n! for checking the number\n    num = number\n    sum = 0\n    while num > 0:\n        rem = num % 10\n        sum += pow(rem, n)\n        num = num//10\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    p=0\n    rem = number\n    while rem > 0:\n        rem = rem // 10\n        p+=1\n    sum = 0\n    temp = number\n    while temp > 0:\n        rem = temp % 10\n        sum+= (rem ** p)\n        temp=temp//10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return sum([int(i) ** len(str(number)) for i in str(number)]) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_cubes = 0\n    temp_number = number\n    while temp_number > 0:\n        remainder = temp_number % 10\n        sum_of_cubes += remainder ** 3\n        temp_number = temp_number // 10\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_list = [int(i) for i in str(number)]\n    power = len(num_list)\n    sum = 0\n    for i in num_list:\n        sum += i ** power\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    for i in str(number):\n        sum += int(i)**3\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number + 1):\n        sum += i\n    return f\"Sum of first {number} natural numbers is {sum} and average is {sum / number}\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    average_n = 0\n    for i in range(1,number+1):\n        sum_n += i\n        average_n = sum_n/i\n    return(sum_n, average_n)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 0:\n        return None\n    elif number == 0:\n        return 0\n    else:\n        sum = (number * (number + 1)) / 2\n        average = sum / number\n        return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum += i\n        average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    print(f\"Sum is {sum}\")\n    print(f\"Average is {average}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num = number\n    sum = 0\n    avg = 0\n    for i in range(num):\n        sum = sum + i\n        avg = sum / num\n    print(sum)\n    print(avg)\nsum_average(10)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum/number\n    return sum, avg\n    \n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #Start writing your code here\n    if(n%2 == 0):\n        return True\n    else:\n        return False\n    #End writing of your code\n    \n    '''\n    Expected Output:\n    >>> is_Even(2)\n    True\n    >>> is_Even(5)\n    False\n    '''\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    \n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        print('Given number is even')\n    else : \n        print('Given number is odd')\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0, len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return''\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return False\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    dict = {}\n    \n    for i in str1:\n        if i in dict:\n            return i\n        else:\n            dict[i] = 1\n    \n    return \"No repeated character.\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) > 1:\n        repeated_char = list(set(list(str1)))\n        repeated_char.sort()\n        if repeated_char[0] == repeated_char[1]:\n            return repeated_char[0]\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = \"\".join(set(str1))\n    for i in s:\n        if str1.count(i)>1:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    char_dict = dict()\n    for ch in str1:\n        if ch in char_dict:\n            return ch\n        char_dict[ch] = 0\n    return '_'\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str_dict = {}\n    for ch in str1:\n        if ch not in str_dict.keys():\n            str_dict[ch] = 1\n        else:\n            str_dict[ch] += 1\n    for key,val in str_dict.items():\n        if val > 1:\n            return key\n    return 'No First Repeated Char'\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    letters = {}\n    for letter in str1:\n        if letter in letters:\n            return letter\n        letters[letter] = 1\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        char_dict[char] = char_dict.get(char,0) + 1\n    for char in str1:\n        if char_dict[char] > 1:\n            return char\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        s = sum(map(int, str(i)))\n        if s <= n:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        n_str = str(i)\n        if i == sum(int(d)**5 for d in n_str):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    ludic = [2, 3]\n    for i in range(4, n+1):\n        ludic.append(ludic[i-1] + 2*(i-1))\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    elif n < 1:\n        return []\n    else:\n        ludic = [1, 2, 3]\n        for i in range(4, n + 1):\n            if i % 2 == 0:\n                ludic.append(2 * ludic[i - 1])\n            else:\n                ludic.append(3 * ludic[i - 1])\n        return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def get_digits(n):\n        return [int(i) for i in str(n)]\n    def get_ludic_helper(n, start, end):\n        if start == end:\n            if sum(get_digits(start)) == sum(get_digits(n)):\n                return True\n            else:\n                return False\n        for i in range(start, end):\n            if get_ludic_helper(n, start, i) == True and get_ludic_helper(n, i+1, end) == True:\n                return True\n        return False\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for x in range(0, n):\n        if is_ludic(x):\n            ludic.append(x)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    i = 1\n    ludic = []\n    while i < n:\n        j = 2\n        ludic_ = [i]\n        while j < i:\n            if i % j == 0:\n                ludic_ = []\n                break\n            else:\n                j += 1\n        if ludic_:\n            ludic.extend(ludic_)\n        i += 1\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    assert isinstance(n, int) and n >= 0\n    if n == 0:\n        return [0]\n    ludic_list = [0, 1]\n    while ludic_list[-1] < n:\n        ludic_list.append(ludic_list[-1] + ludic_list[-2])\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(range(1, n + 1))\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        s = []\n        for j in range(1, i+1):\n            if i%j == 0:\n                s.append(j)\n        if sum(s) == i:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split(\" \")\n    s_list.reverse()\n    return \" \".join(s_list)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print(s.split())\n    print(s.split(' '))\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # first we need to figure out where the spaces are. \n    # i'll start by spliting the string into a list of words:\n    words = s.split(\" \")\n    # now i need to reverse that list\n    words = words[::-1]\n    # now I need to rejoin them into a string\n    s = \" \".join(words)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split string into list of words\n    list_of_words = s.split(\" \")\n    # Reverse list of words\n    list_of_words = list_of_words[::-1]\n    # Return string of words joined together\n    return \" \".join(list_of_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n    s = s.split()\n    return \" \".join(reversed(s))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split() returns list of all words in a string, reverse the list of words and join the list with a space between each word\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    splitted = s.split(' ')\n    splitted.reverse()\n    return''.join(splitted)\n    \ns = 'a lot of space       between    words'\nprint(reverse_words(s))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = ''.join(reversed(s))\n    s = s.split()\n    s =''.join(reversed(s))\n    return s\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                print(i, \"times\", num//i, \"is\", num)\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    flag = 0\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                flag = 1\n                break\n    if flag == 0:\n        print(\"%d is a prime number\" % num)\n    else:\n        print(\"%d is not a prime number\" % num)\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return num > 1 and all(num % i for i in range(2, num))\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime = False\n    if num > 1:\n        for i in range(2,num):\n            if(num%i) == 0:\n                print(num, \"is not a prime number\")\n                prime = False\n                break\n            else:\n                prime = True\n        if(prime == True):\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n    return\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num>=2:\n        for i in range(2,int(math.sqrt(num))+1):\n            if num%i==0:\n                return False\n        return True\n    else:\n        return False\n    \ndef main():\n    '''\n    Take input for the num\n    '''\n    num = int(input('Enter an integer: '))\n    if prime_num(num):\n        print('Yes')\n    else:\n        print('No')\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                print(i, \"times\", num//i, \"is\", num)\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n    \nprime_num(5)\nprime_num(6)\nprime_num(7)\nprime_num(8)\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                print(i, \"times\", num//i, \"is\", num)\n                break\n        else:\n            print(num, \"is a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    import math\n    \n    if num < 1:\n        return \"Not a prime number\"\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree * math.pi) / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = float(degree)\n    radian = (degree / 180) * math.pi\n    return(radian)\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    radian = float(radian)\n    degree = radian / (math.pi / 180)\n    return(degree)\ndef find_radius(diameter):\n    '''\n    Write a function to find the radius of a circle from its diameter.\n    '''\n    diameter = float(diameter)\n    radius = diameter / 2\n    return(radius)\ndef find_diameter(radius):\n    '''\n    Write a function to find the diameter of a circle from its radius.\n    '''\n    radius = float(radius)\n    diameter = radius * 2\n    return(diameter)\ndef find_area(radius):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    radius = float(radius)\n    area = math.pi * math.pow(radius, 2)\n    return(area)\ndef find_circumference(radius):\n    '''\n    Write a function to find the circumference of a circle from its radius.\n    '''\n    radius = float(radius)\n    circumference = 2 * math.pi * radius\n    return(circumference)\ndef find_nth_root(value, n):\n    '''\n    Write a function to find the nth root of a number.\n    '''\n    value = float(value)\n    n = float(n)\n    root = math.pow(value, 1 / n)\n    return(root)\ndef find_hypotenuse(leg_one, leg_two):\n    '''\n    Write a function to find the hypotenuse of a right triangle from\n    the legs of the triangle.\n    '''\n    leg_one = float(leg_one)\n    leg_two = float(leg_two)\n    hypotenuse = math.sqrt(math.pow(leg_one, 2) + math.pow(leg_two, 2))\n    return(hypotenuse)\ndef find_midpoint(x_coordinate, y_coordinate):\n    '''\n    Write a function to find the midpoint of a line.\n    '''\n    x_coordinate = float(x_coordinate)\n    y_coordinate = float(y_coordinate)\n    midpoint = (x_coordinate + y_coordinate) / 2\n    return(midpoint)\ndef find_x_coordinate(y_coordinate, midpoint):\n    '''\n    Write a function to find the x coordinate of a point on a line.\n    '''\n    y_coordinate = float(y_coordinate)\n    midpoint = float(midpoint)\n    x_coordinate = midpoint - y_coordinate\n    return(x_coordinate)\ndef find_y_coordinate(x_coordinate, midpoint):\n    '''\n    Write a function to find the y coordinate of a point on a line.\n    '''\n    x_coordinate = float(x_coordinate)\n    midpoint = float(midpoint)\n    y_coordinate = midpoint - x_coordinate\n    return(y_coordinate)\ndef find_side_length(hypotenuse, angle):\n    '''\n    Write a function to find the length of a triangle's hypotenuse.\n    '''\n    hypotenuse = float(hypotenuse)\n    angle = float(angle)\n    side_length = hypotenuse * math.cos(angle)\n    return(side_length)\ndef find_triangle_area(leg_one, leg_two, angle):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    leg_one = float(leg_one)\n    leg_two = float(leg_two)\n    angle = float(angle)\n    triangle_area = 1 / 2 * leg_one * leg_two * math.sin(angle)\n    return(triangle_area)\ndef find_triangle_perimeter(leg_one, leg_two):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    leg_one = float(leg_one)\n    leg_two = float(leg_two)\n    triangle_perimeter = leg_one + leg_two + math.sqrt(leg_one * leg_one + leg_two * leg_two)\n    return(triangle_perimeter)\ndef find_area_of_rectangle(length, width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    length = float(length)\n    width = float(width)\n    rectangle_area = length * width\n    return(rectangle_area)\ndef find_perimeter_of_rectangle(length, width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    length = float(length)\n    width = float(width)\n    rectangle_perimeter = (2 * length) + (2 * width)\n    return(rectangle_perimeter)\ndef find_area_of_square(side_length):\n    '''\n    Write a function to find the area of a square.\n    '''\n    side_length = float(side_length)\n    square_area = side_length * side_length\n    return(square_area)\ndef find_perimeter_of_square(side_length):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    side_length = float(side_length)\n    square_perimeter = side_length * 4\n    return(square_perimeter)\ndef find_area_of_circle(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    radius = float(radius)\n    circle_area = math.pi * math.pow(radius, 2)\n    return(circle_area)\ndef find_circumference_of_circle(radius):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    radius = float(radius)\n    circumference_of_circle = 2 * math.pi * radius\n    return(circumference_of_circle)\ndef find_volume_of_cylinder(radius, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    radius = float(radius)\n    height = float(height)\n    volume_of_cylinder = math.pi * math.pow(radius, 2) * height\n    return(volume_of_cylinder)\ndef find_area_of_cone(radius, height):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    radius = float(radius)\n    height = float(height)\n    area_of_cone = (1 / 3) * math.pi * math.pow(radius, 2) * height\n    return(area_of_cone)\ndef find_volume_of_cone(radius, height):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius = float(radius)\n    height = float(height)\n    volume_of_cone = 1 / 3 * math.pi * math.pow(radius, 2) * height\n    return(volume_of_cone)\ndef find_area_of_sphere(radius):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    radius = float(radius)\n    area_of_sphere = 4 * math.pi * math.pow(radius, 2)\n    return(area_of_sphere)\ndef find_circumference_of_sphere(radius):\n    '''\n    Write a function to find the circumference of a sphere.\n    '''\n    radius = float(radius)\n    circumference_of_sphere = 2 * math.pi * radius\n    return(circumference_of_sphere)\ndef find_volume_of_sphere(radius):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    radius = float(radius)\n    volume_of_sphere = (4 * math.pi * math.pow(radius, 3)) / 3\n    return(volume_of_sphere)"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    return degree * math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return(math.pi*degree/180)\ndef degrees_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return(180*radian/math.pi)\ndef km_miles(km):\n    '''\n    Write a function to convert kilometers to miles.\n    '''\n    return(km*0.62137)\ndef km_m(miles):\n    '''\n    Write a function to convert miles to kilometers.\n    '''\n    return(miles*1.60934)\ndef km_nm(nm):\n    '''\n    Write a function to convert kilometers to nautical miles.\n    '''\n    return(nm/0.8684)\ndef km_nm1(nm1):\n    '''\n    Write a function to convert kilometers to nautical miles.\n    '''\n    return(nm1*0.8684)\ndef km_nm2(nm2):\n    '''\n    Write a function to convert kilometers to nautical miles.\n    '''\n    return(nm2/0.8684)\ndef nm_km(km):\n    '''\n    Write a function to convert nautical miles to kilometers.\n    '''\n    return(km*0.8684)\ndef nm_km1(km1):\n    '''\n    Write a function to convert nautical miles to kilometers.\n    '''\n    return(km1*0.8684)\ndef m_km(km):\n    '''\n    Write a function to convert meters to kilometers.\n    '''\n    return(km/1000)\ndef m_km1(km1):\n    '''\n    Write a function to convert meters to kilometers.\n    '''\n    return(km1/1000)\ndef m_km2(km2):\n    '''\n    Write a function to convert meters to kilometers.\n    '''\n    return(km2/1000)\ndef m_nm(nm):\n    '''\n    Write a function to convert meters to nautical miles.\n    '''\n    return(nm/1852)\ndef m_nm1(nm1):\n    '''\n    Write a function to convert meters to nautical miles.\n    '''\n    return(nm1/1852)\ndef m_nm2(nm2):\n    '''\n    Write a function to convert meters to nautical miles.\n    '''\n    return(nm2/1852)\ndef m_miles(miles):\n    '''\n    Write a function to convert meters to miles.\n    '''\n    return(miles/1609.344)\ndef m_m(miles):\n    '''\n    Write a function to convert miles to meters.\n    '''\n    return(miles*1609.344)\ndef m_nm(nm):\n    '''\n    Write a function to convert meters to nautical miles.\n    '''\n    return(nm/1852)\ndef m_nm1(nm1):\n    '''\n    Write a function to convert meters to nautical miles.\n    '''\n    return(nm1/1852)\ndef m_nm2(nm2):\n    '''\n    Write a function to convert meters to nautical miles.\n    '''\n    return(nm2/1852)\ndef m_feet(feet):\n    '''\n    Write a function to convert meters to feet.\n    '''\n    return(feet/0.3048)\ndef m_feet1(feet1):\n    '''\n    Write a function to convert meters to feet.\n    '''\n    return(feet1/0.3048)\ndef m_feet2(feet2):\n    '''\n    Write a function to convert meters to feet.\n    '''\n    return(feet2/0.3048)\ndef m_feet3(feet3):\n    '''\n    Write a function to convert meters to feet.\n    '''\n    return(feet3/0.3048)\ndef m_inch(inch):\n    '''\n    Write a function to convert meters to feet.\n    '''\n    return(inch/0.0254)\ndef m_inch1(inch1):\n    '''\n    Write a function to convert meters to feet.\n    '''\n    return(inch1/0.0254)\ndef m_inch2(inch2):\n    '''\n    Write a function to convert meters to feet.\n    '''\n    return(inch2/0.0254)\ndef m_inch3(inch3):\n    '''\n    Write a function to convert meters to feet.\n    '''\n    return(inch3/0.0254)\ndef m_yards(yards):\n    '''\n    Write a function to convert meters to yards.\n    '''\n    return(yards/1.09361)\ndef m_yards1(yards1):\n    '''\n    Write a function to convert meters to yards.\n    '''\n    return(yards1/1.09361)\ndef m_yards2(yards2):\n    '''\n    Write a function to convert meters to yards.\n    '''\n    return(yards2/1.09361)\ndef m_yards3(yards3):\n    '''\n    Write a function to convert meters to yards.\n    '''\n    return(yards3/1.09361)\ndef mph_mps(mph):\n    '''\n    Write a function to convert miles per hour to meters per second.\n    '''\n    return(mph*0.44704)\ndef mph_mps1(mph1):\n    '''\n    Write a function to convert miles per hour to meters per second.\n    '''\n    return(mph1*0.44704)\ndef mph_mps2(mph2):\n    '''\n    Write a function to convert miles per hour to meters per second.\n    '''\n    return(mph2*0.44704)\ndef mph_mps3(mph3):\n    '''\n    Write a function to convert miles per hour to meters per second.\n    '''\n    return(mph3*0.44704)\ndef mph_knots(mph):\n    '''\n    Write a function to convert miles per hour to knots.\n    '''\n    return(mph*0.868976)\ndef mph_knots1(mph1):\n    '''\n    Write a function to convert miles per hour to knots.\n    '''\n    return(mph1*0.868976)\ndef mph_knots2(mph2):\n    '''\n    Write a function to convert miles per hour to knots.\n    '''\n    return(mph2*0.868976)\ndef mph_knots3(mph3):\n    '''\n    Write a function to convert miles per hour to knots.\n    '''\n    return(mph3*0.868976)\ndef mps_mph(mph):\n    '''\n    Write a function to convert meters per second to miles per hour.\n    '''\n    return(mph*2.236936)\ndef mps_mph1(mph1):\n    '''\n    Write a function to convert meters per second to miles per hour.\n    '''\n    return(mph1*2.236936)\ndef mps_mph2(mph2):\n    '''\n    Write a function to convert meters per second to miles per hour.\n    '''\n    return(mph2*2.236936)\ndef mps_mph3(mph3):\n    '''\n    Write a function to convert meters per second to miles per hour.\n    '''\n    return(mph3*2.236936)\ndef knots_mph(mph):\n    '''\n    Write a function to convert knots to miles per hour.\n    '''\n    return(mph*0.5144)\ndef knots_mph1(mph1):\n    '''\n    Write a function to convert knots to miles per hour.\n    '''\n    return(mph1*0.5144)\ndef knots_mph2(mph2):\n    '''\n    Write a function to convert knots to miles per hour.\n    '''\n    return(mph2*0.5144)\ndef knots_mph3(mph3):\n    '''\n    Write a function to convert knots to miles per hour.\n    '''\n    return(mph3*0.5144)\ndef knots_kph(kph):\n    '''\n    Write a function to convert knots to kilometers per hour.\n    '''\n    return(kph*1.852"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n    \n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef sin(radian):\n    '''\n    Write a function to compute sine of an angle in radians.\n    '''\n    return math.sin(radian)\ndef cos(radian):\n    '''\n    Write a function to compute cosine of an angle in radians.\n    '''\n    return math.cos(radian)\ndef tan(radian):\n    '''\n    Write a function to compute tangent of an angle in radians.\n    '''\n    return math.tan(radian)\ndef arcsin(y):\n    '''\n    Write a function to compute inverse sine.\n    '''\n    return math.asin(y)\ndef arccos(y):\n    '''\n    Write a function to compute inverse cosine.\n    '''\n    return math.acos(y)\ndef arctan(y):\n    '''\n    Write a function to compute inverse tangent.\n    '''\n    return math.atan(y)\ndef arccot(x):\n    '''\n    Write a function to compute inverse cotangent.\n    '''\n    return math.atan(x)\ndef arctan2(x,y):\n    '''\n    Write a function to compute inverse tangent from 2 numbers.\n    '''\n    return math.atan2(x,y)\ndef arccsc(x):\n    '''\n    Write a function to compute inverse cosecant.\n    '''\n    return math.acsc(x)\ndef arcsec(x):\n    '''\n    Write a function to compute inverse secant.\n    '''\n    return math.asec(x)\ndef cot(x):\n    '''\n    Write a function to compute cotangent.\n    '''\n    return 1/math.tan(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n    return 1/math.cos(x)\ndef cotcsc(x):\n    '''\n    Write a function to compute inverse cotangent.\n    '''\n    return math.acot(x)\ndef cosec(x):\n    '''\n    Write a function to compute inverse cosecant.\n    '''\n    return math.asin(1/x)\ndef secsc(x):\n    '''\n    Write a function to compute inverse secant.\n    '''\n    return math.acsc(1/x)\ndef cotsec(x):\n    '''\n    Write a function to compute inverse cotangent.\n    '''\n    return math.asec(1/x)\ndef cotcosec(x):\n    '''\n    Write a function to compute inverse cotangent.\n    '''\n    return math.acsc(1/x)\ndef cscsec(x):\n    '''\n    Write a function to compute inverse cosecant.\n    '''\n    return math.acsc(1/x)\ndef cosec(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.cos(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n    return 1/math.tan(x)\ndef cosec(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.cos(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n    return 1/math.tan(x)\ndef cosec(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.cos(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n    return 1/math.tan(x)\ndef cosec(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.cos(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n    return 1/math.tan(x)\ndef cosec(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.cos(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n    return 1/math.tan(x)\ndef cosec(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.cos(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n    return 1/math.tan(x)\ndef cosec(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.cos(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n    return 1/math.tan(x)\ndef cosec(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.cos(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n    return 1/math.tan(x)\ndef cosec(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.cos(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n    return 1/math.tan(x)\ndef cosec(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.cos(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n    return 1/math.tan(x)\ndef cosec(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.sin(x)\ndef csc(x):\n    '''\n    Write a function to compute cosecant.\n    '''\n    return 1/math.cos(x)\ndef sec(x):\n    '''\n    Write a function to compute secant.\n    '''\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree_radian = math.radians(degree)\n    return degree_radian\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # start with an empty tuple\n    start = 0\n    end = 0\n    # get the regex pattern's indices\n    pattern_indices = [m.span() for m in re.finditer(pattern, text)]\n    # if there are indices, find the largest one\n    if pattern_indices:\n        # grab the first index\n        start = pattern_indices[0][0]\n        # grab the last index\n        end = pattern_indices[-1][1]\n    # return the start and end indices\n    return (text[start:end], start, end)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find the first instance of pattern\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    p = re.compile(pattern)\n    match = p.search(text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #\n    # REPLACE THE RETURN STATEMENT ABOVE WITH YOUR CODE\n    #\n    #\n    return re.search(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Write a regular expression to find all (single line) string literals.\n    # pattern = re.compile(r'(\\\"[^\\\"]*\\\")|(\\'.*\\')')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w)\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'\\'.*\\'|\\\"[^\\\"]*\\\"|\\'.*\\'.*\\'')\n    # print(pattern.findall(text))\n    \n    # text = \"\"\"This is a test of the emergency broadcasting system. This is only a test.\"\"\"\n    # pattern = re.compile(r'(?<=\\w).*?(?=\\s|\\.)')\n    # print(pattern"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result, len(result[0]), len(result[0])\n    return None, 0, 0\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # return re.search(pattern, text)\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[1 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 0\n    bell[1][0] = bell[1][1] = 1\n    for i in range(2, n+1):\n        for j in range(i+1):\n            if j == 0 or j == i:\n                bell[i][j] = bell[i-1][j] + bell[i-1][j-1]\n            else:\n                bell[i][j] = bell[i][j-1] + bell[i-1][j-1]\n    return bell[n][n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1,1]\n    for i in range(2,n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n): \n        bell.append(bell[i-1] + bell[i])\n    return bell[n-1] "
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]\n    for i in range(1, n + 1):\n        bell.append(bell[i - 1] + bell[i - 1] * i)\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n + 1) \n    bell[0] = bell[1] = 1\n    for i in range(2, n + 1): \n        bell[i] = bell[i - 1] + bell[i - 2] \n    return bell[n] \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[0 for x in range(n+1)] for y in range(n+1)]\n    bell[0][0] = 1\n    bell[1][0] = bell[1][1] = 1\n    for i in range(2, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i):\n            bell[i][j] = bell[i-1][j-1] + bell[i-1][j]\n    return bell[n][0]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(n):\n        bell.append(sum(bell))\n    return bell[-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1[:]\n    del new_list[L]\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 1:\n        print(\"You have to enter a positive number\")\n        return\n    elif L == 1:\n        print(\"The removed element is: \", list1.pop(1))\n        return\n    else:\n        print(\"The removed element is: \", list1.pop(L))\n        return remove_kth_element(list1, L - 1)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        print(\"Error: list index out of range.\")\n        return list1\n    if L < 1:\n        print(\"Error: invalid list index.\")\n        return list1\n    return list1[:L - 1] + list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for element in list1:\n        if element!= list1[L]:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print(list1)\n    L = L-1\n    del list1[L]\n    print(list1)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L):\n        list1.remove(list1[i])\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a copy of the list\n    list2 = list1[:]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.reverse()\n    list1 = L[:-1]\n    L.reverse()\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 1 or L > len(list1):\n        return \"Kth element out of range\"\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return 0\n    else:\n        return max(test_list[i][N] for i in range(len(test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # base case\n    if N >= len(test_list):\n        return 0\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return [max(row[N]) for row in test_list]\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_list = [[1,2,3], [4,5,6], [7,8,9]]\n    N = 1\n    \n    def get_Nth_col(test_list, N):\n        \n        new_list = []\n        for i in range(len(test_list)):\n            for j in range(len(test_list[i])):\n                if j == N:\n                    new_list.append(test_list[i][j])\n                else:\n                    pass\n        return new_list\n    \n    print(get_Nth_col(test_list, N))\n    \nmax_of_nth(test_list, 1)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return [max(x) for x in zip(*test_list)]\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        raise Exception('test list is empty')\n    if len(test_list[0]) == 0:\n        raise Exception('test list is empty')\n    if N < 0 or N > len(test_list[0]):\n        raise Exception('invalid column number')\n    max = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][N] > max:\n            max = test_list[i][N]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(lambda x: x[N-1], test_list))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N < 0 or N > len(test_list):\n        print('N is invalid.')\n    else:\n        Nth_col = []\n        for i in range(len(test_list)):\n            Nth_col.append(test_list[i][N])\n        return max(Nth_col)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for col in range(len(test_list[0])):\n        max_list.append(test_list[0][col])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return lst[0] + lst[1]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for l in lst:\n        res.append([l[0],l[1]])\n    return res\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst2=[]\n    for i in range(len(lst)):\n        lst2.append([lst[i][0],lst[i][1]])\n    return(lst2)\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    return [lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [l[0] for l in lst], [l[1] for l in lst]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(map(lambda x: x[0],lst)),list(map(lambda x: x[1],lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lista = []\n    listb = []\n    listc = []\n    for i in lst:\n        lista.append(i[0])\n        listb.append(i[1])\n    listc = [lista, listb]\n    return listc\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge(lst):\n        merged=[]\n        for item in lst:\n            item=list(item)\n            merged.append(item[0])\n            merged.append(item[1])\n        return merged\n    return merge(lst)\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merge_lst = []\n    for l in lst:\n        merge_lst.append(l[0])\n        merge_lst.append(l[1])\n    return merge_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0][:1],lst[0][1:]]\n    first_el = []\n    second_el = []\n    for sublist in lst:\n        first_el.append(sublist[0])\n        second_el.append(sublist[1])\n    return [first_el,second_el]\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n        print(i, end=\" \")\n    print(sum)\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total=0\n    for i in test_list:\n        total+=i\n        print(total)\n    return total\n    \n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #test_list = (1, 2, 3, 4, 5)\n    l = len(test_list)\n    cummulative_sum = []\n    sum = 0\n    for i in test_list:\n        sum += i\n        cummulative_sum.append(sum)\n    print(cummulative_sum)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i)\n    for i in range(len(new_list)):\n        if i == 0:\n            pass\n        else:\n            new_list[i] += new_list[i-1]\n    return new_list\n    \n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return\n    test_list = sorted(test_list)\n    cum_sum = [test_list[0]]\n    for i in range(1, len(test_list)):\n        cum_sum.append(cum_sum[i-1] + test_list[i])\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    print(cummulative_sum(test_list))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = []\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            result.append(test_list[i]+test_list[j])\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(tup)/len(tup) for tup in nums]\n    # return list(map(lambda tup: sum(tup)/len(tup), nums))\n    \n    \ndef average_tuple_2(nums):\n    return [sum(tup)/len(tup) for tup in zip(*nums)]\n    # return [sum(tup) for tup in zip(*nums)]\n    \n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(sum(i)/len(i))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Your code here\n    return None\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t)/len(t) for t in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t)/len(t) for t in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # YOUR CODE HERE\n    return sum([float(n) for t in nums for n in t])/len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # return tuple((map(lambda x: sum(x) / len(x), nums)))\n    return list(map(lambda x: sum(x) / len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #return [sum(x)/len(x) for x in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(tuple)/len(tuple) for tuple in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        averages.append(sum(nums[i])/len(nums[i]))\n    return averages\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    return tuple(map(lambda a, b: a % b, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([t1 % t2 for t1, t2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(f'Original tuples are: {test_tup1} and {test_tup2}')\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return tuple(test_tup1)\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([test_tup1[i] % test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for num in range(len(test_tup1)):\n        result += (test_tup1[num]%test_tup2[num],)\n    return result\nprint(tuple_modulo((3, 6, 5), (4, 2, 1)))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def min_Jumps(n,d):\n        if(n < 0):\n            return 0\n        elif(n <= 1):\n            return n\n        else:\n            if(d >= n):\n                return 1 + min_Jumps(n-1,d)\n            else:\n                return 1 + min(min_Jumps(n-1,d), 1 + min_Jumps(n-d,d))\n    return min_Jumps(steps,d)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if(d == 0):\n        return 0\n    jumps = 0\n    if(steps <= d):\n        jumps = 1\n    else:\n        jumps = min_Jumps(steps-d, d) + min_Jumps(steps, d-steps)\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps=0\n    current_row=0\n    current_col=0\n    for i in steps:\n        if i=='R':\n            current_col+=1\n        elif i=='L':\n            current_col-=1\n        elif i=='U':\n            current_row+=1\n        else:\n            current_row-=1\n        if current_row==d and current_col==0:\n            break\n        jumps+=1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    num_jumps = 0\n    if d==0: \n        return 0\n    if steps < d: \n        return -1\n    if steps == 1: \n        return 1\n    for i in range(1,d+1): \n        if(min_Jumps(steps-i, d) == -1): \n            continue\n        num_jumps += 1\n    return num_jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 0: \n        return -1\n    if d == 0: \n        return steps\n    if steps < d: \n        return -1\n    jumps = 0\n    while steps - d >= 0:\n        jumps += 1\n        steps -= d\n    return jumps \n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    from collections import defaultdict\n    # initialize all steps as infinity\n    dist = defaultdict(lambda : float('inf'))\n    # starting point is always 0\n    dist[(0, 0)] = 0\n    for step in range(1, steps + 1):\n        dist2 = {}\n        for x, y in dist.items():\n            # left\n            if x[0] > 0:\n                dist2[(x[0] - 1, x[1])] = min(dist2.get((x[0] - 1, x[1]), float('inf')), dist[x] + 1)\n            # right\n            if x[0] < d - 1:\n                dist2[(x[0] + 1, x[1])] = min(dist2.get((x[0] + 1, x[1]), float('inf')), dist[x] + 1)\n            # up\n            if x[1] > 0:\n                dist2[(x[0], x[1] - 1)] = min(dist2.get((x[0], x[1] - 1), float('inf')), dist[x] + 1)\n            # down\n            if x[1] < d - 1:\n                dist2[(x[0], x[1] + 1)] = min(dist2.get((x[0], x[1] + 1), float('inf')), dist[x] + 1)\n        dist = dist2\n    return dist.get((d - 1, 0), float('inf'))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif d == steps:\n        return 1\n    else:\n        if d >= steps:\n            return 0\n        return 1 + min(min_Jumps(steps, d + 1), min_Jumps(steps, d + 2))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    from collections import deque\n    q = deque()\n    q.append(0)\n    visited = set()\n    visited.add(0)\n    while q:\n        n = q.popleft()\n        for i in range(1, steps + 1):\n            if d * i + n == 0:\n                return i\n            if (d * i + n not in visited):\n                q.append(d * i + n)\n                visited.add(d * i + n)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    y = 0\n    steps_taken = 0\n    if d == 0:\n        return 0\n    elif d == 1:\n        return 1\n    else:\n        while y < d and x < d:\n            x += 1\n            y += 1\n            if x == d or y == d:\n                break\n            else:\n                steps_taken += 1\n        return steps_taken\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    if d == steps: \n        return 1\n    if steps < d: \n        return 0\n    else: \n        return min_Jumps(steps-1, d-1) + min_Jumps(steps-2, d-1)\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise Exception(\"Lists must be of the same length.\")\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i] / nums2[i])\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list=[]\n    if len(nums1)>len(nums2):\n        for i in range(len(nums2)):\n            try:\n                new_list.append(nums1[i]/nums2[i])\n            except ZeroDivisionError:\n                new_list.append(0)\n                print(\"Invalid input, divisible by 0\")\n    elif len(nums1)<len(nums2):\n        for i in range(len(nums1)):\n            try:\n                new_list.append(nums2[i]/nums1[i])\n            except ZeroDivisionError:\n                new_list.append(0)\n                print(\"Invalid input, divisible by 0\")\n    else:\n        for i in range(len(nums1)):\n            try:\n                new_list.append(nums1[i]/nums2[i])\n            except ZeroDivisionError:\n                new_list.append(0)\n                print(\"Invalid input, divisible by 0\")\n    print(new_list)\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i]/nums2[i])\n        except:\n            result.append(float('NaN'))\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        assert len(nums1) == len(nums2),'Not of equal length'\n    except AssertionError as ae:\n        print(ae)\n    else:\n        return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n    \nnums1 = [1,2,3,4]\nnums2 = [5,6,7,8]\nprint(div_list(nums1,nums2))"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    length1 = len(nums1)\n    length2 = len(nums2)\n    if length1<length2:\n        length1,length2 = length2,length1\n        nums1,nums2 = nums2,nums1\n    result = []\n    for i in range(length1):\n        if(i+1)%2==1:\n            result.append(nums2[i]/nums1[i])\n        else:\n            result.append(nums2[i]/nums1[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #assign empty lists to store the new lists\n    new_list1=[]\n    new_list2=[]\n    #convert each element to float and then find the quotient\n    for num in nums1:\n        new_list1.append(float(num))\n    for num in nums2:\n        new_list2.append(float(num))\n    #divide each element of the lists\n    for i in range(0,len(new_list2)):\n        new_list2[i]=new_list2[i]/new_list1[i]\n    #return the lists\n    return new_list2\n    "
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) > len(nums2):\n        raise ValueError(\"not same length\")\n    nums1.reverse()\n    nums2.reverse()\n    div_list=[]\n    for i in range(len(nums1)):\n        try:\n            div_list.append(nums1[i]/nums2[i])\n        except ZeroDivisionError:\n            div_list.append(float('inf'))\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    newList = []\n    for num1,num2 in zip(nums1,nums2):\n        newList.append(num1/num2)\n    return newList\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result_str = ''\n    num_flag = False\n    for char in test_str:\n        if char.isdigit():\n            num_flag = True\n            continue\n        if num_flag:\n            result_str += char\n    result_str += str(num_flag)\n    return result_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for letter in test_str:\n        if letter.isdigit():\n            new_str += letter\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [x for x in test_str if x.isdigit()]\n    return test_str.replace(''.join(nums), '') + ''.join(nums)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = re.findall(r'\\d+', test_str)\n    res = re.sub(r'\\d+', '', test_str)\n    res += ''.join(num_list)\n    return res\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return \"\".join([char for char in test_str if not char.isdigit()]) + \"\".join([char for char in test_str if char.isdigit()])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = re.findall('\\d+',test_str)\n    non_num_list = []\n    for i in test_str:\n        if i.isdigit():\n            non_num_list.append(i)\n    for i in non_num_list:\n        if i == \" \":\n            non_num_list.remove(i)\n    for i in num_list:\n        non_num_list.insert(0,i)\n    return \"\".join(non_num_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    symbol_list = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num_list.append(test_str[i])\n        else:\n            symbol_list.append(test_str[i])\n    res = \"\".join(num_list)\n    return \"\".join(symbol_list) + res\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    num_str = \"\"\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num_str += test_str[i]\n        else:\n            new_str += test_str[i]\n    new_str += num_str\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    numbers = ''\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            result += char\n    return result + numbers\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create the variable to be returned\n    num_str = \"\"\n    # Create a variable to hold the numbers in the string\n    num = 0\n    # Loop through the string\n    for i in range(len(test_str)):\n        # Check if the character is a number\n        if test_str[i].isdigit():\n            # Increment the number variable\n            num += 1\n        else:\n            # Append the character to the number string\n            num_str += test_str[i]\n    # Loop through the string again\n    for j in range(num):\n        # Append the number to the end of the string\n        num_str += test_str[len(test_str) - j]\n    # Return the number string\n    return num_str"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # edge case: empty array\n    if len(a) == 0:\n        return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_length = 0\n    max_subset = []\n    # Enumerate all pairs.\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if (a[i]%a[j]==0 or a[j]%a[i]==0):\n                # To get the length of the largest subset of a list of numbers.\n                curr_length = len(max_subset) + 1\n                if curr_length > max_length:\n                    max_length = curr_length\n                    max_subset = [a[i],a[j]]\n    return max_length, max_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #create a dictionary\n    d = {}\n    #iterate through a\n    for num in a:\n        #divide num by each key in the dictionary\n        for i in d.keys():\n            #if a number is a factor, it will be divided by that number and added to the dictionary\n            if num%i == 0:\n                d[i] = d.get(i, 0) + 1\n    #return the maximum value in the dictionary\n    return max(d.values())\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    for i in range(n):\n        a[i] = [a[i]]\n        for j in range(i+1, n):\n            if a[i][0]%a[j][0] == 0:\n                a[i] = a[i] + a[j]\n                a[j] = []\n    return a\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # a = [1, 4, 6, 8, 10]\n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    for i in range(len(a)):\n        if a[i] % 2 == 1:\n            a[i] = 'X'\n            break\n    s = ''.join(a)\n    # print(s)\n    # print(s.split('X'))\n    if s.split('X')[0] == '':\n        return len(s.split('X'))\n    else:\n        return len(s.split('X')) - 1\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def valid_divisible(x, y):\n        if x % y == 0 or y % x == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    sz = len(a)\n    dp = [1]*sz\n    for i in range(sz):\n        for j in range(i):\n            if a[i]%a[j]==0:\n                dp[i] = max(dp[i],1+dp[j])\n    return max(dp)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = [i for i in arr1+arr2]\n    arr.sort()\n    median = 0\n    if n % 2 == 0:\n        median = arr[n//2]\n    else:\n        median = (arr[n//2] + arr[n//2+1])/2\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_arr = arr1+arr2\n    sorted_arr.sort()\n    if len(sorted_arr)%2==1:\n        return sorted_arr[n//2]\n    else:\n        return (sorted_arr[n//2]+sorted_arr[n//2-1])/2\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n1N2 = input().split()\n    n1 = int(n1N2[0])\n    n2 = int(n1N2[1])\n    arr1 = list(map(int, input().rstrip().split()))\n    arr2 = list(map(int, input().rstrip().split()))\n    result = get_median(arr1, arr2, n1+n2)\n    fptr.write(str(result) + '\\n')\n    fptr.close()"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0] + arr2[0]) // 2\n    else:\n        # median is the middle element in the sorted array\n        mid = n // 2\n        if arr1[mid] < arr2[mid]:\n            return get_median(arr1[mid:], arr2[:mid + 1], mid + 1)\n        else:\n            return get_median(arr1[:mid + 1], arr2[mid:], mid + 1)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    else:\n        if arr1[n // 2] < arr2[n // 2]:\n            return get_median(arr1, arr2[n // 2 + 1:], n - (n // 2) - 1)\n        else:\n            return get_median(arr2, arr1[n // 2 + 1:], n - (n // 2) - 1)\n    \ndef main():\n    print(get_median([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 5))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j, x, y = 0, 0, 0, 0\n    # print(arr1)\n    # print(arr2)\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            x = arr1[i]\n            i += 1\n        else:\n            y = arr2[j]\n            j += 1\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = sorted(arr1 + arr2)\n    if n % 2 == 0:\n        return (arr[int(n/2)] + arr[int(n/2) - 1]) / 2\n    else:\n        return arr[int(n/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    if l1 == l2:\n        return (arr1[l1//2] + arr2[l2//2])/2\n    if l1 > l2:\n        return get_median(arr2, arr1, n)\n    elif l2 > l1:\n        return get_median(arr1, arr2, n)\n    else:\n        if n % 2 == 0:\n            return (arr1[n//2] + arr2[n//2])/2\n        else:\n            return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    if n == 2:\n        return (min(arr1[0], arr2[0]) + max(arr1[1], arr2[1]))/2\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Code here\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**n for n in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for item in nums:\n        result.append(pow(item,n))\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\nprint(nth_nums([1, 2, 3], 3))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return None\n    for i in range(0,n):\n        for j in range(0,len(nums)):\n            nums[j] = nums[j]**(i+1)\n    return nums\nnums = [1,2,3,4,5]\nn = 3\nprint(nth_nums(nums,n))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    import math\n    new_list = []\n    for i in nums:\n        new_list.append(i**n)\n    return new_list\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef capitalize(string):\n    '''\n    Write a python function to capitalize the first character of a given string.\n    '''\n    return string.capitalize()\n    \ndef center(string,length):\n    '''\n    Write a python function to center a string in a specific length.\n    '''\n    return string.center(length)\n    \ndef is_digit(string):\n    '''\n    Write a python function to check whether a given string is a digit.\n    '''\n    return string.isdigit()\n    \ndef is_lower(string):\n    '''\n    Write a python function to check whether a given string is lowercase.\n    '''\n    return string.islower()\n    \ndef is_upper(string):\n    '''\n    Write a python function to check whether a given string is uppercase.\n    '''\n    return string.isupper()\n    \ndef is_alpha(string):\n    '''\n    Write a python function to check whether a given string is an alphabet.\n    '''\n    return string.isalpha()\n    \ndef is_alnum(string):\n    '''\n    Write a python function to check whether a given string is an alphanumeric.\n    '''\n    return string.isalnum()\n    \ndef is_ascii(string):\n    '''\n    Write a python function to check whether a given string is an ascii.\n    '''\n    return string.isascii()\n    \ndef is_decimal(string):\n    '''\n    Write a python function to check whether a given string is a decimal.\n    '''\n    return string.isdecimal()\n    \ndef is_hexadecimal(string):\n    '''\n    Write a python function to check whether a given string is a hexadecimal.\n    '''\n    return string.ishexadecimal()\n    \ndef is_lowercase(string):\n    '''\n    Write a python function to check whether a given string is a lowercase.\n    '''\n    return string.islower()\n    \ndef is_title(string):\n    '''\n    Write a python function to check whether a given string is a title.\n    '''\n    return string.istitle()\n    \ndef is_printable(string):\n    '''\n    Write a python function to check whether a given string is a printable.\n    '''\n    return string.isprintable()\n    \ndef is_space(string):\n    '''\n    Write a python function to check whether a given string is a space.\n    '''\n    return string.isspace()\n    \ndef is_title(string):\n    '''\n    Write a python function to check whether a given string is a title.\n    '''\n    return string.istitle()\n    \ndef is_ascii(string):\n    '''\n    Write a python function to check whether a given string is an ascii.\n    '''\n    return string.isascii()\n    \ndef is_decimal(string):\n    '''\n    Write a python function to check whether a given string is a decimal.\n    '''\n    return string.isdecimal()\n    \ndef is_hexadecimal(string):\n    '''\n    Write a python function to check whether a given string is a hexadecimal.\n    '''\n    return string.ishexadecimal()\n    \ndef is_lowercase(string):\n    '''\n    Write a python function to check whether a given string is a lowercase.\n    '''\n    return string.islower()\n    \ndef is_uppercase(string):\n    '''\n    Write a python function to check whether a given string is uppercase.\n    '''\n    return string.isupper()\n    \ndef is_alphabet(string):\n    '''\n    Write a python function to check whether a given string is an alphabet.\n    '''\n    return string.isalpha()\n    \ndef is_alnum(string):\n    '''\n    Write a python function to check whether a given string is an alphanumeric.\n    '''\n    return string.isalnum()\n    \ndef is_ascii(string):\n    '''\n    Write a python function to check whether a given string is an ascii.\n    '''\n    return string.isascii()\n    \ndef is_decimal(string):\n    '''\n    Write a python function to check whether a given string is a decimal.\n    '''\n    return string.isdecimal()\n    \ndef is_hexadecimal(string):\n    '''\n    Write a python function to check whether a given string is a hexadecimal.\n    '''\n    return string.ishexadecimal()\n    \ndef is_lowercase(string):\n    '''\n    Write a python function to check whether a given string is a lowercase.\n    '''\n    return string.islower()\n    \ndef is_upper(string):\n    '''\n    Write a python function to check whether a given string is uppercase.\n    '''\n    return string.isupper()\n    \ndef is_printable(string):\n    '''\n    Write a python function to check whether a given string is a printable.\n    '''\n    return string.isprintable()\n    \ndef is_space(string):\n    '''\n    Write a python function to check whether a given string is a space.\n    '''\n    return string.isspace()\n    \ndef is_title(string):\n    '''\n    Write a python function to check whether a given string is a title.\n    '''\n    return string.istitle()\n    \ndef is_ascii(string):\n    '''\n    Write a python function to check whether a given string is an ascii.\n    '''\n    return string.isascii()\n    \ndef is_decimal(string):\n    '''\n    Write a python function to check whether a given string is a decimal.\n    '''\n    return string.isdecimal()\n    \ndef is_hexadecimal(string):\n    '''\n    Write a python function to check whether a given string is a hexadecimal.\n    '''\n    return string.ishexadecimal()\n    \ndef is_lowercase(string):\n    '''\n    Write a python function to check whether a given string is a lowercase.\n    '''\n    return string.islower()\n    \ndef is_uppercase(string):\n    '''\n    Write a python function to check whether a given string is uppercase.\n    '''\n    return string.isupper()\n    \ndef is_alphabet(string):\n    '''\n    Write a python function to check whether a given string is an alphabet.\n    '''\n    return string.isalpha()\n    \ndef is_alnum(string):\n    '''\n    Write a python function to check whether a given string is an alphanumeric.\n    '''\n    return string.isalnum()\n    \ndef is_ascii(string):\n    '''\n    Write a python function to check whether a given string is an ascii.\n    '''\n    return string.isascii()\n    \ndef is_decimal(string):\n    '''\n    Write a python function to check whether a given string is a decimal.\n    '''\n    return string.isdecimal()\n    \ndef is_hexadecimal(string):\n    '''\n    Write a python function to check whether a given string is a hexadecimal.\n    '''\n    return string.ishexadecimal()\n    \ndef is_lowercase(string):\n    '''\n    Write a python function to check whether a given string is a lowercase.\n    '''\n    return string.islower()\n    \ndef is_upper(string):\n    '''\n    Write a python function to check whether a given string is uppercase.\n    '''\n    return string.isupper()\n    \ndef is_printable(string):\n    '''\n    Write a python function to check whether a given string is a printable.\n    '''\n    return string.isprintable()\n    \ndef is_space(string):\n    '''\n    Write a python function to check whether a given string is a space.\n    '''\n    return string.isspace()\n    \ndef is_title(string):\n    '''\n    Write a python function to check whether a given string is a title.\n    '''\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not isinstance(string, str):\n        return TypeError('Invalid input type. Must be a string.')\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    \n    return string.isupper()\n    \n    \ndef concat(*args):\n    '''\n    Write a python function to concatenate the elements of a list.\n    '''\n    return ''.join([str(x) for x in args])\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return string[::-1] == string\n    \n    \ndef index_of(string, char):\n    '''\n    Write a python function to check whether a character is present in a given string or not. If present, return the index of the character.\n    '''\n    return string.index(char)\n    \n    \ndef last_occurrence(string, char):\n    '''\n    Write a python function to check the last occurrence of a character in a given string.\n    '''\n    return string.rfind(char)\n    \n    \ndef is_unique(string):\n    '''\n    Write a python function to check whether a string contains unique characters or not.\n    '''\n    return len(set(string)) == len(string)\n    \n    \ndef is_even(number):\n    '''\n    Write a python function to check whether a given number is even or not.\n    '''\n    return number%2 == 0\n    \n    \ndef is_even_digit(number):\n    '''\n    Write a python function to check whether a given number is even digit or not.\n    '''\n    return number%2 == 0 and number%9 == 0\n    \n    \ndef is_palindrome_number(number):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    return str(number)[::-1] == str(number)\n    \n    \ndef multiply(x, y):\n    '''\n    Write a python function to multiply two given numbers.\n    '''\n    return x*y\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth term in fibonacci sequence.\n    '''\n    if n<0:\n        raise ValueError(\"Negative number not allowed\")\n    \n    fib = [0, 1]\n    \n    if n == 0:\n        return 0\n    \n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n        \n    return fib[n]\n    \n    \ndef digit_sum(number):\n    '''\n    Write a python function to return the sum of digits of a given number.\n    '''\n    return sum([int(x) for x in str(number)])\n    \n    \ndef is_pangram(sentence):\n    '''\n    Write a python function to check whether a sentence is pangram or not.\n    '''\n    return set(string.ascii_lowercase).issubset(set(sentence.lower()))\n    \n    \ndef is_prime(number):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    return number > 1 and all(number%x for x in range(2, number))\n    \n    \ndef is_armstrong(number):\n    '''\n    Write a python function to check whether a given number is an armstrong number or not.\n    '''\n    sum = 0\n    \n    for i in str(number):\n        sum += int(i) ** 3\n        \n    return sum == number\n    \n    \ndef is_perfect_number(number):\n    '''\n    Write a python function to check whether a given number is perfect number or not.\n    '''\n    divisor = 1\n    sum = 0\n    \n    for i in range(1, number):\n        if number%i == 0:\n            divisor += i\n            \n    return divisor == number\n    \n    \ndef is_prime_number_list(number_list):\n    '''\n    Write a python function to check whether a given list of numbers are prime numbers or not.\n    '''\n    return all([is_prime(x) for x in number_list])\n    \n    \ndef is_perfect_number_list(number_list):\n    '''\n    Write a python function to check whether a given list of numbers are perfect numbers or not.\n    '''\n    return all([is_perfect_number(x) for x in number_list])\n    \n    \ndef is_number_list_anagram(number_list):\n    '''\n    Write a python function to check whether a given list of numbers are anagram numbers or not.\n    '''\n    return all([number_list[i] == number_list[i+1] for i in range(len(number_list)-1)])\n    \n    \ndef is_number_list_pangram(number_list):\n    '''\n    Write a python function to check whether a given list of numbers are pangram numbers or not.\n    '''\n    return all([is_pangram(str(x)) for x in number_list])\n    \n    \ndef get_prime_numbers_in_range(start, end):\n    '''\n    Write a python function to return a list of prime numbers in a given range.\n    '''\n    return [x for x in range(start, end) if is_prime(x)]\n    \n    \ndef get_perfect_numbers_in_range(start, end):\n    '''\n    Write a python function to return a list of perfect numbers in a given range.\n    '''\n    return [x for x in range(start, end) if is_perfect_number(x)]\n    \n    \ndef get_prime_and_perfect_numbers_in_range(start, end):\n    '''\n    Write a python function to return a list of prime and perfect numbers in a given range.\n    '''\n    return [x for x in range(start, end) if is_perfect_number(x) or is_prime(x)]\n    \n    \ndef get_pangram_words_in_string(string):\n    '''\n    Write a python function to return a list of pangram words in a given string.\n    '''\n    return re.findall('[a-z]*', string.lower())\n    \n    \ndef is_vowel(char):\n    '''\n    Write a python function to check whether a character is vowel or not.\n    '''\n    return char.lower() in ['a', 'e', 'i', 'o', 'u']\n    \n    \ndef is_consonant(char):\n    '''\n    Write a python function to check whether a character is consonant or not.\n    '''\n    return char.lower() not in ['a', 'e', 'i', 'o', 'u']\n    \n    \ndef is_vowel_or_consonant(char):\n    '''\n    Write a python function to check whether a character is vowel or consonant or not.\n    '''\n    return is_vowel(char) or is_consonant(char)\n    \n    \ndef check_sentence(sentence):\n    '''\n    Write a python function to check whether a sentence is pangram or not.\n    '''\n    return is_pangram(sentence)\n    \n    \ndef is_even_ascii(char):\n    '''\n    Write a python function to check whether a character is even or not.\n    '''\n    return ord(char)%2 == 0\n    \n    \ndef is_odd_ascii(char):\n    '''\n    Write a python function to check whether a character is odd or not.\n    '''\n    return ord(char)%2 == 1\n    \n    \ndef count_occurences_in_list(lst, char):\n    '''\n    Write a python function to count the number of occurences of a character in a list of strings.\n    '''\n    return lst.count(char)\n    \n    \ndef count_occurences_in_sentence(sentence, char):\n    '''\n    Write a python function to count the number of occurences of a character in a string.\n    '''\n    return sentence.lower().count(char.lower())\n    \n    \ndef compare_strings(first_str, second_str):\n    '''\n    Write a python function to compar"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Swaping\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    # Print\n    print(newList)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #newList = [1,2,3,4,5]\n    print(\"Original list is\",newList)\n    size = len(newList) \n    temp = newList[0]\n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp\n    print(\"New list is\",newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    if size>=2:\n        temp=newList[0]\n        newList[0]=newList[size-1]\n        newList[size-1]=temp\n    else:\n        print(\"Not a valid list\")\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l=len(newList)\n    temp=newList[l-1]\n    newList[l-1]=newList[0]\n    newList[0]=temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi \n    area = pi * r**2 * (3*r - 1) / 3\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r = float(r)\n    A = math.pi * (3*r**2) / 2\n    return A\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r=float(r)\n    if (r>0) :\n        a=math.sqrt(2*r*r)\n        area=a*(a+2*r)\n    else :\n        area=0\n    return area\ndef right_triangle_area(a,b) :\n    '''\n    Write a python function to find the area of the right angled triangle having sides a and b.\n    '''\n    if (a>0 and b>0) :\n        s=a*b/2\n        area=math.sqrt(s*(s-a)*(s-b)*(s-2*a*b))\n    else :\n        area=0\n    return area\ndef semiperimeter(a,b) :\n    '''\n    Write a python function to find the semiperimeter of the triangle having sides a and b.\n    '''\n    if (a>0 and b>0) :\n        s=(a+b+math.sqrt((a*a+b*b)*(b*b+a*a)))/2\n        area=math.sqrt(s*(s-a)*(s-b)*(s-2*a*b))\n    else :\n        area=0\n    return area\ndef find_distance(x1,y1,x2,y2) :\n    '''\n    Write a python function to find the distance between two points (x1,y1) and (x2,y2) on the coordinate plane.\n    '''\n    distance=math.sqrt((x2-x1)**2+(y2-y1)**2)\n    return distance\ndef angle_of_an_arc(a,b,c) :\n    '''\n    Write a python function to find the angle made by an arc having sides a, b and c.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    if (a>0 and b>0 and c>0) :\n        angle=(2*math.acos((a*a+b*b-c*c)/(2*a*b)))/3.1416\n    else :\n        angle=0\n    return angle\ndef triangle_perimeter(a,b,c) :\n    '''\n    Write a python function to find the perimeter of the triangle having sides a, b and c.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    if (a>0 and b>0 and c>0) :\n        perimeter=a+b+c\n    else :\n        perimeter=0\n    return perimeter\ndef point_closest_to_line(x1,y1,x2,y2,x3,y3) :\n    '''\n    Write a python function to find the point on the line joining points (x1,y1) and (x2,y2) that is closest to point (x3,y3).\n    '''\n    x1=float(x1)\n    y1=float(y1)\n    x2=float(x2)\n    y2=float(y2)\n    x3=float(x3)\n    y3=float(y3)\n    if (x1>0 and y1>0 and x2>0 and y2>0 and x3>0 and y3>0) :\n        if (y2-y1==0) :\n            x4=x1\n            y4=(x3-x1)*(y1-y3)/(x1-x3)+y1\n        else :\n            x4=(y3-y1)*(x1-x3)/(y1-y3)-x1\n            y4=y1\n        distance=((x4-x3)**2+(y4-y3)**2)**0.5\n    else :\n        distance=0\n    return distance\ndef polygon_area(x,y) :\n    '''\n    Write a python function to find the area of a polygon formed by joining the vertices (x1,y1), (x2,y2), \u2026, (xn,yn).\n    '''\n    n=len(x)\n    area=0\n    for i in range(0,n) :\n        j=i-1\n        area=area+x[i]*y[j]-y[i]*x[j]\n    area=0.5*abs(area)\n    return area\ndef sum_of_intervals(a,b,c,d) :\n    '''\n    Write a python function to find the sum of the intervals from a to b and from c to d.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    d=float(d)\n    if (a<=b and c<=d) :\n        interval=a+c+b+d\n    else :\n        interval=0\n    return interval\ndef number_of_digits(n) :\n    '''\n    Write a python function to find the number of digits in an integer n.\n    '''\n    n=float(n)\n    count=0\n    if (n>0) :\n        while n>0 :\n            n=n/10\n            count=count+1\n    else :\n        count=0\n    return count\ndef count_number_of_digits(n,m) :\n    '''\n    Write a python function to find the number of digits in the number formed by the concatenation of n and m.\n    '''\n    n=float(n)\n    m=float(m)\n    count=0\n    if (n>0 and m>0) :\n        while n>0 or m>0 :\n            count=count+1\n            if n>0 :\n                n=n/10\n            else :\n                n=0\n            if m>0 :\n                m=m/10\n            else :\n                m=0\n    else :\n        count=0\n    return count\ndef number_of_digits_in_number_series(a,b) :\n    '''\n    Write a python function to find the number of digits in the number formed by the concatenation of the series a, a+1, \u2026, b.\n    '''\n    a=float(a)\n    b=float(b)\n    count=0\n    if (a<=b) :\n        while a<=b :\n            a=a*10\n            count=count+1\n    else :\n        count=0\n    return count\ndef number_of_digits_in_number_series_2(a,b) :\n    '''\n    Write a python function to find the number of digits in the number formed by the concatenation of the series a, a+1, \u2026, b.\n    '''\n    a=float(a)\n    b=float(b)\n    count=0\n    if (a<=b) :\n        while a<=b :\n            count=count+1\n            if (a%2) :\n                a=a*3+1\n            else :\n                a=a*3+2\n    else :\n        count=0\n    return count\ndef square_root(n,k) :\n    '''\n    Write a python function to find the square root of an integer n by decomposing it into a product of k consecutive squares.\n    '''\n    n=float(n)\n    k=float(k)\n    if (n>0 and k>0) :\n        p=1\n        q=k\n        r=0\n        while (q>0) :\n            q=q-1\n            r=r+1\n            p=p*p\n            if (p>n) :\n                break\n        if (q==0) :\n            if (p==n) :\n                r=r+1\n        else :\n            q=k\n            p=1\n            while (q>0) :\n                q=q-1\n                p=p*p\n                if (p>n) :\n                    break\n            if (q==0) :\n                if (p==n) :\n                    r=r+1\n    else :\n        r=0\n    return r\ndef number_of_digits_in_binary_number_series(a,b) :\n    '''\n    Write a python function to find the number o"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    semi_circle_area = math.pi * (r ** 2)\n    a_triangle = 0.5 * semi_circle_area\n    a_triangle = a_triangle * (3 ** 0.5)\n    return a_triangle\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3.141592653589793*(r**2))/2\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    return math.pi*r*r*(3*r-math.sqrt(5*r*r+2*math.pi*r*r))/4\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    x = r * r\n    y = (2 * math.pi * r) * r * r\n    z = math.sqrt(x + y)\n    print(z)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.25 * r * r * 3.14\n    return area\n    \nprint(triangle_area(4))\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi, sqrt, asin\n    return (r**2)*(3*sqrt(3) - (r**2)*(3**0.5))/2\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    r = float(r)\n    result = (r**2)/2 * pi\n    return result\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Handle the exception \n    # where the list is empty\n    try:\n        if start==0 and end==None:\n            end = len(array)\n        for i in range(start,end):\n            if array[i]!= i+1:\n                return i+1\n        return end+1\n    except:\n        return None\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = end if end!= None else len(array) - 1\n    if start == end:\n        return array[start] + 1\n    \n    mid = (start + end) // 2\n    if array[mid]!= mid:\n        return mid\n    elif array[start]!= start:\n        return find_First_Missing(array, start, mid)\n    elif array[end]!= end:\n        return find_First_Missing(array, mid+1, end)\n    else:\n        return find_First_Missing(array, start, mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)-1\n    while start<=end:\n        if array[start]==start:\n            start+=1\n        else:\n            return start\n    return start\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    # Check if array is empty\n    if not array:\n        return -1\n    \n    # Check if start index is out of bounds\n    if start >= len(array):\n        return -1\n    \n    # Check if end index is out of bounds\n    if end!= None:\n        if end >= len(array):\n            return -1\n        if end <= start:\n            return -1\n    \n    # Linear search\n    for i in range(start,len(array)):\n        if array[i] - 1!= i:\n            if end!= None:\n                return i if i < end else end\n            return i\n    \n    return end\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Set end\n    if not end:\n        end = len(array) - 1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end:\n        return None\n    mid = start + (end - start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,start=mid+1,end=end)\n    else:\n        return find_First_Missing(array,start=start,end=mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = end if end else len(array)-1\n    start = start -1\n    if(start==end):\n        if(array[start]==0):\n            return 1\n        else:\n            return 0\n    if(start<end):\n        for index in range(start+1,end):\n            if array[index]>array[index+1]:\n                return array[index+1]\n    else:\n        for index in range(start+1,end+2):\n            if array[index]>array[index+1]:\n                return array[index+1]\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = len(array) if end is None else end\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start > end:\n        return -1\n    if start == end:\n        return start+1\n    mid = (start+end)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for s in string:\n        if s =='':\n            s = '%20'\n        new_string += s\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for i in range(0,len(string)):\n        if string[i] =='':\n            new_string += '%20'\n        else:\n            new_string += string[i]\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for letter in string:\n        if letter =='':\n            new_string += '%20'\n        else:\n            new_string += letter\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for i in string:\n        if i == \" \":\n            string = string.replace(i, \"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(list)):\n        if list[i]%2 == 0:\n            list1.append(list[i])\n        else:\n            list2.append(list[i])\n    print(list1)\n    print(list2)\n    return list1, list2\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    l = len(list)\n    i=0\n    while(i<l):\n        if(list[i]%2==0):\n            print(list[i])\n        i+=1\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    l1=[]\n    l2=[]\n    while(i<len(list)):\n        if list[i]%2==0:\n            l1.append(list[i])\n        else:\n            l2.append(list[i])\n        i=i+1\n    return l1,l2\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for i in list:\n        if i%2 == 0:\n            even_num.append(i)\n    print(\"Even numbers from the list of numbers :- \",even_num)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for x in list:\n        if x % 2 == 0:\n            even.append(x)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_1=[]\n    list_2=[]\n    for i in list:\n        if i%2==0:\n            list_1.append(i)\n        else:\n            list_2.append(i)\n    return [list_1, list_2]\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd = []\n    even = []\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for x in list:\n        if x % 2 == 0:\n            even_num.append(x)\n    return even_num\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for i in list:\n        if i % 2 == 0:\n            even_nums.append(i)\n    return even_nums\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    if x == 0 and y == 0:\n        return [(-1,0),(0,-1),(1,0),(0,1)]\n    elif x == 0 and y == 1:\n        return [(-1,0),(1,0),(0,1)]\n    elif x == 0 and y == 2:\n        return [(-1,0),(1,0)]\n    elif x == 1 and y == 0:\n        return [(0,-1),(1,0),(0,1)]\n    elif x == 1 and y == 1:\n        return [(1,1),(0,1),(-1,1),(1,0),(1,1)]\n    elif x == 1 and y == 2:\n        return [(1,1),(-1,1)]\n    elif x == 2 and y == 0:\n        return [(1,0),(1,1)]\n    elif x == 2 and y == 1:\n        return [(1,1),(1,0),(1,1)]\n    elif x == 2 and y == 2:\n        return [(-1,1),(1,1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y, z = ele\n    return {(x + 1, y, z), (x - 1, y, z), (x, y + 1, z), (x, y - 1, z), (x, y, z + 1), (x, y, z - 1)} | sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    x = ele[0]\n    y = ele[1]\n    dir = [(0, -1), (0, 1), (1, 0), (-1, 0)]\n    for dx, dy in dir: \n        if 0 <= x + dx < len(matrix) and 0 <= y + dy < len(matrix[0]) and matrix[x + dx][y + dy] == '1': \n            adjac(x + dx, y + dy)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    ans = []\n    if y - 1 >= 0:\n        ans.append((x, y - 1))\n    if x + 1 < len(map_[0]):\n        ans.append((x + 1, y))\n    if x - 1 >= 0:\n        ans.append((x - 1, y))\n    if y + 1 < len(map_):\n        ans.append((x, y + 1))\n    return ans\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # print(sub)\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        for i in sub:\n            if ele[0] == i[0]:\n                sub.append(i[1])\n            if ele[1] == i[1]:\n                sub.append(i[0])\n            if ele[0] == i[1]:\n                sub.append(i[0])\n            if ele[1] == i[0]:\n                sub.append(i[1])\n    return sub\n    \ndef list_to_dict(coord):\n    '''\n    Given a list of coordinates, convert it to a dictionary with adjacent coordinates as keys and set of coordinates as values.\n    '''\n    dict = {}\n    for ele in coord:\n        #print(ele)\n        sub = adjac(ele)\n        for i in sub:\n            #print(i)\n            if i in dict:\n                dict[i].append(ele)\n            else:\n                dict[i] = [ele]\n    return dict\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub:\n        sub.append(ele)\n    if len(sub) == 1:\n        sub.append(ele)\n    else:\n        sub[1] = (sub[1], ele)\n    if not ele[1]:\n        if len(sub) > 2:\n            sub[2] = (sub[2], ele)\n    if ele[1]:\n        if len(sub) > 2:\n            sub[2] = (sub[2], ele)\n        adjac(ele[1], sub)\n    if ele[0]:\n        if len(sub) > 2:\n            sub[2] = (sub[2], ele)\n        adjac(ele[0], sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x == 0:\n        l = [(x + 1, y), (x, y - 1), (x, y + 1)]\n    elif x == (n - 1):\n        l = [(x - 1, y), (x, y - 1), (x, y + 1)]\n    elif y == 0:\n        l = [(x - 1, y), (x + 1, y), (x, y + 1)]\n    elif y == (n - 1):\n        l = [(x - 1, y), (x + 1, y), (x, y - 1)]\n    else:\n        l = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]\n    for i in sub:\n        l.remove(i)\n    return l\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #list comprehension\n    adj = [(x,y) for x,y in [(x,y) for x in range(ele[0]-1, ele[0]+2) for y in range(ele[1]-1, ele[1]+2) if (x,y)!= ele] ]\n    #adj.remove(ele)\n    #adj.append(ele)\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for s in range(4):\n        if s == 0:\n            y = ele[0]\n            x = ele[1] + 1\n        elif s == 1:\n            y = ele[0] + 1\n            x = ele[1]\n        elif s == 2:\n            y = ele[0] + 1\n            x = ele[1] - 1\n        else:\n            y = ele[0] - 1\n            x = ele[1]\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for x in range(-1, 2):\n        for y in range(-1, 2):\n            if (x,y)!= (0,0):\n                sub.append((ele[0] + x, ele[1] + y))\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    string = ''\n    for char in text:\n        if char =='':\n            char = '_'\n        elif char == '_':\n            char =''\n        string += char\n    return string\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # text = input()\n    # text = text.replace(\" \", \"_\")\n    # text = text.replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # your code here\n    return text.replace('_','').replace(' ', '_')\n    \ndef remove_vowels(text):\n    '''\n    Write a function that removes all vowels from a string.\n    '''\n    # your code here\n    return \"\".join(text)\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] == '_':\n            text = text.replace('_','', 1)\n        elif text[i] =='':\n            text = text.replace(' ', '_', 1)\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\"_\", \" \").replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    import re\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    length_list = len(num_list)\n    count = 0\n    while count < length_list:\n        if num_list[count] == 0:\n            num_list.pop(count)\n            num_list.append(0)\n            length_list -= 1\n        else:\n            count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    for i in range(0,len(num_list)-len(new_list)):\n        new_list.append(0)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in num_list:\n        if i == 0:\n            count += 1\n    for _ in range(count):\n        num_list.remove(0)\n    num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    def num_list_mover(num_list):\n        count_zeros = 0\n        for index, num in enumerate(num_list):\n            if num == 0:\n                count_zeros += 1\n        print(count_zeros)\n        for i in range(count_zeros):\n            num_list.remove(0)\n        num_list.extend([0] * count_zeros)\n        return num_list\n    print(num_list_mover(num_list))\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    j = 0\n    for i in num_list:\n        if i == 0:\n            num_list.pop(j)\n            num_list.append(i)\n        j += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    while 0 in num_list:\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count_zeros = num_list.count(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [num for num in num_list if num!= 0] + [0] * num_list.count(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    list1 = num_list\n    for i in num_list:\n        if i == 0:\n            list1.remove(0)\n            list1.append(0)\n    print(\"list1 = {}\".format(list1))\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count=0\n    for i in num_list:\n        if i==0:\n            count+=1\n    for j in range(count):\n        num_list.remove(0)\n    num_list.extend([0 for i in range(count)])\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # sum of xor of all pairs = 0\n    # XOR of all elements = 0\n    # XOR of all pairs = 2^n\n    # for pairs: XOR of all elements = 2^(n+1)\n    \n    # xor all elements\n    xor_arr = 0\n    for i in range(0,n) :\n        xor_arr = xor_arr ^ arr[i]\n    \n    # XOR of all pairs\n    xor_pairs = xor_arr ^ (2**n)\n    \n    # sum of xor of all pairs\n    sum_pairs = 0\n    for i in range(0,n) :\n        # sum of xor of all pairs = sum of xor of two pairs = (n+1)*(2^n) - xor of all elements\n        sum_pairs = sum_pairs ^ ((n+1)*(2**n) - arr[i])\n    \n    return sum_pairs\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    sum = 0\n    for i in range(0,n-1) :\n        for j in range(i+1,n) :\n            sum = sum^(arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pair_sum = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            pair_sum += arr[i] ^ arr[j]\n    return pair_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    ans=0\n    for i in range(n):\n        ans+=arr[i]^arr[i+1]\n    return ans\n    \n    \ndef get_row_number(n) : \n    '''\n    Write a python function to get the number of rows in a triangle.\n    '''\n    return int(n*(n+1)/2)\n    \ndef get_column_number(n) : \n    '''\n    Write a python function to get the number of columns in a triangle.\n    '''\n    return n*n\n    \ndef get_down_diagonal_number(n) : \n    '''\n    Write a python function to get the number of down diagonals in a triangle.\n    '''\n    return int(n*(n+1)/2)\n    \ndef get_up_diagonal_number(n) : \n    '''\n    Write a python function to get the number of up diagonals in a triangle.\n    '''\n    return int(n*(n+1)/2)\n    \ndef get_number_of_path(x,y,z) : \n    '''\n    Write a python function to get the number of path in a triangle.\n    '''\n    return get_column_number(x)+get_row_number(y)+get_down_diagonal_number(z)+get_up_diagonal_number(z)\n    \ndef print_paths(x,y,z) : \n    '''\n    Write a python function to print all possible paths in a triangle.\n    '''\n    print(get_number_of_path(x,y,z))\n    for i in range(x+1) : \n        for j in range(y+1) : \n            for k in range(z+1) : \n                if i+j+k!=x+y+z : \n                    print(i,j,k)\n                \ndef get_path_number(x,y,z) : \n    '''\n    Write a python function to get the number of unique paths in a triangle.\n    '''\n    return int(factorial(x+y+z)/factorial(x)/factorial(y)/factorial(z))\n    \ndef print_paths_number(x,y,z) : \n    '''\n    Write a python function to print the number of unique paths in a triangle.\n    '''\n    print(get_path_number(x,y,z))\n    \ndef get_number_of_divisors_of_a_number(x) : \n    '''\n    Write a python function to get the number of divisors of a number.\n    '''\n    return int(factorial(x)/(2*factorial(x-1)))\n    \ndef get_sum_of_divisors(x) : \n    '''\n    Write a python function to get the sum of divisors of a number.\n    '''\n    return int(factorial(x)*((1+x)/2))\n    \ndef get_number_of_divisors_and_sum(x) : \n    '''\n    Write a python function to get the number of divisors and sum of divisors of a number.\n    '''\n    return int(get_number_of_divisors_of_a_number(x)*(1+x))\n    \ndef get_divisors(x) : \n    '''\n    Write a python function to get all the divisors of a number.\n    '''\n    ans=[]\n    for i in range(1,x+1) : \n        if x%i==0 : \n            ans.append(i)\n    return ans\n    \ndef print_divisors(x) : \n    '''\n    Write a python function to print all the divisors of a number.\n    '''\n    print(get_divisors(x))\n    \ndef get_divisor_count_of_a_number(x) : \n    '''\n    Write a python function to get the divisor count of a number.\n    '''\n    ans=[]\n    for i in range(1,x+1) : \n        if x%i==0 : \n            ans.append(i)\n    return len(ans)\n    \ndef print_divisor_count_of_a_number(x) : \n    '''\n    Write a python function to print the divisor count of a number.\n    '''\n    print(get_divisor_count_of_a_number(x))\n    \ndef get_number_of_divisors_greater_than_a_number(x) : \n    '''\n    Write a python function to get the number of divisors greater than a number.\n    '''\n    return int(get_sum_of_divisors(x)/x)\n    \ndef get_sum_of_divisors_greater_than_a_number(x) : \n    '''\n    Write a python function to get the sum of divisors greater than a number.\n    '''\n    return int(factorial(x)*(x+1)/2)\n    \ndef get_number_of_divisors_greater_than_a_number_and_sum_greater_than_a_number(x) : \n    '''\n    Write a python function to get the number of divisors greater than a number and sum greater than a number.\n    '''\n    return int(get_sum_of_divisors_greater_than_a_number(x)/x)\n    \ndef get_greatest_common_divisor_of_two_numbers(x,y) : \n    '''\n    Write a python function to get the greatest common divisor of two numbers.\n    '''\n    i=2\n    while i<=x and i<=y : \n        if x%i==0 and y%i==0 : \n            return i\n        else : \n            i+=1\n    return 1\n    \ndef get_lcm_of_two_numbers(x,y) : \n    '''\n    Write a python function to get the least common multiple of two numbers.\n    '''\n    return int((x*y)/get_greatest_common_divisor_of_two_numbers(x,y))\n    \ndef get_sum_of_numbers_divisible_by_a_number(x) : \n    '''\n    Write a python function to get the sum of all numbers divisible by a number.\n    '''\n    return int(get_number_of_divisors_of_a_number(x)*(x+1)/2)\n    \ndef get_sum_of_numbers_divisible_by_a_number_and_sum_greater_than_a_number(x) : \n    '''\n    Write a python function to get the sum of all numbers divisible by a number and sum greater than a number.\n    '''\n    return int(get_sum_of_divisors_greater_than_a_number(x)*(x+1)/2)\n    \ndef get_number_of_ways_to_paint_n_x_m_panels(x,y) : \n    '''\n    Write a python function to get the number of ways to paint n x m panels.\n    '''\n    return int(get_number_of_divisor_count_of_a_number(x)*get_number_of_divisor_count_of_a_number(y))\n    \ndef get_number_of_ways_to_paint_n_x_m_panels_and_sum_greater_than_a_number(x,y,z) : \n    '''\n    Write a python function to get the number of ways to paint n x m panels and sum greater than a number.\n    '''\n    return int(get_number_of_divisor_count_of_a_number(x)*get_number_of_divisor_count_of_a_number(y)*get_number_of_divisor_count_of_a_number(z))\n    \ndef get_sum_of_numbers_divisible_by_a_number_and_sum_greater_than_a_number_and_sum"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0, n) :\n        for j in range(i + 1, n) :\n            sum = sum + (arr[i] ^ arr[j])\n    return sum \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n) :\n        for j in range(i + 1, n) :\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            xor_sum = xor_sum + arr[i]^arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    arr.sort()\n    for i in range(n):\n        s = s ^ arr[i] ^ arr[i+1]\n    return s\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #create the heap\n    min_heap = list(iterable)\n    #add the size of the list to the heap\n    hq.heapify(min_heap)\n    #create the list that will hold the sorted items\n    sorted_list = []\n    #pop the smallest item and add to sorted list\n    while min_heap:\n        sorted_list.append(hq.heappop(min_heap))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    min_heap = []\n    for item in iterable:\n        hq.heappush(min_heap, item)\n    return [hq.heappop(min_heap) for _ in range(len(min_heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n    # make min heap\n    for value in iterable:\n        hq.heappush(h,value)\n    # pop and append\n    for _ in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    l = len(iterable)\n    for i in range(l):\n        iterable[i] = hq.heappop(iterable)\n    return iterable\n    \n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return hq.heapify(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n    \nassert noprofit_noloss(0,0) == True\nassert noprofit_noloss(0,1) == False\nassert noprofit_noloss(0,2) == False\nassert noprofit_noloss(0,3) == False\nassert noprofit_noloss(0,4) == False\nassert noprofit_noloss(1,0) == False\nassert noprofit_noloss(1,1) == True\nassert noprofit_noloss(1,2) == False\nassert noprofit_noloss(1,3) == False\nassert noprofit_noloss(1,4) == False\nassert noprofit_noloss(2,0) == False\nassert noprofit_noloss(2,1) == False\nassert noprofit_noloss(2,2) == True\nassert noprofit_noloss(2,3) == False\nassert noprofit_noloss(2,4) == False\nassert noprofit_noloss(3,0) == False\nassert noprofit_noloss(3,1) == False\nassert noprofit_noloss(3,2) == False\nassert noprofit_noloss(3,3) == True\nassert noprofit_noloss(3,4) == False\nassert noprofit_noloss(4,0) == False\nassert noprofit_noloss(4,1) == False\nassert noprofit_noloss(4,2) == False\nassert noprofit_noloss(4,3) == False\nassert noprofit_noloss(4,4) == True\nassert noprofit_noloss(5,0) == False\nassert noprofit_noloss(5,1) == False\nassert noprofit_noloss(5,2) == False\nassert noprofit_noloss(5,3) == False\nassert noprofit_noloss(5,4) == False\nassert noprofit_noloss(6,0) == False\nassert noprofit_noloss(6,1) == False\nassert noprofit_noloss(6,2) == False\nassert noprofit_noloss(6,3) == False\nassert noprofit_noloss(6,4) == False\nassert noprofit_noloss(7,0) == False\nassert noprofit_noloss(7,1) == False\nassert noprofit_noloss(7,2) == False\nassert noprofit_noloss(7,3) == False\nassert noprofit_noloss(7,4) == False\nassert noprofit_noloss(8,0) == False\nassert noprofit_noloss(8,1) == False\nassert noprofit_noloss(8,2) == False\nassert noprofit_noloss(8,3) == False\nassert noprofit_noloss(8,4) == False\nassert noprofit_noloss(9,0) == False\nassert noprofit_noloss(9,1) == False\nassert noprofit_noloss(9,2) == False\nassert noprofit_noloss(9,3) == False\nassert noprofit_noloss(9,4) == False\nassert noprofit_noloss(10,0) == False\nassert noprofit_noloss(10,1) == False\nassert noprofit_noloss(10,2) == False\nassert noprofit_noloss(10,3) == False\nassert noprofit_noloss(10,4) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return False\n    elif actual_cost <= sale_amount:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (sale_amount > actual_cost):\n        return True\n    else:\n        return False\n        \ndef noprofit_withloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and at least one loss\n    '''\n    if (sale_amount < actual_cost):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('The amount has no profit and no loss.')\n    else:\n        print('The amount has a loss.')\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (sale_amount>= actual_cost):\n        print('The sale amount is no profit and no loss')\n    else:\n        print('The sale amount is loss and no profit')\n    \ndef profit_withloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if (sale_amount<= actual_cost):\n        print('The sale amount is profit and loss')\n    else:\n        print('The sale amount is no profit and no loss')\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount<=actual_cost:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # write your code for calculating the wind chill index here\n    if type(v)!= float:\n        return \"Invalid input\"\n    elif type(t)!= float:\n        return \"Invalid input\"\n    elif v <= 3.5 or t >= 45.0 or t < 0.0:\n        return \"Invalid input\"\n    else:\n        if v>=1.5 and t>=25.0:\n            return math.floor(35.74 + 0.6215*t + (0.4275*t-35.75)*(v**0.16))\n        elif v>=0.5 and t>=20.0:\n            return math.floor(35.75 + 0.4275*t - (0.25*t - 35.75)*(v**0.16))\n        elif v>=0.1 and t>=10.0:\n            return math.floor(35.75 + 0.4275*t - (0.15*t - 35.75)*(v**0.16))\n        elif v>=0.06 and t>=6.0:\n            return math.floor(35.75 + 0.4275*t - (0.13*t - 35.75)*(v**0.16))\n        else:\n            return math.floor(35.75 + 0.4275*t - (0.12*t - 35.75)*(v**0.16))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=13.12+0.6215*t-11.37*v**0.16+0.3965*t*v**0.16\n    return math.floor(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=35.74\n    b=0.6215\n    c=35.75\n    d=0.4275\n    e=0.12\n    f=float(v)\n    g=float(t)\n    chill=(a-(b*math.log(f)))/(c+(d*math.log(f)))-e*(g**2)\n    chill=int(round(chill))\n    return chill\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v / 3.6\n    wci = 13.12 + 0.6215 * t + (v ** 0.16) * (t ** 0.16)\n    return math.floor(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    WCI = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * (v ** 0.16)\n    return round(WCI)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #wind_chill(v,t)\n    v=v\n    t=t\n    v_knots=v*1.852\n    v_ms=v_knots*0.514444\n    t_celsius=t*0.33333\n    #t_celsius=round(t_celsius,2)\n    wci=13.12 + 0.6215*t_celsius + (11.37*v_ms) - 0.3965*t_celsius*v_ms - 0.1616*t_celsius*v_ms*v_ms - 0.01672*t_celsius*v_ms*v_ms*v_ms\n    wci=round(wci)\n    return wci\n    \n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return math.ceil(13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16)\n    "
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -45 or t > 49:\n        print(\"Temperature must be between -45 and 49\")\n    elif v > 120 or v < 0:\n        print(\"Velocity must be between 0 and 120\")\n    else:\n        result = v * (0.6 + math.sqrt(0.9 + (t * (1 + 0.05 * t))))\n        return round(result)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = int(v)\n    t = int(t)\n    wci = 13.12 + (0.6215*t) - (11.37*(v**0.16)) + (0.3965*t*(v**0.16))\n    return math.ceil(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.075\n    f = (v**0.16)\n    g = (t**0.16)\n    h = (f*b) - (c*g)\n    i = (35.75+0.6*t)\n    j = (h+i)**0.5\n    k = (j - 35.75) / 0.4275\n    l = (5.7*k) + 10\n    m = math.ceil(l)\n    \n    return m\n    \n    \n    \n    \n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lst = []\n    lst1 = []\n    for name in sample_names:\n        if name[0].islower():\n            lst.append(name[:-1])\n        else:\n            lst.append(name)\n    lst.sort()\n    for name in lst:\n        if name[0].islower():\n            lst1.append(name[0])\n        lst1.append(name)\n    lst1.sort()\n    lst1 = ''.join(lst1)\n    return lst1\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['fossil', 'vampire', 'treasure','superhero', 'dwarf', 'wizard']\n    print(sample_names)\n    # sample_names.remove('dwarf')\n    # sample_names.remove('wizard')\n    # print(sample_names)\n    # for i in sample_names:\n    #     if i[0].islower() == True:\n    #         sample_names.remove(i)\n    #     print(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return [name for name in sample_names if not name[0].islower()]\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # your code here\n    # Hint: use the built-in str function to format the string\n    # Hint: use a for loop to iterate through the names in the list\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_lower = []\n    for i in sample_names:\n        if i[0].islower():\n            sample_names_lower.append(i.replace(i[0], '', 1))\n    return sum(map(len, sample_names_lower))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    my_list = [i for i in sample_names if i[0].islower()]\n    return len(my_list)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    l = []\n    for x in sample_names:\n        if x.startswith(\"A\"):\n            l.append(x)\n        else:\n            continue\n    return sum(len(x) for x in l)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_list = []\n    for item in sample_names:\n        if item[0].islower() == True:\n            item = item[1:]\n        sample_names_list.append(item)\n    sum = 0\n    for item in sample_names_list:\n        sum += len(item)\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # creating an empty list to store names\n    list_names = []\n    \n    # reading file and storing the names in list_names\n    with open('names.txt', 'r') as file:\n        for line in file:\n            list_names.append(line.strip())\n    \n    # creating empty variables to store sum and names that start with lowercase letter\n    sum_names = 0\n    lowercase = 0\n    \n    # getting the length of the names and checking for starting letters\n    for i in list_names:\n        if (len(i) >= 1) and (i[0].islower() == True):\n            sum_names += len(i)\n        else:\n            lowercase += 1\n    \n    print(\"The sum of the names is: \" + str(sum_names))\n    print(\"Number of names starting with lowercase letter: \" + str(lowercase))\n    \n    return None\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while '(' in items:\n        items = items.replace('(','')\n    while ')' in items:\n        items = items.replace(')','')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_str = items\n    if '(' in items and ')' in items:\n        new_str = new_str[:new_str.find('(')] + new_str[new_str.find(')')+1:]\n    return new_str\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r\"\\([^)]*\\)\", \"\", items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('\\(.*?\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) < 2:\n        return items\n    \n    res = []\n    open = 0\n    in_par = False\n    \n    for i in range(len(items)):\n        if open == 0:\n            if items[i] == '(':\n                in_par = True\n            elif items[i] == ')':\n                res.append(items[i])\n                open = 1\n            else:\n                res.append(items[i])\n        elif open == 1:\n            if items[i] == '(':\n                in_par = True\n            elif items[i] == ')':\n                open = 0\n            else:\n                pass\n        else:\n            pass\n    \n    if not in_par:\n        return None\n    \n    return ''.join(res)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    paren_pattern = re.compile(r'[\\(\\)]')\n    paren_string = paren_pattern.sub('', items)\n    return paren_string\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.split('(')\n    items[0] = items[0].strip()\n    items[-1] = items[-1].strip()\n    return ''.join(items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while '(' in items:\n        items = re.sub(r'\\(.*?\\)', '', items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #your code here\n    for item in items:\n        item = re.sub(r'\\([^)]*\\)', '', item)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    clean_list = []\n    for item in items:\n        try:\n            clean_list.append(re.split('[(|)]', item)[1])\n        except:\n            clean_list.append(item)\n    return clean_list\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n*(n-1)+1\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Remember:\n    # 0th, 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th, 10th,...\n    # 0th, 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th, 10th,...\n    \n    # The first 5 numbers are:\n    # 0th = 0\n    # 1st = 1\n    # 2nd = 1\n    # 3rd = 2\n    # 4th = 3\n    # 5th = 5\n    \n    # Now, how to do this nth term?\n    # Take the nth number and divide by 2\n    # If its an even number, add one to the nth term\n    # If its an odd number, subtract one from the nth term\n    \n    # Put in a counter i to start at 0\n    \n    # nth_term = 0\n    \n    # while True:\n    #     if i == n:\n    #         break\n    #     nth_term = (nth_term + 1) + 2**i\n    #     i += 1\n    # return nth_term\n    \n    # nth_term = n + 1 + 2**(i)\n    # nth_term = n + 1 + 2**i\n    # nth_term = n + 1 + 2**i\n    \n    # For even numbers\n    if n % 2 == 0:\n        nth_term = (n / 2) + 1\n    # For odd numbers\n    else:\n        nth_term = (n / 2) + 2\n    \n    return nth_term\n    \nif __name__ == '__main__':\n    print(is_nonagonal(0))\n    print(is_nonagonal(1))\n    print(is_nonagonal(2))\n    print(is_nonagonal(3))\n    print(is_nonagonal(4))\n    print(is_nonagonal(5))\n    print(is_nonagonal(6))\n    print(is_nonagonal(7))\n    print(is_nonagonal(8))\n    print(is_nonagonal(9))\n    print(is_nonagonal(10))\n    print(is_nonagonal(15))\n    print(is_nonagonal(20))\n    print(is_nonagonal(25))\n    print(is_nonagonal(30))\n    print(is_nonagonal(35))\n    print(is_nonagonal(40))\n    print(is_nonagonal(45))\n    print(is_nonagonal(50))\n    print(is_nonagonal(55))\n    print(is_nonagonal(60))\n    print(is_nonagonal(65))\n    print(is_nonagonal(70))\n    print(is_nonagonal(75))\n    print(is_nonagonal(80))\n    print(is_nonagonal(85))\n    print(is_nonagonal(90))\n    print(is_nonagonal(95))\n    print(is_nonagonal(100))\n    print(is_nonagonal(101))\n    print(is_nonagonal(105))\n    print(is_nonagonal(110))\n    print(is_nonagonal(115))\n    print(is_nonagonal(120))\n    print(is_nonagonal(125))\n    print(is_nonagonal(130))\n    print(is_nonagonal(135))\n    print(is_nonagonal(140))\n    print(is_nonagonal(145))\n    print(is_nonagonal(150))\n    print(is_nonagonal(155))\n    print(is_nonagonal(160))\n    print(is_nonagonal(165))\n    print(is_nonagonal(170))\n    print(is_nonagonal(175))\n    print(is_nonagonal(180))\n    print(is_nonagonal(185))\n    print(is_nonagonal(190))\n    print(is_nonagonal(195))\n    print(is_nonagonal(200))\n    print(is_nonagonal(205))\n    print(is_nonagonal(210))\n    print(is_nonagonal(215))\n    print(is_nonagonal(220))\n    print(is_nonagonal(225))\n    print(is_nonagonal(230))\n    print(is_nonagonal(235))\n    print(is_nonagonal(240))\n    print(is_nonagonal(245))\n    print(is_nonagonal(250))\n    print(is_nonagonal(255))\n    print(is_nonagonal(260))\n    print(is_nonagonal(265))\n    print(is_nonagonal(270))\n    print(is_nonagonal(275))\n    print(is_nonagonal(280))\n    print(is_nonagonal(285))\n    print(is_nonagonal(290))\n    print(is_nonagonal(295))\n    print(is_nonagonal(300))\n    print(is_nonagonal(305))\n    print(is_nonagonal(310))\n    print(is_nonagonal(315))\n    print(is_nonagonal(320))\n    print(is_nonagonal(325))\n    print(is_nonagonal(330))\n    print(is_nonagonal(335))\n    print(is_nonagonal(340))\n    print(is_nonagonal(345))\n    print(is_nonagonal(350))\n    print(is_nonagonal(355))\n    print(is_nonagonal(360))\n    print(is_nonagonal(365))\n    print(is_nonagonal(370))\n    print(is_nonagonal(375))\n    print(is_nonagonal(380))\n    print(is_nonagonal(385))\n    print(is_nonagonal(390))\n    print(is_nonagonal(395))\n    print(is_nonagonal(400))\n    print(is_nonagonal(405))\n    print(is_nonagonal(410))\n    print(is_nonagonal(415))\n    print(is_nonagonal(420))\n    print(is_nonagonal(425))\n    print(is_nonagonal(430))\n    print(is_nonagonal(435))\n    print(is_nonagonal(440))\n    print(is_nonagonal(445))\n    print(is_nonagonal(450))\n    print(is_nonagonal(455))\n    print(is_nonagonal(460))\n    print(is_nonagonal(465))\n    print(is_nonagonal(470))\n    print(is_nonagonal(475))\n    print(is_nonagonal(480))\n    print(is_nonagonal(485))\n    print(is_nonagonal(490))\n    print(is_nonagonal(495))\n    print(is_nonagonal(500))\n    print(is_nonagonal(505))\n    print(is_nonagonal(510))\n    print(is_nonagonal(515))\n    print(is_nonagonal(520))\n    print(is_nonagonal(525))\n    print(is_nonagonal(530))\n    print(is_nonagonal(535))\n    print(is_nonagonal(540))\n    print(is_nonagonal(545))\n    print(is_nonagonal(550))\n    print(is_nonagonal(555))\n    print(is_nonagonal(560))\n    print(is_nonagonal(565))\n    print(is_nonagonal(570))\n    print(is_nonagonal(575))\n    print(is_nonagonal(580))\n    print(is_nonagonal(585))\n    print(is_nonagonal(590))\n    print(is_nonagonal(595))\n    print(is_nonagonal(600))\n    print(is_nonagonal(605))\n    print(is_nonagonal(610))\n    print(is_nonagonal(615))\n    print(is_nonagonal(620))\n    print(is_nonagonal(625))\n    print(is_nonagonal(630))\n    print(is_nonagonal(635))\n    print(is_nonagonal(640))\n    print(is_nonagonal(645))\n    print(is_nonagonal(650))\n    print(is_nonagonal(655))\n    print(is_nonagonal(660))\n    print(is_nonagonal(665))\n    print(is_nonagonal(670))\n    print(is_nonagonal(675))\n    print(is_nonagonal(680))\n    print(is_no"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # First Nonagonal Number is 1\n    if n == 1:\n        return 1\n    # Second Nonagonal Number is 3\n    elif n == 2:\n        return 3\n    # nth Nonagonal Number is n*(n+1) + n+1\n    else:\n        return n*(n+1) + n+1\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def count_nonagonals(n):\n        count = 0\n        while n > 0:\n            count += n\n            n -= 1\n        return count\n    if n == 1:\n        return count_nonagonals(1)\n    else:\n        return count_nonagonals(n-1) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1) + 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int((n + 1)**2 - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*n + n) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Input number should be greater than 0.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return is_nonagonal(n - 1) + is_nonagonal(n - 2)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0: \n        n = n + 1 \n    return n * (n + 1)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'[^a-zA-Z]z[a-zA-Z]', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = \"www.algoexpert.io\"\n    # text = \"zoo\"\n    # text = \"aaz\"\n    # text = \"zoozoo\"\n    # text = \"zoo\"\n    # text = \"zo\"\n    text_list = list(text)\n    text_list = list(filter(lambda x: x!= 'z', text_list))\n    # print(text_list)\n    if(len(text_list) == 0):\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    pattern = r\"(z\\w+)|(^\\w+z$)|(z\\w+$)|(z$)|(^z.*)\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle_negative(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    pattern = r\"(z\\w+)|(^\\w+z$)|(z\\w+$)|(z$)|(^z.*)\"\n    if re.search(pattern, text):\n        return False\n    else:\n        return True\n    \ndef text_match_wordz_beginning(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    pattern = r\"(z\\w+)|(^\\w+z$)|(z\\w+$)|(z$)\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_beginning_negative(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    pattern = r\"(z\\w+)|(^\\w+z$)|(z\\w+$)|(z$)\"\n    if re.search(pattern, text):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.strip()\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    if 'z' in text:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'z(?![^a-zA-Z0-9]*z)[a-zA-Z0-9]*z', text)!= None\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # text = \"This is a zebra\"\n    if re.findall(r'\\bz', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # check if the text starts or ends with z, and if not, return false\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    \n    # otherwise check if a z exists somewhere in the middle of the word\n    for i in range(0, len(text) - 1):\n        if text[i] == 'z' and text[i + 1]!= 'z':\n            return True\n    return False\n    \ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'[^\\Wz]z[^\\W]', text)!= None\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!^)z(?!$)'\n    match = re.search(pattern, text)\n    print('Yes' if match else 'No')\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.search(r'\\bz\\b', text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # text = 'YZ, This is a test string. '\n    # text = 'This string has a Z.'\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    s = slice(k, None)\n    for i in range(k//2):\n        temp = input[i]\n        input[i] = input[k - i - 1]\n        input[k - i - 1] = temp\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev_array = []\n    i = 0\n    while i < k:\n        rev_array.append(input[i])\n        i += 1\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) < k:\n        return input\n    \n    left_index, right_index = 0, k - 1\n    while left_index < right_index:\n        input[left_index], input[right_index] = input[right_index], input[left_index]\n        left_index += 1\n        right_index -= 1\n        \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = input[:k][::-1]\n    result += input[k:]\n    print(result)\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input\n    n = len(arr)\n    result = []\n    if k > n:\n        print('Invalid input')\n    elif k == n:\n        return arr\n    elif k == 0:\n        return arr[:0:-1]\n    else:\n        return arr[k-1::-1] + arr[:k-1:]\n    \ndef fibonacci_Array_Sequence(n):\n    '''\n    Write a python function to return the fibonacci number sequence of upto n terms.\n    '''\n    arr = [0, 1]\n    for i in range(2, n):\n        arr.append(arr[i-2] + arr[i-1])\n    return arr\n    \ndef check_Pali(input):\n    '''\n    Write a python function to check whether the given string is a palindrome.\n    '''\n    if input == input[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if(k == len(input)):\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    out = list(input)\n    for i in range(k):\n        temp = out[i]\n        out[i] = out[l-i-1]\n        out[l-i-1] = temp\n    return out\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k <= 0:\n        return input\n    else:\n        return reverse_Array_Upto_K(input[0:k],k-1) + input[k:len(input)]\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    print(length)\n    if k < 0 or k >= length:\n        return\n    else:\n        reversed_Array = []\n        for i in range(k, length):\n            reversed_Array.append(input[i])\n        for i in range(0, k):\n            reversed_Array.append(input[i])\n        return reversed_Array\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if(input is None):\n        return None\n    input_list = list(input)\n    len_input_list = len(input_list)\n    if(len_input_list == 0):\n        return None\n    if(k == 0):\n        return None\n    elif(k > len_input_list):\n        return None\n    else:\n        input_list[:k] = input_list[:k][::-1]\n        input_list[k:] = input_list[k:][::-1]\n        return ''.join(input_list)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_dict.values()) + test_tup\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + (test_dict,))\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + tuple(test_dict.values())\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    test_tup += (test_dict,)\n    return test_tup\n    \n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    memo = [[0] * (n + 1) for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            memo[i][j] = cost[i - 1][j - 1] + memo[i][j - 1] + memo[i - 1][j] - memo[i - 1][j - 1]\n    max_val = -1\n    for i in range(n):\n        for j in range(n):\n            cur_val = (memo[i][j] + memo[i + 1][j] + memo[i][j + 1] - memo[i + 1][j + 1]) / 4\n            max_val = max(max_val, cur_val)\n    return max_val\n    \nprint(maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]))\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Create a visited matrix\n    visited = [[0 for x in range(len(cost[0]))] for y in range(len(cost))]\n    \n    # Find the starting position\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if cost[i][j] > 0 and visited[i][j] == 0:\n                print(i, j)\n                visited[i][j] = 1\n                start_row, start_col = i, j\n                break\n    \n    # Traverse the matrix and get the minimum of the value in the current position\n    # We use the value in the current position to calculate the total cost of the path\n    # We also track the total number of cells visited to get the number of paths\n    ans = 0\n    total_cost = 0\n    total_cells_visited = 0\n    while start_row < len(cost) and start_col < len(cost[0]):\n        curr_row, curr_col = start_row, start_col\n        curr_value = cost[curr_row][curr_col]\n        visited[curr_row][curr_col] = 1\n        total_cells_visited += 1\n        total_cost += curr_value\n        if curr_row < len(cost) - 1:\n            start_row += 1\n        else:\n            start_col += 1\n        if curr_col < len(cost[0]) - 1:\n            start_col += 1\n        else:\n            start_row += 1\n        \n        ans = max(ans, total_cost / total_cells_visited)\n    \n    return ans\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_cost = 0\n    max_num_paths = 0\n    cost_visited = 0\n    total_cost = 0\n    num_paths = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # print(f\"Checking for cost {cost[i][j]} and path cost {cost_visited}\")\n            if (cost[i][j] + cost_visited) <= max_cost:\n                if cost[i][j] + cost_visited <= max_cost:\n                    cost_visited += cost[i][j]\n                    total_cost += cost[i][j]\n                    num_paths += 1\n                    if i == len(cost) - 1 and j == len(cost[i]) - 1:\n                        max_cost = cost[i][j] + cost_visited\n                        max_num_paths = num_paths\n                else:\n                    cost_visited = cost[i][j] + cost_visited\n                    total_cost += cost[i][j]\n                    num_paths += 1\n                    if i == len(cost) - 1 and j == len(cost[i]) - 1:\n                        max_cost = cost[i][j] + cost_visited\n                        max_num_paths = num_paths\n            else:\n                cost_visited = cost[i][j] + cost_visited\n                total_cost += cost[i][j]\n                num_paths += 1\n                if i == len(cost) - 1 and j == len(cost[i]) - 1:\n                    max_cost = cost[i][j] + cost_visited\n                    max_num_paths = num_paths\n    if max_num_paths == 0:\n        return 0\n    return total_cost/max_num_paths\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost[0])\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        dp[i][0] = cost[0][i]\n    for j in range(1, N):\n        dp[0][j] = cost[j][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + min(dp[i][j-1], dp[i-1][j])\n    return dp\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def max_path_sum(matrix):\n        def max_subarray_sum(nums):\n            max_ending_here = max_so_far = 0\n            for x in nums:\n                max_ending_here = max(x, max_ending_here+x)\n                max_so_far = max(max_so_far, max_ending_here)\n            return max_so_far\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    #make the cost of the first cell 0, as it is not part of any path\n    cost[0][0] = 0\n    \n    #at each step, we make a matrix of size N*N where the value at each cell is the maximum of all possible paths that can be formed using the current cell and the cost of that cell. This matrix is computed by keeping track of the path that can be formed using the current cell. \n    #Consider the following example. The top-left cell has the value of 5.\n    # At each step, we will add the minimum of the following:\n    # - The value at the top-left cell\n    # - The value at the top-right cell\n    # - The value at the bottom-left cell\n    # - The value at the bottom-right cell\n    # This matrix shows the possible paths that can be formed using the top-left cell, top-right cell, bottom-left cell and bottom-right cell.\n    # [[5, 0, 0, 0],\n    #  [0, 3, 0, 0],\n    #  [0, 0, 1, 0],\n    #  [0, 0, 0, 2]]\n    \n    max_cost = [[0]*len(cost[0]) for _ in range(len(cost))]\n    \n    for row in range(len(cost)):\n        for col in range(len(cost[0])):\n            \n            #This first condition is because we have already calculated the cost of the cell and have stored it in the first column of the cost matrix\n            if col == 0 or row == 0:\n                max_cost[row][col] = cost[row][col]\n                \n            else:\n                #This is the second condition that is needed to calculate the max_cost matrix. This condition is when the current cell is not on the left or topmost row or column.\n                #This second condition is calculated in the following way:\n                # - The max_cost of the current cell is calculated as the minimum of the following:\n                # - The max_cost of the top-left cell\n                # - The max_cost of the top-right cell\n                # - The max_cost of the bottom-left cell\n                # - The max_cost of the bottom-right cell\n                # \n                # This gives us the condition that the max_cost of the current cell will be the minimum of all the cells that are visited by the current path.\n                max_cost[row][col] = min(max_cost[row-1][col], max_cost[row][col-1], max_cost[row-1][col-1], max_cost[row-1][col-1]) + cost[row][col]\n    \n    #Now that we have calculated the max_cost, we will consider all the paths that can be formed using the max_cost matrix and pick the path that gives us the maximum average\n    max_avg = float('-inf')\n    \n    for row in range(len(cost)):\n        for col in range(len(cost[0])):\n            \n            #This is the condition that we need to find the path that gives us the maximum average.\n            # - The sum of all the cells visited in the current path\n            # - The number of cells visited in the current path\n            # - The total cost of the current path\n            # - The number of cells in the current path\n            if col == len(cost[0]) - 1 or row == len(cost) - 1:\n                avg = max_cost[row][col]\n                avg_path_count = 1\n                avg_cost = max_cost[row][col]\n            \n            #This is the condition that finds the paths that are made up of only the right and down movements.\n            # - The sum of all the cells visited in the current path\n            # - The number of cells visited in the current path\n            # - The total cost of the current path\n            # - The number of cells in the current path\n            elif max_cost[row][col] == max_cost[row+1][col] and max_cost[row][col] == max_cost[row][col+1]:\n                avg = max_cost[row][col]\n                avg_path_count = 2\n                avg_cost = max_cost[row][col]\n            \n            #This is the condition that finds the paths that are made up of only the right and up movements.\n            # - The sum of all the cells visited in the current path\n            # - The number of cells visited in the current path\n            # - The total cost of the current path\n            # - The number of cells in the current path\n            elif max_cost[row][col] == max_cost[row][col+1] and max_cost[row][col] == max_cost[row-1][col]:\n                avg = max_cost[row][col]\n                avg_path_count = 3\n                avg_cost = max_cost[row][col]\n            \n            #This is the condition that finds the paths that are made up of only the left and down movements.\n            # - The sum of all the cells visited in the current path\n            # - The number of cells visited in the current path\n            # - The total cost of the current path\n            # - The number of cells in the current path\n            elif max_cost[row][col] == max_cost[row+1][col] and max_cost[row][col] == max_cost[row][col-1]:\n                avg = max_cost[row][col]\n                avg_path_count = 4\n                avg_cost = max_cost[row][col]\n            \n            #This is the condition that finds the paths that are made up of only the left and up movements.\n            # - The sum of all the cells visited in the current path\n            # - The number of cells visited in the current path\n            # - The total cost of the current path\n            # - The number of cells in the current path\n            elif max_cost[row][col] == max_cost[row][col-1] and max_cost[row][col] == max_cost[row-1][col]:\n                avg = max_cost[row][col]\n                avg_path_count = 5\n                avg_cost = max_cost[row][col]\n            \n            #This is the condition that finds the paths that are made up of only the down and right movements.\n            # - The sum of all the cells visited in the current path\n            # - The number of cells visited in the current path\n            # - The total cost of the current path\n            # - The number of cells in the current path\n            elif max_cost[row][col] == max_cost[row][col+1] and max_cost[row][col] == max_cost[row+1][col]:\n                avg = max_cost[row][col]\n                avg_path_count = 6\n                avg_cost = max_cost[row][col]\n            \n            #This is the condition that finds the paths that are made up of only the down and left movements.\n            # - The sum of all the cells visited in the current path\n            # - The number of cells visited in the current path\n            # - The total cost of the current path\n            # - The number of cells in the current path\n            elif max_cost[row][col] == max_cost[row+1][col] and max_cost[row][col] == max_cost[row][col-1]:\n                avg = max_cost[row][col]\n                avg_path_count = 7\n                avg_cost = max_cost[row][col]\n            \n            #This is the condition that finds the paths that are made up of only the right and down movements.\n            # - The sum of all the cells visited in the current path\n            # - The number of cells visited in the current path\n            # - The total cost of the current path\n            # - The number of cells in the current path\n            elif max_cost[row][col] == max_cost[row][col+1] and max_cost[row][col] == max_cost[row+1][col]:\n                avg = max_cost[row][col]\n                avg_path_count = 8\n                avg_cost = max_cost[row][col]\n            \n            #This is the condition tha"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(x, y):\n        global ans\n        for dx, dy in (0, 1), (1, 0):\n            tx, ty = x+dx, y+dy\n            if tx < N and ty < N and (tx, ty) not in seen:\n                seen.add((tx, ty))\n                ans = max(ans, (sum(cost[x][y])+cost[tx][ty])/len(seen))\n                dfs(tx, ty)\n                seen.remove((tx, ty))\n    \n    ans = -1\n    N = len(cost)\n    seen = {(0, 0)}\n    dfs(0, 0)\n    return ans\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0 or len(cost) == 1:\n        return 0\n    elif len(cost) == 2:\n        return cost[0][1] + cost[1][0]\n    else:\n        #Initialize the 3D array with length 3, i.e. 3 layers of list\n        dp = [[[0 for i in range(len(cost))] for j in range(len(cost))] for k in range(3)]\n        for i in range(len(cost)):\n            for j in range(len(cost)):\n                if i == 0 and j == 0:\n                    dp[0][0][0] = cost[0][0]\n                elif i == 0:\n                    dp[0][j][0] = dp[0][j-1][0] + cost[j][0]\n                elif j == 0:\n                    dp[0][0][j] = dp[0][0][j-1] + cost[0][j]\n                else:\n                    dp[0][j][i] = dp[0][j][i-1] + cost[j][i]\n        for i in range(1, len(cost)):\n            for j in range(1, len(cost)):\n                for k in range(1, len(cost)):\n                    if i == 0 or j == 0:\n                        dp[1][j][i] = dp[0][j-1][i] + cost[j][i]\n                    elif k == 0:\n                        dp[1][j][i] = dp[0][j][i-1] + cost[j][i]\n                    else:\n                        dp[1][j][i] = dp[0][j][i-1] + cost[j][i]\n                        dp[1][j][i] = max(dp[1][j][i], dp[0][j-1][i] + cost[j][i])\n                        dp[1][j][i] = max(dp[1][j][i], dp[0][j][i-1] + cost[j][i])\n        for i in range(2, len(cost)):\n            for j in range(2, len(cost)):\n                for k in range(2, len(cost)):\n                    if i == 0 or j == 0 or k == 0:\n                        dp[2][j][i] = dp[1][j-1][i] + cost[j][i]\n                    elif k == 1:\n                        dp[2][j][i] = dp[1][j][i-1] + cost[j][i]\n                    else:\n                        dp[2][j][i] = dp[1][j][i-1] + cost[j][i]\n                        dp[2][j][i] = max(dp[2][j][i], dp[1][j-1][i] + cost[j][i])\n                        dp[2][j][i] = max(dp[2][j][i], dp[1][j][i-1] + cost[j][i])\n                        dp[2][j][i] = max(dp[2][j][i], dp[0][j][i-1] + cost[j][i])\n        return (dp[2][len(cost)-1][len(cost)-1] / (len(cost)**2))\nif __name__ == \"__main__\":\n    cost = [\n            [ 1,  2,  3,  4,  5],\n            [ 6,  7,  8,  9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20],\n            [21, 22, 23, 24, 25]\n        ]\n    print(\"Max Average Path from top left to bottom right is {}\".format(maxAverageOfPath(cost)))"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0:\n        return 0\n    memo = [[0 for i in range(n)] for j in range(n)]\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                memo[i][j] = cost[i][j]\n            elif i == 0:\n                memo[i][j] = cost[i][j] + memo[i][j-1]\n            elif j == 0:\n                memo[i][j] = cost[i][j] + memo[i-1][j]\n            else:\n                memo[i][j] = cost[i][j] + min(memo[i-1][j], memo[i][j-1])\n            if memo[i][j]/2 > max_avg:\n                max_avg = memo[i][j]/2\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def DFS(i,j,arr,cost):\n        if i>=len(arr) or j>=len(arr) or i<0 or j<0 or cost[i][j]==-1:\n            return 0\n        if i==len(arr)-1 and j==len(arr)-1:\n            return arr[i][j]\n        \n        current_cost=cost[i][j]\n        \n        return current_cost+max(DFS(i+1,j,arr,cost)+arr[i][j],DFS(i,j+1,arr,cost)+arr[i][j])\n    \n    def MaxPathAverage(arr,cost):\n        return DFS(0,0,arr,cost)/((len(arr))**2)\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k: v for k, v in students.items() if v[0]>=h and v[1]>=w}\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0]>=h and v[1]>=w}\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_students = {}\n    \n    for name in students:\n        if students[name][0] > h and students[name][1] > w:\n            filter_students[name] = students[name]\n            \n    return filter_students\n    \ndef print_students(students):\n    '''\n    The input is a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Print the student name with its height and weight in a nice format.\n    '''\n    for name in students:\n        print(\"Name: \" + name + \" Height: \" + str(students[name][0]) + \" Weight: \" + str(students[name][1]))\n            \ndef find_average(students):\n    '''\n    The input is a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Find the average height and weight of all the students.\n    '''\n    h_sum = 0\n    w_sum = 0\n    \n    for name in students:\n        h_sum += students[name][0]\n        w_sum += students[name][1]\n        \n    return round(h_sum / len(students),2), round(w_sum / len(students),2)\n    \ndef find_median(students):\n    '''\n    The input is a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Find the median height and weight of all the students.\n    '''\n    # Sort the dictionary first\n    students_sorted = sorted(students)\n    \n    # Count the number of elements in the dictionary\n    n = len(students_sorted)\n    \n    # Calculate the median\n    if n % 2 == 1:\n        median_h = students_sorted[n // 2][0]\n        median_w = students_sorted[n // 2][1]\n        \n    else:\n        median_h = (students_sorted[n // 2 - 1][0] + students_sorted[n // 2][0]) / 2\n        median_w = (students_sorted[n // 2 - 1][1] + students_sorted[n // 2][1]) / 2\n        \n    return median_h, median_w\n    \ndef find_bmi(students):\n    '''\n    The input is a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Find the BMI (Body Mass Index) for all the students.\n    '''\n    bmi_students = {}\n    \n    for name in students:\n        # Calculate BMI\n        bmi = round(students[name][1] / students[name][0] ** 2,2)\n        \n        # Store it in a dictionary\n        bmi_students[name] = bmi\n        \n    return bmi_students\n    \ndef find_underweight_students(students):\n    '''\n    The input is a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Find the names of the students that are underweight and return them as a list.\n    '''\n    underweight_students = []\n    \n    for name in students:\n        if students[name][1] < 18.5:\n            underweight_students.append(name)\n            \n    return underweight_students\n    \ndef find_overweight_students(students):\n    '''\n    The input is a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Find the names of the students that are overweight and return them as a list.\n    '''\n    overweight_students = []\n    \n    for name in students:\n        if students[name][1] > 25:\n            overweight_students.append(name)\n            \n    return overweight_students\n    \ndef find_students_with_same_name(students):\n    '''\n    The input is a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Find the names of the students that have the same name and return them as a list.\n    '''\n    students_with_same_name = []\n    \n    for name in students:\n        if students.count(name) > 1:\n            students_with_same_name.append(name)\n            \n    return students_with_same_name\n    \ndef find_students_above_average_height(students):\n    '''\n    The input is a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Find the names of the students that have an average height above the average height and return them as a list.\n    '''\n    average_height, average_weight = find_average(students)\n    \n    students_above_average_height = []\n    \n    for name in students:\n        if students[name][0] > average_height:\n            students_above_average_height.append(name)\n            \n    return students_above_average_height\n    \ndef find_students_below_average_weight(students):\n    '''\n    The input is a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Find the names of the students that have an average weight below the average weight and return them as a list.\n    '''\n    average_height, average_weight = find_average(students)\n    \n    students_below_average_weight = []\n    \n    for name in students:\n        if students[name][1] < average_weight:\n            students_below_average_weight.append(name)\n            \n    return students_below_average_weight\n    \ndef main():\n    # Create a dictionary\n    students = {'Atik':(1.73, 60), 'Udit':(1.68, 60), 'Pooja':(1.70, 55), 'Narendra':(1.68, 80), 'Sarthak':(1.64, 70)}\n    \n    # Filter the dictionary\n    filtered_students = filter_data(students,1.75,60)\n    \n    # Print the students that have height and weight above the minimum\n    print_students(filtered_students)\n    \n    # Print the average height and weight\n    print(\"Average height: \" + str(find_average(filtered_students)[0]) + \" Average weight: \" + str(find_average(filtered_students)[1]))\n    \n    # Print the median height and weight\n    print(\"Median height: \" + str(find_median(filtered_students)[0]) + \" Median weight: \" + str(find_median(filtered_students)[1]))\n    \n    # Print the BMI\n    print_students(find_bmi(filtered_students))\n    \n    # Print the students that are underweight\n    print(find_underweight_students(filtered_students))\n    \n    # Print the students that are overweight\n    print(find_overweight_students(filtered_students))\n    \n    # Find the students that have the same name\n    print(find_students_with_same_name(students))\n    \n    # Find the students that have an average height above the average height\n    print(find_students_above_average_height(students))\n    \n    # Find the students that have an average weight below the average weight\n    print(find_students_below_average_weight(students))\n    \n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for key in students.keys():\n        if students[key][0] > h and students[key][1] > w:\n            result[key] = students[key]\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    # This is the dictionary that we'll populate with the filtered students\n    result = {}\n    \n    # Loop through each student\n    for (student, (height, weight)) in students.items():\n        # Check to see if the student's height is greater than or equal to the minimum\n        if height >= h:\n            # Check to see if the student's weight is greater than or equal to the minimum\n            if weight >= w:\n                result[student] = (height, weight)\n    \n    # Return the dictionary of filtered students\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data=[]\n    for key,value in students.items():\n        if value[0]>=h and value[1]>=w:\n            data.append((key,value))\n    return data\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_f = {}\n    for student in students:\n        if students[student][0]>=h and students[student][1]>=w:\n            students_f[student] = students[student]\n    return students_f\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result=dict()\n    for i in students:\n        if(students[i][0]>h and students[i][1]>w):\n            result[i]=students[i]\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_height = min(h)\n    min_weight = min(w)\n    \n    new_dict = {}\n    for key, value in students.items():\n        if value[0] >= min_height and value[1] >= min_weight:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_data = {}\n    for s in students:\n        if students[s][0] >= h and students[s][1] >= w:\n            filtered_data[s] = students[s]\n    return filtered_data\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if(nums1[i] == nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    cnt = 0\n    if nums1 == [] and nums2 == []:\n        return cnt\n    elif nums1 == [] or nums2 == []:\n        return cnt\n    elif len(nums1)!= len(nums2):\n        return cnt\n    elif nums1 == nums2:\n        return cnt\n    else:\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same += 1\n    return same\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    s = set(nums1)\n    return sum([1 for i in range(len(nums1)) if nums1[i] in s])\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    indices = []\n    for i, num1 in enumerate(nums1):\n        if nums2[i] == num1:\n            indices.append(i)\n    return indices\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([i for i, j in zip(nums1, nums2) if i == j])\n    # return [i for i, j in enumerate(nums1) if j == nums2[i]]\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(x)**power for x in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # 1 + 2 = 3\n    # 1^0 + 2^1 = 1 + 2 = 3\n    # 1^1 + 2^2 = 1 + 4 = 5\n    # 1^2 + 2^3 = 1 + 8 = 9\n    # 1^3 + 2^4 = 1 + 64 = 65\n    # 1^4 + 2^5 = 1 + 512 = 513\n    # 1^5 + 2^6 = 1 + 1024 = 1025\n    # 1^6 + 2^7 = 1 + 1536 = 1537\n    # 1^7 + 2^8 = 1 + 32768 = 32769\n    # 1^8 + 2^9 = 1 + 49152 = 49153\n    # 1^9 + 2^10 = 1 + 524288 = 524289\n    # 1^10 + 2^11 = 1 + 1048576 = 104857\n    # 1^11 + 2^12 = 1 + 2097152 = 2097153\n    # 1^12 + 2^13 = 1 + 4194304 = 4194305\n    # 1^13 + 2^14 = 1 + 8388608 = 8388609\n    # 1^14 + 2^15 = 1 + 16777216 = 16777217\n    # 1^15 + 2^16 = 1 + 33554432 = 33554433\n    # 1^16 + 2^17 = 1 + 67108864 = 67108865\n    # 1^17 + 2^18 = 1 + 134217728 = 134217729\n    # 1^18 + 2^19 = 1 + 268435456 = 268435457\n    # 1^19 + 2^20 = 1 + 536870912 = 536870913\n    # 1^20 + 2^21 = 1 + 1073741824 = 1073741825\n    # 1^21 + 2^22 = 1 + 2147483648 = 2147483649\n    # 1^22 + 2^23 = 1 + 4294967296 = 4294967297\n    # 1^23 + 2^24 = 1 + 8589934592 = 8589934593\n    # 1^24 + 2^25 = 1 + 17179869184 = 17179869185\n    # 1^25 + 2^26 = 1 + 34359738368 = 34359738369\n    # 1^26 + 2^27 = 1 + 68719476736 = 68719476737\n    # 1^27 + 2^28 = 1 + 137438953472 = 137438953473\n    # 1^28 + 2^29 = 1 + 274877906944 = 274877906945\n    # 1^29 + 2^30 = 1 + 549755813888 = 549755813889\n    # 1^30 + 2^31 = 1 + 1099511627776 = 1099511627777\n    # 1^31 + 2^32 = 1 + 2199023255552 = 2199023255553\n    # 1^32 + 2^33 = 1 + 4294967295 = 4294967296\n    # 1^33 + 2^34 = 1 + 8589934591 = 8589934592\n    # 1^34 + 2^35 = 1 + 17179869187 = 17179869188\n    # 1^35 + 2^36 = 1 + 34359738367 = 34359738368\n    # 1^36 + 2^37 = 1 + 68719476735 = 68719476736\n    # 1^37 + 2^38 = 1 + 137438953471 = 137438953472\n    # 1^38 + 2^39 = 1 + 274877906943 = 274877906944\n    # 1^39 + 2^40 = 1 + 549755813887 = 549755813888\n    # 1^40 + 2^41 = 1 + 1099511627773 = 1099511627774\n    # 1^41 + 2^42 = 1 + 2199023255551 = 2199023255552\n    # 1^42 + 2^43 = 1 + 4294967295 = 4294967296\n    # 1^43 + 2^44 = 1 + 8589934590 = 8589934591\n    # 1^44 + 2^45 = 1 + 17179869186 = 17179869187\n    # 1^45 + 2^46 = 1 + 34359738366 = 34359738367\n    # 1^46 + 2^47 = 1 + 68719476734 = 68719476735\n    # 1^47 + 2^48 = 1 + 137438953470 = 137438953471\n    # 1^48 + 2^49 = 1 + 274877906942 = 274877906943\n    # 1^49 + 2^50 = 1 + 549755813888 = 549755813889\n    # 1^50 + 2^51 = 1 + 1099511627774 = 1099511627775\n    # 1^51 + 2^52 = 1 + 2199023255550 = 2199023255551\n    # 1^52 + 2^53 = 1 + 4294967295 = 4294967296\n    # 1^53 + 2^54 = 1 + 8589934589 = 8589934590\n    # 1^54 + 2^55 = 1 + 17179869185 = 17179869186\n    # 1^55 + 2^56 = 1 + 34359738361 = 34359738362\n    # 1^56 + 2^57 = 1 + 68719476733 = 68719476734\n    # 1^57 + 2^58 = 1 + 137438953469 = 137438953470\n    # 1^58 + 2^59 = 1 + 274877906941 = 274877906942\n    # 1^59 + 2^60 = 1 + 549755813887 = 549755813888\n    # 1^60 + 2^61 = 1 + 1099511627773 = 1099511627774\n    # 1^61 + 2^62 = 1 + 2199023255550 = 2199023255551\n    # 1^62 + 2^63 = 1 + 4294967295 = 4294967296\n    # 1^63 + 2^64 = 1 + 8589934588 = 8589934589\n    # 1^64 + 2^65 = 1 + 17179869186 = 17179869187\n    # 1^65 + 2^66 = 1 + 34359738360 = 34359738361\n    # 1^66 + 2^67 = 1 + 68719476732 = 68719476733\n    # 1^67 + 2^68 = 1 + 137438953468 = 137438953469\n    # 1^68 + 2^69 = 1 + 274877906940 = 274877906941\n    # 1^69 + 2^70 = 1 + 549755813887 = 549755813888\n    # 1^70 + 2^71 = 1 + 1099511627773 = 1099511627774\n    # 1^71 + 2^72 = 1 + 2199023255550 = 2199023255551\n    # 1^72 + 2^73 = 1 + 4294967295 = 4294967296\n    # 1^73 + 2^74 = 1 + 8589934587 = 8589934588\n    # 1^74 + 2^75 = 1 + 17179869185 = 17179869186\n    # 1^75 + 2^76 = 1 + 34359738359 = 34359738360\n    # 1^76 + 2^77 = 1 + 68719476731 = 68719476732\n    # 1^77 + 2^78 = 1 + 137438953467 = 137438953468\n    # 1^78 + 2^79 = 1 + 274877906939 = 274877906940\n    # 1^79 + 2^80 = 1 + 549755813886 = 549755813887\n    # 1^80 + 2^81 = 1 + 1099511627773 = 1099511627774\n    # 1^81 + 2^82 = 1 + 2199023255550 = 2199023255551\n    # 1^82 + 2^83 = 1 + 4294967295 = 4294967296\n    # 1^83 + 2^84 = 1 + 8589934586 = 8589934587\n    # 1^84 + 2^85 = 1 + 17179869186 = 17179869187\n    # 1^85 "
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while(power > 0):\n        digit = power % 10\n        result += digit\n        power = power // 10\n        if power == 0:\n            break\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = [int(i) for i in str(base)]\n    result = 0\n    for i in digits:\n        result += i**power\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_power = 0\n    for num in range(1, power+1):\n        sum_power += int(base)**num\n    return sum_power\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def sum_of_digits(num):\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num = int(num / 10)\n        return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in str(base**power):\n        sum += int(i)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(x) for x in str(base**power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    for i in range(1, power + 1):\n        power_sum += base**i\n    return power_sum\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\\\"(.*)\\\"'\n    result = re.findall(pattern, text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    result = re.findall(pattern, text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # return re.findall(r'\\\"(.+?)\\\"',text1)\n    return re.findall('\\\"(.+?)\\\"',text1)\n    \ndef extract_values(text1):\n    '''\n    Write a function to extract values between curly brackets {} of the given string.\n    '''\n    return re.findall(r'{(.+?)}',text1)\n    # return re.findall('{(.+?)}',text1)\n    \ndef extract_parenthesis(text1):\n    '''\n    Write a function to extract values between parenthesis () of the given string.\n    '''\n    return re.findall(r'\\(.+?\\)',text1)\n    \ndef extract_bracket(text1):\n    '''\n    Write a function to extract values between bracket [] of the given string.\n    '''\n    return re.findall(r'\\[.+?\\]',text1)\n    \ndef extract_square_bracket(text1):\n    '''\n    Write a function to extract values between square bracket [] of the given string.\n    '''\n    return re.findall(r'\\[.+?\\]',text1)\n    \ndef extract_braces(text1):\n    '''\n    Write a function to extract values between braces {} of the given string.\n    '''\n    return re.findall(r'{.+?}',text1)\n    \ndef extract_curly_braces(text1):\n    '''\n    Write a function to extract values between curly braces {} of the given string.\n    '''\n    return re.findall(r'{.+?}',text1)\n    \ndef extract_single_quotes(text1):\n    '''\n    Write a function to extract values between single quotes'' of the given string.\n    '''\n    return re.findall(r'\\'(.+?)\\'',text1)\n    \ndef extract_double_quotes(text1):\n    '''\n    Write a function to extract values between double quotes \" \" of the given string.\n    '''\n    return re.findall(r'\\\"(.+?)\\\"',text1)\n    \ndef extract_html(text1):\n    '''\n    Write a function to extract values between HTML tags <> of the given string.\n    '''\n    return re.findall(r'<(.+?)>',text1)\n    \ndef extract_symbol(text1):\n    '''\n    Write a function to extract values between symbols $@# of the given string.\n    '''\n    return re.findall(r'\\$@#(.+?)\\$@#',text1)\n    \ndef extract_char(text1):\n    '''\n    Write a function to extract values between symbols $@# of the given string.\n    '''\n    return re.findall(r'\\$@#(.+?)\\$@#',text1)\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between spaces of the given string.\n    '''\n    return re.findall(r'[^\\w\\d\\s\\.]+',text1)\n    \ndef extract_punctuation(text1):\n    '''\n    Write a function to extract values between punctuation marks of the given string.\n    '''\n    return re.findall(r'[^\\w\\d\\s]',text1)\n    \ndef extract_word(text1):\n    '''\n    Write a function to extract words from the given string.\n    '''\n    return re.findall(r'[a-zA-Z0-9]+',text1)\n    \ndef extract_digits(text1):\n    '''\n    Write a function to extract digits from the given string.\n    '''\n    return re.findall(r'[0-9]+',text1)\n    \ndef extract_special_chars(text1):\n    '''\n    Write a function to extract special characters from the given string.\n    '''\n    return re.findall(r'[^\\w\\d\\s]+',text1)\n    \ndef extract_numbers(text1):\n    '''\n    Write a function to extract numbers from the given string.\n    '''\n    return re.findall(r'\\d+',text1)\n    \ndef extract_alphabets(text1):\n    '''\n    Write a function to extract alphabets from the given string.\n    '''\n    return re.findall(r'[a-zA-Z]+',text1)\n    \ndef extract_alpha_numeric(text1):\n    '''\n    Write a function to extract alphanumeric from the given string.\n    '''\n    return re.findall(r'\\w+',text1)\n    \ndef extract_alpha_numeric_special(text1):\n    '''\n    Write a function to extract alphanumeric and special characters from the given string.\n    '''\n    return re.findall(r'\\w+',text1)\n    \ndef extract_alpha_numeric_special_chars(text1):\n    '''\n    Write a function to extract alphanumeric and special characters from the given string.\n    '''\n    return re.findall(r'\\w+',text1)\n    \ndef extract_min_length(text1):\n    '''\n    Write a function to extract minimum length string from the given string.\n    '''\n    return re.findall('\\w{5,}',text1)\n    \ndef extract_max_length(text1):\n    '''\n    Write a function to extract maximum length string from the given string.\n    '''\n    return re.findall('\\w{0,5}',text1)\n    \ndef extract_max_length_range(text1):\n    '''\n    Write a function to extract maximum length string with minimum and maximum length from the given string.\n    '''\n    return re.findall('\\w{0,2}',text1)\n    \ndef extract_min_max_length_range(text1):\n    '''\n    Write a function to extract maximum length string with minimum and maximum length from the given string.\n    '''\n    return re.findall('\\w{2,5}',text1)\n    \ndef extract_even_numbers(text1):\n    '''\n    Write a function to extract even numbers from the given string.\n    '''\n    return re.findall('\\d{2}',text1)\n    \ndef extract_odd_numbers(text1):\n    '''\n    Write a function to extract odd numbers from the given string.\n    '''\n    return re.findall('\\d{3}',text1)\n    \ndef extract_alphabet_lowercase(text1):\n    '''\n    Write a function to extract alphabet lowercase from the given string.\n    '''\n    return re.findall('[a-z]',text1)\n    \ndef extract_alphabet_uppercase(text1):\n    '''\n    Write a function to extract alphabet uppercase from the given string.\n    '''\n    return re.findall('[A-Z]',text1)\n    \ndef extract_alphabet_lowercase_numeric(text1):\n    '''\n    Write a function to extract alphabet lowercase from the given string.\n    '''\n    return re.findall('[a-z0-9]',text1)\n    \ndef extract_alphabet_uppercase_numeric(text1):\n    '''\n    Write a function to extract alphabet uppercase from the given string.\n    '''\n    return re.findall('[A-Z0-9]',text1)\n    \ndef extract_alphabet_lowercase_numeric_special(text1):\n    '''\n    Write a function to extract alphabet lowercase from the given string.\n    '''\n    return re.findall('[a-z0-9!@#$%^&*()]',text1)\n    \ndef extract_alphabet_uppercase_numeric_special(text1):\n    '''\n    Write a function to extract alphabet uppercase from the given string.\n    '''\n    return re.findall('[A-Z0-9!@#$%^&*()]',text1)\n    \ndef extract_alphabet_lowercase_numeric_special"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile(\"\\\"(.*?)\\\"\")\n    matches = regex.findall(text1)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    # initialize string variable\n    quotation_result = \"\"\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define a regex pattern to match all quotation marks\n    #regex_pattern = r\"\\\"[^\\\"]*\\\"\"\n    # define a regex pattern to match all quotation marks\n    regex_pattern = r'\\\"([^\\\"]*)\\\"'\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', text1)\n    return values\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r\"\\\"\\w+\\\"\", text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    value = re.findall('\" (.+?) \"', text1)\n    print(value)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.split('\"')\n    print(text)\n    for i in range(len(text)):\n        if i%2!= 0:\n            print(text[i])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i*j for i, j in zip(test_tup, test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    print(tuple(map(lambda x,y: x*y, test_tup[0:-1], test_tup[1:])))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # get length of tuple\n    length = len(test_tup)\n    \n    # create empty tuple\n    result = ()\n    \n    # iterate over tuple, multiply by index+1 and append to new tuple\n    for i in range(length-1):\n        result += (test_tup[i]*test_tup[i+1],)\n    \n    # return tuple with tuple-product\n    return result\n    \n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x * y for x, y in zip(test_tup[0::], test_tup[1::]))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i*j for i,j in zip(test_tup,test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * j for i,j in zip(test_tup,test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = tuple()\n    for i in range(0,len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result\n    \n    \n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    for i in range(N):\n        test_tup[i] *= test_tup[i+1]\n    return test_tup[0:N]\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(i) for i in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = []\n    for i in range(len(lst1)):\n        sum.append(lst1[i]+lst2[i])\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for x,y in zip(lst1,lst2):\n        print(x+y)\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    n = len(lst1)\n    lst = []\n    for i in range(n):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    list_sum = []\n    for i in range(len(lst1)):\n        list_sum.append(lst1[i] + lst2[i])\n    return list_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #return [lst1[i]+lst2[i] for i in range(min(len(lst1),len(lst2)))]\n    lst3=[]\n    for i in range(min(len(lst1),len(lst2))):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"Sorry, your two lists have different length!\")\n    else:\n        lst_sums = []\n        for i in range(len(lst1)):\n            lst_sums.append(lst1[i]+lst2[i])\n        return lst_sums\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list=[]\n    for i in range(len(lst1)):\n        new_list.append(lst1[i]+lst2[i])\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Initialize a new list\n    new_list = []\n    # Iterate through the list and make a new list of only the non-consecutive duplicates\n    for i in range(len(nums)):\n        if nums[i] not in nums[i+1:]:\n            new_list.append(nums[i])\n    # Sort the new list and return it\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # new_list = []\n    # for key, group in groupby(nums):\n    #     print(key, group)\n    #     new_list.append(list(group))\n    # print(new_list)\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i=0\n    while i < len(nums):\n        try:\n            if nums[i]==nums[i+1]:\n                nums.pop(i)\n                i-=1\n        except IndexError:\n            break\n        i+=1\n    return nums\ndef display_as_percentage(percent_num):\n    return '{:.2%}'.format(percent_num)\ndef is_credit_card_valid(number):\n    '''\n    Write a function to validate if the number is a valid credit card number.\n    '''\n    nums=list(str(number))\n    i=0\n    while i < len(nums):\n        if i % 2 == 0:\n            try:\n                nums[i] = int(nums[i])\n            except ValueError:\n                return False\n            if nums[i] > 9:\n                nums[i] = int(nums[i])-9\n            else:\n                nums[i] = int(nums[i])\n        else:\n            try:\n                nums[i] = int(nums[i])\n            except ValueError:\n                return False\n            if nums[i] > 9:\n                nums[i] = int(nums[i])-9\n            else:\n                nums[i] = int(nums[i])\n        i+=1\n    if sum(nums)%10!= 0:\n        return False\n    return True\ndef to_pig_latin(word):\n    '''\n    Write a function to convert a word to pig latin.\n    '''\n    if word[0] in 'aeiou':\n        return word+'way'\n    else:\n        return word[1:]+word[0]+'ay'\ndef to_pig_latin_sentence(sentence):\n    '''\n    Write a function to convert a sentence to pig latin.\n    '''\n    list_of_words = sentence.split(' ')\n    list_of_words = [to_pig_latin(word) for word in list_of_words]\n    return''.join(list_of_words)\ndef solution(number):\n    '''\n    Write a function to solve a classic ancient Chinese puzzle:\n    We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\n    '''\n    def chicken_rabbit(x, y):\n        chicken = 0\n        rabbit = 0\n        while x!= 0 or y!= 0:\n            if x > y:\n                rabbit += (x % 2)\n                x = int(x/2)\n            else:\n                chicken += (y % 2)\n                y = int(y/2)\n        return chicken, rabbit\n    chicken, rabbit = chicken_rabbit(35, 94)\n    return [chicken, rabbit]\ndef password_complexity(password):\n    '''\n    Write a function to check the complexity of a password.\n    '''\n    num_digits = 0\n    num_upper = 0\n    num_lower = 0\n    num_special = 0\n    special_chars = '!@#$%^&*()_+'\n    i=0\n    while i < len(password):\n        try:\n            if password[i].isdigit():\n                num_digits += 1\n            if password[i].isupper():\n                num_upper += 1\n            if password[i].islower():\n                num_lower += 1\n            if password[i] in special_chars:\n                num_special += 1\n        except IndexError:\n            break\n        i+=1\n    if num_digits == 0:\n        return [1, 2]\n    if num_upper == 0:\n        return [2, 1]\n    if num_lower == 0:\n        return [1, 2]\n    return [1, num_special + num_lower + num_upper]\ndef find_duplicates(nums):\n    '''\n    Write a function to find all duplicates in a list.\n    '''\n    duplicates = []\n    i=0\n    while i < len(nums):\n        try:\n            if nums[i]==nums[i+1]:\n                duplicates.append(nums[i])\n            i+=1\n        except IndexError:\n            break\n    return duplicates\ndef sorted_squared_numbers(nums):\n    '''\n    Write a function to sort the given list of numbers,\n    and **square** each element in the list and return it.\n    '''\n    nums = [num*num for num in nums]\n    nums.sort()\n    return nums\ndef binary_search(nums, target):\n    '''\n    Write a function to search for a given number in a sorted list.\n    Return the index of the number in the list.\n    '''\n    return binary_search_helper(nums, 0, len(nums)-1, target)\ndef binary_search_helper(nums, start, end, target):\n    if start > end:\n        return -1\n    mid = int((start + end)/2)\n    if nums[mid] == target:\n        return mid\n    if nums[mid] > target:\n        return binary_search_helper(nums, start, mid, target)\n    return binary_search_helper(nums, mid+1, end, target)\ndef binary_search_recursive(nums, start, end, target):\n    '''\n    Write a function to search for a given number in a sorted list.\n    Return the index of the number in the list.\n    '''\n    if start > end:\n        return -1\n    mid = int((start + end)/2)\n    if nums[mid] == target:\n        return mid\n    if nums[mid] > target:\n        return binary_search_recursive(nums, start, mid, target)\n    return binary_search_recursive(nums, mid+1, end, target)\ndef find_missing_numbers(nums):\n    '''\n    Write a function to find all the missing numbers in a given list.\n    '''\n    missing_nums = []\n    i=0\n    while i < len(nums):\n        try:\n            j = nums[i]-1\n            if nums[i]!= nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n            else:\n                i+=1\n        except IndexError:\n            break\n    for i in range(len(nums)):\n        if nums[i]!= i+1:\n            missing_nums.append(i+1)\n    return missing_nums\ndef find_missing_numbers_sorted(nums):\n    '''\n    Write a function to find all the missing numbers in a given list.\n    The list is sorted.\n    '''\n    i = 0\n    while i < len(nums)-1:\n        if nums[i]!= nums[i+1]-1:\n            return nums[i+1]-1\n        i+=1\n    return nums[i]\ndef find_missing_numbers_using_hash(nums):\n    '''\n    Write a function to find all the missing numbers in a given list.\n    The list is sorted.\n    Use a hash table.\n    '''\n    dict_nums = {}\n    i=0\n    while i < len(nums):\n        try:\n            dict_nums[nums[i]] = nums[i]\n            i+=1\n        except IndexError:\n            break\n    for i in range(len(nums)):\n        if i+1 not in dict_nums.keys():\n            return i+1\n    return dict_nums[i]\ndef find_missing_numbers_using_dict(nums):\n    '''\n    Write a function to find all the missing numbers in a given list.\n    The list is sorted.\n    Use a hash table.\n    '''\n    dict_nums = {}\n    i=0\n    while i < len(nums):\n        try:\n            dict_nums[nums[i]] = nums[i]\n            i+=1\n        except IndexError:\n            break\n    for i in rang"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        print(list(g))\n        \nconsecutive_duplicates([2, 2, 4, 6, 7, 8, 9, 9])\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #Since the problem is to remove duplicates, we can use a trick to save space and reduce time complexity. We'll iterate over the list, and once we encounter a new value, we'll break out of the loop. If we don't break out, we'll keep on adding the next value to the list.\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i+1)\n            continue\n        i+=1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # nums = [1, 2, 3, 3, 4, 4, 5, 5, 5]\n    # result = [1, 2, 3, 4, 5]\n    result = []\n    for key, group in groupby(nums):\n        result.append(key)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(nums)\n    grouped_nums = [list(group) for key, group in groupby(nums)]\n    return grouped_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    print(nums)\n    new_list = []\n    for k, g in groupby(nums):\n        new_list.append(k)\n    print(new_list)\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(nums)\n    for index in range(len(nums)-1):\n        if nums[index] == nums[index+1]:\n            del nums[index+1]\n    return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi*math.pow(r,2)*(h/3)\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2) + math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    if r==0:\n        print('Radius cannot be 0')\n        return None\n    if r<0:\n        print('Radius cannot be negative')\n        return None\n    if h<0:\n        print('Height cannot be negative')\n        return None\n    s1 = ((r**2)*math.pi)\n    s2 = (0.5*(r**2)*math.pi)\n    return s1,s2\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (3.14 * r * r) + (3.14 * r * h)\n    return area\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    area = (3.14 * r * r)\n    return area\ndef lateralsurface_rectangle(w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given width w and height h.\n    '''\n    area = 2 * w * h\n    return area\ndef lateralsurface_square(s):\n    '''\n    Write a function to find the lateral surface area of a square given side s.\n    '''\n    area = 4 * s * s\n    return area\ndef lateralsurface_triangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given base b and height h.\n    '''\n    area = (b * h) / 2\n    return area\ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given base b and height h.\n    '''\n    area = b * h\n    return area\ndef lateralsurface_trapezium(b1,b2,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium given the base lengths b1 and b2 and the height h.\n    '''\n    area = (b1 + b2) / 2 * h\n    return area\ndef lateralsurface_ellipse(b,h):\n    '''\n    Write a function to find the lateral surface area of an ellipse given the width b and height h.\n    '''\n    area = math.pi * b * h\n    return area\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    area = 4 * math.pi * r * r\n    return area\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and height h.\n    '''\n    area = math.pi * r * r + math.pi * r * h\n    return area\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    area = 4 * math.pi * r * r\n    return area\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and height h.\n    '''\n    area = (3.14 * r * r) + (3.14 * r * h)\n    return area\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r.\n    '''\n    area = (3.14 * r * r)\n    return area\ndef lateralsurface_rectangle(w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given width w and height h.\n    '''\n    area = 2 * w * h\n    return area\ndef lateralsurface_square(s):\n    '''\n    Write a function to find the lateral surface area of a square given side s.\n    '''\n    area = 4 * s * s\n    return area\ndef lateralsurface_triangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given base b and height h.\n    '''\n    area = (b * h) / 2\n    return area\ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given base b and height h.\n    '''\n    area = b * h\n    return area\ndef lateralsurface_trapezium(b1,b2,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium given the base lengths b1 and b2 and the height h.\n    '''\n    area = (b1 + b2) / 2 * h\n    return area\ndef lateralsurface_ellipse(b,h):\n    '''\n    Write a function to find the lateral surface area of an ellipse given the width b and height h.\n    '''\n    area = math.pi * b * h\n    return area\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    area = 4 * math.pi * r * r\n    return area\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and height h.\n    '''\n    area = (3.14 * r * r) + (3.14 * r * h)\n    return area\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r.\n    '''\n    area = (3.14 * r * r)\n    return area\ndef lateralsurface_rectangle(w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given width w and height h.\n    '''\n    area = 2 * w * h\n    return area\ndef lateralsurface_square(s):\n    '''\n    Write a function to find the lateral surface area of a square given side s.\n    '''\n    area = 4 * s * s\n    return area\ndef lateralsurface_triangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given base b and height h.\n    '''\n    area = (b * h) / 2\n    return area\ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given base b and height h.\n    '''\n    area = b * h\n    return area\ndef lateralsurface_trapezium(b1,b2,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium given the base lengths b1 and b2 and the height h.\n    '''\n    area = (b1 + b2) / 2 * h\n    return area\ndef lateralsurface_ellipse(b,h):\n    '''\n    Write a function to find the lateral surface area of an ellipse given the width b and height h.\n    '''\n    area = math.pi * b * h\n    return area\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    area = 4 * math.pi * r * r\n    return area\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and height h.\n    '''\n    area = (3.14 * r * r) + (3.14 * r * h)\n    return area\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r.\n    '''\n    area = (3.14 * r * r)\n    return area\ndef lateralsurface_rectangle(w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given width w and height h.\n    '''\n    area = 2 * w * h\n    return area\ndef lateralsurface_square(s):\n    '''\n    Write a function to find the lateral surface area of a square given side s.\n    '''\n    area = 4 * s * s\n    return area\ndef lateralsurface_triangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given base b and height h.\n    '''\n    area = (b * h) / 2\n    return area\ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given base b and height h.\n    '''\n    area = b * h\n    return area\ndef lateralsurface_trapezium(b1,b2,h):\n    ''"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Radius:\",r)\n    print(\"Height:\",h)\n    print(\"\\nLateral surface area:\",2*math.pi*r*(r+math.sqrt(r**2+h**2)))\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # The lateral surface area of a cone is the sum of the lateral surface area of the base and the lateral surface area of the cone\n    # Find the lateral surface area of the base\n    surface_area = math.pi * (r**2)\n    # Find the lateral surface area of the cone\n    surface_area += (math.pi*r*h)\n    return surface_area\ndef lateral_surface_rectangular(w,l):\n    '''\n    Write a function to find the lateral surface area of a rectangular box given the width w and the length l.\n    '''\n    # The lateral surface area of a rectangular box is the sum of the lateral surface area of the base and the lateral surface area of the sides\n    # Find the lateral surface area of the base\n    surface_area = (w*l)\n    # Find the lateral surface area of the sides\n    surface_area += (w*l)\n    return surface_area\ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius r and the height h.\n    '''\n    # The lateral surface area of a cylinder is the sum of the lateral surface area of the base and the lateral surface area of the sides\n    # Find the lateral surface area of the base\n    surface_area = (math.pi*(r**2))\n    # Find the lateral surface area of the sides\n    surface_area += (math.pi*r*h)\n    return surface_area\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given the radius r and the height h.\n    '''\n    # The volume of a cone is the product of the radius and the height\n    # Find the volume\n    volume = (r*h)\n    return volume\ndef volume_rectangular_box(w,l):\n    '''\n    Write a function to find the volume of a rectangular box given the width w and the length l.\n    '''\n    # The volume of a rectangular box is the product of the width and the length\n    # Find the volume\n    volume = (w*l)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given the radius r and the height h.\n    '''\n    # The volume of a cylinder is the product of the radius and the height\n    # Find the volume\n    volume = (r*h)\n    return volume\ndef volume_cone_from_surface_area(surface_area,r):\n    '''\n    Write a function to find the volume of a cone given the lateral surface area and the radius r.\n    '''\n    # The volume of a cone is the product of the radius and the lateral surface area\n    # Find the volume\n    volume = (r*surface_area)\n    return volume\ndef volume_rectangular_box_from_surface_area(surface_area,w,l):\n    '''\n    Write a function to find the volume of a rectangular box given the lateral surface area, the width w, and the length l.\n    '''\n    # The volume of a rectangular box is the product of the width and the length\n    # Find the volume\n    volume = (w*l)\n    return volume\ndef volume_cylinder_from_surface_area(surface_area,r,h):\n    '''\n    Write a function to find the volume of a cylinder given the lateral surface area, the radius r, and the height h.\n    '''\n    # The volume of a cylinder is the product of the radius and the height\n    # Find the volume\n    volume = (r*h)\n    return volume\ndef cylinder_from_surface_area(surface_area,r,h):\n    '''\n    Write a function to find the radius, height, and lateral surface area of a cylinder given the lateral surface area, the radius r, and the height h.\n    '''\n    # The radius of the cylinder is the square root of the ratio of the lateral surface area and the product of the height and the radius\n    # Find the radius\n    radius = math.sqrt(surface_area/((r*h)))\n    # Find the height\n    height = h\n    return radius,height\ndef cone_from_surface_area(surface_area,r):\n    '''\n    Write a function to find the radius, height, and lateral surface area of a cone given the lateral surface area, the radius r.\n    '''\n    # The radius of the cone is the square root of the ratio of the lateral surface area and the radius\n    # Find the radius\n    radius = math.sqrt(surface_area/r)\n    # Find the height\n    height = radius\n    return radius,height\ndef rectangular_box_from_surface_area(surface_area,w,l):\n    '''\n    Write a function to find the width, length, and lateral surface area of a rectangular box given the lateral surface area, the width w, and the length l.\n    '''\n    # The width of the rectangular box is the square root of the ratio of the lateral surface area and the width\n    # Find the width\n    width = math.sqrt(surface_area/w)\n    # Find the length\n    length = math.sqrt(surface_area/l)\n    return width,length\ndef volume_from_surface_area(surface_area):\n    '''\n    Write a function to find the volume of a shape given the lateral surface area.\n    '''\n    # The volume of the shape is the product of the lateral surface area\n    # Find the volume\n    volume = surface_area\n    return volume\ndef volume_from_cylinder(surface_area,r,h):\n    '''\n    Write a function to find the volume of a shape given the lateral surface area, the radius r, and the height h.\n    '''\n    # The volume of the shape is the product of the radius and the height\n    # Find the volume\n    volume = (r*h)\n    return volume\ndef volume_from_cone(surface_area,r):\n    '''\n    Write a function to find the volume of a shape given the lateral surface area and the radius r.\n    '''\n    # The volume of the shape is the product of the radius and the lateral surface area\n    # Find the volume\n    volume = (r*surface_area)\n    return volume\ndef volume_from_rectangular_box(surface_area,w,l):\n    '''\n    Write a function to find the volume of a shape given the lateral surface area, the width w, and the length l.\n    '''\n    # The volume of the shape is the product of the width and the length\n    # Find the volume\n    volume = (w*l)\n    return volume\ndef volume_from_circular_pipe(diameter,r):\n    '''\n    Write a function to find the volume of a shape given the diameter and the radius r.\n    '''\n    # The volume of the shape is the product of the radius and the diameter\n    # Find the volume\n    volume = (math.pi*r*r*diameter)\n    return volume\ndef volume_from_triangular_prism(b,h,h2):\n    '''\n    Write a function to find the volume of a triangular prism given the base, the height, and the height on one side h2.\n    '''\n    # The volume of a triangular prism is the product of the base and the sum of the heights\n    # Find the volume\n    volume = (b*(h+h2))\n    return volume\ndef lateral_surface_area_from_volume(volume):\n    '''\n    Write a function to find the lateral surface area of a shape given the volume of that shape.\n    '''\n    # The lateral surface area of a shape is the product of the volume and the square of the radius\n    # Find the lateral surface area\n    lateral_surface_area = (volume*(math.pi*2))\n    return lateral_surface_area\ndef lateral_surface_area_from_cylinder(volume,r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the volume, the radius r, and the height h.\n    '''\n    # The lateral surface area of a cylinder is the product of the lateral surface area of the base and the lateral surface area of the sides\n    # Find the lateral surface area of the base\n    lateral_surface_area = (math.pi*(r**2))\n    # Find the lateral surface area of the sides\n    lateral_surface_area += (math.pi*r*h)\n    # Find the lateral surface area"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        s_cone=math.pi*(r**2)+math.pi*(r**2)*h/3\n    else:\n        s_cone=\"Invalid input\"\n    return s_cone\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        s_cylinder=2*math.pi*r*(r+h)\n    else:\n        s_cylinder=\"Invalid input\"\n    return s_cylinder\ndef lateralsurface_cube(side):\n    '''\n    Write a function to find the lateral surface area of a cube given side s.\n    '''\n    if side>=0:\n        s_cube=6*(side**2)\n    else:\n        s_cube=\"Invalid input\"\n    return s_cube\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    if r>=0:\n        s_sphere=4*math.pi*(r**2)\n    else:\n        s_sphere=\"Invalid input\"\n    return s_sphere\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        s_cone=math.pi*(r**2)+math.pi*(r**2)*h/3\n    else:\n        s_cone=\"Invalid input\"\n    return s_cone\ndef volume_cube(side):\n    '''\n    Write a function to find the volume of a cube given side s.\n    '''\n    if side>=0:\n        v_cube=side**3\n    else:\n        v_cube=\"Invalid input\"\n    return v_cube\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    if r>=0:\n        v_sphere=4/3*math.pi*(r**3)\n    else:\n        v_sphere=\"Invalid input\"\n    return v_sphere\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        v_cylinder=math.pi*(r**2)*h\n    else:\n        v_cylinder=\"Invalid input\"\n    return v_cylinder\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        v_cone=1/3*math.pi*(r**2)*h\n    else:\n        v_cone=\"Invalid input\"\n    return v_cone\ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism given the length l, width w, and height h.\n    '''\n    if l>=0 and w>=0 and h>=0:\n        v_prism=l*w*h\n    else:\n        v_prism=\"Invalid input\"\n    return v_prism\ndef volume_pyramid(l,w,h):\n    '''\n    Write a function to find the volume of a pyramid given the length l, width w, and height h.\n    '''\n    if l>=0 and w>=0 and h>=0:\n        v_pyramid=(1/3)*l*w*h\n    else:\n        v_pyramid=\"Invalid input\"\n    return v_pyramid\ndef volume_cylinder_hollow(r,h,R):\n    '''\n    Write a function to find the volume of a hollow cylinder given the radius of the inner rim, the height, and the outer radius.\n    '''\n    if r>=0 and h>=0 and R>=0:\n        v_cylinder_hollow=math.pi*(r**2)*h+math.pi*(R**2)*h\n    else:\n        v_cylinder_hollow=\"Invalid input\"\n    return v_cylinder_hollow\ndef volume_cone_hollow(r,h,R):\n    '''\n    Write a function to find the volume of a hollow cone given the radius of the inner rim, the height, and the outer radius.\n    '''\n    if r>=0 and h>=0 and R>=0:\n        v_cone_hollow=1/3*math.pi*(r**2)*h+math.pi*(r**2)*h*R\n    else:\n        v_cone_hollow=\"Invalid input\"\n    return v_cone_hollow\ndef volume_prism_hollow(l,w,h,R):\n    '''\n    Write a function to find the volume of a hollow prism given the length, width, and height, and the outer radius of the rim.\n    '''\n    if l>=0 and w>=0 and h>=0 and R>=0:\n        v_prism_hollow=l*w*h+l*w*R+l*h*R+w*R*h\n    else:\n        v_prism_hollow=\"Invalid input\"\n    return v_prism_hollow\ndef volume_pyramid_hollow(l,w,h,R):\n    '''\n    Write a function to find the volume of a hollow pyramid given the length, width, and height, and the outer radius of the rim.\n    '''\n    if l>=0 and w>=0 and h>=0 and R>=0:\n        v_pyramid_hollow=1/3*l*w*h+1/3*l*w*R+1/3*l*h*R+1/3*w*R*h\n    else:\n        v_pyramid_hollow=\"Invalid input\"\n    return v_pyramid_hollow\ndef volume_prism_watertight(l,w,h):\n    '''\n    Write a function to find the volume of a watertight prism given the length, width, and height.\n    '''\n    if l>=0 and w>=0 and h>=0:\n        v_prism_watertight=l*w*h\n    else:\n        v_prism_watertight=\"Invalid input\"\n    return v_prism_watertight\ndef volume_pyramid_watertight(l,w,h):\n    '''\n    Write a function to find the volume of a watertight pyramid given the length, width, and height.\n    '''\n    if l>=0 and w>=0 and h>=0:\n        v_pyramid_watertight=1/3*l*w*h\n    else:\n        v_pyramid_watertight=\"Invalid input\"\n    return v_pyramid_watertight\ndef volume_cylinder_watertight(r,h):\n    '''\n    Write a function to find the volume of a watertight cylinder given the radius and height.\n    '''\n    if r>=0 and h>=0:\n        v_cylinder_watertight=math.pi*(r**2)*h\n    else:\n        v_cylinder_watertight=\"Invalid input\"\n    return v_cylinder_watertight\ndef volume_cone_watertight(r,h):\n    '''\n    Write a function to find the volume of a watertight cone given the radius and height.\n    '''\n    if r>=0 and h>=0:\n        v_cone_watertight=1/3*math.pi*(r**2)*h\n    else:\n        v_cone_watertight=\"Invalid input\"\n    return v_cone_watertight\ndef volume_prism_watertight(l,w,h):\n    '''\n    Write a function to find the volume of a watertight prism given the length, width, and height.\n    '''\n    if l>=0 and w>=0 and h>=0:\n        v_prism_watertight=l*w*h\n    else:\n        v"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2) + math.pi*r*h\n    \ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return math.pi*(r**2) + 2*math.pi*r*h\n    \ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*(r**2)\n    \ndef lateral_surface_ellipsoid(r):\n    '''\n    Write a function to find the lateral surface area of a ellipsoid given radius r.\n    '''\n    return math.pi*(4*r**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi*(r**2)\n    A = A + (math.pi*(r**2)*h)\n    return A\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    def lateral_surface_area(r,h):\n        '''\n        The lateral surface area of a cone is equal to pi times the sum of the two roots of a quadratic equation.\n        Use the formula given below and use the quadratic formula to find the two roots.\n        '''\n        if (r>=0 and h>=0):\n            return math.pi*(r**2+r*h+h**2)\n    return lateral_surface_area(r,h)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ ]','',text)\n    text = re.sub(r'[.]','',text)\n    text = re.sub(r'[,]','',text)\n    text = re.sub(r'[\\:]',' ',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\.,\\s]',':',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    return text\n    #pass\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[., ]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.', ':')\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    return text\n    # split the text into words\n    # take care of special characters\n    # return the new text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #return text.replace(' ',':').replace(',',' ').replace('.',' ')\n    return re.sub(r'[\\s\\.,]+', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.', ':')\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('..', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\.', ':', text)\n    text = re.sub('\\s', ':', text)\n    text = re.sub(',', ':', text)\n    text = re.sub(';', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.',':')\n    text = text.replace(',','*:')\n    text = text.replace(' ',':')\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)-1\n    first_occurrence = -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= A[mid]:\n                return mid\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return bisect.bisect_left(A, x)\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x == A[mid]:\n            return mid\n        elif x > A[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x > A[mid]:\n            low = mid + 1\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            if mid - 1 < 0:\n                return mid\n            if A[mid - 1]!= x:\n                return mid\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if x > A[mid]:\n            start = mid + 1\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            if mid - 1 < 0:\n                return mid\n            if A[mid - 1]!= x:\n                return mid\n            end = mid - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n:\n        if x == A[i]:\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum_of_prod = 0\n    for i in range(n):\n        for j in range(i,n):\n            prod = 1\n            for k in range(i,j+1):\n                prod = prod*arr[k]\n            sum_of_prod+=prod\n    return sum_of_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = []\n    n = len(arr)\n    # go from the left and right of the subarray\n    for i in range(n+1):\n        for j in range(i, n+1):\n            s = 0\n            for k in range(i, j):\n                s = s + arr[k]\n            res.append(s)\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return\n    # Get all possible combinations of subarrays and store in a list\n    n = len(arr)\n    sum_of_subarrays = []\n    for i in range(0, n+1):\n        for j in range(i+1, n+1):\n            sop = arr[i:j]\n            sum_of_subarrays.append(sop)\n    # Check each element of the list to find product of all possible subarrays and store in a list\n    sop_products = []\n    for sop in sum_of_subarrays:\n        product = 1\n        for ele in sop:\n            product *= ele\n        sop_products.append(product)\n    return sum(sop_products)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if(len(arr)<3):\n        return -1\n    #[1,2,3]\n    #[1,2] [1,2,3] [2,3]\n    #[1,2] [1,2,3] [3] [2] [1,3]\n    #[1,2] [1,2,3] [2,3] [1,3]\n    #[1,2] [1,2,3] [3] [2] [1,3] [1,2,3]\n    #[1,2,3] [1,2,3] [3]\n    #[1,2,3] [1,2,3] [3] [1,3] [1,2,3] [2,3]\n    #[1,2,3] [1,2,3] [3] [2] [1,3] [1,2,3] [3] [1,3] [2,3]\n    #[1,2,3] [1,2,3] [3] [2] [1,3] [1,2,3] [3] [1,3] [2,3]\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #code here\n    res = 0\n    #prod = 1\n    for i in range(len(arr)):\n        prod = 1\n        for j in range(i,len(arr)):\n            prod = prod * arr[j]\n            res = res + prod\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    summ = 0\n    for i in range(0, n):\n        summ += arr[i] * prod_sublist(arr, i)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    product_array = [1 for i in range(n)]\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    len_arr = len(arr)\n    if len_arr == 1:\n        return arr[0]\n    dp = [0] * len_arr\n    dp[0] = arr[0]\n    for i in range(1, len_arr):\n        dp[i] = dp[i-1] * arr[i]\n    ans = 0\n    for i in range(1, len_arr):\n        ans += dp[i]\n        for j in range(1, i+1):\n            ans += dp[i] * dp[j-1] * dp[i-j]\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    #for i in range(n):\n        #product = 1\n        #for j in range(i,n):\n            #product *= arr[j]\n            #print(product)\n            #print(arr[j])\n    \n    sum_Of_Subarrays = 0\n    for i in range(n):\n        for j in range(i,n):\n            product = 1\n            for k in range(i,j+1):\n                product *= arr[k]\n            sum_Of_Subarrays += product\n    return sum_Of_Subarrays\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_size = len(arr)\n    \n    prod = [None] * arr_size\n    prod[0] = 1\n    \n    for i in range(1, arr_size):\n        prod[i] = arr[i - 1] * prod[i - 1]\n    \n    sum = 0\n    j = 0\n    for i in range(arr_size - 1, -1, -1):\n        sum = sum + prod[i] * ((j + 1) ** 2)\n        j = j + 1\n    return sum\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = ((n & 0xFFFFFFFE) >> 1) | ((n & 1) << 31)  #11111111111111110\n    n = ((n & 0x55555555) >> 1) | ((n & 1) << 31)  #11111111111111010\n    n = ((n & 0x33333333) >> 1) | ((n & 1) << 31)  #11111111111110110\n    n = ((n & 0x0f0f0f0f) >> 1) | ((n & 1) << 31)  #11111111111111010\n    n = ((n & 0x00ff00ff) >> 1) | ((n & 1) << 31)  #11111111111110110\n    n = ((n & 0x0000ffff) >> 1) | ((n & 1) << 31)  #11111111111111110\n    n = ((n & 0x00000000) >> 1) | ((n & 1) << 31)  #11111111111111110\n    n = n >> 1  #11111111111111110\n    n = n & 0x55555555  #11111111111111010\n    n = n & 0x33333333  #11111111111110110\n    n = n & 0x0f0f0f0f  #11111111111111010\n    n = n & 0x00ff00ff  #11111111111110110\n    n = n & 0x0000ffff  #11111111111111110\n    n = n & 0x00000000  #11111111111111110\n    n = n >> 1  #11111111111111110\n    n = n & 0x55555555  #11111111111111010\n    n = n & 0x33333333  #11111111111110110\n    n = n & 0x0f0f0f0f  #11111111111111010\n    n = n & 0x00ff00ff  #11111111111110110\n    n = n & 0x0000ffff  #11111111111111110\n    n = n & 0x00000000  #11111111111111110\n    n = n >> 1  #11111111111111110\n    n = n & 0x55555555  #11111111111111010\n    n = n & 0x33333333  #11111111111110110\n    n = n & 0x0f0f0f0f  #11111111111111010\n    n = n & 0x00ff00ff  #11111111111110110\n    n = n & 0x0000ffff  #11111111111111110\n    n = n & 0x00000000  #11111111111111110\n    n = n >> 1  #11111111111111110\n    n = n & 0x55555555  #11111111111111010\n    n = n & 0x33333333  #11111111111110110\n    n = n & 0x0f0f0f0f  #11111111111111010\n    n = n & 0x00ff00ff  #11111111111110110\n    n = n & 0x0000ffff  #11111111111111110\n    n = n & 0x00000000  #11111111111111110\n    n = n >> 1  #11111111111111110\n    n = n & 0x55555555  #11111111111111010\n    n = n & 0x33333333  #11111111111110110\n    n = n & 0x0f0f0f0f  #11111111111111010\n    n = n & 0x00ff00ff  #11111111111110110\n    n = n & 0x0000ffff  #11111111111111110\n    n = n & 0x00000000  #11111111111111110\n    n = n >> 1  #11111111111111110\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    t = bin(n).replace(\"0b\", \"\")\n    l = len(t)\n    t = t[0] + ''.join(['0' if x == '1' else '1' for x in t[1:l-1]]) + t[-1]\n    return int(t, 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # return n ^ (1 << n.bit_length() - 2) # -2 to get rid of first and last bit\n    n = n ^ (1 << (n.bit_length() - 2))\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n & ~(1 << 0) & ~(1 << (len(bin(n)) - 2)))\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)\n    n = n ^ (n << 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    s = format(n, 'b')  \n    s = s[1:-1]  \n    print(s) \n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & ~(2**n.bit_length()-1)) ^ ((n & ~1) << 1)) >> 1\n  \ndef set_middle_bits_2(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    return n ^ (n >> 1)\n  "
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_bits(n):\n        n = n ^ (n >> 1)\n        return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(\"1: \", bin(n), \"2: \", bin(n^(1 << n.bit_length()-2)))\n    print(\"3: \", bin(n^(1 << n.bit_length()-2)))\n    print(\"4: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"5: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"6: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"7: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"8: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"9: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"10: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"11: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"12: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"13: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"14: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"15: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"16: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"17: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"18: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"19: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"20: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"21: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"22: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"23: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"24: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"25: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"26: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"27: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"28: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"29: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"30: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"31: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"32: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"33: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"34: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"35: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"36: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"37: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"38: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"39: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"40: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"41: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"42: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"43: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"44: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"45: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"46: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"47: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"48: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"49: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"50: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"51: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"52: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"53: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"54: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"55: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"56: \", bin(n^(1 << n.bit_length()-2)^(1 << n.bit_length()-1)))\n    print(\"57: \", bin(n^(1 << n.bit_length()-"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = n>>1 # 111111111111111111111111111111111\n    return n^mask\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if x < a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # return bisect.bisect(a, x)\n    for i, v in enumerate(a):\n        if x < v:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    pos = bisect.bisect_left(a, x)\n    if pos < len(a) and a[pos] == x:\n        return pos\n    else:\n        return pos - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #a = [1, 2, 3, 4, 5]\n    #x = 5\n    pos = -1\n    for i in range(len(a)):\n        if x >= a[i]:\n            pos = i\n    return pos\n    # for i in range(len(a)):\n    #     if x >= a[i]:\n    #         return i\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    b = []\n    for i in a:\n        bisect.insort(b, i)\n    index = bisect.bisect(b, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    bisect.insort(a, x)\n    return a.index(x)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a = [10, 20, 30, 40, 50, 60, 70, 80]\n    x = 65\n    #Your code here\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\ndef left_search(a, x):\n    '''\n    Write a function to locate the leftmost value exactly equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return -1\ndef right_search(a, x):\n    '''\n    Write a function to locate the rightmost value exactly equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    if index > 0 and a[index-1] == x:\n        return index-1\n    else:\n        return -1\ndef find_closest(a, x):\n    '''\n    Write a function to return the closest value to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index < len(a) and a[index] == x:\n        return a[index]\n    else:\n        if x-a[index-1] < a[index]-x:\n            return a[index-1]\n        else:\n            return a[index]\ndef left_search_closest(a, x):\n    '''\n    Write a function to return the closest value to a specified value in sorted order, having the property that the input value is less than or equal to the closest value. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index < len(a) and a[index] == x:\n        return a[index]\n    elif index > 0:\n        if x-a[index-1] <= a[index]-x:\n            return a[index-1]\n        else:\n            return a[index]\n    else:\n        return a[0]\ndef right_search_closest(a, x):\n    '''\n    Write a function to return the closest value to a specified value in sorted order, having the property that the input value is greater than or equal to the closest value. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    if index > 0:\n        if x-a[index-1] <= a[index]-x:\n            return a[index-1]\n        else:\n            return a[index]\n    else:\n        return a[0]\ndef right_search_first_exact(a, x):\n    '''\n    Write a function to return the first value exactly equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    if index > 0 and a[index-1] == x:\n        return index-1\n    else:\n        return -1\ndef left_search_first_exact(a, x):\n    '''\n    Write a function to return the first value exactly equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return -1\ndef search_first_greater_or_equal(a, x):\n    '''\n    Write a function to return the first value greater than or equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    elif index > 0:\n        return index-1\n    else:\n        return -1\ndef search_first_less_or_equal(a, x):\n    '''\n    Write a function to return the first value less than or equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    elif index > 0:\n        return index-1\n    else:\n        return -1\ndef search_last_greater_or_equal(a, x):\n    '''\n    Write a function to return the last value greater than or equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    elif index > 0:\n        return index-1\n    else:\n        return -1\ndef search_last_less_or_equal(a, x):\n    '''\n    Write a function to return the last value less than or equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    elif index > 0:\n        return index-1\n    else:\n        return -1\ndef insertion_sort(a):\n    '''\n    Write a function to perform insertion sort on an array a. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(1, len(a)):\n        key = a[i]\n        j = i-1\n        while j >= 0 and a[j] > key:\n            a[j+1] = a[j]\n            j = j - 1\n        a[j+1] = key\ndef insertion_sort_manual(a):\n    '''\n    Write a function to perform insertion sort on an array a, where the input array is provided by the user. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for "
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    '''\n    def binary_search(a,x):\n        low = 0\n        high = len(a) - 1\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return 'The given string is starting with a vowel.'\n    else: \n        return 'The given string is not starting with a vowel.'\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    x = re.findall(regex,string)\n    return(x)"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    check = re.match(regex, string)\n    if check:\n        print(f'The given string \"{string}\" starts with a vowel.')\n    else:\n        print(f'The given string \"{string}\" doesn\\'t starts with a vowel.')\n    return check\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)): \n        return 'Starting with vowel'\n    else: \n        return 'Starting with consonant'\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (re.match(regex,string)): \n        return \"String is starting with vowel\"\n    else: \n        return \"String is not starting with vowel\"\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print('yes')\n    else:\n        print('no')\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    return False\n    \ndef check_str(string):\n    vowel = set('aeiouAEIOU')\n    return string and (string[0] in vowel) \n    \n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    if re.match(r'^[789][0-9]{9}$',input):\n        return True\n    return False\n    \n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return True if re.match(r'^[789][0-9]{9}$',input) else False\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return re.match(r'^[789][0-9]{9}$',input)\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and re.match(r'^[789][0-9]{9}$',input)\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and re.match(r'^[789][0-9]{9}$',input)\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input):\n    '''\n    Write a function to check whether the given input is a valid phone number or not using regex.\n    '''\n    return len(input) == 10 and bool(re.match(r'^[789][0-9]{9}$',input))\n    \ndef is_valid(input)"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex, string)):\n        return True\n    return False\n    \nstring1 = 'aBCdfF'\nstring2 = 'ABcdfF'\nprint(check_str(string1))\nprint(check_str(string2)"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (2 * geometric_sum(n - 1))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def sum_of_n_terms(n):\n        if n==1:\n            return 1\n        else:\n            return n + sum_of_n_terms(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (1 - (1 / n)) if n > 0 else 0\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n-1)*(2**(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 0:\n        raise ValueError\n    elif n == 0:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return n\n    return n*(1/n) + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 if n == 0 else n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (1 - geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (1 + geometric_sum(n - 1)) if n else 1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, (math.factorial(n))): \n        tri = i * (i + 1) // 2 \n        if len(str(tri)) == n: \n            return tri \ndef print_Pattern(n): \n    '''\n    Print the pattern with given number of rows\n    '''\n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            print(\"*\", end = \" \") \n        print(\"\") \n    for i in range(n-1,0,-1): \n        for j in range(1,i+1): \n            print(\"*\", end = \" \") \n        print(\"\") \ndef print_Right_Angled_Pyramid(n): \n    '''\n    Print right angled pyramid with given number of rows\n    '''\n    for i in range(n,0,-1): \n        for j in range(1,i+1): \n            print(\"*\", end = \" \") \n        print(\"\") \ndef is_Palindrome(s): \n    '''\n    Write a Python function to check whether a given string is palindrome or not\n    '''\n    if s == s[::-1]: \n        return True\n    return False\ndef print_Pattern2(n): \n    '''\n    Print the pattern with given number of rows using string slicing\n    '''\n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            print(chr(j + 64), end = \" \") \n        print(\"\") \n    for i in range(n-1,0,-1): \n        for j in range(1,i+1): \n            print(chr(j + 64), end = \" \") \n        print(\"\") \ndef print_Asterisk_Pattern(n): \n    '''\n    Print the pattern with given number of rows using asterisks\n    '''\n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            print(\"*\", end = \" \") \n        print(\"\") \n    for i in range(n-1,0,-1): \n        for j in range(1,i+1): \n            print(\"*\", end = \" \") \n        print(\"\") \ndef reverse_Number(n): \n    '''\n    Write a Python function to reverse an integer\n    '''\n    return int(str(n)[::-1]) \ndef count_String(s): \n    '''\n    Write a Python function to count number of characters in string\n    '''\n    count = 0\n    for i in s: \n        count += 1\n    return count\ndef is_Pallindrome(s): \n    '''\n    Write a Python function to check whether a string is palindrome or not\n    '''\n    if s == s[::-1]: \n        return True\n    return False\ndef print_Asterisk_Pattern_With_Space(n): \n    '''\n    Write a Python function to print pattern of alphabets with spaces in between them\n    '''\n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            if j == i: \n                print(\"*\", end = \" \") \n            else: \n                print(\"*\", end = \"  \") \n        print(\"\") \ndef print_Asterisk_Pattern_With_String(n): \n    '''\n    Write a Python function to print pattern of alphabets with #s in between them\n    '''\n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            if j == i: \n                print(\"*\", end = \"#\") \n            else: \n                print(\"*\", end = \"#\") \n        print(\"\") \ndef print_Alphabet_Pattern(n): \n    '''\n    Write a Python function to print pattern of alphabets with *s in between them\n    '''\n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            if j == i: \n                print(\"*\", end = \"\") \n            else: \n                print(\"*\", end = \"*\") \n        print(\"\") \ndef print_Number_Pattern(n): \n    '''\n    Write a Python function to print number pattern\n    '''\n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            print(j, end = \" \") \n        print(\"\") \ndef print_Fibonacci_Sequence(n): \n    '''\n    Write a Python function to print Fibonacci sequence\n    '''\n    first = 0\n    second = 1\n    for i in range(1,n+1): \n        print(first, end = \" \") \n        first, second = second, first+second \ndef find_Prime_Number(n): \n    '''\n    Write a Python function to print first n prime numbers\n    '''\n    numbers = [1]*(n+1) \n    numbers[0] = 0 \n    numbers[1] = 0 \n    for i in range(2,n+1): \n        if numbers[i] == 1: \n            print(i, end = \" \") \n            for j in range(i*i,n+1,i): \n                numbers[j] = 0 \ndef get_Leap_Year(year): \n    '''\n    Write a Python function to check whether a year is leap year or not\n    '''\n    if (year%400 == 0): \n        return True\n    if (year%100 == 0): \n        return False\n    if (year%4 == 0): \n        return True\n    return False\ndef print_Right_Angled_Pyramid_With_String(n): \n    '''\n    Write a Python function to print Right angled pyramid with #s\n    '''\n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            print(\"*\", end = \"#\") \n        print(\"\") \n    for i in range(n-1,0,-1): \n        for j in range(1,i+1): \n            print(\"*\", end = \"#\") \n        print(\"\") \ndef print_Right_Angled_Pyramid_With_Char(n): \n    '''\n    Write a Python function to print Right angled pyramid with *s\n    '''\n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            print(\"*\", end = \"\") \n        print(\"\") \n    for i in range(n-1,0,-1): \n        for j in range(1,i+1): \n            print(\"*\", end = \"\") \n        print(\"\") \ndef print_Arrow_Pattern(n): \n    '''\n    Write a Python function to print arrow pattern\n    '''\n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            print(\"*\", end = \" \") \n        print(\"\") \n    for i in range(n-1,0,-1): \n        for j in range(1,i+1): \n            print(\"*\", end = \" \") \n        print(\"\") \ndef print_Arrow_Pattern_With_Space(n): \n    '''\n    Write a Python function to print arrow pattern with space between them\n    '''\n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            print(\"*\", end = \" \") \n        print(\"\") \n    for i in range(n-1,0,-1): \n        for j in range(1,i+1): \n            print(\"*\", end = \" \") \n        print(\"\") \ndef print_Arrow_Pattern_With_String(n): \n    '''\n    Writ"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True:\n        i += 1\n        #Find all possible triangular numbers with i digits\n        triangular_numbers = [int(n*(n+1)/2) for n in range(1, i+1)]\n        #Check if n is the smallest triangular number with i digits\n        if n in triangular_numbers:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #defining a variable to store count of digits in n\n    count = 0\n    #loop to check if n has more than 4 digits, if not, then return 0\n    while n > 0:\n        count = count + 1\n        n = n//10\n    #if n has more than 4 digits, then get the digits\n    num = 0\n    while n!= 0:\n        num = num + (n % 10) * math.pow(10,count)\n        count = count - 1\n        n = n // 10\n    \n    return(num)\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    n1=n\n    n2=n\n    n3=n\n    for i in range(1,1000):\n        i1=int(str(n1)+str(n2))\n        i2=int(str(n2)+str(n3))\n        if(i1<1000000):\n            n1=i1\n            n2=i2\n        else:\n            break\n    print(n1,n2)\n    return (n1+n2)/2\ndef find_Triangular(n): \n    '''\n    Write a python function to find the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    n1=n\n    n2=n\n    n3=n\n    for i in range(1,1000):\n        i1=int(str(n1)+str(n2))\n        i2=int(str(n2)+str(n3))\n        if(i1<1000000):\n            n1=i1\n            n2=i2\n        else:\n            break\n    print(n1,n2)\n    return n1\ndef find_Prime(n): \n    '''\n    Write a python function to find the prime number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    n1=n\n    n2=n\n    n3=n\n    for i in range(1,1000):\n        i1=int(str(n1)+str(n2))\n        i2=int(str(n2)+str(n3))\n        if(i1<1000000):\n            n1=i1\n            n2=i2\n        else:\n            break\n    print(n1,n2)\n    return n1\ndef find_Prime_2(n): \n    '''\n    Write a python function to find the prime number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    n1=n\n    n2=n\n    n3=n\n    for i in range(1,1000):\n        i1=int(str(n1)+str(n2))\n        i2=int(str(n2)+str(n3))\n        if(i1<1000000):\n            n1=i1\n            n2=i2\n        else:\n            break\n    print(n1,n2)\n    return n2\ndef find_Least_Common_Multiple(a,b): \n    '''\n    Write a python function to find the least common multiple of 2 numbers. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a=int(a)\n    b=int(b)\n    if(a>b):\n        greater=a\n    else:\n        greater=b\n    i=greater\n    while(1):\n        if(greater%i==0 and b%i==0):\n            lcm=i\n            break\n        else:\n            i+=greater\n    return lcm\ndef find_Least_Common_Multiple_2(a,b): \n    '''\n    Write a python function to find the least common multiple of 2 numbers. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a=int(a)\n    b=int(b)\n    if(a>b):\n        greater=a\n    else:\n        greater=b\n    i=greater\n    while(1):\n        if(greater%i==0 and b%i==0):\n            lcm=i\n            break\n        else:\n            i+=greater\n    return lcm\ndef is_Prime(n):\n    '''\n    Write a python function to check whether a number is prime or not. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    for i in range(2,n):\n        if(n%i==0):\n            return False\n    return True\ndef find_Square_Root(n):\n    '''\n    Write a python function to find the square root of a number. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    x=n**0.5\n    print(x)\n    return x\ndef find_Number_Divisible_by_k(n,k):\n    '''\n    Write a python function to find the smallest number divisible by k. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    k=int(k)\n    i=1\n    while(1):\n        if(n%k==0):\n            n=n/k\n            i+=1\n        else:\n            break\n    print(i)\ndef find_Number_Divisible_by_k_2(n,k):\n    '''\n    Write a python function to find the smallest number divisible by k. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    k=int(k)\n    i=1\n    while(1):\n        if(n%k==0):\n            n=n/k\n            i+=1\n        else:\n            break\n    print(i)\ndef find_Number_Divisible_by_k_3(n,k):\n    '''\n    Write a python function to find the smallest number divisible by k. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    k=int(k)\n    i=1\n    while(1):\n        if(n%k==0):\n            n=n/k\n            i+=1\n        else:\n            break\n    print(i)\ndef find_Number_Divisible_by_k_4(n,k):\n    '''\n    Write a python function to find the smallest number divisible by k. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    k=int(k)\n    i=1\n    while(1):\n        if(n%k==0):\n            n=n/k\n            i+=1\n        else:\n            break\n    print(i)\ndef find_Number_Divisible_by_k_5(n,k):\n    '''\n    Write a python function to find the smallest number divisible by k. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    k=int(k)\n    i=1\n    while(1):\n        if(n%k==0):\n            n=n/k\n            i+=1\n        else:\n            break\n    print(i)\ndef find_Number_Divisible_by_k_6(n,k):\n    '''\n    Write a python function to find the smallest number divisible by k. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    k=int(k)\n    i=1\n    while(1):\n        if(n%k==0):\n            n=n/k\n            i+=1\n        else"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    s=1\n    # 1 is the smallest triangular number\n    for i in range(2, int(n**0.5)+1): \n        s = (i * (i + 1))//2\n        if (n <= s): \n            return s - ((i - 1) * (i)) // 2\n    return s\ndef is_Perfect_Square(x): \n    '''\n    Write a Python function to check whether a given number is a perfect square or not.\n    '''\n    # check for perfect square root\n    for i in range(0, int(math.sqrt(x))+1): \n        if (i * i == x): \n            return True\n    return False\ndef binary_search(A, key):\n    '''\n    Write a Python function to find the position of an element in a sorted list using binary search.\n    '''\n    start = 0\n    end = len(A) - 1\n    found = False\n    while (start <= end and not found): \n        mid = (start + end) // 2\n        # check if mid is our key\n        if (A[mid] == key):\n            return mid\n        elif (A[mid] < key): \n            start = mid + 1\n        else: \n            end = mid - 1\n    # if we reach here, then the key was not found\n    return -1\ndef is_Power_of_Two(n):\n    '''\n    Write a Python function to check whether a given number is a power of two or not.\n    '''\n    while (n and not (n & 1)): \n        n >>= 1\n    if (not n): \n        return True\n    return False\ndef is_Binary(n): \n    '''\n    Write a Python function to check whether a given number is a binary number or not.\n    '''\n    if (n > 0 and ((n & (n - 1)) == 0)): \n        return True\n    return False\ndef is_Happy(n): \n    '''\n    Write a Python function to check whether a given number is happy or not.\n    '''\n    return isHappy(n, {})\ndef is_Happy(n, memo): \n    '''\n    Write a Python function to check whether a given number is happy or not.\n    '''\n    if n not in memo:\n        memo[n] = is_Happy(n, memo)\n    return memo[n]\ndef is_Happy(n, memo):\n    '''\n    Write a Python function to check whether a given number is happy or not.\n    '''\n    sum = 0\n    while (n > 0): \n        sum += (n % 10) * (n % 10)\n        n //= 10\n    if (sum == 1): \n        return True\n    elif (sum in memo): \n        return False\n    else: \n        memo[sum] = is_Happy(sum, memo)\n        return memo[sum]\ndef is_Palindrome(n):\n    '''\n    Write a Python function to check whether a given number is palindrome or not.\n    '''\n    if(str(n)==str(n)[::-1]):\n        return True\n    return False\ndef is_Palindrome(n):\n    '''\n    Write a Python function to check whether a given number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >= 0\ndef is_Substring_Valid(string, sub):\n    '''\n    Write a Python function to check whether a given substring exists in a given string or not.\n    '''\n    return string.find(sub) >"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n == 1:\n        return 1\n    low = int(pow(10, n-1))\n    high = int(pow(10, n))\n    for i in range(low,high):\n        if (i*(i+1))/2 < high:\n            return i\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_digits = int(math.log10(n))\n    min_index = 0\n    for i in range(1, max_digits + 1): \n        min_index += (n - i) * (10**i) \n    return min_index\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    smallest = int(str(n) * (n+1)/2) \n    \n    for i in range(1, n+1): \n        smallest = smallest - (i-1) \n        if (smallest < 0): \n            return i - 1\n            \n        if (int(str(n) * i) < smallest): \n            smallest = int(str(n) * i)\n            \n    return n \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for i in range(0, n):\n        index = index + i + 1\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize result \n    res = -1\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for index in range(len(test_tup)):\n        if index % 2 == 0:\n            my_dict[test_tup[index]] = test_tup[index + 1]\n    return my_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = dict()\n    for x, y in test_tup:\n        test_dict[x] = y\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i:j for i,j in test_tup}\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # This function takes tuple as argument\n    # and returns the key and value of it.\n    res = dict(zip(test_tup[0::2], test_tup[1::2]))\n    return res\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_tup = list(test_tup)\n    dictionary = dict(zip(test_tup[1::2], test_tup[::2]))\n    print(dictionary)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for x in range(0,len(test_tup),2):\n        key = test_tup[x]\n        value = test_tup[x+1]\n        result[key] = value\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #Converting the tuple to a dictionary.\n    return {test_tup[i]:test_tup[i+1] for i in range(0, len(test_tup), 2)}\n    \ndef remove_duplicates(test_str):\n    '''\n    Write a function that removes the duplicates from a given string. https://www.geeksforgeeks.org/python-remove-duplicates-from-given-string/\n    '''\n    #Removing the duplicates from a given string.\n    return \"\".join(dict.fromkeys(test_str))\n    \ndef capitalise_all_words(test_str):\n    '''\n    Write a function that capitalises the first letter of each word. https://www.geeksforgeeks.org/python-capitalize-first-letter-each-word/\n    '''\n    #Capitalising the first letter of each word.\n    return test_str.title()\n    \ndef get_unique_words(test_str):\n    '''\n    Write a function that finds all the unique words in a given string. https://www.geeksforgeeks.org/python-find-unique-words-given-string/\n    '''\n    #Finding the unique words in a given string.\n    return set(test_str.split())\n    \ndef first_and_last_word(test_str):\n    '''\n    Write a function that returns the first and last words in a given string. https://www.geeksforgeeks.org/python-first-and-last-words-given-string/\n    '''\n    #Finding the first and last words in a given string.\n    return test_str.split()[0], test_str.split()[-1]\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = dict(zip(test_tup,test_tup[1:]))\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup_dict = {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}\n    return tup_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0,len(test_tup)):\n        result.update({i: test_tup[i]})\n    return result\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return False\n    for c in s:\n        if c == s[0]:\n            return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return True if s.lower().replace(\" \", \"\")[0] == s.lower().replace(\" \", \"\")[-1] else False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if s.count(i) > 1:\n            return False\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n    \ndef reverse_String(s) :\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef count_Characters_Lower_Case_In_String(s) :\n    '''\n    Write a python function to count the number of characters in a string which are lower case.\n    '''\n    return sum([1 for ch in s if ch.islower()])\n    \ndef count_Character_Occurence_In_String(s, c) :\n    '''\n    Write a python function to count the number of occurences of a character in a string.\n    '''\n    return s.count(c)\n    \ndef longest_Common_Substring(s1, s2) :\n    '''\n    Write a python function to find the longest common substring in two strings.\n    '''\n    def get_Max_SubString(s1, s2, sub_s) :\n        '''\n        Write a python function to find the max substring in two strings.\n        '''\n        max_length = 0\n        i = 0\n        while i < len(s1) :\n            j = 0\n            while j < len(s2) :\n                if s1[i + j] == s2[j] :\n                    j += 1\n                    sub_s += s1[i]\n                    max_length = len(sub_s) if len(sub_s) > max_length else max_length\n                else :\n                    j = 0\n                    i += 1\n                    break\n                if i + j >= len(s1) :\n                    break\n            i += 1\n        return max_length, sub_s\n        \n    sub_s = \"\"\n    max_length, sub_s = get_Max_SubString(s1, s2, sub_s)\n    max_length, sub_s = get_Max_SubString(s2, s1, sub_s)\n    return max_length, sub_s\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==1\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = input()\n    for i in range(len(s) - 1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1 :\n        return True\n    elif len(s) == 0 :\n        return True\n    elif s[0]!= s[1] :\n        return False\n    else :\n        return all_Characters_Same(s[1:])\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for x in s :\n        if len(set(s)) == 1 :\n            print(\"Yes\")\n        else :\n            print(\"No\")\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    a = s[0]\n    for i in s[1:] :\n        if i!= a :\n            return False\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4/3 * side**3\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**3)*(math.sqrt(2)/12)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2) * math.sqrt(3) / 4\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = (side**2)*(3**(1/2))/4\n    return a\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*(3**0.5)/4*(side**3)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((side**2)*(3**(1/2)))\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * math.sqrt(3) / 9 * side * side\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if (type(side) is not int) or (side < 0):\n        return None\n    return (side ** 2 * math.sqrt(2)) / 4\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return pow(side, 2) * 4 / 3\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2) * math.sqrt(3) / 4\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    temp = []\n    i = 0\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    temp = list[n - 1]\n    for i in range(n - 1, m - 1, -1):\n        list[i] = list[i - 1]\n    list[m - 1] = temp\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m!= 0:\n        k = m\n        while k > 0:\n            temp = list[-1]\n            for i in range(len(list) - 1, 0, -1):\n                list[i] = list[i - 1]\n            list[0] = temp\n            k -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    i = m\n    j = len(list) - 1\n    while i < j:\n        temp = list[i]\n        list[i] = list[j]\n        list[j] = temp\n        i += 1\n        j -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    rotated = []\n    for i in range(len(list)-m, len(list)):\n        rotated.append(list[i])\n    for j in range(len(list)-m):\n        rotated.append(list[j])\n    return rotated\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    if length == 0:\n        return []\n    if length == 1:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    p1, p2, p3 = 0, 0, 0\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        # Move the last element to the firs place\n        list.insert(0, list.pop(n-1))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    len_list = len(list)\n    for i in range(0, m):\n        temp = list.pop(len(list)-1)\n        list.insert(0, temp)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for test in test_tup:\n        if test == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if (test_tup[0] == None) or (test_tup[1] == None) or (test_tup[2] == None) or (test_tup[3] == None) or (test_tup[4] == None) or (test_tup[5] == None):\n        return 1\n    else:\n        return 0\n    \ndef get_question(data):\n    '''\n    Write a function to split a string into a list of its words\n    '''\n    return data.split()\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for t in test_tup:\n        if t is None:\n            return True\n    return False\n    \n    \ndef check_type_tuple(test_tup, t):\n    '''\n    Write a function to check if the given tuple has only one type or not.\n    '''\n    for t in test_tup:\n        if type(t)!= t:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    res = any(None in tup for tup in test_tup)\n    return res\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup:\n        pass\n    else:\n        raise Exception(\"None value in tuple\")\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if None in test_tup else False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in range(len(test_tup)):\n        if(test_tup[i] == None):\n            return False\n    return True\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(\"\\n\")\n    print(\"--- Program to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains ---\")\n    print(\"\\n\")\n    startnum = int(input(\"Enter the starting number: \"))\n    endnum = int(input(\"Enter the ending number: \"))\n    print(\"\\n\")\n    print(\"Numbers within a given range from %d ti %d are divisible by all digits\"%(startnum, endnum))\n    print(\"\\n\")\n    for i in range(startnum, endnum+1):\n        s = list(str(i))\n        for j in range(0, len(s)):\n            if(int(s[j])==0):\n                continue\n            elif(i % int(s[j])!=0):\n                break\n        else:\n            print(i)\n    return\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all([num % int(i) == 0 for i in str(x)]), range(startnum, endnum)))\nprint(divisible_by_digits(100,2000))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_list = []\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    myrange = range(startnum, endnum+1)\n    def divisible(num):\n        flag = False\n        for digit in str(num):\n            if num % int(digit)!= 0:\n                flag = True\n                break\n        return flag\n    return (i for i in myrange if divisible(i))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num)]\n        for d in digits:\n            if d == 0 or num % d!= 0:\n                return False\n        return True\n    return [num for num in range(startnum,endnum+1) if is_divisible_by_digits(num)]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum):\n        if all(i % int(digit) == 0 for digit in str(i)):\n            print(i)\n            \ndivisible_by_digits(99,101)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible(num):\n        n = num\n        total = 0\n        while(n > 0):\n            digit = n % 10\n            total += digit\n            n //= 10\n        return total\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # startnum = 1\n    # endnum = 1000\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all([x % int(digit) == 0 for digit in str(x)]), range(startnum, endnum)))\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (a*(r**2))/360\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return a*r*r*math.pi/360\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        area = r*r*math.sin(math.radians(a))\n        return area\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None if a>360 else math.pi*r*r*(a/360)\n    \ndef area_of_sector(r,a):\n    '''\n    Write a function to find the area of sector. The function takes the radius and angle as inputs. If the angle is larger than 360, function should return None.\n    '''\n    return None if a>360 else math.pi*r*r*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (a/360)*(r**2)*(1.732*math.pi)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    def sector_area_recursive(r,a):\n        if a == 0:\n            return (r*r) * math.pi\n        if a == 180:\n            return (r*r) * math.pi\n        else:\n            return ((r*r)*math.pi) / a\n    if a < 360:\n        return sector_area_recursive(r,a)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = a\n    if angle < 360:\n        area = ((angle/360)*(math.pi*(r**2)))\n        print(area)\n    else:\n        print(\"None\")\n        \ndef polygon_area(lst):\n    '''\n    Write a function to compute the area of a polygon. Assume the polygon is a regular polygon with n number of sides. The function returns None if the number of sides is less than 3.\n    '''\n    if len(lst) < 3:\n        print(\"None\")\n    else:\n        side = lst[0]\n        area = 0\n        for x in range(len(lst)):\n            area = area + (side/2)*(lst[x] - lst[x-1])\n        print(round(abs(area),2))\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    s_area = (r**2)*math.pi*(a/360)\n    return s_area\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<=360:\n        return a*r*r*math.pi/360\n    else:\n        return None\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None for k in xrange(l + 1)] for j in xrange(n + 1)] for i in xrange(m + 1)] \n    \n    #Following steps build L[m+1][n+1][l+1] in bottom up fashion. Note\n    #that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n    #and Z[0..k-1] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    \n    return L[m][n][l] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    \n    # declaring the array for storing the dp values \n    L = [[None]*(l+1) for i in range(m+1)] \n    \n    # initializing the dp values to 0 \n    for i in range(m+1): \n        for j in range(l+1): \n            L[i][j] = 0\n    \n    #print(L) \n    \n    # Computing the lengths \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j] = L[i-1][j-1] + 1\n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][j-1]) \n    \n    # stores the result \n    LCS = \"\" \n    i = m \n    j = l \n    \n    # Follow the backtracking up \n    while i > 0 and j > 0: \n        #print(i,j,L[i][j])\n        if X[i-1] == Y[j-1] == Z[j-1]: \n            LCS = X[i-1] + LCS \n            i -= 1\n            j -= 1\n        #print(i,j,L[i][j])\n        elif L[i-1][j] > L[i][j-1] and L[i-1][j] > L[i-1][j-1]: \n            LCS = X[i-1] + LCS \n            i -= 1\n        elif L[i][j-1] > L[i-1][j] and L[i][j-1] > L[i-1][j-1]: \n            LCS = Y[j-1] + LCS \n            j -= 1\n        else: \n            LCS = Z[j-1] + LCS \n            j -= 1\n    \n    return LCS \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    # Create a table to store lengths of sub-sequences (n+1,m+1,l+1) \n    L = [[[0 for k in range(l+1)] for j in range(m+1)] for i in range(n+1)] \n    \n    # Following steps build L[m+1][n+1][l+1] in bottom up fashion. Note \n    # that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] and Z[0..k-1] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1], L[i][j-1][k-1]) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs(X, Y, Z):\n        m = len(X) \n        n = len(Y) \n        l = len(Z)\n        L = [[[0 for k in range(l + 1)] for j in range(n + 1)] for i in range(m + 1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    result = [[[0 for k in range(o + 1)] for j in range(n + 1)] for i in range(m + 1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # initialize the matrix \n    lcs_matrix = [[[0 for k in range(len(Z) + 1)] for j in range(len(Y) + 1)] for i in range(len(X) + 1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n=len(X)\n    m=len(Y)\n    l=len(Z)\n    L = [[[None]*(n+1) for i in range(m+1)] for i in range(l+1)]\n    for i in range(l+1):\n        for j in range(m+1):\n            for k in range(n+1):\n                if i==0 or j==0 or k==0:\n                    L[i][j][k]=0\n                elif X[k-1]==Y[j-1]==Z[i-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1]+1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    print (L[l][m][n])\n    return L[l][m][n]\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[A-Z])[A-Z]+', r' \\1', str1)\n    \n    \n    \ndef max_repetitions(str1, num):\n    '''\n    Write a function that finds the longest substring with exactly n occurrences of a given character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i:j].count(str1[i]) == num:\n                return str1[i:j]\n    \n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'[A-Z][a-z]',r' \\1',str1)\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    newstr = re.sub('(?<=\\w)([A-Z])', r' \\1', str1)\n    return newstr\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    # list1=[]\n    # str1=input(\"Enter the string: \")\n    # for word in str1.split():\n    #     if word.istitle():\n    #         list1.append(\"{} \".format(word))\n    #     else:\n    #         list1.append(word)\n    # new_str= \" \".join(list1)\n    # print(\"Output string: \",new_str)\n    # return new_str\n    \n    # # Below are the steps I followed:\n    # # 1. Split the string\n    # # 2. Check if the first character is a capital letter\n    # # 3. If it is a capital letter, insert a space after it\n    # # 4. Else, add it to the new string\n    # # 5. return the new string\n    # # Steps 2, 3, 4 and 5 is done by 'for' loop\n    # # Steps 1 and 6 is done by 'for in' loop\n    \n    new_str=\"\"\n    for word in str1.split():\n        if word[0].isupper():\n            new_str+=word+\" \"\n        else:\n            new_str+=word\n    return new_str\n    \ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    \n    # list1=[]\n    # str1=input(\"Enter the string: \")\n    # for word in str1.split():\n    #     list1.append(word)\n    # new_str=\" \".join(list1)\n    # print(\"The number of vowels in the string: \",new_str, end=\" \")\n    # print(len([i for i in new_str if i in ('A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u')]))\n    \n    # # Below are the steps I followed:\n    # # 1. Split the string\n    # # 2. For each word in the new string, check if it is vowel. If it is vowel, add it to a new list\n    # # 3. Return the length of the new list\n    # # Steps 1 and 2 is done by 'for' loop\n    # # Step 3 is done by 'len' function\n    \n    vowels=['A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u']\n    new_list=[]\n    for word in str1.split():\n        for letter in word:\n            if letter in vowels:\n                new_list.append(letter)\n    print(\"The number of vowels in the string: \",len(new_list))\n    \ndef count_digits(str1):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    \n    # list1=[]\n    # str1=input(\"Enter the string: \")\n    # for word in str1.split():\n    #     list1.append(word)\n    # new_str=\" \".join(list1)\n    # print(\"The number of digits in the string: \",new_str, end=\" \")\n    # print(len([i for i in new_str if i.isdigit()]))\n    \n    # # Below are the steps I followed:\n    # # 1. Split the string\n    # # 2. For each word in the new string, check if it is a digit. If it is a digit, add it to a new list\n    # # 3. Return the length of the new list\n    # # Steps 1 and 2 is done by 'for' loop\n    # # Step 3 is done by 'isdigit' function\n    \n    digits=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    new_list=[]\n    for word in str1.split():\n        for letter in word:\n            if letter in digits:\n                new_list.append(letter)\n    print(\"The number of digits in the string: \",len(new_list))\n    \ndef count_consonants(str1):\n    '''\n    Write a function to count the number of consonants in a given string.\n    '''\n    \n    # list1=[]\n    # str1=input(\"Enter the string: \")\n    # for word in str1.split():\n    #     list1.append(word)\n    # new_str=\" \".join(list1)\n    # print(\"The number of consonants in the string: \",new_str, end=\" \")\n    # print(len([i for i in new_str if i not in ('A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u')]))\n    \n    # # Below are the steps I followed:\n    # # 1. Split the string\n    # # 2. For each word in the new string, check if it is a consonant. If it is a consonant, add it to a new list\n    # # 3. Return the length of the new list\n    # # Steps 1 and 2 is done by 'for' loop\n    # # Step 3 is done by 'not' function\n    \n    consonants=['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n    new_list=[]\n    for word in str1.split():\n        for letter in word:\n            if letter not in consonants:\n                new_list.append(letter)\n    print(\"The number of consonants in the string: \",len(new_list))\n    \ndef palindrome(str1):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    \n    # list1=[]\n    # str1=input(\"Enter the string: \")\n    # for word in str1.split():\n    #     list1.append(word)\n    # new_str=\" \".join(list1)\n    # print(\"The string is a palindrome: \",new_str==new_str[::-1])\n    \n    # # Below are the steps I followed:\n    # # 1. Split the string\n    # # 2. Reverse the string\n    # # 3. Check if the reversed string is equal to the original string\n    # # Steps 1 and 2 is done by 'for' loop\n    # # Step 3 is done by '==' operator\n    \n    new_str1=\"\"\n    for word in str1.split():\n        new_str1+=word[::-1]\n    print(\"The string is a palindrome: \",new_str1==str1)\n    \ndef palindrome_v2(str1):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    \n    # list1=[]\n    # str1=input(\"Enter the string: \")\n    # for word in str1.split():\n    #     list1.append(word)\n    # new_str=\" \".join(list1)\n    # new_str1=new_str[::-1]\n    # print(\"The string is a palindrome: \",new_str==new_str1)\n    \n    # # Below are the steps I followed:\n    # # 1. Split the string\n    # # 2. Reverse the string\n    # # 3. Check if the reversed string is equal to the original string\n    # # Steps 1 and 2 is done by 'for' loop\n    # # Step 3 is done by '==' operator\n    \n    list1=str1.split()\n    new_str=\"\"\n    for word in list1:\n        new_str+=word[::-1]\n    print(\"The string is a palindrome: \",str1==new_str)\n    \ndef remove_vowels(str1):\n    '''\n    Write a function to remove all the vowels in a given string.\n    '''\n    \n    # list1=[]\n    # str1=input(\"Enter the string: \")\n    # for word in str1.split():\n    #     list1.append(word)\n    # new_str=\" \".join(list1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1 = re.findall(r'(^[A-Z][a-z]+)',str1)\n    str2 = ''\n    for i in list1:\n        str2 += i +''\n    return str2.strip()\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #Take out all the capital letters and replace with a single space between words\n    regex = re.compile('[A-Z][a-zA-Z]*')\n    match = regex.search(str1)\n    if match:\n        word = match.group()\n        capital_word = word.replace(word, \" \" + word)\n        str1 = str1.replace(word, capital_word)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = list(str1)\n    for index, letter in enumerate(str1):\n        if letter.isupper():\n            if letter.isalpha():\n                str1.insert(index,'')\n    str1 = ''.join(str1)\n    return str1\ndef split_string_in_parts_of_two(string):\n    '''\n    Write a function to split a string into two substrings of equal length\n    '''\n    string_list = list(string)\n    half_length = len(string_list)//2\n    first_half = string_list[:half_length]\n    second_half = string_list[half_length:]\n    return ''.join(first_half), ''.join(second_half)\ndef count_characters_in_string_re(string):\n    '''\n    Write a function to count the number of characters in a string using the regular expression pattern.\n    '''\n    return len(re.findall(r'\\w', string))\ndef count_characters_in_string_while(string):\n    '''\n    Write a function to count the number of characters in a string using the while loop.\n    '''\n    count = 0\n    for letter in string:\n        count += 1\n    return count\ndef even_odd_string(string):\n    '''\n    Write a function which changes the first character of a given string to uppercase,\n    if this first character is a lowercase letter,\n    and returns a message \"Success!\" if the string was modified,\n    and returns an error message \"Failure!\" otherwise.\n    '''\n    if string[0].isupper():\n        string = string.capitalize()\n        return \"Success!\"\n    else:\n        return \"Failure!\"\ndef change_to_even_numbers(numbers):\n    '''\n    Write a function to change a list of numbers into a list of their squares.\n    '''\n    for index, number in enumerate(numbers):\n        numbers[index] = number**2\n    return numbers\ndef change_to_even_numbers_while(numbers):\n    '''\n    Write a function to change a list of numbers into a list of their squares.\n    '''\n    numbers = list(numbers)\n    for index, number in enumerate(numbers):\n        numbers[index] = number**2\n    return numbers\ndef rotate_list(list_to_rotate):\n    '''\n    Write a function to rotate the items in a list\n    '''\n    rotated_list = []\n    for i in range(len(list_to_rotate)):\n        rotated_list.append(list_to_rotate[i - 1])\n    return rotated_list\ndef rotate_list_while(list_to_rotate):\n    '''\n    Write a function to rotate the items in a list\n    '''\n    rotated_list = []\n    for i in range(len(list_to_rotate)):\n        rotated_list.insert(0, list_to_rotate[i])\n    return rotated_list\ndef is_odd(number):\n    '''\n    Write a function to check if a given number is odd or not.\n    '''\n    return number % 2 == 1\ndef is_odd_while(number):\n    '''\n    Write a function to check if a given number is odd or not.\n    '''\n    if number % 2!= 0:\n        return True\n    else:\n        return False\ndef next_prime_number(number):\n    '''\n    Write a function to find the next prime number after the given number.\n    '''\n    prime_number = number + 1\n    while True:\n        if is_prime_number(prime_number):\n            return prime_number\n        prime_number += 1\ndef is_prime_number(number):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    elif number % 2 == 0:\n        return False\n    else:\n        for i in range(3, number, 2):\n            if number % i == 0:\n                return False\n    return True\ndef is_prime_number_while(number):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n    return True\ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome_while(string):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    reverse_string = list(string)\n    reverse_string.reverse()\n    return ''.join(reverse_string) == string\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string\n    '''\n    return string[::-1]\ndef reverse_string_while(string):\n    '''\n    Write a function to reverse a string\n    '''\n    reversed_string = []\n    for letter in string:\n        reversed_string.append(letter)\n    reversed_string.reverse()\n    return ''.join(reversed_string)\ndef first_three_characters(string):\n    '''\n    Write a function to return the first three characters of a given string.\n    '''\n    return string[:3]\ndef first_three_characters_while(string):\n    '''\n    Write a function to return the first three characters of a given string.\n    '''\n    return string[:3]\ndef first_three_characters_with_while(string):\n    '''\n    Write a function to return the first three characters of a given string.\n    '''\n    return string[0:3]\ndef first_and_last_3_characters(string):\n    '''\n    Write a function to return the first and last three characters of a given string.\n    '''\n    return string[:3] + string[-3:]\ndef first_and_last_3_characters_while(string):\n    '''\n    Write a function to return the first and last three characters of a given string.\n    '''\n    return string[0:3] + string[-3:]\ndef reverse_string_without_slicing(string):\n    '''\n    Write a function to reverse a string without using slicing.\n    '''\n    reverse_string = []\n    for letter in string:\n        reverse_string.insert(0, letter)\n    return ''.join(reverse_string)\ndef reverse_string_without_slicing_while(string):\n    '''\n    Write a function to reverse a string without using slicing.\n    '''\n    reverse_string = []\n    for letter in string:\n        reverse_string.append(letter)\n    return ''.join(reverse_string)\ndef string_is_pangram(string):\n    '''\n    Write a function to check if a string is a pangram.\n    '''\n    for letter in string:\n        if letter.isalpha():\n            continue\n        else:\n            return False\n    return True\ndef string_is_pangram_while(string):\n    '''\n    Write a function to check if a string is a pangram.\n    '''\n    for letter in string:\n        if letter.isalpha():\n            continue\n        else:\n            return False\n    return True\ndef remove_vowels(string):\n    '''\n    Write a function to remove all vowels from a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        string = string.replace(vowel, '')\n    return string\ndef remove_vowels_while(string):\n    '''\n    Write a function to remove all vowels from a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        while vowel in string:\n        "
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z][a-z]+)',r' \\1',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z])\\w+', r'\\1 ', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pat=r'\\b[A-Z]\\w*'\n    result=re.sub(pat,lambda m:m.group().lower()+' ',str1)\n    return result\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for x in nums_str:\n        nums_list.append(int(x))\n    nums_list.sort()\n    return nums_list\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda s: [int(i) if i.isdigit() else i for i in re.split(\"(\\d+)\", s)])\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = int(num_str)\n            nums.append(num)\n        except:\n            pass\n    return sorted(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    # Convert each string in list to an int and store it in a new list\n    for s in nums_str:\n        nums.append(int(s))\n    # sort the new list\n    nums.sort()\n    # convert the ints back to strings and store in a new list\n    new_nums = []\n    for num in nums:\n        new_nums.append(str(num))\n    return new_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    conversion = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}\n    nums_str.sort(key=lambda x: [conversion[i] for i in list(x)])\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # use of int() to convert a string to integer\n    return sorted(nums_str, key=lambda x: (int(x[0]), int(x[2:]), x[1]))\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # split the string list into int list\n    nums = list(map(int, nums_str))\n    \n    # sort the int list\n    nums.sort()\n    \n    #convert back to string list and join with ',' delimiter\n    nums_str = list(map(str, nums))\n    nums_str = ','.join(nums_str)\n    \n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(i) for i in nums_str]\n    nums.sort()\n    return [str(i) for i in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    s = list(map(int, nums_str))\n    s.sort()\n    return s"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # print(test_list)\n    # print(test_tup)\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    test_list.append(test_tup)\n    return test_list\n    \n    \ndef add_tuple_list(test_list, test_tup_list):\n    '''\n    Write a function to add all of the given tuples in the given list.\n    '''\n    \n    for i in range(0, len(test_tup_list)):\n        test_list.append(test_tup_list[i])\n    return test_list\n    \n    \ndef add_tuple_to_list(test_list, test_tup_list):\n    '''\n    Write a function to add the given tuples in the given list to the end of the given list.\n    '''\n    \n    test_list.extend(test_tup_list)\n    return test_list\n    \n    \ndef remove_tuple(test_list, test_tup):\n    '''\n    Write a function to remove the given tuple from the given list.\n    '''\n    \n    test_list.remove(test_tup)\n    return test_list\n    \n    \ndef remove_tuple_list(test_list, test_tup_list):\n    '''\n    Write a function to remove all of the given tuples from the given list.\n    '''\n    \n    for i in range(0, len(test_tup_list)):\n        test_list.remove(test_tup_list[i])\n    return test_list\n    \n    \ndef remove_tuple_from_list(test_list, test_tup_list):\n    '''\n    Write a function to remove the given tuples in the given list from the given list.\n    '''\n    \n    test_list = [x for x in test_list if x not in test_tup_list]\n    return test_list\n    \n    \ndef remove_value(test_list, test_value):\n    '''\n    Write a function to remove the given value from the given list.\n    '''\n    \n    test_list.remove(test_value)\n    return test_list\n    \n    \ndef remove_value_list(test_list, test_value_list):\n    '''\n    Write a function to remove all of the given values from the given list.\n    '''\n    \n    test_list = [x for x in test_list if x not in test_value_list]\n    return test_list\n    \n    \ndef remove_value_from_list(test_list, test_value_list):\n    '''\n    Write a function to remove the given values from the given list.\n    '''\n    \n    test_list = [x for x in test_list if x not in test_value_list]\n    return test_list\n    \n    \ndef is_value_in_list(test_list, test_value):\n    '''\n    Write a function that checks whether the given value is in the given list.\n    '''\n    \n    if test_value in test_list:\n        return True\n    else:\n        return False\n        \n        \ndef is_value_in_list_list(test_list, test_value_list):\n    '''\n    Write a function that checks whether the given value list is in the given list.\n    '''\n    \n    for i in range(0, len(test_value_list)):\n        if test_value_list[i] not in test_list:\n            return False\n    return True\n    \n    \ndef is_value_in_list_tuple_list(test_list, test_value_tuple_list):\n    '''\n    Write a function that checks whether the given value tuple list is in the given list.\n    '''\n    \n    for i in range(0, len(test_value_tuple_list)):\n        if test_value_tuple_list[i] not in test_list:\n            return False\n    return True\n    \n    \ndef count_value_in_list(test_list, test_value):\n    '''\n    Write a function to count the number of times the given value occurs in the given list.\n    '''\n    \n    test_list.count(test_value)\n    return test_list\n    \n    \ndef count_value_in_list_list(test_list, test_value_list):\n    '''\n    Write a function to count the number of times the given values occurs in the given list.\n    '''\n    \n    test_list_count = 0\n    for i in range(0, len(test_list)):\n        if test_list[i] in test_value_list:\n            test_list_count += 1\n    return test_list_count\n    \n    \ndef count_value_in_list_tuple_list(test_list, test_value_tuple_list):\n    '''\n    Write a function to count the number of times the given values occurs in the given list.\n    '''\n    \n    test_list_count = 0\n    for i in range(0, len(test_list)):\n        if test_list[i] in test_value_tuple_list:\n            test_list_count += 1\n    return test_list_count\n    \n    \ndef find_value_in_list(test_list, test_value):\n    '''\n    Write a function to find the first index of the given value in the given list.\n    '''\n    \n    test_list.index(test_value)\n    return test_list\n    \n    \ndef find_value_in_list_list(test_list, test_value_list):\n    '''\n    Write a function to find the first index of the given value list in the given list.\n    '''\n    \n    test_list_index = 0\n    for i in range(0, len(test_list)):\n        if test_list[i] in test_value_list:\n            test_list_index = i\n            break\n    return test_list_index\n    \n    \ndef find_value_in_list_tuple_list(test_list, test_value_tuple_list):\n    '''\n    Write a function to find the first index of the given value tuple list in the given list.\n    '''\n    \n    test_list_index = 0\n    for i in range(0, len(test_list)):\n        if test_list[i] in test_value_tuple_list:\n            test_list_index = i\n            break\n    return test_list_index\n    \n    \ndef get_index_of_value_in_list(test_list, test_value):\n    '''\n    Write a function to get the index of the given value in the given list.\n    '''\n    \n    test_list.index(test_value)\n    return test_list\n    \n    \ndef get_index_of_value_in_list_list(test_list, test_value_list):\n    '''\n    Write a function to get the index of the given value list in the given list.\n    '''\n    \n    test_list_index = 0\n    for i in range(0, len(test_list)):\n        if test_list[i] in test_value_list:\n            test_list_index = i\n            break\n    return test_list_index\n    \n    \ndef get_index_of_value_in_list_tuple_list(test_list, test_value_tuple_list):\n    '''\n    Write a function to get the index of the given value tuple list in the given list.\n    '''\n    \n    test_list_index = 0\n    for i in range(0, len(test_list)):\n        if test_list[i] in test_value_tuple_list:\n            test_list_index = i\n            break\n    return test_list_index\n    \n    \ndef sort_list(test_list):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    test_list.sort()\n    return test_list\n    \n    \ndef sort_list_list(test_list):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    test_list.sort()\n    return test_list\n    \n    \ndef sort_list_tuple_list(test_list):\n    '''\n    Write a function t"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return None\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # TODO: complete the function to return the list and add test_tup to the list\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    print(\"The list before adding tuple:\")\n    print(test_list)\n    print(\"The tuple to be added:\")\n    print(test_tup)\n    #add_tuple([1, 3, 5], (2, 4, 6))\n    test_list.append(test_tup)\n    print(\"The list after adding tuple:\")\n    print(test_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    print(test_list + test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Use list.append() to add the tuple to the end of the list.\n    #\n    #\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    if i >= len(arr):\n        return False\n    if arr[i] > arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, i*2+1) and check_min_heap_helper(arr, i*2+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] >= arr[(i - 1) // 2] and check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2):\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    print('i = ', i)\n    if i >= len(arr):\n        return True\n    \n    left_child_index = 2 * i\n    right_child_index = 2 * i + 1\n    print('left_child_index = ', left_child_index)\n    print('right_child_index = ', right_child_index)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr)//2:\n        return True\n    if arr[2*i] < arr[2*i+1] or arr[2*i+1] == arr[i]:\n        return check_min_heap_helper(arr, 2*i+1)\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parentIndex = i\n    if arr[i] < arr[2*i+1] or arr[i] < arr[2*i+2]:\n        return False\n    if 2*i+1 < len(arr):\n        if 2*i+2 < len(arr):\n            return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n        else:\n            return check_min_heap_helper(arr, 2*i+1)\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr):\n        if arr[left] < arr[i]:\n            return False\n    if right < len(arr):\n        if arr[right] < arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return 0\n    if arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]:\n        return check_min_heap_helper(arr, 2 * i + 1) + check_min_heap_helper(arr, 2 * i + 2) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0 and i < len(arr):\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i <= 0:\n        return\n    left = 2 * i\n    right = 2 * i + 1\n    # check if current node is a leaf node\n    if left >= len(arr) and right >= len(arr):\n        return\n    if left < len(arr) and arr[i] > arr[left]:\n        return\n    if right < len(arr) and arr[i] > arr[right]:\n        return\n    # check if current node is a non leaf node and left child is smaller than right child\n    check_min_heap_helper(arr, left)\n    check_min_heap_helper(arr, right)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 4: return 1\n    return 3 * jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 7\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) * 2\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    num_jacobsthal = 0\n    for i in range(1,n+1): \n        if(i%2==0):\n            num_jacobsthal += 3\n        else:\n            num_jacobsthal += 4\n    return num_jacobsthal\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (4*jacobsthal_num(n-1) - jacobsthal_num(n-2))\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # List to store all the previous numbers\n    numbers = [0, 1, 1]\n    \n    # Keep track of the number of previous numbers added to the list\n    number_count = 3\n    \n    while number_count < n:\n        \n        # The last two numbers added to the list are the two previous numbers multiplied together\n        # The first number added to the list is the last number in the list plus the last number in the list plus one\n        numbers.append(numbers[-2] + numbers[-1] + 1)\n        \n        # Keep track of the number of numbers added to the list\n        number_count += 1\n    \n    return numbers[-1]\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    \n    if(n == 0):\n        return 1\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # initialise a list to store the jacobsthal numbers\n    jacobsthal_nums = []\n    \n    # initialise a variable to keep track of the number of jacobsthal numbers\n    n_jacobsthal_nums = 0\n    \n    # write a while loop to iterate through numbers until the nth jacobsthal number is found\n    while n_jacobsthal_nums < n:\n        \n        # initialise a variable to store the result of adding the previous two jacobsthal numbers together\n        j = 0\n        \n        # write a for loop to iterate through the previous jacobsthal numbers\n        for i in jacobsthal_nums[:-2]:\n            \n            # add the two previous jacobsthal numbers together\n            j = j + i\n        \n        # append the result of the addition of the previous two jacobsthal numbers to the list of jacobsthal numbers\n        jacobsthal_nums.append(j)\n        \n        # increment the number of jacobsthal numbers by 1\n        n_jacobsthal_nums = n_jacobsthal_nums + 1\n        \n    # return the nth jacobsthal number\n    return jacobsthal_nums[n-1]\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    a, b = 1, 1\n    for i in range(3, n + 1): \n        c = (a + b) % i \n        a, b = b, c\n    return b \n    \ndef jacobsthal_num_lucas(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    a, b = 0, 2\n    for i in range(3, n + 1): \n        c = (a + b) % i \n        a, b = b, c\n    return b \n    \ndef jacobsthal_num_lucas_sequence(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    a, b = 0, 2\n    for i in range(3, n + 1): \n        c = (a + b) % i \n        a, b = b, c\n    return b \n    \ndef jacobsthal_num_sequence(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    a, b = 0, 1\n    for i in range(3, n + 1): \n        c = (a + b) % i \n        a, b = b, c\n    return b \n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    nums = [0,1]\n    if n < 2:\n        return nums[n]\n    else:\n        while len(nums) < n + 1:\n            nums.append(nums[-1] + nums[-2])\n    return nums[-1]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return test_list\n    else:\n        return sorted(test_list, key=lambda x: x[1])[:K]\n    \n    \ndef main():\n    print(min_k([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7)], 3))\n    print(min_k([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7)], 7))\n    print(min_k([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7)], 0))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # take a min of K if K<len(list)\n    if K < len(test_list):\n        return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    def swap(lst, i, j):\n        '''\n        Swap two elements in list\n        '''\n        \n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp_list = []\n    for k in test_list:\n        temp_list.append(tuple(k))\n    temp_list.sort(key=lambda x:x[-1])\n    return temp_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x: x[0])\n    print(test_list)\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #print(test_list)\n    test_list.sort(key = lambda x: x[1])\n    #print(test_list)\n    return test_list[:K]\n    \ndef test_min_k():\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 1) == [('a', 3), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 2) == [('a', 3), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 3) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 4) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 5) == [('d', 4), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 6) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 7) == [('d', 4), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 8) == [('d', 4), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 9) == [('d', 4), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 10) == [('d', 4), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 0) == []\n    assert min_k([], 0) == []\n    assert min_k([('a', 3)], 1) == [('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 2) == [('a', 3), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 3) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 4) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 5) == [('d', 4), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 6) == [('d', 4), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 7) == [('d', 4), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 8) == [('d', 4), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 9) == [('d', 4), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 10) == [('d', 4), ('b', 2), ('c', 1)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 0) == []\n    assert min_k([], 0) == []\n    assert min_k([], 1) == []\n    assert min_k([('a', 3)], 2) == [('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 3) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 4) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 5) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 6) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 7) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 8) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 9) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 10) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 0) == []\n    assert min_k([], 0) == []\n    assert min_k([], 1) == []\n    assert min_k([('a', 3)], 2) == [('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 3) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('b', 2), ('c', 1), ('d', 4), ('e', 5), ('f', 3)], 4) == [('d', 4), ('b', 2), ('a', 3)]\n    assert min_k([('a', 3), ('"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # test_list = (5, 2, 3, 4, 6)\n    # K = 4\n    #test_list = [5, 2, 3, 4, 6]\n    # K = 4\n    test_list = [5, 2, 3, 4, 6]\n    K = 4\n    new_list = []\n    count = 0\n    while True:\n        if len(test_list) < K:\n            K = len(test_list)\n        min_index = test_list.index(min(test_list))\n        new_list.append(test_list[min_index])\n        test_list.pop(min_index)\n        if len(test_list) < K:\n            break\n    return new_list"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #return [test_list[i] for i in heapq.nsmallest(K, range(len(test_list)), test_list.__getitem__)]\n    return [test_list[i] for i in heapq.nsmallest(K, test_list)]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp_list = []\n    temp_list_len = len(test_list)\n    while temp_list_len >= K:\n        min_val = min(test_list)\n        temp_list.append(min_val)\n        test_list.remove(min_val)\n        temp_list_len = len(test_list)\n    return temp_list\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass # Your code goes here\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    l3 = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    \n    l1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    l3 = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            result.append(l1[index])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # I will use sets to take care of duplicates and find common elements\n    \n    set1 = set(l1)\n    set2 = set(l2)\n    set3 = set(l3)\n    \n    \n    result = set1.intersection(set2).intersection(set3)\n    \n    return list(result)\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # check input list lengths\n    if len(l1)!= len(l2) or len(l1)!= len(l3) or len(l2)!= len(l3):\n        return None\n    # create result list\n    result = []\n    # loop over all indexes in list\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    \n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l1[i] in l3:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    new_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            new_list.append(l1[i])\n    return new_list\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            res.append(l1[i])\n    return res\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min1 = min(numbers)\n    numbers.remove(min1)\n    min2 = min(numbers)\n    return min2\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) > 1:\n        first_min = min(numbers)\n        numbers.remove(first_min)\n        second_min = min(numbers)\n    else:\n        return None\n    return second_min\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) > 1:\n        return numbers[1]\n    else:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #sort the list\n    sorted_list = sorted(numbers)\n    #check if the second number is valid\n    if len(sorted_list) < 2:\n        return(\"There aren't enough numbers to find the second smallest\")\n    #return the second smallest number\n    return sorted_list[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # your code goes here\n    \n    numbers.sort()\n    \n    print(numbers[1])\n    \n    return\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n    \nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 9, 9]))"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    for num in numbers:\n        if num!= smallest and num > smallest:\n            return num\n        \nprint(second_smallest([1, 2, 3, 1, 4, 5, 6, 6]))\nprint(second_smallest([1, 3, 4, 2])"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list\n    numbers.sort()\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    x = re.findall(\"ab*\", text)\n    return bool(x)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(\"ab*\")\n    result = pattern.match(text)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    patterns = 'ab*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.b*'\n    if re.match(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    r = re.search(\"a.*b\", text)\n    if r is None:\n        return 0\n    return 1\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab*'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n    \ndef text_match_one_or_more_not_star(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab+?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n    \ndef text_match_exactly_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"ab+\")\n    if pattern.search(text):\n        return \"Found a match!\"\n    else:\n        return(\"Not matched!\")\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(\"a.b*\",text)\n    if pattern:\n        return \"Pattern found: %s\" % pattern\n    else:\n        return \"Pattern not found\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a\\bb+')\n    if pattern.search(text):\n        return \"Match Found\"\n    else:\n        return \"No Match Found\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r\"a.*b\",text):\n        return \"Yes\"\n    return \"No\"\n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r\"a.*b\",text):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                print(test_list[i], test_list[j], test_list[j][::-1])\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if str(test_list[i])[::-1] == str(test_list[j]):\n                reverse_pairs += 1\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    lst_dict = dict()\n    for word in test_list:\n        if word[::-1] not in lst_dict:\n            lst_dict[word[::-1]] = 1\n        else:\n            lst_dict[word[::-1]] += 1\n    count = 0\n    for i in lst_dict:\n        count += int(lst_dict[i]/2)\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    res = 0\n    for i in test_list:\n        for j in test_list:\n            if i[::-1] == j:\n                res += 1\n    return res\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict={}\n    for item in test_list:\n        key=item[::-1]\n        if key not in dict:\n            dict[key]=1\n        else:\n            dict[key]+=1\n    for key,value in dict.items():\n        print(key,value)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum(list(map(lambda i: len(list(filter(lambda j: i[::-1] == j[::-1], test_list)))), test_list)))\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pair_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                pair_count += 1\n    print(pair_count)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum(len(set(s[::-1] for s in t)) // 2 for t in test_list)\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    tuple_list = [tuple(list1)]\n    tuple_list = set(tuple_list)\n    return {tuple(x):list1.count(x) for x in tuple_list}\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # count = 0\n    # result = {}\n    # for i in list1:\n    #     count += 1\n    #     if i in result:\n    #         result[i] += 1\n    #     else:\n    #         result[i] = 1\n    # return result\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for sublist in list1:\n        t = tuple(sublist)\n        sublists.append(t)\n    return dict(Counter(sublists))\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def tuple_count(x):\n        if isinstance(x, tuple):\n            return tuple_count(x[0])+tuple_count(x[1])\n        else:\n            return 1\n    list1_tuple=list(map(tuple_count,list1))\n    list1_dict={}\n    for i in list1_tuple:\n        if i not in list1_dict:\n            list1_dict[i]=1\n        else:\n            list1_dict[i]+=1\n    return list1_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # YOUR CODE HERE\n    sublists = []\n    for i in range(len(list1)):\n        # print(i)\n        sublists.append([])\n        for j in range(len(list1)):\n            # print(j)\n            if list1[i] == list1[j]:\n                # print(list1[i], list1[j])\n                sublists[i].append(list1[j])\n            else:\n                pass\n        sublists[i] = tuple(sublists[i])\n    # print(sublists)\n    # print(type(sublists[0]))\n    sublist_dict = {}\n    for i in range(len(list1)):\n        sublist_dict[sublists[i]] = sublists.count(sublists[i])\n    return sublist_dict\n    # print(sublist_dict)\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    list3 = []\n    for i in list1:\n        for j in i:\n            list2.append(tuple(j))\n    for k in list2:\n        if k not in list3:\n            list3.append(k)\n    dict1 = {}\n    for l in list3:\n        dict1[l] = list2.count(l)\n    return dict1\nprint(unique_sublists([[[1,2,3],2],[[3],3],[[3,2,3],[2,1],[1,2]],[[1,2,3],[1,2,3]]]))\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for list2 in list1:\n        count = 1\n        for list3 in list1:\n            if list2 == list3:\n                count += 1\n        counts[tuple(list2)] = count\n    return counts\n    \ndef count_list(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for list2 in list1:\n        count = 0\n        for list3 in list1:\n            if list2 == list3:\n                count += 1\n        counts[tuple(list2)] = count\n    return counts\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    list3 = []\n    list4 = []\n    for i in range(len(list1)):\n        list2.append(tuple(list1[i]))\n    for i in range(len(list2)):\n        for j in range(len(list2)):\n            if list2[i] == list2[j] and i!= j:\n                list4.append(list2[i])\n    for i in range(len(list4)):\n        list3.append(list4[i])\n    dict1 = dict((x, list3.count(x)) for x in list3)\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            new_list.append(list1[i][j])\n    tuple_list = tuple(new_list)\n    return list(set(tuple_list))\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for i in list1:\n        if type(i) == list:\n            dict1[tuple(i)] = list1.count(i)\n    return dict1\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == \"\":\n        return False\n    num = num.replace(\".\",\"\")\n    return num.isdigit()\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = float(num)\n    num = int(num) if num.is_integer() else num\n    \n    return True if num == int(num) else False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdecimal()\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        x = float(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n    \n    # convert string to float, then check whether it's a decimal number with 2 decimal places\n    # if not, raise an error\n    \n    # test cases\n    #print(is_decimal('1.23'))\n    #print(is_decimal('12.34'))\n    #print(is_decimal('123.45'))\n    \n    # O(n)\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = int(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_set = set(num)\n    #print(num_set)\n    if num_set == {'.'} or num_set == {'1','2','3','4','5','6','7','8','9'}:\n        if num[0] == '0':\n            return False\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0:\n        return False\n    else:\n        try:\n            a = float(num)\n            if abs(round(a,2)-a) < 0.01:\n                return True\n            else:\n                return False\n        except:\n            return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return(len(set(arr))==len(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n    \n    \ndef check_even_without_mod(n):\n    '''\n    Write a python function to check whether a given number is even without using % operator or modulo.\n    '''\n    return n&1 == 0\n    \n    \ndef check_even_with_mod(n):\n    '''\n    Write a python function to check whether a given number is even without using % operator or modulo.\n    '''\n    return n%2 == 0\n    \ndef all_even(arr):\n    '''\n    Write a python function to check whether all elements of a list are even or not.\n    '''\n    return all(n&1==0 for n in arr)\n    \ndef all_even_without_mod(arr):\n    '''\n    Write a python function to check whether all elements of a list are even without using % operator or modulo.\n    '''\n    return all(n%2 == 0 for n in arr)\n    \ndef all_even_with_mod(arr):\n    '''\n    Write a python function to check whether all elements of a list are even without using % operator or modulo.\n    '''\n    return all(n%2 == 0 for n in arr)\n    \ndef min_max(arr):\n    '''\n    Write a python function to check the minimum and maximum element of a list without using min and max functions.\n    '''\n    min = None\n    max = None\n    for n in arr:\n        if min == None or min > n:\n            min = n\n        if max == None or max < n:\n            max = n\n    return (min, max)\n    \n    \ndef min_max_without_builtins(arr):\n    '''\n    Write a python function to check the minimum and maximum element of a list without using min and max functions.\n    '''\n    arr = sorted(arr)\n    return (arr[0], arr[-1])\n    \ndef min_max_with_builtins(arr):\n    '''\n    Write a python function to check the minimum and maximum element of a list without using min and max functions.\n    '''\n    return (min(arr), max(arr))\n    \ndef min_max_with_counter(arr):\n    '''\n    Write a python function to check the minimum and maximum element of a list without using min and max functions.\n    '''\n    c = Counter(arr)\n    return (c.most_common()[0][0], c.most_common()[-1][0])\n    \ndef min_max_with_counter_without_builtins(arr):\n    '''\n    Write a python function to check the minimum and maximum element of a list without using min and max functions.\n    '''\n    c = Counter(arr)\n    return c.most_common()[0][0], c.most_common()[-1][0]\n    \ndef min_max_with_counter_without_builtins_2(arr):\n    '''\n    Write a python function to check the minimum and maximum element of a list without using min and max functions.\n    '''\n    c = Counter(arr)\n    return (list(c.keys())[0], list(c.keys())[-1])\n    \ndef first_last_common_elements(arr):\n    '''\n    Write a python function to find the first and last common elements of a list without using min and max functions.\n    '''\n    return (next((i for i, j in enumerate(arr) if j in arr[0:i]), None),\n            next((i for i, j in enumerate(arr) if j in arr[-1:-i-1:-1]), None))\n    \ndef first_last_common_elements_without_builtins(arr):\n    '''\n    Write a python function to find the first and last common elements of a list without using min and max functions.\n    '''\n    common_first = None\n    common_last = None\n    for i, n in enumerate(arr):\n        if common_first == None:\n            if n in arr[0:i]:\n                common_first = n\n        if common_last == None:\n            if n in arr[-1:-i-1:-1]:\n                common_last = n\n    return (common_first, common_last)\n    \ndef first_last_common_elements_with_builtins(arr):\n    '''\n    Write a python function to find the first and last common elements of a list without using min and max functions.\n    '''\n    return (list(set(arr).intersection(arr[0:-1]))[0],\n            list(set(arr).intersection(arr[::-1]))[0])\n    \ndef first_last_common_elements_without_builtins(arr):\n    '''\n    Write a python function to find the first and last common elements of a list without using min and max functions.\n    '''\n    common_first = None\n    common_last = None\n    for i, n in enumerate(arr):\n        if common_first == None:\n            if n in arr[0:i]:\n                common_first = n\n        if common_last == None:\n            if n in arr[-1:-i-1:-1]:\n                common_last = n\n    return (common_first, common_last)\n    \ndef split_array(arr, n):\n    '''\n    Write a python function to split an array into different arrays of equal sum\n    '''\n    if len(arr) < n or n < 0:\n        return None\n    split_arr = []\n    for i in range(1, len(arr)):\n        curr_sum = 0\n        j = 0\n        while curr_sum < n and j < i:\n            curr_sum += arr[j]\n            j += 1\n        if curr_sum == n:\n            split_arr.append(arr[0:j])\n            arr = arr[j:]\n    split_arr.append(arr)\n    return split_arr\n    \ndef split_array_without_builtins(arr, n):\n    '''\n    Write a python function to split an array into different arrays of equal sum\n    '''\n    if len(arr) < n or n < 0:\n        return None\n    \n    split_arr = []\n    for i in range(1, len(arr)):\n        curr_sum = 0\n        j = 0\n        while curr_sum < n and j < i:\n            curr_sum += arr[j]\n            j += 1\n        if curr_sum == n:\n            split_arr.append(arr[0:j])\n            arr = arr[j:]\n    split_arr.append(arr)\n    return split_arr\n    \ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates in an array\n    '''\n    return list(dict.fromkeys(arr))\n    \ndef remove_duplicates_without_builtins(arr):\n    '''\n    Write a python function to remove duplicates in an array\n    '''\n    return list(set(arr))\n    \ndef remove_duplicates_without_builtins_2(arr):\n    '''\n    Write a python function to remove duplicates in an array\n    '''\n    return list(OrderedDict.fromkeys(arr))\n    \ndef remove_duplicates_with_builtins(arr):\n    '''\n    Write a python function to remove duplicates in an array\n    '''\n    return list(dict.fromkeys(arr))\n    \ndef remove_duplicates_with_builtins_2(arr):\n    '''\n    Write a python function to remove duplicates in an array\n    '''\n    return list(OrderedDict.fromkeys(arr))\n    \ndef read_file_as_string(path):\n    '''\n    Write a python function to read a file as a string\n    '''\n    with open(path, \"r\") as file:\n        return file.read()\n        \ndef read_file_as_string_without_builtins(path):\n    '''\n    Write a python function to read a file as a string\n    '''\n    with open(path, \"r\") as file:\n        return file.read()\n    \ndef read_file_as_string_with_builtins(path):\n    '''\n    Write a python function to read a file as a string\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    if len(arr) > 1:\n        if arr[0] == arr[1]:\n            for i in range(1, len(arr)):\n                if arr[i]!= arr[i - 1]:\n                    return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = [1,1,2,3,4,4,5,5]\n    result = [arr[i] for i in range(len(arr)) if arr.count(arr[i]) == 1]\n    print(result)\n    if len(result) == 0:\n        print(\"all items are same\")\n    else:\n        print(result)\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    print(\"Input :\",arr)\n    if len(arr) == 0:\n        print(\"Output: No Element\")\n    elif len(arr) == 1:\n        print(\"Output:\",arr[0])\n    elif len(arr) > 1:\n        unique_value = 0\n        for value in arr:\n            if arr.count(value) == 1:\n                unique_value = value\n        print(\"Output :\",unique_value)\n    else:\n        print(\"Output: No Element\")\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    result = []\n    for i in arr:\n        if i not in result:\n            result.append(i)\n    return result == arr\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr))==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(monthnum3, \"has 30 days.\")\n    elif monthnum3 == 2:\n        print(monthnum3, \"has 28 or 29 days.\")\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(monthnum3, \"has 31 days.\")\n    else:\n        print(\"Unknown month number.\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return 30\n    else:\n        return 31\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        print(\"January has 31 days\")\n    elif monthnum3 == 2:\n        print(\"February has 28 days or 29 days\")\n    elif monthnum3 == 3:\n        print(\"March has 31 days\")\n    elif monthnum3 == 4:\n        print(\"April has 30 days\")\n    elif monthnum3 == 5:\n        print(\"May has 31 days\")\n    elif monthnum3 == 6:\n        print(\"June has 30 days\")\n    elif monthnum3 == 7:\n        print(\"July has 31 days\")\n    elif monthnum3 == 8:\n        print(\"August has 31 days\")\n    elif monthnum3 == 9:\n        print(\"September has 30 days\")\n    elif monthnum3 == 10:\n        print(\"October has 31 days\")\n    elif monthnum3 == 11:\n        print(\"November has 30 days\")\n    elif monthnum3 == 12:\n        print(\"December has 31 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        print(\"Error: Please enter a number from 1 to 12!\")\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        print(\"30 days\")\n    elif monthnum3 == 4 or 6 or 9 or 11:\n        print(\"30 days\")\n    else:\n        print(\"31 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return 30\n    else:\n        return 31\n    \n    \n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2!= 0 and monthnum3 <= 7:\n        print(\"30 days are there\")\n    elif monthnum3 % 2!= 0 and monthnum3 > 7 and monthnum3 <= 10:\n        print(\"30 days are there\")\n    elif monthnum3 % 2 == 0 and monthnum3 % 4 == 0 and monthnum3 <= 7:\n        print(\"30 days are there\")\n    elif monthnum3 % 2 == 0 and monthnum3 % 4 == 0 and monthnum3 > 7 and monthnum3 <= 10:\n        print(\"30 days are there\")\n    else:\n        print(\"31 days are there\")\n    return\ncheck_monthnumber_number(6)\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        print(\"Yes\")\n    elif monthnum3 == 4 or 6 or 9 or 11:\n        print(\"No\")\n    else:\n        print(\"Error!\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 == 1) or (monthnum3 == 3) or (monthnum3 == 5) or (monthnum3 == 7) or (monthnum3 == 8) or (monthnum3 == 10) or (monthnum3 == 12):\n        return(31)\n    elif (monthnum3 == 2) or (monthnum3 == 4) or (monthnum3 == 6) or (monthnum3 == 9) or (monthnum3 == 11):\n        return(30)\n    else:\n        return(0)\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1] - arr[0] \n    for i in range(1,n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1] \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort()\n    # initialize difference\n    diff = arr[1] - arr[0]\n    # initialize minimum difference\n    minimum = diff\n    # iterate for all elements\n    for i in range(n):\n        # checking the difference from the ith element to the (n-1)th element\n        diff = arr[i+1] - arr[i]\n        # update minimum difference\n        if diff < minimum:\n            minimum = diff\n    return minimum\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 10**9\n    arr.sort() \n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    res = arr[1] - arr[0] \n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[j] - arr[i] < res: \n                res = arr[j] - arr[i] \n    return res \n    \ndef min_element_in_every_window_sliding_window_1(arr, n, w): \n    ''' \n    Write a python function to find the minimum element in every window of size w and slide the window from left to right in an array. \n    '''\n    res = [] \n    for i in range(n - w + 1): \n        min_elem = arr[i] \n        for j in range(1, w + 1): \n            if arr[i + j] < min_elem: \n                min_elem = arr[i + j] \n        res.append(min_elem) \n    return res \n    \ndef min_element_in_every_window_sliding_window_2(arr, n, w): \n    ''' \n    Write a python function to find the minimum element in every window of size w and slide the window from right to left in an array. \n    '''\n    res = [] \n    for i in range(n - w + 1): \n        min_elem = arr[i] \n        for j in range(w): \n            if arr[i + j] < min_elem: \n                min_elem = arr[i + j] \n        res.append(min_elem) \n    return res[::-1] \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    sorted_arr = sorted(arr)\n    min_diff = sorted_arr[1] - sorted_arr[0]\n    for i in range(n): \n        for j in range(i+1,n): \n            min_diff = min(min_diff, sorted_arr[j] - sorted_arr[i]) \n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[n-1] - arr[0]\n    for i in range(0, n-1): \n        for j in range(i + 1, n): \n            if (arr[i] - arr[j]) < min_diff: \n                min_diff = arr[i] - arr[j]\n    return min_diff\n  "
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = sys.maxsize \n    arr.sort() \n    for i in range(1, n): \n        diff = arr[i] - arr[i - 1] \n        min_diff = min(diff, min_diff) \n    return min_diff \ndef find_max_diff(arr, n): \n    ''' \n    Write a python function to find the maximum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-maximum-difference-pair/\n    '''\n    max_diff = -sys.maxsize \n    arr.sort() \n    for i in range(1, n): \n        diff = arr[i] - arr[i - 1] \n        max_diff = max(diff, max_diff) \n    return max_diff \ndef find_max_min_diff(arr, n): \n    '''\n    Write a python function to find the maximum difference between a given number and maximum in the array, and minimum difference between the given number and minimum in the array. https://www.geeksforgeeks.org/find-maximum-and-minimum-in-given-number-array/\n    '''\n    arr.sort() \n    max = -sys.maxsize \n    min = sys.maxsize \n    for i in range(n): \n        if arr[i] > max: \n            max = arr[i] \n        if arr[i] < min: \n            min = arr[i] \n    return max - min \ndef find_closest_number(arr, n, x): \n    '''\n    Write a python function to find the closest number to a given number in a given array. https://www.geeksforgeeks.org/find-closest-number-array/\n    '''\n    arr.sort() \n    start = 0\n    end = n - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if (x - arr[mid]) == (arr[mid + 1] - x): \n            return arr[mid + 1] \n        if (x - arr[mid]) > (arr[mid + 1] - x): \n            start = mid + 1\n        else: \n            end = mid - 1\n    return arr[mid] \ndef find_closest_number2(arr, n, x): \n    '''\n    Write a python function to find the closest number to a given number in a given array. https://www.geeksforgeeks.org/find-closest-number-array/\n    '''\n    arr.sort() \n    start = 0\n    end = n - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if (x - arr[mid]) == (arr[mid + 1] - x): \n            return arr[mid] \n        if (x - arr[mid]) > (arr[mid + 1] - x): \n            start = mid + 1\n        else: \n            end = mid - 1\n    return arr[mid] \ndef find_maximum_subarray_sum(arr, n): \n    '''\n    Write a python function to find the maximum contiguous subarray sum of the given array. https://www.geeksforgeeks.org/maximum-subarray-sum-contiguous-subarray/\n    '''\n    max_so_far = -sys.maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(n): \n        max_ending_here += arr[i] \n        if max_so_far < max_ending_here: \n            max_so_far = max_ending_here\n            start = s \n            end = i \n        if max_ending_here < 0: \n            max_ending_here = 0\n            s = i + 1\n    print(\"Maximum contiguous sum is %d\"%(max_so_far)) \n    print(\"Starting index %d\"%(start)) \n    print(\"Ending index %d\"%(end)) \n    print(\"Maximum subarray is\", arr[start:end + 1]) \ndef find_maximum_subarray_sum2(arr, n): \n    '''\n    Write a python function to find the maximum contiguous subarray sum of the given array. https://www.geeksforgeeks.org/maximum-subarray-sum-contiguous-subarray/\n    '''\n    max_so_far = -sys.maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(n): \n        max_ending_here += arr[i] \n        if max_so_far < max_ending_here: \n            max_so_far = max_ending_here\n            start = s \n            end = i \n        if max_ending_here < 0: \n            max_ending_here = 0\n            s = i + 1\n    return max_so_far, arr[start:end + 1] \ndef find_minimum_subarray_sum(arr, n): \n    '''\n    Write a python function to find the minimum contiguous subarray sum of the given array. https://www.geeksforgeeks.org/minimum-subarray-sum-contiguous-subarray/\n    '''\n    min_so_far = sys.maxsize \n    min_ending_here = 0\n    s = 0\n    for i in range(n): \n        min_ending_here += arr[i] \n        if min_so_far > min_ending_here: \n            min_so_far = min_ending_here \n            s = i \n    print(\"Minimum contiguous sum is %d\"%(min_so_far)) \n    print(\"Starting index %d\"%(s)) \ndef find_minimum_subarray_sum2(arr, n): \n    '''\n    Write a python function to find the minimum contiguous subarray sum of the given array. https://www.geeksforgeeks.org/minimum-subarray-sum-contiguous-subarray/\n    '''\n    min_so_far = sys.maxsize \n    min_ending_here = 0\n    s = 0\n    for i in range(n): \n        min_ending_here += arr[i] \n        if min_so_far > min_ending_here: \n            min_so_far = min_ending_here \n            s = i \n    return min_so_far \ndef find_minimum_subarray_sum3(arr, n): \n    '''\n    Write a python function to find the minimum contiguous subarray sum of the given array. https://www.geeksforgeeks.org/minimum-subarray-sum-contiguous-subarray/\n    '''\n    min_so_far = sys.maxsize \n    min_ending_here = 0\n    s = 0\n    for i in range(n): \n        min_ending_here += arr[i] \n        if min_so_far > min_ending_here: \n            min_so_far = min_ending_here \n            s = i \n    return s \ndef find_minimum_subarray_sum4(arr, n): \n    '''\n    Write a python function to find the minimum contiguous subarray sum of the given array. https://www.geeksforgeeks.org/minimum-subarray-sum-contiguous-subarray/\n    '''\n    min_so_far = sys.maxsize \n    min_ending_here = 0\n    s = 0\n    for i in range(n): \n        min_ending_here += arr[i] \n        if min_so_far > min_ending_here: \n            min_so_far = min_ending_here \n            s = i \n    return min_so_far \ndef find_minimum_subarray_sum5(arr, n): \n    '''\n    Write a python function to find the minimum contiguous subarray sum of the given array. https://www.geeksforgeeks.org/minimum-subarray-sum-contiguous-subarray/\n    '''\n    min_so_far = sys.maxsize \n    min_ending_here = 0\n    s = 0\n    for "
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if not arr:\n        return 0\n    min_diff = 10**7\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n    return min_diff\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] < min_diff:\n            min_diff = arr[i] - arr[i - 1]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return min(arr)-max(arr) \n    \ndef find_minimum(arr, n): \n    '''\n    Write a python function to find the minimum element in the given array. https://www.geeksforgeeks.org/find-minimum-element-in-an-array/\n    '''\n    min = arr[0] \n    for i in range(1,n): \n        if arr[i] < min: \n            min = arr[i] \n    return min\n    \ndef find_maximum(arr, n): \n    '''\n    Write a python function to find the maximum element in the given array. https://www.geeksforgeeks.org/find-maximum-element-in-an-array/\n    '''\n    max = arr[0] \n    for i in range(1,n): \n        if arr[i] > max: \n            max = arr[i] \n    return max \n    \ndef find_greater(arr, n, x): \n    '''\n    Write a python function to count the number of elements greater than x in the given array. https://www.geeksforgeeks.org/count-elements-greater-than-x-in-an-array/\n    '''\n    count = 0\n    for i in range(0,n): \n        if arr[i] > x: \n            count += 1\n    return count \n    \ndef find_diff(arr, n): \n    '''\n    Write a python function to find the difference between largest and smallest numbers in the given array. https://www.geeksforgeeks.org/find-difference-between-largest-and-smallest-number-in-an-array/\n    '''\n    min = find_minimum(arr, n) \n    max = find_maximum(arr, n) \n    return max - min \n    \ndef find_triplets(arr, n): \n    '''\n    Write a python function to find three elements from the given array which sum to a given number. https://www.geeksforgeeks.org/find-triplets-in-an-array-with-given-sum/\n    '''\n    # sort the array \n    arr.sort() \n    # initialize result as list \n    result = [] \n    \n    # traverse the array for 3rd element \n    for i in range(n - 1): \n        \n        # initialize j and k \n        # for 1st element \n        j = i + 1\n        k = n - 1\n        \n        # initialize sum and set it \n        # to sum of arr[i] and arr[j] \n        sum = arr[i] + arr[j] \n        \n        # while j is less than k and sum is \n        # found to be less than given sum \n        while j < k: \n            \n            # if sum of arr[j] and arr[k] is \n            # found to be equal to given sum, \n            # then print arr[i], arr[j] and arr[k] \n            if sum == arr[k] + arr[j]: \n                result.append([arr[i], arr[j], arr[k]]) \n                j += 1\n                k -= 1\n            \n            # else if sum of arr[j] and arr[k] is \n            # less than given sum, j is incremented \n            elif sum < arr[k] + arr[j]: \n                j += 1\n                \n            # else sum of arr[j] and arr[k] is \n            # greater than given sum, k is decremented \n            else: \n                k -= 1\n        \n    return result \n  \ndef find_triplets_with_given_sum(arr, n, x): \n    '''\n    Write a python function to find three elements from the given array which sum is equal to x. https://www.geeksforgeeks.org/find-triplets-in-an-array-with-given-sum/\n    '''\n    arr.sort() \n    i = 0\n    j = n - 1\n    k = n - 1\n    sum = 0\n    result = [] \n    \n    # sum of first 2 elements is checked \n    # with the desired sum \n    while i < j: \n        \n        # sum of arr[i] and arr[j] is \n        # greater than desired sum \n        if (arr[i] + arr[j] > x): \n            j -= 1\n        \n        # sum of arr[i] and arr[j] is \n        # less than desired sum \n        elif (arr[i] + arr[j] < x): \n            i += 1\n        \n        # sum of arr[i] and arr[j] is \n        # equal to desired sum \n        else: \n            # print the triplet \n            result.append([arr[i], arr[j], x - (arr[i] + arr[j])]) \n            i += 1\n            j -= 1\n            \n    return result \n  \ndef find_pythagorean_triplet(arr, n): \n    '''\n    Write a python function to find a pythagorean triplet in an array. https://www.geeksforgeeks.org/find-a-triplet-that-sum-to-given-value/\n    '''\n    # sort the array \n    arr.sort() \n    for i in range(n - 1): \n        \n        # initialize j and k \n        # for 1st element \n        j = i + 1\n        k = n - 1\n        \n        # initialize sum and set it \n        # to sum of arr[i] and arr[j] \n        sum = arr[i] + arr[j] \n        \n        # while j is less than k and sum is \n        # found to be less than given sum \n        while j < k: \n            \n            # if sum of arr[j] and arr[k] is \n            # equal to given sum, then print \n            # arr[j], arr[k] and sum \n            if sum == (arr[k] + arr[j]): \n                print(\"Triplet is\", arr[i], \n                       \", \", arr[j], \", \", arr[k]) \n                return\n            \n            # else if sum of arr[j] and arr[k] is \n            # less than given sum, j is incremented \n            elif sum < (arr[k] + arr[j]): \n                j += 1\n            \n            # else sum of arr[j] and arr[k] is \n            # greater than given sum, k is decremented \n            else: \n                k -= 1\n    print(\"No Triplet Found\") \n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit()==True:\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit_counter = 0\n    for char in str:\n        if char.isdigit():\n            digit_counter += 1\n    return digit_counter\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number_of_digit = 0\n    for char in str:\n        if char.isdigit():\n            number_of_digit += 1\n    return number_of_digit\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number_digits = 0\n    for i in str:\n        if i.isdigit():\n            number_digits += 1\n    print(number_digits)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    arr = [1] \n    i = 1\n    while i <= n: \n        arr.append(arr[i-1]*2)\n        i+=1\n    return arr[n] \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #first = True\n    count = 1\n    result = 0\n    while True:\n        if is_polite_helper(count,n):\n            result = count\n            break\n        else: \n            count += 1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    numbers = [1,1,2,1,3,2,2,3,1,4,2,2,3,1,4,3,1,5,2,2,3,1,4,3,2,5,1,6,2,2,3,1,4,3,2,5,1,6,2,2,3,1,4,3,2,5,1,6,2,2,3,1,4,3,2,5,1,6] \n    for i in range(len(numbers)): \n        if (numbers[i] == n): \n            count = count + 1\n    if(count>0):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    m = 1\n    while count <= n: \n        m += 2\n        if is_polite_helper(m): \n            count += 1\n    return m\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # code here \n    f=0\n    for i in range(n):\n        f+=i\n    return f\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # n = 5\n    # count = 1\n    # while (n!= 1):\n    #     if(count%2!=0): \n    #         n -= 1\n    #     else: \n    #         n = n / 2\n    #     count += 1\n    # return count\n    # return (int(math.log(n, 2)))+1\n    return (int(n * (3*n - 1)/2) + 1)\n    \ndef count_number_of_ways_to_climb_stairs(n): \n    '''\n    Write a program to count no. of ways to climb n stairs using step size 1 or 2. geeksforgeeks.org/number-ways-climb-n-stairs/\n    '''\n    # n = 3\n    # x = [1, 1, 2]\n    # for i in range(3, n+1):\n    #     x.append(x[i-1]+x[i-2])\n    # print(x[n])\n    # return (x[n])\n    return (int(math.factorial(n) / math.pow(2, n)))\n    \ndef count_number_of_ways_to_climb_stairs_dp(n): \n    '''\n    Write a program to count no. of ways to climb n stairs using step size 1 or 2. geeksforgeeks.org/number-ways-climb-n-stairs/\n    '''\n    x = [1, 1, 2]\n    for i in range(3, n+1):\n        x.append(x[i-1] + x[i-2])\n    return (x[n])\n    \ndef print_in_zigzag_order(A):\n    '''\n    Write a program to print array in zig-zag pattern. geeksforgeeks.org/zigzag-traversal-of-array/\n    '''\n    # A = [1, 2, 3, 4, 5]\n    # n = len(A)\n    # x = 0\n    # y = 0\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x + 1\n    #         elif(x < y):\n    #             y = y - 1\n    #     x = x + 1\n    #     y = y + 1\n    # print()\n    # for i in range(n-1, -1, -1):\n    #     for j in range(n-1, -1, -1):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x - 1\n    #         elif(x < y):\n    #             y = y + 1\n    #     x = x - 1\n    #     y = y - 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x + 1\n    #         elif(x < y):\n    #             y = y - 1\n    #     x = x + 1\n    #     y = y + 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x - 1\n    #         elif(x < y):\n    #             y = y + 1\n    #     x = x - 1\n    #     y = y - 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x + 1\n    #         elif(x < y):\n    #             y = y - 1\n    #     x = x + 1\n    #     y = y + 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x - 1\n    #         elif(x < y):\n    #             y = y + 1\n    #     x = x - 1\n    #     y = y - 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x + 1\n    #         elif(x < y):\n    #             y = y - 1\n    #     x = x + 1\n    #     y = y + 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x - 1\n    #         elif(x < y):\n    #             y = y + 1\n    #     x = x - 1\n    #     y = y - 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x + 1\n    #         elif(x < y):\n    #             y = y - 1\n    #     x = x + 1\n    #     y = y + 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x - 1\n    #         elif(x < y):\n    #             y = y + 1\n    #     x = x - 1\n    #     y = y - 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x + 1\n    #         elif(x < y):\n    #             y = y - 1\n    #     x = x + 1\n    #     y = y + 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x - 1\n    #         elif(x < y):\n    #             y = y + 1\n    #     x = x - 1\n    #     y = y - 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x + 1\n    #         elif(x < y):\n    #             y = y - 1\n    #     x = x + 1\n    #     y = y + 1\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(A[x][y], end = \" \")\n    #         if(x == y):\n    #             x = x - 1\n    #         elif(x < y):\n    #             y = y + 1\n    "
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return ((2 * is_polite(n - 1)) + 1) \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return 1 if n < 2 else is_polite(n-1) + is_polite(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return int(math.pow(2, n) - (2*n + 1) * math.pow(2, n - 1))\ndef is_polite_first_try(n): \n    '''\n    Write a function to find nth polite number.\n    '''\n    return int((n * (n + 1)) / 2)\n    \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    a=1\n    b=1\n    for i in range(2,n):\n        a,b = b,a+b\n    return a==n\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # first way\n    l = []\n    for i in range(len(l1)-1):\n        l.append((l1[i],l1[i+1]))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res=[]\n    l=len(l1)\n    for i in range(0,l-1):\n        res.append([l1[i],l1[i+1]])\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    l2 = []\n    \n    for i in range(len(l1)-1):\n        l2.append(tuple(l1[i:i+2]))\n        \n    return l2\n    \n    \ndef intersect_sorted(l1, l2):\n    '''\n    Write a function to find the intersection of two sorted lists.\n    '''\n    \n    i = j = 0\n    \n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            return l1[i]\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    return None\n    \n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if not l1:\n        return []\n    else:\n        return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return None\n    return [l1[i:i+2] for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i + 1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    output_l = []\n    for i in range(len(l1)):\n        if i < len(l1) - 1:\n            output_l.append((l1[i],l1[i+1]))\n    return output_l\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    if len(l1) == 1:\n        return [[l1[0], l1[0]]]\n    else:\n        return_list = []\n        for i in range(len(l1)-1):\n            return_list.append([l1[i],l1[i+1]])\n        return_list.append([l1[-1],l1[0]])\n        return return_list\n        \n    \ndef distinct(l1):\n    '''\n    Write a function to return a list of all distinct items in a given list.\n    '''\n    if len(l1) == 1:\n        return l1\n    else:\n        return_list = []\n        for i in range(len(l1)):\n            for j in range(len(l1)):\n                if i!= j and l1[i]!= l1[j] and l1[i] not in return_list and l1[j] not in return_list:\n                    return_list.append(l1[i])\n                    return_list.append(l1[j])\n        return return_list\n    \ndef adjacent_pairs(l1):\n    '''\n    Write a function to return a list of all adjacent pairs of the same item in a given list.\n    '''\n    \n    if len(l1) == 1:\n        return [[l1[0], l1[0]]]\n    else:\n        return_list = []\n        for i in range(len(l1)):\n            for j in range(i+1,len(l1)):\n                if l1[i] == l1[j] and [l1[i],l1[j]] not in return_list:\n                    return_list.append([l1[i],l1[j]])\n        return return_list\n        \n    \ndef triplets(l1):\n    '''\n    Write a function to return a list of all triplets of consecutive items in a given list.\n    '''\n    \n    if len(l1) == 1:\n        return [[l1[0], l1[0], l1[0]]]\n    else:\n        return_list = []\n        for i in range(len(l1)-2):\n            return_list.append([l1[i],l1[i+1],l1[i+2]])\n        return_list.append([l1[-2],l1[-1],l1[0]])\n        return_list.append([l1[-1],l1[0],l1[1]])\n        return return_list\n        \ndef quadruplets(l1):\n    '''\n    Write a function to return a list of all quadruplets of consecutive items in a given list.\n    '''\n    \n    if len(l1) == 1:\n        return [[l1[0], l1[0], l1[0], l1[0]]]\n    else:\n        return_list = []\n        for i in range(len(l1)-3):\n            return_list.append([l1[i],l1[i+1],l1[i+2],l1[i+3]])\n        return_list.append([l1[-3],l1[-2],l1[-1],l1[0]])\n        return_list.append([l1[-1],l1[0],l1[1],l1[2]])\n        return return_list\n        \n        \ndef pair_sum(l1, l2):\n    '''\n    Write a function to return a list of all pairs of items in a given list whose sum equals another given item.\n    '''\n    \n    if len(l1) < 2:\n        return None\n    else:\n        return_list = []\n        for i in range(len(l1)):\n            for j in range(len(l1)):\n                if l1[i] + l1[j] == l2 and [l1[i],l1[j]] not in return_list:\n                    return_list.append([l1[i],l1[j]])\n        return return_list\n        \n        \ndef duplicate(l1):\n    '''\n    Write a function to return a list of all duplicate items in a given list.\n    '''\n    if len(l1) == 1:\n        return [l1[0]]\n    else:\n        return_list = []\n        for i in range(len(l1)):\n            for j in range(len(l1)):\n                if i!= j and l1[i] == l1[j] and l1[i] not in return_list:\n                    return_list.append(l1[i])\n        return return_list\n    \n    \ndef cyclic(l1):\n    '''\n    Write a function to return True if a given list contains a cycle, otherwise False.\n    '''\n    \n    if len(l1) == 1:\n        return False\n    else:\n        for i in range(len(l1)-1):\n            if l1[i] == l1[-1]:\n                return True\n        return False\n        \ndef all_cycles(l1):\n    '''\n    Write a function to return a list of lists of all cycles of consecutive items in a given list.\n    '''\n    \n    if len(l1) == 1:\n        return [[l1[0], l1[0]]]\n    else:\n        return_list = []\n        for i in range(len(l1)-1):\n            if l1[i] == l1[-1]:\n                return_list.append([l1[i],l1[i]])\n        return_list.append([l1[-1],l1[0]])\n        return return_list\n        \ndef is_sublist(l1,l2):\n    '''\n    Write a function to return True if l2 is a sublist of l1, otherwise False.\n    '''\n    \n    if l2 == l1:\n        return True\n    elif len(l1) == 0:\n        return False\n    else:\n        for i in range(len(l1)):\n            if l1[i:i+len(l2)] == l2:\n                return True\n        return False\n    \ndef common_member(l1,l2):\n    '''\n    Write a function to return a list of all common members of two given lists.\n    '''\n    \n    if len(l1) == 0 or len(l2) == 0:\n        return None\n    else:\n        return_list = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j] and l1[i] not in return_list:\n                    return_list.append(l1[i])\n        return return_list\n    \ndef least_common_multiple(l1):\n    '''\n    Write a function to return the least common multiple of all items in a given list.\n    '''\n    \n    if len(l1) == 1:\n        return l1[0]\n    else:\n        return l1[0] * l1[1] / gcd(l1[0],l1[1])\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    arr.sort()\n    \n    left = 0\n    right = n - 1\n    while (left < right):\n        \n        if arr[left] + arr[right] == sum:\n            return (arr[left], arr[right])\n            \n        elif arr[left] + arr[right] > sum:\n            right -= 1\n        else:\n            left += 1\n    return None\n    \nif __name__ == \"__main__\":\n    \n    arr = [1, 2, 3, 4, 5]\n    \n    assert get_pairs_count(arr, 10) == (None, None)\n    assert get_pairs_count(arr, 15) == (None, None)\n    assert get_pairs_count(arr, 5) == (2, 3"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    i = 0\n    j = len(arr) - 1\n    count = 0\n    while i < j:\n        if arr[i] + arr[j] == sum:\n            count = count + 1\n            i = i + 1\n            j = j - 1\n        elif arr[i] + arr[j] > sum:\n            j = j - 1\n        else:\n            i = i + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # get a dictionary of all the elements in the array with values as the count\n    counts = dict()\n    for n in arr:\n        if n in counts:\n            counts[n] += 1\n        else:\n            counts[n] = 1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    n = len(arr)\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) < 2:\n        return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    arr.sort()\n    l,r = 0, len(arr)-1\n    while l < r:\n        if arr[l] + arr[r] == sum:\n            pairs += 1\n            l += 1\n            r -= 1\n        elif arr[l] + arr[r] < sum:\n            l += 1\n        else:\n            r -= 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    left = 0\n    right = len(arr)-1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    count = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n    "
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        num = 1\n        total = 0\n        while (num <= n):\n            if num % 2!= 0:\n                total = total + (num ** 4)\n            num = num + 1\n        return total\n        \nprint(odd_num_sum(10))\nprint(odd_num_sum(100))\nprint(odd_num_sum(1000))\nprint(odd_num_sum(10000))\nprint(odd_num_sum(100000))\nprint(odd_num_sum(10000000))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = []\n    for num in range(1,n+1) : \n        if num % 2!= 0 : \n            odd_nums.append(num ** 4)\n    return sum(odd_nums)\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        if i % 2 == 0 :\n            sum += (i ** 4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_odd_number = 0\n    if n >= 4 :\n        for num in range(1, n + 1) :\n            if num % 2!= 0 :\n                sum_odd_number += num ** 4\n        return sum_odd_number\n    else :\n        print('Invalid Input')\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        return -1\n    else : \n        total = 0\n        for i in range(1,n+1) : \n            if i % 2!= 0 : \n                total += i**4 \n        return total\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(map(lambda x: x**4, filter(lambda x: x%2, range(1,n+1))))\n    \ndef sum_of_first_n_terms(n) :\n    '''\n    Write a python function to find the sum of first n terms of the series x^2 - y^2 + z^2 = 1.\n    '''\n    return n*(n+1)*(n+2)/6\n    \ndef series_sum(n) :\n    '''\n    Write a python function to find the sum of first n terms of the series x^3 + x^2 + x + 1.\n    '''\n    return (n**3)/3 + n**2 + n + 1\n    \ndef average_of_series(n) :\n    '''\n    Write a python function to find the average of first n terms of the series x^3 + x^2 + x + 1.\n    '''\n    return n*(n+1)/3 + 1\n    \ndef series_sum_closed(n) :\n    '''\n    Write a python function to find the sum of first n terms of the series x^3 + x^2 + x + 1.\n    '''\n    return (n*(n+1)*(2*n+1))/6\n    \ndef sum_of_factorials(n) :\n    '''\n    Write a python function to find the sum of factorials of first n natural numbers.\n    '''\n    return n*(n+1)/2*(2*n+1)\n    \ndef sum_of_squares(n) :\n    '''\n    Write a python function to find the sum of squares of first n natural numbers.\n    '''\n    return n**3/3 + n**2/2 + n/6\n    \ndef sum_of_fibonacci(n) :\n    '''\n    Write a python function to find the sum of first n terms of the fibonacci series.\n    '''\n    return (((1+5**0.5)/2)**n - ((1-5**0.5)/2)**n) / 5**0.5\n    \ndef sum_of_geometric_progression(n,r) :\n    '''\n    Write a python function to find the sum of first n terms of a geometric progression.\n    '''\n    return n*((r**(n+1)-1)/(r-1))\n    \ndef sum_of_arithmetic_progression(n,d) :\n    '''\n    Write a python function to find the sum of first n terms of an arithmetic progression.\n    '''\n    return n*(n+1)*(2*n+1)*d/24\n    \ndef sum_of_factorial_sequence(n) :\n    '''\n    Write a python function to find the sum of factorials of first n natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)\n    \ndef sum_of_pythagorean_triplets(n) :\n    '''\n    Write a python function to find the sum of Pythagorean triplets.\n    '''\n    return (3*n*(3*n-1)*(2*n-1))/2\n    \ndef sum_of_prime_numbers(n) :\n    '''\n    Write a python function to find the sum of first n prime numbers.\n    '''\n    return (2*n-1)**2/2\n    \ndef sum_of_factorial_of_prime(n) :\n    '''\n    Write a python function to find the sum of prime numbers and their factorials.\n    '''\n    return sum(prime(n))\n    \ndef sum_of_prime_factorials(n) :\n    '''\n    Write a python function to find the sum of prime numbers and their factorials.\n    '''\n    return sum(prime(n))*(2*n-1)\n    \ndef sum_of_factorial_of_factor(n) :\n    '''\n    Write a python function to find the sum of factors of a given number and their factorials.\n    '''\n    return sum([prime(n)])*(2*n-1)\n    \ndef sum_of_factorial_of_sum(n) :\n    '''\n    Write a python function to find the sum of factors of a given number and their factorials.\n    '''\n    return sum([prime(n)])*(2*n-1)\n    \ndef sum_of_prime_factorials(n) :\n    '''\n    Write a python function to find the sum of prime factors and their factorials.\n    '''\n    return sum([prime(n)])*(2*n-1)\n    \ndef sum_of_prime_power(n) :\n    '''\n    Write a python function to find the sum of prime powers.\n    '''\n    return sum(map(lambda x: x*(x+1), filter(lambda x: prime(x), range(1,n+1))))\n    \ndef sum_of_square_prime(n) :\n    '''\n    Write a python function to find the sum of square prime numbers.\n    '''\n    return sum(map(lambda x: x**2, filter(lambda x: prime(x), range(1,n+1))))\n    \ndef sum_of_prime_squares(n) :\n    '''\n    Write a python function to find the sum of prime squares.\n    '''\n    return sum(map(lambda x: x**2, filter(lambda x: prime(x), range(1,n+1))))\n    \ndef sum_of_fibonacci_and_prime(n) :\n    '''\n    Write a python function to find the sum of nth Fibonacci number and nth prime number.\n    '''\n    return sum(map(lambda x: x[0], zip(fibonacci(n), prime(n))))\n    \ndef sum_of_prime_factorial_squares(n) :\n    '''\n    Write a python function to find the sum of prime factors and their factorials and squares.\n    '''\n    return sum(map(lambda x: x[0]**2, filter(lambda x: prime(x), zip(prime(n),factorial(n)))))\n    \ndef sum_of_prime_square_factorials(n) :\n    '''\n    Write a python function to find the sum of prime factors and their factorials and squares.\n    '''\n    return sum(map(lambda x: x[0]**2, filter(lambda x: prime(x), zip(prime(n),factorial(n)))))\n    \ndef sum_of_factorial_squares_prime(n) :\n    '''\n    Write a python function to find the sum of factorials and their squares and prime numbers.\n    '''\n    return sum(map(lambda x: x[0]**2, filter(lambda x: prime(x), zip(prime(n),factorial(n)))))\n    \ndef sum_of_prime_and_square_factorials(n) :\n    '''\n    Write a python function to find the sum of prime factors and their factorials and squares.\n    '''\n    return sum(map(lambda x: x[0]**2, filter(lambda x: prime(x), zip(prime(n),factorial(n)))))\n    \ndef sum_of_prime_and_factorial_square(n) :\n    '''\n    Write a python function to find the sum of prime factors and their factorials and squares.\n    '''\n    return sum(map(lambda x: x[0]**2, filter(lambda x: prime(x), zip(prime(n),factorial(n)))))\n    \ndef sum_of_factorial_square_prime(n) :\n    '''\n    Write a python function to find the sum of factorials and their squares and prime numbers.\n    '''\n    return sum(map(lambda x: x[0]**2, filter(lambda x: prime(x), zip(prime(n),factorial(n)))))\n    \ndef sum_of_factorial_prime_squares(n) :\n    '''\n    Write a python function to find the sum of prime factors and their factorials and squares.\n    '''\n    return sum(map(lambda x: x[0]**2, filter(lambda x: prime(x), zip"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(n) : \n        if i%2 == 0 : \n            s = s+i*i*i*i\n    return s\nprint(odd_num_sum(3))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if (i%2!=0):\n            sum+=i**4\n    print(sum)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n >= 0 : \n        result = 0\n        for i in range(1, n + 1):\n            if i % 2 == 1:\n                result += (i**4)\n        return result\n    else: \n        return 'Invalid Input!'\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # create a deque to store all the opening brackets\n    stack = deque()\n    # create a dictionary to store all the opening brackets\n    openingBrackets = {'(', '[', '{'}\n    closingBrackets = {')', ']', '}'}\n    # iterate over every character in the expression\n    for bracket in exp:\n        # if character is an opening bracket\n        if bracket in openingBrackets:\n            # push it to the stack\n            stack.append(bracket)\n        elif bracket in closingBrackets:\n            # check for the last opening bracket which is the current closing bracket\n            if stack and stack[-1] == closingBrackets[bracket]:\n                # pop the last opening bracket from the stack\n                stack.pop()\n            else:\n                return False\n    # check if the stack is empty\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    paran_stack = deque()\n    stack = deque()\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            paran_stack.append(char)\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if len(paran_stack) == 0:\n                return False\n            ch = paran_stack.pop()\n            if char == \")\" and ch == \"(\":\n                continue\n            elif char == \"}\" and ch == \"{\":\n                continue\n            elif char == \"]\" and ch == \"[\":\n                continue\n            else:\n                return False\n    if len(paran_stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if current_char == '(':\n                if i!= ')':\n                    return False\n            if current_char == '{':\n                if i!= '}':\n                    return False\n            if current_char == '[':\n                if i!= ']':\n                    return False\n    if stack:\n        return False\n    return True\n    \ndef check_expression_use_deque(exp):\n    '''\n    Given an expression, check if it has balanced parenthesis or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    deq = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            deq.append(i)\n        else:\n            if not deq:\n                return False\n            current_char = deq.pop()\n            if current_char == '(':\n                if i!= ')':\n                    return False\n            if current_char == '{':\n                if i!= '}':\n                    return False\n            if current_char == '[':\n                if i!= ']':\n                    return False\n    if deq:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = []\n    for i in exp:\n        if i in '({[':\n            s.append(i)\n        elif i in ')}]':\n            if not s:\n                return False\n            x = s.pop()\n            if x == '{':\n                if i == '}':\n                    continue\n                else:\n                    return False\n            if x == '(':\n                if i == ')':\n                    continue\n                else:\n                    return False\n            if x == '[':\n                if i == ']':\n                    continue\n                else:\n                    return False\n    if s:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #queue to store opening parentheses\n    q = deque()\n    #dictionary to store the frequency of opening and closing parentheses\n    d = {'{': 0, '}': 0, '(': 0, ')': 0, '[': 0, ']': 0}\n    #iterator to loop through the expression\n    i = 0\n    #loops through the expression\n    while i < len(exp):\n        #checking if the character is opening parentheses\n        if exp[i] in d.keys():\n            q.append(exp[i])\n            d[exp[i]] += 1\n            #increments the iterator\n            i += 1\n        elif exp[i] in d.keys():\n            d[exp[i]] += 1\n            i += 1\n        else:\n            if len(q) == 0:\n                return False\n            x = q.pop()\n            d[x] -= 1\n            i += 1\n    if len(q)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    opening = set('({[')\n    closing = set(')}]')\n    \n    stack = deque()\n    for ch in exp:\n        if ch in opening:\n            stack.append(ch)\n        elif ch in closing:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '(' and ch == ')':\n                stack.pop()\n            elif stack[-1] == '{' and ch == '}':\n                stack.pop()\n            elif stack[-1] == '[' and ch == ']':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for ele in exp:\n        if ele == '(':\n            stack.append(ele)\n        elif ele == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    \n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if current_char == '(':\n                if char!= \")\":\n                    return False\n            if current_char == '{':\n                if char!= \"}\":\n                    return False\n            if current_char == '[':\n                if char!= \"]\":\n                    return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        if exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    brackets = {\n        '(':')',\n        '{':'}',\n        '[':']'\n    }\n    bracket_queue = deque()\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K == 0:\n        return ''\n    # Create a list of words\n    words = test_str.split()\n    # Create an empty list of words to return\n    return_words = []\n    # Loop through the words\n    for word in words:\n        # If the word is not of length K\n        if len(word)!= K:\n            # Add it to the list\n            return_words.append(word)\n    # Join all the words together in a string\n    return''.join(return_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = test_str\n    for word in test_str.split():\n        if len(word) == K:\n            new_str = new_str.replace(word, \"\")\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [w for w in words if len(w)!= K]\n    return''.join(words)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    out = ''\n    for i in test_str:\n        if i =='' and len(out) == K:\n            out = out.replace(' ', '')\n        elif i!='':\n            out = out + i\n    return out\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = []\n    # split the string into words and put them into a list\n    for word in test_str.split():\n        words.append(word)\n    # iterate through the words in the list and remove those that have length equal to K\n    i = 0\n    while i < len(words):\n        if len(words[i]) == K:\n            words.pop(i)\n            # don't increment i if you removed the current word\n            continue\n        i += 1\n    # join the words together into a string\n    output = \" \".join(words)\n    return output\n    \n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(' ')\n    return''.join([test_str[i] for i in range(len(test_str)) if len(test_str[i])!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Write your code here\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if(test_str == \"\"):\n        return \"\"\n    sliced = test_str.split(' ')\n    #print(sliced)\n    count = 0\n    for i in sliced:\n        if len(i) == K:\n            #print(i)\n            sliced.remove(i)\n            count += 1\n    #print(sliced)\n    return \" \".join(sliced)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    return \" \".join([word for word in words if len(word)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str =''.join(test_str.split())\n    test_str = test_str.split(' ')\n    res = []\n    for i in test_str:\n        if len(i)!= K:\n            res.append(i)\n    print(res)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #1. Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    import re\n    a = re.findall(pattern,text)\n    if len(a)>0:\n        for i in range(len(a)):\n            print (\"occurance:\",i,\",\",\"position:\",(a.index(a[i])),\",\",a[i])\n    else:\n        print(\"Not found\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        find_obj = re.finditer(pattern,text)\n        for match in find_obj:\n            match_start, match_end = match.span()\n            print(\"String:{0}   position:{1}\".format(match.group(),match_start))\n    except Exception as e:\n        print(\"Exception found: \",e)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if re.search(pattern, text) == None:\n        return None\n    else:\n        return re.search(pattern, text)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        print(match.group())\n        print('Occurance:',match.group().count(pattern),'times')\n        for m in re.finditer(pattern,text):\n            print('Position:',m.span())\n    else:\n        return None\ntext = 'Look for these occurrences in this text.\\nHere is another sentence.'\npattern ='sentence'\nprint('\\n####################################')\nprint('occurance_substring')\nprint('####################################')\noccurance_substring(text,pattern)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        occurances = re.finditer(pattern,text)\n        positions = [match.start() for match in occurances]\n        return len(positions),positions\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match is None:\n        return None\n    return (match.start(),match.end(),match.group())\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match == None:\n        return None\n    else:\n        return match.start(), match.end()\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches=re.finditer(pattern,text)\n    if matches==None:\n        return None\n    for match in matches:\n        print(match.start())\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=0\n    position=[]\n    if re.search(pattern,text):\n        result=re.search(pattern,text)\n        occurance=1\n        position=[result.start(),result.end()]\n        # print(result.group())\n        # print(result.span())\n    else:\n        pass\n    return occurance,position\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=0\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index=index+1\n            occurance_count+=1\n    return occurance_index,occurance_count\ndef occurance_substring_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[i for i in range(len(text)) if text[i:i+len(pattern)]==pattern]\n    return occurance_index\ndef occurance_substring_4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_6(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_7(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_8(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_9(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_10(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_11(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_12(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_13(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_14(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_15(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_16(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len(text)):\n        if text[index:index+len(pattern)]==pattern:\n            occurance_index.append(index+1)\n            occurance_count+=1\n    return occurance_index, occurance_count\ndef occurance_substring_17(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_index=[]\n    occurance_count=0\n    for index in range(len"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odd.append(nums[i])\n    return odd\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    new_nums = nums[::2]\n    return all(i%2==1 for i in new_nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if (i+1)%2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2==0 and nums[i]%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[n] % 2 == 1 for n in range(1, len(nums), 2))\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    return sum(1 for i in range(len(test_str)-1) if test_str[i] in vowels and test_str[i+1] in vowels)\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i, char in enumerate(test_str):\n        if i + 1 < len(test_str):\n            if char.lower() in \"aeiou\" and test_str[i+1].lower() in \"aeiou\":\n                vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    count = 0\n    vowels = 'aeiou'\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n        elif test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    test_str = test_str.lower()\n    counter = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i-1] in vowels or test_str[i+1] in vowels:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(0, len(test_str)-1):\n        if ((test_str[i] in 'aeiouAEIOU') and (test_str[i+1] in 'aeiouAEIOU')):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    test_str = test_str.lower()\n    vowel_count = 0\n    for index, char in enumerate(test_str):\n        if char in vowels:\n            if (index + 1) < len(test_str) and test_str[index + 1] in vowels:\n                vowel_count += 1\n            if (index - 1) >= 0 and test_str[index - 1] in vowels:\n                vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum([1 for c in test_str if c in ['a','e','i','o','u','A','E','I','O','U']])\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return len([i for i in test_str if i in 'aeiouAEIOU'])\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    cnt = 0\n    for i in range(0,len(test_str)):\n        if (i == 0):\n            #First vowel\n            if ((test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u') and \n            (test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u')):\n                cnt = cnt + 1\n            #Last vowel\n            elif ((test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u') and\n            (test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u')):\n                cnt = cnt + 1\n        elif (i == len(test_str) - 1):\n            #Last vowel\n            if ((test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u') and \n            (test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u')):\n                cnt = cnt + 1\n        else:\n            #Middle vowels\n            if ((test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u') and\n            (test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u') and\n            (test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u')):\n                cnt = cnt + 1\n    return cnt\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Vowel is one of the characters for English Language\n    vowel = set('aeiouAEIOU')\n    vowels = set(test_str) & vowel\n    print(f'Number of vowels in the string: {len(vowels)}')\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n    \nprint(find_sum([1,2,3,3,4,5,6,7,8]))\nprint(find_sum([1,2,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,7,8]))\nprint(find_sum([1,2,3,4,5,5,6,"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    for i in arr:\n        if arr.count(i) == 1:\n            return(i)\n        else:\n            pass\n    return('no non-repeating elements')\n        \n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    arr = [2,4,1,3,2]\n    for num in arr:\n        if arr.count(num)==1:\n            sum+=num\n        \n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return (sum(set(arr)))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    from collections import OrderedDict\n    d = OrderedDict.fromkeys(arr)\n    return sum(d.keys())\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_non_repeated_elements = 0\n    for i in range(len(arr)):\n        sum_non_repeated_elements += arr[i]\n    return sum_non_repeated_elements\n    \nif __name__ == \"__main__\":\n    arr = [1, 3, 5, 6, 7, 6, 4, 5] \n    print(find_sum(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr: \n        if arr.count(i) == 1: \n            sum = sum + i\n    print(sum) \n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty set to store the unique elements\n    unique_set = set()\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for _, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for i, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for x, y in groupby(list1):\n        print(x)\n        #print(y)\n        y = list(y)\n        print(y)\n        y = [list(g) for _, g in groupby(y)]\n        print(y)\n        for t in y:\n            print(t)\n    #end of pack_consecutive_duplicates\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for i in list1:\n        if len(list(groupby(list1, lambda x: x == i))) == 2:\n            list2.append(list(groupby(list1, lambda x: x == i)))\n    print(list2)\npack_consecutive_duplicates(['A', 'B', 'C', 'C', 'D', 'E'])\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        # print(list1[i],type(list1[i]))\n        if list1[i] not in new_list:\n            new_list.append(list1[i])\n        else:\n            new_list[-1].append(list1[i])\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    a=[]\n    for k,g in groupby(list1):\n        a.append(list(g))\n    return a\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_to_return = []\n    for key, group in groupby(list1):\n        list_to_return.append(list(group))\n    return list_to_return\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for _, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # res = []\n    # for k, g in groupby(list1):\n    #     res.append(list(g))\n    # return res\n    return [[k, len(list(g))] for k, g in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    print([[list(group)] for key,group in groupby(list1)])\n    return([[list(group)] for key,group in groupby(list1)])\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # we want to return the unique sublist\n    # 1. make it a set\n    # 2. loop the set\n    # 3. append the elements in the set\n    # 4. return the set as a list\n    set1 = set()\n    for i in list1:\n        set1.add(tuple(i))\n    return list(set1)\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for i in list1:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = list(set(list1))\n    unique_list = []\n    for i in list1:\n        unique_list.append(tuple(i))\n    unique_list = set(unique_list)\n    uniques_tuple = []\n    for i in unique_list:\n        uniques_tuple.append(tuple(i))\n    uniques_tuple = set(uniques_tuple)\n    unique_list = []\n    for i in uniques_tuple:\n        unique_list.append(list(i))\n    unique_list = list(set(unique_list))\n    dictionary = {}\n    for i in unique_list:\n        dictionary[tuple(i)] = list1.count(i)\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    for i in list1:\n        try:\n            count[tuple(i)] += 1\n        except KeyError:\n            count[tuple(i)] = 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def count_list(list1):\n        '''\n        Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n        '''\n        count_list = {}\n        for list_item in list1:\n            if list_item in count_list:\n                count_list[list_item] += 1\n            else:\n                count_list[list_item] = 1\n        return count_list\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # your code here\n    list_dict = {}\n    for i in list1:\n        if tuple(i) in list_dict:\n            list_dict[tuple(i)] += 1\n        else:\n            list_dict[tuple(i)] = 1\n    return list_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for x in list1:\n        if type(x) == list:\n            dic[tuple(x)] = dic.get(tuple(x),0) + 1\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist not in dictionary:\n            dictionary[sublist] = 1\n        else:\n            dictionary[sublist] += 1\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for x in list1:\n        if x not in list2:\n            list2.append(x)\n    #print(list2)\n    return list2\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return dict((tuple(i), list1.count(i)) for i in list1)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for length in range(len(test_list), 0, -1):\n        combinations = list(combinations(test_list, length))\n        for x in combinations:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list)\n    sums = []\n    combinations_ = []\n    for num in test_list:\n        for num1 in test_list:\n            if num+num1 not in sums:\n                sums.append(num+num1)\n    \n    for i in range(1, len(sums)):\n        combs = combinations(sums, i)\n        for comb in combs:\n            comb_ = tuple(comb)\n            combinations_.append(comb_)\n    return combinations_\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # First create a dictionary\n    # Python program to print all \n    # combinations of given length \n    import itertools\n    import collections\n    def printCombinations(arr, r): \n        data = collections.defaultdict(list)\n        for i in range(len(arr)): \n            data[arr[i][0]].append(arr[i][1])\n      \n        # list with all elements of list of list of tuple \n        l = [] \n        for i in data: \n            for j in range(1, r): \n                l.extend(list(itertools.combinations(data[i], j)))\n        return l \n      \n    arr = [(2, 5), (1, 3), (5, 7)] \n    r = 2\n    print(printCombinations(arr, r)) \n    return\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # The input list is sorted\n    # so we can quickly search for the sum \n    # in the input list\n    # also to return the answer in sorted order\n    test_list.sort()\n    \n    combo_list = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # sum of the list elements\n            sum = test_list[i] + test_list[j]\n            # find all combinations of the \n            # sums in the input list\n            for c in combinations(test_list, 2):\n                # if sum of the elements in the \n                # combination is equal to sum\n                # of elements in the input list\n                if sum == sum(c):\n                    combo_list.append(list(c))\n    return combo_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    #Initializing the list of tuples\n    combinations_list = []\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    new_list = []\n    combinations_sum_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb = list(combinations(test_list[i], 2))\n            comb.append(test_list[i] + test_list[j])\n            new_list.append(tuple(comb))\n    for i in new_list:\n        if sum(i) not in combinations_sum_list:\n            combinations_sum_list.append(sum(i))\n    return combinations_sum_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations(test_list,2)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_dict = {}\n    for i in test_list:\n        sum_dict[i[0] + i[1]] = [i]\n    combinations = list(combinations(sum_dict, 2))\n    return combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    import itertools\n    list_of_tuples = test_list\n    comb = combinations(list_of_tuples, 2)\n    combo_list = list(comb)\n    print(combo_list)\n    \n    return combo_list\n    \ndef find_combinations2(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    import itertools\n    list_of_tuples = test_list\n    comb = combinations(list_of_tuples, 2)\n    combo_list = list(comb)\n    \n    for i in range(len(combo_list)):\n        if sum(combo_list[i]) == 30:\n            print(combo_list[i])\n    return combo_list\n    \ndef check_sub_list(sub_list, list_to_compare):\n    '''\n    Write a function to check if all the elements in the sub-list are present in the list to be compared. https://www.geeksforgeeks.org/python-check-if-all-the-elements-in-the-sub-list-are-present-in-the-list-to-be-compared/\n    '''\n    sub_list = sub_list\n    list_to_compare = list_to_compare\n    for i in range(len(sub_list)):\n        if sub_list[i] not in list_to_compare:\n            return False\n    return True\n    \ndef find_combinations3(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    import itertools\n    list_of_tuples = test_list\n    comb = combinations(list_of_tuples, 2)\n    combo_list = list(comb)\n    \n    for i in range(len(combo_list)):\n        if sum(combo_list[i]) == 30:\n            sub_list = combo_list[i]\n            if check_sub_list(sub_list, test_list):\n                print(combo_list[i])\n    return combo_list\n    \ndef check_for_sublist(sub_list, list_to_compare):\n    '''\n    Write a function to check if all the elements in the sub-list are present in the list to be compared. https://www.geeksforgeeks.org/python-check-if-all-the-elements-in-the-sub-list-are-present-in-the-list-to-be-compared/\n    '''\n    sub_list = sub_list\n    list_to_compare = list_to_compare\n    for i in range(len(sub_list)):\n        if sub_list[i] not in list_to_compare:\n            return False\n    return True\n    \ndef find_sub_lists(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    import itertools\n    list_of_tuples = test_list\n    comb = combinations(list_of_tuples, 2)\n    combo_list = list(comb)\n    \n    for i in range(len(combo_list)):\n        if sum(combo_list[i]) == 30:\n            sub_list = combo_list[i]\n            if check_for_sublist(sub_list, test_list):\n                print(combo_list[i])\n    return combo_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if not test_list:\n        return None\n    result = []\n    for i in range(0, len(test_list)):\n        result.append(combinations(test_list, i + 1))\n    return result\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while i < int(math.sqrt(n)) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n        i = i + 1\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while (i < n):\n        if (n % i == 0):\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            count += 1\n    return count%2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n%2!= 0) : \n        return False\n    else : \n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count = count + 1\n        i = i + 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0 :\n            count+=1\n    return count\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 2 or n == 3 : \n        return True\n    elif n < 2 : \n        return False\n    for i in range(2,n):\n        if n % i == 0 :\n            return False\n    return True\n    \ndef is_perfect(n):\n    '''\n    Write a python function to check whether the given number is perfect. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum1 = 0\n    for i in range(1,n):\n        if n % i == 0 :\n            sum1+=i\n    if n == sum1 :\n        return True\n    return False\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check whether the given number is palindrome. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n=str(n)\n    return n==n[::-1]\n    \ndef is_pythagorean(a,b,c):\n    '''\n    Write a python function to check whether the given numbers are Pythagorean triplets. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (a*a + b*b) == c*c :\n        return True\n    else :\n        return False\n        \ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth Fibonacci number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==0 :\n        return 0\n    elif n==1 :\n        return 1\n    else :\n        return fibonacci(n-1)+fibonacci(n-2)\n        \ndef prime_factors(n):\n    '''\n    Write a python function to print the prime factors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    while n % 2 == 0:\n        print(2)\n        n = n / 2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n % i== 0:\n            print(i)\n            n = n / i\n    if n > 2:\n        print(n)\n    return\n    \ndef is_sum_of_squares(n) : \n    '''\n    Write a python function to check whether the given number is a sum of squares. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(0,n) :\n        if int(n%i)==0 :\n            count+=i\n    if count==n :\n        return True\n    return False\n    \ndef count_fib(n):\n    '''\n    Write a python function to print the nth fibonacci number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return count_fib(n-1)+count_fib(n-2)\n        \ndef is_prime_fib(n):\n    '''\n    Write a python function to check whether the given number is prime or a prime fibonacci number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if is_prime(n) :\n        return True\n    if is_sum_of_squares(n) :\n        return True\n    if is_prime_fib(n) :\n        return True\n    return False\n    \ndef is_pallindrome(n):\n    '''\n    Write a python function to check whether the given number is a pallindrome. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n=str(n)\n    return n==n[::-1]\n    \ndef is_spiral(n):\n    '''\n    Write a python function to check whether the given number is a spiral number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    row=int(math.sqrt(n))\n    count=0\n    for i in range(row,0,-1):\n        for j in range(i):\n            count+=1\n            if count==n:\n                return True\n        for k in range(row,0,-1):\n            count+=1\n            if count==n:\n                return True\n        for l in range(row):\n            count+=1\n            if count==n:\n                return True\n    return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if(n%i == 0) :\n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            if (n / i == i): \n                count = count + 1\n            else: \n                count = count + 2\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    num_divisors = 0\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            num_divisors +=1\n    if num_divisors % 2 == 0 :\n        return True\n    return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n<=0:\n        return False\n    elif n==1:\n        return False\n    else:\n        c=0\n        for i in range(1,(int(math.sqrt(n)))+1):\n            if n%i==0:\n                c+=1\n        return c%2==0\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    def get_sum(arr, n): \n        sum = 0\n        for i in range(n): \n            sum += arr[i] \n        return sum\n    n = len(arr) \n    # Pick all even length subarrays \n    # and calculate sum \n    s = get_sum(arr, n) \n    return s \n    \ndef string_to_integer(s):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    def convert_to_int(s):\n        return int(s)\n    return convert_to_int(s)\n    \ndef single_number(arr):\n    '''\n    Write a python function to find the single number in a list.\n    https://www.hackerrank.com/challenges/python-lists/problem\n    '''\n    def get_single_num(arr):\n        # 1. Create a set\n        # 2. Iterate through the array, if we have a duplicate, we can remove it\n        # 3. Check if the length is equal to 1\n        s = set()\n        for num in arr:\n            if num in s:\n                s.remove(num)\n            else:\n                s.add(num)\n        return list(s)[0]\n    return get_single_num(arr)\n    \ndef missing_number(arr):\n    '''\n    Write a python function to find the missing number from a list.\n    https://www.hackerrank.com/challenges/missing-numbers/problem\n    '''\n    def missing_num(arr):\n        n = len(arr)\n        return n*(n+1)//2 - sum(arr)\n    return missing_num(arr)\n    \ndef two_sum(arr, target):\n    '''\n    Write a python function to find the two numbers in a list that equal to a given target.\n    https://www.hackerrank.com/challenges/two-strings/problem\n    '''\n    def find_twosum(arr, target):\n        hashtable = dict()\n        for num in arr:\n            if target - num in hashtable:\n                return [num, target - num]\n            hashtable[num] = True\n    return find_twosum(arr, target)\n    \ndef two_strings(s1, s2):\n    '''\n    Write a python function to compare two strings lexicographically.\n    https://www.hackerrank.com/challenges/python-string-formatting/problem\n    '''\n    def compare_strings(s1, s2):\n        for i in range(len(s1)):\n            if s1[i] < s2[i]:\n                return s1 +'<'+ s2\n            elif s1[i] > s2[i]:\n                return s1 +'>'+ s2\n            else:\n                continue\n        return s1 +'='+ s2\n    return compare_strings(s1, s2)\n    \ndef string_alternative(s1, s2):\n    '''\n    Write a python function to concatenate two strings.\n    https://www.hackerrank.com/challenges/python-string-formatting/problem\n    '''\n    def string_alternative(s1, s2):\n        return s1 + s2\n    return string_alternative(s1, s2)\n    \ndef sum_of_two_integers(a, b):\n    '''\n    Write a python function to sum two integers without using arithmetic operators.\n    https://www.hackerrank.com/challenges/python-mod-power/problem\n    '''\n    def get_sum(a, b):\n        # Since there is no more than 32 bit integers\n        # We can represent the sum as a ^ b, where sum = (a ^ b) + (a & b)\n        # We can further reduce the complexity to O(1)\n        # a ^ b = (a | b) & ~(a & b)\n        # Since XOR is associative, we can simply perform the above operation by computing (a & b) separately\n        # And we can finally return the sum by simply returning a ^ b\n        return (a & b) << 1\n    return get_sum(a, b)\n    \ndef string_formatting(s):\n    '''\n    Write a python function to format a string using upper/lowercase characters.\n    https://www.hackerrank.com/challenges/python-string-formatting/problem\n    '''\n    def string_formatting(s):\n        return '{:0<4} {:0>4} {:0>4} {:0>4} {:0>4} {:0>4} {:0>4} {:0>4} {:0>4} {:0>4}'.format(*s)\n    return string_formatting(s)\n    \ndef multiply_strings(num1, num2):\n    '''\n    Write a python function to multiply two strings without using arithmetic operators.\n    https://www.hackerrank.com/challenges/python-string-formatting/problem\n    '''\n    def string_multiply(num1, num2):\n        def multiply_without_arithmetic_operators(num1, num2):\n            # Set the counter\n            count = [0] * 100\n            # Iterate through the string and compute the counts\n            for i in range(len(num1)):\n                count[int(num1[i])] += 1\n            # Create the output string\n            output = ''\n            # Iterate through the counts\n            for i in range(len(count)):\n                # Check if the count is non-zero\n                if count[i]!= 0:\n                    # If there is a non-zero count, then concatenate the string\n                    output += str(i) * count[i]\n            # If the output is an empty string, return '0'\n            if output == '':\n                return '0'\n            # Else return the output\n            return output\n        return multiply_without_arithmetic_operators(num1, num2)\n    return string_multiply(num1, num2)\n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a string without using inbuilt functions.\n    https://www.hackerrank.com/challenges/python-string-formatting/problem\n    '''\n    def reverse_string(s):\n        # Create a variable to store the output\n        output = ''\n        # Create a loop to iterate over the string\n        for i in range(len(s) - 1, -1, -1):\n            # Concatenate the string\n            output += s[i]\n        # Return the output\n        return output\n    return reverse_string(s)\n    \ndef string_alternative(s1, s2):\n    '''\n    Write a python function to concatenate two strings.\n    https://www.hackerrank.com/challenges/python-string-formatting/problem\n    '''\n    def string_alternative(s1, s2):\n        return ''.join([s1, s2])\n    return string_alternative(s1, s2)\n    \ndef substring_alternative(s, num):\n    '''\n    Write a python function to count the number of substrings that contain only one distinct letter.\n    https://www.hackerrank.com/challenges/python-string-formatting/problem\n    '''\n    def count_substring(s, num):\n        # Create a variable to store the output\n        count = 0\n        # Iterate over the string and check for each substrings\n        for i in range(len(s)):\n            # Check if the current substring contains only one distinct character\n            if len(set(s[i:i+num])) == num:\n                # Increment the count\n                count += 1\n        # Return the count\n        return count\n    return count_substring(s, num)\n    \ndef time_conversion(s):\n    '''\n    Write a python function to convert a time from 12 hour format to 24 hour format or vice versa.\n    https://www.hackerrank.com/challenges/python-time-conversion/problem\n    '''\n    def time_conversion(s):\n        # Initialize a list to store the hours\n        hour_list = list()\n        # Se"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if(j-i+1 % 2 == 1):\n                subarray_sum += sum(arr[i:j+1])\n    return subarray_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if len(arr[i:j+1]) % 2!= 0:\n                total += sum(arr[i:j+1])\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #base case for recursion\n    if len(arr) == 0:\n        return 0\n    #odd length subarray is when len(arr) is odd\n    if len(arr)%2 == 1:\n        return arr[0]\n    #recursion\n    return arr[0] + odd_length_sum(arr[1:])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if len(arr[i:]) % 2 == 1:\n            res += sum(arr[i:])\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if(len(arr[i:j+1])%2!= 0):\n                sum += sum(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    output = 0\n    for i in range(len(arr)):\n        temp_sum = 0\n        for j in range(i, len(arr)):\n            temp_sum += arr[j]\n            if len(arr[i:j+1]) % 2!= 0 and temp_sum % 2!= 0:\n                output += temp_sum\n    return output\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([arr[i:i+3] for i in range(0,len(arr),2)])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if(len(arr[i:j+1]) % 2!= 0):\n                s += sum(arr[i:j+1])\n    return s\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    #print(\"minc, maxc = \", minc, maxc)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        h = 0\n    elif v == r:\n        h = 60 * (g - b) / (maxc - minc)\n    elif v == g:\n        h = 120 + 60 * (b - r) / (maxc - minc)\n    else:\n        h = 240 + 60 * (r - g) / (maxc - minc)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    min = float(min(r, g, b))\n    max = float(max(r, g, b))\n    diff = max - min\n    v = max\n    if(max == 0):\n        s = 0\n    else:\n        s = diff/max\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = (60 * ((g - b) / (max_value - min_value))) % 360\n    elif max_value == g:\n        h = (60 * ((b - r) / (max_value - min_value))) + 120\n    elif max_value == b:\n        h = (60 * ((r - g) / (max_value - min_value))) + 240\n    if max_value == 0:\n        s = 0\n    else:\n        s = (max_value - min_value) / max_value\n    v = max_value\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    v = max_val\n    if max_val == min_val:\n        h = 0\n    elif max_val == r and g >= b:\n        h = 60 * ((g - b) / (max_val - min_val))\n    elif max_val == r and g < b:\n        h = 60 * ((g - b) / (max_val - min_val)) + 360\n    elif max_val == g:\n        h = 60 * ((b - r) / (max_val - min_val)) + 120\n    elif max_val == b:\n        h = 60 * ((r - g) / (max_val - min_val)) + 240\n    if max_val == 0:\n        s = 0\n    else:\n        s = (max_val - min_val) / max_val\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i%2 == 0:\n            product = product*i\n        else:\n            pass\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    p_odd = 1\n    p_even = 1\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    print(\"input List:\",list1)\n    sum = 1\n    for i in list1:\n        if i % 2 == 0:\n            sum = sum * i\n        else:\n            sum = sum * i\n    print(\"Product of even and odd is:\",sum)\nmul_even_odd([1,2,3,4,5,6])\nmul_even_odd([2,6,7,2,3,8,5,7])\nmul_even_odd([1,3,5,7,9,11,13,15,17])\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    l = list1\n    mul_odd = 1\n    mul_even = 1\n    for i in l:\n        if i % 2!= 0:\n            mul_even = mul_even*i\n        else:\n            mul_odd = mul_odd*i\n    return mul_odd, mul_even\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum = 1\n    i = 0\n    while i < len(list1):\n        if i%2 == 0:\n            sum *= list1[i]\n        else:\n            sum *= list1[i]\n        i += 1\n    return sum\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even = 0\n    product_odd = 0\n    for index in range(len(list1)):\n        if index % 2 == 0:\n            product_even = product_even * list1[index]\n        else:\n            product_odd = product_odd * list1[index]\n    print(product_even, product_odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    l1=[]\n    l2=[]\n    prod=1\n    for i in range(len(list1)):\n        if(list1[i]%2==0):\n            l1.append(list1[i])\n        else:\n            l2.append(list1[i])\n    for i in range(len(l1)):\n        prod*=l1[i]\n    for j in range(len(l2)):\n        prod*=l2[j]\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd = 0\n    even = 0\n    for x in list1:\n        if x % 2 == 0:\n            even += x\n        else:\n            odd += x\n    return(even * odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product=1\n    for num in list1:\n        if (num % 2 == 0):\n            product*=num\n        else:\n            product*=num\n    print(product)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even = 1\n    product_odd = 1\n    for i in list1:\n        if i%2==0:\n            product_even *=i\n        else:\n            product_odd *=i\n    return product_even,product_odd\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # test_str = (12.34, 56.78, 90.11)\n    test_list = test_str.split(',')\n    # test_list = ['12', '34', '56', '78', '90', '11']\n    print(test_list)\n    converted_tuple = tuple(map(int, test_list))\n    print(type(converted_tuple))\n    print(converted_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(\",\"))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for x in str_list:\n        int_list.append(int(x))\n    tuple_int = tuple(int_list)\n    return tuple_int\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    split_str = test_str.split(',')\n    return tuple(int(i) for i in split_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.strip('()').split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.strip(\"()\").split(\",\"))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tup = tuple(map(int, test_str.split(',')))\n    return tup\n    \ndef product_tuple(tup1, tup2):\n    '''\n    Write a function to multiply two tuples.\n    '''\n    tup3 = tuple(a*b for a, b in zip(tup1, tup2))\n    return tup3\n    \ndef test_tuple_str_int():\n    print(tuple_str_int('1, 2, 3, 4'))\n    \ndef test_product_tuple():\n    tup1 = (1,2,3)\n    tup2 = (4,5,6)\n    print(product_tuple(tup1, tup2))\n    \nif __name__ == \"__main__\":\n    test_tuple_str_int()\n    test_product_tuple()"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str.split(',')])\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(\",\")\n    int_list = [int(i) for i in str_list]\n    return int_list\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    return tuple(str_list)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    lo = 0\n    hi = n\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a)\n    while left < right:\n        mid = left + (right - left) // 2\n        if x < a[mid]:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    else:\n        i = bisect.bisect_left(a, x)\n        return i if i < n and a[i] == x else -1\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x in a:\n        return a.index(x)\n    else:\n        bisect.bisect(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    return idx\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x <= a[0]:\n        return 0\n    for i in range(1, len(a)):\n        if x < a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo+hi)//2\n        if a[mid] > x:\n            hi = mid\n        else:\n            lo = mid+1\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a:\n        l = 0\n        r = len(a) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if x < a[mid]:\n                r = mid - 1\n            elif x > a[mid]:\n                l = mid + 1\n            else:\n                return mid\n        return l\n    return -1\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    bRegex = re.compile(r'ab{3}')\n    mo = bRegex.search(text)\n    if mo:\n        return mo.group()\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    match = pattern.search(text)\n    return match!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.search(r\"ab{3}\",text)\n    if text:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return bool(re.search(r'ab{3}', text, flags=re.IGNORECASE))\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = 'aababc'\n    result = re.findall('ab{3}',text)\n    if len(result)>0:\n        print('Match found')\n        print(result)\n    else:\n        print('Match not found')\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('ab{3}')\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return True if text.count('a') >= 3 and text.count('b') == text.count('a') - 2 else False\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = re.compile(r'ab{3}')\n    matches = regex.findall(text)\n    print(matches)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '[ab]{3}'\n    result = re.findall(pattern, text)\n    return bool(result)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(\"ab{3}\", text):\n        print('Match!')\n    else:\n        print('No Match!')\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #Solution:\n    tup = tuple(test_str)\n    new_tup = tup + test_list\n    new_tup_2 = tuple(new_tup)\n    return new_tup_2\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str.split(\",\")), tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str.split(',')) + tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    my_tuple = (test_list, test_str)\n    return my_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list)!= len(test_str.split(' ')):\n        return None\n    new_tuple = tuple(test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = tuple(test_list)\n    test_tuple = (test_tuple, test_str)\n    print(test_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        final_tuple = tuple(test_list) + (test_str, )\n        print('New tuple:', final_tuple)\n    except:\n        print(\"An exception occurred\")\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # return ()\n    return tuple(test_list), test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str)\n    test_list.append(new_tuple)\n    return test_list\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if isinstance(nums, list) == False:\n        return False\n    else:\n        even_num_count = 0\n        for i in range(len(nums)):\n            if i%2 == 0 and isinstance(nums[i], int) == True:\n                even_num_count += 1\n        return even_num_count == len(nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n    \n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return True\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(0, len(nums), 2):\n        if nums[index] % 2 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if(nums[i] % 2!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(set(test_tup))\n    test_tup = tuple(filter(lambda x: type(x) == tuple, test_tup))\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tuples = [tuple for tuple in test_tup if type(tuple) is tuple]\n    test_tup = [tuple for tuple in test_tup if type(tuple) is not tuple]\n    for tup in nested_tuples:\n        test_tup.append(remove_nested(tup))\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError\n    new_tup = ()\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            continue\n        new_tup += test_tup[i],\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(i for i in test_tup if type(i)!= tuple)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    lst = []\n    for i in test_tup:\n        if type(i) == tuple:\n            pass\n        else:\n            lst.append(i)\n    lst = tuple(lst)\n    return lst\nprint(remove_nested([(1, 2, 3), (4, 5, 6), [1, 2, 3], (4, 5, 6)])\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # test_tup = (1, 2, (1, 2, 3, (4, 5)))\n    # test_tup = ((1, 2), (1, 2), (1, 2))\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    for tup in test_tup:\n        if type(tup) == type(()) or type(tup) == type([]):\n            test_tup.remove(tup)\n            remove_nested(test_tup)\n    return tuple(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = sorted(test_tup, key = lambda x: len(x), reverse = True)\n    for i in test_tup:\n        for j in test_tup:\n            if i in j and i is not j:\n                test_tup.remove(i)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #take out the tuple with only one element\n    test_tup = [tup for tup in test_tup if len(tup)!= 1]\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list: \n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #input_list=[1,2,[3,4],[5,[6,7]],9]\n    count=0\n    for i in input_list:\n        if isinstance(i,list):\n            count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if type(i) is list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            list_count += 1\n    return list_count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list)==list and len(input_list)>0:\n        return 1+count_list(input_list[0])\n    else:\n        return 0\n        \ndef is_sublist(input_list, sublist):\n    '''\n    Write a Python function that checks whether a list is a sublist of another list.\n    '''\n    if len(input_list)>0 and len(sublist)>0:\n        if input_list[0]==sublist[0]:\n            if len(input_list)>1:\n                return is_sublist(input_list[1:], sublist[1:])\n            else:\n                return True\n        else:\n            return is_sublist(input_list, sublist[1:])\n    else:\n        return False\n        \ndef sum_elem(input_list):\n    '''\n    Write a Python function that checks whether a list is a sublist of another list.\n    '''\n    if len(input_list)==0:\n        return 0\n    else:\n        return input_list[0]+sum_elem(input_list[1:])\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total_list = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            total_list += 1\n    return total_list\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if isinstance(i,list):\n            counter += 1\n    return counter\n    \ndef deep_list(input_list, depth = 0):\n    '''\n    Write a python function to deep list. The function should accept a list and return a list that contains only the first element of the list.\n    '''\n    return_list = []\n    if count_list(input_list) == 1:\n        return input_list[0]\n    for i in input_list:\n        if isinstance(i,list):\n            return_list.append(deep_list(i, depth+1))\n    return return_list\n        \ndef deep_list_max(input_list):\n    '''\n    Write a python function to deep list. The function should accept a list and return the maximum element in the list.\n    '''\n    return max(deep_list(input_list))\n        \ndef deep_list_min(input_list):\n    '''\n    Write a python function to deep list. The function should accept a list and return the minimum element in the list.\n    '''\n    return min(deep_list(input_list))\n    \ndef deep_list_sum(input_list):\n    '''\n    Write a python function to deep list. The function should accept a list and return the sum of the elements in the list.\n    '''\n    return sum(deep_list(input_list))\n    \ndef deep_list_reverse(input_list):\n    '''\n    Write a python function to deep list. The function should accept a list and return a list that contains the elements of the original list reversed.\n    '''\n    return_list = []\n    if count_list(input_list) == 1:\n        return_list = input_list[:]\n        return_list.reverse()\n        return return_list\n    for i in input_list:\n        if isinstance(i,list):\n            return_list.append(deep_list_reverse(i))\n    return_list.reverse()\n    return return_list\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number_of_lists = 0\n    for list_item in input_list:\n        if type(list_item) is list:\n            number_of_lists += 1\n    return number_of_lists\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr is None or len(arr) == 0:\n        return -1\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start+end)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or arr[mid+1]!= x:\n                return mid\n            start = mid+1\n        elif arr[mid] > x:\n            end = mid-1\n        else:\n            start = mid+1\n    return -1\n    \nprint(last([1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    start, end = 0,n-1\n    while start<=end:\n        mid = (start+end)//2\n        if x>arr[mid]:\n            start = mid+1\n        elif x<arr[mid]:\n            end = mid-1\n        else:\n            if mid==n-1 or x!=arr[mid+1]:\n                return mid\n            else:\n                start = mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    high = len(arr)-1\n    low = 0\n    while(low<high):\n        mid = low+(high-low)//2\n        if arr[mid] == x:\n            high = mid\n        elif arr[mid]>x:\n            high = mid-1\n        else:\n            low = mid+1\n    if arr[high] == x:\n        return high\n    else:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while(low <= high):\n        mid = (low+high)//2\n        if arr[mid] <= x:\n            low = mid+1\n        elif arr[mid] > x:\n            high = mid - 1\n    if arr[high]<x:\n        return high\n    return -1\n    \ndef closest(arr,x):\n    '''\n    Given a sorted array, the task is to find the closest value to the given number in the array.\n    Examples:\n    Input : arr[] = {1, 3, 8, 10, 15}\n             x = 11\n    Output : 10\n    Input : arr[] = {2, 4, 5, 6, 9}\n             x = 6\n    Output : 5\n    '''\n    if len(arr) == 0:\n        return -1\n    low = 0\n    high = len(arr)-1\n    while(low<=high):\n        mid = (low+high)//2\n        if arr[mid] == x:\n            return x\n        elif arr[mid] > x:\n            if mid-1 < 0:\n                return arr[mid]\n            if abs(arr[mid-1]-x) <= abs(arr[mid]-x):\n                return arr[mid-1]\n            else:\n                return arr[mid]\n        elif arr[mid] < x:\n            if mid+1 > len(arr)-1:\n                return arr[mid]\n            if abs(arr[mid+1]-x) <= abs(arr[mid]-x):\n                return arr[mid+1]\n            else:\n                return arr[mid]\n    return arr[mid]\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start, end = 0, len(arr)-1\n    while start<=end:\n        mid = (start+end)//2\n        if x<arr[mid]:\n            end = mid -1\n        elif x>arr[mid]:\n            start = mid + 1\n        else:\n            if mid == len(arr)-1 or x!= arr[mid+1]:\n                return mid\n            else:\n                start = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    try:\n        arr.sort()\n        return arr.index(x)\n    except ValueError:\n        print('The element is not in the array.')\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)\n    while(low<high):\n        mid = low + (high-low)//2\n        if(x>arr[mid]):\n            low = mid + 1\n        elif(x<arr[mid]):\n            high = mid\n        else:\n            if(mid==len(arr)-1 or x<arr[mid+1]):\n                return mid\n            else:\n                low = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if x < arr[mid]:\n            high = mid - 1\n        elif x > arr[mid]:\n            low = mid + 1\n        else:\n            if mid == len(arr)-1:\n                return mid\n            elif x == arr[mid+1]:\n                return mid+1\n            else:\n                low = mid + 2\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    i = 0\n    while i<n:\n        if arr[i]==x:\n            return i\n        else:\n            i = i+1\n    return -1\nprint(last([1,2,3,4,5,6,7],5))\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while l<=r:\n        mid=l+(r-l)//2\n        if x<=arr[mid] and x>arr[mid-1]:\n            if arr[mid]==x:\n                return mid\n            elif arr[mid]>x:\n                r=mid-1\n            else:\n                l=mid+1\n        elif x>arr[mid]:\n            l=mid+1\n        else:\n            r=mid-1\n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('a.*?b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = 'a.*b$'\n    result = re.findall(pat, text)\n    print(result)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'a.*b$').search(text)!= None\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a.*b', text)"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n        \nprint(text_starta_endb('abc'))\nprint(text_starta_endb('abcbb'))\nprint(text_starta_endb('abbc'))\nprint(text_starta_endb('a'))\nprint(text_starta_endb('aa'))\nprint(text_starta_endb('ab'))\nprint(text_starta_endb('abb'))\nprint(text_starta_endb('ab'))\nprint(text_starta_endb('bb'))\nprint(text_starta_endb('aaabbb'))\nprint(text_starta_endb('aabbc'))\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]*b')\n    if pattern.match(text):\n        return True\n    return False\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = 'a.*b$'\n    result = re.search(pat, text)\n    return result!= None\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.compile('a.b$')\n    mo = x.search(text)\n    if mo!= None:\n        print('The string contains \"a.b\": {}'.format(mo.group()))\n    else:\n        print('The string does not contain \"a.b\": {}'.format(mo.group()))\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r\"a.+b$\")\n    mo = regex.search(text)\n    print(mo)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('a.*b', text):\n        return re.search('a.*b', text)\n    else:\n        return None\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    #sum = 0\n    #for items in dict:\n    #    sum = sum + dict[items]\n    #return sum\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # set up an accumulator\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for value in dict.values():\n        sum +=value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if dict == {}:\n        return 0\n    else:\n        return sum(dict.values())\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if l==r:\n        return(0)\n    else:\n        return(l+r)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #num = list(range(l,r+1))\n    # sum = 0\n    # for i in num:\n    #     if i%2!= 0:\n    #         sum += i\n    # return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(l, r):\n        if(i%2!=0):\n            sum_odd = sum_odd + i\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd=0\n    for x in range (n+1):\n        if(x%2!=0):\n            sum_odd=sum_odd+x\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l, r+1):\n        if i%2 == 1:\n            total+=i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(n):\n        if (i%2!=0):\n            sum+=i\n    print(sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n+1):\n        if i % 2 == 1:\n            s += i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n    sum = 0\n    for i in range(l,r):\n        if i%2 == 1:\n            sum += i\n    print(\"Sum of odd natural numbers:\", sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n):\n        if (i % 2!= 0):\n            s += i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # print(arr)\n    # print(arr[0] + arr[1] + arr[2] + arr[3])\n    return(arr[0] + arr[1] + arr[2] + arr[3])\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return 0\n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum+=i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Check whether array is None or empty\n    if not arr:\n        return None\n    # Initialize the sum variable\n    _sum = 0\n    # Iterate through each element in array and sum them up\n    for i in range(len(arr)):\n        _sum += arr[i]\n    return _sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for elem in arr:\n        total += elem\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if arr == []:\n        return 0\n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1<<d)-1\n    mask_size = 32-d\n    mask_bits = 0\n    for i in range(mask_size):\n        mask_bits = mask_bits*2 + 1\n    n = (n<<d)|(n>>mask_size)\n    n &= mask\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if (n<0):\n        return ~(left_rotate(-n,d))\n    n=n<<d\n    n=n>>32-d\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff << (32 - d) | 0xffffffff >> (32 - d)\n    return ((n & mask) << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n &= 0xFFFFFFFF\n    return ((n << d)|(n >> (32-d))) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32-d))) % 2**32\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    n = n << d\n    n = n >> 32 - d\n    return n\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    n = n >> d\n    n = n << 32 - d\n    return n\n    \ndef rotate_left(n,d):\n    '''\n    Write a function that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n >> 32 - d\n    return n\n    \ndef rotate_right(n,d):\n    '''\n    Write a function that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n >> d\n    n = n << 32 - d\n    return n\n    \ndef left_shift(n,d):\n    '''\n    Write a function to that shift left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    n = n << d\n    return n\n    \ndef right_shift(n,d):\n    '''\n    Write a function to that shift right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    n = n >> d\n    return n\n    \ndef shift_left(n,d):\n    '''\n    Write a function that shift right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    return n\n    \ndef shift_right(n,d):\n    '''\n    Write a function that shift left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n >> d\n    return n\n    \ndef read_bit(n):\n    '''\n    Write a function that read the first bit from a given number.\n    '''\n    return (n & 1)\n    \ndef right_bits(n,d):\n    '''\n    Write a function that read d bits from the right side of a given number.\n    '''\n    d = d % 32\n    n = n >> d\n    return n\n    \ndef left_bits(n,d):\n    '''\n    Write a function that read d bits from the left side of a given number.\n    '''\n    d = d % 32\n    n = n << d\n    return n\n    \ndef write_bit(n):\n    '''\n    Write a function that write the first bit to a given number.\n    '''\n    return n + 1\n    \ndef clear_bit(n,d):\n    '''\n    Write a function that clear the first d bits from a given number.\n    '''\n    d = d % 32\n    n = n & ~ (1 << d)\n    return n\n    \ndef set_bit(n,d):\n    '''\n    Write a function that set the first d bits to 1 in a given number.\n    '''\n    d = d % 32\n    n = n | (1 << d)\n    return n\n    \ndef test_rotate_left():\n    assert (rotate_left(0b11111111111111111111111111111110,1) == 0b111111100111111111111111111111)\n    assert (rotate_left(0b11111111111111111111111111111110,2) == 0b1111111111111111111111111111110)\n    assert (rotate_left(0b11111111111111111111111111111110,4) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,8) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,16) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,32) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,64) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,128) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,256) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,512) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,1024) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,2048) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,4096) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,8192) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,16384) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,32768) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,65536) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,131072) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,262144) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,524288) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,1048576) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,2097152) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,4194304) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,8388608) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,16777216) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,33554432) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,67108864) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,134217728) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,268435456) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,536870912) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,1099511627776) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b11111111111111111111111111111110,2199023255552) == 0b11111111111111111111111111101110)\n    assert (rotate_left(0b1111111"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF << (32 - d) | 0xFFFFFFFF >> d\n    return (n << d)| (n >> (32 - d)) & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d)|(n>>(32-d)))&0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n_32 = '{0:032b}'.format(n) # convert the number to 32 bit binary string\n    n_32 = list(n_32) # convert to a list\n    \n    for i in range(d):\n        # rotate the list by one\n        n_32.append(n_32.pop(0))\n    \n    n_32 = ''.join(n_32)\n    return int(n_32,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    binary_number = bin(n)\n    bin_number_list = binary_number[2:]\n    length = len(bin_number_list)\n    left_list = bin_number_list[:d]\n    right_list = bin_number_list[d:length]\n    new_right_list = right_list\n    new_right_list.reverse()\n    new_binary_number = left_list + new_right_list\n    new_number = int(new_binary_number,2)\n    return new_number\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #regex pattern\n    # patt = re.compile(r'\\s+')\n    # newstr = patt.sub(\" \", text)\n    # return newstr\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = '[\\s]+'\n    return re.sub(pattern, '', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return sum([1 for a, b in zip(sorted([x,y,z]), sorted([x,y,z])) if a==b])\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    def three_equal(x,y,z):\n        equal = [x,y,z].count(x)\n        print(\"{} is repeated {} times\".format(x,equal))\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a = x\n    b = y\n    c = z\n    if(a == b):\n        count = count + 1\n    if(a == c):\n        count = count + 1\n    if(b == c):\n        count = count + 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return int(x==y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    # return True\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    cnt = 0\n    if x==y:\n        cnt+=1\n    if x==z:\n        cnt+=1\n    if y==z:\n        cnt+=1\n    return cnt\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        print(\"All integers are equal.\")\n    elif x == y or y == z or x == z:\n        print(\"2 integers are equal.\")\n    elif x!= y!= z:\n        print(\"0 integers are equal.\")\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = 0\n    if x == y and y == z:\n        result += 1\n    elif x == z and y == z:\n        result += 1\n    elif y == z and x == z:\n        result += 1\n    return result\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    pass\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr.sort()\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] == arr[0]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    print(arr)\n    start = 0\n    end = len(arr) - 1\n    while(start <= end):\n        mid = start + (end - start)//2\n        # mid = start + (end - start) / 2\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    pass\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    start = 0\n    end = n-1\n    mid = 0\n    while(start <= end):\n        mid = (start+end)//2\n        if (arr[start] <= arr[mid]) and (arr[mid] <= arr[end]):\n            start = mid+1\n        elif arr[mid] < arr[end]:\n            end = mid-1\n        elif arr[mid] > arr[end]:\n            start = mid+1\n    return end\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def count_rotations(arr):\n        '''\n        Function to count the number of rotations required to generate a sorted array.\n        It performs a linear search to find the minimum element in the array and marks the position after the last occurrence of that element as a pivot.\n        Then the array is rotated around the pivot and a linear search is performed to identify the number of rotations.\n        '''\n        def count_rotations_in_array(arr):\n            '''\n            Function to count the number of rotations required to generate a sorted array.\n            It performs a linear search to find the minimum element in the array and marks the position after the last occurrence of that element as a pivot.\n            Then the array is rotated around the pivot and a linear search is performed to identify the number of rotations.\n            '''\n            n = len(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)):\n        if (arr[i] > arr[i + 1]):\n            return i + 1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    low = low\n    print(low)\n    rotation_cnt = 0\n    for i in range(n-1):\n        if i < low:\n            if arr[i] > arr[i+1]:\n                rotation_cnt += 1\n        elif i > low:\n            if arr[i] < arr[i+1]:\n                rotation_cnt += 1\n    return rotation_cnt\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    start = 0\n    end = n-1\n    mid = 0\n    while(start <= end):\n        mid = (start + end) // 2\n        if arr[mid] < arr[mid-1]:\n            return mid\n        elif arr[mid] > arr[start]:\n            start = mid + 1\n        elif arr[mid] < arr[start]:\n            end = mid - 1\n        else:\n            return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    cnt = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr.sort()\n    l = len(arr)\n    count = 0\n    for i in range(l):\n        if arr[i]!= i+1:\n            count += 1\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5;\n    return sqrt == int(sqrt);\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n // 2\n    y = 1\n    while (y < x) :\n        if ((x * x == n) or (y * y == n)) :\n            return 1\n        y += 1\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    if n < 2:\n        return True\n    x = n // 2\n    y = 1\n    while x % 2 == 0:\n        x = x // 2\n        y = y * 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while x % i == 0:\n            x = x // i\n            y = y * i\n        if x == 1 and y == n:\n            return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 1: return True\n    \n    for i in range(1, int(n**(0.5)) + 1):\n        if n % i == 0:\n            return False\n            \n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    low = 1\n    high = n // 2\n    while (low <= high) :\n        mid = low + (high - low) // 2\n        if (mid * mid == n) :\n            return 1\n        elif (mid * mid < n) :\n            low = mid + 1\n        else :\n            high = mid - 1\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # we know that n is a perfect square if it is an integer\n    if (isinstance(n, int) or isinstance(n, long)) :\n        return n == (int)(sqrt(n))**2\n    # if n is not an integer, check if it is a floating point\n    else :\n        # set a precision (precision is the number of digits)\n        precision = 100\n        # set the square root\n        sr = sqrt(n)\n        # the square root should have 100 digits\n        sr_str = str(sr)\n        # check if the length of the string\n        if len(sr_str) > precision :\n            # return false\n            return False\n        # check if the number is less than the square root, if so return false\n        if n < sr :\n            return False\n        # set up the array (of length 100) to store the digits\n        digit_array = [0]*precision\n        # loop through the digits of the square root\n        for i in range(0, len(sr_str)) :\n            # add the digits of the number into the array\n            digit_array[i] = int(sr_str[i])\n        # check if the numbers equal the digits\n        for i in range(0, len(digit_array)) :\n            if digit_array[i]!= (n / (10.0**(i+1))) :\n                return False\n        # return true\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    for i in range(1,n+1) :\n        if (i * i == n) :\n            return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (int)(sqrt(n) + 0.5) ** 2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    s = int(math.sqrt(n))\n    return s*s == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # return an integer output of the square root of n\n    # The only issue here is that the numbers are very large so we need to\n    # use long integers\n    sq = 1\n    while (sq * sq < n):\n        sq += 1\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for number in arr:\n        product *= number\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return False if False in [x % 2 == 0 for x in arr] else True\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        if arr[0] % 2 == 0:\n            return True\n        else:\n            return False\n    if len(arr) == 2:\n        if arr[0] % 2 == 0 or arr[1] % 2 == 0:\n            return True\n        else:\n            return False\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] % 2 == 0:\n            if arr[i+1] % 2 == 0:\n                return True\n        i = i + 1\n    if arr[i] % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return arr[0] % 2 == 0\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        else:\n            if arr[i]%2 == 0 and arr[i-1]%2 == 0:\n                return True\n            elif arr[i]%2!= 0 and arr[i-1]%2!= 0:\n                return False\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for number in arr:\n        product *= number\n    if product % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    products = []\n    for num in arr:\n        products.append(num * 2)\n    return products\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Get all product of numbers in the list\n    product = 1\n    for number in arr:\n        product *= number\n    # Check if the product is even\n    if product % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce((lambda x, y: x * y), arr) % 2 == 0\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_list = i\n    return max_list\n    \n    \nprint(max_sum_list([[1, 2, 3], [10, 2, 3], [2, 3, 4]]))\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def get_sum_list(list):\n        return sum(list)\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return [x for x in lists if sum(x) == max([sum(y) for y in x])]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    #1. initialise a variable 'highest_sum' to hold the highest sum.\n    highest_sum = 0\n    \n    #2. initialise a variable 'highest_sum_list' to hold the highest sum list.\n    highest_sum_list = []\n    \n    #3. create a for loop to iterate through each list in the 'lists' list.\n    for i in range(len(lists)):\n        #3a. create a variable 'current_sum' to hold the sum of each list element.\n        current_sum = 0\n        #3b. create a for loop to iterate through each element in the list at the current list index.\n        for j in range(len(lists[i])):\n            #3c. add the list element to the current sum.\n            current_sum += lists[i][j]\n        #3d. if the current sum is higher than the highest_sum variable, update the highest_sum variable to the current_sum.\n        if current_sum > highest_sum:\n            highest_sum = current_sum\n    #4. create a for loop to iterate through each list in the 'lists' list.\n    for i in range(len(lists)):\n        #4a. create a variable 'current_sum' to hold the sum of each list element.\n        current_sum = 0\n        #4b. create a for loop to iterate through each element in the list at the current list index.\n        for j in range(len(lists[i])):\n            #4c. add the list element to the current sum.\n            current_sum += lists[i][j]\n        #4d. if the current sum is equal to the highest_sum variable, append the list at the current list index to the highest_sum_list variable.\n        if current_sum == highest_sum:\n            highest_sum_list.append(lists[i])\n            \n    #5. return the highest_sum_list variable.\n    return highest_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = lists[0]\n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n    return [list for list in lists if sum(list) == max_sum]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    current_max = 0\n    best = []\n    for lst in lists:\n        if sum(lst) > current_max:\n            current_max = sum(lst)\n            best = lst\n    return best\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for sub_list in lists:\n        current_sum = sum(sub_list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sub_list\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    current_list = []\n    current_sum = 0\n    # for i in range(len(lists)):\n    #     current_sum = 0\n    #     current_list = []\n    #     for j in range(len(lists[i])):\n    #         current_sum += lists[i][j]\n    #         current_list.append(lists[i][j])\n    #     print(\"current_sum: \", current_sum)\n    #     print(\"current_list: \", current_list)\n    #     if current_sum > max_sum:\n    #         max_list = current_list\n    #         max_sum = current_sum\n    #     elif current_sum == max_sum:\n    #         max_list.append(current_list)\n    # return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    list_with_highest_sum = []\n    highest_sum = 0\n    for list in lists:\n        sum = sum_list(list)\n        if sum > highest_sum:\n            highest_sum = sum\n            list_with_highest_sum = list\n    return list_with_highest_sum\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # print(test_str)\n    # print(len(test_str))\n    # print(test_str.isupper())\n    if len(test_str)==0:\n        return 0\n    curr_max = 1\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_max +=1\n        else:\n            curr_max = 0\n        print(curr_max,test_str[i])\n        if curr_max > max_max:\n            max_max = curr_max\n    return max_max\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    current_run = 0\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        if current_run > max_run:\n            max_run = current_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    maximum = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > maximum:\n            maximum = count\n    return maximum\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run = 0\n    if not test_str:\n        return 0\n    for char in test_str:\n        if char.isupper():\n            run+=1\n            max_run = max(max_run,run)\n        else:\n            run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run = 0\n    for c in test_str:\n        if c.isupper():\n            run += 1\n        else:\n            if run > max_run:\n                max_run = run\n            run = 0\n    if run > max_run:\n        max_run = run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = \"\".join(sorted(test_str))\n    curr = \"\"\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            curr += char\n        else:\n            if len(curr) > max_run:\n                max_run = len(curr)\n            curr = \"\"\n    if len(curr) > max_run:\n        max_run = len(curr)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    cnt = 0\n    mx_cnt = 0\n    for i in test_str:\n        if i.isupper():\n            cnt += 1\n        else:\n            cnt = 0\n        mx_cnt = max(mx_cnt, cnt)\n    return mx_cnt\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # print(\"In max_run_uppercase\",test_str)\n    max_run_uppercase = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_run_uppercase:\n            max_run_uppercase = count\n    return max_run_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    num_char = 0\n    max_char = 0\n    for char in test_str:\n        if char.isupper():\n            num_char += 1\n        else:\n            num_char = 0\n        max_char = max(num_char,max_char)\n    return max_char\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = \"This is a test string\"\n    return max(len(list(group)) for char, group in itertools.groupby(test_str) if char.isupper())\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in nums:\n        if x % 2!= 0:\n            return x\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if K == test_tup[i]:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if not test_tup:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    if test_tup in K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(K)):\n        if test_tup[i]!= K[i]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K and test_tup[1] in K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] >= K and test_tup[1] >= K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)==K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup1[0] > test_tup2[0]:\n        return False\n    else:\n        if test_tup1[1] < test_tup2[1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[i] < test_tup1[i]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    if test_tup1[0] >= test_tup2[0]:\n        result = False\n    if test_tup1[1] >= test_tup2[1]:\n        result = False\n    if test_tup1[2] >= test_tup2[2]:\n        result = False\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[0] > test_tup1[0]:\n        return False\n    elif test_tup2[0] < test_tup1[0]:\n        return True\n    elif test_tup2[1] > test_tup1[1]:\n        return False\n    elif test_tup2[1] < test_tup1[1]:\n        return True\n    elif test_tup2[2] > test_tup1[2]:\n        return False\n    elif test_tup2[2] < test_tup1[2]:\n        return True\n    elif test_tup2[3] > test_tup1[3]:\n        return False\n    elif test_tup2[3] < test_tup1[3]:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        pass\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if (test_tup2[0] < test_tup1[0]) and (test_tup2[1] < test_tup1[1]) and (test_tup2[2] < test_tup1[2]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(test_tup1[i] <= test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n    if len(test_tup1) == len(test_tup2):\n        return all(tup1 < tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n    else:\n        raise ValueError('Tuples are not the same size')\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[i] < test_tup1[i]:\n        return True\n    else:\n        return False\n    \n    \ndef count_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to count the number of elements in the second tuple that are smaller than its corresponding element in the first tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            count += 1\n    return count\n    \n    \ndef check_smaller_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than or equal to its corresponding element in the first tuple.\n    '''\n    if test_tup2[i] <= test_tup1[i]:\n        return True\n    else:\n        return False\n    \n    \ndef count_smaller_equal(test_tup1, test_tup2):\n    '''\n    Write a function to count the number of elements in the second tuple that are smaller than or equal to its corresponding element in the first tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup2[i] <= test_tup1[i]:\n            count += 1\n    return count\n    \n    \ndef check_bigger(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of the first tuple is bigger than its corresponding element in the second tuple.\n    '''\n    if test_tup1[i] > test_tup2[i]:\n        return True\n    else:\n        return False\n    \n    \ndef count_bigger(test_tup1, test_tup2):\n    '''\n    Write a function to count the number of elements in the first tuple that are bigger than its corresponding element in the second tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            count += 1\n    return count\n    \n    \ndef check_bigger_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of the first tuple is bigger than or equal to its corresponding element in the second tuple.\n    '''\n    if test_tup1[i] >= test_tup2[i]:\n        return True\n    else:\n        return False\n    \n    \ndef count_bigger_equal(test_tup1, test_tup2):\n    '''\n    Write a function to count the number of elements in the first tuple that are bigger than or equal to its corresponding element in the second tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            count += 1\n    return count\n    \n    \ndef check_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of the first tuple is equal to its corresponding element in the second tuple.\n    '''\n    if test_tup1[i] == test_tup2[i]:\n        return True\n    else:\n        return False\n    \n    \ndef count_equal(test_tup1, test_tup2):\n    '''\n    Write a function to count the number of elements in the first tuple that are equal to its corresponding element in the second tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            count += 1\n    return count\n    \n    \ndef check_equal_greater(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of the first tuple is equal to its corresponding element in the second tuple, and the element in the first tuple is bigger than its corresponding element in the second tuple.\n    '''\n    if test_tup1[i] == test_tup2[i] and test_tup1[i] > test_tup2[i]:\n        return True\n    else:\n        return False\n    \n    \ndef check_equal_greater_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of the first tuple is equal to its corresponding element in the second tuple, and the element in the first tuple is bigger than or equal to its corresponding element in the second tuple.\n    '''\n    if test_tup1[i] == test_tup2[i] and test_tup1[i] >= test_tup2[i]:\n        return True\n    else:\n        return False\n    \n    \ndef check_equal_less(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of the first tuple is equal to its corresponding element in the second tuple, and the element in the first tuple is less than its corresponding element in the second tuple.\n    '''\n    if test_tup1[i] == test_tup2[i] and test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n    \n    \ndef count_equal_greater(test_tup1, test_tup2):\n    '''\n    Write a function to count the number of elements in the first tuple that are equal to its corresponding element in the second tuple, and the element in the first tuple is bigger than its corresponding element in the second tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i] and test_tup1[i] > test_tup2[i]:\n            count += 1\n    return count\n    \n    \ndef count_equal_greater_equal(test_tup1, test_tup2):\n    '''\n    Write a function to count the number of elements in the first tuple that are equal to its corresponding element in the second tuple, and the element in the first tuple is bigger than or equal to its corresponding element in the second tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i] and test_tup1[i] >= test_tup2[i]:\n            count += 1\n    return count\n    \n    \ndef count_equal_less(test_tup1, test_tup2):\n    '''\n    Write a function to count the number of elements in the first tuple that are equal to its corresponding element in the second tuple, and the element in the first tuple is less than its corresponding element in the second tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i] and test_tup1[i] < test_tup2[i]:\n            count += 1\n    return count\n    \n    \ndef count_equal_less_equal(test_tup1, test_tup2):\n    '''\n    Write a function to count the number of elements in the first tuple that are equal to its corresponding element in the second tuple, and the element in the first tuple is less than or equal to its corresponding element in the second tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i] and test_tup1[i] <= test_tup2[i]:\n            count += 1\n    return count\n    \n    \ndef check_even(test_tup):\n    '''\n    Write a function to check if the sum of the elements in the tuple is even.\n    '''\n    if sum(test_tup) % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef check_odd(test_tu"
    }
]