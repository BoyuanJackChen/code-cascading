[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    return tuple1[:len(tuple1) - 1], tuple2[:len(tuple2) - 1]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [ele for ele in test_tup1 if ele in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return sorted(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # return [x for x in list1 if x in list2]\n    # return [i for i, j in zip(list1, list2) if i == j]\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = set()\n    for x in test_tup1:\n        if x in test_tup2:\n            shared.add(x)\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = [ele for ele in test_tup1 if ele in test_tup2]\n    return result\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return True\n    else:\n        if n == 2:\n            return False\n        else:\n            for i in range(2, int(math.sqrt(n))+1):\n                if n % i == 0:\n                    return True\n            return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    else:\n        for i in range(2,int(math.sqrt(n)+1)):\n            if n % i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #non_prime_list=[]\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if(n % i == 0):\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n < 2:\n        return True\n    for x in range(2,int(math.sqrt(n))+1):\n        if n % x == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    is_prime = True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            is_prime = False\n            break\n    return is_prime\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return False\n    elif n==3:\n        return False\n    elif n%2==0:\n        return True\n    elif n%3==0:\n        return True\n    else:\n        r=5\n        while(r*r<=n):\n            if n%r==0:\n                return True\n            r=r+1\n        return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #Create a heap with n+1 elements and fill the first n elements with the given numbers.\n    #Then extract the first element.\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    return hq.heappop(h)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = []\n    hq.heapify(largest)\n    for i in range(n):\n        hq.heappush(largest,nums[i])\n    print(largest)\n    return hq.heappop(largest)\n    \n    \ndef check_anagrams(s1,s2):\n    '''\n    Given two strings, check if they are anagrams. Return True if they are and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = sorted(s1)\n        s2 = sorted(s2)\n        return s1 == s2\n    \ndef find_anagrams(word,dictionary):\n    '''\n    Find anagrams of the input word in the given dictionary. Return a list of anagrams.\n    '''\n    output = []\n    for i in range(len(dictionary)):\n        if check_anagrams(word,dictionary[i]):\n            output.append(dictionary[i])\n    return output\n    \ndef min_refills(n,stops):\n    '''\n    Given a car that can stop at some number of gas stations, calculate the minimum number of refills needed.\n    '''\n    stops.append(n)\n    stops.insert(0,0)\n    prev = 0\n    count = 0\n    for i in range(len(stops)):\n        if stops[i] - prev > 0:\n            count += 1\n            prev = stops[i]\n    return count - 1\n    \ndef group_anagrams(str_list):\n    '''\n    Given an array of strings, group all the strings that are anagrams to each other.\n    '''\n    anagrams = []\n    for i in range(len(str_list)):\n        for j in range(i + 1, len(str_list)):\n            if check_anagrams(str_list[i],str_list[j]):\n                if str_list[i] not in anagrams:\n                    anagrams.append(str_list[i])\n                if str_list[j] not in anagrams:\n                    anagrams.append(str_list[j])\n    return anagrams\n    \ndef generate_abbreviation(s):\n    '''\n    Write a function to generate the abbreviations of a given string.\n    '''\n    output = []\n    i = 0\n    for j in range(len(s)):\n        output.append(s[:j+1])\n        for k in range(j+1,len(s)):\n            output.append(s[:j+1] + \".\" + s[j+1:k+1])\n    return output\n    \ndef reverse_linked_list(head):\n    '''\n    Given a singly linked list, reverse it. Return the new head.\n    '''\n    prev = None\n    current = head\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    return prev\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return -1\n    else:\n        return hq.nlargest(n,nums)\n    \nif __name__ == \"__main__\":\n    print(heap_queue_largest([7,6,5,4,3,2,1],3))\n    # [7,6,5]"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def heap_queue(nums,n):\n        if(n==1):\n            return nums\n        res = []\n        for i in range(0,len(nums)-1):\n            for j in range(i+1,len(nums)):\n                hq.heappush(res,nums[j]*nums[i])\n        for i in range(0,n-1):\n            hq.heappop(res)\n        return hq.nlargest(n,res)\n    return heap_queue(nums,n)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    if len(nums)<n:\n        return\n    \n    hq.heapify(nums)\n    \n    while n>0:\n        print(hq.heappop(nums))\n        n-=1\n    \n    print(nums)\n    \ndef heap_queue_median(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    if len(nums)<n:\n        return\n    \n    hq.heapify(nums)\n    \n    while n>0:\n        print(hq.heappop(nums))\n        n-=1\n    \n    print(nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #hq.heapify(nums)\n    #return hq.nlargest(n,nums)\n    nums = list(nums)\n    nums.sort(reverse=True)\n    return nums[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<n:\n        return print(\"There are not sufficient number of elements in the list\")\n    else:\n        hq.heapify(nums)\n        res = []\n        for i in range(n):\n            res.append(hq.heappop(nums))\n        return res\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,(-1)*i)\n    return [(-1)*i for i in range(n)][::-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = x\n    while (n): \n        if (n & 1): \n            return False\n        n = n // 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x &(x-1) ==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x%2!= 0:\n            return False\n        x = int(x/2)\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1)==0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    x = x&(x-1)\n    return x == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x & (x-1) == 0): \n        return True\n    return False\ndef is_Power_Of_Two_Recursion(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x == 0): \n        return True\n    return (is_Power_Of_Two(x) and is_Power_Of_Two_Recursion(x//2))\ndef is_Power_Of_Two_Without_Recursion(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x == 0): \n        return True\n    if(x&1==0): \n        return False\n    x >>=1\n    return (x&1==0)\ndef is_Power_Of_Two_Without_Recursion_With_Logic(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x==0): \n        return True\n    elif((x&1==0) and is_Power_Of_Two_Without_Recursion_With_Logic(x>>1)): \n        return True\n    else: \n        return False\nx = 2\nprint(is_Power_Of_Two_Without_Recursion_With_Logic(x))"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x>0:\n        if (x&1)!= 0:\n            break\n        x=x>>1\n    if x==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    while (x): \n        print (x % 2)\n        if x % 2!= 0: \n            return False\n        x = x // 2\n    return True\nprint(is_Power_Of_Two(13)) \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while (x & 1) == 0:\n        x >>= 1\n    if (x & 1) == 1:\n        return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x!=0): \n        x=x>>1\n        if (x==0): \n            return True\n        elif (x!=0): \n            return False\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    text_list = text.split()\n    new_text_list = [i for i in text_list if len(i) >= 4]\n    print(' '.join(new_text_list))\n    \n    \ndef find_char_long_list(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a list.\n    '''\n    \n    new_text_list = [i for i in text if len(i) >= 4]\n    print(new_text_list)\n    \n    \ndef find_char_long_list_condition(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a list and the word begins with a capital letter.\n    '''\n    \n    new_text_list = [i for i in text if len(i) >= 4 and i[0].isupper()]\n    print(new_text_list)\n    \n    \ndef replace_in_list(text_list):\n    '''\n    Write a function to replace all occurrence of a character in a list with an underscore.\n    '''\n    \n    text_list = [i.replace('o','_') for i in text_list]\n    print(text_list)\n    \n    \ndef replace_in_list_condition(text_list):\n    '''\n    Write a function to replace all occurrence of a character in a list with an underscore if the word length is at least 4 characters.\n    '''\n    \n    text_list = [i.replace('o','_') if len(i) >= 4 else i for i in text_list]\n    print(text_list)\n    \n    \ndef replace_in_list_condition_range(text_list):\n    '''\n    Write a function to replace all occurrence of a character in a list with an underscore if the word length is at least 4 characters and the word is at least 5 characters long.\n    '''\n    \n    text_list = [i.replace('o','_') if len(i) >= 5 and len(i) >= 4 else i for i in text_list]\n    print(text_list)\n    \n    \ndef is_palindrome(text):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    \n    text_list = list(text)\n    text_list.reverse()\n    reversed_text_list = ''.join(text_list)\n    if text == reversed_text_list:\n        print(''.join(text_list) +'is palindrome')\n    else:\n        print(''.join(text_list) +'is not palindrome')\n        \n        \ndef is_palindrome_condition(text):\n    '''\n    Write a function to check whether a string is a palindrome or not with no extra space.\n    '''\n    \n    text_list = list(text)\n    text_list.reverse()\n    reversed_text_list = ''.join(text_list)\n    if text == reversed_text_list:\n        print(''.join(text_list) +'is palindrome')\n    else:\n        print(''.join(text_list) +'is not palindrome')\n        \n        \ndef find_char_long_set(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    text_set = set(text.split())\n    new_text_set = set([i for i in text_set if len(i) >= 4])\n    print(' '.join(new_text_set))\n    \n    \ndef find_char_long_list_set(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a list.\n    '''\n    \n    new_text_set = set([i for i in text if len(i) >= 4])\n    print(new_text_set)\n    \n    \ndef find_char_long_list_condition_set(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a list and the word begins with a capital letter.\n    '''\n    \n    new_text_set = set([i for i in text if len(i) >= 4 and i[0].isupper()])\n    print(new_text_set)\n    \n    \ndef replace_in_list_set(text_set):\n    '''\n    Write a function to replace all occurrence of a character in a list with an underscore.\n    '''\n    \n    text_set = set([i.replace('o','_') for i in text_set])\n    print(text_set)\n    \n    \ndef replace_in_list_condition_set(text_set):\n    '''\n    Write a function to replace all occurrence of a character in a list with an underscore if the word length is at least 4 characters.\n    '''\n    \n    text_set = set([i.replace('o','_') if len(i) >= 4 else i for i in text_set])\n    print(text_set)\n    \n    \ndef replace_in_list_condition_range_set(text_set):\n    '''\n    Write a function to replace all occurrence of a character in a list with an underscore if the word length is at least 4 characters and the word is at least 5 characters long.\n    '''\n    \n    text_set = set([i.replace('o','_') if len(i) >= 5 and len(i) >= 4 else i for i in text_set])\n    print(text_set)\n    \n    \ndef is_palindrome_set(text):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    \n    text_set = set(text)\n    text_set.reverse()\n    reversed_text_set = ''.join(text_set)\n    if text == reversed_text_set:\n        print(''.join(text_set) +'is palindrome')\n    else:\n        print(''.join(text_set) +'is not palindrome')\n        \n        \ndef is_palindrome_condition_set(text):\n    '''\n    Write a function to check whether a string is a palindrome or not with no extra space.\n    '''\n    \n    text_set = set(text)\n    text_set.reverse()\n    reversed_text_set = ''.join(text_set)\n    if text == reversed_text_set:\n        print(''.join(text_set) +'is palindrome')\n    else:\n        print(''.join(text_set) +'is not palindrome')\n        \n        \ndef check_string_in_list(text, str_list):\n    '''\n    Write a function to check if a string is present in a list of strings.\n    '''\n    \n    text_list = text.split()\n    for i in text_list:\n        if i in str_list:\n            print('True')\n        else:\n            print('False')\n            \n            \ndef check_string_in_list_condition(text, str_list):\n    '''\n    Write a function to check if a string is present in a list of strings with the condition that string length should be at least 4 characters.\n    '''\n    \n    text_list = text.split()\n    for i in text_list:\n        if len(i) >= 4:\n            if i in str_list:\n                print('True')\n            else:\n                print('False')\n                \n                \ndef find_pallindrome_in_list(text):\n    '''\n    Write a function to find all palindromes in a list.\n    '''\n    \n    text_list = text.split()\n    pallindrome_list = [i for i in text_list if i == i[::-1]]\n    print(pallindrome_list)\n    \n    \ndef find_pallindrome_in_list_condition(text):\n    '''\n    Write a function to find all palindromes in a list with the condition that string length should be at least 4 characters.\n    '''\n    \n    text_list = text.split()\n    pallindrome_list = [i for i in text_list if i == i[::-1] if len"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_of_words = re.findall(r'\\w{4,}', text)\n    return list_of_words\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words_list = text.split()\n    final_list = []\n    for word in words_list:\n        if len(word) >= 4:\n            final_list.append(word)\n    return final_list\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    str = text.split()\n    res = [item for item in str if len(item)>=4]\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [w for w in text.split() if len(w) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    find = re.findall(r'\\b\\w{4,}\\b', text)\n    if find:\n        return find\n    else:\n        return 'There is no words of 4 characters long in a string.'\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regx = re.compile(r'\\w{4,}')\n    result = re.findall(regx, text)\n    print(result)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    import re\n    matches = re.findall(r'\\w{4,}', text)\n    print(matches)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.strip()\n    if len(text) < 4:\n        return \"No words of length 4 or more\"\n    return re.findall(r'\\b\\w{4,}\\b', text)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for n in nums:\n        result.append(n*n)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for x in nums:\n        yield x**2\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x*x, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i ** 2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_nums = []\n    for num in nums:\n        new_nums.append(num**2)\n    return new_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)\n        "
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # square_nums = []\n    # for i in nums:\n    #     square_nums.append(i ** 2)\n    # return square_nums\n    return [i ** 2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for n in nums:\n        result.append(n ** 2)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    temp=str\n    count=0\n    while(str!=temp):\n        count=count+1\n        temp=temp[1:]+temp[0]\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    i = 0\n    while (i < len(str)-1):\n        if str[i] == str[i+1]:\n            i+=1\n            rotations +=1\n        else:\n            break\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_length = len(str)\n    str_chars = list(str)\n    str_chars.sort()\n    start = \"\".join(str_chars)\n    for i in range(str_length):\n        if str_chars[i] == start[i]:\n            continue\n        else:\n            rot_str = str[i:] + str[:i]\n            print(f\"Rotations for '{str}' is {len(rot_str)}\")\n            return\n            \nif __name__ == \"__main__\":\n    str = input(\"Enter the String : \")\n    find_Rotations(str"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str)\n    str = \" \" + str\n    \n    count = 0\n    \n    for i in range(1, n):\n        if str[i]!= str[i + 1]:\n            count += 1\n            \n    return count\n    \nif __name__ == \"__main__\":\n    print(find_Rotations(\"abcde\"))\n    print(find_Rotations(\"bcdeab\"))\n    print(find_Rotations(\"bcde\"))\n    print(find_Rotations(\"bcdef\"))\n    print(find_Rotations(\"a\"))\n    print(find_Rotations(\"ab\"))\n    print(find_Rotations(\"abc\"))\n    print(find_Rotations(\"abcd\"))\n    print(find_Rotations(\"abcdba\"))"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    a = list(str)\n    n = len(a)\n    i = 0\n    if (a[0]!= a[n-1]):\n        while(a[0]!= a[n-1]):\n            a = a[1:] + a[:1]\n            i = i + 1\n    return i\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return -1\n    if len(str) == 1:\n        return 0\n    rotations = 0\n    previous = str[0]\n    for c in str:\n        if c == previous:\n            continue\n        rotations += 1\n        previous = c\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length=len(str)\n    # if str[0]!=str[length-1]:\n    #     return -1\n    temp=str[0]\n    count=0\n    for i in range(length):\n        if(temp!=str[i]):\n            count+=1\n            temp=str[i]\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str1 = str + str\n    print(str1)\n    if str == str1[len(str1) - len(str):]:\n        return len(str)\n    else:\n        for i in range(1, len(str)):\n            if str1[len(str1) - i:] == str:\n                return i\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Input : str = \"AACECAAAA\"\n    # Output : 4 \n    # Reason : string is \"AAACECAAAA\" after 4 rotations\n    # Step 1: Rotate str by 1 => \"AACECAAAA\"\n    # Step 2: Rotate str by 2 => \"ECAAACAAAA\"\n    # Step 3: Rotate str by 3 => \"CAACAAAAAA\"\n    # Step 4: Rotate str by 4 => \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = \"CAACAAAAAA\"\n    # Step 4: str = \"AAACECAAAA\"\n    \n    # Step 1: str = \"AACECAAAA\"\n    # Step 2: str = \"ECAAACAAAA\"\n    # Step 3: str = "
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    str = str + str \n    l = 0\n    for i in range(1, n): \n        if (str[i]!= str[i-1]): \n            l = i \n            break\n    # Now, string was either in uppercase or lowercase. We need \n    # to check whether it was in uppercase or lowercase. \n    if (str[0] < str[1]): \n        s = 1\n    else: \n        s = 0\n    for i in range(0,l): \n        if (str[i]!= str[i+s]): \n            return -1\n    \n    # Return the minimum no. of rotations. \n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")[0:-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', -1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1)\nprint(\"remove_Occ: \",remove_Occ(\"hello\", \"l\"))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'')[:-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_s = \"\"\n    for i in range(len(s)):\n        if ch!= s[i]:\n            new_s+=s[i]\n    return new_s\ndef remove_Occ_Pythonic(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string using indexing.\n    '''\n    s = s.replace(ch,\"\")\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == ch:\n            count+=1\n    if count > 2:\n        s = s[:s.find(ch)] + s[s.find(ch)+1:]\n        s = s[:s.rfind(ch)] + s[s.rfind(ch)+1:]\n        return s\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    start = s.find(ch)\n    end = s.rfind(ch)\n    return s[:start] + s[end+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    while s.count(ch) > 0: \n        s.remove(ch)\n    s = \"\".join(s)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_string = s.replace(ch, \"\")\n    print(new_string)\n    print(s.replace(ch, \"\", 1))\n    print(s.replace(ch, \"\"))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return(s.replace(ch,'',1).replace(ch, ''))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if M == []:\n        return None\n    n = len(M)\n    m = len(M[0])\n    sums = []\n    for i in range(n):\n        s = sum(M[i])\n        sums.append(s)\n    sums,M = zip(*sorted(zip(sums,M)))\n    sums = list(sums)\n    M = list(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if sums[j] > sums[j+1]:\n                sums[j],sums[j+1],M[j],M[j+1] = sums[j+1],sums[j],M[j+1],M[j]\n                M[j],M[j+1] = M[j+1],M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sort_row(M):\n        return sum(M[i])\n    M.sort(key=sort_row)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key = lambda m: sum(m))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = [list(l) for l in M]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)-1):\n        for j in range(i+1,len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if not M or not M[0]:\n        return M\n    res = []\n    for m in M:\n        res.append([sum(i) for i in zip(*m)])\n    M = res\n    res = []\n    for r in range(len(M)):\n        L = sorted(M[r], reverse=True)\n        res.append(L)\n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row = len(M)\n    col = len(M[0])\n    def key(M,i,j):\n        return sum(M[i]) + sum(M[j])\n    #M[i][j] -> matrix[i][j]\n    #M[i][j] <= M[i][k] + M[k][j] -> M[i][j] <= M[i][k] + M[k][j]\n    #sum(M[i]) + sum(M[j]) -> sum(M[i]) + sum(M[j]) -> sum(M[i]) + sum(M[j])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    length = len(M)\n    for i in range(length):\n        for j in range(length):\n            if sum(M[i]) > sum(M[j]):\n                M[j],M[i] = M[i],M[j]\n    return M\ndef max_crossing_sum(M,low,mid,high):\n    '''\n    Write a function that takes a 2D array and an index of a row and an index of a column and returns the maximum sum of the 2D array between the rows from the row with the index ROW_INDEX and the row with the index ROW_INDEX + 1 and the columns from the column with the index COLUMN_INDEX and the column with the index COLUMN_INDEX + 1.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(mid,high + 1):\n        sum1 += M[row_index][i]\n    for j in range(mid + 1,high + 1):\n        sum2 += M[row_index + 1][j]\n    return max(sum1,sum2)\ndef max_submatrix_sum(M,low,high):\n    '''\n    Write a function that takes a 2D array, a row index, and a column index.\n    Return the maximum sum of the submatrix between the row with the index ROW_INDEX and the row with the index ROW_INDEX + 1 and the column with the index COLUMN_INDEX and the column with the index COLUMN_INDEX + 1.\n    '''\n    if low == high:\n        return M[low][high]\n    else:\n        mid = (low + high) // 2\n        return max(max_submatrix_sum(M,low,mid),max_submatrix_sum(M,mid + 1,high),max_crossing_sum(M,low,mid,high))\ndef min_submatrix_sum(M,low,high):\n    '''\n    Write a function that takes a 2D array, a row index, and a column index.\n    Return the minimum sum of the submatrix between the row with the index ROW_INDEX and the row with the index ROW_INDEX + 1 and the column with the index COLUMN_INDEX and the column with the index COLUMN_INDEX + 1.\n    '''\n    if low == high:\n        return M[low][high]\n    else:\n        mid = (low + high) // 2\n        return min(min_submatrix_sum(M,low,mid),min_submatrix_sum(M,mid + 1,high),min_crossing_sum(M,low,mid,high))\ndef min_crossing_sum(M,low,mid,high):\n    sum1 = 0\n    sum2 = 0\n    for i in range(mid,high + 1):\n        sum1 += M[row_index][i]\n    for j in range(mid + 1,high + 1):\n        sum2 += M[row_index + 1][j]\n    return min(sum1,sum2)\ndef minimum_path_sum(M):\n    '''\n    Write a function that takes a 2D array and returns the minimum sum of a path through the array.\n    A path starts at any element and moves down and to the right until it hits the bottom of the array.\n    '''\n    length = len(M)\n    dp = [M[0][0]]\n    for i in range(length - 1):\n        dp.append(M[i + 1][0] + dp[i])\n        dp.append(M[0][i + 1] + dp[i])\n    dp = [0] + dp\n    for i in range(1,length):\n        for j in range(1,length):\n            dp[i][j] += min(dp[i - 1][j], dp[i][j - 1])\n    return dp[length - 1][length - 1]\ndef path_sum(M,row,col):\n    '''\n    Write a function that takes a 2D array and two integers representing a row and a column in the array.\n    Return the sum of the elements in the row with index ROW_INDEX and the column with index COLUMN_INDEX.\n    '''\n    if row == 0 and col == 0:\n        return M[row][col]\n    if row == 0:\n        return M[row][col] + path_sum(M,row,col - 1)\n    if col == 0:\n        return M[row][col] + path_sum(M,row - 1,col)\n    else:\n        return M[row][col] + min(path_sum(M,row,col - 1),path_sum(M,row - 1,col))\ndef max_sum_submatrix(M,row_index,col_index):\n    '''\n    Write a function that takes a 2D array, a row index, and a column index.\n    Return the maximum sum of the submatrix between the row with the index ROW_INDEX and the row with the index ROW_INDEX + 1 and the column with the index COLUMN_INDEX and the column with the index COLUMN_INDEX + 1.\n    '''\n    if row_index == 0 and col_index == 0:\n        return M[row_index][col_index]\n    elif row_index == 0:\n        return M[row_index][col_index] + max_sum_submatrix(M,row_index,col_index - 1)\n    elif col_index == 0:\n        return M[row_index][col_index] + max_sum_submatrix(M,row_index - 1,col_index)\n    else:\n        return M[row_index][col_index] + max(max_sum_submatrix(M,row_index,col_index - 1),max_sum_submatrix(M,row_index - 1,col_index))\ndef matrix_row_sum(M,row_index):\n    '''\n    Write a function that takes a 2D array and a row index and returns the sum of the elements of the row with the given row index.\n    '''\n    row = M[row_index]\n    return sum(row)\ndef matrix_col_sum(M,col_index):\n    '''\n    Write a function that takes a 2D array and a column index and returns the sum of the elements of the column with the given column index.\n    '''\n    length = len(M)\n    col = []\n    for i in range(length):\n        col.append(M[i][col_index])\n    return sum(col)\ndef spiral_matrix_sum(M):\n    '''\n    Write a function that takes a 2D array and returns the sum of all the elements in the array.\n    '''\n    row = len(M)\n    col = len(M[0])\n    sum = 0\n    for i in range(row):\n        sum += matrix_row_sum(M,i)\n    for i in range(col):\n        sum += matrix_col_sum(M,i)\n    return sum\ndef duplicate_zeros(M):\n    '''\n    Write a function that takes a 2D array and returns a new 2D array that has all the elements of M repeated so that it has the same number of rows as columns.\n    '''\n    length = len(M)\n    for i in range(length):\n        row = M[i]\n        for j in range(len(row)):\n            if j >= length:\n                M[i].append(row[j])\n    return M\ndef is_magic(square):\n    '''\n    Write a function that takes a 2D array and returns True if it is a magic square.\n    '''\n    length = len(square)\n    sum = 0\n    for i in range(length):\n        sum += square[i][i]\n    if sum!= 0:\n        return False\n    sum = 0\n    for i in range(length):\n        sum += square[i][length - 1 - i]\n    if sum!= 0:\n        return False\n    return True\ndef matrix_rotation(M):\n    '''\n    Write a function that takes a 2D array and returns the matrix obtained by rotating the array by 90 degrees.\n    '''\n    length = len(M)\n    new_M = []\n    for i in range(length):\n        row = []\n    "
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sum_of_row(row):\n        return sum(row)\n    \n    #Sort by sum of each row\n    M.sort(key=sum_of_row, reverse=False)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Your code here\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*h*(l*b)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if h == 0 : \n        return 0\n    if l == 0 or b == 0 : \n        return 0\n    return float(l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return round(((1/2)*(l*b*h)),3)\n    #return ((l*b*h)/2)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    print('Volume of the triangular prism is', V)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    return 2*l*b + 2*b*h + 2*l*h\n    \ndef main() :\n    #Get the length, width, and height of a triangular prism from the user.\n    l = float(input(\"Enter the length of the prism: \"))\n    b = float(input(\"Enter the width of the prism: \"))\n    h = float(input(\"Enter the height of the prism: \"))\n    \n    print(\"\\nThe volume of the prism is {:.2f} m^3.\".format(find_Volume(l,b,h)))\n    print(\"The surface area of the prism is {:.2f} m^2.\".format(find_Area(l,b,h)))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    volume = l * b * h\n    return volume\n    \ndef find_Volume(r,h) : \n    '''\n    Write a python function to find the volume of a spherical shell.\n    '''\n    volume = (4/3) * 3.14 * r * r * h\n    return volume\n    \ndef find_Volume(r,h) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    volume = (4/3) * 3.14 * r * r * r\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return not re.search(r'_[a-z]', text) is None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'_[a-z]*_',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]_[a-z]', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Your code here\n    return bool(re.search('[_]+[a-z]+', text.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'^[a-z]+_[a-z]+$')\n    return pattern.match(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'_+', text) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search(r'^[a-z][a-z]_[a-z]*$', text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.findall(r'[a-z][_][a-z]', text.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # re.findall(pattern,string) to find all the patterns that match with the given string\n    return bool(re.findall(\"[a-z]+_[a-z]\",text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.search(r'_[a-z]*_', text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    #returns the length of 4 times the side length\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\ndef isUnique(string):\n    '''\n    Write a function to check whether a string is unique or not.\n    '''\n    if len(string) > 128:\n        return False\n    string_list = str_to_list(string)\n    for i in range(NO_OF_CHARS):\n        present = False\n        for j in string_list:\n            if ord(j) == i:\n                present = True\n                break\n        if not present:\n            return False\n    return True\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result_str = ''\n    string = string.lower()\n    string_list = list(string)\n    for i in range(0, len(string_list)):\n        if string_list[i] not in string:\n            result_str = result_str + string_list[i]\n    return result_str\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = [None]*(len(string))\n    j = 0\n    for i in range(len(string)):\n        if string[i] in result:\n            continue\n        else:\n            result[j] = string[i]\n            j += 1\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(ord(i))\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    list2 = sorted(list2)\n    new_string = []\n    for i in list2:\n        new_string.append(chr(i))\n    string = \"\".join(new_string)\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = list(string)\n    #print(list1)\n    #print(list2)\n    index = 0\n    #print(\"before\", list1)\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list1.remove(i)\n    \n    return list1\n        \ndef list_to_str(list1): \n    '''\n    Write a function to concatenate the characters of the first string to the last string after removing the characters that are present in the second string.\n    '''\n    list1 = list(list1)\n    #print(list1)\n    for i in list1:\n        for j in list1:\n            if i == j:\n                list1.remove(i)\n    list1 = list1[::-1]\n    #print(list1)\n    string = \"\"\n    for i in list1:\n        string += i\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_len = len(string) \n    result = list(string[:]) \n    for character in result: \n        if character in string: \n            result.remove(character) \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    for i in string:\n        list1.append(i)\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = [] \n    for i in string: \n        if (i not in res): \n            res.append(i) \n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    final = []\n    for i in range(0, len(string)): \n        if string[i] not in final:\n            final.append(string[i])\n    return final\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # get the length of the second string\n    length = len(string)\n    # create an array to store the ascii values\n    arr = [0] * NO_OF_CHARS\n    # store the occurences of each ascii value\n    for i in string:\n        arr[ord(i)] += 1\n    # create an empty string\n    new_str = ''\n    # iterate through string and only add the ascii values which occured only once\n    for i in string:\n        if arr[ord(i)] == 1:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dictnums = {}\n    for i in arraynums:\n        if i in dictnums:\n            return True\n        else:\n            dictnums[i] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    s = set(arraynums)\n    if len(s) == len(arraynums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(f'testing {arraynums}')\n    assert contains_duplicate(arraynums) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(arraynums.count(item)>1 for item in arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return sorted(arraynums) == list(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    result = True if x%15 == 0 else False\n    print(result)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%3 == 0 or x%5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    lst = []\n    for i in range(len(x)):\n        lst.append(x[i])\n    if lst[0] == lst[1] == lst[2] == 'o' or lst[0] == lst[1] == lst[2] == 'w':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = len(str(x))\n    if n == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # your code here\n    if x%3==0 and x%5==0:\n        return 'Yes'\n    else:\n        return 'No'\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x%7==0 or x%5==0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 3 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # hint: to check if a number is greater than or equal to 100, you can\n    # use >=\n    return x >= 100\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(len(x)-1):\n        if x[i] in ('B','R','X'):\n            return True\n        elif x[i] not in ('B','R','X') and i!=0:\n            return False\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    result = num % 10\n    rem = num // 10\n    while rem!= 0:\n        result = result * 10 + rem % 10\n        rem = rem // 10\n    return result\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    reverse = num[::-1]\n    if int(reverse) == int(num) - 1:\n        return True\n    return False\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return ((num % 10) * 10) + (num // 10)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if int(str(num)[::-1]) == num - 1:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    num = num[::-1]\n    num = int(num)\n    if num < num*2:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    while num>0:\n        rem=num%10\n        num=num//10\n        rev=rev*10+rem\n    if num==rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    num = int(num[::-1])\n    if int(num) == 2*num:\n        return True\n    return False\n    \ndef gcd(a,b):\n    '''\n    Write a Python function to calculate the greatest common divisor of two positive integers.\n    '''\n    while b!= 0:\n        a, b = b, a%b\n    return a\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_rev=str(num)[::-1]\n    return num==(num_rev[:-1]+num_rev[0])\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rem = num % 10\n        rev = rev * 10 + rem\n        num = num // 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    return num == num[::-1]\n    \nprint(rev(8))"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # ans = 0\n    # for i in range(len(arr)) : \n    #     ans = max(ans, arr[i] * 10**i)\n    # return ans\n    return max(arr) * 10**len(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    res = \"\".join(arr)\n    return res\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    size = len(arr) \n    arr.sort() \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # For simplicity of the program, we have considered that the number will have only 10 digits.\n    # Below is the implementation.\n    # TC = O(N*K) where N = len(arr) and K = 10\n    # SC = O(1)\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    min_num = [0] * n\n    min_num[0] = arr[0]\n    max_num = [0] * n\n    max_num[0] = arr[0]\n    \n    for i in range(1, n):\n        min_num[i] = min(min_num[i - 1] * 10 + arr[i], arr[i])\n        max_num[i] = max(max_num[i - 1] * 10 + arr[i], arr[i])\n    \n    max_num_so_far = float(\"-inf\")\n    for i in range(n):\n        max_num_so_far = max(max_num_so_far, min_num[i])\n        \n    return max_num_so_far\n    \n    "
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Code here\n    arr = [int(x) for x in arr]\n    #print(arr)\n    arr.sort()\n    #print(arr)\n    return arr[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # for loop to iterate the list of digits\n    for i in range(len(arr)) : \n        \n        # if else condition to check whether current digit is greater than the previous digit\n        if (arr[i] > arr[i-1] and i > 0) : \n            \n            # variable to store the max num\n            max_num = arr[i]\n            \n        # if else condition to check whether current digit is less than the previous digit\n        elif (arr[i] < arr[i-1] and i > 0) : \n            \n            # variable to store the max num\n            max_num = arr[i-1]\n            \n    # return the max num\n    return max_num\n    \n    \n    "
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(0, n) : \n        for j in range(i, n) : \n            num = int(\"\".join(str(k) for k in arr[i:j+1]))\n            if num > max_num : \n                max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    result = 0\n    for num in arr :\n        if num > result :\n            result = num\n    return result\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] > num : \n            num = arr[i]\n    return num\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x < 0 and y > 0):\n        return True\n    elif(x > 0 and y < 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\n    \ndef main():\n    x,y = 3,6\n    print(f'{x} and {y} have opposite signs: {opposite_Signs(x,y)}')\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x,y = list(map(int,x.split(\",\"))),list(map(int,y.split(\",\")))\n    if x[0]==y[0] or x[1]==y[1]:\n        return False\n    return True\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True\n    if x > 0 and y > 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=abs(x)\n    y=abs(y)\n    if x*y<0:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0: \n        return True\n    elif x>0 and y<0: \n        return True\n    else: \n        return False\n    return \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return ((x > 0) and (y < 0)) or ((x < 0) and (y > 0))\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n+1)*n//2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # octagonal numbers are the sum of nth odd and nth even numbers\n    # nth odd number is n*(3n\u22121)/2\n    # nth even number is n*(3n\u22122)/2\n    \n    odd_numbers = []\n    even_numbers = []\n    \n    for i in range(1, n+1):\n        odd_numbers.append(i*((3*i)-1)/2)\n        even_numbers.append(i*((3*i)-2)/2)\n    \n    odd_numbers.sort()\n    even_numbers.sort()\n    \n    if n < len(odd_numbers):\n        return odd_numbers[n]\n    elif n < len(odd_numbers) + len(even_numbers):\n        return even_numbers[n-len(odd_numbers)]\n    else:\n        return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def num_octagonal(n):\n        return n**2 + n\n    def get_num_octagonal_r(n):\n        return num_octagonal(n) // 4\n    def get_num_octagonal_l(n):\n        return num_octagonal(n) % 4\n    if n % 2 == 0:\n        return get_num_octagonal_r(n)\n    else:\n        return get_num_octagonal_l(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    import math\n    k = (3 + math.sqrt(8*(2**3) + 32*n))/8\n    return int(k)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(3*n-1))//2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    nth_octagonal = 0\n    for i in range(n):\n        nth_octagonal += i + 1\n    return nth_octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = int(n)\n    for i in range(n):\n        octagonal = i*(3*i-1)/2\n    return octagonal\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n-1,-1,-1):\n        dp[i][i] = 1\n        for j in range(i+1,n):\n            if s[i] == s[j] and (j-i==1 or dp[i+1][j-1]):\n                dp[i][j] = 1\n    return sum([sum(row) for row in dp])\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic=defaultdict(int)\n    dic[0]=1\n    n=len(s)\n    count=0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(int(j) for j in s[i:j+1]) in dic:\n                count+=dic[sum(int(j) for j in s[i:j+1])]\n            dic[sum(int(j) for j in s[i:j+1])]+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            cur = 0\n            for k in range(i, j+1):\n                cur += int(s[k])\n            if cur == (j - i + 1):\n                res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    res = 0\n    for i in range(length):\n        for j in range(i,length):\n            substring = s[i:j+1]\n            sum_substring = sum([int(x) for x in substring])\n            if sum_substring == len(substring):\n                res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def substrings(s,n,m):\n        s1 = n\n        s2 = m\n        i = 0\n        count = 0\n        while i < len(s):\n            if s[i] == '0':\n                if i+1 < len(s) and s[i+1] == '0':\n                    count+=1\n                    i+=2\n                else:\n                    i+=1\n            else:\n                s1 = s1*10 + int(s[i])\n                if i+1 < len(s) and s[i+1] == '0':\n                    count+=s1\n                    i+=2\n                else:\n                    count+=s1\n                    i+=1\n        return count\n    return substrings(s,0,len(s))\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        ans += get_substring_count(i, s)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    len_s = len(s)\n    count = 0\n    for i in range(len_s):\n        for j in range(i, len_s):\n            temp = 0\n            for l in range(i,j+1):\n                temp += int(s[l])\n            if temp == j - i + 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            #print(s[i:j])\n            if sum(int(d) for d in s[i:j]) == len(s[i:j]):\n                #print(s[i:j])\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s_len = len(s)\n    hash_map = defaultdict(int)\n    for i in range(s_len):\n        for j in range(i+1, s_len+1):\n            sum_digits = 0\n            for digit in s[i:j]:\n                sum_digits += int(digit)\n            if sum_digits == j-i:\n                hash_map[s[i:j]] += 1\n    return hash_map\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Your code here\n    substring_count = defaultdict(int)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = 0\n    for x in xs:\n        if x < num:\n            num = x\n    return num\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n    \n    \n    \ndef generate_pascal_triangle(n):\n    '''\n    Write a python function to generate pascal triangle.\n    '''\n    l=[1]\n    a=l[:]\n    for i in range(0,n):\n        a.append(1)\n        for j in range(0,len(l)):\n            a[j+1]=l[j]+a[j]\n        l=a[:]\n    return l\n    \n    \n    \ndef generate_all_squares(n):\n    '''\n    Write a python function to generate all squares of numbers from 0 to n.\n    '''\n    return [i**2 for i in range(0,n+1)]\n    \n    \n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to sum of digits of a number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \n    \n    \ndef smallest_multiple_of_k(n, k):\n    '''\n    Write a python function to calculate the smallest multiple of k which is greater than or equal to n.\n    '''\n    if k==1:\n        return n\n    k_factors=[i for i in range(n,0,-1) if n%i==0]\n    return max([k_factors[0]*k_factors[-1] for k_factors in itertools.combinations(k_factors,2) if k_factors[0]*k_factors[-1]<=n])\n    \n    \n    \ndef find_prime_factors(n):\n    '''\n    Write a python function to find prime factors of n.\n    '''\n    return [i for i in range(1,n+1) if n%i==0 and is_prime(i)]\n    \n    \ndef is_prime(n):\n    '''\n    Write a python function to determine whether a number is prime or not.\n    '''\n    return n>1 and all(n%i for i in range(2,int(n**0.5)+1))\n    \n    \n    \ndef remove_duplicates(n):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return list(set(n))\n    \n    \ndef remove_all_occurences(n, k):\n    '''\n    Write a python function to remove all occurrences of k in the given list.\n    '''\n    return [i for i in n if i!=k]\n    \n    \ndef get_highest_n_digit_number(n):\n    '''\n    Write a python function to generate a highest n digit number.\n    '''\n    return int('9'*n)\n    \n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a python function to determine whether two strings are anagrams or not.\n    '''\n    return sorted(s1.replace(' ','').lower())==sorted(s2.replace(' ','').lower())\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s.replace(' ','').lower()[::-1]==s.replace(' ','').lower()\n    \n    \n    \ndef get_n_most_frequent_characters_from_a_string(s,n):\n    '''\n    Write a python function to get n most frequent characters from a string.\n    '''\n    return Counter(s).most_common(n)\n    \n    \n    \ndef is_anagram_of_palindrome(s):\n    '''\n    Write a python function to determine whether a string is an anagram of palindrome or not.\n    '''\n    return is_palindrome(s) and s[::-1]==s\n    \n    \n    \ndef get_longest_substring_with_only_unique_chars(s):\n    '''\n    Write a python function to get the longest substring with only unique characters.\n    '''\n    return max([s[i:j] for i in range(len(s)) for j in range(i+1,len(s)+1) if len(set(s[i:j]))==j-i], key=len)\n    \n    \n    \ndef is_unique(s):\n    '''\n    Write a python function to determine whether a string has all unique characters.\n    '''\n    return len(set(s))==len(s)\n    \n    \n    \ndef find_left_truncatable_primes(p):\n    '''\n    Write a python function to find all left truncatable primes with left most index less than p.\n    '''\n    l=[]\n    for i in range(1,p+1):\n        if is_prime(i) and is_prime(int(str(i)[1:])) and is_prime(int(str(i)+'9')):\n            l.append(i)\n    return l\n    \n    \n    \ndef sort_by_frequency(s):\n    '''\n    Write a python function to sort a string by frequency of characters.\n    '''\n    return Counter(s).most_common()\n    \n    \n    \ndef is_interleaved_string(s1, s2, s3):\n    '''\n    Write a python function to determine whether the given 3 strings are interleaved or not.\n    '''\n    if len(s1) + len(s2)!= len(s3):\n        return False\n    \n    for i in range(0, len(s1)+len(s2)-1, 2):\n        if s1[i//2:i//2+1] + s2[i%2:i%2+1]!= s3[i:i+2]:\n            return False\n    return True\n    \n    \n    \ndef get_longest_substring_of_given_type(s, t):\n    '''\n    Write a python function to get the longest substring of a given type in a given string.\n    '''\n    i, j = 0, 0\n    l = []\n    \n    while i<len(s) and j<len(s):\n        if s[j]==t:\n            l.append(s[i:j+1])\n            i+=1\n        j+=1\n    return max(l, key=len)\n    \n    \n    \ndef find_substrings(s, t):\n    '''\n    Write a python function to find all substrings of a given string s with the maximum length that contain a given type t.\n    '''\n    l=[]\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i:j+1]==t:\n                l.append(s[i:j+1])\n    return l\n    \n    \n    \ndef is_power_of_two(n):\n    '''\n    Write a python function to determine whether a number is power of two or not.\n    '''\n    return n>0 and n&(n-1)==0\n    \n    \ndef find_first_n_primes(n):\n    '''\n    Write a python function to generate n first prime numbers.\n    '''\n    return [next_prime(n) for n in range(1,n+1)]\n    \n    \ndef next_prime(n):\n    '''\n    Write a python function to generate the next prime number.\n    '''\n    while not is_prime(n):\n        n+=1\n    return n\n    \n    \ndef get_n_largest_elements_from_a_list(l,n):\n    '''\n    Write a python function to get n largest elements from a list.\n    '''\n    l=sorted(l)[::-1]\n    return l[:n]\n    \n    \ndef get_n_smallest_elements_from_a_list(l,n):\n    '''\n    Write a python function to get n smallest elements from a list.\n    '''\n    l=sorted(l)\n    return l[:n]\n    \n    \ndef get_n_largest_and_smallest_elements_from_a_list(l,n):\n    '"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    def min_(x):\n        return min(x)\n    return min_(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None:\n            smallest = x\n        else:\n            if x < smallest:\n                smallest = x\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_d = 0\n    for i in test_list:\n        for j in test_list:\n            if abs(i - j) > max_d:\n                max_d = abs(i - j)\n    return max_d\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if abs(test_list[i]-test_list[j]) > max_diff:\n                max_diff = abs(test_list[i]-test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    current_min = min(test_list)\n    current_max = max(test_list)\n    max_diff = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i]-test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    print(max_diff)\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[j] - test_list[i] > max_diff:\n                max_diff = test_list[j] - test_list[i]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            max_diff = max(max_diff,abs(test_list[i]-test_list[j]))\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    return max(test_list[i+1] - test_list[i] for i in range(len(test_list)-1))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sortedlist = []\n    for i in subjectmarks:\n        sortedlist.append(i[1])\n    return sortedlist\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks.sort(key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks, key=itemgetter(1)))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x : x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        for j in range(len(subjectmarks)):\n            if subjectmarks[j][1] > subjectmarks[i][1]:\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n    print(subjectmarks)\n    print(\"\\n\")\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks,key=lambda x:x[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_list = sorted(subjectmarks, key = lambda x : x[1])\n    print(new_list)\n    \n    \n    \ndef main():\n    '''\n    Write a main function which takes a list of tuples as an argument and calls the function sort_marks to sort the tuples\n    '''\n    tuples_list = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\n    subject_marks(tuples_list)\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key = lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sort_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sort_list\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    new_list = []\n    for i in data_list:\n        if type(i) == list:\n            new_list.extend(i)\n        else:\n            new_list.append(i)\n    return sum(new_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, int):\n        return data_list\n    elif isinstance(data_list, str):\n        return 0\n    elif not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_data = 0\n    if not data_list:\n        return sum_data\n    else:\n        if isinstance(data_list[0], list):\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if(i>0):\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len(list(filter(lambda x: x>0, list)))\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #PositiveNumbers = 0\n    #NegativeNumbers = 0\n    #for number in list:\n    #    if number > 0:\n    #        PositiveNumbers = PositiveNumbers + 1\n    #    else:\n    #        NegativeNumbers = NegativeNumbers + 1\n    #print(\"Number of positive numbers in the list: \", PositiveNumbers)\n    #print(\"Number of negative numbers in the list: \", NegativeNumbers)\n    return(len([number for number in list if number > 0]))\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    num_of_positive = 0\n    for i in range(len(list)):\n        if list[i] >= 0:\n            num_of_positive += 1\n    return num_of_positive\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = bell_sequence(n)\n    bell_number_sets = [0] * (len(bell_numbers))\n    bell_number_sets[0] = bell_numbers[0]\n    bell_number_sets[1] = bell_numbers[1]\n    bell_number_sets[2] = bell_numbers[1] + bell_numbers[2]\n    for i in range(3, n):\n        bell_number_sets[i] = bell_number_sets[i-1] + bell_numbers[i] + bell_number_sets[i-3]\n    return bell_number_sets[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_numbers.bell(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = bell_number_recursive(n, [])\n    return len(bells)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1]\n    for i in range(1,n+1):\n        bells.append(0)\n        for j in range(1,i+1):\n            bells[i] += bells[j]*bells[i-j]\n    return bells[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    return bell_number(n - 1) + bell_number(n - 2)\n    \n    \ndef partition_bell(bell_numbers):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    return bell_number(len(bell_numbers))\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_sum = bell_number_sum(n)\n    partitions = bell_sum\n    for i in range(1,n+1):\n        partitions -= bell_number(i)\n    return partitions\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1]\n    for i in range(1, n):\n        bells.append(bells[-1]*i)\n    return bell_number_rec(bells, n, 0)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [0]\n    for i in range(1, n+1):\n        bells.append(i*(i+1)//2)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]<A[i+1]:\n            return True\n        elif A[i]>A[i+1]:\n            return False\n    return True\ndef is_Monotonic1(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=2:\n        return True\n    else:\n        if A[0]<A[1]:\n            for i in range(2,len(A)):\n                if A[i]<=A[i-1]:\n                    return False\n            return True\n        else:\n            for i in range(2,len(A)):\n                if A[i]>=A[i-1]:\n                    return False\n            return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i=i+1\n    return True\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=1:\n        return True\n    if A[0]>A[1]:\n        return False\n    i=2\n    while i<n:\n        if A[i-2]==A[i-1]:\n            return False\n        if A[i-2]>A[i-1]:\n            return False\n        i="
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #checking for increasing order\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A = sorted(A)\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] < A[1]\n    else:\n        if A[0] < A[1]:\n            for i in range(1, n - 1):\n                if A[i - 1] < A[i] < A[i + 1]:\n                    pass\n                else:\n                    return False\n            return True\n        elif A[0] > A[1]:\n            for i in range(1, n - 1):\n                if A[i - 1] > A[i] > A[i + 1]:\n                    pass\n                else:\n                    return False\n            return True\n        else:\n            for i in range(1, n - 1):\n                if A[i - 1] == A[i] == A[i + 1]:\n                    pass\n                else:\n                    return False\n            return True\n    \n    \ndef CountingSort(A, n, k): \n    '''\n    Write a python function that takes an array A[] and a number k as input and \n    sorts the input array using Counting Sort.\n    '''\n    B = [0] * n \n    C = [0] * (k + 1) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A.sort()\n    if A[0] == A[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0,len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(l)\n    m = len(s)\n    if n < m:\n        return False\n    for i in range(0, n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) == 0:\n        return True\n    if len(l) < len(s):\n        return False\n    i = 0\n    for j in range(len(l)):\n        if l[j]!= s[i]:\n            return False\n        else:\n            i += 1\n            if i == len(s):\n                return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i] == s[0]:\n            if l[i:i+len(s)] == s:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # print(l, s)\n    if not s:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return is_sublist(l[len(s):], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l1=[]\n    for x in s:\n        l1.append(x)\n    return l1 in l\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i] == s:\n            return True\n        if len(l[i]) < len(s):\n            return False\n        if l[i][0:len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                \n                if n == len(s):\n                    sub_set = True\n    return sub_set\n    \n    \ndef has_duplicates(l):\n    '''\n    Write a function to check whether a list has duplicates or not.\n    '''\n    return len(l)!= len(set(l))\n    \n    \ndef get_longest_sublist(l):\n    '''\n    Write a function to return the longest sublist of the given list.\n    If two or more sublists have the same length, return the sublist whose first element is minimum.\n    '''\n    sublist = []\n    length = []\n    for i in l:\n        if is_sublist(i, sublist):\n            ind = sublist.index(i)\n            length[ind] = len(i)\n        else:\n            sublist.append(i)\n            length.append(len(i))\n    return sublist[length.index(max(length))]\n    \n    \ndef get_frequency_dict(s):\n    '''\n    Write a function to get the frequency of each letter in a string.\n    '''\n    freq = {}\n    for i in s:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \ndef get_greatest_values(d, num):\n    '''\n    Write a function to get the greatest `num` values of a dictionary.\n    The values should be returned in a list of tuple, for example:\n    [(value_1, name_for_value_1), (value_2, name_for_value_2), \u2026]\n    '''\n    items = d.items()\n    sorted_items = sorted(items, key=lambda x: x[1], reverse = True)\n    return sorted_items[:num]\n    \n    \ndef get_greatest_values_rec(d, num):\n    '''\n    Write a function to get the greatest `num` values of a dictionary recursively.\n    The values should be returned in a list of tuple, for example:\n    [(value_1, name_for_value_1), (value_2, name_for_value_2), \u2026]\n    '''\n    items = d.items()\n    greatest_values = []\n    for k, v in items:\n        if len(greatest_values) < num:\n            greatest_values.append((v, k))\n            greatest_values = sorted(greatest_values, key=lambda x: x[0], reverse = True)\n    return greatest_values\n    \n    \ndef get_greatest_values_rec_inplace(d, num):\n    '''\n    Write a function to get the greatest `num` values of a dictionary recursively (in-place).\n    The values should be returned in a list of tuple, for example:\n    [(value_1, name_for_value_1), (value_2, name_for_value_2), \u2026]\n    '''\n    greatest_values = []\n    for k, v in d.items():\n        if len(greatest_values) < num:\n            greatest_values.append((v, k))\n            greatest_values = sorted(greatest_values, key=lambda x: x[0], reverse = True)\n            d[k] = greatest_values[0][0]\n    return greatest_values\n    \n    \ndef remove_from_string(s, l):\n    '''\n    Write a function to remove all occurrence of a list of characters from a string.\n    '''\n    for i in l:\n        s = s.replace(i, '')\n    return s\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \ndef make_palindrome(s):\n    '''\n    Write a function to make a string a palindrome.\n    '''\n    return s + s[::-1]\n    \n    \ndef get_nth_node(root, n):\n    '''\n    Write a function to get the nth node from the end of a linked list.\n    '''\n    if root is None:\n        return None\n    if n == 1:\n        return root\n    \n    left_child = get_nth_node(root.left, n-1)\n    if left_child:\n        return left_child\n    else:\n        return get_nth_node(root.right, n-1)\n    \n    \ndef get_nth_node_rec(root, n):\n    '''\n    Write a function to get the nth node from the end of a linked list.\n    (recursive)\n    '''\n    if root is None:\n        return None\n    if n == 1:\n        return root\n    elif n > 1:\n        return get_nth_node_rec(root.right, n-1)\n    else:\n        return get_nth_node_rec(root.left, n+1)\n    \n    \ndef get_nth_node_iter(root, n):\n    '''\n    Write a function to get the nth node from the end of a linked list.\n    (iterative)\n    '''\n    if root is None:\n        return None\n    \n    stack = []\n    stack.append(root)\n    \n    while n > 0:\n        if len(stack) >= n:\n            n -= 1\n            stack.pop()\n        else:\n            if root.left:\n                root = root.left\n                stack.append(root)\n            elif root.right:\n                root = root.right\n                stack.append(root)\n    return stack[-1]\n    \n    \ndef get_nth_node_from_end_iter(root, n):\n    '''\n    Write a function to get the nth node from the end of a linked list.\n    (iterative)\n    '''\n    if root is None:\n        return None\n    stack = []\n    while True:\n        while root:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        n -= 1\n        if n == 0:\n            return root.val\n        root = root.right\n    return None\n    \n    \ndef get_nth_node_from_end_rec(root, n):\n    '''\n    Write a function to get the nth node from the end of a linked list.\n    (recursive)\n    '''\n    if root is None:\n        return None\n    if n == 1:\n        return root\n    \n    left_child = get_nth_node_rec(root.left, n-1)\n    if left_child:\n        return left_child\n    else:\n        return get_nth_node_rec(root.right, n-1)\n        \n        \ndef get_greatest_node_in_tree(root):\n    '''\n    Write a function to get the greatest node in a binary tree.\n    '''\n    return get_greatest_node(root)\n    \n    \ndef get_greatest_node(root):\n    '''\n    Write a function to get the greatest node in a binary tree.\n    '''\n    if root is None:\n        return None\n    if root.right:\n        return get_greatest_node(root.right)\n    else:\n        return root\n    \n    \ndef get_greatest_node_in_tree_rec(root):\n    '''\n    Write a function to get the greatest node in a binary tree.\n    (recursive)\n    '''\n    return get_greatest_node_rec(root)\n    \n    \ndef get_greatest_node_rec(root):\n    '''\n    Write a function to ge"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif s == l:\n        return True\n    elif len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if(len(Input[i])!= len(Input[j])):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    counter = 0\n    for item in Input:\n        if len(item) == len(Input[counter]):\n            counter += 1\n        else:\n            counter = -1\n            break\n    if counter == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    len_list = []\n    for tuple in Input:\n        len_list.append(len(tuple))\n    return len(set(len_list)) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_length=len(Input[0])\n    for x in Input:\n        if len(x)!=tuple_length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(i) for i in Input])) > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    return (len(tuple(set(map(tuple,Input)))) == 1)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    li = []\n    for i in Input:\n        li.append(len(i))\n    if len(set(li))==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    print('Find whether all the given tuples have equal length or not.')\n    result = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                result.append(False)\n            else:\n                result.append(True)\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    flag=0\n    for i in range(0, len(Input)):\n        for j in range(i+1, len(Input)):\n            if(len(Input[i])!= len(Input[j])):\n                flag=1\n                break\n    if(flag == 0):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Method 1\n    if all(len(i) == len(Input[0]) for i in Input):\n        return \"All tuples are of equal length\"\n    else:\n        return \"All tuples are not of equal length\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))  # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            j = i+gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    def _comb_sort(nums, begin, end):\n        if end <= begin:\n            return\n        pivot = nums[begin]\n        left = begin + 1\n        right = end\n        while True:\n            while left <= right and nums[left] <= pivot:\n                left += 1\n            while right >= left and nums[right] >= pivot:\n                right -= 1\n            if right < left:\n                break\n            swap(nums, left, right)\n        _comb_sort(nums, begin, right)\n        _comb_sort(nums, right + 1, end)\n    _comb_sort(nums, 0, len(nums) - 1)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n            \n        swapped = False\n        \n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n                \ndef cocktail_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    swapped = True\n    start = 0\n    end = len(nums) - 1\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(start, end):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n                \n        if not swapped:\n            break\n            \n        swapped = False\n        end -= 1\n        \n        for i in range(end, start, -1):\n            if nums[i] > nums[i - 1]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n                swapped = True\n                \n        start += 1\n        \ndef selection_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i, len(nums)):\n            if nums[min_index] > nums[j]:\n                min_index = j\n                \n        nums[i], nums[min_index] = nums[min_index], nums[i]\n        \ndef bubble_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    for i in range(len(nums)):\n        swapped = False\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                swapped = True\n                \n        if not swapped:\n            break\n        \ndef insertion_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    for i in range(1, len(nums)):\n        for j in range(i, 0, -1):\n            if nums[j] < nums[j - 1]:\n                nums[j], nums[j - 1] = nums[j - 1], nums[j]\n            else:\n                break\n                \ndef merge(left, right):\n    '''\n    Write a function to merge two lists.\n    '''\n    merged = []\n    \n    while len(left) > 0 and len(right) > 0:\n        if left[0] <= right[0]:\n            merged.append(left[0])\n            left = left[1:]\n        else:\n            merged.append(right[0])\n            right = right[1:]\n            \n    if len(left) == 0:\n        merged += right\n    else:\n        merged += left\n        \n    return merged\n    \ndef merge_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n        \n    middle = len(nums) // 2\n    left = nums[:middle]\n    right = nums[middle:]\n    \n    return merge(merge_sort(left), merge_sort(right))\n        \ndef partition(nums, low, high):\n    '''\n    Write a function to partition a list of elements.\n    '''\n    i = (low - 1)\n    pivot = nums[high]\n    \n    for j in range(low, high):\n        if nums[j] <= pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n            \n    nums[i + 1], nums[high] = nums[high], nums[i + 1]\n    return (i + 1)\n    \ndef quick_sort(nums, low, high):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if low < high:\n        p = partition(nums, low, high)\n        quick_sort(nums, low, p - 1)\n        quick_sort(nums, p + 1, high)\n        \ndef timsort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef counting_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef bucket_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef counting_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef bucket_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef counting_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef bucket_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef counting_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef bucket_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef counting_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef bucket_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef counting_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef bucket_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef counting_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef bucket_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef counting_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n    \ndef bucket_sort(nums):\n    ''"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap!= 1 or swapped == 1:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = 0\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped += 1\n        \n        \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))  # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # The best case scenario for this sorting algorithm is when the input is already sorted.\n    # It takes O(n) time complexity and O(1) space complexity\n    # However, the worst case is when the list is in reverse order.\n    # It takes O(n^2) time complexity and O(1) space complexity\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))  # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            j = i+gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #Time complexity O(n**2)\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25)) #minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n & 3) == 0:\n        n = (n >> 2) + 3\n    else:\n        n = ((n >> 2) + 3) << 2\n    i = 0\n    while i < n:\n        if (i*i == n) or ((i*i) + (i << 1)) == n:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    if n == 0:\n        return True\n    while n % 4 == 0:\n        n = n // 4\n    while n % 9 == 0:\n        n = n // 9\n    if n % 8 == 7:\n        return False\n    else:\n        return True\nn = int(input())\nprint(dif_Square(n))"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    ans = []\n    sqr = []\n    for i in range(1, int(n**0.5)+1):\n        sqr.append(i*i)\n    for i in range(len(sqr)):\n        if n-sqr[i] in sqr:\n            ans.append(sqr[i])\n            ans.append(n-sqr[i])\n            return ans\n    return ans\nn = int(input(\"Enter the number: \"))\nprint(dif_Square(n))\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def isSquare(n, k): \n        if n == k*k: \n            return True\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"Number cannot be negative\"\n    l = []\n    for i in range(1,n):\n        if i*i < n:\n            l.append(i*i)\n        else:\n            break\n    l.append(n)\n    l.sort()\n    print(l)\n    for i in range(0,len(l)-1):\n        if (l[i] + l[i+1]) == n:\n            print(\"The difference between the square of {} and the square of {} is {}\".format(l[i],l[i+1],l[i]))\n            return \n    print(\"The number cannot be represented as the difference of two squares\")\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n ** 0.5) % 1 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i=1\n    while(i*i<=n):\n        if (n-i*i)==i*i:\n            print(\"YES\")\n            return\n        i+=1\n    print(\"NO\")\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i*i + j*j == n:\n                print(i,j)\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if ((i*i) == n):\n            print(i)\n            print(i)\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n>0:\n        for i in range(n):\n            for j in range(n):\n                if i**2 + j**2 == n:\n                    return 1\n                if i**2 + j**2 > n:\n                    return 0\n    return 0\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # print(\"colors:\",colors)\n    # print(\"patterns:\",patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # if the patterns are not valid, the return the False\n    if len(patterns) == 0:\n        return False\n    # store the color for each pattern\n    color_sequence = []\n    # store the pattern for each color\n    pattern_sequence = []\n    # store the result\n    result = True\n    for i in range(len(colors)):\n        color_sequence.append(colors[i])\n        pattern_sequence.append(patterns[i])\n    for i in range(len(patterns)):\n        if i + 1 < len(patterns):\n            if pattern_sequence[i] == pattern_sequence[i + 1]:\n                pass\n            else:\n                result = False\n                return result\n    if pattern_sequence[-1]!= pattern_sequence[0]:\n        result = False\n    # return the result\n    return result\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check for same number of colors and patterns\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Check for same pattern in the same position\n    for i in range(len(colors)):\n        if patterns[i] not in colors[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    if len(colors)!= len(patterns):\n        print('Error, input colors and patterns have different lengths')\n    else:\n        for i in range(0, len(colors)):\n            if colors[i] == patterns[i][0]:\n                count += 1\n            else:\n                break\n        if count == len(patterns):\n            print('Yes, it follows the sequence given in the patterns array')\n        else:\n            print('No, it does not follow the sequence given in the patterns array')\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return len(colors) == len(patterns) and all(c in patterns for c in colors)\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors_list = colors.split(',')\n    patterns_list = patterns.split(',')\n    if len(colors_list)!= len(patterns_list):\n        return False\n    for i in range(len(colors_list)):\n        if not colors_list[i] == patterns_list[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    #print(n)\n    for i in range(n):\n        if patterns[i] == 1:\n            if colors[i] == 'black':\n                colors[i] = 'white'\n            else:\n                colors[i] = 'black'\n        else:\n            if colors[i] == 'white':\n                colors[i] = 'black'\n            else:\n                colors[i] = 'white'\n    print(colors)\n    \nis_samepatterns(['black', 'white', 'black', 'black', 'white', 'white'], [1, 1, 1, 0, 1, 1])\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if(patterns[i]!= colors[i]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    idx_i = 0\n    while idx_i < len(colors):\n        if patterns[idx_i] == colors[idx_i]:\n            idx_i += 1\n            continue\n        else:\n            break\n    return idx_i == len(colors)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    # return a list of tuples\n    tuples = []\n    for i in test_list:\n        if K % i[0] == 0 and K % i[1] == 0:\n            tuples.append(i)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for el in test_list:\n        if el[0] % K == 0 and el[1] % K == 0:\n            result.append(el)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list.sort()\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[j][0] % K == 0:\n                result.append((test_list[i],test_list[j]))\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = list()\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if not test_list:\n        return []\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # O(N)\n    # O(N)\n    # O(N)\n    # O(N)\n    # O(N)\n    \n    # dict = {}\n    # for i in range(K):\n    #     dict[i] = []\n    # for item in test_list:\n    #     for i in range(K):\n    #         if item[i]%K == 0:\n    #             dict[i].append(item)\n    # return dict\n    \n    # O(N)\n    # O(N)\n    # O(K)\n    # O(N)\n    \n    dict = {}\n    for item in test_list:\n        if item[0] % K == 0:\n            dict[item[0]] = item\n    return dict\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    k_tuples = set()\n    for element in test_list:\n        if element[0] % K == 0 and element[1] % K == 0:\n            k_tuples.add(element)\n    return k_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all(i%K==0 for i in t)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code goes here\n    count = 0\n    for i in test_list:\n        if i[0] % K == 0 and i[1] % K == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        temp = []\n        for i in tup:\n            if i % K == 0:\n                temp.append(i)\n        if len(temp) == len(tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = 11\n    if n%x == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \nis_Diff(int(input(\"Enter a number: \")))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        print('{} is divisible by 11'.format(n))\n    else:\n        print('{} is not divisible by 11'.format(n))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # A number is divisible by 11 if the sum of its digits is divisible by 11.\n    if (sum(map(int, str(n))) % 11 == 0): \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even\"\n    else:\n        return \"The length of the word is odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\nprint(word_len('hello'))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n    #if len(s) % 2 == 0:\n    #    return True\n    #else:\n    #    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if (len(s) % 2 == 0):\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"Odd length word is present\")\n    else:\n        print(\"Odd length word is not present\")\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n*(n+1)*(n+2))/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 0 #Your code here\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # using a modified Fibonacci sequence\n    # a_k = a_k-1 + a_k-2 + a_k-3\n    return (n*(n+1)*(n+2))//6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(3*n-1)//2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def is_divisible(n, m):\n        return n % m == 0\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) / 6\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol= (4.0/3.0)*math.pi*(r**3)\n    return vol\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    vol= l*w*h\n    return vol\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sr= 2*math.pi*r*(r+h)\n    return sr\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sr= math.pi*r*(r+h)\n    return sr\ndef surface_area_cone_base_eq(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sr= math.pi*r**2\n    return sr\ndef surface_area_square(s):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    sr= s*s\n    return sr\ndef surface_area_square_diagonal(s):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    sr= s*math.sqrt(2)\n    return sr\ndef surface_area_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    sr= s**2*6\n    return sr\ndef surface_area_pyramid(b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    sr= b*h*1.5*(b+h)\n    return sr\ndef surface_area_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    sr= b*h*0.5\n    return sr\ndef surface_area_parallelogram(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    sr= b*h\n    return sr\ndef surface_area_trapezium(b1,b2,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    sr= (b1+b2)*h/2\n    return sr\ndef surface_area_rectangle(l,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    sr= l*w\n    return sr\ndef surface_area_triangle_three_sides(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle when the length of the sides are known.\n    '''\n    sr= (a+b+c)*0.5\n    return sr\ndef surface_area_parallelogram_known_base(l,b):\n    '''\n    Write a function to find the surface area of a parallelogram when the length of one of the bases is known.\n    '''\n    sr= l*b\n    return sr\ndef surface_area_rectangle_known_height(w,h):\n    '''\n    Write a function to find the surface area of a rectangle when the height is known.\n    '''\n    sr= w*h\n    return sr\ndef surface_area_rectangle_known_base_and_height(l,w):\n    '''\n    Write a function to find the surface area of a rectangle when the length and height are known.\n    '''\n    sr= l*w\n    return sr\ndef surface_area_rectangle_known_slant(l,b):\n    '''\n    Write a function to find the surface area of a rectangle when the length and the slant are known.\n    '''\n    sr= l*b\n    return sr\ndef surface_area_sphere_known_radius(r):\n    '''\n    Write a function to find the surface area of a sphere when the radius is known.\n    '''\n    sr= 4.0*math.pi*(r**2)\n    return sr\ndef surface_area_cube_known_side(s):\n    '''\n    Write a function to find the surface area of a cube when the side is known.\n    '''\n    sr= 6*(s**2)\n    return sr\ndef surface_area_cube_known_height(s):\n    '''\n    Write a function to find the surface area of a cube when the height is known.\n    '''\n    sr= 6*(s**2)\n    return sr\ndef surface_area_cube_known_width(s):\n    '''\n    Write a function to find the surface area of a cube when the width is known.\n    '''\n    sr= 6*(s**2)\n    return sr\ndef surface_area_sphere_known_diameter(d):\n    '''\n    Write a function to find the surface area of a sphere when the diameter is known.\n    '''\n    sr= 4.0*math.pi*(d/2.0)**2\n    return sr\ndef surface_area_sphere_known_radius(r):\n    '''\n    Write a function to find the surface area of a sphere when the radius is known.\n    '''\n    sr= 4.0*math.pi*(r**2)\n    return sr\ndef surface_area_parallelogram_known_base_and_height(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram when the base and the height are known.\n    '''\n    sr= b*h\n    return sr\ndef surface_area_triangle_known_base_and_height(b,h):\n    '''\n    Write a function to find the surface area of a triangle when the base and the height are known.\n    '''\n    sr= b*h/2.0\n    return sr\ndef surface_area_triangle_known_side_and_height(a,h):\n    '''\n    Write a function to find the surface area of a triangle when the side and the height are known.\n    '''\n    sr= a*h/2.0\n    return sr\ndef surface_area_trapezium_known_base_and_height(b1,b2,h):\n    '''\n    Write a function to find the surface area of a trapezium when the base and the height are known.\n    '''\n    sr= (b1+b2)*h/2.0\n    return sr\ndef surface_area_triangle_known_side_and_base(a,b):\n    '''\n    Write a function to find the surface area of a triangle when the side and the base are known.\n    '''\n    sr= a*b/2.0\n    return sr\ndef surface_area_triangle_known_diameter_and_height(d,h):\n    '''\n    Write a function to find the surface area of a triangle when the diameter and the height are known.\n    '''\n    sr= (d/2.0)*h\n    return sr\ndef surface_area_trapezium_known_diameter_and_height(d1,d2,h):\n    '''\n    Write a function to find the surface area of a trapezium when the diameter and the height are known.\n    '''\n    sr= ((d1+d2)/2.0)*h\n    return sr\ndef surface_area_trapezium_known_diameter_and_base(d1,d2,b):\n    '''\n    Write a function to find the surface area of a trapezium when the diameter and the base are known.\n    '''\n    sr= ((d1+d2)/2.0)*b\n    return sr\ndef surface_area_rectangle_known_side_and_slant(l,s):\n    '''\n    Write a function to find the surface area of a rectangle when the length and the slant are known.\n    '''\n    sr= l*s\n    return sr\ndef surface_area_trapezium_known_base_and_slant(b,s):\n    '''\n    Write a function to find the surface area of a trapezium when the base and the slant are known.\n    '''\n    sr= b*(s/2.0)\n    return sr\ndef surface"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4/3)*math.pi*(r**3))\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*(r**2))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return ((math.pi)*(r**2)*h)\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return ((2*math.pi)*r*(r+h))\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*(math.pi)*(r**2)*h\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (math.pi)*(r*(r+math.sqrt(h**2+r**2)))\ndef volume_prism(a,b,c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return (a*b*c)\ndef surface_area_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return (2*(a*b+a*c+b*c))\ndef volume_right_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a right-prism.\n    '''\n    return (1/3)*(a*b*c)\ndef surface_area_right_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a right-prism.\n    '''\n    return (math.sqrt((a**2)+(b**2))*c)\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (1/2)*(a*b*c)\ndef surface_area_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (1/2)*(a+b+c)\ndef volume_parallelogram(a,b,c):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return (a*b*c)\ndef surface_area_parallelogram(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return (a+b+c)\ndef volume_kite(a,b,c):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    return ((1/3)*math.pi*(a*b*c))\ndef surface_area_kite(a,b,c):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return ((1/2)*(a+b+c))\ndef volume_trapezoid(a,b,c,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return ((1/2)*(a+b)*h)\ndef surface_area_trapezoid(a,b,c,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return ((1/2)*(a+b+c)*h)\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return ((4/3)*math.pi*a*b*c)\ndef surface_area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return ((4*math.pi*a*b*c)/3)\ndef volume_cone_cap(r,h):\n    '''\n    Write a function to find the volume of a cone cap.\n    '''\n    return ((1/3)*(math.pi)*(r**2)*h)\ndef surface_area_cone_cap(r,h):\n    '''\n    Write a function to find the surface area of a cone cap.\n    '''\n    return ((math.pi)*(r*(r+math.sqrt(h**2+r**2))))\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (a**3)\ndef surface_area_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (6*(a**2))\ndef volume_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((1/3)*a*b*c)\ndef surface_area_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return ((1/2)*(a+b+c))\ndef volume_hexagon(a):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    return ((3*math.sqrt(3))/(4*math.sqrt(3))*(a**3))\ndef surface_area_hexagon(a):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    return (6*a)\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (a*b)\ndef surface_area_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return (2*(a+b))\ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (a**3)\ndef surface_area_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return (4*(a**2))\ndef volume_triangle_prism(a,b,c):\n    '''\n    Write a function to find the volume of a triangle prism.\n    '''\n    return ((1/2)*a*b*c)\ndef surface_area_triangle_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle prism.\n    '''\n    return (1/2)*(a+b+c)\ndef volume_parallelogram_prism(a,b,c):\n    '''\n    Write a function to find the volume of a parallelogram prism.\n    '''\n    return (a*b*c)\ndef surface_area_parallelogram_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelogram prism.\n    '''\n    return ((a+b+c))\ndef volume_kite_prism(a,b,c):\n    '''\n    Write a function to find the volume of a kite prism.\n    '''\n    return ((1/2)*(a**2)*c)\ndef surface_area_kite_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a kite prism.\n    '''\n    return (math.pi*(math.sqrt(a**2+b**2))*c)\ndef volume_trapezoid_prism(a,b,c,h):\n    '''\n    Write a function to find the volume of a trapezoid prism.\n    '''\n    return ((1/2)*(a+b)*h)\ndef surface_area_trapezoid_prism(a,b,c,h):\n    '''\n    Write a function t"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4*math.pi*r**3)/3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4 / 3) * math.pi * (r ** 3)\n    \ndef area_square(side):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return side ** 2\n    \ndef area_triangle(base, height):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return base * height / 2\n    \ndef area_rectangle(length, width):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return length * width\n    \ndef area_parallelogram(length, base):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return length * base\n    \ndef area_trapezoid(top, base, height):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return (top + base) * height / 2\n    \ndef area_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return math.pi * (r ** 2)\n    \ndef area_ellipse(r_major, r_minor):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    return math.pi * r_major * r_minor\n    \ndef area_rhombus(diagonal_1, diagonal_2):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return (diagonal_1 * diagonal_2) / 2\n    \ndef area_kite(diagonal_1, diagonal_2, side):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return (diagonal_1 * diagonal_2) / 2 + side * diagonal_2\n    \ndef area_cube(side):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * area_square(side)\n    \ndef volume_cone(radius, height):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * radius ** 2 * height) / 3\n    \ndef volume_pyramid(base, height):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (1 / 3) * math.pi * base ** 2 * height\n    \ndef volume_cylinder(radius, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * radius ** 2 * height\n    \ndef volume_cone_from_base_radius(base, radius):\n    '''\n    Write a function to find the volume of a cone given the base and radius.\n    '''\n    return math.pi * base ** 2 * radius / 3\n    \ndef volume_cone_from_base_height(base, height):\n    '''\n    Write a function to find the volume of a cone given the base and height.\n    '''\n    return math.pi * base ** 2 * (height / 3)\n    \ndef volume_cube_from_edge(edge):\n    '''\n    Write a function to find the volume of a cube given the edge.\n    '''\n    return edge ** 3\n    \ndef volume_cube_from_diagonal(diagonal):\n    '''\n    Write a function to find the volume of a cube given the diagonal.\n    '''\n    return (diagonal ** 3) / 3\n    \ndef volume_cube_from_height(height):\n    '''\n    Write a function to find the volume of a cube given the height.\n    '''\n    return height ** 3\n    \ndef volume_cube_from_side(side):\n    '''\n    Write a function to find the volume of a cube given the side.\n    '''\n    return side ** 3\n    \ndef volume_sphere_from_radius(radius):\n    '''\n    Write a function to find the volume of a sphere given the radius.\n    '''\n    return (4 / 3) * math.pi * (radius ** 3)\n    \ndef volume_sphere_from_side(side):\n    '''\n    Write a function to find the volume of a sphere given the side.\n    '''\n    return (4 / 3) * math.pi * (side ** 3) / 3\n    \ndef volume_sphere_from_diagonal(diagonal):\n    '''\n    Write a function to find the volume of a sphere given the diagonal.\n    '''\n    return (4 / 3) * math.pi * (diagonal ** 3) / 3\n    \ndef area_sphere_from_radius(radius):\n    '''\n    Write a function to find the surface area of a sphere given the radius.\n    '''\n    return 4 * math.pi * (radius ** 2)\n    \ndef area_sphere_from_side(side):\n    '''\n    Write a function to find the surface area of a sphere given the side.\n    '''\n    return 4 * math.pi * (side ** 2) / 3\n    \ndef area_sphere_from_diagonal(diagonal):\n    '''\n    Write a function to find the surface area of a sphere given the diagonal.\n    '''\n    return 4 * math.pi * (diagonal ** 2) / 3\n    \ndef area_parallelogram_from_length_and_base(length, base):\n    '''\n    Write a function to find the surface area of a parallelogram given the length and base.\n    '''\n    return length * base\n    \ndef area_rectangle_from_length_and_width(length, width):\n    '''\n    Write a function to find the surface area of a rectangle given the length and width.\n    '''\n    return length * width\n    \ndef area_square_from_side(side):\n    '''\n    Write a function to find the surface area of a square given the side.\n    '''\n    return side ** 2\n    \ndef area_kite_from_diagonal_and_side(diagonal, side):\n    '''\n    Write a function to find the surface area of a kite given the diagonal and side.\n    '''\n    return (diagonal * side) / 2\n    \ndef area_rectangle_from_diagonal(diagonal):\n    '''\n    Write a function to find the surface area of a rectangle given the diagonal.\n    '''\n    return diagonal ** 2\n    \ndef area_triangle_from_base_and_height(base, height):\n    '''\n    Write a function to find the surface area of a triangle given the base and height.\n    '''\n    return (base * height) / 2\n    \ndef area_circle_from_radius(radius):\n    '''\n    Write a function to find the surface area of a circle given the radius.\n    '''\n    return math.pi * radius ** 2\n    \ndef area_square_from_side(side):\n    '''\n    Write a function to find the surface area of a square given the side.\n    '''\n    return side ** 2\n    \ndef area_circle_from_side(side):\n    '''\n    Write a function to find the surface area of a circle given the side.\n    '''\n    return side ** 2 * math.pi\n    \ndef area_circle_from_radius(radius):\n    '''\n    Write a function to find the surface area of a circle given the radius.\n    '''\n    return math.pi * radius ** 2\n    \ndef area_circle_from_diameter(diameter):\n    '''\n    Write a function to find the surface area of a circle given the diameter.\n    '''\n    return math.pi * (diameter / 2) ** 2\n    \ndef area_ellipse_from_radius(r_major, r_minor):\n    '''\n    Write a function to find the surface area of an ellipse given the radius.\n    '''\n    return math.pi * r_major * r_minor\n    \ndef area_ellipse_from_diameter(diameter):\n    '''\n    Write a function to find the surface area of an ellipse given the diameter.\n    '''\n    return math.pi * diameter\n    \ndef area_rhombus_from_diagonal_and_side(diagonal, side):\n    ''"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r ** 3)\n    return v\ndef area_of_triangle(base,height):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    a = (base*height)/2\n    return a\ndef find_largest_letter(word):\n    '''\n    Write a function to find the largest letter of the alphabet in a word.\n    '''\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    value = 0\n    for i in word.lower():\n        if i in alphabet:\n            value = max(value,alphabet.index(i))\n    return value\ndef find_smallest_letter(word):\n    '''\n    Write a function to find the smallest letter of the alphabet in a word.\n    '''\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    value = 0\n    for i in word.lower():\n        if i in alphabet:\n            value = min(value,alphabet.index(i))\n    return value\ndef remove_letter(word):\n    '''\n    Write a function to remove the smallest letter in a word.\n    '''\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    new_word = \"\"\n    value = 0\n    for i in word.lower():\n        if i in alphabet:\n            value = min(value,alphabet.index(i))\n    for j in word.lower():\n        if j!= alphabet[value]:\n            new_word += j\n    return new_word\ndef sum_of_squares(x,y):\n    '''\n    Write a function to find the sum of the squares of the numbers between two numbers.\n    '''\n    sum = 0\n    for i in range(x,y+1):\n        sum += i**2\n    return sum\ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    n = str(n)\n    return n == n[::-1]\ndef total_term(n):\n    '''\n    Write a function to find the sum of the first n terms of the sequence 1, 2, 3,...\n    '''\n    summ = 0\n    for i in range(n):\n        summ += (i+1)\n    return summ\ndef is_power(n,p):\n    '''\n    Write a function to determine if n is a power of p.\n    '''\n    return n == p**int(math.log(n,p))\ndef is_power_v2(n,p):\n    '''\n    Write a function to determine if n is a power of p.\n    '''\n    if n == 0:\n        return False\n    i = 0\n    while p**i <= n:\n        if p**i == n:\n            return True\n        i += 1\n    return False\ndef sum_of_digits(n):\n    '''\n    Write a function to find the sum of the digits of a number.\n    '''\n    return sum([int(i) for i in str(n)])\ndef sum_of_odd_digits(n):\n    '''\n    Write a function to find the sum of the odd digits of a number.\n    '''\n    return sum([int(i) for i in str(n) if int(i) % 2!= 0])\ndef sum_of_even_digits(n):\n    '''\n    Write a function to find the sum of the even digits of a number.\n    '''\n    return sum([int(i) for i in str(n) if int(i) % 2 == 0])\ndef sum_of_digits_v2(n):\n    '''\n    Write a function to find the sum of the digits of a number.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\ndef sum_of_digits_v3(n):\n    '''\n    Write a function to find the sum of the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_v4(n):\n    '''\n    Write a function to find the sum of the digits of a number.\n    '''\n    summ = 0\n    while n:\n        summ += n % 10\n        n //= 10\n    return summ\ndef sum_of_first_n_primes(n):\n    '''\n    Write a function to find the sum of the first n primes.\n    '''\n    summ = 0\n    for i in range(2,n+1):\n        if is_prime(i):\n            summ += i\n    return summ\ndef sum_of_first_n_primes_v2(n):\n    '''\n    Write a function to find the sum of the first n primes.\n    '''\n    sum = 0\n    i = 1\n    while sum < n:\n        i += 1\n        if is_prime(i):\n            sum += i\n    return sum\ndef sum_of_first_n_primes_v3(n):\n    '''\n    Write a function to find the sum of the first n primes.\n    '''\n    primes = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            primes.append(i)\n    return sum(primes)\ndef sum_of_first_n_primes_v4(n):\n    '''\n    Write a function to find the sum of the first n primes.\n    '''\n    primes = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            primes.append(i)\n    return sum(primes)\ndef sum_of_primes(n):\n    '''\n    Write a function to find the sum of all prime numbers up to and including a given number.\n    '''\n    summ = 0\n    for i in range(1,n+1):\n        if is_prime(i):\n            summ += i\n    return summ\ndef sum_of_primes_v2(n):\n    '''\n    Write a function to find the sum of all prime numbers up to and including a given number.\n    '''\n    summ = 0\n    for i in range(1,n+1):\n        if is_prime(i):\n            summ += i\n    return summ\ndef sum_of_primes_v3(n):\n    '''\n    Write a function to find the sum of all prime numbers up to and including a given number.\n    '''\n    primes = []\n    for i in range(1,n+1):\n        if is_prime(i):\n            primes.append(i)\n    return sum(primes)\ndef sum_of_primes_v4(n):\n    '''\n    Write a function to find the sum of all prime numbers up to and including a given number.\n    '''\n    primes = []\n    for i in range(1,n+1):\n        if is_prime(i):\n            primes.append(i)\n    return sum(primes)\ndef is_prime_v2(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_v3(n):\n    ''"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    def volume(r):\n        pi = 3.1415926535897932384626433\n        return (4/3)*(pi)*(r**3)\n    print(volume(r))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if type(r)!= int and type(r)!= float:\n        raise TypeError('The radius must be a number.')\n    return (4 / 3) * math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume= (4/3)*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if type(r) == int or type(r) == float:\n        return (4/3)*math.pi*(r**3)\n    else:\n        return 'Input should be a number.'\n    \ndef pi(decimals=1):\n    '''\n    Write a function that returns Pi to 1 decimal place.\n    '''\n    if type(decimals) == int and decimals >= 0:\n        return round(math.pi, decimals)\n    else:\n        return 'Input should be an integer.'\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    if type(r) == int or type(r) == float and type(h) == int or type(h) == float:\n        return (math.pi*(r**2)*h)\n    else:\n        return 'Input should be a number.'\n    \ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if type(r) == int or type(r) == float and type(h) == int or type(h) == float:\n        return (1/3)*math.pi*(r**2)*h\n    else:\n        return 'Input should be a number.'\n    \ndef sphere_sph(r):\n    '''\n    Write a function to convert a sphere into spherical coordinates.\n    '''\n    if type(r) == int or type(r) == float:\n        return (r, 'degree', 'degree')\n    else:\n        return 'Input should be a number.'\n    \ndef cylinder_cyl(r, h):\n    '''\n    Write a function to convert a cylinder into cylindrical coordinates.\n    '''\n    if type(r) == int or type(r) == float and type(h) == int or type(h) == float:\n        return (r, h, 'degree')\n    else:\n        return 'Input should be a number.'\n    \ndef cone_cah(r, h):\n    '''\n    Write a function to convert a cone into cylindrical coordinates.\n    '''\n    if type(r) == int or type(r) == float and type(h) == int or type(h) == float:\n        return (r, h, 'degree')\n    else:\n        return 'Input should be a number.'\n    \ndef convert_to_cyl(r, h):\n    '''\n    Write a function to convert spherical coordinates into cylindrical coordinates.\n    '''\n    if type(r) == int or type(r) == float and type(h) == int or type(h) == float:\n        return (r, h, 'degree')\n    else:\n        return 'Input should be a number.'\n    \ndef convert_to_spher(r, h):\n    '''\n    Write a function to convert cylindrical coordinates into spherical coordinates.\n    '''\n    if type(r) == int or type(r) == float and type(h) == int or type(h) == float:\n        return (r, h, 'degree')\n    else:\n        return 'Input should be a number.'\n    \ndef convert_to_cone(r, h):\n    '''\n    Write a function to convert spherical coordinates into cone coordinates.\n    '''\n    if type(r) == int or type(r) == float and type(h) == int or type(h) == float:\n        return (r, h, 'degree')\n    else:\n        return 'Input should be a number.'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n=0\n    for i in strr:\n        n=n+ord(i)\n    return n%26"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    \n    return sum % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)%26\n    return chr(sum%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # strr=\"Hello\"\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return chr(sum%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def getChar(strr):\n        # function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n        sum=0\n        for i in strr:\n            sum+=ord(i)\n        return (sum%26)\n    return getChar(strr)\ndef get_Name(strr):\n    '''\n    Write a python function to find the name of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def get_Name(strr):\n        # function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n        sum=0\n        for i in strr:\n            sum+=ord(i)\n        return chr(sum%26)\n    return get_Name(strr)\ndef get_Contain(strr):\n    '''\n    Write a python function to find the words in the given string which contain a given character.\n    '''\n    def get_Contain(strr):\n        # function to find the words in the given string which contain a given character.\n        l=strr.split(' ')\n        f=0\n        for i in l:\n            if i.find('a')>=0:\n                print(i)\n                f=1\n                break\n        if f==0:\n            print(\"No Match\")\n    return get_Contain(strr)\ndef get_Contain_Index(strr):\n    '''\n    Write a python function to find the index of the words in the given string which contain a given character.\n    '''\n    def get_Contain_Index(strr):\n        # function to find the index of the words in the given string which contain a given character.\n        l=strr.split(' ')\n        f=0\n        for i in range(0,len(l)):\n            if l[i].find('a')>=0:\n                print(i)\n                f=1\n                break\n        if f==0:\n            print(\"No Match\")\n    return get_Contain_Index(strr)\ndef get_Remove(strr):\n    '''\n    Write a python function to find the words in the given string with the highest frequency.\n    '''\n    def get_Remove(strr):\n        # function to find the words in the given string with the highest frequency.\n        l=strr.split(' ')\n        s={}\n        for i in l:\n            if i in s:\n                s[i]+=1\n            else:\n                s[i]=1\n        print(s)\n        print(\"Maximum Frequency = \",max(s.values()))\n        for i in l:\n            if s[i]==max(s.values()):\n                print(i)\n                break\n    return get_Remove(strr)\ndef get_Remove_Index(strr):\n    '''\n    Write a python function to find the indices of the words in the given string with the highest frequency.\n    '''\n    def get_Remove_Index(strr):\n        # function to find the indices of the words in the given string with the highest frequency.\n        l=strr.split(' ')\n        s={}\n        for i in l:\n            if i in s:\n                s[i]+=1\n            else:\n                s[i]=1\n        print(s)\n        print(\"Maximum Frequency = \",max(s.values()))\n        for i in l:\n            if s[i]==max(s.values()):\n                print(i,s[i])\n                break\n    return get_Remove_Index(strr)\ndef get_Substring(strr):\n    '''\n    Write a python function to find the longest common substring in a given set of strings.\n    '''\n    def get_Substring(strr):\n        # function to find the longest common substring in a given set of strings.\n        l=strr.split(' ')\n        maxi=0\n        for i in range(0,len(l)):\n            for j in range(0,len(l)):\n                if i!=j and len(l[i])>maxi:\n                    s=l[i]\n                    if l[i] in l[j] and len(l[i])==len(l[j]):\n                        s=l[i]\n                if len(s)>maxi:\n                    maxi=len(s)\n                    s1=l[i]\n                    s2=l[j]\n        print(s1)\n        print(s2)\n    return get_Substring(strr)\ndef get_Check(strr):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    def get_Check(strr):\n        # function to check if the given string is a palindrome.\n        rev=strr[::-1]\n        if strr==rev:\n            print(\"Palindrome\")\n        else:\n            print(\"Not a palindrome\")\n    return get_Check(strr)\ndef get_Check_Index(strr):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    def get_Check_Index(strr):\n        # function to check if the given string is a palindrome.\n        rev=strr[::-1]\n        if strr==rev:\n            print(\"Palindrome\")\n        else:\n            print(\"Not a palindrome\")\n    return get_Check_Index(strr)\ndef get_Check_Char(strr):\n    '''\n    Write a python function to check if the given string is a palindrome using only alphabets.\n    '''\n    def get_Check_Char(strr):\n        # function to check if the given string is a palindrome using only alphabets.\n        s=''\n        for i in strr:\n            if i.isalpha():\n                s+=i\n        rev=s[::-1]\n        if s==rev:\n            print(\"Palindrome\")\n        else:\n            print(\"Not a palindrome\")\n    return get_Check_Char(strr)\ndef get_Check_Char_Index(strr):\n    '''\n    Write a python function to check if the given string is a palindrome using only alphabets.\n    '''\n    def get_Check_Char_Index(strr):\n        # function to check if the given string is a palindrome using only alphabets.\n        s=''\n        for i in strr:\n            if i.isalpha():\n                s+=i\n        rev=s[::-1]\n        if s==rev:\n            print(\"Palindrome\")\n        else:\n            print(\"Not a palindrome\")\n    return get_Check_Char_Index(strr)\ndef get_Key(strr):\n    '''\n    Write a python function to find the ASCII value of the given string.\n    '''\n    def get_Key(strr):\n        # function to find the ASCII value of the given string.\n        for i in strr:\n            print(ord(i),end=' ')\n    return get_Key(strr)\ndef get_Key_Index(strr):\n    '''\n    Write a python function to find the ASCII value of the given string.\n    '''\n    def get_Key_Index(strr):\n        # function to find the ASCII value of the given string.\n        for i in strr:\n            print(i,ord(i),end=' ')\n    return get_Key_Index(strr)\ndef get_Word_Count(strr):\n    '''\n    Write a python function to count the number of words in the given string.\n    '''\n    def get_Word_Count(strr):\n        # function to count the number of words in the given string.\n        l=strr.split(' ')\n        s={}\n        for i in l:\n            if i in s:\n                s[i]+=1\n            else:\n                s[i]=1\n        print(s)\n        print(\"Number of Words = \",len(s))\n    return get_Word_Count(strr)\ndef get_Word_Count_Index(strr):\n    '''\n    Write a python function to count the number of words in th"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    return sum([ord(char) for char in strr]) % 26\n    "
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return sum % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return(sum([ord(i) for i in strr])%26)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7719280749, 12586269025]\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-2) + sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def nth_number(n):\n        number = [0]\n        count = 0\n        while(count!= n):\n            count += 1\n            number.append(0)\n            if count > 1:\n                for i in range(1, count):\n                    number.append(number[count-i] + number[count-i-1])\n            number.append(0)\n        return number[-1]\n    return nth_number(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    x=0\n    y=1\n    z=0\n    \n    for i in range(n):\n        z = (x + y)/2\n        x = y\n        y = z\n        print(z)\n        \nsequence(1000)"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 1\n    while count <= n:\n        nth_term = (2*count) - 1\n        print(nth_term)\n        count += 1\n        \n        \n    return nth_term\n    \ndef test_sequence():\n    assert sequence(1) == 1\n    assert sequence(2) == 11\n    assert sequence(3) == 21\n    assert sequence(4) == 32\n    assert sequence(5) == 42\n    \n    \ntest_sequence()\nprint(sequence(3))"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: return 2\n    if n == 2: return 3\n    return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [1, 1]\n    for i in range(2, n):\n        a.append(a[i - 1] + a[i - 2])\n    return a[n - 1]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = [1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418]\n    if n < len(numbers):\n        return numbers[n-1]\n    i = len(numbers)\n    while True:\n        next_number = 0\n        for i in range(1,i+1):\n            next_number += int(numbers[i-1] / math.factorial(i))\n        if next_number == n:\n            return numbers[i]\n        numbers.append(next_number)\n        i += 1\nprint(sequence(10000000))"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    assert(isinstance(n, int))\n    assert(n >= 0)\n    if n == 0:\n        return 0\n    else:\n        if n == 1:\n            return 1\n        else:\n            return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = (4 * math.pi * r ** 2)\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 3\ndef netgravity(m1, m2, r):\n    '''\n    Write a function to find the net gravity between two bodies, if they are \n    both on the surface of the same ellipsoid.\n    '''\n    return (6.674 * 10 ** -11) * ((m1 * m2) / (r ** 2))\ndef netgrav(m1, m2, r1, r2):\n    '''\n    Write a function to find the net gravity between two bodies, if they are \n    not on the surface of the same ellipsoid.\n    '''\n    return (6.674 * 10 ** -11) * (((m1 * m2) / (r1 ** 2)) + ((m1 * m2) / (r2 ** 2)))\ndef netgrav_multi(m1, m2, r1, r2, r3):\n    '''\n    Write a function to find the net gravity between two bodies, if they are \n    not on the surface of the same ellipsoid.\n    '''\n    return (6.674 * 10 ** -11) * (((m1 * m2) / (r1 ** 2)) + ((m1 * m2) / (r2 ** 2)) + ((m1 * m2) / (r3 ** 2)))\ndef mass(m, r):\n    '''\n    Write a function to find the mass of a body at a given radius.\n    '''\n    return m / (4 * math.pi / 3 * (r ** 3))\ndef totalmass(m1, m2, r1, r2):\n    '''\n    Write a function to find the total mass of two bodies, given their masses,\n    radii, and assuming they are not on the surface of the same ellipsoid.\n    '''\n    return (m1 * m2) / (r1 ** 2 + r2 ** 2)\ndef escapevelocity(m1, m2, r1, r2):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return (math.sqrt(((2 * m1) / r1) + (m2 / (r2 ** 2))))\ndef escapevelocity_multi(m1, m2, r1, r2, r3):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return (math.sqrt(((2 * m1) / r1) + (m2 / (r2 ** 2)) + (m2 / (r3 ** 2))))\ndef escapevelocity2(m1, m2, r1, r2):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return ((2 * m1) / (r1 ** 2)) + (m2 / (r2 ** 2))\ndef escapevelocity3(m1, m2, r1, r2, r3):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return ((2 * m1) / (r1 ** 2)) + (m2 / (r2 ** 2)) + (m2 / (r3 ** 2))\ndef escapevelocity4(m1, m2, r1, r2, r3, r4):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return ((2 * m1) / (r1 ** 2)) + (m2 / (r2 ** 2)) + (m2 / (r3 ** 2)) + (m2 / (r4 ** 2))\ndef escapevelocity5(m1, m2, r1, r2, r3, r4, r5):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return ((2 * m1) / (r1 ** 2)) + (m2 / (r2 ** 2)) + (m2 / (r3 ** 2)) + (m2 / (r4 ** 2)) + (m2 / (r5 ** 2))\ndef escapevelocity6(m1, m2, r1, r2, r3, r4, r5, r6):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return ((2 * m1) / (r1 ** 2)) + (m2 / (r2 ** 2)) + (m2 / (r3 ** 2)) + (m2 / (r4 ** 2)) + (m2 / (r5 ** 2)) + (m2 / (r6 ** 2))\ndef escapevelocity7(m1, m2, r1, r2, r3, r4, r5, r6, r7):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return ((2 * m1) / (r1 ** 2)) + (m2 / (r2 ** 2)) + (m2 / (r3 ** 2)) + (m2 / (r4 ** 2)) + (m2 / (r5 ** 2)) + (m2 / (r6 ** 2)) + (m2 / (r7 ** 2))\ndef escapevelocity8(m1, m2, r1, r2, r3, r4, r5, r6, r7, r8):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return ((2 * m1) / (r1 ** 2)) + (m2 / (r2 ** 2)) + (m2 / (r3 ** 2)) + (m2 / (r4 ** 2)) + (m2 / (r5 ** 2)) + (m2 / (r6 ** 2)) + (m2 / (r7 ** 2)) + (m2 / (r8 ** 2))\ndef escapevelocity9(m1, m2, r1, r2, r3, r4, r5, r6, r7, r8, r9):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return ((2 * m1) / (r1 ** 2)) + (m2 / (r2 ** 2)) + (m2 / (r3 ** 2)) + (m2 / (r4 ** 2)) + (m2 / (r5 ** 2)) + (m2 / (r6 ** 2)) + (m2 / (r7 ** 2)) + (m2 / (r8 ** 2)) + (m2 / (r9 ** 2))\ndef escapevelocity10(m1, m2, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return ((2 * m1) / (r1 ** 2)) + (m2 / (r2 ** 2)) + (m2 / (r3 ** 2)) + (m2 / (r4 ** 2)) + (m2 / (r5 ** 2)) + (m2 / (r6 ** 2)) + (m2 / (r7 ** 2)) + (m2 / (r8 ** 2)) + (m2 / (r9 ** 2)) + (m2 / (r10 ** 2))\ndef escapevelocity11(m1, m2, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11):\n    '''\n    Write a function to find the escape velocity of a body, given its mass,\n    radius, and the gravitational constant.\n    '''\n    return ((2 * m1) / (r1 ** 2)) + (m"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4 * math.pi * r**2\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r < 0:\n        print('Please enter a positive number')\n    else:\n        area = 4 * math.pi * (r ** 2)\n        return area\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4*math.pi*r**2\n    return surfacearea\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\ndef perimeter_cube(l):\n    '''\n    Write a function to find the perimeter of a cube.\n    '''\n    perimeter = 8*l\n    return perimeter\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = l**3\n    return volume\ndef area_cuboid(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    surfacearea = 2*(l*b + b*h + h*l)\n    return surfacearea\ndef volume_cuboid(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*b*h\n    return volume\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfacearea = math.pi*r*(r+math.sqrt(h**2+r**2))\n    return surfacearea\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1/3*math.pi*r**2*h\n    return volume\ndef area_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surfacearea = 1/2*b*h\n    return surfacearea\ndef volume_triangle(b,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume = 1/2*b*h\n    return volume\ndef area_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    surfacearea = ((b1+b2)*h)/2\n    return surfacearea\ndef volume_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    volume = ((b1+b2)*h)/2\n    return volume\ndef area_rectangle(l,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surfacearea = l*b\n    return surfacearea\ndef volume_rectangle(l,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume = l*b\n    return volume\ndef area_rhombus(d1,d2):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    surfacearea = 1/2*d1*d2\n    return surfacearea\ndef volume_rhombus(d1,d2):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume = 1/2*d1*d2\n    return volume\ndef area_kite(d1,d2):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    surfacearea = 1/2*d1*d2\n    return surfacearea\ndef volume_kite(d1,d2):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    volume = 1/2*d1*d2\n    return volume\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    surfacearea = b*h\n    return surfacearea\ndef volume_parallelogram(b,h):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    volume = b*h\n    return volume\ndef area_square(s):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    surfacearea = s**2\n    return surfacearea\ndef volume_square(s):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume = s**2\n    return volume\ndef area_rectangle_prism(a,b,h):\n    '''\n    Write a function to find the surface area of a rectangle prism.\n    '''\n    surfacearea = 2*(a*b + a*h + b*h)\n    return surfacearea\ndef volume_rectangle_prism(a,b,h):\n    '''\n    Write a function to find the volume of a rectangle prism.\n    '''\n    volume = a*b*h\n    return volume\ndef area_cuboid_prism(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid prism.\n    '''\n    surfacearea = 2*(l*b + l*h + b*h)\n    return surfacearea\ndef volume_cuboid_prism(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid prism.\n    '''\n    volume = l*b*h\n    return volume\ndef area_pyramid(s,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surfacearea = s*h\n    return surfacearea\ndef volume_pyramid(s,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = 1/3*s**2*h\n    return volume\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*math.pi*r*(r+h)\n    return surfacearea\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef area_cone_prism(r,h):\n    '''\n    Write a function to find the surface area of a cone prism.\n    '''\n    surfacearea = 2*math.pi*r*(r+math.sqrt(h**2+r**2))\n    return surfacearea\ndef volume_cone_prism(r,h):\n    '''\n    Write a function to find the volume of a cone prism.\n    '''\n    volume = 1/3*math.pi*r**2*h\n    return volume\ndef area_hemisphere(r):\n    '''\n    Write a function to find the surface area of a hemisphere.\n    '''\n    surfacearea = 2*math.pi*r**2\n    return surfacearea\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    volume = 1/3*math.pi*r**3\n    return volume\ndef area_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    surfacearea = math.pi*r**2\n    return surfacearea\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    volume = math.pi*r**3\n    return volume\ndef area_sphere_sphere(r1,r2):\n    '''\n    Write a function to find the surface area of two spheres that share a common center.\n    '''\n    surfacearea = 4*math.pi*(r1+r2)*math.sqrt((r1+r2)**2 - (r1-r2)**2)\n    return surfacearea\ndef volume_sphere_sphere(r1,r2):\n    '''\n    Write a function to find the volume of two spheres that share a common center.\n    '''\n    volume = (4/3)*math.pi*(r1+r2)**3\n    return volume\ndef area_cube_cube(l1,l2):\n    '''\n    Write a function to find the surface area of tw"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*r**2\n    return area\nprint(surfacearea_sphere(3))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 1 - (n-1)**2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def calc(x):\n        return x * ((2 * x - 1) * ((2 * x - 1) + 1)) // 4\n    \n    if n == 1:\n        return 1\n    \n    return calc(n - 1) + (1 if n % 2 == 0 else 0)"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def hexagon(n):\n        return n * n * 3\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return 1.5 ** (n - 1) * ((3 * n - 1) // 2)\n        \n        \nif __name__ == '__main__':\n    print(centered_hexagonal_number(0))\n    print(centered_hexagonal_number(1))\n    print(centered_hexagonal_number(2))\n    print(centered_hexagonal_number(3))\n    print(centered_hexagonal_number(4))\n    print(centered_hexagonal_number(5))\n    "
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal(n) - hexagonal(n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(3*n - 2)*(-1)**n\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = []\n    for i in range(1, n+1):\n        hexagonal_numbers.append(i * (i + 1) / 2)\n    return hexagonal_numbers[n-1]\n    \n    \ndef centered_hexagonal_number_digits(n):\n    '''\n    Write a function to find the number of digits in the nth centered hexagonal number.\n    '''\n    return int(math.floor(math.sqrt(2 * (2 * n - 1) + 1)) + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2*n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return centered_hexagonal_number(n - 1) + 1 + 2 / 3 * ((2 * n) - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(3*n-1))//2\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict = dict1.copy()\n    dict.update(dict2)\n    dict.update(dict3)\n    return dict\ndef merge_dictionaries_three_one_line(dict1,dict2,dict3):\n    return {**dict1, **dict2, **dict3}\ndef merge_dictionaries_three_dict_comprehension(dict1,dict2,dict3):\n    return {**dict1, **dict2, **dict3}\ndef merge_dictionaries_three_version_one(dict1,dict2,dict3):\n    dict_all = {}\n    dict_all.update(dict1)\n    dict_all.update(dict2)\n    dict_all.update(dict3)\n    return dict_all\ndef merge_dictionaries_three_version_two(dict1,dict2,dict3):\n    dict_all = dict1.copy()\n    dict_all.update(dict2)\n    dict_all.update(dict3)\n    return dict_all\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.items():\n        d[key]=value\n    for key,value in dict2.items():\n        d[key]=value\n    for key,value in dict3.items():\n        d[key]=value\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = ct.defaultdict(list)\n    for key in (dict1, dict2, dict3):\n        for k, v in key.items():\n            result[k].append(v)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    output_dict = {**dict1, **dict2, **dict3}\n    return output_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = dict1.copy()\n    res.update(dict2)\n    res.update(dict3)\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dictionary = dict1.copy()\n    new_dictionary.update(dict2)\n    new_dictionary.update(dict3)\n    return new_dictionary\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return ct.ChainMap(dict3, dict2, dict1)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict = {}\n    for x in dict1:\n        dict[x] = dict1[x]\n    for x in dict2:\n        if x not in dict:\n            dict[x] = dict2[x]\n        else:\n            dict[x] = dict3[x]\n    return dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary = {}\n    for word in list1:\n        if word in dictionary.keys():\n            dictionary[word] += 1\n        else:\n            dictionary[word] = 1\n    return dictionary\nprint(freq_count(['apple', 'apple', 'app', 'apple', 'app']))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list_freq = {}\n    for i in list1:\n        if i in list_freq.keys():\n            list_freq[i] += 1\n        else:\n            list_freq[i] = 1\n    return list_freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = collections.Counter(list1)\n    return count_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        if i not in freq:\n            freq[i]=1\n        else:\n            freq[i]+=1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.defaultdict(int)\n    for item in list1:\n        counts[item] += 1\n    return counts\n    \n    \ndef freq_count_1(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = {}\n    for item in list1:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Write your code here.\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    count_list = []\n    for i in list2:\n        count = list1.count(i)\n        count_list.append(count)\n    count_dict = dict(zip(list2, count_list))\n    return count_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    counter = collections.Counter(list1)\n    return counter\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict_freq_count = {}\n    for i in list1:\n        dict_freq_count[i] = list1.count(i)\n    return dict_freq_count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        dict1[i] = dict1.get(i,0) + 1\n    return dict1\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return 10**(len(str(N))-1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return closest_num(abs(N))\n    else:\n        return closest_num(N - 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #your code here\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    lst = []\n    for i in range(0,N):\n        lst.append(i)\n    for i in range(len(lst)-1,0,-1):\n        if lst[i] - lst[i-1] > 1:\n            closest = lst[i-1]\n            break\n        else:\n            closest = lst[i]\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = list(range(1,N+1))\n    for i in range(len(l)):\n        if N > l[i]:\n            l[i] = l[i-1]\n    return l[-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_number = 1\n    for i in range(1, N + 1):\n        if abs(closest_number - N) > abs(i - N):\n            closest_number = i\n    return closest_number\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return closest_num(-N)\n    # if N is a positive integer, then the closest smaller number is itself\n    if N < 10:\n        return N\n    # if N is a multiple of 10, then the closest smaller number is '0'\n    if N % 10 == 0:\n        return 0\n    # if N is a multiple of 10, but less than 10, then the closest smaller number is the multiple of 10 less than N\n    if N % 10 < N % 100:\n        return N - N % 10\n    # otherwise the closest smaller number is the multiple of 10 less than N\n    return N - N % 10\n    \n    \ndef palindrome_list(n, k):\n    '''\n    Given an integer n, return the number of all palindromic numbers smaller than n, which is 2n-1\n    '''\n    return 2 * k - 1\n    \n    \ndef factorial_digit_sum(N):\n    '''\n    Given a positive integer N, return the sum of the digits of all the factorials of numbers less than or equal to N.\n    '''\n    sum = 0\n    for i in range(1, N + 1):\n        sum += digit_sum(factorial(i))\n    return sum\n    \n    \ndef digit_sum(N):\n    '''\n    Given a nonnegative integer N, return the sum of the digits of all numbers from 1 to N.\n    '''\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N //= 10\n    return sum\n    \n    \ndef count_binary_substrings(s):\n    '''\n    Given a binary string S, return the number of substrings with exactly K consecutive 1's.\n    '''\n    K = 1\n    count = 0\n    for i in range(len(s)):\n        if K > 0:\n            if s[i] == '1':\n                count += 1\n                K -= 1\n            else:\n                count = 0\n                K = 1\n        else:\n            count = 0\n    return count\n    \n    \ndef unique_numbers(A, B):\n    '''\n    Given two sorted arrays A and B of numbers, find how many unique numbers are in the two arrays.\n    '''\n    A.extend(B)\n    A.sort()\n    count = 0\n    for i in range(len(A) - 1):\n        if A[i]!= A[i + 1]:\n            count += 1\n    return count\n    \n    \ndef largest_divisible_subset(A):\n    '''\n    Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:\n        - Si % Sj = 0 or Sj % Si = 0.\n    If there are multiple solutions, return any subset is fine.\n    '''\n    # A list of subsets, where each subset is a list of numbers.\n    subsets = []\n    \n    # A list of lists, where each list is the largest subset of the previous list.\n    largest_subsets = []\n    \n    # A list of tuples, where each tuple is (number, 1), where 1 represents the number is not yet added to the subset.\n    non_added_numbers = []\n    \n    # A list of tuples, where each tuple is (index, number), where index represents the index in the previous subset.\n    index_map = []\n    \n    # A list of numbers, where each number is the index of the element in A.\n    numbers_index = []\n    \n    # A list of lists, where each list is the current subset.\n    current_subsets = []\n    \n    # A list of lists, where each list is the current largest subset.\n    current_largest_subsets = []\n    \n    # The largest subset.\n    largest_subset = []\n    \n    # The current largest subset.\n    current_largest_subset = []\n    \n    # Go through the array A to find the largest subset.\n    for i in range(len(A)):\n        # Add the number to the non-added list.\n        non_added_numbers.append((i, A[i]))\n        # Append the number to the current list.\n        current_subsets.append(A[i])\n        # Append the number to the index map.\n        index_map.append((i, A[i]))\n        # Append the index to the numbers index.\n        numbers_index.append(i)\n    \n    # Get the largest subset.\n    while True:\n        # Add the first number in the non-added list.\n        current_subsets.append(non_added_numbers[0][1])\n        # Append the index to the numbers index.\n        numbers_index.append(non_added_numbers[0][0])\n        # Append the index to the index map.\n        index_map.append((non_added_numbers[0][0], non_added_numbers[0][1]))\n        # Remove the number from the non-added list.\n        del non_added_numbers[0]\n        \n        # Get the sum of the current subset.\n        current_subset_sum = digit_sum(current_subsets[0])\n        # Get the number of current subset.\n        current_subset_size = 1\n        \n        for i in range(1, len(current_subsets)):\n            # If the current sum is larger than the previous sum, then reset the current subset and continue.\n            if current_subset_sum > digit_sum(current_subsets[i]):\n                current_subsets = current_subsets[:i]\n                current_subset_sum = digit_sum(current_subsets[i])\n                current_subset_size = i\n                break\n            # If the current sum is smaller than or equal to the previous sum, then add the current number to the current subset.\n            elif current_subset_sum <= digit_sum(current_subsets[i]):\n                current_subsets.append(current_subsets[i])\n                # Append the index to the numbers index.\n                numbers_index.append(numbers_index[i])\n                # Append the index to the index map.\n                index_map.append((numbers_index[i], current_subsets[i]))\n                current_subset_sum = digit_sum(current_subsets[i])\n                current_subset_size = i + 1\n        \n        # If the current subset has the largest size, then append it to the largest subset.\n        if current_subset_size > len(largest_subset):\n            largest_subset = current_subsets.copy()\n        # If the current subset has the same size as the largest subset, then sort it in decreasing order of the number's digits.\n        elif current_subset_size == len(largest_subset):\n            current_subset_sort = sorted(current_subsets, reverse = True)\n            current_subset_sort = current_subset_sort.copy()\n            largest_subset = current_subset_sort.copy()\n        \n        # Append the current subset to the largest subset.\n        current_largest_subset.append(current_subset_sort)\n        # Append the current subset to the largest subsets.\n        current_largest_subsets.append(current_largest_subset)\n        \n        # If the current subset is the last subset in the array, then break.\n        if len(current_subsets) == 1:\n            break\n        \n        # Remove the first number in the current subset.\n        current_subsets = current_subsets[1:]\n        # Remove the index of the current number in the numbers index.\n        numbers_index.remove(numbers_index[0])\n        # Remove the index of the current number in the index map.\n        index_map.remove(index_map[0])\n        \n        # Get the sum of the current subset.\n        current_subset_sum = digit_sum(current_subsets[0])\n        # Get the number of current subset.\n        current_subset_size = 1\n        \n        for i in range(1, len(current_subsets)):\n            # If the current sum is larger than the previous sum, then reset the current subset and continue.\n            if current_subset_sum > digit_sum(current_subsets[i]):\n                current_subsets = current_subsets[:i]\n                current_su"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(len(list1[i]))\n    return max(list2)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length_list = []\n    for word in list1:\n        length_list.append(len(word))\n    print(length_list)\n    return max(length_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    wordlist=[]\n    for word in list1:\n        wordlist.append(len(word))\n    return max(wordlist)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for i in range(len(list1)):\n        if len(list1[i]) > len(longest_word):\n            longest_word = list1[i]\n    return longest_word\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in range(0, len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n            longest_word = i\n    return longest_word\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len1 = []\n    for i in list1:\n        len1.append(len(i))\n    return max(len1)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    list1 = ['iphone', 'iphone X', 'iphone XR', 'iphone 12']\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a=[]\n    for i in list1:\n        a.append(len(i))\n    return max(a)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=0\n    for i in list1:\n        if(len(i)>max_len):\n            max_len=len(i)\n    return max_len\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([str1.find(sub_str) > -1 for str1 in str_list])\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    res = [s for s in str1 if sub_str in s]\n    if res:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) == 0 and len(sub_str) == 0:\n        return True\n    elif str1 == '' or sub_str == '':\n        return False\n    else:\n        if sub_str in str1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # declare a list variable to store the input list\n    list_of_strings = []\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # if str1 in sub_str:\n    #     return \"Present\"\n    # return \"Not present\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for str2 in str1:\n        if str2 in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    \n    def check_undulating(n):\n        '''\n        First, the input number is passed to this function and then it checks whether the number is undulating or not.\n        \n        It basically checks if the number is divisible by 4 and also if the number is not multiple of 4.\n        \n        Then it returns True if the number is undulating.\n        '''\n        if n % 4 == 0 and n % 100!= 0:\n            return True\n        return False\n    \n    \n    if check_undulating(n):\n        print(True)\n    else:\n        print(False)\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    m = 0\n    for i in range(1, n):\n        if(abs(n - n/i)!= abs(m - m/i)):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    c = 0\n    for i in range(1, len(str(n))):\n        if int(str(n)[i]) == int(str(n)[i-1]):\n            c += 1\n    if c == 1:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    flag = 0\n    # Logic:\n    # The undulating numbers are numbers which have only two repeating digits in their factors\n    for i in range(2,n//2+1):\n        # We take the half of the number and divide it by i\n        # If the number is divisible by i then we check for the rest of the number\n        if n%i==0:\n            # We check for the numbers in the range of 1 to i\n            for j in range(1,i):\n                # If the number is divisible by the rest of i\n                # We can check if it is a number which has two repeating digits\n                if (i%j==0):\n                    # If the number is divisible by 1 then\n                    # The number should have two digits\n                    if j==1:\n                        # If the number is divisible by 2 then\n                        # The number should have two digits\n                        if i==2:\n                            flag = 1\n                            break\n                        # If the number is divisible by 3 then\n                        # The number should have two digits\n                        if i==3:\n                            flag = 1\n                            break\n                        # If the number is divisible by 4 then\n                        # The number should have two digits\n                        if i==4:\n                            flag = 1\n                            break\n                    # If the number is divisible by the rest of i\n                    # Then we can check if the number has two repeating digits\n                    else:\n                        # If the number is divisible by the second factor of i then\n                        # The number should have two digits\n                        if n%(i//j)==0:\n                            flag = 1\n                            break\n                # If the number is not divisible by the rest of i\n                # Then we can check if the number has two repeating digits\n                else:\n                    # If the number is divisible by 1 then\n                    # The number should have two digits\n                    if j==1:\n                        # If the number is divisible by 2 then\n                        # The number should have two digits\n                        if i==2:\n                            flag = 1\n                            break\n                        # If the number is divisible by 3 then\n                        # The number should have two digits\n                        if i==3:\n                            flag = 1\n                            break\n                        # If the number is divisible by 4 then\n                        # The number should have two digits\n                        if i==4:\n                            flag = 1\n                            break\n                    # If the number is divisible by the rest of i\n                    # Then we can check if the number has two repeating digits\n                    else:\n                        # If the number is divisible by the second factor of i then\n                        # The number should have two digits\n                        if n%(i//j)==0:\n                            flag = 1\n                            break\n                # If the number is not divisible by any factor in the range of 1 to i\n                # Then we can check if the number has two repeating digits\n                else:\n                    # If the number is divisible by 1 then\n                    # The number should have two digits\n                    if j==1:\n                        # If the number is divisible by 2 then\n                        # The number should have two digits\n                        if i==2:\n                            flag = 1\n                            break\n                        # If the number is divisible by 3 then\n                        # The number should have two digits\n                        if i==3:\n                            flag = 1\n                            break\n                        # If the number is divisible by 4 then\n                        # The number should have two digits\n                        if i==4:\n                            flag = 1\n                            break\n                    # If the number is divisible by the rest of i\n                    # Then we can check if the number has two repeating digits\n                    else:\n                        # If the number is divisible by the second factor of i then\n                        # The number should have two digits\n                        if n%(i//j)==0:\n                            flag = 1\n                            break\n    if flag==1:\n        print(n, \"is an undulating number\")\n    else:\n        print(n, \"is not an undulating number\")\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    l = len(s)\n    if l % 2 == 0:\n        return False\n    for i in range(l):\n        if i % 2 == 0:\n            if int(s[i]) % 2!= 0:\n                return False\n        else:\n            if int(s[i]) % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    sum_left = 0\n    sum_right = 0\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    l = len(s)\n    sum = 0\n    for i in range(l):\n        sum = sum + int(s[i])\n    if (n%sum == 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (is_even(n) and is_odd(n+1)) or (is_odd(n) and is_even(n+1))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l=list(str(n))\n    for i in range(1,len(l)):\n        if int(l[i])==int(l[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b < 0:\n        return 1/power(a, -b)\n    elif b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a*power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # 1.\n    # if a == 0:\n    #     return 0\n    # else:\n    #     return a**b\n    # 2.\n    # if b == 0:\n    #     return 1\n    # else:\n    #     return a*power(a,b-1)\n    # 3.\n    # if b == 0:\n    #     return 1\n    # else:\n    #     return a*power(a,b-1)\n    # 4.\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return (a*power(a,b-1))\n    "
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b>0:\n        return a**b\n    elif b==0:\n        return 1\n    else:\n        return 1/a**(-b)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b < 0:\n        return 1/power(a,abs(b))\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_value = min(test_list, key=itemgetter(1))\n    return test_list.index(smallest_value)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = test_list[0]\n    for i in test_list:\n        if i[1] < index[1]:\n            index = i\n    return index\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[index_min][1]:\n            index_min = i\n    return index_min\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = min(test_list, key=itemgetter(1))\n    return min_val[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return (min(test_list, key=itemgetter(1))[0])\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in test_list:\n        if i[1] < minimum[1]:\n            minimum = i\n    return minimum\ndef index_minimum_with_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = itemgetter(1))\n    return test_list[0]\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    maximum = test_list[0]\n    for i in test_list:\n        if i[1] > maximum[1]:\n            maximum = i\n    return maximum\ndef index_maximum_with_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    test_list.sort(key = itemgetter(1), reverse = True)\n    return test_list[0]\ndef index_minimum_of_list(test_list):\n    '''\n    Given a list of numbers, write a function that returns the minimum value.\n    '''\n    minimum = test_list[0]\n    for i in test_list:\n        if i < minimum:\n            minimum = i\n    return minimum\ndef index_maximum_of_list(test_list):\n    '''\n    Given a list of numbers, write a function that returns the maximum value.\n    '''\n    maximum = test_list[0]\n    for i in test_list:\n        if i > maximum:\n            maximum = i\n    return maximum\ndef index_sum(test_list):\n    '''\n    Given a list of numbers, write a function that returns the sum of all of the numbers.\n    '''\n    sum = 0\n    for i in test_list:\n        sum = sum + i\n    return sum\ndef index_average(test_list):\n    '''\n    Given a list of numbers, write a function that returns the average of all of the numbers.\n    '''\n    sum = 0\n    for i in test_list:\n        sum = sum + i\n    return sum/len(test_list)\ndef index_median(test_list):\n    '''\n    Given a list of numbers, write a function that returns the median value.\n    '''\n    median_list = []\n    for i in test_list:\n        median_list.append(i)\n    median_list.sort()\n    if len(median_list)%2 == 0:\n        return (median_list[int(len(median_list)/2)] + median_list[int(len(median_list)/2 - 1)])/2\n    else:\n        return median_list[int(len(median_list)/2)]\ndef index_range(test_list):\n    '''\n    Given a list of numbers, write a function that returns the difference between the largest and smallest numbers.\n    '''\n    minimum = test_list[0]\n    maximum = test_list[0]\n    for i in test_list:\n        if i > maximum:\n            maximum = i\n        if i < minimum:\n            minimum = i\n    return maximum - minimum\ndef index_range_with_sort(test_list):\n    '''\n    Given a list of numbers, write a function that returns the difference between the largest and smallest numbers.\n    '''\n    test_list.sort()\n    return test_list[-1] - test_list[0]\ndef index_range_with_sort_loop(test_list):\n    '''\n    Given a list of numbers, write a function that returns the difference between the largest and smallest numbers.\n    '''\n    minimum = test_list[0]\n    maximum = test_list[0]\n    for i in test_list:\n        if i > maximum:\n            maximum = i\n        if i < minimum:\n            minimum = i\n    return maximum - minimum\ndef index_range_with_sort_loop_and_index(test_list):\n    '''\n    Given a list of numbers, write a function that returns the difference between the largest and smallest numbers.\n    '''\n    minimum = test_list[0]\n    maximum = test_list[0]\n    for i in test_list:\n        if i > maximum:\n            maximum = i\n        if i < minimum:\n            minimum = i\n    return (maximum, minimum)\ndef index_range_with_sort_and_index(test_list):\n    '''\n    Given a list of numbers, write a function that returns the difference between the largest and smallest numbers.\n    '''\n    test_list.sort()\n    return (test_list[-1], test_list[0])\ndef index_range_with_sort_and_index_loop(test_list):\n    '''\n    Given a list of numbers, write a function that returns the difference between the largest and smallest numbers.\n    '''\n    minimum = test_list[0]\n    maximum = test_list[0]\n    for i in test_list:\n        if i > maximum:\n            maximum = i\n        if i < minimum:\n            minimum = i\n    return (maximum, minimum)\ndef index_range_with_sort_and_index_loop_and_list(test_list):\n    '''\n    Given a list of numbers, write a function that returns the difference between the largest and smallest numbers.\n    '''\n    minimum = test_list[0]\n    maximum = test_list[0]\n    for i in test_list:\n        if i > maximum:\n            maximum = i\n        if i < minimum:\n            minimum = i\n    return (test_list, maximum, minimum)\ndef index_frequency(test_list):\n    '''\n    Given a list of items, write a function that returns a list of tuples, each tuple containing the item and the frequency it appears in the list.\n    '''\n    frequency_list = []\n    for i in test_list:\n        count = 0\n        for j in test_list:\n            if i == j:\n                count += 1\n        frequency_list.append((i, count))\n    return frequency_list\ndef index_frequency_count(test_list):\n    '''\n    Given a list of items, write a function that returns a list of tuples, each tuple containing the item and the frequency it appears in the list.\n    '''\n    frequency_list = []\n    for i in test_list:\n        count = 0\n        for j in test_list:\n            if i == j:\n                count += 1\n        frequency_list.append((i, count))\n    return count\ndef index_frequency_count_loop(test_list):\n    '''\n    Given a list of items, write a function that returns a list of tuples, each tuple containing the item and the frequency it appears in the list.\n    '''\n    frequency_list = []\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                count += 1\n        frequency_list.append((i, count))\n    return frequency_list\ndef index_frequency_count_loop_and_list(test_list):\n    '''\n    Given a list of items, write a function that returns a list of tuples, each tuple containing the item and the frequency it appears in the list.\n    '''\n    frequency_list = []\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                count += 1\n        frequency_list.append((i, count))\n    return (test_list, count)\ndef index_frequency_count_loop_and_list_multiple_results(test_list):\n    '''\n    Given a list of items, write a function that returns a list of tuples, each tuple containing the item and the frequency it appears in the list.\n    '''\n    frequency_list = []\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                count += 1\n        frequency_list.append((i, count))\n    return (frequency_list, count)\ndef index_frequency_count_loop_and_list_multipl"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(min(test_list, key=itemgetter(1)))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_len = len(test_list)\n    index_min = 0\n    for index in range(list_len):\n        if test_list[index] < test_list[index_min]:\n            index_min = index\n    return index_min\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(0)(min(test_list, key=itemgetter(1)))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_len=1000\n    for item in lst:\n        if len(item)<min_len:\n            min_len=len(item)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = len(lst)\n    min = lst[0]\n    for i in range(l):\n        if(len(lst[i]) < len(min)):\n            min = lst[i]\n    return len(min)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if type(lst) is not list:\n        return None\n    minLen = len(lst[0])\n    for i in lst:\n        if len(i) < minLen:\n            minLen = len(i)\n    return minLen\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum_length = 0\n    for lst in lst_list:\n        if len(lst) < minimum_length or minimum_length == 0:\n            minimum_length = len(lst)\n    return minimum_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # put your code here\n    return len(min(lst, key=len))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    for lst_el in lst:\n        if len(lst_el) > min_length:\n            min_length = len(lst_el)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min(len(l) for l in lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = 0\n    for i in lst:\n        if len(i) < l:\n            l = len(i)\n    return l\n    \ndef Find_Largest_List(lst):\n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    l = len(lst[0])\n    for i in lst:\n        if len(i) > l:\n            l = len(i)\n    return l\n    \ndef Count_Sub_Lists(lst):\n    '''\n    Write a python function to find the number of sub-lists in a list of lists.\n    '''\n    n = 0\n    for i in lst:\n        n += 1\n    return n\n    \ndef Longest_Element_Length(lst):\n    '''\n    Write a python function to find the length of the longest element in a list of lists.\n    '''\n    l = 0\n    for i in lst:\n        if len(i) > l:\n            l = len(i)\n    return l\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_len = []\n    for i in lst:\n        lst_len.append(len(i))\n    return min(lst_len)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n % 2 == 0:\n        return 2\n    else:\n        i = 3\n        count = 0\n        while(i <= n):\n            if n % i == 0:\n                count += 1\n            i += 2\n        return count\n    \ndef divisors_list(n):\n    '''\n    Write a python function to find the divisors of a given integer in a list.\n    '''\n    if n % 2 == 0:\n        return [2]\n    else:\n        i = 3\n        count = 0\n        l = []\n        while(i <= n):\n            if n % i == 0:\n                l.append(i)\n                count += 1\n            i += 2\n        return l\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    divisors = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n            if n/i!= i:\n                divisors.append(n/i)\n        i += 1\n    return divisors\n    \n    \n    \n    \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #total = 0\n    #for i in range(1,n+1):\n    #    if n%i == 0:\n    #        total += 1\n    #return total\n    return sum(1 for i in range(1,n+1) if n%i == 0)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if n / i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if(n%i == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if(n%i == 0):\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    s = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n/i == i:\n                s+=1\n            else:\n                s+=2\n    return s\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return len(set(i for i in range(1, n+1) if n % i == 0))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    try:\n        n = int(n)\n        if n <= 0:\n            return \"Number must be positive and greater than 0\"\n        divisor = 1\n        for x in range(2, n):\n            if n % x == 0:\n                divisor += 1\n        return divisor\n    except:\n        return \"Input must be integer\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for x in list1:\n        counts[x] = counts.get(x, 0) + 1\n    return counts\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    d = {}\n    for item in list1:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    list2 = []\n    for item in list1:\n        for element in item:\n            list2.append(element)\n    for item in list2:\n        dict1[item] = list2.count(item)\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = dict()\n    list2 = list()\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    for i in list2:\n        freq[i] = list1.count(i)\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        freq_dict[item] = list1.count(item)\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    import collections\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return dict(freq_dict)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all numbers in the list\n    numbers_mult = 1\n    for i in numbers:\n        numbers_mult *= i\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for x in numbers:\n        result *= x\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for n in numbers:\n        product *= n\n    return product/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiply(n):\n        product = 1\n        for i in n:\n            product *= i\n        return product/len(n)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total = total * x\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    mul = 1\n    for i in numbers:\n        mul *= i\n    return mul/length\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product = product * num\n    return product // len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = ''\n    while n!= 0:\n        binary = str(n%2) + binary\n        n = n//2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n%2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    result = ''\n    while n!= 0:\n        result += str(n % 2)\n        n = n // 2\n    return result[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\",\"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\") \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        raise Exception(\"Number should be a positive integer only!\")\n    if n == 0:\n        return \"0\"\n    else:\n        return (decimal_to_binary(n // 2) + str(n % 2))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # get binary string\n    binary = bin(n)\n    # remove the 0b and the 0s from binary string\n    # while we are at it, make all the binary string\n    # digits into integers\n    binary = str(binary)\n    # binary = binary[2:]\n    binary = binary[2:]\n    # remove leading 0s\n    while(len(binary) > 0 and binary[0] == '0'):\n        binary = binary[1:]\n    return binary\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    if s[::-1] == s:\n        return None\n    \n    n = len(s)\n    for i in range(n):\n        if s[i]!= s[n-1-i]:\n            a = s[0:i] + s[i+1:n]\n            b = s[0:n-1-i] + s[n-i:]\n            if int(a) > int(b):\n                return int(b)\n            else:\n                return int(a)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 99:\n        return 101\n    s = str(num)\n    length = len(s)\n    if length == 1:\n        return num * 10 + 1\n    if length == 2:\n        if s[0]!= '9':\n            return num * 10 + int(s[0]) + 1\n        else:\n            return num * 10 + int(s[1]) + 1\n    left, right = int(s[:length//2]), int(s[length//2:])\n    if left % 10 == 0:\n        return num * 10 + right + 1\n    else:\n        if right % 10 == 9:\n            return num * 10 + left + 1\n        else:\n            return num * 10 + left + 2\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #get input\n    num = int(input('Enter an integer: '))\n    #initiate list and counter\n    list_num = list(str(num))\n    list_num.reverse()\n    counter = 0\n    #loop through list to compare values\n    for index in range(0, len(list_num)):\n        if list_num[index]!= list_num[counter]:\n            list_num[counter], list_num[index] = list_num[index], list_num[counter]\n            counter += 1\n            break\n        else:\n            counter += 1\n    #create the answer\n    answer = ''\n    for i in range(0, len(list_num)):\n        answer += list_num[i]\n    answer = int(answer)\n    #print result\n    print(f'Next smallest palindrome of {num} is {answer}')\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # print('input number is ', num)\n    # print('input number is ', bin(num))\n    # print('input number is ', int(bin(num)[2:]))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    num_digits = len(str(num))\n    # print(num_digits)\n    num_digits_back = len(str(num))\n    # print(num_digits_back)\n    num_str = str(num)\n    while True:\n        # print(num_str)\n        if num_digits % 2!= 0:\n            num_digits = num_digits + 1\n            num_str = str(num)\n        else:\n            num_str = str(num)\n            break\n    # print(num_digits)\n    # print(num_digits_back)\n    # print(num_str)\n    # print(num_str[::-1])\n    if num_digits_back == 1:\n        if num_str[0] == \"9\":\n            # print(\"9\")\n            return num\n        else:\n            # print(\"9\")\n            return int(num_str + \"9\")\n    elif num_digits_back == 2:\n        # print(\"Here\")\n        if num_str[0] == \"9\":\n            # print(\"9\")\n            return int(num_str + \"9\" + \"9\")\n        elif num_str[0] == \"9\":\n            # print(\"8\")\n            return int(num_str + \"9\" + \"9\")\n        else:\n            # print(\"8\")\n            return int(num_str + \"9\" + \"9\")\n    elif num_digits_back == 3:\n        # print(\"Here\")\n        if num_str[0] == \"9\":\n            # print(\"9\")\n            return int(num_str + \"9\" + \"9\" + \"9\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\":\n            # print(\"8\")\n            return int(num_str + \"9\" + \"9\" + \"9\")\n        elif num_str[0] == \"9\":\n            # print(\"8\")\n            return int(num_str + \"9\" + \"9\" + \"8\")\n        else:\n            # print(\"8\")\n            return int(num_str + \"9\" + \"9\" + \"8\")\n    elif num_digits_back == 4:\n        # print(\"Here\")\n        if num_str[0] == \"9\":\n            # print(\"9\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\":\n            # print(\"8\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"8\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\" and num_str[2] == \"0\":\n            # print(\"7\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"7\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\":\n            # print(\"7\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"7\")\n        elif num_str[0] == \"9\":\n            # print(\"7\")\n            return int(num_str + \"9\" + \"9\" + \"8\" + \"7\")\n        else:\n            # print(\"7\")\n            return int(num_str + \"9\" + \"9\" + \"8\" + \"7\")\n    elif num_digits_back == 5:\n        # print(\"Here\")\n        if num_str[0] == \"9\":\n            # print(\"9\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"9\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\":\n            # print(\"8\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"8\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\" and num_str[2] == \"0\":\n            # print(\"7\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"7\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\":\n            # print(\"7\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"7\")\n        elif num_str[0] == \"9\":\n            # print(\"7\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"8\" + \"7\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\" and num_str[2] == \"0\":\n            # print(\"6\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"6\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\":\n            # print(\"6\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"6\")\n        elif num_str[0] == \"9\":\n            # print(\"6\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"8\" + \"6\")\n        else:\n            # print(\"6\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"8\" + \"6\")\n    elif num_digits_back == 6:\n        # print(\"Here\")\n        if num_str[0] == \"9\":\n            # print(\"9\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"9\" + \"9\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\":\n            # print(\"8\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"9\" + \"8\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\" and num_str[2] == \"0\":\n            # print(\"7\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"9\" + \"7\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\":\n            # print(\"7\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"9\" + \"7\")\n        elif num_str[0] == \"9\":\n            # print(\"7\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"9\" + \"8\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\" and num_str[2] == \"0\":\n            # print(\"6\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"9\" + \"6\")\n        elif num_str[0] == \"9\" and num_str[1] == \"0\":\n            # print(\"6\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"9\" + \"6\")\n        elif num_str[0] == \"9\":\n            # print(\"6\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"9\" + \"7\")\n        else:\n            # print(\"6\")\n            return int(num_str + \"9\" + \"9\" + \"9\" + \"9\" + \"9\" + \"7\")\n    elif num_digits_back == 7:\n        # print(\"Here\")\n        if num_str[0] == \"9\":\n            # print(\"9\")\n            return int(num_st"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num+1\n    while not is_palindrome(num):\n        num+=1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #take the input as an integer\n    num = str(num)\n    #get the number of digits\n    digits = len(num)\n    #if the input is 0, return 1\n    if digits == 0:\n        return 1\n    #get the next largest number\n    next_biggest = int(num[::-1]) + 1\n    #get the next smallest palindrome\n    next_smallest_palindrome = next_biggest - next_biggest % 10\n    #return the next smallest palindrome\n    return next_smallest_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # if num < 10, then we can take the num itself\n    if num < 10:\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    return_value = -1\n    if num % 10 == 0:\n        num -= 1\n    else:\n        while True:\n            num -= 1\n            if str(num) == str(num)[::-1]:\n                return_value = num\n                break\n    return return_value\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    num_length = len(str(num))\n    if num_length == 1:\n        return num\n    else:\n        next_num = int(str(num)[::-1])+1\n        if next_num > 9*num_length:\n            return -1\n        else:\n            for i in range(num_length):\n                if str(next_num)[i]!= str(num)[i]:\n                    break\n            return next_num*(10**(num_length-i-1))+int(str(next_num)[i:])\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr = sorted(arr)\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #O(n) time\n    #O(1) space\n    return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] > k:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    lo, hi = 0, len(arr)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if mid < arr[mid]:\n            lo = mid + 1\n        else:\n            hi = mid\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        pivot_idx = get_pivot_idx(arr, start, end)\n        pivot_val = arr[pivot_idx]\n        if k - 1 == pivot_idx:\n            return pivot_val\n        if k - 1 < pivot_idx:\n            end = pivot_idx - 1\n        else:\n            start = pivot_idx + 1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left, right = 0, len(arr)-1\n    while left < right:\n        pivot_idx = partition(arr, left, right)\n        if pivot_idx == k-1:\n            return arr[pivot_idx]\n        elif pivot_idx < k-1:\n            left = pivot_idx+1\n        else:\n            right = pivot_idx-1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start, end = 0, len(arr)-1\n    while start <= end:\n        middle = start + (end-start)//2\n        if middle + 1 == k:\n            return arr[middle]\n        elif middle + 1 < k:\n            start = middle + 1\n        else:\n            end = middle - 1\n    return -1"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low, high = 0, len(arr) - 1\n    \n    while low <= high:\n        pivot_index = partition(arr, low, high)\n        if pivot_index == k - 1:\n            return arr[pivot_index]\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n    \n    raise Exception('k out of bound')\n    \ndef partition(arr, low, high):\n    \n    # pick pivot_index randomly from arr[low:high+1]\n    pivot_index = low\n    # pivot_index = random.randint(low, high)\n    arr[low], arr[pivot_index] = arr[pivot_index], arr[low]\n    \n    pivot = arr[low]\n    # partition arr[low+1:high+1] into 2 parts,\n    # the left part will contain the elements smaller than pivot,\n    # the right part will contain the elements larger than pivot\n    # this is done by swapping the smaller element with the left element\n    # of the larger elements\n    i = low + 1\n    for j in range(i, high + 1):\n        if arr[j] < pivot:\n            arr[j], arr[i] = arr[i], arr[j]\n            i += 1\n    \n    arr[low], arr[i - 1] = arr[i - 1], arr[low]\n    return i - 1\n    \ndef quick_sort(arr):\n    \n    if len(arr) <= 1:\n        return arr\n    \n    # choose pivot as the last element of the array\n    pivot_index = len(arr) - 1\n    # choose pivot randomly from arr[low:high+1]\n    # pivot_index = random.randint(low, high)\n    \n    pivot = arr[pivot_index]\n    \n    # partition arr[low+1:high+1] into 2 parts,\n    # the left part will contain the elements smaller than pivot,\n    # the right part will contain the elements larger than pivot\n    # this is done by swapping the smaller element with the left element\n    # of the larger elements\n    i = 0\n    for j in range(i, pivot_index):\n        if arr[j] < pivot:\n            arr[j], arr[i] = arr[i], arr[j]\n            i += 1\n    \n    arr[i], arr[pivot_index] = arr[pivot_index], arr[i]\n    left = quick_sort(arr[:i])\n    right = quick_sort(arr[i + 1:])\n    return left + [pivot] + right\n    \ndef partition_all(arr, low, high):\n    \n    # pick pivot_index randomly from arr[low:high+1]\n    pivot_index = low\n    # pivot_index = random.randint(low, high)\n    arr[low], arr[pivot_index] = arr[pivot_index], arr[low]\n    \n    pivot = arr[low]\n    # partition arr[low+1:high+1] into 2 parts,\n    # the left part will contain the elements smaller than pivot,\n    # the right part will contain the elements larger than pivot\n    # this is done by swapping the smaller element with the left element\n    # of the larger elements\n    i = low + 1\n    for j in range(i, high + 1):\n        if arr[j] < pivot:\n            arr[j], arr[i] = arr[i], arr[j]\n            i += 1\n    \n    arr[low], arr[i - 1] = arr[i - 1], arr[low]\n    return i - 1\n    \ndef quick_sort_all(arr, low, high):\n    \n    if len(arr) <= 1:\n        return arr\n    \n    if low < high:\n        \n        # choose pivot as the last element of the array\n        pivot_index = high\n        # choose pivot randomly from arr[low:high+1]\n        # pivot_index = random.randint(low, high)\n        \n        pivot = arr[pivot_index]\n        \n        # partition arr[low+1:high+1] into 2 parts,\n        # the left part will contain the elements smaller than pivot,\n        # the right part will contain the elements larger than pivot\n        # this is done by swapping the smaller element with the left element\n        # of the larger elements\n        i = low\n        for j in range(i, pivot_index):\n            if arr[j] < pivot:\n                arr[j], arr[i] = arr[i], arr[j]\n                i += 1\n        \n        arr[i], arr[pivot_index] = arr[pivot_index], arr[i]\n        left = quick_sort_all(arr, low, i - 1)\n        right = quick_sort_all(arr, i + 1, high)\n        return left + [pivot] + right\n    \ndef quick_sort_all_inplace(arr, low, high):\n    \n    if len(arr) <= 1:\n        return arr\n    \n    if low < high:\n        \n        # choose pivot as the last element of the array\n        pivot_index = high\n        # choose pivot randomly from arr[low:high+1]\n        # pivot_index = random.randint(low, high)\n        \n        pivot = arr[pivot_index]\n        \n        # partition arr[low+1:high+1] into 2 parts,\n        # the left part will contain the elements smaller than pivot,\n        # the right part will contain the elements larger than pivot\n        # this is done by swapping the smaller element with the left element\n        # of the larger elements\n        i = low\n        for j in range(i, pivot_index):\n            if arr[j] < pivot:\n                arr[j], arr[i] = arr[i], arr[j]\n                i += 1\n        \n        arr[i], arr[pivot_index] = arr[pivot_index], arr[i]\n        left = quick_sort_all_inplace(arr, low, i - 1)\n        right = quick_sort_all_inplace(arr, i + 1, high)\n        return left + [pivot] + right\n        \ndef kth_largest_element(arr, k):\n    \n    low, high = 0, len(arr) - 1\n    \n    while low <= high:\n        pivot_index = partition(arr, low, high)\n        if pivot_index == k - 1:\n            return arr[pivot_index]\n        elif pivot_index < k - 1:\n            low = pivot_index + 1\n        else:\n            high = pivot_index - 1\n    \n    raise Exception('k out of bound')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    arr = list(word)\n    arr[0] = arr[0].upper()\n    for i in range(1, len(arr)):\n        if arr[i].isupper():\n            arr[i] = \"_\" + arr[i].lower()\n        else:\n            arr[i] = arr[i].lower()\n    return ''.join(arr)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_', '')\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #result = ''.join([word[0].upper(), word[1:]])\n    result = list(word)\n    result[0] = result[0].upper()\n    return \"\".join(result)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    list_1 = []\n    list_1[:0] = word\n    list_2 = []\n    for i in range(len(list_1)):\n        if i == 0:\n            list_2.append(list_1[i])\n        elif i == len(list_1) - 1:\n            list_2.append(list_1[i].capitalize())\n        else:\n            list_2.append(list_1[i].capitalize())\n    return ''.join(list_2)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(i.capitalize() for i in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    words = word.split('_')\n    for word in words:\n        result += word.title()\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel += word[i].upper()\n        elif word[i]!= '_':\n            camel += word[i].upper()\n        else:\n            camel += word[i]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Your code here\n    result = []\n    flag = False\n    for i in word:\n        if i == '_' or flag:\n            flag = True\n            if i == '_':\n                result.append(i.upper())\n            else:\n                result.append(i)\n        else:\n            result.append(i.lower())\n    result = ''.join(result)\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # start writing your code here\n    lis = list(word)\n    length = len(lis)\n    i = 0\n    while(i<length):\n        if lis[i] == '_':\n            lis[i+1] = lis[i+1].upper()\n            i = i + 1\n        i = i + 1\n    return \"\".join(lis)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 1: \n    count=0\n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    return count\n    \ndef Eulerian_path(n, m):\n    '''\n    Write a function to find the Eulerian path in a graph with n nodes \n    and m edges.\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 2: \n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    count=0\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    #step 3: \n    # we need to find a Eulerian path on this graph,\n    # so we must check if the graph has an Eulerian cycle on it.\n    # if it does, then we can find an Eulerian path on it by Eulerian_cycle(n, m).\n    if count==n-1:\n        return Eulerian_cycle(n, m)\n    if count>n-1:\n        return 0\n    #if the graph doesn't have an Eulerian cycle on it,\n    # then we can't find an Eulerian path on it.\n    else:\n        return 0\n    \ndef Eulerian_cycle(n, m):\n    '''\n    Write a function to find an Eulerian cycle on a graph with n nodes \n    and m edges.\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 4: \n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    count=0\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    #step 5: \n    # we need to find a Eulerian cycle on this graph,\n    # so we must check if the graph has an Eulerian path on it.\n    # if it does, then we can find an Eulerian path on it by Eulerian_path(n, m).\n    if count==n-1:\n        return Eulerian_path(n, m)\n    #if the graph doesn't have an Eulerian cycle on it,\n    # then we can't find an Eulerian path on it.\n    else:\n        return 0\n    \ndef Eulerian_cycle_and_path(n, m):\n    '''\n    Write a function to find an Eulerian cycle and path on a graph with n nodes \n    and m edges.\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 4: \n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    count=0\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    #step 5: \n    # we need to find an Eulerian cycle on this graph,\n    # so we must check if the graph has an Eulerian path on it.\n    # if it does, then we can find an Eulerian path on it by Eulerian_path(n, m).\n    if count==n-1:\n        return Eulerian_path(n, m)\n    #if the graph doesn't have an Eulerian cycle on it,\n    # then we can't find an Eulerian path on it.\n    else:\n        return 0\n    \ndef Eulerian_path_to_cycle(n, m):\n    '''\n    Write a function to find an Eulerian cycle and path on a graph with n nodes \n    and m edges.\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 4: \n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    count=0\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    #step 5: \n    # we need to find an Eulerian cycle on this graph,\n    # so we must check if the graph has an Eulerian path on it.\n    # if it does, then we can find an Eulerian path on it by Eulerian_path(n, m).\n    if count==n-1:\n        return Eulerian_path(n, m)\n    #if the graph doesn't have an Eulerian cycle on it,\n    # then we can't find an Eulerian path on it.\n    else:\n        return 0\n        \ndef Eulerian_path_to_cycle(n, m):\n    '''\n    Write a function to find an Eulerian cycle and path on a graph with n nodes \n    and m edges.\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 4: \n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    count=0\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    #step 5: \n    # we need to find an Eulerian cycle on this graph,\n    # so we must check if the graph has an Eulerian path on it.\n    # if it does, then we can find an Eulerian path on it by Eulerian_path(n, m).\n    if count==n-1:\n        return Eulerian_path(n, m)\n    #if the graph doesn't have an Eulerian cycle on it,\n    # then we can't find an Eulerian path on it.\n    else:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if m == 1:\n        return n\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    if n == 1 and m == 0:\n        return 2\n    if n == 0 and m == 1:\n        return 3\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case\n    if n == m:\n        return 1\n    elif n == 0:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    else:\n        return n ** m\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a += (i*j) % (10**9 + 7)\n    return a % (10**9 + 7)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # assuming n >= m \n    if n == m: \n        if n % 2 == 0: \n            return 2**(n//2) \n        else: \n            return 0\n    elif m > n: \n        return eulerian_num(m, n) \n    else: \n        # if m is even then we have 2 choices \n        # (a) Remove last vertex and all edges connected to it \n        # (b) Delete last edge and connect it to a new vertex \n        if m % 2 == 0: \n            return eulerian_num(n, m//2) + eulerian_num(n, m//2) \n        # if m is odd \n        else: \n            return eulerian_num(n, m - 1) + eulerian_num(n - 1, m) \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        return 0\n    if n == m:\n        return 1\n    if n > m:\n        return eulerian_num(m, n) + eulerian_num(m - 1, n - m)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    n, m = n % m, m\n    return m * (n - 1) + eulerian_num(n, m)\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*m - (n+m)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Fill in this function.\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_of_lists = []\n    for i in input_list:\n        if len(i) > 1:\n            list_of_lists.append(sorted(i))\n        else:\n            list_of_lists.append(i)\n    return list_of_lists\n    \ndef merge_lists(list_of_lists):\n    '''\n    Write a function to merge multiple lists into a single list.\n    '''\n    list_to_return = []\n    for i in list_of_lists:\n        list_to_return.extend(i)\n    return list_to_return\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a list of all possible sublists\n    sublists = []\n    for x in range(len(input_list) + 1):\n        for y in range(len(input_list) + 1):\n            sublists.append(input_list[x:y])\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sublist.sort()\n        sorted_list.append(sublist)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # Using default sorting algorithm\n    # To pass this test, you need to sort lists in alphabetical order (sorted(l) will return a list of sorted elements)\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # add code here\n    return sum(1 for elem in lst if elem)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    sum = 0\n    for i in lst:\n        if i == True:\n            sum = sum+1\n    print(\"True elements in the list are\", sum)\n    return\ncount([1, False, 2, True, True, False])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count+=1\n    return count\nprint(count([False, False, False, False, False, False, False, False, False, False]))\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if isinstance(i, bool)])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return [test_list, test_tup]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(\"\\n[!] Appending the list to tuples\")\n    print(\"[!] The list to append is: {}\".format(test_list))\n    print(\"[!] The tuples to append to are: {}\".format(test_tup))\n    for i in range(len(test_tup)):\n        test_tup[i] = list(test_tup[i])\n        test_tup[i].append(test_list)\n        print(\"[!] The appended tuple is: {}\".format(test_tup[i]))\n    print(\"[!] Done!\")\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #raise NotImplementedError\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result_tup = ()\n    for item in test_list:\n        result_tup += (item,)\n    return result_tup + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + (test_list,)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + test_tup\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = []\n    result.append(test_list)\n    result.append(test_tup)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(\"Appending lists...\")\n    test_tup += tuple(test_list)\n    print(\"List appended.\")\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(2)\n    test_tup = tuple(test_list)\n    print(test_tup)\n    \nadd_lists(test_list, test_tup)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Solution 1\n    # return sorted(heapq.merge(sorted(num1),sorted(num2),sorted(num3)))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    p1 = 0\n    p2 = 0\n    p3 = 0\n    n1 = len(num1)\n    n2 = len(num2)\n    n3 = len(num3)\n    ans = [None]*(n1+n2+n3)\n    while p1<n1 and p2<n2 and p3<n3:\n        if num1[p1]<=num2[p2] and num1[p1]<=num3[p3]:\n            ans[p1+p2+p3] = num1[p1]\n            p1+=1\n        elif num2[p2]<=num1[p1] and num2[p2]<=num3[p3]:\n            ans[p1+p2+p3] = num2[p2]\n            p2+=1\n        else:\n            ans[p1+p2+p3] = num3[p3]\n            p3+=1\n    while p1<n1:\n        ans[p1+p2+p3] = num1[p1]\n        p1+=1\n    while p2<n2:\n        ans[p1+p2+p3] = num2[p2]\n        p2+=1\n    while p3<n3:\n        ans[p1+p2+p3] = num3[p3]\n        p3+=1\n    return ans\n    \ndef rearrange_digits(input_list):\n    '''\n    You are given a list of four integers and must return a new list with the digits of the four integers in the exact same order, with zeros between non-zero digits.\n    '''\n    n = len(input_list)\n    if n<4:\n        return []\n    elif n==4:\n        return merge_sorted_list(input_list,input_list,input_list)\n    else:\n        half = n//2\n        left = []\n        right = []\n        for i in range(half):\n            left.append(input_list[i])\n        for i in range(half,n):\n            right.append(input_list[i])\n        left = rearrange_digits(left)\n        right = rearrange_digits(right)\n        return merge_sorted_list(left,right,[0]*(n-len(left)-len(right)))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=num1\n    list2=num2\n    list3=num3\n    merged_list=[]\n    for i in range(0,len(list1)+len(list2)+len(list3)):\n        if len(list1)==0:\n            if len(list2)==0:\n                if len(list3)==0:\n                    break\n                else:\n                    merged_list.append(list3[0])\n                    del list3[0]\n            else:\n                merged_list.append(list2[0])\n                del list2[0]\n        elif len(list2)==0:\n            merged_list.append(list1[0])\n            del list1[0]\n        elif list1[0]<list2[0]:\n            merged_list.append(list1[0])\n            del list1[0]\n        else:\n            merged_list.append(list2[0])\n            del list2[0]\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    nums_list=[]\n    if(num1 is None and num2 is None and num3 is None):\n        return nums_list\n    nums_list.extend(num1)\n    nums_list.extend(num2)\n    nums_list.extend(num3)\n    return sorted(nums_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Approach 1 - using heapq\n    # heapq.heappush(mylist, 4)\n    # heapq.heappush(mylist, 2)\n    # heapq.heappush(mylist, 5)\n    # heapq.heappush(mylist, 1)\n    # heapq.heappop(mylist)\n    # print(mylist)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num1:\n        return num2\n    if not num2:\n        return num3\n    if not num3:\n        return num1\n    start = end = 0\n    result = []\n    while True:\n        if end == len(num1) and end == len(num2) and end == len(num3):\n            result.extend(num1[start:])\n            result.extend(num2[start:])\n            result.extend(num3[start:])\n            break\n        if not num1:\n            result.extend(num2[start:])\n            result.extend(num3[start:])\n            break\n        if not num2:\n            result.extend(num1[start:])\n            result.extend(num3[start:])\n            break\n        if not num3:\n            result.extend(num1[start:])\n            result.extend(num2[start:])\n            break\n        if num1[start] <= num2[end] and num1[start] <= num3[end]:\n            result.append(num1[start])\n            start += 1\n        elif num2[start] <= num1[end] and num2[start] <= num3[end]:\n            result.append(num2[start])\n            start += 1\n        else:\n            result.append(num3[start])\n            start += 1\n        if end == len(num1):\n            result.extend(num2[start:])\n            break\n        if end == len(num2):\n            result.extend(num1[start:])\n            break\n        if end == len(num3):\n            result.extend(num1[start:])\n            result.extend(num2[start:])\n            break\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = [0 for i in range(len(num1) + len(num2) + len(num3))]\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            sorted_list[i+j+k] = num1[i]\n            i+=1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            sorted_list[i+j+k] = num2[j]\n            j+=1\n        else:\n            sorted_list[i+j+k] = num3[k]\n            k+=1\n    while i < len(num1):\n        sorted_list[i+j+k] = num1[i]\n        i+=1\n    while j < len(num2):\n        sorted_list[i+j+k] = num2[j]\n        j+=1\n    while k < len(num3):\n        sorted_list[i+j+k] = num3[k]\n        k+=1\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if(num1==None and num2==None and num3==None):\n        return None\n    else:\n        li=[]\n        i=0\n        j=0\n        k=0\n        while(i<len(num1) and j<len(num2) and k<len(num3)):\n            if(num1[i]<num2[j] and num1[i]<num3[k]):\n                li.append(num1[i])\n                i+=1\n            elif(num2[j]<num3[k] and num2[j]<num1[i]):\n                li.append(num2[j])\n                j+=1\n            else:\n                li.append(num3[k])\n                k+=1\n        while(i<len(num1)):\n            li.append(num1[i])\n            i+=1\n        while(j<len(num2)):\n            li.append(num2[j])\n            j+=1\n        while(k<len(num3)):\n            li.append(num3[k])\n            k+=1\n    return li\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    final_list = []\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            final_list.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            final_list.append(heapq.heappop(num2))\n        else:\n            final_list.append(heapq.heappop(num3))\n    if len(num1) > 0:\n        final_list += num1\n    elif len(num2) > 0:\n        final_list += num2\n    elif len(num3) > 0:\n        final_list += num3\n    return final_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create an empty list\n    sorted_list = []\n    # appending to sorted list by comparing the smallest value of all three lists.\n    sorted_list += [min(num1[0],num2[0],num3[0])]\n    # return sorted list\n    return sorted_list\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(0,len(s)):\n            if (s[j] == '1'):\n                count+=1\n        temp = s\n        s = s[1:] + s[0]\n        s = s[-1] + s[:-1]\n        \n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = len(s)\n    rotations = n%l\n    s = s[:rotations] + s[:l-rotations:]\n    return s.count(\"1\")\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    r = []\n    for i in range(len(s)):\n        r.append(s[i:]+s[:i])\n    r = list(set(r))\n    r.sort()\n    return r[n]\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def Odd_value_rotations(s,n):\n        count=0\n        if(n==0):\n            return 0\n        elif(n<0):\n            return -1\n        elif(n%2!=0):\n            return n\n        else:\n            for i in range(len(s)):\n                if(i+n>len(s)-1):\n                    x=n%len(s)\n                    count+=1\n                else:\n                    count+=1\n            return count\n    print(Odd_value_rotations(s,n))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary = \"0b\"\n    for i in range(len(s)):\n        binary += s[i]\n    binary = binary[2:]\n    print(binary)\n    binary = binary[::-1]\n    print(binary)\n    binary = int(binary,2)\n    print(binary)\n    print(type(binary))\n    print((binary%2))\n    odd = n%2\n    if odd == 1:\n        return 1\n    else:\n        return 0\n    \ns = '101010'\nn = 3\nprint(odd_Equivalent(s,n))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def toBinary(n): \n        '''\n        Convert a number to binary string.\n        '''\n        return format(n, '#010b')[2:]\n    \n    # if input is a string then convert it to a binary string.\n    if type(s) is str:\n        s = int(s, 2)\n    \n    # make a copy of the binary string.\n    s_copy = s\n    \n    for i in range(n): \n        # add the binary string the given number of times.\n        s_copy = s_copy + s_copy\n    \n    # return the number of 1 in the binary string.\n    return (s_copy).count(\"1\")\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return len(set([s[i:]+s[:i] for i in range(n)]))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    cnt = 0\n    for i in range(n):\n        if int(s[i])%2==1:\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import math\n    # code goes here \n    a=math.floor(n/2)\n    b=s[:n]\n    c=s[n:]\n    d=b[::-1]\n    e=c[::-1]\n    f=d+e\n    g=list(f)\n    h=len(g)\n    if(n%2==0):\n        return 0\n    elif(h%2!=0):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize empty list\n    result = []\n    # loop through the list\n    for l in nestedlist:\n        # if the length of list is greater than 1\n        if len(l) > 1:\n            # loop through the sublists\n            for sublist in l:\n                # loop through the sublists\n                for j in sublist:\n                    # if element in sublist is not in result\n                    if j not in result:\n                        # append element in sublist to result\n                        result.append(j)\n        # if list is length of 1\n        elif len(l) == 1:\n            # loop through the list\n            for j in l:\n                # if element in list is not in result\n                if j not in result:\n                    # append element in list to result\n                    result.append(j)\n    # return result\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def flatten(l):\n        result = []\n        for item in l:\n            if type(item) == list:\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    set1 = set(flatten(nestedlist))\n    return set1\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common(nestedlist):\n        if nestedlist[0] == nestedlist[1]:\n            return nestedlist[0]\n        elif nestedlist[0]!= nestedlist[1]:\n            return nestedlist[0]\n        else:\n            return common(nestedlist[1:])\n    if isinstance(nestedlist, list):\n        return common(nestedlist)\n    else:\n        return None\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    def compare_lists(l1, l2):\n        for i in l1:\n            for j in l2:\n                if i == j:\n                    common_elements.append(i)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in nestedlist:\n        if type(i) is list:\n            common_in_nested_lists(i)\n    return(list(set.intersection(*map(set, nestedlist))))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist == []:\n        return []\n    if isinstance(nestedlist[0], list):\n        common_elem = common_in_nested_lists(nestedlist[0])\n        for inner_list in nestedlist[1:]:\n            common_elem = list(set(common_elem).intersection(common_in_nested_lists(inner_list)))\n    else:\n        common_elem = nestedlist[0]\n        for i in range(1, len(nestedlist)):\n            common_elem = list(set(common_elem).intersection(nestedlist[i]))\n    return common_elem\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    import numpy as np\n    in_nested_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if np.array_equal(nestedlist[i][j], nestedlist[i][0]):\n                in_nested_list.append(nestedlist[i][j])\n    print(in_nested_list)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    commonlist=[]\n    for nestedlist in nestedlist:\n        for value in nestedlist:\n            if value not in commonlist:\n                commonlist.append(value)\n    return commonlist\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    nested_list = [list(i) for i in nestedlist]\n    for i in nested_list[0]:\n        if i in nested_list[1]:\n            common_list.append(i)\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for item in nestedlist:\n        result = list(set(result)&set(item))\n    return result"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text[0] == '-':\n        return text[1:].isdigit()\n    else:\n        return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = []\n    for i in list1:\n        if len(i) == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    if False in result:\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if i:\n            empty = False\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if i!= {}:\n            empty = False\n            break\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in range(0,len(list1)):\n            if list1[i].keys():\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    print(\"This function will check if all dictionaries are empty or not.\")\n    empty_list = []\n    for dict1 in list1:\n        if dict1 == {}:\n            empty_list.append(True)\n        else:\n            empty_list.append(False)\n    if False in empty_list:\n        print(\"Not all dictionaries are empty. Try again.\")\n    elif False not in empty_list:\n        print(\"All dictionaries are empty.\")\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list = []\n    for i in list1:\n        if i:\n            empty_list.append(False)\n        else:\n            empty_list.append(True)\n    if all(empty_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list = []\n    for i in list1:\n        if bool(i):\n            return False\n        empty_list.append(bool(i))\n    if False in empty_list:\n        return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(type(item) == dict for item in list1):\n        print(\"All dictionaries in the list are empty.\")\n    else:\n        print(\"At least one dictionary in the list is not empty.\")\nempty_dit([{}, {}, {}])\nempty_dit([{1,2}, {}, {}])\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty=[]\n    for i in range(len(list1)):\n        if type(list1[i]) == dict:\n            if len(list1[i])==0:\n                empty.append(1)\n            else:\n                empty.append(0)\n    if sum(empty)==len(empty):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    str_num = ''\n    for num in nums:\n        str_num += str(num)\n    return int(str_num)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n    \ndef find_product(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the product of the list.\n    '''\n    return reduce(lambda x,y:x*y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(n) for n in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(n) for n in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Return sum of tuples\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(list(map(str, nums))))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    tuple_to_int_object = 0\n    for number in nums:\n        tuple_to_int_object *= 10\n        tuple_to_int_object += number\n    return tuple_to_int_object\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res *= 10\n        res += num\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] * (10**(len(nums) - 1)) + tuple_to_int(nums[1:])\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    #return [list(map(float, sublist)) for sublist in test_list]\n    return [list(map(float, sublist)) for sublist in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            float_list.append(list_to_float(i))\n        elif isinstance(i, int) or isinstance(i, float):\n            float_list.append(float(i))\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        try:\n            result.append(float(item))\n        except ValueError:\n            pass\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = [float(i) for i in test_list]\n    return float_list\n    \ndef list_to_int(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to integers.\n    '''\n    int_list = [int(i) for i in test_list]\n    return int_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Converting to float\n    # test_list = [1, '1.0', '1.5', '1.2', '1.7', '1.3', '1.9', '1.4', '1.1', '1.6']\n    \n    for i in range(0, len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            continue\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append([float(x) for x in i])\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return float(test_list)\n    except ValueError:\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # return [float(item) for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_string = string.split(' ')\n    return list_of_string\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(\" \")\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    dict_element = dict()\n    for i in range(len(arr)):\n        if arr[i] in dict_element:\n            dict_element[arr[i]] += 1\n        else:\n            dict_element[arr[i]] = 1\n    for k,v in dict_element.items():\n        if v == 1:\n            return k\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr or len(arr)<=1:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr = sorted(arr)\n    for num in arr:\n        if arr.count(num) == 1:\n            return num\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    i = 1\n    while i < len(arr):\n        if arr[i] == arr[i-1]:\n            i += 2\n        else:\n            return arr[i-1]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None:\n        return\n    arr.sort()\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n    if arr[0]!= arr[1]:\n        return arr[0]\n    if arr[-1]!= arr[-2]:\n        return arr[-1]\n    \n    for i in range(1, n-1):\n        if arr[i]!= arr[i+1] and arr[i]!= arr[i-1]:\n            return arr[i]\n    return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # time complexity: O(n)\n    # space complexity: O(1)\n    prev_elem = -1\n    for elem in arr:\n        if elem == prev_elem:\n            prev_elem = -1\n        else:\n            prev_elem = elem\n    return prev_elem\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    \n    while i <= j:\n        mid = i + (j - i) // 2\n        if mid == arr[mid]:\n            i = mid + 1\n        else:\n            if mid == 0 or mid == len(arr) - 1:\n                return arr[mid]\n            if arr[mid - 1] == arr[mid]:\n                j = mid - 2\n            else:\n                i = mid + 1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    n = len(arr)\n    i = 0\n    j = n-1\n    mid = 0\n    while i <= j:\n        mid = (i+j)//2\n        if mid == 0 and arr[mid] == arr[mid+1]:\n            mid+=1\n            i=mid+1\n        elif mid == n-1 and arr[mid] == arr[mid-1]:\n            mid-=1\n            j=mid-1\n        elif arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]:\n            return arr[mid]\n        elif arr[mid] == arr[mid+1]:\n            j = mid -1\n        elif arr[mid] == arr[mid-1]:\n            i = mid + 1\n        else:\n            return arr[mid]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    for i in range(0,len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n    return arr[len(arr)-1]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # My approach is to create a new list of tuples from the given list and then sort them, then itterate through each tuple. At each tuple, find the minimum and maximum number in the tuple and return the product of the two numbers.\n    # If the maximum and minimum number are the same, just return the sum of the two numbers.\n    \n    # Make a copy of the original list\n    new_list = list1\n    \n    # Get the length of the original list and create a variable to store the length\n    len_list = len(new_list)\n    \n    # Create a list of tuples, then sort the list\n    tuples = [(new_list[i], new_list[i + 1]) for i in range(0, len_list, 2)]\n    tuples.sort(key = lambda x: (x[1], x[0]))\n    \n    # Iterate through the list of tuples\n    for tuples_tuple in tuples:\n        \n        # Create a variable to store the minimum and maximum numbers within each tuple\n        tuple_min = min(tuples_tuple)\n        tuple_max = max(tuples_tuple)\n        \n        # Find the product of the two numbers in each tuple\n        product = tuple_min * tuple_max\n        \n        # Return the maximum product found\n        return product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    greatest_product = 0\n    for i in list1:\n        for j in i:\n            product = i[0] * i[1] * i[2]\n            if product > greatest_product:\n                greatest_product = product\n                tuples = (i)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_val = 0\n    tup_list = []\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import functools\n    max_prod = functools.reduce(lambda x, y: x*y, list1)\n    for i in range(len(list1)-1):\n        if list1[i]*list1[i+1] > max_prod:\n            max_prod = list1[i]*list1[i+1]\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maximum = 0\n    for i in range(len(list1)):\n        if i+1 < len(list1):\n            if list1[i]*list1[i+1] > maximum:\n                maximum = list1[i]*list1[i+1]\n    return maximum\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 1\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            a = list1[i][0] * list1[i][1]\n            b = list1[j][0] * list1[j][1]\n            if max(a,b) > max_prod:\n                max_prod = max(a,b)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in list1:\n        for j in list1:\n            if j == i:\n                continue\n            if i[0]*j[0] > max_prod:\n                max_prod = i[0]*j[0]\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    greatest_product = 0\n    for x in range(0, len(list1), 2):\n        product = 1\n        for i in range(0, 2):\n            product *= list1[x + i]\n        greatest_product = max(greatest_product, product)\n    return greatest_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if len(list1[i]) == len(list1[j]):\n                prod = 1\n                for m in range(len(list1[i])):\n                    prod *= abs(list1[i][m] - list1[j][m])\n                return prod\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[j][0] > max_product:\n                max_product = list1[i][0]*list1[j][0]\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s = 0\n    for x in range(2,limit):\n        if x in amicable_numbers:\n            s += x\n    return s\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for i in range(1, limit):\n        x = sum_of_divisors(i)\n        y = sum_of_divisors(x)\n        if i == y and i!= x:\n            result += i\n        else:\n            pass\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    tot = 0\n    for i in range(2, limit):\n        # if sum of proper divisors of i is equal to i, then it is amicable\n        if is_amicable_number(i):\n            tot += i\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Note: We don't want the sum to start at zero because of the single edge case\n    # where the sum of two amicable numbers is equal to the original sum of both\n    # of the numbers.\n    # Ex: For example, the sum of 2 and 3 is 5, but the sum of 2 and 2 is 2.\n    \n    # Amicable numbers are numbers that result in a number equal to the sum of its\n    # individual digits.\n    # Eg: For example, the sum of numbers (77, 707) is equal to the sum of its\n    # individual digits (11 + 77 + 7 + 707 = 511)\n    # Amicable numbers with more than 2 digits can be broken into smaller numbers\n    # and summed for the result.\n    # Eg: The sum of (1, 2, 3, 4, 5, 6, 7, 8, 9) is equal to the sum of its\n    # individual digits (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45)\n    # This is because, (1, 2, 3, 4, 5, 6, 7, 8, 9) = (1 + 2 + 3 + 4 + 5 + 6 + 7 +\n    # 8 + 9 = 45)\n    \n    # Step 1: Initialise the sum to 0\n    \n    # Step 2: Initialise a set of amicable numbers to an empty set\n    \n    # Step 3: Iterate from 1 to limit\n    \n    # Step 4: If limit is not within the amicable numbers set,\n    # add the limit to the sum.\n    \n    # Step 5: Find the sum of the digits of limit.\n    # Eg: The sum of the digits for 35 is: (1 + 3 + 5) = 8\n    \n    # Step 6: If limit is not in the amicable numbers set, add it.\n    # Otherwise, if limit is not in the amicable numbers set and its\n    # sum of digits equals limit, add it to the amicable numbers set.\n    # Eg: For 35, it is not in the amicable numbers set, and the sum of the\n    # digits is 8. So add 35 to the set of amicable numbers.\n    # For 35, it is not in the amicable numbers set, and the sum of the digits\n    # is 8, but the sum of the digits of 8 is 8. So add 8 to the amicable numbers\n    # set.\n    # Eg: For 8, it is not in the amicable numbers set, and the sum of the digits\n    # is 8. So add 8 to the amicable numbers set.\n    \n    # Step 7: If limit is in the amicable numbers set, return the sum of the\n    # amicable numbers set.\n    \n    # Step 8: If limit is in the amicable numbers set, return the sum of the\n    # amicable numbers set.\n    \n    # Step 9: Return the sum of the amicable numbers set.\n    \n    # Step 10: Return the sum of the amicable numbers set.\n    \n    \n    # Step 1: Initialise the sum to 0\n    sum_of_amicable_numbers = 0\n    \n    # Step 2: Initialise a set of amicable numbers to an empty set\n    amicable_numbers = set()\n    \n    # Step 3: Iterate from 1 to limit\n    for number in range(1, limit + 1):\n        \n        # Step 4: If limit is not within the amicable numbers set,\n        # add the limit to the sum.\n        if number not in amicable_numbers:\n            sum_of_amicable_numbers += number\n        \n        # Step 5: Find the sum of the digits of limit.\n        # Eg: The sum of the digits for 35 is: (1 + 3 + 5) = 8\n        sum_of_digits = sum([int(digit) for digit in str(number)])\n        \n        # Step 6: If limit is not in the amicable numbers set, add it.\n        # Otherwise, if limit is not in the amicable numbers set and its\n        # sum of digits equals limit, add it to the amicable numbers set.\n        # Eg: For 35, it is not in the amicable numbers set, and the sum of the\n        # digits is 8. So add 35 to the set of amicable numbers.\n        # For 35, it is not in the amicable numbers set, and the sum of the digits\n        # is 8, but the sum of the digits of 8 is 8. So add 8 to the amicable numbers\n        # set.\n        # Eg: For 8, it is not in the amicable numbers set, and the sum of the digits\n        # is 8. So add 8 to the amicable numbers set.\n        if sum_of_digits == number:\n            amicable_numbers.add(number)\n        if sum_of_digits!= number:\n            if sum_of_digits not in amicable_numbers:\n                amicable_numbers.add(sum_of_digits)\n        \n        # Step 7: If limit is in the amicable numbers set, return the sum of the\n        # amicable numbers set.\n        if number in amicable_numbers:\n            return sum_of_amicable_numbers\n    \n    # Step 8: Return the sum of the amicable numbers set.\n    return sum_of_amicable_numbers\n    \n    \ndef amicable_numbers_sum_2(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Note: We don't want the sum to start at zero because of the single edge case\n    # where the sum of two amicable numbers is equal to the original sum of both\n    # of the numbers.\n    # Ex: For example, the sum of 2 and 3 is 5, but the sum of 2 and 2 is 2.\n    \n    # Amicable numbers are numbers that result in a number equal to the sum of its\n    # individual digits.\n    # Eg: For example, the sum of numbers (77, 707) is equal to the sum of its\n    # individual digits (11 + 77 + 7 + 707 = 511)\n    # Amicable numbers with more than 2 digits can be broken into smaller numbers\n    # and summed for the result.\n    # Eg: The sum of (1, 2, 3, 4, 5, 6, 7, 8, 9) is equal to the sum of its\n    # individual digits (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45)\n    # This is because, (1, 2, 3, 4, 5, 6, 7, 8, 9) = (1 + 2 + 3 + 4 + 5 + 6 + 7 +\n    # 8 + 9 = 45)\n    \n    # Step 1: Initialise the sum to 0\n    sum_of_amicable_numbers = 0\n    \n    # Step 2: Initialise a set of amicable numbers to an empty set\n    amicable_numbers = set()\n    \n    # Step 3: Iterate from 1 to limit\n    for number in range(1, limit + 1):\n        \n        # Step 4: Find the sum of the digits of limit.\n        # Eg: The sum of the digits for 35 is: (1 + 3 + 5) = 8\n        sum_of_digits = sum([int(digit) for digit in str(number)])\n        \n        # Step 5: Add the sum of the digits of limit to the amicable numbers set.\n        # Eg: For 35, it is not in the amicable numbers set, and the sum of the\n        # digits is 8. So add 35 to the amicable numbers set.\n        # For 35, it is not in the amicable numbers set, and the sum of the digits\n        # is 8, but the sum of the digits of 8 is 8. So add 8 to the amicable numbers\n        # set.\n        # Eg: For 8, it is not in the amicable numbers set, and the sum of the digits\n        # is 8. So add 8 to the amicable numbers set.\n        amicable_numbers.add(sum_of_digits)\n        \n        # Step 6: If limit is in the amicable numbers set, return the sum of the\n        # amicable numbers set.\n        if number in amicable_numbers:\n            return sum_of_amicable_numbers\n    \n    # Step 7: Return the sum of the amicable numbers set.\n    return sum_of_amicable_numbers\n    \n    \ndef amicable_numbers_sum_3(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Note: W"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Generate a list of numbers\n    numbers = list(range(1, limit))\n    # Declare the final list of amicable numbers to be returned\n    amicable_numbers = []\n    # Loop through the list\n    for n in numbers:\n        # Declare the set of factors\n        factors = set()\n        # Declare a list of amicable numbers\n        amicable_numbers_candidate = []\n        # Loop through the list of numbers\n        for i in numbers:\n            # Add the difference of the factor and the number\n            factors.add(i - n)\n        # Loop through the factors\n        for f in factors:\n            # If the factor exists in the list of numbers\n            if f in numbers:\n                # Add the factor to the amicable number list\n                amicable_numbers_candidate.append(f)\n        # If the number of factors is 2\n        if len(amicable_numbers_candidate) == 2:\n            # Add the number to the final list of amicable numbers\n            amicable_numbers.append(n)\n    # Return the sum of the amicable numbers\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit <= 1:\n        raise ValueError('Limit must be a positive number.')\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    for number in range(limit):\n        sum_amicable_numbers += get_amicable_number_sum(number)\n    return sum_amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    for i in range(1, limit+1):\n        sum_amicable_numbers += amicable_number(i)\n    return sum_amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        j = sum_factors(i)\n        if j!= i and sum_factors(j) == i:\n            sum += i\n    return sum\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = cmath.phase(a)\n    d = cmath.phase(b)\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x=cmath.phase(a)\n    print(\"angle = {}\".format(x))\n    return x\ndef distance_complex(a,b):\n    '''\n    Write a function to get the distance between two complex numbers.\n    '''\n    x=((a.real-b.real)**2+(a.imag-b.imag)**2)**(1/2)\n    print(\"distance = {}\".format(x))\n    return x\ndef zero_num(a,b):\n    '''\n    Write a function that checks whether a number is complex or not.\n    '''\n    if a==0 and b==0:\n        print(\"Complex number\")\n    elif a==0:\n        print(\"Imaginary number\")\n    elif b==0:\n        print(\"Real number\")\ndef complex_num(a,b):\n    '''\n    Write a function that returns the sum, difference, product, \n    quotient and modulus of two complex numbers.\n    '''\n    x=complex(a,b)\n    print(\"sum = {}\".format(x+x))\n    print(\"difference = {}\".format(x-x))\n    print(\"product = {}\".format(x*x))\n    print(\"quotient = {}\".format(x/x))\n    print(\"modulus = {}\".format(abs(x)))\n    return\ndef add_num(a,b):\n    '''\n    Write a function that adds two numbers.\n    '''\n    x=a+b\n    print(x)\n    return\ndef sub_num(a,b):\n    '''\n    Write a function that subtracts two numbers.\n    '''\n    x=a-b\n    print(x)\n    return\ndef mul_num(a,b):\n    '''\n    Write a function that multiplies two numbers.\n    '''\n    x=a*b\n    print(x)\n    return\ndef div_num(a,b):\n    '''\n    Write a function that divides two numbers.\n    '''\n    x=a/b\n    print(x)\n    return\ndef pow_num(a,b):\n    '''\n    Write a function that raises a number to an exponent.\n    '''\n    x=a**b\n    print(x)\n    return\ndef trig_tan(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.tan(a)\n    print(\"tan = {}\".format(x))\n    return x\ndef trig_cos(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.cos(a)\n    print(\"cos = {}\".format(x))\n    return x\ndef trig_sin(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.sin(a)\n    print(\"sin = {}\".format(x))\n    return x\ndef trig_cot(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=1/cmath.tan(a)\n    print(\"cot = {}\".format(x))\n    return x\ndef trig_csc(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=1/cmath.sin(a)\n    print(\"csc = {}\".format(x))\n    return x\ndef trig_sec(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=1/cmath.cos(a)\n    print(\"sec = {}\".format(x))\n    return x\ndef trig_arcsin(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.asin(a)\n    print(\"arcsin = {}\".format(x))\n    return x\ndef trig_arccos(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.acos(a)\n    print(\"arccos = {}\".format(x))\n    return x\ndef trig_arctan(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.atan(a)\n    print(\"arctan = {}\".format(x))\n    return x\ndef trig_sine_diff(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.sin(a)-cmath.sin(b)\n    print(\"sine difference = {}\".format(x))\n    return x\ndef trig_cosine_diff(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.cos(a)-cmath.cos(b)\n    print(\"cosine difference = {}\".format(x))\n    return x\ndef trig_tangent_diff(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.tan(a)-cmath.tan(b)\n    print(\"tangent difference = {}\".format(x))\n    return x\ndef trig_sec_diff(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=1/cmath.sin(a)-1/cmath.sin(b)\n    print(\"secant difference = {}\".format(x))\n    return x\ndef trig_cosec_diff(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=1/cmath.cos(a)-1/cmath.cos(b)\n    print(\"cosecant difference = {}\".format(x))\n    return x\ndef trig_cot_diff(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=1/cmath.tan(a)-1/cmath.tan(b)\n    print(\"cotangent difference = {}\".format(x))\n    return x\ndef trig_arcsec_diff(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.asin(1/cmath.sin(a))-cmath.asin(1/cmath.sin(b))\n    print(\"arcsecant difference = {}\".format(x))\n    return x\ndef trig_arccos_diff(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.acos(1/cmath.sin(a))-cmath.acos(1/cmath.sin(b))\n    print(\"arccosine difference = {}\".format(x))\n    return x\ndef trig_arctan_diff(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.atan(1/cmath.tan(a))-cmath.atan(1/cmath.tan(b))\n    print(\"arctangent difference = {}\".format(x))\n    return x\ndef trig_degree_radian(a,b):\n    '''\n    Write a function that converts degrees to radians.\n    '''\n    x=cmath.pi/180*a\n    print(\"radian = {}\".format(x))\n    return x\ndef trig_radian_degree(a,b):\n    '''\n    Write a function that converts radians to degrees.\n    '''\n    x=180/cmath.pi*a\n    print(\"degree = {}\".format(x))\n    return x\ndef trig_sin_sum(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.sin(a)+cmath.sin(b)\n    print(\"sine sum = {}\".format(x))\n    return x\ndef trig_cos_sum(a,b):\n    '''\n    Write a function that does all trig functions.\n    '''\n    x=cmath.cos(a)+cmath.cos(b)\n    print(\"cosine sum = {}\".format(x))\n    return x"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(complex(a,b).real)\n    print(complex(a,b).imag)\n    if a == 0 and b == 0:\n        print('The angle of complex number is 0.0')\n    elif b == 0:\n        print('The angle of complex number is',cmath.acos(a))\n    elif a == 0:\n        print('The angle of complex number is',cmath.asin(b))\n    else:\n        print('The angle of complex number is',cmath.atan(b/a))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle=cmath.phase(complex(a,b))\n    return angle\ndef angle_real(a):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    angle=cmath.phase(complex(a,0))\n    return angle\ndef angle_complex_real(a):\n    '''\n    Write a function to get the angle of a complex number, real number\n    '''\n    angle=cmath.phase(complex(a,0))\n    return angle\ndef complex_abs(a,b):\n    '''\n    Write a function to get the module of a complex number.\n    '''\n    module=abs(complex(a,b))\n    return module\ndef complex_abs_real(a):\n    '''\n    Write a function to get the module of a complex number, real number\n    '''\n    module=abs(complex(a,0))\n    return module\ndef complex_abs_complex(a):\n    '''\n    Write a function to get the module of a complex number.\n    '''\n    module=abs(complex(a,0))\n    return module\ndef complex_conjugate(a,b):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    conj=complex(a,b).conjugate()\n    return conj\ndef complex_conjugate_real(a):\n    '''\n    Write a function to get the conjugate of a complex number, real number\n    '''\n    conj=complex(a,0).conjugate()\n    return conj\ndef complex_conjugate_complex(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    conj=complex(a,0).conjugate()\n    return conj\ndef complex_modulus(a,b):\n    '''\n    Write a function to get the modulus of a complex number.\n    '''\n    mod=complex(a,b).modulus()\n    return mod\ndef complex_modulus_real(a):\n    '''\n    Write a function to get the modulus of a complex number, real number\n    '''\n    mod=complex(a,0).modulus()\n    return mod\ndef complex_modulus_complex(a):\n    '''\n    Write a function to get the modulus of a complex number.\n    '''\n    mod=complex(a,0).modulus()\n    return mod\ndef complex_add(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    complex_add=complex(a,b)+complex(a,b)\n    return complex_add\ndef complex_add_real(a,b):\n    '''\n    Write a function to add two complex numbers, real number\n    '''\n    complex_add=complex(a,b)+complex(a,0)\n    return complex_add\ndef complex_add_complex(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    complex_add=complex(a,b)+complex(a,0)\n    return complex_add\ndef complex_add_real_real(a,b):\n    '''\n    Write a function to add two complex numbers, real number\n    '''\n    complex_add=complex(a,b)+complex(a,b)\n    return complex_add\ndef complex_add_complex_complex(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    complex_add=complex(a,b)+complex(a,b)\n    return complex_add\ndef complex_subtract(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    complex_subtract=complex(a,b)-complex(a,b)\n    return complex_subtract\ndef complex_subtract_real(a,b):\n    '''\n    Write a function to subtract two complex numbers, real number\n    '''\n    complex_subtract=complex(a,b)-complex(a,0)\n    return complex_subtract\ndef complex_subtract_complex(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    complex_subtract=complex(a,b)-complex(a,0)\n    return complex_subtract\ndef complex_subtract_real_real(a,b):\n    '''\n    Write a function to subtract two complex numbers, real number\n    '''\n    complex_subtract=complex(a,b)-complex(a,b)\n    return complex_subtract\ndef complex_subtract_complex_complex(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    complex_subtract=complex(a,b)-complex(a,b)\n    return complex_subtract\ndef complex_multiply(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    complex_multiply=complex(a,b)*complex(a,b)\n    return complex_multiply\ndef complex_multiply_real(a,b):\n    '''\n    Write a function to multiply two complex numbers, real number\n    '''\n    complex_multiply=complex(a,b)*complex(a,0)\n    return complex_multiply\ndef complex_multiply_complex(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    complex_multiply=complex(a,b)*complex(a,0)\n    return complex_multiply\ndef complex_multiply_real_real(a,b):\n    '''\n    Write a function to multiply two complex numbers, real number\n    '''\n    complex_multiply=complex(a,b)*complex(a,b)\n    return complex_multiply\ndef complex_multiply_complex_complex(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    complex_multiply=complex(a,b)*complex(a,b)\n    return complex_multiply\ndef complex_divide(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    complex_divide=complex(a,b)/complex(a,b)\n    return complex_divide\ndef complex_divide_real(a,b):\n    '''\n    Write a function to divide two complex numbers, real number\n    '''\n    complex_divide=complex(a,b)/complex(a,0)\n    return complex_divide\ndef complex_divide_complex(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    complex_divide=complex(a,b)/complex(a,0)\n    return complex_divide\ndef complex_divide_real_real(a,b):\n    '''\n    Write a function to divide two complex numbers, real number\n    '''\n    complex_divide=complex(a,b)/complex(a,b)\n    return complex_divide\ndef complex_divide_complex_complex(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    complex_divide=complex(a,b)/complex(a,b)\n    return complex_divide\ndef complex_power(a,b):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    complex_power=complex(a,b)**complex(a,b)\n    return complex_power\ndef complex_power_real(a,b):\n    '''\n    Write a function to raise a complex number to a power, real number\n    '''\n    complex_power=complex(a,b)**complex(a,0)\n    return complex_power\ndef complex_power_complex(a,b):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    complex_power=complex(a,b)**complex(a,0)\n    return complex_power\ndef complex_power_real_real(a,b):\n    '''\n    Write a function to raise a complex number to a power, real number\n    '''\n    complex_power=complex(a"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a*b)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a>0 and b>0:\n        return cmath.phase(complex(a,b))\n    if a<0 and b>0:\n        return cmath.phase(complex(a,-1*b))\n    if a<0 and b<0:\n        return cmath.phase(complex(a,b))\n    if a>0 and b<0:\n        return cmath.phase(complex(a,b))\n    else:\n        return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return math.atan2(b,a)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a=a.split(\"+\")\n    b=b.split(\"+\")\n    a=complex(int(a[0]),int(a[1]))\n    b=complex(int(b[0]),int(b[1]))\n    return cmath.phase(b/a)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max = 0\n    for i in range(len(string)):\n        count = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count += 1\n            elif string[j] == '1':\n                count -= 1\n            if count > max:\n                max = count\n    return max\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    return max(find_length(string[1:]), find_length(string[:-1]))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # edge cases \n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        if string == '0' or string == '1':\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #initialize our count variables\n    count_1s = 0\n    count_0s = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_one = 0\n        count_zero = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_zero += 1\n            else:\n                count_one += 1\n            if count_zero == count_one:\n                max_diff = max(max_diff, count_one - count_zero)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(map(lambda x: x.count('0') - x.count('1'), string))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max([len(x) for x in string.split('1')]) - min([len(x) for x in string.split('1')])\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    count_zeros = 0\n    count_ones = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n        \n        length = max(count_zeros, count_ones)\n        max_length = max(max_length, length)\n    \n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n            if count > max_diff:\n                max_diff = count\n        else:\n            count = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Use this array to store counts of 0s and 1s encountered so far. \n    # Initialize it with all zeroes. \n    count = [0,0] \n  \n    # Initialize result - the maximum number of 1s possible at any point \n    # in the string. \n    result = 0\n  \n    for i in range(len(string)): \n  \n        # Update the count of 0s and 1s only if  \n        # a new digit is encountered. \n        if (string[i] == '0'): \n            count[0] += 1\n  \n        else: \n            count[1] += 1\n  \n        # If the count of 0s is greater than the count of 1s, \n        # then update the result \n        if (count[0] > count[1]): \n            result = max(result,count[0]) \n  \n    return result \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    n1 = a\n    n2 = b\n    list1 = []\n    for i in range(1,n1): \n        if n1 % i == 0: \n            list1.append(i)\n    print(list1)\n    list2 = []\n    for j in range(1,n2): \n        if n2 % j == 0: \n            list2.append(j)\n    print(list2)\n    sum_of_list = []\n    for k in list1: \n        if k in list2: \n            sum_of_list.append(k)\n    sum_of_list.remove(1)\n    print(sum_of_list)\n    sum_of_list.sort()\n    print(sum_of_list)\n    total = 0\n    for i in sum_of_list: \n        total = total + i\n    print(total)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    while b!=0:\n        t=a%b\n        a=b\n        b=t\n    return a\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    d=set()\n    for i in range(1,a):\n        if a%i==0:\n            d.add(i)\n    for j in range(1,b):\n        if b%j==0:\n            d.add(j)\n    return d\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(b==0):\n        return a\n    else:\n        return sum(b,a%b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum_num = 0\n    for i in range(1,min(a,b)):\n        if a%i == 0 and b%i == 0:\n            sum_num += i\n    return sum_num\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return math.gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=[]\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            c.append(i)\n    return sum(c)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    while(b!=0):\n        rem=a%b\n        a=b\n        b=rem\n    return a\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 1 # Initialize the sum as 1\n    # Iterate through all the numbers between 1 to B\n    for i in range(2,b+1):\n        # Check if i is a divisor of a\n        if a % i == 0:\n            # Check if i is a divisor of b\n            if b % i == 0:\n                # If both a and b are divisible by i, then increment sum\n                sum += i\n    return sum\nprint(sum(4,64))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for w in str:\n        if len(w) > n:\n            result.append(w)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    s = str.split(\" \")\n    for i in s:\n        if len(i) > n:\n            print(i)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_words = []\n    for word in str.split():\n        if len(word) > n:\n            new_words.append(word)\n    return new_words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import re\n    words = re.findall(r'\\w+',str)\n    pattern = re.compile(r'\\w+\\s+\\w+')\n    for i in words:\n        if(len(i) > n):\n            print(pattern.findall(i))\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # step 1: check the number of rows and columns\n    row_len = len(my_matrix)\n    col_len = len(my_matrix[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # My function to create a 2D list of the input matrix\n    matrix = create_matrix(my_matrix)\n    # list to store the sums for each of the three possible subsets of a row\n    row_sums = []\n    # list to store the sums for each of the three possible subsets of a column\n    col_sums = []\n    # list to store the sums for each of the three possible subsets of a diagonal\n    diag_sums = []\n    # create two lists to store the values for each of the diagonals\n    diag1 = []\n    diag2 = []\n    # create one list to store the values for each of the rows\n    row1 = []\n    row2 = []\n    row3 = []\n    # create one list to store the values for each of the columns\n    col1 = []\n    col2 = []\n    col3 = []\n    # create a list to store the values for the magic square\n    square = []\n    # loop through the rows\n    for row in range(len(matrix)):\n        # loop through the columns\n        for col in range(len(matrix[row])):\n            # append the number in the matrix to the square list\n            square.append(matrix[row][col])\n            # if the row and column values are the same, add them to the appropriate list\n            if (matrix[row][col] == matrix[row][col]) and (matrix[row][col]!= 0):\n                row_sums.append(matrix[row][col])\n                col_sums.append(matrix[row][col])\n                # create two diagonal lists for the first and second diagonals\n                if row == col:\n                    diag1.append(matrix[row][col])\n                if ((row + col) == (len(matrix) - 1)):\n                    diag2.append(matrix[row][col])\n                # create three lists for each of the rows\n                if row == 0:\n                    row1.append(matrix[row][col])\n                elif row == 1:\n                    row2.append(matrix[row][col])\n                elif row == 2:\n                    row3.append(matrix[row][col])\n                # create three lists for each of the columns\n                if col == 0:\n                    col1.append(matrix[row][col])\n                elif col == 1:\n                    col2.append(matrix[row][col])\n                elif col == 2:\n                    col3.append(matrix[row][col])\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the expected sum for each row\n    row_sums = []\n    for i in range(0, len(my_matrix)):\n        sum = 0\n        for j in range(0, len(my_matrix[i])):\n            sum += my_matrix[i][j]\n        row_sums.append(sum)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Build a list of the sums of each row, column, and diagonal.\n    row_sums = [0] * len(my_matrix)\n    col_sums = [0] * len(my_matrix[0])\n    diag_sums = [0] * 2\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix[0])):\n            row_sums[row] += my_matrix[row][col]\n            col_sums[col] += my_matrix[row][col]\n            # Calculate the diagonal sums.\n            if row == col:\n                diag_sums[0] += my_matrix[row][col]\n            if row + col == len(my_matrix) - 1:\n                diag_sums[1] += my_matrix[row][col]\n    # Ensure each row sum is equal to each of the column sums.\n    for row_sum in row_sums:\n        if row_sum!= col_sums[0]:\n            return False\n    # Ensure each diagonal sum is equal.\n    for diagonal_sum in diag_sums:\n        if diagonal_sum!= row_sums[0]:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum_row = 0\n    sum_col = 0\n    sum_diag = 0\n    for i in range(0, len(my_matrix)):\n        sum_row = sum_row + my_matrix[i][i]\n        sum_col = sum_col + my_matrix[i][len(my_matrix)-i-1]\n    for i in range(0, len(my_matrix)):\n        sum_diag = sum_diag + my_matrix[i][len(my_matrix)-i-1]\n    sum_diag2 = 0\n    for i in range(0, len(my_matrix)):\n        sum_diag2 = sum_diag2 + my_matrix[i][i]\n    if sum_row == sum_col == sum_diag == sum_diag2:\n        print(\"The matrix is a magic square.\")\n    else:\n        print(\"The matrix is not a magic square.\")\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_square_col = []\n    magic_square_row = []\n    magic_square_diagonal1 = []\n    magic_square_diagonal2 = []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)==3 and (len(my_matrix[0])==3 and len(my_matrix[1])==3 and len(my_matrix[2])==3):\n        #checking if rows are equal\n        if (my_matrix[0][0]==my_matrix[0][1] and my_matrix[0][1]==my_matrix[0][2]) and (my_matrix[0][0]==my_matrix[1][0] and my_matrix[1][0]==my_matrix[2][0]) and (my_matrix[0][0]==my_matrix[1][1] and my_matrix[1][1]==my_matrix[2][2]) and (my_matrix[0][0]==my_matrix[1][2] and my_matrix[1][2]==my_matrix[2][1]):\n            print(\"This is a magic square!\")\n        else:\n            print(\"This is not a magic square.\")\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum_matrix = sum(my_matrix[0])\n    #print(sum_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # the sum of the numbers in each row should be equal to the sum of the numbers in each column\n    # the sum of the numbers in each diagonal should also be equal to the sum of the numbers in the matrix\n    if sum(my_matrix[0])!= sum(my_matrix[1]) or sum(my_matrix[0])!= sum(my_matrix[2]) or sum(my_matrix[0])!= sum(my_matrix[3]):\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    #rows\n    for row_index in range(rows):\n        num_sum = 0\n        for col_index in range(cols):\n            num_sum += my_matrix[row_index][col_index]\n        if num_sum!= 15:\n            return False\n    \n    #columns\n    for col_index in range(cols):\n        num_sum = 0\n        for row_index in range(rows):\n            num_sum += my_matrix[row_index][col_index]\n        if num_sum!= 15:\n            return False\n    \n    #diagnals\n    num_sum = 0\n    for index in range(rows):\n        num_sum += my_matrix[index][index]\n    if num_sum!= 15:\n        return False\n    num_sum = 0\n    for index in range(rows):\n        num_sum += my_matrix[index][rows-1-index]\n    if num_sum!= 15:\n        return False\n    \n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    return max(nums, key=nums.count)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_freq = max(frequency.values())\n    return [key for key in frequency.keys() if frequency[key] == max_freq]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # return max(set(nums), key=nums.count)\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 0:\n        return None\n    result = []\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        d = defaultdict(int)\n        for i in nums:\n            d[i] += 1\n        for i,j in d.items():\n            if j == max(d.values()):\n                result.append(i)\n        return max(result)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #[1,2,3,4,5,5,4,3,2,1]\n    # d = defaultdict(int)\n    # for n in nums:\n    #     d[n] +=1\n    # print(d)\n    # return max(d,key = lambda k:d[k])\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # nums = [1,2,1,2,2,1,2,1,2,3,3,3,3,3,2,1,3,3,3,3,2,2,1]\n    # nums = [1,2,3,4,5,6,7,8,9,10]\n    # nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    # nums = [1,2,1,2,2,1,2,1,2,3,3,3,3,3,2,1,3,3,3,3,2,2,1]\n    # nums = [1,2,3,4,5,6,7,8,9,10,2,3,4,5,6,7,8,9,10]\n    # nums = [1,2,3,4,5,6,7,8,9,10,2,3,4,5,6,7,8,9,10]\n    # nums = [1,2,3,4,5,6,7,8,9,10,2,3,4,5,6,7,8,9,10]\n    freq = defaultdict(int)\n    # for num in nums:\n    #     freq[num]+=1\n    # max_freq = 0\n    # max_num = nums[0]\n    # for num,freq in freq.items():\n    #     if freq>max_freq:\n    #         max_freq = freq\n    #         max_num = num\n    # return max_num\n    max_freq = max(list(freq.values()))\n    return min(freq, key=freq.get)\nprint(max_occurrences(nums))\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_item = 0\n    count_dict = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return None\n    res = defaultdict(int)\n    for num in nums:\n        res[num] += 1\n    max_occ = 0\n    for key, value in res.items():\n        if value > max_occ:\n            max_occ = value\n            res_key = key\n    return res_key\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    max_occur = 0\n    ans = None\n    for i in d:\n        if d[i]>=max_occur:\n            max_occur = d[i]\n            ans = i\n    return ans\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_count = max(freq.values())\n    print(max_count)\n    for key in freq.keys():\n        if freq[key] == max_count:\n            print(key)\nmax_occurrences([1,2,3,4,5,4,3,4,5])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,3,3,3,4,4,4,4,4,4])\nmax_occurrences([1,2,3,"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # dict = {}\n    # for x in nums:\n    #     dict[x] = dict.get(x, 0) + 1\n    # dict = {key:val for key, val in dict.items()}\n    # return max(dict, key=dict.get)\n    dict = defaultdict(int)\n    for x in nums:\n        dict[x] += 1\n    return max(dict, key=dict.get)\nnums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 1, 1, 1, 1]\nprint(max_occurrences(nums))\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return re.sub(r\"[AEIOUaeiou]\",lambda x:\"\"+x.group(0)+\"\",str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    string = list(str1)\n    i = 0\n    j = len(str1) - 1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a','e','i','o','u','A','E','I','O','U')\n    str1 = list(str1)\n    str2 = []\n    vowel = False\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel = True\n            str2.insert(0, str1[i])\n        elif str1[i] not in vowels and vowel == True:\n            vowel = False\n            str2.insert(0, str1[i])\n    str1 = ''.join(str2)\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    string = [i for i in str1]\n    string1 = []\n    for i in string:\n        if i in vowels:\n            string1.append(i)\n    string1 = ''.join(string1[::-1])\n    string2 = [i for i in str1 if i not in vowels]\n    string2 = ''.join(string2)\n    string2 = string2 + string1\n    return string2\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str1 = [ch for ch in str1 if ch in vowels]\n    str1 = \"\".join(str1[::-1])\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n        elif str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n    return \"\".join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a','e','i','o','u','A','E','I','O','U')\n    new_str = ''\n    for i in str1:\n        if i in vowels:\n            new_str = new_str + i\n    for i in str1:\n        if i not in vowels:\n            new_str = new_str + i\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    vowels_list = [s for s in str1 if s in vowels]\n    rev = vowels_list[::-1]\n    return \"\".join(rev)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    vowel_list = []\n    for letter in str1:\n        if letter in vowels:\n            vowel_list.append(letter)\n    print(vowel_list)\n    vowel_list.reverse()\n    for i in range(0, len(vowel_list)):\n        str1 = str1.replace(vowel_list[i], '', 1)\n        str1 = str1.replace(vowel_list[i], vowel_list[i], 1)\n    print(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = \"aeiouAEIOU\"\n    vowels = \"\"\n    for char in str1:\n        if char in vowel:\n            vowels += char\n    return vowels[::-1] + str1[len(vowels):]\n    \ndef remove_punctuation(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return \"\".join(c for c in str1 if c not in string.punctuation)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''.join(str(x) for x in tup1)\n    return tup_string\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = ''\n    for i in tup1:\n        string1 += str(i)\n        string1 += ','\n    string1 = string1[:-1]\n    return string1\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for elem in tup1:\n        s += str(elem) +''\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    lst = []\n    for char in tup1:\n        lst.append(char)\n    return ''.join(lst)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = tuple('Hello')\n    print(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1_string = \"(\"\n    for i in range(len(tup1)):\n        tup1_string = tup1_string + str(tup1[i])\n        if i < (len(tup1)-1):\n            tup1_string = tup1_string + \", \"\n    tup1_string = tup1_string + \")\"\n    return tup1_string\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for i in range(len(tup1)):\n        if i!= len(tup1) - 1:\n            tup_str += str(tup1[i]) + ', '\n        else:\n            tup_str += str(tup1[i])\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1_string = \"\".join(tup1)\n    return tup1_string\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = str(tup1)\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([n for n in nums if n < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negatives = 0\n    for num in nums:\n        if num < 0:\n            sum_negatives += num\n    return sum_negatives\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += num\n    return count\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s=0\n    for num in nums:\n        if num<0:\n            s+=num\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif nums[0] < 0:\n        return nums[0] + sum_negativenum(nums[1:])\n    else:\n        return sum_negativenum(nums[1:])\n    "
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            result += nums[i]\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [num for num in nums if num < 0]\n    return sum(negatives)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for i in nums:\n        if i < 0:\n            sum_neg += i\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # first hexagonal number is 1\n    # Each hexagonal number is made by adding the count\n    # of previous hexagonal number to the count of the previous\n    # adjacent hexagonal number\n    \n    count = 0\n    previous = 1\n    while count!= n:\n        count += hexagonal_number(count)\n    return count\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1: \n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hexagonal_seq(num):\n        return num*(2*num-1)\n    hexes=set()\n    while len(hexes)<n:\n        hexes.add(hexagonal_seq(len(hexes)+1))\n    return hexes\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n -= 1 # starting at 0 so subtract 1\n    return n * (2 * n + 1) # nth hexagonal number is n * (2n + 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n-1)*n*(2*n-1)\n    \ndef pentagonal_num(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    #hexagon numbers are the numbers with pattern: (n*(2n-1))/2\n    return int(n*(2*n-1)/2)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_c = 0\n    nonzero_c = 0\n    for num in nums:\n        if num == 0:\n            zero_c+=1\n        else:\n            nonzero_c+=1\n    return zero_c/nonzero_c\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nz = 0\n    nz_count = 0\n    for i in nums:\n        nz += i\n        nz_count += 1 if i == 0 else 0\n    return nz_count / nz\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        if nums[i] == 0:\n            count += 1\n    return count/n\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = num_non_zero = 0\n    for num in nums:\n        if num == 0:\n            num_zero += 1\n        else:\n            num_non_zero += 1\n    return num_zero / num_non_zero\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #Using collections\n    # zero_count=0\n    # for num in nums:\n    #     if num==0:\n    #         zero_count+=1\n    # return zero_count/len(nums)\n    \n    #Using custom function\n    return len(list(filter(lambda x: x==0,nums))) / len(nums)\n    \ndef minmax(nums):\n    '''\n    Write a function to find the minimum and maximum values in an array of integers.\n    '''\n    #Using built in functions\n    # minmax=[nums[0],nums[0]]\n    # for num in nums:\n    #     if num>max(minmax):\n    #         minmax[1]=num\n    #     elif num<min(minmax):\n    #         minmax[0]=num\n    # return minmax\n    \n    #Using custom function\n    return [min(nums),max(nums)]\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count/non_zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nums_count = 0\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            nums_count += 1\n            zero_count += 1\n    if nums_count == 0:\n        print(0)\n    else:\n        print(zero_count/nums_count)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total_zeroes = 0\n    total_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            total_zeroes += 1\n        else:\n            total_non_zeroes += 1\n    return total_zeroes, total_non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_counter = 0\n    nonzero_counter = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_counter += 1\n        elif nums[i]!= 0:\n            nonzero_counter += 1\n    return zero_counter, nonzero_counter\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        for x in range(2,n):\n            if n == 2**x:\n                return 1\n        return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize result \n    result = False\n    # loop till 2^32-1\n    while (n > 0): \n        # Check if 2^k divides n. \n        if (n % 2 == 0): \n            # update result \n            result = True\n            # update n \n            n = n // 2\n        else:\n            break\n    return result\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pow_of_2 = [2**i for i in range(30)]\n    s = sum(pow_of_2)\n    print(s)\n    if n == s:\n        return True\n    elif n > s:\n        return False\n    else:\n        flag = 0\n        for i in range(len(pow_of_2)):\n            if pow_of_2[i] <= n and n < 2*pow_of_2[i]:\n                flag = 1\n                break\n        if flag == 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Considering only integer values for simplicity\n    n = abs(int(n))\n    powers_of_two = []\n    while n and not n&1:\n        powers_of_two.append(n)\n        n >>= 1\n    while n:\n        powers_of_two.append(n)\n        n >>= 1\n    return sum(powers_of_two) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Sol 1\n    # n = bin(n)\n    # l = n[2:]\n    # sum = 0\n    # for i in l:\n    #     if i == \"1\":\n    #         sum+=1\n    # if sum == 1:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(32): \n        if n == 2**i or n == 2**(i+1): \n            return 1\n    return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n <= 0): \n        return False\n    while n % 2 == 0: \n        n = n / 2\n    if (n == 1): \n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 0\n    while n > 0:\n        if n % 2!= 0:\n            return 0\n        n = n / 2\n    return 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = 0\n    while n:\n        s+=1\n        n>>=1\n    return s == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if (n == 0): \n        return True\n    \n    while (n): \n        if ((n & 1) == 0): \n            n >>= 1\n            continue\n        if (n % 3 == 0): \n            n = n // 3\n            continue\n        return False\n    return True\n    \n    \n    \n    \ndef is_Sum_Of_Powers_Of_Two_v2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    while (n): \n        if (n % 2 == 0): \n            n //= 2\n        else:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \ndef is_Sum_Of_Powers_Of_Two_v3(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    while n:\n        if (n & 1) and (n & 3):\n            n &= ~3\n            n |= 2\n        else:\n            n >>= 1\n    return n == 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef is_Sum_Of_Powers_Of_Two_v4(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    while n > 3: \n        if (n & 3) == 0: \n            n = n >> 2\n            continue\n        if (n & 3) == 2: \n            n = n >> 2\n            if (n & 3) == 0: \n                n = n >> 2\n            else: \n                return False\n        return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.1415\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * math.pi * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    print(r * 2 * math.pi)\n    return None\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*r*math.pi\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for n in test_list:\n        if type(n) is list:\n            result += extract_singly(n)\n        else:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    print(\"\\nOriginal list: {}\".format(test_list))\n    # Initialize empty list for flattening\n    flattened_list = []\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(itertools.chain(*test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output_list = []\n    for i in test_list:\n        if type(i) == list:\n            for j in i:\n                output_list.append(j)\n        else:\n            output_list.append(i)\n    return output_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    print(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # return [x for sublist in test_list for x in sublist]\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    final_list = []\n    for sub_list in test_list:\n        for item in sub_list:\n            final_list.append(item)\n    return final_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly = set()\n    for item in test_list:\n        if type(item) == list:\n            for num in item:\n                singly.add(num)\n        else:\n            singly.add(item)\n    return singly\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    try:\n        return [item for sublist in test_list for item in sublist]\n    except TypeError:\n        return test_list\n    except Exception as e:\n        print(\"ERROR: \", e)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #find the largest number in the list\n    def find_largest_index(input_list):\n        #get the index of the max value in list\n        return input_list.index(max(input_list))\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for k in range(len(nums)-1, 0, -1):\n        # print(k)\n        for i in range(0, k):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(arr, index):\n        '''\n        Flips a list until a value on that index becomes 0.\n        '''\n        i = len(arr) - 1\n        while i >= index and arr[i] == 0:\n            i -= 1\n        if i < index:\n            return arr\n        else:\n            while i >= index and arr[i] == 1:\n                i -= 1\n            arr[i] = 1\n            arr[index] = 0\n            return flip(arr, index+1)\n    for i in range(len(nums)):\n        arr = flip(nums, i)\n        if i < len(nums):\n            print(flip(arr, i))\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(a, b):\n        return b, a\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(i, nums):\n        '''\n        Flip the ith element to the bottom in nums.\n        '''\n        start = 0\n        while start < i:\n            nums[start], nums[i] = nums[i], nums[start]\n            start += 1\n            i -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #Make a copy of the list of nums\n    sorted_list = nums.copy()\n    #If the length of the list is 0 or 1, it is already sorted so return the original list\n    if len(sorted_list) < 2:\n        return sorted_list\n    #Set the largest element of the list to the end of the list\n    largest_element = sorted_list.pop()\n    #Sort the list of numbers in descending order\n    sorted_list.sort(reverse=True)\n    #Sort the original list in ascending order using the sorted list of nums\n    pancake_sort_helper(sorted_list, largest_element)\n    return sorted_list\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        p = nums.index(max(nums))\n        nums[0], nums[p] = nums[p], nums[0]\n        p = nums.index(max(nums[1:]))\n        nums[0:2] = nums[0:2][::-1]\n        return nums\n        \n        \n        "
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    len_nums = len(nums)\n    for i in range(len_nums, 1, -1):\n        # Find the index of the minimum element\n        min_index = i - 1\n        min_el = nums[i - 1]\n        for j in range(i - 1, -1, -1):\n            if nums[j] < min_el:\n                min_el = nums[j]\n                min_index = j\n        # Swap the minimum element with the last element\n        nums[i - 1], nums[min_index] = nums[min_index], nums[i - 1]\n        # Reverse the last i elements\n        left = i\n        right = len_nums\n        while left < right:\n            nums[left], nums[right - 1] = nums[right - 1], nums[left]\n            left += 1\n            right -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted_nums = []\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        else:\n            sorted_nums.append(nums[i])\n    if sorted_nums:\n        if nums == sorted_nums:\n            return nums\n        else:\n            sorted_nums = pancake_sort(sorted_nums)\n            for i in range(len(nums)):\n                if nums[i] == 0:\n                    continue\n                else:\n                    nums[i] = sorted_nums.pop(0)\n            return nums\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        if i == 0:\n            return nums\n        else:\n            index_of_max = nums.index(max(nums[:i+1]))\n            nums = nums[:index_of_max+1][::-1] + nums[index_of_max+1:]\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    if len(list1) == len(list2) == len(list3):\n        for i in range(len(list1)):\n            if list1[i] == list2[i] == list3[i]:\n                samepair = samepair + 1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)==len(list2)==len(list3):\n        same_num=0\n        for i in range(len(list1)):\n            if list1[i]==list2[i]==list3[i]:\n                same_num+=1\n        return same_num\n    else:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    list1len = len(list1)\n    list2len = len(list2)\n    list3len = len(list3)\n    if list1len == list2len == list3len:\n        for i in range(list1len):\n            if list1[i] == list2[i] == list3[i]:\n                samepair += 1\n    else:\n        print(\"Two lists should have the same length\")\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    count = 0\n    \n    for x,y,z in zip(list1,list2,list3):\n        if x==y==z:\n            count+=1\n    \n    return count\n    \n    \ndef count_same(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of two given lists.\n    '''\n    \n    count = 0\n    \n    for x,y in zip(list1,list2):\n        if x==y:\n            count+=1\n    \n    return count\n    \n    \ndef get_count(list1,list2,list3):\n    '''\n    Write a function that take three lists and count number of unique items that appears in all three lists.\n    '''\n    \n    list4 = []\n    \n    for x in list1:\n        if x not in list4:\n            list4.append(x)\n        \n    for x in list2:\n        if x not in list4:\n            list4.append(x)\n            \n    for x in list3:\n        if x not in list4:\n            list4.append(x)\n            \n    return len(list4)\n            \n    \n    \n    \n    \n    \ndef get_not_common(list1,list2,list3):\n    '''\n    Write a function to get item that do not appear in all three lists.\n    '''\n    \n    list4 = []\n    \n    for x in list1:\n        if x not in list4:\n            list4.append(x)\n        \n    for x in list2:\n        if x not in list4:\n            list4.append(x)\n            \n    for x in list3:\n        if x not in list4:\n            list4.append(x)\n            \n    return list4\n    \n    \n    \n    \n    \n    \ndef get_common(list1,list2,list3):\n    '''\n    Write a function to get item that appears in all three lists.\n    '''\n    \n    list4 = []\n    \n    for x in list1:\n        if x in list4:\n            list4.append(x)\n        \n    for x in list2:\n        if x in list4:\n            list4.append(x)\n            \n    for x in list3:\n        if x in list4:\n            list4.append(x)\n            \n    return list4\n    \n    \n    \n    \n    \n    \ndef get_common_not_in_all(list1,list2,list3):\n    '''\n    Write a function to get item that appears in all three lists but do not appear in all three lists.\n    '''\n    \n    list4 = get_common(list1,list2,list3)\n    list5 = get_not_common(list1,list2,list3)\n    \n    return list4.difference(list5)\n    \n    \n    \n    \n    \n    \n    \ndef get_all_common(list1,list2,list3):\n    '''\n    Write a function to get item that appear in all three lists.\n    '''\n    \n    list4 = get_common(list1,list2,list3)\n    \n    return list4\n    \n    \n    \n    \n    \n    \n    \ndef get_all_common_not_in_any(list1,list2,list3):\n    '''\n    Write a function to get item that appear in all three lists but do not appear in any of three lists.\n    '''\n    \n    list4 = get_common(list1,list2,list3)\n    list5 = get_not_common(list1,list2,list3)\n    \n    return list4.difference(list5)\n    \n    \n    \n    \n    \n    \n    \ndef get_unique(list1,list2,list3):\n    '''\n    Write a function to get item that appear in only one of three lists.\n    '''\n    \n    list4 = []\n    \n    for x in list1:\n        if x not in list4:\n            list4.append(x)\n            \n    for x in list2:\n        if x not in list4:\n            list4.append(x)\n            \n    for x in list3:\n        if x not in list4:\n            list4.append(x)\n            \n    return list4\n    \n    \n    \n    \n    \n    \n    \ndef get_not_unique(list1,list2,list3):\n    '''\n    Write a function to get item that do not appear in any of three lists.\n    '''\n    \n    list4 = get_unique(list1,list2,list3)\n    list5 = []\n    \n    for x in list1:\n        if x not in list4:\n            list5.append(x)\n            \n    for x in list2:\n        if x not in list4:\n            list5.append(x)\n            \n    for x in list3:\n        if x not in list4:\n            list5.append(x)\n            \n    return list5\n    \n    \n    \n    \n    \n    \n    \ndef get_not_common_unique_items(list1,list2,list3):\n    '''\n    Write a function to get items that are not common in any of three lists but unique in each.\n    '''\n    \n    list4 = get_not_common(list1,list2,list3)\n    list5 = get_unique(list1,list2,list3)\n    list6 = get_unique(list2,list3,list1)\n    list7 = get_unique(list3,list1,list2)\n    \n    return list4.union(list5,list6,list7)\n    \n    \n    \n    \n    \n    \n    \ndef get_list_by_size(list1,list2,list3):\n    '''\n    Write a function to get item that appear in a specific position of three given lists.\n    '''\n    \n    list4 = []\n    list5 = []\n    list6 = []\n    list7 = []\n    \n    for i,x,y,z in zip(range(len(list1)),list1,list2,list3):\n        list4.append(x)\n        list4.append(y)\n        list4.append(z)\n        list5.append(x)\n        list5.append(z)\n        list5.append(y)\n        list6.append(y)\n        list6.append(z)\n        list7.append(z)\n        \n    return list4,list5,list6,list7\n    \n    \n    \n    \n    \n    \n    \ndef get_items_of_the_same_size(list1,list2,list3):\n    '''\n    Write a function to get item that appear in the same position of three given lists.\n    '''\n    \n    list4,list5,list6,list7 = get_list_by_size(list1,list2,list3)\n    \n    return count_samepair(list4,list5,list6),count_samepair(list4,list5,list7),count_samepair(list6,list7,list4),count_samepair(list6,list7,list5),count_samepair(list7,list4,list5)\n    \n    \n    \n    \n    \n    \n    \ndef get_items_of_the_same_size_different(list1,list2,list3):\n    '''\n    Write a function to get item that appear in the same position of three given lists but not in all three lists.\n    '''\n    \n    list4,list5,list6,list7 = get_list_by_size(list1,list2,list3)\n    \n    return count_samepair(list4,list5,list6) - get_count(list1,list2,list3),count_samepair(list4,list5,list7) - get_count(list1,list2,list3),count_samepair(list6,list7,list4) - get_count(list1,list2,list3),count_samepair(list6,list7,list5) - get_count(list1,list2,lis"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\ndef word_frequency(text):\n    '''\n    Write a function to count number of distinct words in a text string.\n    '''\n    word_list=[]\n    text=text.split()\n    for word in text:\n        word_list.append(word)\n    return len(set(word_list))\ndef word_length(text):\n    '''\n    Write a function to count number of words that have the same length as another word in the text.\n    '''\n    word_list=[]\n    text=text.split()\n    for word in text:\n        word_list.append(len(word))\n    return len(set(word_list))\ndef word_freq(text):\n    '''\n    Write a function to return the frequency of words in the text.\n    '''\n    word_list=[]\n    text=text.split()\n    for word in text:\n        word_list.append(word)\n    word_dict={}\n    for word in word_list:\n        if word not in word_dict:\n            word_dict[word]=word_list.count(word)\n    return word_dict\ndef most_frequent(text):\n    '''\n    Write a function to return the words that are more frequent in the text.\n    '''\n    word_dict=word_freq(text)\n    most_freq=max(word_dict.values())\n    most_freq_words={}\n    for word in word_dict:\n        if word_dict[word]==most_freq:\n            most_freq_words[word]=word_dict[word]\n    return most_freq_words\ndef word_count(text):\n    '''\n    Write a function to return the number of unique words in the text.\n    '''\n    word_list=[]\n    text=text.split()\n    for word in text:\n        word_list.append(word)\n    return len(set(word_list))\ndef char_frequency(text):\n    '''\n    Write a function to return the frequency of unique characters in the text.\n    '''\n    char_list=[]\n    text=text.split()\n    for word in text:\n        for char in word:\n            char_list.append(char)\n    char_dict={}\n    for char in char_list:\n        if char not in char_dict:\n            char_dict[char]=char_list.count(char)\n    return char_dict\ndef char_freq(text):\n    '''\n    Write a function to return the frequency of characters in the text.\n    '''\n    char_dict=char_frequency(text)\n    max_freq=max(char_dict.values())\n    most_freq_chars={}\n    for char in char_dict:\n        if char_dict[char]==max_freq:\n            most_freq_chars[char]=char_dict[char]\n    return most_freq_chars\ndef longest_word(text):\n    '''\n    Write a function to return the longest word in the text.\n    '''\n    text=text.split()\n    longest_word=text[0]\n    for word in text:\n        if len(word)>len(longest_word):\n            longest_word=word\n    return longest_word\ndef common_words(text1,text2):\n    '''\n    Write a function to return the number of common words between text1 and text2.\n    '''\n    word_list1=text1.split()\n    word_list2=text2.split()\n    common_words_dict={}\n    for word in word_list1:\n        if word in word_list2:\n            common_words_dict[word]=word_list1.count(word)\n    return common_words_dict\ndef common_letters(text1,text2):\n    '''\n    Write a function to return the number of common characters between text1 and text2.\n    '''\n    text1=text1.split()\n    text2=text2.split()\n    common_letters_dict={}\n    for word in text1:\n        for char in word:\n            if char in text2:\n                if char not in common_letters_dict:\n                    common_letters_dict[char]=word.count(char)\n                else:\n                    common_letters_dict[char]+=word.count(char)\n    return common_letters_dict\ndef print_dict(dictionary):\n    '''\n    Write a function to print all values in the given dictionary.\n    '''\n    for key,value in dictionary.items():\n        print(key,\"=\",value)\ndef print_list(l):\n    '''\n    Write a function to print all values in the given list.\n    '''\n    for item in l:\n        print(item)\ndef print_tuple(t):\n    '''\n    Write a function to print all values in the given tuple.\n    '''\n    for item in t:\n        print(item)\ndef print_set(s):\n    '''\n    Write a function to print all values in the given set.\n    '''\n    for item in s:\n        print(item)\ndef is_palindrome(word):\n    '''\n    Write a function to check if a word is a palindrome.\n    '''\n    word=word.lower()\n    word=word.replace(\" \", \"\")\n    return word==word[::-1]\ndef is_anagram(text1,text2):\n    '''\n    Write a function to check if text1 and text2 are anagrams.\n    '''\n    word_list1=text1.split()\n    word_list2=text2.split()\n    return sorted(word_list1)==sorted(word_list2)\ndef is_pangram(text):\n    '''\n    Write a function to check if a text is a pangram.\n    '''\n    alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    text=text.lower()\n    for char in alphabet:\n        if char not in text:\n            return False\n    return True\ndef is_prime(num):\n    '''\n    Write a function to check if a number is a prime number.\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\ndef is_perfect(num):\n    '''\n    Write a function to check if a number is perfect.\n    '''\n    if num==1:\n        return False\n    i=1\n    sum=0\n    while i<num:\n        if num%i==0:\n            sum+=i\n        i+=1\n    return sum==num\ndef generate_abecedarian(start_char):\n    '''\n    Write a function to generate a list of abecedarian starting from the given character.\n    '''\n    alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    abecedarian=[]\n    for char in alphabet:\n        abecedarian.append(char)\n    return abecedarian\ndef generate_abecedarian_rec(start_char,l):\n    '''\n    Write a function to generate a list of abecedarian starting from the given character using recursion.\n    '''\n    alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    if len(l)==0:\n        l=list(alphabet)\n    if l[0]!=start_char:\n        l.pop(0)\n        return generate_abecedarian_rec(start_char,l)\n    else:\n        l.pop(0)\n        return l\ndef count_chars(text,chr):\n    '''\n    Write a function to count characters in text\n    '''\n    char_list=[]\n    text=text.split()\n    for word in text:\n        for char in word:\n            if char==chr:\n                char_list.append(char)\n    return len(set"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    for i in Input:\n        if type(i) == list:\n            lists.append(i)\n    return len(lists)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #initialize list\n    list_tuple = []\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    li = []\n    for i in Input:\n        if type(i) == list:\n            li.append(i)\n    return len(li)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Use a set to store the number of lists.\n    num_of_lists = 0\n    for item in Input:\n        if isinstance(item, list):\n            num_of_lists += 1\n    return num_of_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    new_list = list(Input)\n    list_number = []\n    for i in new_list:\n        if type(i) == list:\n            list_number.append(i)\n    print(list_number)\n    return len(list_number)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    input_list = Input.split(\" \")\n    count=0\n    for i in input_list:\n        if i.find(\"[\")>=0:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return sum(isinstance(i, list) for i in Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for x in Input:\n        if type(x) is list:\n            list_count = list_count + 1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_present = 0\n    list_present += Input.count(list)\n    return list_present\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    sorted_arr = sorted(arr)\n    max_diff = sorted_arr[-1] - sorted_arr[0]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr) \n    arr.sort() \n    return arr[n-1]-arr[0] \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(0,len(arr)-1):\n        max_diff = max(max_diff,arr[i+1]-arr[i])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[j] - arr[i]) >= max_diff: \n                max_diff = arr[j] - arr[i]\n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=0\n    arr.sort()\n    for i in range(1,len(arr)):\n        max_diff=max(max_diff,arr[i]-arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    # Pick all elements one by one \n    for i in range(0, n-1): \n        for j in range(i+1, n): \n            if (abs(arr[i] - arr[j]) > max_diff): \n                max_diff = abs(arr[i] - arr[j]) \n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return max(arr[0], arr[-1] - arr[1])\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # arr = [int(x) for x in input().split()]\n    # print(arr)\n    min_diff = float('inf')\n    max_diff = float('-inf')\n    for i in range(len(arr)-1):\n        if(arr[i+1]-arr[i] < min_diff):\n            min_diff = arr[i+1] - arr[i]\n        if(arr[i+1]-arr[i] > max_diff):\n            max_diff = arr[i+1] - arr[i]\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for y in range(1, n):\n        x = (n - y) / a\n        if x % 1 == 0:\n            return int(x), y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        # if a and b are not inverses of one another, return None\n        if i % a!= 0 or i % b!= 0:\n            return None\n        # if a and b are inverses of one another, check if they multiply to equal n\n        if a * i == n and b * i == n:\n            return (i, i)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        y = (n - a * x) // b\n        if y > 0 and y * a + x * b == n:\n            return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    #return None\n    if n == 1:\n        return (1, 0)\n    \n    if n % 2 == 0:\n        return None\n    \n    for x in range(1, n):\n        y = (n - x) // 2\n        \n        if x ** 2 + y ** 2 == n:\n            return (x, y)\n    \n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if a * i + b * j == n:\n                return (i,j)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are coprimes\n    if gcd(a, n)!= 1:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(0, n):\n        for j in range(0, n):\n            if a * i + b * j == n:\n                return (i,j)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if a * i + b * j == n:\n                return i, j\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    print(list1)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    res = []\n    for i in list1:\n        if i not in list2:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        while item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = [ele for ele in list1 if ele not in list2]\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if type(list1)!= list or type(list2)!= list:\n        return 'Invalid Input'\n    \n    list1_unique = list(set(list1))\n    list2_unique = list(set(list2))\n    list1_unique.sort()\n    list2_unique.sort()\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    list1 = list1.difference(list2)\n    list1 = list(list1)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1[i] = \" \"\n    print(list1)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    while len(list1)!= 0:\n        if list1[0] in list2:\n            list1.remove(list1[0])\n        else:\n            break\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        raise ValueError(\"n must be >= 2\")\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return 1 + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum_series(n - 2) + sum_series(n - 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    while n - 2 * i >= 0:\n        n -= 2 * i\n        i += 1\n    return n + i - 1\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def _sum_series(n):\n        if n < 0:\n            return 0\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        return _sum_series(n - 2) + n\n    return _sum_series(n)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # if n is 0 then there is no series.\n    if n == 0:\n        return 0\n    # if n is 1 then there is one term in the series.\n    elif n == 1:\n        return 1\n    # if n is 2 then there is one term in the series.\n    elif n == 2:\n        return 3\n    # if n is 3 then there are two terms in the series.\n    elif n == 3:\n        return 6\n    # if n is 4 then there are two terms in the series.\n    elif n == 4:\n        return 10\n    # else:\n    return n + (n - 2) + (n - 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 'n needs to be an integer greater than zero'\n    if n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(n):\n            sum += n - 2*i\n    return sum\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / (2 * tan(pi / l))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #return ((s**2)*(3.14/4))/l\n    return ((s**2)/4)*(tan(pi/l))\n    #return ((s**2)/4)*(pi/l)\n    #return ((s**2)*(3.14/4))/l\n    "
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s < 3:\n        return 0\n    return (s / 2) ** 2 * tan(pi / s) * (1 / 2 + 1 / (2 * s))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2*tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = (s**2*tan(pi/l))/4\n    return(A)\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given its base, height and a third side.\n    '''\n    s = (a + b + c)/2\n    A = (s*(s-a)*(s-b)*(s-c))**0.5\n    return(A)\ndef area_right_triangle(a, b):\n    '''\n    Write a function to calculate the area of a right-angled triangle given the length of its sides.\n    '''\n    s = (a**2 + b**2)**0.5\n    A = s*b/2\n    return(A)\ndef area_rectangle(s, l):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    A = s*l\n    return(A)\ndef area_parallelogram(s, l):\n    '''\n    Write a function to calculate the area of a parallelogram given the length and width of its sides.\n    '''\n    A = s*l\n    return(A)\ndef area_trapezoid(s1, s2, l):\n    '''\n    Write a function to calculate the area of a trapezoid given the length of its sides and the area of its base.\n    '''\n    A = ((s1 + s2)*l)/2\n    return(A)\ndef area_ellipse(a, b):\n    '''\n    Write a function to calculate the area of an ellipse given its major and minor axes.\n    '''\n    A = pi*a*b\n    return(A)\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    A = pi*r**2\n    return(A)\ndef area_rhombus(a, b):\n    '''\n    Write a function to calculate the area of a right-angled rhombus given its length and width.\n    '''\n    A = a*b/2\n    return(A)\ndef area_kite(a, b, c, d):\n    '''\n    Write a function to calculate the area of a kite given its length, width, base and height.\n    '''\n    A = (3*(a*b + b*c + c*d + d*a))/4\n    return(A)\ndef area_kite2(a, b, c):\n    '''\n    Write a function to calculate the area of a kite given its length, width, base and height.\n    '''\n    A = (3*a*b + 3*b*c + 3*c*a)/2\n    return(A)\ndef area_rhombus2(a, b):\n    '''\n    Write a function to calculate the area of a rhombus given its length and width.\n    '''\n    A = b*a/2\n    return(A)\ndef area_circle2(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    A = pi*r**2\n    return(A)\ndef area_kite3(a, b, c, d):\n    '''\n    Write a function to calculate the area of a kite given its length, width, base and height.\n    '''\n    A = (2*a*b + 2*b*c + 2*c*d + 2*d*a) / 4\n    return(A)\ndef area_kite4(a, b, c):\n    '''\n    Write a function to calculate the area of a kite given its length, width, base and height.\n    '''\n    A = (3*a*b + 3*b*c)/2\n    return(A)\ndef area_kite5(a, b, c):\n    '''\n    Write a function to calculate the area of a kite given its length, width, base and height.\n    '''\n    A = (a*b + b*c)/2\n    return(A)\ndef area_kite6(a, b):\n    '''\n    Write a function to calculate the area of a kite given its length, width, base and height.\n    '''\n    A = a*b\n    return(A)\ndef area_sphere(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere2(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere3(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere4(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere5(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere6(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere7(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere8(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere9(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere10(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere11(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere12(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere13(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere14(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere15(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere16(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere17(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere18(r):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    A = 4*pi*r**2\n    return(A)\ndef area_sphere19(r):\n    '''\n    Write a function to calculate the area of a sphere given its radiu"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25*s*l**2)/(tan(pi/s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = float(s)\n    l = float(l)\n    if l <= 0 or s <= 0:\n        raise Exception('length and sides must be positive')\n    else:\n        return s*l*(1/2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    from math import pi, tan\n    s = int(s)\n    l = float(l)\n    a = (s * l**2) / (4 * tan(pi/s))\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    polygon_area = s * l / (2 * tan(pi / l))\n    return polygon_area\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # area of the polygon = n * s ** 2 / (4 * tan(pi/n))\n    a = s * l / (4 * tan(pi / l))\n    return a\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # The formula is n(n+1)/2\n    # The sum of divisors of a number n is n + 1/2 + 1/3 +... + 1/d\n    # For a number n, if d is an integer then n + 1/2 + 1/3 +... + 1/d = 2 * (n + 1/2)\n    # So the sum of divisors of n for an integer d can be computed by (n+1/2) * (1 + 1/d)\n    # The formula is n(n+1)/2 = d * (n+1/2)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum1 = sum1 + i\n    sum2 = 0\n    for j in range(1,n):\n        if (n/j)%1 == 0:\n            sum2 = sum2 + j\n    if sum1 == sum2:\n        return 1\n    return 0\ndef count_divisors(n): \n    '''\n    Write a function to determine how many divisors n has.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count = count + 1\n    return count\ndef digit_sum(n): \n    '''\n    Write a function that determines the sum of digits in a given integer.\n    '''\n    sum_d = 0\n    for i in str(n):\n        sum_d = sum_d + int(i)\n    return sum_d\ndef digit_product(n): \n    '''\n    Write a function that determines the product of digits in a given integer.\n    '''\n    product_d = 1\n    for i in str(n):\n        product_d = product_d * int(i)\n    return product_d\ndef main(): \n    print(div_sum(10))\n    print(div_sum(12))\n    print(div_sum(100))\n    print(div_sum(30))\n    print(div_sum(0))\n    print(div_sum(1))\n    print(div_sum(105))\n    print(div_sum(1000))\n    print(div_sum(2200))\n    print(div_sum(44))\n    print(div_sum(1003))\n    print(div_sum(111))\n    print(div_sum(1000))\n    print(div_sum(3))\n    print(div_sum(6))\n    print(div_sum(5))\n    print(div_sum(7))\n    print(div_sum(8))\n    print(div_sum(9))\n    print(div_sum(45))\n    print(div_sum(57))\n    print(div_sum(1234))\n    print(div_sum(8))\n    print(div_sum(123))\n    print(div_sum(100))\n    print(div_sum(0))\n    print(div_sum(2))\n    print(div_sum(11))\n    print(div_sum(45))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0))\n    print(div_sum(0)"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divs1 = 0 \n    sum_of_divs2 = 0 \n    for i in range(1,n): \n        if (n % i == 0): \n            sum_of_divs1 += i \n    sum_of_divs1 = sum_of_divs1 / n \n    \n    for j in range(1, n): \n        if (n % j == 0): \n            sum_of_divs2 += j \n    sum_of_divs2 = sum_of_divs2 / n \n    \n    if (sum_of_divs1 == sum_of_divs2): \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # brute-force \n    # O(n^2)\n    # O(1)\n    max_n = math.ceil(n/2)\n    for i in range(1, max_n):\n        for j in range(i, max_n):\n            if (i + j == n):\n                return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_div(n):\n        if n == 0:\n            return [0]\n        else:\n            return [x+n for x in range(1,n) if n%x==0]\n    return len(set(sum_div(n)+sum_div(n-2)))==2\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    return s\ndef div_sum_2(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                s += i\n            else:\n                s += i + n / i\n    return s\ndef check_pythagorean(a, b, c): \n    '''\n    Given three integers, determine if they can be the sides of a pythagorean triple\n    '''\n    if (math.sqrt(a ** 2 + b ** 2) == c) or (math.sqrt(b ** 2 + c ** 2) == a) or (math.sqrt(c ** 2 + a ** 2) == b):\n        return True\n    else:\n        return False\ndef check_pythagorean_2(a, b, c): \n    '''\n    Given three integers, determine if they can be the sides of a pythagorean triple\n    '''\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\ndef check_pythagorean_3(a, b, c):\n    '''\n    Given three integers, determine if they can be the sides of a pythagorean triple\n    '''\n    return (math.sqrt(a ** 2 + b ** 2) == c) or (math.sqrt(a ** 2 + c ** 2) == b) or (math.sqrt(b ** 2 + c ** 2) == a)\ndef primes(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    s = [2]\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            s.append(i)\n    return s\ndef primes_2(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    s = [2]\n    if n == 0 or n == 1:\n        return s\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            s.append(i)\n    return s\ndef primes_3(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    s = [2]\n    if n == 0 or n == 1:\n        return s\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            s.append(i)\n    return s\ndef primes_4(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    s = [2]\n    if n == 0 or n == 1:\n        return s\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            s.append(i)\n    return s\ndef primes_5(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    s = [2]\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            s.append(i)\n    return s\ndef primes_6(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    s = [2]\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            s.append(i)\n    return s\ndef primes_7(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    s = [2]\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            s.append(i)\n    return s\ndef primes_8(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    s = [2]\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            s.append(i)\n    return s\ndef primes_9(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    s = [2]\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            s.append(i)\n    return s\ndef primes_10(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    s = [2]\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            s.append(i)\n    return s\ndef primes_11(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    s = [2]\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            s.append(i)\n    return s\ndef primes_12(n):\n    '''\n    Write a function that returns all primes up to n.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    s = [2]\n    for i in range(3, n + 1):\n        is_prime = True\n        for x in s:\n            if x > math.sqrt(i):\n                break\n            if i % x == 0:\n                i"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, int(n/2) + 1):\n        if (n % i == 0):\n            sum1 = sum1 + i\n    for j in range(1, int(n/2) + 1):\n        if (sum1 % j == 0):\n            sum2 = sum2 + j\n    if (sum2 == sum1):\n        return True\n    else: \n        return False \ndef perfect_sq(n): \n    '''\n    Write a function that determines if the sum of its digits is equal to the square of the sum of its digits.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in str(n):\n        sum1 = sum1 + int(i)\n    for j in str(n):\n        sum2 = sum2 + int(j) ** 2\n    if (sum1 == sum2):\n        return True\n    else: \n        return False \ndef dic_sum(n): \n    '''\n    Write a function to return the sum of all the digits in a dictionary.\n    '''\n    sum1 = 0\n    for i in n:\n        sum1 = sum1 + int(i)\n    return sum1 \ndef list_pos_neg(n): \n    '''\n    Write a function to return a list of all positive numbers and a list of all negative numbers in a given list.\n    '''\n    pos_list = []\n    neg_list = []\n    for i in range(len(n)):\n        if (n[i] > 0):\n            pos_list.append(n[i])\n        elif (n[i] < 0):\n            neg_list.append(n[i])\n    return [pos_list, neg_list]\ndef list_sum(n): \n    '''\n    Write a function to return the sum of all the numbers in a given list.\n    '''\n    sum1 = 0\n    for i in range(len(n)):\n        sum1 = sum1 + n[i]\n    return sum1 \ndef list_max(n): \n    '''\n    Write a function to return the maximum element in a given list.\n    '''\n    max1 = 0\n    for i in range(len(n)):\n        if (n[i] > max1):\n            max1 = n[i]\n    return max1 \ndef list_count(n): \n    '''\n    Write a function to count the number of elements in a list that are greater than the preceding element.\n    '''\n    count = 0\n    for i in range(len(n)):\n        if (n[i] > n[i - 1]):\n            count = count + 1\n    return count \ndef list_reverse(n): \n    '''\n    Write a function to return the reverse of a given list.\n    '''\n    temp = []\n    for i in range(len(n)):\n        temp.append(n[len(n) - i - 1])\n    return temp \ndef list_count(n): \n    '''\n    Write a function to return the number of times a given element occurs in a list.\n    '''\n    count = 0\n    for i in range(len(n)):\n        if (n[i] == 3):\n            count = count + 1\n    return count \ndef list_sum(n): \n    '''\n    Write a function to return the sum of the elements in a given list.\n    '''\n    sum1 = 0\n    for i in range(len(n)):\n        sum1 = sum1 + n[i]\n    return sum1 \ndef list_count(n): \n    '''\n    Write a function to return the number of times a given element occurs in a list.\n    '''\n    count = 0\n    for i in range(len(n)):\n        if (n[i] == 3):\n            count = count + 1\n    return count \ndef list_even_sum(n): \n    '''\n    Write a function to return the sum of the even elements in a given list.\n    '''\n    sum1 = 0\n    for i in range(len(n)):\n        if (n[i] % 2 == 0):\n            sum1 = sum1 + n[i]\n    return sum1 \ndef list_sum_exclude_first(n): \n    '''\n    Write a function to return the sum of the numbers in a given list, excluding the first element.\n    '''\n    sum1 = 0\n    for i in range(1, len(n)):\n        sum1 = sum1 + n[i]\n    return sum1 \ndef list_sum_exclude_last(n): \n    '''\n    Write a function to return the sum of the numbers in a given list, excluding the last element.\n    '''\n    sum1 = 0\n    for i in range(1, len(n)):\n        sum1 = sum1 + n[i]\n    return sum1 \ndef list_sum_exclude_first_and_last(n): \n    '''\n    Write a function to return the sum of the numbers in a given list, excluding the first and last elements.\n    '''\n    sum1 = 0\n    for i in range(1, len(n) - 1):\n        sum1 = sum1 + n[i]\n    return sum1 \ndef list_count(n): \n    '''\n    Write a function to return the number of times a given element occurs in a list.\n    '''\n    count = 0\n    for i in range(len(n)):\n        if (n[i] == 3):\n            count = count + 1\n    return count \ndef list_count(n): \n    '''\n    Write a function to return the number of times a given element occurs in a list.\n    '''\n    count = 0\n    for i in range(len(n)):\n        if (n[i] == 3):\n            count = count + 1\n    return count \ndef list_count_exclude_first(n): \n    '''\n    Write a function to return the number of times a given element occurs in a list, excluding the first element.\n    '''\n    count = 0\n    for i in range(1, len(n)):\n        if (n[i] == 3):\n            count = count + 1\n    return count \ndef list_count_exclude_first_and_last(n): \n    '''\n    Write a function to return the number of times a given element occurs in a list, excluding the first and last elements.\n    '''\n    count = 0\n    for i in range(1, len(n) - 1):\n        if (n[i] == 3):\n            count = count + 1\n    return count \ndef list_count(n): \n    '''\n    Write a function to return the number of times a given element occurs in a list.\n    '''\n    count = 0\n    for i in range(len(n)):\n        if (n[i] == 3):\n            count = count + 1\n    return count \ndef list_count_exclude_last(n): \n    '''\n    Write a function to return the number of times a given element occurs in a list, excluding the last element.\n    '''\n    count = 0\n    for i in range(1, len(n)):\n        if (n[i] == 3):\n            count = count + 1\n    return count \ndef list_count_exclude_last_and_first(n): \n    '''\n    Write a function to return the number of times a given element occurs in a list, excluding the first and last elements.\n    '''\n    count = 0\n    for i in range(1, len(n) - 1):\n        if (n[i] == 3):\n            count = count + 1\n    return count \ndef list_sum(n): \n    '''\n    Write a function to return the sum of the numbers in a given list.\n    '''\n    sum1 = 0\n    for i in range(len(n)):\n        sum1 = sum1 + n[i]\n    return sum1 \ndef list_sum(n): \n    '''\n    Write a function to return the sum of the numbers in a given list.\n    '''\n    sum1 = 0\n    for i in range(le"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i=1\n    sum=0\n    while i<n:\n        if n%i==0:\n            sum=sum+i\n        i+=1\n    return sum\n    # def same_sum(n):\n    #     sum_n=sum(div_sum(n))\n    #     return n==sum_n\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1:\n        return False\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    assert isinstance(n, int), \"Input is not an integer.\"\n    if n < 1:\n        raise ValueError(\"Input is not positive.\")\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    return sum(divisors)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(alpha)):\n            if str1[i].lower() == alpha[j].lower():\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    freq = {}\n    for i in str1.lower():\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #print(str1.upper())\n    count = 0\n    for i in str1:\n        if ord(i) >= 65 and ord(i) <= 90:\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return str1.lower().count(str(i) for i in range(ord('a'), ord('z')+1))\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = 0\n    for ch in str1.lower():\n        if ord(ch) >= 97 and ord(ch) <= 122:\n            char_position += 1\n    return char_position\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from collections import Counter\n    char_count = Counter(str1.lower())\n    return sum(char_count.values())\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #return {character: str1.count(character) for character in str1 if character.lower() in 'abcdefghijklmnopqrstuvwxyz'}\n    return {letter: str1.count(letter) for letter in str1.lower() if letter.lower() in 'abcdefghijklmnopqrstuvwxyz'}\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #str1 = \"Welcome to the world of Geeks\"\n    count = 0\n    a = ord('a')\n    z = ord('z')\n    A = ord('A')\n    Z = ord('Z')\n    for i in str1:\n        #print(ord(i))\n        if (ord(i)>=a and ord(i)<=z) or (ord(i)>=A and ord(i)<=Z):\n            count += 1\n    print(count)\ncount_char_position(\"Welcome to the world of Geeks\")\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize the variable 'total' to 0\n    # loop through the string in the argument\n    # check if the character is an alphabet and a number\n    # if so, convert it to upper case and check if it is in the English alphabet\n    # if yes, add 1 to the total\n    # return the total\n    total = 0\n    for character in str1:\n        if character.isalpha() and character.upper() in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            total += 1\n    return total\n    \ndef count_word_position(str1): \n    '''\n    Write a function to count the number of words in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize the variable 'total' to 0\n    # split the string into a list of words\n    # loop through the list of words\n    # check if the word is an alphabet and a number\n    # if so, convert it to upper case and check if it is in the English alphabet\n    # if yes, add 1 to the total\n    # return the total\n    total = 0\n    words = str1.split()\n    for word in words:\n        if word.isalpha() and word.upper() in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            total += 1\n    return total\n    \ndef count_chars(str1): \n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    # initialize the variable 'total' to 0\n    # loop through the string in the argument\n    # add 1 to the variable 'total'\n    # return the total\n    total = 0\n    for character in str1:\n        total += 1\n    return total\n    \ndef count_words(str1): \n    '''\n    Write a function to count the number of words in a string.\n    '''\n    # initialize the variable 'total' to 0\n    # split the string into a list of words\n    # add 1 to the variable 'total' for each word in the list\n    # return the total\n    total = 0\n    words = str1.split()\n    for word in words:\n        total += 1\n    return total\n    \ndef replace_chars(str1): \n    '''\n    Write a function to replace a character in a string with another character.\n    '''\n    # initialize the list'replacements' to an empty list\n    # loop through the string in the argument\n    # replace each character with another character\n    # add the list to the variable'replacements'\n    # return the variable'replacements'\n    replacements = []\n    for character in str1:\n        replacements.append(character.replace(character, '*'))\n    return replacements\n    \ndef rotate_chars(str1): \n    '''\n    Write a function to rotate characters in a string.\n    '''\n    # initialize the list 'rotations' to an empty list\n    # loop through the string in the argument\n    # replace each character with its 'rotation'\n    # add the list to the variable 'rotations'\n    # return the variable 'rotations'\n    rotations = []\n    for character in str1:\n        rotations.append(character.lower())\n    for character in rotations:\n        if character in \"abcdefghijklmnopqrstuvwxyz\":\n            rotations[rotations.index(character)] = chr(ord(character) + 3)\n    return rotations\n    \ndef in_array(str1): \n    '''\n    Write a function to check whether a string is contained in a list of strings.\n    '''\n    # initialize the variable 'found' to False\n    # loop through the list in the argument\n    # check if the string in the list\n    # if yes, set the variable 'found' to True\n    # return the variable 'found'\n    found = False\n    for str2 in str1:\n        if str2 in str1:\n            found = True\n    return found\n    \ndef split_strings(str1): \n    '''\n    Write a function to split strings on the last whitespace character.\n    '''\n    # initialize the list'splits' to an empty list\n    # split the string on the last whitespace character\n    # loop through the list of strings in the variable'splits'\n    # add the list of strings to the variable'splits'\n    # return the variable'splits'\n    splits = []\n    splits = str1.split()\n    return splits\n    \ndef reverse_string(str1): \n    '''\n    Write a function to reverse the order of a string.\n    '''\n    # initialize the list'reversed' to an empty list\n    # loop through the string in the argument\n    # add each character to the list'reversed'\n    # return the variable'reversed'\n    reversed = []\n    for character in str1:\n        reversed.append(character)\n    reversed.reverse()\n    return reversed\n    \ndef remove_from_end(str1): \n    '''\n    Write a function to remove characters from the end of a string.\n    '''\n    # initialize the variable'size' to the length of the string in the argument\n    # initialize the list 'chars' to an empty list\n    # loop through the string in the argument\n    # check if the index of the character is less than the size of the string minus one\n    # if yes, add the character to the list 'chars'\n    # reduce the value of the variable'size' by one\n    # return the variable 'chars'\n    size = len(str1)\n    chars = []\n    for character in str1:\n        if len(str1) - 1 >= size - 1:\n            chars.append(character)\n    size -= 1\n    return chars\n    \ndef compare_ends(str1): \n    '''\n    Write a function to compare the first and last characters of a string.\n    '''\n    # initialize the variable 'equal' to False\n    # initialize the variable 'first' to the first character in the string\n    # initialize the variable 'last' to the last character in the string\n    # loop through the string in the argument\n    # check if the character in the string is equal to the first character in the string\n    # if yes, set the variable 'equal' to True\n    # check if the character in the string is equal to the last character in the string\n    # if yes, set the variable 'equal' to True\n    # return the variable 'equal'\n    equal = False\n    first = str1[0]\n    last = str1[-1]\n    for character in str1:\n        if character == first:\n            equal = True\n        if character == last:\n            equal = True\n    return equal\n    \ndef make_spoonerism(str1): \n    '''\n    Write a function to create a spoonerism (a string that changes the first letters of two words).\n    '''\n    # initialize the variable 'first' to the first character in the string\n    # initialize the variable 'last' to the last character in the string\n    # initialize the variable'spoonerism' to an empty string\n    # split the string into a list of words\n    # loop through the list of words\n    # check if the first word in the list does not equal the first character in the variable 'last'\n    # if yes, add the word to the variable'spoonerism'\n    # check if the last word in the list does not equal the last character in the variable 'last'\n    # if yes, add the word to the variable'spoonerism'\n    # return the variable'spoonerism'\n    first = str1[0]\n    last = str1[-1]\n    spoonerism = \"\"\n    spoonerism = str1.replace(str1[0], str1[-1])\n    spoonerism = spoonerism.replace(str1[-1], str1[0])\n    words = str1.split()\n    for word in words:\n        if word[0]!= first:\n            spoonerism += word + \" \"\n        if word[0] == first:\n            spoonerism += word[1:] + word[0] + \" \"\n    for word in words:\n        if word[-1]!= last:\n            spoonerism += word + \" \"\n        if word[-"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count "
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    num_even_pairs = 0\n    for num in A:\n        if xor_to_even(num) == True:\n            num_even_pairs += 1\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # If there are no odd numbers in the array, return 0\n    if len(A) == 0: return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return len([i for i in A if i ^ (i+1) & 1 == 0])\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]%2 == 0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1,len(A)): \n            if(A[i]^A[j]%2==0): \n                count+=1\n    return count\n    \n    \ndef find_even_pair_hash(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    hash = {}\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1,len(A)): \n            hash[(A[i],A[j])] = hash.get((A[i],A[j]),0)+1\n    for key,value in hash.items(): \n        if(value%2==0): \n            count += int(value/2)\n    return count\n    \n    \ndef find_even_pair_hash2(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    hash = {}\n    count = 0\n    for i in range(len(A)): \n        hash[A[i]] = hash.get(A[i],0)+1\n    for key,value in hash.items(): \n        if(value%2==0): \n            count += int(value/2)\n    return count\n    \n    \ndef find_even_pair_hash3(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    hash = {}\n    count = 0\n    for i in range(len(A)): \n        hash[A[i]] = hash.get(A[i],0)\n        if(A[i]%2==0): \n            hash[A[i]] += 1\n    for key,value in hash.items(): \n        if(value%2==0): \n            count += int(value/2)\n    return count\n    \n    \ndef find_even_pair_count(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1,len(A)): \n            if(A[i]^A[j]%2==0): \n                count+=1\n    return count\n    \n    \ndef is_even(number): \n    '''\n    Write a function to test whether the number is even.\n    '''\n    return number%2==0\n    \ndef is_even_hash(number): \n    '''\n    Write a function to test whether the number is even.\n    '''\n    return hash(number)%2==0\n    \n    \ndef is_even_list(number): \n    '''\n    Write a function to test whether the number is even.\n    '''\n    return is_even(number[0])\n    \n    \ndef test_is_even(): \n    '''\n    Write a function to test whether the number is even.\n    '''\n    if(is_even(23)): \n        print(\"23 is even\")\n    else: \n        print(\"23 is not even\")\n    if(is_even(100)): \n        print(\"100 is even\")\n    else: \n        print(\"100 is not even\")\n    if(is_even(100)): \n        print(\"100 is even\")\n    else: \n        print(\"100 is not even\")\n    if(is_even(100)): \n        print(\"100 is even\")\n    else: \n        print(\"100 is not even\")\n    if(is_even(100)): \n        print(\"100 is even\")\n    else: \n        print(\"100 is not even\")\n    \n    \ndef is_even_array(number): \n    '''\n    Write a function to test whether the number is even.\n    '''\n    return is_even(number[0])\n    \n    \ndef test_is_even_array(): \n    '''\n    Write a function to test whether the number is even.\n    '''\n    if(is_even_array([23])): \n        print(\"23 is even\")\n    else: \n        print(\"23 is not even\")\n    if(is_even_array([100])): \n        print(\"100 is even\")\n    else: \n        print(\"100 is not even\")\n    if(is_even_array([100])): \n        print(\"100 is even\")\n    else: \n        print(\"100 is not even\")\n    if(is_even_array([100])): \n        print(\"100 is even\")\n    else: \n        print(\"100 is not even\")\n    if(is_even_array([100])): \n        print(\"100 is even\")\n    else: \n        print(\"100 is not even\")\n    \n    \ndef sum_arrays(array1,array2): \n    '''\n    Write a function that takes 2 arrays and returns the sum of each element in each array.\n    '''\n    if(len(array1)!=len(array2)): \n        return -1\n    return sum(array1) + sum(array2)\n    \n    \ndef sum_arrays_hash(array1,array2): \n    '''\n    Write a function that takes 2 arrays and returns the sum of each element in each array.\n    '''\n    if(len(array1)!=len(array2)): \n        return -1\n    sum1 = sum2 = 0\n    for i in range(len(array1)): \n        sum1 += array1[i]\n        sum2 += array2[i]\n    return sum1+sum2\n    \n    \ndef sum_arrays_hash2(array1,array2): \n    '''\n    Write a function that takes 2 arrays and returns the sum of each element in each array.\n    '''\n    sum1 = sum2 = 0\n    sum1 = sum(array1)\n    sum2 = sum(array2)\n    return sum1+sum2\n    \n    \ndef sum_arrays_hash3(array1,array2): \n    '''\n    Write a function that takes 2 arrays and returns the sum of each element in each array.\n    '''\n    sum1 = sum2 = 0\n    sum1 = sum(array1)\n    sum2 = sum(array2)\n    return sum1+sum2\n    \n    \ndef sum_arrays_list(array1,array2): \n    '''\n    Write a function that takes 2 arrays and returns the sum of each element in each array.\n    '''\n    if(len(array1)!=len(array2)): \n        return -1\n    sum1 = sum2 = 0\n    sum1 = sum(array1)\n    sum2 = sum(array2)\n    return sum1+sum2\n    \n    \ndef sum_arrays_list2(array1,array2): \n    '''\n    Write a function that takes 2 arrays and returns the sum of each element in each array.\n    '''\n    sum1 = sum2 = 0\n    sum1 = sum(array1)\n    sum2 = sum(array2)\n    return sum1+sum2\n    \n    \ndef sum_arrays_list3(array1,array2): \n    '''\n    Write a function that takes 2 arrays and returns the sum of each element in each array.\n    '''\n    sum1 = sum2 = 0\n    sum1 = sum(array1)\n    sum2 = sum(array2)\n    return sum1+sum2\n    \n    \ndef test_sum_arrays(): \n    '''\n    Write a function that takes 2 arrays and returns the sum of each element in each array.\n    '''\n    if(sum_arrays([1,2,3],[4,5,6])!=-1): \n        print(\"1,2,3,4 are added to 4,5,6\")\n    else: \n        print(\"1,2,3 are added to 4,5,6\")\n    if(sum_arrays([1,2,3],[4,5,6])!=-1):"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #returns the number of even pairs, where xor is even\n    def helper(A):\n        if len(A) < 2:\n            return 0\n        left = 0\n        right = len(A) - 1\n        count = 0\n        while left < right:\n            if A[left] ^ A[right] == 0:\n                count += 1\n                right -= 1\n                left += 1\n            elif A[left] ^ A[right] < 0:\n                left += 1\n            else:\n                right -= 1\n        return count\n    #time complexity: O(n)\n    #space complexity: O(1)\n    return helper(A) - helper(A) % 2\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    \n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            \n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    sum = 0\n    for a in range(0, len(A)):\n        for b in range(a+1, len(A)):\n            if((A[a]^A[b]) % 2 == 0):\n                sum += 1\n    return sum\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    if power == n:\n        return power\n    return power + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Determine the number of leading zeros\n    zeros = 0\n    while n and not n & 1:\n        n >>= 1\n        zeros += 1\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if n == 0:\n        return 1\n    if n > 0:\n        return 2**ceil(log2(n))\n    if n < 0:\n        return -1*next_power_of_2(-1*n)\n    \ndef is_power_of_2(n):\n    '''\n    Write a python function that returns True if n is a power of 2, and False otherwise.\n    '''\n    return n>0 and n==(n & (n-1))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n and not(n & (n - 1))): \n        return n \n    n = n - 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n \n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2**math.ceil(math.log(n,2)))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    return 2**(n-1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return (n if n == 0 else 2**ceil(log(n, 2)))\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for y in a:\n        if y == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Variable to count frequency of x.\n    count = 0;\n    # loop through the list and check if the element in the list is equal to x.\n    for i in a: \n        if (i == x): \n            # If the element is equal to x, increment count by 1.\n            count = count + 1\n    return count;"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for element in a: \n        if element == x: \n            count = count + 1\n    return count \ndef remove(a,x): \n    '''\n    Write a function to remove a given element from a list.\n    '''\n    i = 0\n    while i<len(a): \n        if a[i] == x: \n            a.pop(i)\n        else: \n            i = i + 1\n    return a \ndef remove_all(a,x): \n    '''\n    Write a function to remove all occurrences of a given element in a list.\n    '''\n    while x in a: \n        a.remove(x)\n    return a \ndef index(a,x,start): \n    '''\n    Write a function to return the index of the first occurrence of a given element in a list.\n    '''\n    for i in range(start,len(a)): \n        if a[i] == x: \n            return i\ndef insert(a,x,pos): \n    '''\n    Write a function to insert an element in a given position in a list.\n    '''\n    a.insert(pos,x)\n    return a \ndef sum(a): \n    '''\n    Write a function to return the sum of all the elements in a list.\n    '''\n    sum = 0\n    for i in a: \n        sum = sum + i\n    return sum \ndef max(a): \n    '''\n    Write a function to return the maximum value in a given list.\n    '''\n    max = a[0]\n    for i in a: \n        if max < i: \n            max = i\n    return max \ndef min(a): \n    '''\n    Write a function to return the minimum value in a given list.\n    '''\n    min = a[0]\n    for i in a: \n        if min > i: \n            min = i\n    return min \ndef sort(a): \n    '''\n    Write a function to sort a given list in ascending order.\n    '''\n    a.sort()\n    return a \ndef reverse(a): \n    '''\n    Write a function to reverse the order of elements in a list.\n    '''\n    a.reverse()\n    return a \ndef remove_duplicates(a): \n    '''\n    Write a function to remove all the duplicate elements from a given list.\n    '''\n    a = list(dict.fromkeys(a))\n    return a \ndef copy(a): \n    '''\n    Write a function to copy a given list.\n    '''\n    b = []\n    for i in a: \n        b.append(i)\n    return b \ndef sample(a,b): \n    '''\n    Write a function to return a given list elements by sampling at random.\n    '''\n    import random\n    c = []\n    for i in range(b): \n        c.append(a[random.randint(0,len(a)-1)])\n    return c \ndef clear(a): \n    '''\n    Write a function to clear a given list.\n    '''\n    a.clear()\n    return a \ndef reversed(a): \n    '''\n    Write a function to return a reversed list of a given list.\n    '''\n    a.reverse()\n    return a \ndef delete(a,x): \n    '''\n    Write a function to delete a given element from a list.\n    '''\n    i = 0\n    while i<len(a): \n        if a[i] == x: \n            a.pop(i)\n        else: \n            i = i + 1\n    return a \ndef concatenate(a,b): \n    '''\n    Write a function to concatenate two lists.\n    '''\n    a.extend(b)\n    return a \ndef palindrome(a): \n    '''\n    Write a function to check whether a given list is palindrome or not.\n    '''\n    return a == a[::-1]\ndef palindrome_index(a): \n    '''\n    Write a function to return the index of the first element of palindrome in a list.\n    '''\n    for i in range(len(a)): \n        if a[i] == a[len(a)-i-1]: \n            return i\n    return None\ndef remove_first(a,x): \n    '''\n    Write a function to remove the first occurrence of a given element in a list.\n    '''\n    i = 0\n    while i<len(a): \n        if a[i] == x: \n            a.pop(i)\n            break\n        else: \n            i = i + 1\n    return a \ndef frequency_first(a,x): \n    '''\n    Write a function to count the number of occurrences of a given element in the first half of a list.\n    '''\n    count = 0\n    for element in a[:len(a)//2]: \n        if element == x: \n            count = count + 1\n    return count \ndef frequency_last(a,x): \n    '''\n    Write a function to count the number of occurrences of a given element in the last half of a list.\n    '''\n    count = 0\n    for element in a[len(a)//2:]: \n        if element == x: \n            count = count + 1\n    return count \ndef rotate(a,b): \n    '''\n    Write a function to rotate a given list by a given number of places.\n    '''\n    a.extend(a[0:b])\n    a.pop(0)\n    return a \ndef rotate_k(a,k): \n    '''\n    Write a function to rotate a given list by k places.\n    '''\n    l = len(a)\n    for i in range(k): \n        a.append(a[0])\n        a.pop(0)\n    return a \ndef front(a,x): \n    '''\n    Write a function to get the list of all the elements that occur in a list before the first occurrence of a given element.\n    '''\n    i = 0\n    b = []\n    while i<len(a): \n        if a[i] == x: \n            break\n        else: \n            b.append(a[i])\n        i = i + 1\n    return b \ndef back(a,x): \n    '''\n    Write a function to get the list of all the elements that occur in a list after the last occurrence of a given element.\n    '''\n    i = 0\n    b = []\n    while i<len(a): \n        if a[i] == x: \n            break\n        else: \n            b.append(a[i])\n        i = i + 1\n    return b \ndef remove_element(a,x): \n    '''\n    Write a function to remove the first occurrence of a given element in a list.\n    '''\n    i = 0\n    while i<len(a): \n        if a[i] == x: \n            a.pop(i)\n            break\n        i = i + 1\n    return a \ndef reverse_sublist(a,p,q): \n    '''\n    Write a function to reverse a sublist in a given list.\n    '''\n    i = p\n    j = q\n    while i<j: \n        t = a[i]\n        a[i] = a[j]\n        a[j] = t\n        i = i + 1\n        j = j - 1\n    return a \ndef get_pivot(a,p,q): \n    '''\n    Write a function to get the index of pivot element of a sublist in a given list.\n    '''\n    if p<q: \n        for i in range(p,q): \n            if a[i]>a[q]: \n                return i\n    elif p>q: \n        for i in range(q,p): \n            if a[i]<a[p]: \n                return i\n    else: \n        return p\ndef partition(a,p,q): \n    '''\n    Write a function to partition a give"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for element in a:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if (i == x): \n            count = count + 1\n    return count \n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for i in a:\n        if i == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for y in a:\n        if y == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    s = 0\n    for i in range(m, n+1):\n        s += list1[i]\n        \n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:                                                                                                                                                                                        \n        temp = m                                                                                                                                                                                     \n        m = n                                                                                                                                                                                     \n        n = temp                                                                                                                                                                                     \n    if m == 0:                                                                                                                                                                                        \n        return list1[n]                                                                                                                                                                                    \n    else:                                                                                                                                                                                            \n        return list1[n] + sum_range_list(list1, m-1, n-1)                                                                                                                                                 \n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range_list = 0\n    for i in list1:\n        if i >= m and i <= n:\n            sum_range_list += i\n    return sum_range_list\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    if m > n:                                                                                                                                                                                                                            \n        return 0                                                                                                                                                                                                                        \n        \n    sum = 0\n    \n    for i in list1[m:n + 1]:\n        sum += i\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # s=0\n    # for i in range(m,n+1):\n    #     s+=i\n    # return s\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum = 0\n    for i in range(m, n+1):\n        sum = sum + list1[i]\n    return sum\n    \n    \n    \nlist1 = [10, 20, 30, 40, 50]                                                                                                                                                                                                    \nsum1 = sum_range_list(list1, 1, 3)\nprint(sum1)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:                                                                                                                                                                                                                        \n        print('The starting index should be smaller than the ending index')                                                                                                                                                    \n    else:                                                                                                                                                                                                                        \n        total = 0                                                                                                                                                                                                                        \n        for num in list1[m:n+1]:                                                                                                                                                                                                            \n            total += num                                                                                                                                                                                                    \n        print(total)                                                                                                                                                                                                                \n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in range(m, n + 1):\n        sum += list1[x]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for num in range(m,n+1):\n        sum += list1[num]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its side.\n    '''\n    return (3*math.sqrt(3))/2*a**2\ndef circumference_rhombus(a, b):\n    '''\n    Write a function to find the circumference of a regular rhombus from the length of its shorter sides.\n    '''\n    return a*2+b*2\ndef area_parallelogram(a, b):\n    '''\n    Write a function to find the area of a regular parallelogram from the length of its shorter sides.\n    '''\n    return a*b\ndef area_trapezium(a, b, c):\n    '''\n    Write a function to find the area of a regular trapezium from the length of its sides.\n    '''\n    return (a+b)/2*c\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its side.\n    '''\n    return a**2\ndef area_kite(a):\n    '''\n    Write a function to find the area of a regular kite from the length of its shorter sides.\n    '''\n    return a**2/math.sqrt(2)\ndef circum_circle(a):\n    '''\n    Write a function to find the circumference of a circle from the radius.\n    '''\n    return 2*math.pi*a\ndef circum_kite(a, b):\n    '''\n    Write a function to find the circumference of a kite from the radius of the shorter sides.\n    '''\n    return 2*a+2*b\ndef circum_paral_tri(a, b):\n    '''\n    Write a function to find the circumference of a regular paralellogram from the length of its shorter sides.\n    '''\n    return a+b+math.sqrt((a+b)**2-4*a*b)\ndef circum_pyth(a):\n    '''\n    Write a function to find the circumference of a regular pythagorean triange from the length of its side.\n    '''\n    return a*4\ndef circum_rect(a, b):\n    '''\n    Write a function to find the circumference of a regular rectangle from the length of its shorter sides.\n    '''\n    return 2*(a+b)\ndef area_rhombus(a, b):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its shorter sides.\n    '''\n    return a*b\ndef area_trian(a, b):\n    '''\n    Write a function to find the area of a regular triangle from the length of its side.\n    '''\n    return a*b/2\ndef area_rect(a, b):\n    '''\n    Write a function to find the area of a regular rectangle from the length of its side.\n    '''\n    return a*b\ndef area_kite(a, b):\n    '''\n    Write a function to find the area of a regular kite from the length of its shorter sides.\n    '''\n    return a*b/math.sqrt(2)\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its side.\n    '''\n    return a**2\ndef circum_circ(a):\n    '''\n    Write a function to find the circumfrance of a circle from the radius.\n    '''\n    return 2*math.pi*a\ndef circum_rhombus(a, b):\n    '''\n    Write a function to find the circumfrance of a rhombus from the radius of the shorter sides.\n    '''\n    return (a+b)*2\ndef circum_parallelogram(a, b):\n    '''\n    Write a function to find the circumfrance of a parallelogram from the radius of the shorter sides.\n    '''\n    return a+b+math.sqrt((a+b)**2-4*a*b)\ndef circum_trapezium(a, b, c):\n    '''\n    Write a function to find the circumfrance of a trapezium from the radius of the shorter sides.\n    '''\n    return a+b+math.sqrt((a+b)**2-(4*a*b)/4*c)\ndef circum_rect_new(a, b):\n    '''\n    Write a function to find the circumfrance of a rectangle from the radius of the shorter sides.\n    '''\n    return a+b\ndef circum_square(a):\n    '''\n    Write a function to find the circumfrance of a square from the radius of the side.\n    '''\n    return a**2\ndef circum_kite_new(a, b):\n    '''\n    Write a function to find the circumfrance of a kite from the radius of the shorter sides.\n    '''\n    return a**2/math.sqrt(2)\ndef circum_rhombus(a, b):\n    '''\n    Write a function to find the circumfrance of a rhombus from the radius of the shorter sides.\n    '''\n    return a*b*math.sqrt(3)/2\ndef circum_kite(a, b):\n    '''\n    Write a function to find the circumfrance of a kite from the radius of the shorter sides.\n    '''\n    return a*b\ndef circum_trapezium(a, b, c):\n    '''\n    Write a function to find the circumfrance of a trapezium from the radius of the shorter sides.\n    '''\n    return a+b+math.sqrt((a+b)**2-(4*a*b)/4*c)\ndef circum_square(a):\n    '''\n    Write a function to find the circumfrance of a square from the radius of the side.\n    '''\n    return a**2\ndef circum_paral(a, b):\n    '''\n    Write a function to find the circumfrance of a paralelogram from the radius of the shorter sides.\n    '''\n    return a+b+math.sqrt((a+b)**2-4*a*b)\ndef perimeter_rect(a, b):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_kite(a, b):\n    '''\n    Write a function to find the perimeter of a regular kite from the length of its shorter sides.\n    '''\n    return 2*a+2*b\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its side.\n    '''\n    return 4*a\ndef circum_rect(a, b):\n    '''\n    Write a function to find the circumfrance of a regular rectangle from the length of its sides.\n    '''\n    return 2*(a+b)\ndef circum_kite(a, b):\n    '''\n    Write a function to find the circumfrance of a regular kite from the length of its shorter sides.\n    '''\n    return 2*a+2*b\ndef area_circ(a):\n    '''\n    Write a function to find the area of a circle from the radius.\n    '''\n    return math.pi*a**2\ndef area_rhombus(a, b):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its shorter sides.\n    '''\n    return a*b/2\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its side.\n    '''\n    return a**2\ndef area_rect(a, b):\n    '''\n    Write a function to find the area of a regular rectangle from the length of its side.\n    '''\n    return a*b\ndef area_tri(a, b):\n    '''\n    Write a function to find the area of a regular triangle from the length of its side.\n    '''\n    return a*b/2\ndef area_kite(a, b):\n    '''\n    Write a function to find the area of a regular kite from the length of its shorter sides.\n    '''\n    retur"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #print(\"Original data: \", a)\n    p = a * 5\n    #print(\"Perimeter: \", p)\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = int(a)\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(len(s)-2):\n        if s[i]=='d' and s[i+1]=='e' and s[i+2]=='d':\n            count+=1\n    return count\n    \n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == \"std\":\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = 0\n    for _ in range(len(s)-2):\n        if s[_] == 'd' and s[_+1] == 'e' and s[_+2] == 'd':\n            c+=1\n    return c\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i] == 'd' and s[i+1] == 'e' and s[i+2] == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    if len(s) < 1:\n        return 0\n    \n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i] =='s' and s[i+1] == 'd' and s[i+2] == 't':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    str_count = 0\n    for char in s:\n        if char =='std':\n            str_count += 1\n    return str_count\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for x in test_tuple:\n        if not isinstance(x, tuple):\n            return False\n    for y in test_tuple:\n        if test_tuple.count(y)!= len(test_tuple):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    import datetime\n    check_data_type = True\n    i = 0\n    while i < len(test_tuple) - 1:\n        if type(test_tuple[i])!= type(test_tuple[i+1]):\n            check_data_type = False\n        i += 1\n    return check_data_type\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    count = 0\n    for i in test_tuple:\n        if type(i) == type(test_tuple[0]):\n            count += 1\n    return count == len(test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = []\n    for x in test_tuple:\n        test_list.append(type(x))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)-1):\n        if type(test_tuple[i])!= type(test_tuple[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if isinstance(test_tuple,tuple):\n        return type(test_tuple[0]) == type(test_tuple[1]) == type(test_tuple[2]) == type(test_tuple[3]) == type(test_tuple[4])\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple1 = test_tuple\n    \n    if len(set(tuple1)) == 1:\n        print('All elements have same data type.')\n    else:\n        print('All elements have different data types.')\n        \n    return\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return len(set(map(type, test_tuple))) == 1\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    list_of_types = []\n    for item in test_tuple:\n        list_of_types.append(type(item))\n    if len(list_of_types) > 1:\n        if (list_of_types.count(list_of_types[0]) == len(list_of_types)):\n            return True\n        else:\n            return False\n    else:\n        return True\n    \n    \nif __name__ == '__main__':\n    test_tuple = (1, \"Python\", \"Java\")\n    check_type(test_tuple)"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n < 2:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return False if arr[0] == x else True\n    if n == 2:\n        return True if arr[0] == arr[1] and arr[0] == x else False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n    else:\n        if x == arr[n//2]:\n            return True\n        elif x < arr[n//2]:\n            return is_majority(arr[:n//2], len(arr[:n//2]), x)\n        else:\n            return is_majority(arr[n//2:], len(arr[n//2:]), x)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n - 1\n    while(i <= j):\n        mid = (i + j) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return sum(1 for a in arr if a == x) > n // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return x == arr[0] or x == arr[1]\n    return arr[n//2] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    # Iterate through the array until we've gone through half the items.\n    for i in range(n // 2):\n        # If we reach the end of the array, we've compared enough.\n        if arr[i] == x:\n            return True\n        # If we find a different element than x in the first half of the array, then we know the majority element doesn't exist in the first half of the array, so we can return false.\n        elif arr[i]!= x:\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0 or n == 1:\n        return False\n    i = 0\n    count = 0\n    while count < n:\n        if arr[i] == x:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    if count > n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n % 2 == 0:\n        return arr[n//2] == x\n    else:\n        return arr[n//2] == x or arr[n//2 + 1] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    setBits = 0\n    while (n): \n        setBits += n & 1\n        n >>= 1\n    return setBits\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    def countSetBits(n):\n        return bin(n).count('1')\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i%2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = [str[i] for i in range(len(str)) if i % 2 == 0]\n    return ''.join(str_list)\nprint(odd_values_string(\"PythonProgramming\"))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str=list(str)\n    for i in range(len(str)):\n        if i%2==0:\n            str.remove(str[i])\n    print(''.join(str))\n    \nif __name__ == '__main__':\n    s=input('Enter a string')\n    odd_values_string(s)"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)):\n        if i%2!= 0:\n            str = str.replace(str[i],'')\n    return str\nprint(odd_values_string('Python'))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Your code here\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(0,len(str)) if i%2==0])\n    \n    \ndef even_values_string(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(0,len(str)) if i%2!=0])\n    \n    \ndef find_unique_string(str):\n    '''\n    Write a python function to remove duplicate characters of a given string.\n    '''\n    return ''.join(sorted(set(str), key=str.index))\n    \n    \ndef count_unique_string(str):\n    '''\n    Write a python function to count the total number of unique characters of a given string.\n    '''\n    return len(set(str))\n    \n    \ndef count_vowels_string(str):\n    '''\n    Write a python function to count the total number of vowels of a given string.\n    '''\n    return len([i for i in str if i in 'aeiou'])\n    \n    \ndef count_consonants_string(str):\n    '''\n    Write a python function to count the total number of consonants of a given string.\n    '''\n    return len([i for i in str if i in 'bcdfghjklmnpqrstvwxyz'])\n    \n    \ndef find_max_string(str):\n    '''\n    Write a python function to find the longest substring of a given string.\n    '''\n    return ''.join(sorted(max(str.split(), key=len)))\n    \n    \ndef count_uppercase_string(str):\n    '''\n    Write a python function to count the total number of uppercase characters of a given string.\n    '''\n    return sum(1 for i in str if i.isupper())\n    \n    \ndef count_lowercase_string(str):\n    '''\n    Write a python function to count the total number of lowercase characters of a given string.\n    '''\n    return sum(1 for i in str if i.islower())\n    \n    \ndef count_digit_string(str):\n    '''\n    Write a python function to count the total number of digits of a given string.\n    '''\n    return sum(1 for i in str if i.isdigit())\n    \n    \ndef find_start_string(str):\n    '''\n    Write a python function to find the first starting character of a given string.\n    '''\n    return str[0] if str else ''\n    \n    \ndef find_end_string(str):\n    '''\n    Write a python function to find the last ending character of a given string.\n    '''\n    return str[-1] if str else ''\n    \n    \ndef remove_start_string(str, start):\n    '''\n    Write a python function to remove the characters of a given starting string.\n    '''\n    return str[start:] if str else ''\n    \n    \ndef remove_end_string(str, end):\n    '''\n    Write a python function to remove the characters of a given ending string.\n    '''\n    return str[:end] if str else ''\n    \n    \ndef replace_string(str, old, new):\n    '''\n    Write a python function to replace the old characters of a given string with new characters.\n    '''\n    return str.replace(old, new)\n    \n    \ndef rotate_string(str, n):\n    '''\n    Write a python function to rotate a string to the left.\n    '''\n    return str[n:] + str[:n]\n    \n    \ndef remove_duplicates_string(str):\n    '''\n    Write a python function to remove duplicate characters of a given string.\n    '''\n    return ''.join(sorted(set(str), key=str.index))\n    \n    \ndef find_rotation_string(str, sub):\n    '''\n    Write a python function to check whether the sub-string is a rotation of a given string or not.\n    '''\n    return str[len(sub)-1:] + str[:len(sub)-1] == sub * 2\n    \n    \ndef find_rotation_string2(str, sub):\n    '''\n    Write a python function to check whether the sub-string is a rotation of a given string or not.\n    '''\n    return len(sub) == len(str) and sub in str + str\n    \n    \ndef string_mirror(str):\n    '''\n    Write a python function to mirror the characters of a given string.\n    '''\n    return str + str[::-1]\n    \n    \ndef replace_string_1(str, old, new, count):\n    '''\n    Write a python function to replace the old characters of a given string with new characters.\n    '''\n    if count > 0:\n        new = new * count\n        str = str.replace(old, new)\n    return str\n    \n    \ndef replace_string_2(str, old, new):\n    '''\n    Write a python function to replace the old characters of a given string with new characters.\n    '''\n    return str.replace(old, new)\n    \n    \ndef remove_substring_string(str, sub):\n    '''\n    Write a python function to remove the sub-string from a given string.\n    '''\n    return str.replace(sub, '')\n    \n    \ndef split_string(str, n):\n    '''\n    Write a python function to split a given string into list of sub-strings with maximum length n.\n    '''\n    return [str[i:i+n] for i in range(0, len(str), n)]\n    \n    \ndef capitalize_string(str):\n    '''\n    Write a python function to capitalize the first character of each word of a given string.\n    '''\n    return''.join(s.capitalize() for s in str.split())\n    \n    \ndef title_case_string(str):\n    '''\n    Write a python function to title case a given string.\n    '''\n    return str.title()\n    \n    \ndef find_palindrome_string(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return str[::-1] == str\n    \n    \ndef find_palindrome_string2(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return str == str[::-1]\n    \n    \ndef find_palindrome_string3(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(str) % 2 == 0:\n        return str[:len(str) // 2] == str[len(str) // 2:][::-1]\n    return str[:len(str) // 2] == str[len(str) // 2 + 1:][::-1]\n    \n    \ndef rotate_list_right(l, n):\n    '''\n    Write a python function to rotate the list to the right by the specified number of steps.\n    '''\n    return l[n:] + l[:n]\n    \n    \ndef rotate_list_left(l, n):\n    '''\n    Write a python function to rotate the list to the left by the specified number of steps.\n    '''\n    return l[-n:] + l[:-n]\n    \n    \ndef reverse_list(l):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    return l[::-1]\n    \n    \ndef reverse_list_2(l):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    return l[::-1]\n    \n    \ndef reverse_list_3(l):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    l.reverse()\n    return l\n    \n    \ndef sum_list(l):\n    '''\n    Write a python function to sum all the numbers of a given list.\n    '''\n    return sum(l)\n    \n    \ndef mult_list(l)"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[1::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and b<c: \n        return a \n    elif a<c and c<b: \n        return c \n    else: \n        return b \n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\nprint(\"First number = \")\nnumber1 = int(input())\nprint(\"Second number = \")\nnumber2 = int(input())\nprint(\"Third number = \")\nnumber3 = int(input())\nprint(\"Minimum of three numbers is :\",min_of_three(number1,number2,number3))"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b and a < c):\n        return a\n    elif (b < a and b < c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # if a < b:\n    #     if a < c:\n    #         return a\n    #     else:\n    #         return c\n    # else:\n    #     if b < c:\n    #         return b\n    #     else:\n    #         return c\n    return min(a,b,c)\nprint(min_of_three(3,6,9))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        print(a)\n    elif b<=a and b<=c:\n        print(b)\n    else:\n        print(c)\nmin_of_three(3,4,5)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a>b):\n        if (a>c):\n            return c\n        else:\n            return a\n    else:\n        if(b>c):\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        print('minimum is',a)\n    elif b<a and b<c:\n        print('minimum is',b)\n    else:\n        print('minimum is',c)\na = int(input('Enter a : '))\nb = int(input('Enter b : '))\nc = int(input('Enter c : '))\nmin_of_three(a,b,c"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = a\n    if b < min:\n        min = b\n    if c < min:\n        min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a<b and a<c): \n        min=a\n    elif(b<c): \n        min=b\n    else: \n        min=c\n    return min\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # n = 2\n    # l = 1\n    # r = 10\n    i = l\n    while(i<=r):\n        print(bin(i))\n        i = i << 1\n    i = l\n    while(i<=r):\n        print(bin(i))\n        i = i << 1\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = n & r  # set all the bits in the given range\n    return n == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if ((i ^ n) == 0):\n            return 0\n    return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Code here\n    x = 2**n - 1\n    return ~(x<<l) & ~(x>>r)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bin_n = bin(n)[2:]\n    if len(bin_n) < r-l:\n        return False\n    else:\n        l_set = False\n        for i in range(l-1,r-1):\n            if bin_n[i] == '1':\n                l_set = True\n        return not l_set\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask=(1<<(n-1))\n    while mask!=0:\n        if (mask|l)>r:\n            return 0\n        mask>>=1\n    return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(n==0):\n        return 0\n    if(l<=0):\n        return 0\n    if(r<=0):\n        return 0\n    if(r<l):\n        return 0\n    if(l==r):\n        return 1\n    return all_Bits_Set_In_The_Given_Range(n>>1,l,r)<<(n&1)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    b=bin(n)[2:]\n    l=int(l)\n    r=int(r)\n    return 2**(len(b)-1)-1-b[::-1].find('1',l-1,r)"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    '''\n    Input  : n = 13, l = 2, r = 4\n    Output : True\n    Explanation : The number with bits [11,13,15] in the given range. \n    '''\n    all_bits_unset = 0\n    all_bits_set = 2**n - 1\n    # print(bin(all_bits_set))\n    for i in range(l,r+1):\n        all_bits_unset = all_bits_set ^ i\n    # print(bin(all_bits_unset))\n    if all_bits_unset == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # negative, positive = [], []\n    # for x in arr:\n    #     if x < 0:\n    #         negative.append(x)\n    #     else:\n    #         positive.append(x)\n    # return negative + positive\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    j = -1\n    for i in range(n):\n        if arr[i] < 0:\n            j += 1\n            arr[j], arr[i] = arr[i], arr[j]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = n-1\n    while low <= high:\n        if arr[low] < 0 and arr[high] >= 0:\n            temp = arr[low]\n            arr[low] = arr[high]\n            arr[high] = temp\n            low += 1\n            high -= 1\n        elif arr[low] < 0 and arr[high] < 0:\n            low += 1\n        elif arr[low] >= 0 and arr[high] >= 0:\n            high -= 1\n        else:\n            break\n    return arr\n    \nprint(re_arrange_array([-3, 2, -4, -5, 0, 6, 3], 6))\nprint(re_arrange_array([3, 2, 0, -2, -3], 5))\nprint(re_arrange_array([-3, -2, 2, 4, 3, -1, 1, 0, -3, 3, -4, -1, -2, 4, 1], 10))\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    temp = []\n    output = []\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # edge case\n    if n == 0:\n        return\n    # init variables\n    neg_ptr = 0\n    pos_ptr = n\n    i = 0\n    while i < n:\n        # if the current element is negative\n        if arr[i] < 0:\n            # if the negative pointer is in the right spot\n            if neg_ptr == i:\n                # increase the negative pointer\n                neg_ptr += 1\n            # if the negative pointer is in the wrong spot\n            else:\n                # move the negative pointer up to the right spot\n                while neg_ptr < i:\n                    temp = arr[neg_ptr]\n                    arr[neg_ptr] = arr[i]\n                    arr[i] = temp\n                    neg_ptr += 1\n                    i -= 1\n        # if the current element is positive\n        else:\n            # if the positive pointer is in the right spot\n            if pos_ptr == i:\n                # increase the positive pointer\n                pos_ptr += 1\n            # if the positive pointer is in the wrong spot\n            else:\n                # move the positive pointer up to the right spot\n                while pos_ptr < i:\n                    temp = arr[pos_ptr]\n                    arr[pos_ptr] = arr[i]\n                    arr[i] = temp\n                    pos_ptr += 1\n                    i -= 1\n        i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n <= 0:\n        return []\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    left_pos_idx = 0\n    right_pos_idx = n - 1\n    \n    for idx in range(0, n):\n        #move positive numbers to the right\n        if arr[idx] > 0:\n            temp = arr[right_pos_idx]\n            arr[right_pos_idx] = arr[idx]\n            arr[idx] = temp\n            right_pos_idx -= 1\n        #move negative numbers to the left\n        elif arr[idx] < 0:\n            temp = arr[left_pos_idx]\n            arr[left_pos_idx] = arr[idx]\n            arr[idx] = temp\n            left_pos_idx += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = n - 1\n    while low <= high:\n        if arr[low] < 0 and arr[high] >= 0:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n        elif arr[low] > 0:\n            low += 1\n        else:\n            high -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    j = 0\n    for i in range(n):\n        if (arr[i] < 0):\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] < 0 and arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0 and arr[j] < 0:\n            j -= 1\n        elif arr[i] > 0 and arr[j] < 0:\n            i += 1\n        elif arr[i] > 0 and arr[j] > 0:\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n    # return str1.replace(' ', char)\n    \nprint(replace_blank(\"This is a test\",'*'))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Write your function here\n    return str1.replace(\" \",\"%s\"%char)\nprint(replace_blank(\"love\",'#'))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #Convert string to list, split on blank space, convert list back to string\n    str_list = str1.split(' ')\n    str_list_join = ''.join(str_list)\n    new_str = str_list_join.replace(' ','')\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"%s\")\n    return str1\n    # REPLACE BLANKS WITH %S IN A STRING\n    # HINT: SOME CHARACTERS ARE PLACEHOLDERS, HINT: REPLACE THE WITH %s\n    # HINT: YOU CAN USE THE replace() METHOD WITH A STRING TO SUBSTITUTE A CHARACTER\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\nprint(replace_blank(\"You can see me in school\", \"~\"))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    output = str1.replace(\" \",\"%s\")\n    print(output)\n    return(output)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    lst = list(str1)\n    for i in range(len(lst)):\n        if lst[i] == \" \":\n            lst[i] = char\n    return \"\".join(lst)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\")\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # list1 = [5,9,2,7,8,3,6,4,1]\n    # n = 3\n    # list2 = []\n    # for i in range(n):\n    #     max = 0\n    #     for num in list1:\n    #         if num > max:\n    #             max = num\n    #     list2.append(max)\n    #     list1.remove(max)\n    # print(list2)\n    # return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        list2.append(max(list1))\n        list1.remove(max(list1))\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq._heapify_max(list1)\n    output=[]\n    for i in range(n):\n        output.append(heapq._heappop_max(list1))\n    return output\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for num in list1:\n        if num>n:\n            heapq.heappush(heap,num)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return list(heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    nlist=[]\n    for i in range(n):\n        max1=0\n        for j in range(len(list1)):\n            if list1[j]>max1:\n                max1=list1[j]\n        nlist.append(max1)\n        list1.remove(max1)\n    return nlist\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l = list1\n    heapq.heapify(l)\n    return [heapq.heappop(l) for i in range(n)]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Your code here\n    return sorted(list1,reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    # print(list1)\n    return list1[:n]\n    # return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1,reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1):\n        return list1\n    else:\n        heapq.heapify(list1)\n        heapq.nlargest(n,list1)\n        return nlargest\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*(h+r)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    r= float(r)\n    h= float(h)\n    s_lateral = 2*pi*r*(r+h)\n    return s_lateral\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surfaceArea = 2 * np.pi * r * (r + h)\n    print(\"Surface Area of a Cylinder with radius {} and height {} is {} \".format(r,h,surfaceArea))\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n    "
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    A = 2*pi*r*(r+h)\n    return A\n    "
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*np.pi*r*h + 2*np.pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    print(f\"The lateral surface area of a cylinder with radius {r} and height {h} is {2*math.pi*r*(r+h)}\")\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * (r + h)\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    print(2*3.14*r*h)\nlateralsuface_cylinder(2,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    print(f\"{volume} cubic units\")\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # using xor with 1 \n    # set all even bits \n    return n ^ (1 << n.bit_length() - 1)\ndef print_binary(num):\n    '''\n    Write a Python function to print a given number in binary format.\n    '''\n    return \"{0:04b}\".format(num)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n >> 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Set the MSB (Most Significant Bit) to 1\n    n = n | 1\n    # Set all even bits to 0\n    n = n & 0x55555555\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    def bitwise_or_of_two_numbers(a, b):\n        '''\n        Write a python function to do bitwise OR of two numbers a and b.\n        '''\n        while(b): \n            result = result | b \n            b = b & (b - 1)\n        return result \n    \n    def all_even_bits(n): \n        '''\n        Write a python function to do XOR of all bits of a given number n.\n        '''\n        \n        all_bits = 0\n        while(n): \n            all_bits = all_bits ^ n \n            n = n & (n - 1)\n        return all_bits\n    \n    def set_all_even_bits(n): \n        '''\n        Write a python function to set all even bits of a given number n.\n        '''\n        \n        all_bits = all_even_bits(n) \n        while(all_bits): \n            all_bits = all_bits ^ n \n            n = n & (n - 1)\n        return all_bits\n    \n    return set_all_even_bits(n) \n    \nif __name__ == '__main__': \n    \n    n = 8\n    print(f'Even bit set number for {n} is {even_bit_set_number(n)}') \n    "
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0x55555555\n    n = n >> 1\n    n = n | 0xAAAAAAAA\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Your code here\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the binary number to integer\n    binary = int(n, 2)\n    # Check if the number is even\n    if binary % 2 == 0:\n        # Set all bits to 1 if it is even\n        binary = int('11111111111111111111111111111111', 2)\n    # Convert the integer to binary\n    binary = bin(binary)\n    # Return the binary number\n    return binary\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [('a', 'b', 'c'), ('c', 'a', 'b'), ('c', 'b', 'a')]\n    # expected output: {('a', 'b', 'c'): 3}\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Note that you can assume that the first element in the input list will always be a string and the second element in the input list will always be an integer.\n    test_list = [('a', 1), ('a', 3), ('b', 1), ('b', 2), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1)]\n    my_dict = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts \n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    #iterate over the list, for each element check if it exists in the dictionary as a key\n    dic_of_tuples = {}\n    for element in test_list:\n        if dic_of_tuples.get(element) is None:\n            dic_of_tuples[element] = 1\n        else:\n            dic_of_tuples[element] += 1\n    return dic_of_tuples\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_values = []\n    values_count = []\n    count_dict = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create a counter object that returns a dictionary with the count of each tuple in the list\n    count = Counter(test_list)\n    #convert the dictionary into a list of tuples\n    count_list = count.items()\n    #sort the list of tuples by the first element of the tuple\n    sorted_list = sorted(count_list, key = lambda x: x[0])\n    #return a dictionary mapping the sorted tuple list to the tuple count\n    return dict(sorted_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #the counter class does not like tuples so I have changed the format of the list to a list of lists\n    formatted_list = []\n    for tuple in test_list:\n        formatted_list.append(list(tuple))\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    new_list = []\n    for i in test_list:\n        if i not in new_list:\n            new_list.append(i)\n    \n    return Counter(new_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for item in test_list:\n        result[item] = result.get(item, 0) + 1\n    return result\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    result = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            substring = str[i:j + 1]\n            if len(substring) > 0 and substring[0]!= '0':\n                result += 1\n    return result \n  \ndef number_of_substrings(str):\n  return sum(len(str[i:j + 1]) > 0 and str[i:j + 1][0]!= '0' \n             for i in range(len(str)) for j in range(len(str)))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    strlen = len(str)\n    if strlen < 1:\n        return 0\n    non_empty_substrings = 0\n    cur_start = 0\n    for i in range(strlen):\n        if (str[i]!= 'a' and str[i]!= 'e' and str[i]!= 'i' and str[i]!= 'o' and str[i]!= 'u'):\n            if str[i] =='':\n                for j in range(cur_start, i):\n                    if (str[j]!= 'a' and str[j]!= 'e' and str[j]!= 'i' and str[j]!= 'o' and str[j]!= 'u'):\n                        break\n                    else:\n                        non_empty_substrings += 1\n                cur_start = i + 1\n            else:\n                non_empty_substrings += 1\n    for j in range(cur_start, strlen):\n        if (str[j]!= 'a' and str[j]!= 'e' and str[j]!= 'i' and str[j]!= 'o' and str[j]!= 'u'):\n            non_empty_substrings += 1\n    return non_empty_substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)+1):\n            s=str[i:j]\n            if len(s)>0:\n                count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str) \n    return int((length*(length + 1))/2)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    ans = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            ans += 1\n    return ans\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if len(str[i:j+1])!= 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if(j-i+1)>=3:\n                if str[i:j+1].isalpha():\n                    count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0 \n    \n    for i in range(len(str)): \n        for j in range(i,len(str)): \n            count+=1\n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = [str[i:j] for i in range(len(str)) for j in range(i+1, len(str)+1)]\n    return substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # '''\n    # Input:\n    # string = \"abcabc\"\n    # Output: 3\n    # Explanation: The substrings are \"a\", \"ab\", \"abc\" and \"abc\".\n    # '''\n    # ########################\n    # The below solution is a brute force solution\n    # ########################\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if len(str[i:j+1]) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # if n is greater than m, return 0\n    if n > m:\n        return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    number_of_sequences = 0\n    \n    for i in range(1,m): \n        for j in range(1,i): \n            if (i+j) > m: \n                break \n            else: \n                number_of_sequences += 1\n    \n    return number_of_sequences \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # The number of sequences is the number of elements in the first set (a list from 1 to m) multiplied by the number of elements in the second set (a list from m to n).\n    total_number_of_sequences = 0\n    for i in range(1, m+1):\n        for j in range(m, n+1):\n            total_number_of_sequences += 1\n    return total_number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-1,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_count = 0\n    for i in range(m):\n        for j in range(m,n):\n            if (i * 2) < j <= m:\n                total_count += 1\n    return total_count\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m<n:\n        raise ValueError(\"m should be greater than n\")\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return n**m\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # create a list of integers from 1 to m\n    integers = list(range(1, m + 1))\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # if m < n:\n    #     raise ValueError(\"m cannot be greater than n\")\n    def power_combinations(m,n):\n        total_combs = 0\n        for i in range(1,m):\n            if i == n:\n                total_combs += 1\n            elif i < n:\n                total_combs += i\n            else:\n                total_combs += m\n        return total_combs\n    return power_combinations(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass # replace this line with an expression that calculates the number of sequences\n    # your answer should be a positive integer.\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    assert len(list1) >= len(list2)\n    list1[-1:] = list2\n    return list1\n    "
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #list1[-1:] = list2\n    #return list1\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:]\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(len(list1)-1)\n    for element in list2:\n        list1.append(element)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1:] = list2[:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if list1 == []:\n        return list2\n    list1[-1:] = list2\n    return list1\n    "
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:]=list2\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for ch in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    dict1={}\n    for each in str1:\n        dict1[each]=dict1.get(each,0)+1\n    print(dict1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    length = 0\n    for i in str1:\n        length += 1\n    return length\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = {}\n    for i in str1:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    print(\"No of characters in given string is :\",count)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #code here\n    c=0\n    for i in str1:\n        c+=1\n    return c\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    result = 0\n    for i in str1:\n        result += 1\n    return result\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_dict={}\n    for i in str1:\n        if i in char_dict:\n            char_dict[i]=char_dict[i]+1\n        else:\n            char_dict[i]=1\n    return char_dict\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    next_perfect_square = N + 1\n    while math.sqrt(next_perfect_square) % 1!= 0:\n        next_perfect_square += 1\n    return next_perfect_square\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    return int(math.sqrt(N)) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # base case \n    if (math.sqrt(N) - math.floor(math.sqrt(N)) == 0): \n        return (math.floor(math.sqrt(N)) + 1) \n        \n    else: \n        return ((math.floor(math.sqrt(N))) + 1) \n        \ndef is_Power(N, M): \n    '''\n    A function to check if M is a power of N or not.\n    '''\n    # Base case \n    if (N == 1): \n        return (M == 1) \n    # When N is not a power of 2 \n    if (M % N!= 0): \n        return (False) \n    return (is_Power(N, M/N)) \n    \ndef next_Fibonacci(N): \n    '''\n    A function to find the next Fibonacci number greater than a given number.\n    '''\n    # Base case \n    if (N <= 1): \n        return (N) \n    \n    else: \n        return (next_Fibonacci(N - 1) + next_Fibonacci(N - 2)) \n        \ndef next_Perfect_Number(N): \n    '''\n    A function to find the next perfect number greater than a given number.\n    '''\n    # Base case \n    if (N <= 1): \n        return (0) \n    return (6 * N - 1) \n    \ndef number_Of_Divisors(N): \n    '''\n    A function to find the number of divisors of a given number.\n    '''\n    # Base case \n    if (N <= 1): \n        return (0) \n    if (N == 2): \n        return (1) \n    if (N % 2 == 0): \n        return (2) \n    i = 3\n    count = 1\n    while(i * i <= N): \n        if (N % i == 0): \n            count += 2\n        i += 2\n    if (i * i == N): \n        count += 1\n    return (count) \n    \ndef get_Sum_Of_Divisors(N): \n    '''\n    A function to find the sum of divisors of a given number.\n    '''\n    # Base case \n    if (N == 1): \n        return (1) \n    i = 1\n    sum = 1\n    while (i * i <= N): \n        if (N % i == 0): \n            if (i == N / i): \n                sum += i \n            else: \n                sum += (i + N / i) \n        i += 1\n    return (sum) \n    \ndef is_Abundant(N): \n    '''\n    A function to check if a number is abundant or not.\n    '''\n    # Base case \n    if (N <= 1): \n        return (False) \n    if (get_Sum_Of_Divisors(N) > N): \n        return (True) \n    else: \n        return (False) \n    \ndef is_Perfect(N): \n    '''\n    A function to check if a number is perfect or not.\n    '''\n    # Base case \n    if (N <= 1): \n        return (False) \n    if (get_Sum_Of_Divisors(N) == N): \n        return (True) \n    return (False) \n    \ndef is_Deficient(N): \n    '''\n    A function to check if a number is deficient or not.\n    '''\n    # Base case \n    if (N <= 1): \n        return (False) \n    if (get_Sum_Of_Divisors(N) < N): \n        return (True) \n    return (False) \n    \ndef is_Prime(N): \n    '''\n    A function to check if a number is prime or not.\n    '''\n    # Base case \n    if (N <= 1): \n        return (False) \n    if (N == 2): \n        return (True) \n    if (N % 2 == 0): \n        return (False) \n    i = 3\n    while(i * i <= N): \n        if (N % i == 0): \n            return (False) \n        i += 2\n    return (True) \n    \ndef is_Perfect_Square(N): \n    '''\n    A function to check if a number is perfect square or not.\n    '''\n    # Base case \n    if (N <= 1): \n        return (False) \n    if (math.sqrt(N) - math.floor(math.sqrt(N)) == 0): \n        return (True) \n    return (False) \n    \ndef is_Fibonacci(N): \n    '''\n    A function to check if a number is Fibonacci or not.\n    '''\n    # Base case \n    if (N <= 1): \n        return (False) \n    return (is_Power(5, N) or is_Power(Fibonacci_Number(8), N)) \n    \ndef Fibonacci_Number(N): \n    '''\n    A function to find the Nth Fibonacci number.\n    '''\n    # Base case \n    if (N <= 0): \n        return (0) \n    if (N == 1 or N == 2): \n        return (1) \n    return (Fibonacci_Number(N - 1) + Fibonacci_Number(N - 2)) \n    \ndef is_Armstrong_Number(N): \n    '''\n    A function to check if a number is an Armstrong number or not.\n    '''\n    # Base case \n    if (N < 0): \n        return (\"Invalid Input\") \n    if (N <= 1): \n        return (False) \n    i = 0\n    sum = 0\n    num = N \n    while (num > 0): \n        i += 1\n        num = int(num / 10) \n    while (N > 0): \n        r = N % 10\n        sum += (r * r * r) \n        N = int(N / 10) \n    return (sum == N) \n    \ndef is_Palindrome(N): \n    '''\n    A function to check if a number is a palindrome or not.\n    '''\n    # Base case \n    if (N < 0): \n        return (\"Invalid Input\") \n    if (N == 0): \n        return (True) \n    if (N % 10 == 0): \n        return (False) \n    rev = 0\n    while (N > rev): \n        rev = (rev * 10) + (N % 10) \n        N = int(N / 10) \n    return (N == rev or N == (rev / 10)) \n    \ndef is_Sum_Of_Two_Armstrong_Numbers(N): \n    '''\n    A function to check if a number is the sum of two armstrong numbers or not.\n    '''\n    # Base case \n    if (N < 1): \n        return (\"Invalid Input\") \n    if (is_Armstrong_Number(N)): \n        return (False) \n    i = 1\n    while (i * i <= N): \n        if (is_Armstrong_Number(i) and is_Armstrong_Number(N - i)): \n            return (True) \n        i += 1\n    return (False) \n    \ndef is_Sum_Of_Three_Armstrong_Numbers(N): \n    '''\n    A function to check if a number is the sum of three armstrong numbers or not.\n    '''\n    # Base case \n    if (N < 1): \n        return (\"Invalid Input\") \n    if (is_Armstrong_Number(N)): \n        return (False) \n    i = 1\n    while (i * i * i <= N): \n        if (is_Armstrong_Number(i) and is_Armstrong_Number(N - i) and is_Armstrong_Number(N - i - i)): \n            return (True) \n        i += 1\n    return (False) \n    \ndef is_Luck"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt = math.sqrt(N)\n    if math.isclose(sqrt, int(sqrt)): \n        return (int(sqrt) + 1)**2\n    else: \n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    return int((root + 1)**2)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0: \n        return -1\n    if (math.sqrt(N) - math.floor(math.sqrt(N))) == 0: \n        return int(math.sqrt(N))\n    return int(math.sqrt(N)) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # start with the number we want to transform\n    i = N \n    # we loop until we find a number greater than the square of i\n    while i <= N: \n        i = i + 1\n    # we return the result\n    return i \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return (int(root)*int(root))\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (int(math.sqrt(N))**2 < N):\n        return (int(math.sqrt(N))+1)**2\n    return -1\n    \nprint(next_Perfect_Square(10))\nprint(next_Perfect_Square(100))\nprint(next_Perfect_Square(110))\nprint(next_Perfect_Square(1000))\nprint(next_Perfect_Square(10000))\nprint(next_Perfect_Square(100000))\nprint(next_Perfect_Square(1000000))\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while N%2 == 0: \n        N //= 2\n    while N%5 == 0: \n        N //= 5\n    return next_Perfect_Square_Util(N, {0:True})\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #max sum is the current max sum\n    #first index is the left most point\n    #second index is the right most point\n    max_sum = 0\n    first = 0\n    last = len(arr) - 1\n    current_sum = 0\n    while first <= last:\n        if arr[first] < arr[last]:\n            current_sum = arr[first] + arr[last]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_start = first\n                max_end = last\n            last -= 1\n        else:\n            current_sum = arr[first] + arr[last]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_start = first\n                max_end = last\n            first += 1\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return None\n    max_sum = -999999999\n    for i in range(len(arr)):\n        current_sum = 0\n        j = i\n        while j >= 0:\n            current_sum += arr[j]\n            j -= 1\n        k = i+1\n        while k < len(arr):\n            current_sum += arr[k]\n            k += 1\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(1, len(arr) - 1):\n        if arr[i - 1] < arr[i] and arr[i + 1] < arr[i]:\n            current_sum = arr[i] + arr[i - 1] + arr[i + 1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n    \ndef double_range(arr):\n    '''\n    Write a function that accepts an array of numbers and returns an array with the squares of all the numbers and the cubes of all the numbers. The resulting arrays should be filled in the same order in the input array.\n    '''\n    arr_squared = [x**2 for x in arr]\n    arr_cubed = [x**3 for x in arr]\n    return arr_squared + arr_cubed\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    i = 0\n    j = n - 1\n    max_sum = 0\n    while i < j:\n        if arr[i] < arr[j]:\n            max_sum += arr[i]\n            i += 1\n        else:\n            max_sum += arr[j]\n            j -= 1\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_bitonic_subsequence_sum(arr): \n        if not arr:\n            return None\n        if len(arr) == 1:\n            return arr[0]\n        n = len(arr)\n        max_ending_here = [None]*n \n        max_ending_here[0] = arr[0] \n        for i in range(1, n): \n            max_ending_here[i] = max(max_ending_here[i-1], 0) + arr[i] \n        min_ending_here = [None]*n \n        min_ending_here[n-1] = arr[n-1] \n        for i in range(n-2, -1, -1): \n            min_ending_here[i] = min(min_ending_here[i+1], 0) + arr[i] \n        max_sum = float('-inf')\n        for i in range(1, n-1): \n            max_sum = max(max_sum, max_ending_here[i-1] + min_ending_here[i+1]) \n        return max_sum \n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)): \n        sum = 0\n        sum += arr[i]\n        for j in range(i+1, len(arr)):\n            sum += arr[j]\n            if arr[j] > arr[j+1]:\n                sum = 0\n                break\n            max_sum = max(sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Sorting the array will increase the time complexity of this function\n    arr.sort()\n    max_sum = 0\n    n = len(arr)\n    # Getting the max sum of a bitonic subsequence\n    for i in range(n-1):\n        max_sum = max(max_sum, (arr[i] + arr[i+1]) * (n-i-1))\n    \n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number/2\n    while True:\n        better = (approx + number/approx)/2\n        if better == approx:\n            return better\n        approx = better\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    tol = 0.0001\n    t = number/2\n    t_prev = 0\n    i = 1\n    while abs(t - t_prev) > tol:\n        t_prev = t\n        t = (number/t + t)/2\n        i += 1\n    return t, i\n    \ndef pow_with_recursion(base, power):\n    '''\n    Write a function that computes the power of a number using recursion.\n    '''\n    if power == 0:\n        return 1\n    else:\n        return base * pow_with_recursion(base, power-1)\n    \ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef sqrt(number):\n    '''\n    Write a function that computes the square root of a number.\n    '''\n    #define tolerance for the loop\n    tol = 0.0001\n    #define a guess and set it equal to the number\n    guess = number\n    #set the iteration counter\n    i = 1\n    while abs(guess**2 - number) > tol:\n        #increment the iteration counter\n        i += 1\n        #recalculate the guess\n        guess = (guess + number/guess)/2\n    return guess, i\n    \ndef sqrt_with_newton(number):\n    '''\n    Write a function that computes the square root of a number using Newton's method.\n    '''\n    #define tolerance for the loop\n    tol = 0.0001\n    #define a guess and set it equal to the number\n    guess = number\n    #set the iteration counter\n    i = 1\n    while abs(guess**2 - number) > tol:\n        #recalculate the guess\n        guess = guess - ((guess**2 - number)/(2*guess))\n        #increment the iteration counter\n        i += 1\n    return guess, i\n    \ndef factorial(n):\n    '''\n    Write a function that computes the factorial of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef binomial(n, k):\n    '''\n    Write a function that computes the binomial coefficient.\n    '''\n    return int((factorial(n)/(factorial(k)*factorial(n-k))))\n    \ndef pi_approx():\n    '''\n    Write a function that computes pi to n digits of accuracy.\n    '''\n    n = 1000\n    pi = 0\n    \n    for k in range(n):\n        a = (-1)**k * binomial(2*k, k) * (13591409 + 545140134*k)\n        b = factorial(2*k+1) * (545140134 * k + 7857) * (640320**(2*k+1))\n        pi += a/b\n    \n    return pi\n    \ndef e_approx():\n    '''\n    Write a function that computes e to n digits of accuracy.\n    '''\n    n = 1000\n    e = 0\n    \n    for k in range(n):\n        a = binomial(2*k, k) * (factorial(k)**4 + factorial(k)**2)\n        b = (factorial(2*k+1))**2 * (545140134*k + 7857) * (640320**(2*k+1))\n        e += a/b\n    return e\n    \ndef Newton_polynomial(x0, x1, x2):\n    '''\n    Write a function that computes the Newton polynomial given the initial values of the \n    polynomial.\n    '''\n    #define the polynomial as a function\n    def p(x):\n        return x**3 - 2*x + 7\n    #return the value of the polynomial\n    return p(x2) - p(x1)*(x2 - x0)/(x2 - x1)\n    \ndef bisection_root(a, b):\n    '''\n    Write a function that computes a root using bisection method.\n    '''\n    #define the tolerance for the loop\n    tol = 0.00001\n    #set the iteration counter\n    i = 1\n    #define the starting point\n    c = (a+b)/2\n    while abs(b - a) > tol:\n        #increment the iteration counter\n        i += 1\n        #recalculate the guess\n        c = (a+b)/2\n        #recalculate a\n        a = b\n        #recalculate b\n        b = c\n    #return the root\n    return c\n    \ndef newton_polynomial_root(x0, x1, x2):\n    '''\n    Write a function that computes a root using Newton's method.\n    '''\n    #define the tolerance for the loop\n    tol = 0.00001\n    #set the iteration counter\n    i = 1\n    #define the polynomial\n    def p(x):\n        return x**3 - 2*x + 7\n    #define the derivative of the polynomial\n    def dp(x):\n        return 3*x**2 - 2\n    #set the starting point\n    c = x2\n    while abs(p(c)) > tol:\n        #recalculate the guess\n        c = c - p(c)/dp(c)\n        #increment the iteration counter\n        i += 1\n    #return the root\n    return c\n    \ndef secant_polynomial_root(x0, x1):\n    '''\n    Write a function that computes a root using the secant method.\n    '''\n    #define the tolerance for the loop\n    tol = 0.00001\n    #set the iteration counter\n    i = 1\n    #define the polynomial\n    def p(x):\n        return (x + 4)*(x - 2)\n    #set the starting point\n    c = x0\n    #set the root as x1\n    d = x1\n    while abs(p(c)) > tol:\n        #recalculate the guess\n        c = d - (p(d)*(d-c)/(p(d)-p(c)))\n        #recalculate the root\n        d = c\n        #increment the iteration counter\n        i += 1\n    #return the root\n    return c\n    \ndef polynomial_value(x, coeff):\n    '''\n    Write a function that returns the value of a polynomial at a specific point.\n    '''\n    return sum([c*(x**i) for i, c in enumerate(coeff)])\n    \ndef polynomial_value_with_newton(x, coeff):\n    '''\n    Write a function that returns the value of a polynomial at a specific point using Newton's method.\n    '''\n    #define the tolerance for the loop\n    tol = 0.00001\n    #set the iteration counter\n    i = 1\n    #define the polynomial\n    def p(x):\n        return sum([c*(x**i) for i, c in enumerate(coeff)])\n    #set the derivative of the polynomial\n    def dp(x):\n        return sum([i*c*(x**(i-1)) for i, c in enumerate(coeff)])\n    #set the starting point\n    c = x\n    while abs(p(c)) > tol:\n        #recalculate the guess\n        c = c - p(c)/dp(c)\n        #increment the iteration counter\n        i += 1\n    #return the root\n    return c\n    \ndef polynomial_value_with_bisection(x, coeff):\n    '''\n    Write a function that returns the value of a polynomial at a specific point using bisection method.\n    '''\n    #define the tolerance for the loop\n    tol = 0.00001\n    #set the iteration counter\n    i = 1\n    #set the initial interval\n    a = x\n    b = x*2\n    #set the root as 0\n    c = 0\n    #define the polynomial\n    def p(x):\n        return sum([c*(x**i) for i, c in enumerate(c"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.001\n    x_new = 1\n    while True:\n        x_old = x_new\n        x_new = (x_old + number / x_old) / 2\n        if abs(x_new - x_old) < epsilon:\n            break\n    return x_new\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # check to see if the number is a perfect square:\n    if number < 0:\n        return None\n    if number == 0 or number == 1:\n        return number\n    guess = 1\n    while guess * guess <= number:\n        guess += 1\n    \n    # Begin the Babylonian method:\n    num = guess\n    guess = (num + number / num) / 2\n    \n    # Find the square root until it converges:\n    while abs(guess * guess - number) >= 0.000000001:\n        num = guess\n        guess = (num + number / num) / 2\n        \n    return guess\n    \ndef test_squareroot(number):\n    print(\"Testing square root of {}...\".format(number))\n    result = babylonian_squareroot(number)\n    if result == None:\n        print(\"{} is not a perfect square.\".format(number))\n    else:\n        print(\"The square root of {} is approx. {}\".format(number, result))\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    x = number\n    y = 1\n    while y < x:\n        y = x\n        x = number/x + x\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number/2) + 1\n    while (abs(x - y*y)) > 0.00001:\n        x = y\n        y = ((number/x) + x)/2\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = float(number)\n    difference = float(number)\n    while difference > 0.01:\n        approxold = approx\n        approx = (approx + number / approx) / 2\n        difference = approxold - approx\n    return approx\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number\n    while True:\n        better = (approx + number/approx) / 2\n        if abs(approx - better) < 0.001:\n            return better\n        approx = better\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def compute_guess(guess):\n        return (guess + number / guess) / 2\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    if number < 0:\n        return None\n        \n    approx = number/2\n    while True:\n        better = (approx + number/approx) / 2\n        if better == approx:\n            return better\n            break\n        approx = better\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1] \ndef lps_dp(str): \n    '''\n    DP solution using the same approach.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1] \ndef lps_dp_all(str): \n    '''\n    DP solution using the same approach.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return longest_palindrome_subsequence(str) \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for j in range(n):\n        dp[j][j] = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    l = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        l[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                l[i][j] = 2\n            elif str[i] == str[j]: \n                l[i][j] = l[i+1][j-1] + 2\n            else: \n                l[i][j] = max(l[i][j-1], l[i+1][j]); \n    return l[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for y in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return len(find_subsequence(str))\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    l = [[0 for x in range(n)]for y in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1 + 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + 1 / sum(1 / x for x in range(1, n))\n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string s and returns a boolean indicating whether the string is a palindrome.\n    '''\n    s = s.lower()\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + sum(1 / d for d in range(1, n))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Method 1\n    if n == 1:\n        return 1\n    else:\n        return 1/n + sum([1/i for i in range(2, n)])\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Create a variable that stores the sum of the first n-1 harmonic numbers\n    sum_of_harmonic_numbers = 0\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert isinstance(n, int)\n    \n    def sum(n):\n        if n == 1:\n            return 1\n        return n + sum(n-1)\n    \n    return sum(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def sum_list(list_):\n        total = 0\n        for i in list_:\n            total += 1 / i\n        return total\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Set intersection\n    # hash table, time complexity O(n)\n    # set(array_nums1)&set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums2_dict = dict()\n    for num in array_nums2:\n        array_nums2_dict[num] = array_nums2_dict.get(num, 0) + 1\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2_dict and array_nums2_dict[num] > 0:\n            intersection.append(num)\n            array_nums2_dict[num] = array_nums2_dict[num] - 1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    i = j = 0\n    intersection = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr1 = set(array_nums1)\n    arr2 = set(array_nums2)\n    return list(arr1.intersection(arr2))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #function should return intersection in a new array\n    dict = {}\n    ans_list = []\n    for i in array_nums1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    # 1) use set to find the intersection of array_nums1 and array_nums2\n    # 2) create list, and append the intersection \n    \n    #start\n    set_nums1= set(array_nums1)\n    set_nums2= set(array_nums2)\n    \n    intersection_list= list(set_nums1.intersection(set_nums2))\n    \n    #end\n    \n    return intersection_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return set(array_nums1)&set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in array_nums1:\n        if i in array_nums2:\n            intersection.append(i)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1=set(array_nums1)\n    nums2=set(array_nums2)\n    return list(nums1.intersection(nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return set(array_nums1).intersection(set(array_nums2))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n    \nprint(count_X((1, 2, 2, 2, 3, 4, 4, 5, 1), 2))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    num_of_x = 0\n    for i in tup:\n        if i == x:\n            num_of_x += 1\n    return num_of_x\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup:\n        if e == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = ('blueberry', 'blueberry', 'blueberry', 'blueberry', 'blueberry', 'blueberry', 'blueberry', 'blueberry', 'blueberry', 'blueberry')\n    x = \"blueberry\"\n    num = 0\n    for t in tup:\n        if x == t:\n            num += 1\n    return num\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if i!= len(list)-1:\n            list.insert(i+1,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #element = int(input('Enter element: '))\n    list.insert(0, element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = list[:]\n    result.insert(1,element)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index = list.index(element)\n    new_list = []\n    for i in range(0,index):\n        new_list.append(list[i])\n    new_list.append(element)\n    for i in range(index,len(list)):\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # looping\n    for i in range(0,len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for item in list:\n        new_list.append(item)\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    n = len(list)\n    for i in range(n):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # function to convert complex number to polar coordinates\n    def to_polar(complex_number):\n    \n        return (complex_number.real,complex_number.imag,cmath.phase(complex_number))\n        \n    # converting complex numbers to complex number, separating out the real and imaginary part and then using cmath.phase to find the phase in radians\n    \n    complex_numbers = []\n    # initialising a list of complex numbers\n    for i in numbers:\n        complex_numbers.append(complex(i[0],i[1]))\n    \n    polar_numbers = []\n    # initialising a list of polar complex numbers\n    for i in complex_numbers:\n        polar_numbers.append(to_polar(i))\n    \n    return polar_numbers\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar(n):\n        r, th = cmath.polar(n)\n        r = round(r, 3)\n        th = round(th, 3)\n        return (r, th)\n    return [polar(n) for n in numbers]\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    i = 0\n    for i in range(len(numbers)):\n        p = cmath.polar(numbers[i])\n        print(f'The complex number {numbers[i]} converted to polar coordinates is {p}')\n        i += 1\n        \ndef multiplication(num):\n    '''\n    Write a python function to multiply all complex numbers in a list.\n    '''\n    i = 0\n    mult = 1\n    for i in range(len(num)):\n        mult = mult * num[i]\n    return mult\n        \ndef multiplication_tuple(tuple):\n    '''\n    Write a python function to multiply all complex numbers in a tuple.\n    '''\n    i = 0\n    mult = 1\n    for i in range(len(tuple)):\n        mult = mult * tuple[i]\n    return mult\n        \ndef list_to_tuple(list):\n    '''\n    Write a python function to convert a list to a tuple.\n    '''\n    tuple = tuple(list)\n    return tuple\n        \ndef tuple_to_list(tuple):\n    '''\n    Write a python function to convert a tuple to a list.\n    '''\n    list = list(tuple)\n    return list\n    \ndef create_list_of_numbers(start, end):\n    '''\n    Write a python function to create a list of numbers between a start value and an end value.\n    '''\n    i = 0\n    number_list = []\n    while i < end:\n        number_list.append(start)\n        start += 1\n        i += 1\n    return number_list\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(numbers)\n    a = complex(numbers[0],numbers[1])\n    b = cmath.polar(a)\n    return b\n    \n    '''\n    Expected output:\n    [(5.23, 0.39)]\n    '''\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real_part = numbers.real\n    imaginary_part = numbers.imag\n    modulus = numbers.__abs__()\n    phase = numbers.phase\n    return [real_part,imaginary_part,modulus,phase]"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print('The following numbers are in polar coordinates:')\n    for item in numbers:\n        x = complex(item[0],item[1])\n        print(cmath.polar(x))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def complex_to_polar(complex_num):\n        return cmath.polar(complex_num)\n    return complex_to_polar(complex(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    num=complex(input(\"Input a complex number in the form a + bj: \"))\n    print(num)\n    print(\"The result of converting the complex number to polar coordinates is: \")\n    print(cmath.polar(num))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    r = numbers.real\n    i = numbers.imag\n    p = cmath.polar(numbers)\n    t = p[1]\n    o = p[0]\n    return(r, i, t, o)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(type(numbers)==list):\n        list1=[]\n        for i in range(len(numbers)):\n            if(type(numbers[i])==complex):\n                list1.append(polar(numbers[i]))\n            else:\n                list1.append(numbers[i])\n        return list1\n    else:\n        if(type(numbers)==complex):\n            return polar(numbers)\n        else:\n            return numbers\n            \ndef polar(complex):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(type(complex)==complex):\n        return cmath.polar(complex)\n    else:\n        return complex\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for i in list1:\n        if isinstance(i, int):\n            result += 1\n    return result\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i == int(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    return len([i for i in list1 if isinstance(i, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x,int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    print(list1)\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n    \ndef count_even(list1):\n    '''\n    Write a python function that returns the number of even elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            if i % 2 == 0:\n                count += 1\n    return count\n    \ndef is_list_equal(list1, list2):\n    '''\n    Write a python function that takes two lists and returns true if the lists contain the same elements in the same quantities.\n    '''\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    number=0\n    for i in list1:\n        if(isinstance(i,int)):\n            number+=1\n    return number\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    s = set()\n    for i in range(len(l)):\n        s.update(set(combinations_with_replacement(l,i+1)))\n    return list(s)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l)):\n        if n == 1:\n            combos += [l[i]]\n        else:\n            combos += list(combinations_with_replacement(l, n))\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [x for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [i for i in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == len(l):\n        return [l]\n    elif n == 1:\n        return [[i] for i in l]\n    elif n > len(l):\n        return []\n    else:\n        return [l] + [l[i:] for i in range(n)] + list(map(list, zip(*combinations_with_replacement(l, n))))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l,n)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [x for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(i) for i in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    count = 0\n    for i in range(2,n):\n        if prime_numbers[i] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # initialize a list\n    list_of_primes = [2]\n    \n    # start from 3 to n\n    for i in range(3, n+1):\n        if is_prime(i):\n            list_of_primes.append(i)\n    \n    return len(list_of_primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return len(primes)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 0:\n        return 0\n    primes = []\n    is_prime = [0] * n\n    is_prime[0] = 1\n    is_prime[1] = 1\n    for i in range(2, n):\n        if is_prime[i] == 0:\n            primes.append(i)\n            for x in range(i*i, n, i):\n                is_prime[x] = 1\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        count = 1\n        for i in range(2, n+1):\n            if is_Prime(i):\n                count += 1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        else:\n            for i in range(5, int(n**0.5)+1, 6):\n                if n % i == 0 or n % (i + 2) == 0:\n                    return False\n            return True\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n):\n        if is_Prime(i):\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    prime_checker = 1\n    for number in range(2,n):\n        prime_checker = 1\n        for i in range(2,number):\n            if number%i == 0:\n                prime_checker = 0\n        if prime_checker == 1:\n            primes.append(number)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize counter.\n    count = 0\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\nprint(swap_numbers(5, 6))\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tuple = (b,a)\n    return tuple\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n    \ndef sum_numbers(num1,num2):\n    '''\n    Write a function that takes in two numbers and returns their sum.\n    '''\n    return num1+num2\n    \ndef find_largest_number(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number in the list.\n    '''\n    return max(nums)\n    \ndef join_strings(words):\n    '''\n    Write a function that takes in a list of strings and returns a single string that is all of the list items joined together.\n    '''\n    return \"\".join(words)\n    \ndef multiply_string(string,num):\n    '''\n    Write a function that takes in a string and an integer and returns a new string with the string repeated the given number of times.\n    '''\n    return string*num\n    \ndef separate_string(string):\n    '''\n    Write a function that takes in a string and returns a list of strings with all of the characters from that string in the order they occur in the string.\n    '''\n    return [ch for ch in string]\n    \ndef first_character_of_list(list):\n    '''\n    Write a function that takes in a list and returns the first item in that list.\n    '''\n    return list[0]\n    \ndef last_character_of_list(list):\n    '''\n    Write a function that takes in a list and returns the last item in that list.\n    '''\n    return list[-1]\n    \ndef string_length(string):\n    '''\n    Write a function that takes in a string and returns the length of that string.\n    '''\n    return len(string)\n    \ndef reverse_string(string):\n    '''\n    Write a function that takes in a string and returns the reversed version of that string.\n    '''\n    return string[::-1]\n    \ndef is_palindrome(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    return string == string[::-1]\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b=b,a\n    return a,b\n    \ndef main():\n    '''\n    Write a function that takes in a list of tuples and then returns the total of the second tuple element in all of the tuples.\n    '''\n    num_list=[(10,20),(30,40),(50,60)]\n    total=0\n    for x in range(len(num_list)):\n        total+=num_list[x][1]\n    return total\n    \n    \n    \n    \n    \nif __name__ == '__main__':\n    print(swap_numbers(2,4))\n    print(main())"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #Define Variables\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    elements1 = max(test_tup1[0], test_tup2[0])\n    elements2 = min(test_tup1[1], test_tup2[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #try:\n    #    test_tup1 = (1, 2)\n    #    test_tup2 = (4, 5)\n    #except Exception as e:\n    #    print(e)\n    return max(test_tup1[0] + test_tup2[1], test_tup2[0] + test_tup1[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"This function can only be called on tuples of equal length.\")\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # return(max(test_tup1),max(test_tup2))\n    if(len(test_tup1) < len(test_tup2)):\n        return(max(test_tup1))\n    else:\n        return(max(test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    assert(type(test_tup1) == tuple and type(test_tup2) == tuple), \"First argument and second argument are not of type tuple.\"\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    return max(test_tup1 + test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem1 = max(test_tup1)\n    max_elem2 = max(test_tup2)\n    if max_elem1 > max_elem2:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    #raise NotImplementedError\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples don't have equal lengths.\"\n    else:\n        return tuple([max(x,y) for x,y in zip(test_tup1,test_tup2)])\n    \n    \n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    if n < 1: \n        return \"Input has to be a positive integer.\"\n    elif n <= 3:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        s = n * (n + 1) // 2\n        while True:\n            a = randint(2, s - 1)\n            # testing if the number a is a witness for the compositeness of n\n            if pow(a, n - 1, n)!= 1:\n                return n\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    else:\n        p = 1\n        i = 1\n        while(i<n):\n            p += 2\n            i += 1\n            if n%p!= 0:\n                continue\n            elif n%p == 0:\n                return \"This is not the prime number\"\n            else:\n                continue\n        return p\nprint(newman_prime(10001))\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        print(\"Please enter a number greater than 1\")\n        return\n    else:\n        newman_prime_list = [2, 3, 5]\n        if n == 1:\n            return 2\n        elif n == 2:\n            return 3\n        elif n == 3:\n            return 5\n        elif n > 3:\n            n_prime = newman_prime_list[-1]\n            newman_prime_list.append((n_prime + 1) * 2)\n            newman_prime_list.append(n_prime + 2)\n            while len(newman_prime_list) < n + 1:\n                newman_prime_list.append((newman_prime_list[-1] + 2) * 2)\n                newman_prime_list.append(newman_prime_list[-1] + 4)\n            return newman_prime_list[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n <= 2): \n        return n \n    prime = [2]\n    p = 3\n    while len(prime) < n: \n        if is_prime(p): \n            prime.append(p)\n        p = next_prime(p)\n    return prime[-1] \n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def update(sieve, x, n):\n        x += n * (n-1) // 2\n        if x <= N:\n            sieve[x] = 1\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n > 0\n    if n < 2:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    else:\n        r = 3\n        p = 5\n        for i in range(5, n+1):\n            if p * r % 2 == 0:\n                p = p + 2 * r + 4\n            else:\n                p = p + 2 * r + 4 * r + 2\n            r = 2 * r % n\n        return p\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    q = n-1\n    r = (n-1)**2\n    k = 1\n    while not is_prime(r):\n        p = next_prime(p)\n        q = n - p\n        r = q * q\n        k += 1\n    return p, k\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import math\n    import random\n    import sympy\n    import numpy\n    import time\n    import math\n    import random\n    import sympy\n    import numpy\n    import sys\n    import numpy\n    import sys\n    import time\n    from sympy.utilities.iterables import multiset_permutations\n    from sympy.utilities.iterables import permutations\n    \n    def p_factors(n):\n        \"\"\"\n        Returns a set containing the prime factors of n.\n        Input:\n        n - integer\n        Output:\n        Factors of n\n        \"\"\"\n        factors = set()\n        # factordb.com\n        # What is the factorbase of a large number\n        import math\n        import sympy\n        # import numpy\n        import time\n        # import math\n        import random\n        import sys\n        import numpy\n        import sympy\n        import numpy\n        import sys\n        import time\n        from sympy.utilities.iterables import multiset_permutations\n        from sympy.utilities.iterables import permutations\n        \n        def primesfrom2to(n):\n            \"\"\" Returns a list of primes between 2 and n \"\"\"\n            sieve = [True] * n\n            for i in xrange(3,int(n**0.5)+1,2):\n                if sieve[i]:\n                    sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)\n            return [2] + [i for i in xrange(3,n,2) if sieve[i]]\n        \n        def prime_factors(n):\n            \"\"\" Returns a list of the prime factors of n \"\"\"\n            factors = []\n            while n % 2 == 0:\n                factors.append(2)\n                n = n / 2\n            for i in range(3, int(math.sqrt(n)) + 1, 2):\n                while n % i == 0:\n                    factors.append(i)\n                    n = n / i\n            if n > 2:\n                factors.append(n)\n            return factors\n        \n        \n        prime_num = primesfrom2to(n)\n        print prime_num\n        prime_num_len = len(prime_num)\n        counter = 0\n        for j in range(0,prime_num_len):\n            if n % prime_num[j] == 0:\n                counter = counter + 1\n        if counter == 1:\n            factors.append(prime_num[j])\n        return factors\n    \n    def is_permutation(p,q):\n        \"\"\"\n        Check if p is a permutation of q\n        Input:\n        p: integer\n        q: integer\n        Output:\n        True, if p is a permutation of q, False otherwise\n        \"\"\"\n        if sorted(str(p)) == sorted(str(q)):\n            return True\n        return False\n    \n    def all_permutations(elements):\n        \"\"\"\n        Returns a list with all permutations of elements\n        Input:\n        elements - list of integers\n        Output:\n        All permutations of elements\n        \"\"\"\n        return list(set(list(map(list,multiset_permutations(elements)))))\n    \n    def all_combinations(elements):\n        \"\"\"\n        Returns a list with all combinations of elements\n        Input:\n        elements - list of integers\n        Output:\n        All combinations of elements\n        \"\"\"\n        return list(set(list(map(list,permutations(elements)))))\n    \n    def all_factorial_combinations(elements):\n        \"\"\"\n        Returns a list with all permutations of all combinations of elements\n        Input:\n        elements - list of integers\n        Output:\n        All permutations of all combinations of elements\n        \"\"\"\n        elements.sort()\n        all_combinations = all_combinations(elements)\n        all_factorial_combinations = []\n        for i in range(0,len(all_combinations)):\n            for j in range(1,len(all_combinations[i])+1):\n                all_factorial_combinations.append(all_combinations[i][0:j])\n        return all_factorial_combinations\n    \n    def all_factorial_combinations_of_factors(elements):\n        \"\"\"\n        Returns a list with all permutations of all combinations of prime factors of elements\n        Input:\n        elements - list of integers\n        Output:\n        All permutations of all combinations of prime factors of elements\n        \"\"\"\n        elements.sort()\n        all_factorial_combinations = []\n        all_prime_factors = p_factors(elements)\n        all_factorial_combinations = all_combinations(all_prime_factors)\n        return all_factorial_combinations\n    \n    def all_primorial_combinations_of_factors(elements):\n        \"\"\"\n        Returns a list with all permutations of all combinations of the primorial of prime factors of elements\n        Input:\n        elements - list of integers\n        Output:\n        All permutations of all combinations of the primorial of prime factors of elements\n        \"\"\"\n        elements.sort()\n        all_factorial_combinations = []\n        all_primorial_factors = primorial(elements)\n        all_factorial_combinations = all_combinations(all_primorial_factors)\n        return all_factorial_combinations\n    \n    def generate_primes_up_to_n_digits(n):\n        \"\"\"\n        Returns a list with all primes up to n digits\n        Input:\n        n - integer\n        Output:\n        All primes up to n digits\n        \"\"\"\n        import sympy\n        \n        def is_prime(n):\n            \"\"\"\n            Checks if a given integer is prime.\n            Input:\n            n - integer\n            Output:\n            True, if n is prime, False otherwise\n            \"\"\"\n            if n==0 or n==1:\n                return False\n            elif n==2:\n                return True\n            elif n==3:\n                return True\n            elif n==4:\n                return False\n            else:\n                return all(n%i for i in range(2,n))\n        \n        def list_primes(n):\n            \"\"\"\n            Returns a list of primes up to n\n            Input:\n            n - integer\n            Output:\n            List of primes up to n\n            \"\"\"\n            return sympy.primerange(0,n)\n        \n        def is_permutation(p,q):\n            \"\"\"\n            Checks if p is a permutation of q.\n            Input:\n            p - integer\n            q - integer\n            Output:\n            True, if p is a permutation of q, False otherwise\n            \"\"\"\n            if sorted(str(p)) == sorted(str(q)):\n                return True\n            return False\n        \n        def all_permutations(elements):\n            \"\"\"\n            Returns a list with all permutations of elements\n            Input:\n            elements - list of integers\n            Output:\n            All permutations of elements\n            \"\"\"\n            return list(set(list(map(list,multiset_permutations(elements)))))\n        \n        def all_combinations(elements):\n            \"\"\"\n            Returns a list with all combinations of elements\n            Input:\n            elements - list of integers\n            Output:\n            All combinations of elements\n            \"\"\"\n            return list(set(list(map(list,permutations(elements)))))\n        \n        def all_factorial_combinations(elements):\n            \"\"\"\n            Returns a list with all permutations of all combinations of elements\n            Input:\n            elements - list of integers\n            Output:\n            All permutations of all combinations of elements\n            \"\"\"\n            elements.sort()\n            all_combinations = all_combinations(elements)\n            all_factorial_combinations = []\n            for i in range(0,len(all_combinations)):\n                for j in range(1,len(all_combinations[i])+1):\n                    all_factorial_combinations.append(all_combinations[i][0:j])\n            return all_factorial_combinations\n        \n        def all_factorial_combinations_of_factors(elements):\n            \"\"\"\n            Returns a list with all permutations of all combinations of prime factors of elements\n            Input:\n            elements - lis"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    x = 2\n    c = 2\n    s = 2\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert isinstance(n, int) and n>0, \"Invalid input\"\n    \n    prime_list = []\n    if n == 1:\n        return 2\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # create empty list to store the results of the operations\n    div_results = []\n    # iterate through each tuple to perform the operations\n    for i in range(len(test_tup1)):\n        # append the result of the operation to the list\n        div_results.append(test_tup1[i] / test_tup2[i])\n    # return the list\n    return div_results\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a/b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 and test_tup2[i] == 0:\n            result.append('0')\n        elif test_tup1[i] == 0 and test_tup2[i]!= 0:\n            result.append('error')\n        else:\n            result.append(test_tup1[i]/test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(i/j for i,j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([(test_tup1[i]/test_tup2[i]) for i in range(len(test_tup1))])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_list = []\n    for index, val in enumerate(test_tup1):\n        result_list.append(val/test_tup2[index])\n    return tuple(result_list)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert division_elements(((5,2,3),(3,8,1)),((4,3,2),(5,3,9))) == ((5/3,2/3,3/3),(3,8/5,1/5))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        div_tup = tuple(map(operator.truediv, test_tup1, test_tup2))\n        return div_tup\n    except ZeroDivisionError:\n        return \"DIVISION BY ZERO\"\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = (1, 2, 3, 4, 5)\n    test_tup2 = (2, 4, 6, 8, 10)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_list = []\n    second_list = []\n    for i in range(L):\n        first_list.append(list1[i])\n    for i in range(L, len(list1)):\n        second_list.append(list1[i])\n    return(first_list, second_list)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = list1[L:]\n    list1 = list1[:L]\n    return (list1, list2)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1)//2\n    if len(list1)%2 == 0:\n        list1_1 = list1[:half]\n        list1_2 = list1[half:]\n    else:\n        list1_1 = list1[:half]\n        list1_2 = list1[half+1:]\n    return (list1_1, list1_2)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    # first_part = []\n    # second_part = []\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    len1 = L\n    len2 = len(list1) - L\n    list1_part = list1[0:len1]\n    list2_part = list1[len1:len1 + len2]\n    tup = (list1_part, list2_part)\n    return tup\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # solution:\n    if len(list1) % L == 0:\n        part1 = list1[:L]\n        part2 = list1[L:]\n    else:\n        part1 = list1[:L]\n        part2 = list1[L + 1:]\n    return part1, part2\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None\n    else:\n        return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    first_part = list1[0:L]\n    second_part = list1[L:]\n    # Return a tuple with the two parts\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return None\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # don't change the code above \ud83d\udc46\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 6\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print('please enter a positive number')\n    else:\n        if h_age <= 2:\n            dog_age = h_age * 10.5\n            print(f'{h_age} human years is equal to {dog_age} dog years')\n        else:\n            dog_age = 21 + (h_age - 2)*4\n            print(f'{h_age} human years is equal to {dog_age} dog years')\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7.0\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # 4 years for each human year\n    return h_age * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # return 15\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = (h_age * 7)\n    print('The dog\\'s age in dog\\'s years is:',dog_age_in_years)\n    \n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age*7\n    return dog_years\n    \n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # check if it's a list\n    if type(S) == list:\n        # check if step is an int\n        if type(step) == int:\n            # check if step is positive\n            if step > 0:\n                # check if step is larger than the length of list\n                if step < len(S):\n                    # check if the index is not larger than the length of list\n                    if step < len(S) - 1:\n                        # create a new list and store the first n elements of list\n                        new_list = [S[i] for i in range(0, step)]\n                        # create a new list and store the last n elements of list\n                        new_list.append(S[step:])\n                        # return the new list\n                        return new_list\n                    # if the index is larger than the length of list\n                    else:\n                        # create a new list and store the first n elements of list\n                        new_list = [S[i] for i in range(0, step)]\n                        # create a new list and store the rest of the elements of list\n                        new_list.append(S[step:])\n                        # return the new list\n                        return new_list\n                # if step is larger than the length of list\n                else:\n                    # return original list\n                    return S\n            # if step is not an int\n            else:\n                # return None\n                return None\n        # if step is not an int\n        else:\n            # return None\n            return None\n    # if S is not a list\n    else:\n        # return None\n        return None\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[step*i:step*i + step] for i in range(len(S)//step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i + step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_splits = []\n    # list_splits = [S[0:step], S[step:2*step], S[2*step:3*step]]\n    for i in range(0, len(S), step):\n        list_splits.append(S[i:i+step])\n    return list_splits\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def split_list(lst, step):\n        return [lst[i::step] for i in range(step)]\n    return split_list(S, step)\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[step*i:step*(i+1)] for i in range(len(S)//step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n    "
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    x = []\n    for i in range(0,len(S), step):\n        x.append(S[i:i+step])\n    return x\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a=l**2\n    print(a)\n    return a\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l <= 0:\n        raise ValueError(\"l must be greater than 0\")\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = int(input(\"Enter side length: \"))\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = l**2\n    return side\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6*l)**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    assert type(n) is int, \"Input must be an integer\"\n    assert n >= 0, \"Input must be positive\"\n    return sum(i**2 for i in range(n) if i % 2!= 0)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([(n)**2 for n in range(1,n+1,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i*i for i in range(1,n+1,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_sqrs = 0\n    for i in range(1,n+1,2):\n        sum_of_sqrs += (i*i)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if(i%2!= 0):\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return ((n)*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    l = []\n    for i in range(1,n+1):\n        l.append(i**2)\n    return sum(l)\n    \ndef prime_Number_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of all the prime numbers between 1 and n.\n    '''\n    l = []\n    for i in range(1,n+1):\n        if (isPrime(i)):\n            l.append(i)\n    return sum(l)\n    \ndef palindrome_Number_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of all palindromic numbers between 1 and n.\n    '''\n    l = []\n    for i in range(1,n+1):\n        if (isPalindrome(i)):\n            l.append(i)\n    return sum(l)\n    \ndef armstrong_Number_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of all the numbers between 1 and n that have the same number of digits in their base-10 representation and are also an Armstrong number.\n    '''\n    l = []\n    for i in range(1,n+1):\n        if (isArmstrong(i)):\n            l.append(i)\n    return sum(l)\n    \ndef non_Armstrong_Number_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of all the numbers between 1 and n that are not Armstrong numbers.\n    '''\n    l = []\n    for i in range(1,n+1):\n        if not(isArmstrong(i)):\n            l.append(i)\n    return sum(l)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return n**2 + square_Sum(n-1)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(1,n+1,2))\nprint(square_Sum(10))"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    stars = [1]\n    i = 1\n    while i < n:\n        stars.append(stars[i-1]+3*(i-1)+1)\n        i += 1\n    return stars[-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    stars = [1]\n    for i in range(n - 1): \n        stars.append(3 * stars[i] + 1)\n    return stars[n - 1]\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return len([n for n in range(1, n + 1) if str(n) == str(n)[::-1]])\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    pass\n    \nif __name__ == '__main__':\n    print(find_star_num(3))\n    print(find_star_num(7))"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    # 1. Calculate star number by n-th row.\n    # 2. Calculate star number by n-th column.\n    # 3. Check if star number is odd or even. \n    # 4. Return the star number.\n    # 5. Print the star number.\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    \n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    # 1. Calculate star number by n-th row.\n    def star_number_row(n):\n        return int(n*(n+1)/2)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    while True:\n        # 1st 5 star: (1, 4, 9, 16,...)\n        # 6th star: (1, 6, 21, 44,...)\n        # 7th star: (1, 8, 27, 64,...)\n        # 8th star: (1, 8, 27, 64,...)\n        # 9th star: (1, 16, 33, 64,...)\n        #...\n        if i % 5 == 1 and i % 6 == 5 and i % 7 == 3 and i % 8 == 5 and i % 9 == 1:\n            return i\n        i += 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n+1):\n        if find_prime(i) == 1:\n            print(i)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n ** 3 + (n ** 2) + (n ** 2) + (n ** 2) + (n ** 2) + (n ** 2) + n + n + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 0\n    for i in range(1, n + 1):\n        num += i\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n**2 + n)/2\n    \n    \ndef main():\n    n = int(input(\"Enter the nth star number you want to find: \"))\n    print(find_star_num(n))\n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == \" \":\n        return 32\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == 'A':\n        return 65\n    elif k == 'B':\n        return 66\n    elif k == 'C':\n        return 67\n    elif k == 'D':\n        return 68\n    elif k == 'E':\n        return 69\n    elif k == 'F':\n        return 70\n    elif k == 'G':\n        return 71\n    elif k == 'H':\n        return 72\n    elif k == 'I':\n        return 73\n    elif k == 'J':\n        return 74\n    elif k == 'K':\n        return 75\n    elif k == 'L':\n        return 76\n    elif k == 'M':\n        return 77\n    elif k == 'N':\n        return 78\n    elif k == 'O':\n        return 79\n    elif k == 'P':\n        return 80\n    elif k == 'Q':\n        return 81\n    elif k == 'R':\n        return 82\n    elif k == 'S':\n        return 83\n    elif k == 'T':\n        return 84\n    elif k == 'U':\n        return 85\n    elif k == 'V':\n        return 86\n    elif k == 'W':\n        return 87\n    elif k == 'X':\n        return 88\n    elif k == 'Y':\n        return 89\n    elif k == 'Z':\n        return 90\n    elif k == 'a':\n        return 97\n    elif k == 'b':\n        return 98\n    elif k == 'c':\n        return 99\n    elif k == 'd':\n        return 100\n    elif k == 'e':\n        return 101\n    elif k == 'f':\n        return 102\n    elif k == 'g':\n        return 103\n    elif k == 'h':\n        return 104\n    elif k == 'i':\n        return 105\n    elif k == 'j':\n        return 106\n    elif k == 'k':\n        return 107\n    elif k == 'l':\n        return 108\n    elif k =='m':\n        return 109\n    elif k == 'n':\n        return 110\n    elif k == 'o':\n        return 111\n    elif k == 'p':\n        return 112\n    elif k == 'q':\n        return 113\n    elif k == 'r':\n        return 114\n    elif k =='s':\n        return 115\n    elif k == 't':\n        return 116\n    elif k == 'u':\n        return 117\n    elif k == 'v':\n        return 118\n    elif k == 'w':\n        return 119\n    elif k == 'x':\n        return 120\n    elif k == 'y':\n        return 121\n    elif k == 'z':\n        return 122\n    else:\n        return -1\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return k.encode('ascii')\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    print(ord(k))\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list = []\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_list.append(arr[i])\n    for element in even_list:\n        even_sum += element\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = []\n    even_index = []\n    for i in range(len(arr)):\n        if i%2==0:\n            even.append(arr[i])\n            even_index.append(i)\n    print(even)\n    print(even_index)\n    print(sum(even))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum = even_sum + arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_index = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_pos_sum = 0\n    for x in arr:\n        if x % 2 == 0 and arr.index(x) % 2 == 0:\n            even_pos_sum += x\n    return even_pos_sum\nprint(\"Sum of even numbers at even positions:\", sum_even_and_even_index([1,3,4,6,7,8]))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even_index += arr[i]\n    return sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    lst = []\n    for i in range(0, len(arr)):\n        if(i%2 == 0):\n            lst.append(arr[i])\n    return sum(lst)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if (i % 2) == 0:\n            if arr[i] % 2 == 0:\n                s += arr[i]\n    return s\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for num in arr:\n        if num % 2 == 0 and arr.index(num) % 2 == 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            Sum += i**5\n    return Sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    def is_Even(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n        \n    def Power(n):\n        return pow(n,5)\n    \n    def Power_Sum(n):\n        if is_Even(n) == True:\n            return Power(n)\n        else:\n            return 0\n    \n    return Power_Sum(n)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even = 0\n    for i in range(n):\n        even += i**5\n    return even\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for x in range(n):\n        if(int(x**5) % 2 == 0):\n            sum += int(x**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code goes here\n    num = 1\n    for i in range(1, n+1):\n        num = num + (i**5)\n    return num\n    \n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([x**5 for x in range(n) if x%2==0])\n    \n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        sum = 2 + even_Power_Sum(n-1)\n        return sum\n    \n    \ndef even_Power_Sum_Recursive(n): \n    '''\n    Write a recursive python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        return even_Power_Sum_Recursive(n-1) + 2 + even_Power_Sum_Recursive(n-2)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<1:\n        return 0\n    else:\n        return ((n*(n+1)//2)*5**5)\n        \n    #return n*((n+1)*5**5)\n    \n        \n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #initializing the list of powers\n    powers = []\n    for i in range(1,n+1):\n        powers.append(i**5)\n    return sum(powers)\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for each_tuple in test_list:\n        rear_list.append(each_tuple[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x: x[1], test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elem = []\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[1] for tuple in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    if test_list == [] or test_list == [[]]:\n        return []\n    else:\n        return [elem[-1] for elem in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = (2, 3, 4, 5)\n    test_tup2 = (3, 5, 6, 7, 9)\n    output_tup = (0, 0, 0, 0)\n    \n    for i in range(len(test_tup1)):\n        output_tup[i] = test_tup1[i] - test_tup2[i]\n    return output_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    new_tuple = []\n    for i in range(0, len(test_tup1)):\n        new_tuple.append(test_tup1[i] - test_tup2[i])\n    print(new_tuple)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(subtract_element(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # number of elements in tuple\n    n = len(test_tup1)\n    \n    # substract elements\n    subtracted_tup = tuple([test_tup1[i] - test_tup2[i] for i in range(n)])\n    \n    return subtracted_tup\n    \ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and multiplies the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # number of elements in tuple\n    n = len(test_tup1)\n    \n    # multiply elements\n    multiplied_tup = tuple([test_tup1[i] * test_tup2[i] for i in range(n)])\n    \n    return multiplied_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(substract_elements(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += (test_tup1[i] - test_tup2[i],)\n    return test_tup3\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n    return (tup1[0] - tup2[0], tup1[1] - tup2[1], tup1[2] - tup2[2])\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup3 = ()\n    for index in range(0, len(test_tup1)):\n        tup3 += ((test_tup1[index] - test_tup2[index]),)\n    return tup3\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # base case for recursion\n    if (n == 0 or n == 1): \n        return 1 \n    # recursion step\n    return even_binomial_Coeff_Sum(n-1) + 2*even_binomial_Coeff_Sum(n-2)\ndef tree_numbers(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all positive integer solutions to the equation a^2 + b^2 = n.\n    '''\n    if (n == 0 or n == 1): \n        return 1\n    if (n == 2): \n        return 3\n    if (n == 3): \n        return 4\n    # Recursion step\n    return tree_numbers(n-1) + int(math.sqrt(n)) + tree_numbers(n-4)\ndef count_nodes(root): \n    '''\n    Write a python function that takes in a binary tree root and returns the number of nodes in the tree.\n    '''\n    # base case\n    if (root == None): \n        return 0\n    # Recursion step\n    return 1 + count_nodes(root.left) + count_nodes(root.right)\ndef sum_nodes(root): \n    '''\n    Write a python function that takes in a binary tree root and returns the sum of all nodes in the tree.\n    '''\n    # base case\n    if (root == None): \n        return 0\n    # Recursion step\n    return root.data + sum_nodes(root.left) + sum_nodes(root.right)\ndef find_max_element(root): \n    '''\n    Write a python function that takes in a binary tree root and returns the node with the maximum value in the tree.\n    '''\n    # base case\n    if (root == None): \n        return None\n    # Recursion step\n    if (root.right == None and root.left == None):\n        return root\n    if (root.right!= None and root.left == None):\n        return find_max_element(root.right)\n    if (root.left!= None and root.right == None):\n        return find_max_element(root.left)\n    return find_max_element(root.right) if find_max_element(root.right).data > find_max_element(root.left).data else find_max_element(root.left)\ndef find_max_element_iterative(root): \n    '''\n    Write a python function that takes in a binary tree root and returns the node with the maximum value in the tree. Iterative solution.\n    '''\n    current = root\n    while current!= None:\n        if current.right == None and current.left == None:\n            return current\n        if current.right!= None and current.left == None:\n            current = current.right\n        if current.left!= None and current.right == None:\n            current = current.left\n        if current.right!= None and current.left!= None:\n            current = current.right if current.right.data > current.left.data else current.left\ndef height_of_tree(root): \n    '''\n    Write a python function that takes in a binary tree root and returns the height of the binary tree.\n    '''\n    # base case\n    if (root == None): \n        return 0\n    # Recursion step\n    return 1 + height_of_tree(root.left) if height_of_tree(root.left) > height_of_tree(root.right) else 1 + height_of_tree(root.right)\ndef is_full_binary_tree(root): \n    '''\n    Write a python function that takes in a binary tree root and returns True if the binary tree is a full binary tree, otherwise return False.\n    '''\n    # base case\n    if (root == None): \n        return True\n    # Recursion step\n    return is_full_binary_tree(root.left) and is_full_binary_tree(root.right) if root.left!= None and root.right!= None else False\ndef is_full_binary_tree_iterative(root): \n    '''\n    Write a python function that takes in a binary tree root and returns True if the binary tree is a full binary tree, otherwise return False. Iterative solution.\n    '''\n    # base case\n    if (root == None): \n        return True\n    # Recursion step\n    if root.left!= None and root.right!= None:\n        return is_full_binary_tree_iterative(root.left) and is_full_binary_tree_iterative(root.right)\n    if root.left == None and root.right == None:\n        return True\n    return False\ndef is_complete_binary_tree(root): \n    '''\n    Write a python function that takes in a binary tree root and returns True if the binary tree is a complete binary tree, otherwise return False.\n    '''\n    # base case\n    if (root == None): \n        return True\n    # Recursion step\n    if root.left!= None and root.right!= None:\n        return is_complete_binary_tree(root.left) and is_complete_binary_tree(root.right)\n    if root.left == None and root.right == None:\n        return True\n    return False\ndef is_complete_binary_tree_iterative(root): \n    '''\n    Write a python function that takes in a binary tree root and returns True if the binary tree is a complete binary tree, otherwise return False. Iterative solution.\n    '''\n    # base case\n    if (root == None): \n        return True\n    # Recursion step\n    if root.left!= None and root.right!= None:\n        return is_complete_binary_tree_iterative(root.left) and is_complete_binary_tree_iterative(root.right)\n    if root.left == None and root.right == None:\n        return True\n    return False\ndef number_of_full_nodes(root): \n    '''\n    Write a python function that takes in a binary tree root and returns the number of full nodes in the binary tree.\n    '''\n    # base case\n    if (root == None): \n        return 0\n    # Recursion step\n    if root.left == None and root.right == None:\n        return 1\n    return number_of_full_nodes(root.left) + number_of_full_nodes(root.right)\ndef number_of_full_nodes_iterative(root): \n    '''\n    Write a python function that takes in a binary tree root and returns the number of full nodes in the binary tree. Iterative solution.\n    '''\n    # base case\n    if (root == None): \n        return 0\n    # Recursion step\n    queue = [root]\n    counter = 0\n    while queue!= []:\n        current = queue.pop()\n        if current.left!= None and current.right!= None:\n            queue.append(current.left)\n            queue.append(current.right)\n        if current.left == None and current.right == None:\n            counter += 1\n    return counter\ndef number_of_leaf_nodes(root): \n    '''\n    Write a python function that takes in a binary tree root and returns the number of leaf nodes in the binary tree.\n    '''\n    # base case\n    if (root == None): \n        return 0\n    # Recursion step\n    if root.left == None and root.right == None:\n        return 1\n    return number_of_leaf_nodes(root.left) + number_of_leaf_nodes(root.right)\ndef number_of_leaf_nodes_iterative(root): \n    '''\n    Write a python function that takes in a binary tree root and returns the number of leaf nodes in the binary tree. Iterative solution.\n    '''\n    # base case\n    if (root == None): \n        return 0\n    # Recursion step\n    queue = [root]\n    counter = 0\n    while queue!= []:\n        current = queue.pop()\n        if current.left!= None and current.right!= None:\n            queue.append(current.left)\n            queue.append(current.right)\n        if current.left == None and current.right == None:\n            counter += 1\n    return counter\ndef find_node(roo"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<=0:\n        return 0\n    else:\n        return sum([math.comb(n,k)*math.comb(n,k-2) for k in range(2,n+1,2)])\n    '''\n    #n = int(input())\n    #print(even_binomial_Coeff_Sum(n))\n    '''\n    \ndef factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and returns n!.\n    '''\n    #n = int(input())\n    return math.factorial(n)\n    '''\n    #print(factorial(n))\n    '''\ndef number_of_lines(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of lines with no repeated characters in them.\n    '''\n    #n = int(input())\n    return int((n+1)*n/2)\n    '''\n    #print(number_of_lines(n))\n    '''\ndef largest_prime_factor(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the largest prime factor of n.\n    '''\n    #n = int(input())\n    if n<=2:\n        return n\n    else:\n        for i in range(3,math.ceil(math.sqrt(n))):\n            if n%i==0:\n                return i\n    '''\n    #print(largest_prime_factor(n))\n    '''\ndef prime_factors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns a list of the prime factors of n.\n    '''\n    #n = int(input())\n    if n<=1:\n        return None\n    elif n == 2:\n        return [2]\n    else:\n        nums = [2]\n        for i in range(2,n):\n            if i%2==0:\n                continue\n            else:\n                if n%i == 0:\n                    nums.append(i)\n        return nums\n    '''\n    #print(prime_factors(n))\n    '''\ndef prime_factors_mult(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the product of the prime factors of n.\n    '''\n    #n = int(input())\n    prime_factors_list = prime_factors(n)\n    return math.prod(prime_factors_list) if prime_factors_list else None\n    '''\n    #print(prime_factors_mult(n))\n    '''\ndef coin_change_div(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of ways that n can be expressed as the sum of non-negative integers.\n    '''\n    #n = int(input())\n    return math.comb(n+1,2)\n    '''\n    #print(coin_change_div(n))\n    '''\ndef n_choose_k(n,k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and returns the number of ways that n can be expressed as the sum of k non-negative integers.\n    '''\n    #n = int(input())\n    #k = int(input())\n    if n<k or n<=0 or k<=0:\n        return 0\n    else:\n        return math.factorial(n)/(math.factorial(k)*math.factorial(n-k))\n    '''\n    #print(n_choose_k(n,k))\n    '''\ndef number_of_steps_recursive(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of steps it takes to reach 1 using the following steps:\n    1. If n is odd, divide by 2.\n    2. If n is even, replace n with n/2.\n    '''\n    #n = int(input())\n    def step(n):\n        if n==1:\n            return 1\n        elif n%2==1:\n            return step(n//2) + 1\n        else:\n            return step(n//2)\n    return step(n)\n    '''\n    #print(number_of_steps_recursive(n))\n    '''\ndef is_rotation(s1,s2):\n    '''\n    Write a python function that takes in 2 strings s1 and s2 and returns true if s2 is a rotation of s1, and false otherwise.\n    '''\n    #s1 = input()\n    #s2 = input()\n    if len(s1)!=len(s2):\n        return False\n    else:\n        for i in range(len(s1)):\n            if s1==s2[i:]+s2[:i]:\n                return True\n    return False\n    '''\n    #print(is_rotation(s1,s2))\n    '''\ndef is_rotation_recursive(s1,s2):\n    '''\n    Write a python function that takes in 2 strings s1 and s2 and returns true if s2 is a rotation of s1, and false otherwise.\n    '''\n    #s1 = input()\n    #s2 = input()\n    if len(s1)!=len(s2):\n        return False\n    else:\n        return s2 in s1+s1\n    '''\n    #print(is_rotation_recursive(s1,s2))\n    '''\ndef is_rotation_v2(s1,s2):\n    '''\n    Write a python function that takes in 2 strings s1 and s2 and returns true if s2 is a rotation of s1, and false otherwise.\n    '''\n    #s1 = input()\n    #s2 = input()\n    if len(s1)!=len(s2):\n        return False\n    else:\n        for i in range(len(s1)):\n            if s2 == s1[i:]+s1[:i]:\n                return True\n    return False\n    '''\n    #print(is_rotation_v2(s1,s2))\n    '''\ndef is_rotation_v3(s1,s2):\n    '''\n    Write a python function that takes in 2 strings s1 and s2 and returns true if s2 is a rotation of s1, and false otherwise.\n    '''\n    #s1 = input()\n    #s2 = input()\n    if len(s1)!=len(s2):\n        return False\n    else:\n        if s2 in s1+s1:\n            return True\n        else:\n            return False\n    '''\n    #print(is_rotation_v3(s1,s2))\n    '''\ndef is_rotation_v4(s1,s2):\n    '''\n    Write a python function that takes in 2 strings s1 and s2 and returns true if s2 is a rotation of s1, and false otherwise.\n    '''\n    #s1 = input()\n    #s2 = input()\n    if len(s1)!=len(s2):\n        return False\n    else:\n        if s2 in s1*2:\n            return True\n    return False\n    '''\n    #print(is_rotation_v4(s1,s2))\n    '''\ndef is_rotation_v5(s1,s2):\n    '''\n    Write a python function that takes in 2 strings s1 and s2 and returns true if s2 is a rotation of s1, and false otherwise.\n    '''\n    #s1 = input()\n    #s2 = input()\n    if len(s1)!=len(s2):\n        return False\n    else:\n        if s2 in s1+s1:\n            return True\n        else:\n            return False\n    '''\n    #print(is_rotation_v5(s1,s2))\n    '''\ndef is_rotation_v6(s1,s2):\n    '''\n    Write a python function that takes in 2 strings s1 and s2 and returns true if s2 is a rotation of s1, and false otherwise.\n    '''\n    "
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    count = 0\n    for i in range(2*n):\n        if(i%2==0):\n            count+=i\n    return count\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    # Initialize binary numbers for 0 and 1, and set n as an integer\n    b0 = 0\n    b1 = 1\n    n = int(n)\n    \n    # Loop from 0 to n to calculate the sum of all even index coefficients\n    for i in range(0,n+1,2):\n        if i == 0:\n            sum = b0\n        elif i == 1:\n            sum = b1\n        else:\n            sum = sum + (b0 + b1) * (i//2)\n        \n        # Find the binary equivalent of the sum\n        binSum = bin(sum)\n        \n        # Find the binary number of b0 and b1 \n        bin0 = bin(b0)\n        bin1 = bin(b1)\n        \n        # Flip the bits to get b0 and b1\n        bin0 = bin0[2:]\n        bin1 = bin1[2:]\n        \n        # Subtract the flipped binary number of b0 and b1 from the flipped binary number of the sum\n        binSum = bin(int(binSum,2) - int(bin0,2) - int(bin1,2))\n        \n        # Flip the bits to get b0 and b1 back\n        bin0 = bin0[::-1]\n        bin1 = bin1[::-1]\n        \n        # Convert the binary number to decimal number\n        bin0 = int(bin0,2)\n        bin1 = int(bin1,2)\n        \n        # Find the decimal equivalent of the sum\n        sum = int(binSum,2)\n        \n        # Increment the b0 and b1 value by 1 to get the next term of the sum\n        b0 = b0 + 1\n        b1 = b1 + b0 + 1\n    \n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Coeff_Sum = 0\n    for x in range(1,n+1):\n        Coeff_Sum += ((-1)**(x+1))*(math.factorial(x))/math.factorial(2*x)\n    return Coeff_Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n<=0):\n        return 0\n    elif (n==1):\n        return 2\n    else:\n        return n*even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Base case\n    if(n == 0): \n        return 0\n    elif(n == 1): \n        return 1\n    else: \n        # sum of even binomial coefficients of 1,3,5,7,....\n        return n * (2 * even_binomial_Coeff_Sum(n - 2)) \n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #base case\n    if n == 0:\n        return 1\n    #base case\n    elif n == 1:\n        return 1\n    #recursive case\n    else:\n        return even_binomial_Coeff_Sum(n-2) + n\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomialCoeff(n, k): \n        if k > n or k < 0: \n            return 0\n        return math.factorial(n) / ((math.factorial(k) * math.factorial(n - k))) \n    sum = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            sum = sum + binomialCoeff(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            s += math.comb(n,i)\n    return s\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = (pi * (r ** 2) * h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return (math.pi * r**2 * h)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*(r**2)*h\n    \n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=math.pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    v = pi * r ** 2 * h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    return pi * r ** 2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.141592*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**2*pi*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Your code here\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result ={k:v for k,v in dict.items() if v>=n}\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict1={k:v for (k,v) in dict.items() if v>=n}\n    return dict1\nprint(dict_filter({1:1,2:2,3:3},2))\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: val for key, val in dict.items() if val >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filter({\"a\" : 1, \"b\" : 2, \"c\" : 3},4)\n    # return {\"a\": 1, \"b\": 2, \"c\": 3}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return{k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    print(dict_filter({'a':5,'b':6,'c':7},6))\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key,value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    #Write your code here\n    return len([i for i in test_tup if i in test_tup[:test_tup.index(i)]])\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup_lst = list(test_tup)\n    tup_lst.sort()\n    for i in range(0, len(tup_lst)):\n        if tup_lst[i] == test_tup[i]:\n            return i\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    # Code here\n    # Getting the length of the given tuple and the tuple elements\n    length_of_tuple, tuple_elements = len(test_tup), list(test_tup)\n    \n    # Counting the number of occurences\n    occurrences = [0] * length_of_tuple\n    for i in range(length_of_tuple):\n        for j in range(i, length_of_tuple):\n            if tuple_elements[i] == tuple_elements[j]:\n                occurrences[i] += 1\n    \n    return tuple(occurrences)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = test_tup\n    first_occurences = 0\n    test_tup_size = len(test_tup)\n    for i in range(test_tup_size):\n        if test_tup[i] == test_tup[0]:\n            first_occurences += 1\n        else:\n            break\n    return first_occurences\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    print(test_tup)\n    try:\n        res = test_tup[:test_tup.index(1) + 1]\n    except ValueError:\n        res = test_tup[:len(test_tup)]\n    print(res)\n    return len(res)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            return count\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(set(list(test_tup)[0:list(test_tup)[0].find(test_tup[0])]))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup = tuple(test_tup)\n    dic = {}\n    for i in tup:\n        if i not in dic:\n            dic[i] = tup.index(i)\n    dic_sorted = sorted(dic.items(), key=lambda kv: kv[1])\n    print(dic_sorted)\n    dic2 = {}\n    for i in dic_sorted:\n        if i[0] not in dic2:\n            dic2[i[0]] = 1\n        else:\n            dic2[i[0]] += 1\n    print(dic2)\n    count = 0\n    for i in dic2:\n        if i[0] not in tup:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #base case\n    if len(test_tup) == 0:\n        return 0\n    else:\n        first_element = test_tup[0]\n        if isinstance(first_element, tuple):\n            return 1 + count_first_elements(first_element)\n        else:\n            return 0\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def is_decagonal(num):\n        return (1+8*num)**0.5 % 2 == 1\n    return [i for i in range(1,n+1) if is_decagonal(i)][-1]\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Base case:\n    if n == 1:\n        return(10)\n    # Recursive case:\n    else:\n        return(n * 10 + n - 10)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    nth_term = 0\n    for i in range(1, n + 1):\n        nth_term = nth_term + i\n    \n    if nth_term == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+9)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    return int(0.5*n*(3*n-1))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the count as n \n    count = n \n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (n+8)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    return (n*(n+1))//2\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # if we take n-1 decagonals, we need to make n-1 decagonals of 1 more element.\n    # 1 has no right neighbor, so just take n-1 decagonals and make them of 1 more element.\n    # so now, the number of decagonals of 1 more element to take to get to nth decagonal will be n-1.\n    # add them up\n    n = n-1\n    sum_ = 0\n    for i in range(n):\n        sum_ += i\n    return sum_\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    for i in dlist:\n        if i == item:\n            found = True\n            break\n        else:\n            pos = pos + 1\n    if found == False:\n        pos = -1\n    return (found, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            break\n        else:\n            pos = -1\n    return found, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index_position = 0\n    index = 0\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    print(\"Doing sequential search:\")\n    print(\"List: \" + str(dlist))\n    print(\"Item: \" + str(item))\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return (True, index)\n    return (False, -1)\n    \ndef binary_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    print(\"Doing binary search:\")\n    print(\"List: \" + str(dlist))\n    print(\"Item: \" + str(item))\n    if len(dlist) == 0:\n        return (False, -1)\n    midpoint = len(dlist)//2\n    if dlist[midpoint] == item:\n        return (True, midpoint)\n    if item < dlist[midpoint]:\n        return binary_search(dlist[:midpoint], item)\n    else:\n        return binary_search(dlist[midpoint+1:], item)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n            break\n    return (found, pos)\n    \ndef binary_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    lo = 0\n    hi = len(dlist) - 1\n    \n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if dlist[mid] == item:\n            return (True, mid)\n        elif dlist[mid] < item:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return (False, -1)\n    \ndef binary_search_recursive(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    if len(dlist) == 0:\n        return (False, -1)\n    else:\n        mid = len(dlist) // 2\n        if dlist[mid] == item:\n            return (True, mid)\n        elif dlist[mid] < item:\n            return binary_search_recursive(dlist[mid + 1:], item)\n        else:\n            return binary_search_recursive(dlist[:mid], item)\n    \ndef bubble_sort(dlist):\n    '''\n    Write a function that takes in an array and returns a sorted array in ascending order.\n    '''\n    for i in range(len(dlist) - 1, 0, -1):\n        for j in range(i):\n            if dlist[j] > dlist[j + 1]:\n                temp = dlist[j]\n                dlist[j] = dlist[j + 1]\n                dlist[j + 1] = temp\n    return dlist\n    \ndef binary_search_index(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # return binary_search_recursive(dlist, item)\n    return binary_search(dlist, item)\n    \ndef binary_search_index_recursive(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # return binary_search_recursive(dlist, item)\n    return binary_search_recursive(dlist, item)\n    \ndef selection_sort(dlist):\n    '''\n    Write a function that takes in an array and returns an array that is sorted in ascending order.\n    '''\n    for i in range(len(dlist) - 1, 0, -1):\n        temp = 0\n        for j in range(i + 1):\n            if dlist[j] > dlist[temp]:\n                temp = j\n        dlist[i], dlist[temp] = dlist[temp], dlist[i]\n    return dlist\n    \ndef quick_sort(dlist):\n    '''\n    Write a function that takes in an array and returns an array that is sorted in ascending order.\n    '''\n    \n    def partition(dlist, lo, hi):\n        if lo >= hi:\n            return\n        elif hi - lo == 1:\n            if dlist[lo] > dlist[hi]:\n                dlist[lo], dlist[hi] = dlist[hi], dlist[lo]\n            return\n        elif lo < hi:\n            pivot = dlist[hi]\n            left = lo\n            right = hi - 1\n            while True:\n                while dlist[left] < pivot:\n                    left += 1\n                while dlist[right] > pivot:\n                    right -= 1\n                if left >= right:\n                    break\n                else:\n                    dlist[left], dlist[right] = dlist[right], dlist[left]\n            dlist[left], dlist[hi] = dlist[hi], dlist[left]\n            partition(dlist, lo, left)\n            partition(dlist, right + 1, hi)\n            \n    partition(dlist, 0, len(dlist) - 1)\n    return dlist\n    \ndef merge_sort(dlist):\n    '''\n    Write a function that takes in an array and returns an array that is sorted in ascending order.\n    '''\n    \n    def merge(dlist, start, mid, end):\n        # print(dlist, start, mid, end)\n        i = start\n        j = mid\n        temp = []\n        while i < mid and j < end:\n            if dlist[i] < dlist[j]:\n                temp.append(dlist[i])\n                i += 1\n            else:\n                temp.append(dlist[j])\n                j += 1\n        while i < mid:\n            temp.append(dlist[i])\n            i += 1\n        while j < end:\n            temp.append(dlist[j])\n            j += 1\n        for k in range(start, end):\n            dlist[k] = temp[k - start]\n            \n    def merge_sort_recursive(dlist, start, end):\n        if start < end:\n            mid = (start + end) // 2\n            merge_sort_recursive(dlist, start, mid)\n            merge_sort_recursive(dlist, mid + 1, end)\n            merge(dlist, start, mid, end)\n            \n    merge_sort_recursive(dlist, 0, len(dlist))\n    return dlist\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # implement sequential search\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # get size of array\n    n = len(dlist)\n    # if item not in the array return tuple with False and -1\n    if item not in dlist:\n        return (False, -1)\n    # if item in the array return tuple with True and index of item\n    return (True, dlist.index(item))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # a set of data is created using set function.\n    # using set function we can remove duplicates from a list\n    # remove method can be used for lists, sets, dictionaries, and other data structures.\n    unique = set(test_list)\n    if len(unique) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list=[]\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    print(unique_list)\n    return 'The list is unique'\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item in unique_list:\n            return False\n        else:\n            unique_list.append(item)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    my_set = set(test_list)\n    if len(test_list) == len(my_set):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # return False if any duplicate element is found\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp = []\n    for elem in test_list:\n        if elem not in temp:\n            temp.append(elem)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #print(test_list)\n    unique_list = []\n    for e in test_list:\n        if e not in unique_list:\n            unique_list.append(e)\n        else:\n            print(e, \" is repeating\")\n    print(unique_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    result = {}\n    for elem in test_list:\n        if elem in result:\n            return False\n        else:\n            result[elem] = 1\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # list1 = [1, 2, 3]\n    # list2 = [4, 5, 6]\n    # ans = []\n    # for i in range(len(list1)):\n    #     ans.append(list1[i]-list2[i])\n    # return ans\n    list1 = nums1[:]\n    list2 = nums2[:]\n    for i in range(len(list1)):\n        list1[i] = list1[i] - list2[i]\n    return list1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # n1 = nums1[:]\n    # n2 = nums2[:]\n    # return [x-y for x,y in zip(n1,n2)]\n    return [x - y for x, y in zip(nums1, nums2)]\n    # return list(map(lambda x: x[0] - x[1], zip(nums1,nums2)))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #return [(x-y) for x,y in zip(nums1,nums2)]\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError\n    else:\n        return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = [int(i) for i in nums1.split()]\n    nums2 = [int(j) for j in nums2.split()]\n    return [i - j for i, j in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)==len(nums2):\n        return [nums1[i]-nums2[i] for i in range(len(nums1))]\n    else:\n        return -1\n    \n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert isinstance(nums1,list),'nums1 should be a list'\n    assert isinstance(nums2,list),'nums2 should be a list'\n    assert len(nums1)>=len(nums2),'nums1 should not be a sublist of nums2'\n    #print(nums1)\n    #print(nums2)\n    #print(len(nums1))\n    #print(len(nums2))\n    def subtract(x,y):\n        return x-y\n    for i in range(len(nums2)):\n        nums1[i]= subtract(nums1[i],nums2[i])\n    return nums1\n    #assert isinstance(nums1,list),'nums1 should be a list'\n    #assert isinstance(nums2,list),'nums2 should be a list'\n    #assert len(nums1)>=len(nums2),'nums1 should not be a sublist of nums2'\n    #print(nums1)\n    #print(nums2)\n    #print(len(nums1))\n    #print(len(nums2))\ndef multiply_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    assert isinstance(nums1,list),'nums1 should be a list'\n    assert isinstance(nums2,list),'nums2 should be a list'\n    assert len(nums1)>=len(nums2),'nums1 should not be a sublist of nums2'\n    def multiply(x,y):\n        return x*y\n    for i in range(len(nums2)):\n        nums1[i]= multiply(nums1[i],nums2[i])\n    return nums1\n    #assert isinstance(nums1,list),'nums1 should be a list'\n    #assert isinstance(nums2,list),'nums2 should be a list'\n    #assert len(nums1)>=len(nums2),'nums1 should not be a sublist of nums2'\n    #print(nums1)\n    #print(nums2)\n    #print(len(nums1))\n    #print(len(nums2))\ndef divide_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element-wise.\n    '''\n    assert isinstance(nums1,list),'nums1 should be a list'\n    assert isinstance(nums2,list),'nums2 should be a list'\n    assert len(nums1)>=len(nums2),'nums1 should not be a sublist of nums2'\n    def divide(x,y):\n        return x/y\n    for i in range(len(nums2)):\n        nums1[i]= divide(nums1[i],nums2[i])\n    return nums1\n    #assert isinstance(nums1,list),'nums1 should be a list'\n    #assert isinstance(nums2,list),'nums2 should be a list'\n    #assert len(nums1)>=len(nums2),'nums1 should not be a sublist of nums2'\n    #print(nums1)\n    #print(nums2)\n    #print(len(nums1))\n    #print(len(nums2))\ndef rmv_element_from_list(nums,element):\n    '''\n    Write a function to remove a given element from a list.\n    '''\n    assert isinstance(nums,list),'nums should be a list'\n    assert isinstance(element,int) or isinstance(element,str),'element should be an integer or a string'\n    if isinstance(element,int):\n        #print(nums)\n        #print(element)\n        nums.remove(element)\n    else:\n        for i in range(len(nums)):\n            if nums[i]==element:\n                nums.remove(nums[i])\n    return nums\n    #assert isinstance(nums,list),'nums should be a list'\n    #assert isinstance(element,int) or isinstance(element,str),'element should be an integer or a string'\n    #print(nums)\n    #print(element)\n    #if isinstance(element,int):\n        #nums.remove(element)\n    #else:\n        #for i in range(len(nums)):\n            #if nums[i]==element:\n                #nums.remove(nums[i])\n    #return nums\n    #assert isinstance(nums,list),'nums should be a list'\n    #assert isinstance(element,int) or isinstance(element,str),'element should be an integer or a string'\n    #print(nums)\n    #print(element)\n    #if isinstance(element,int):\n        #nums.remove(element)\n    #else:\n        #for i in range(len(nums)):\n            #if nums[i]==element:\n                #nums.remove(nums[i])\n    #return nums\ndef rmv_elements_from_list(nums,elements):\n    '''\n    Write a function to remove all elements from a list.\n    '''\n    assert isinstance(nums,list),'nums should be a list'\n    assert isinstance(elements,list),'elements should be a list'\n    assert len(nums)>=len(elements),'nums should not be a sublist of elements'\n    for i in elements:\n        nums.remove(i)\n    return nums\n    #assert isinstance(nums,list),'nums should be a list'\n    #assert isinstance(elements,list),'elements should be a list'\n    #assert len(nums)>=len(elements),'nums should not be a sublist of elements'\n    #for i in elements:\n        #nums.remove(i)\n    #return nums\ndef find_the_longest_element_in_list(nums):\n    '''\n    Write a function to find the longest element in a list.\n    '''\n    assert isinstance(nums,list),'nums should be a list'\n    max_len=1\n    for i in range(len(nums)):\n        if len(nums[i])>max_len:\n            max_len=len(nums[i])\n    return max_len\n    #assert isinstance(nums,list),'nums should be a list'\n    #max_len=1\n    #for i in range(len(nums)):\n        #if len(nums[i])>max_len:\n            #max_len=len(nums[i])\n    #return max_len\ndef sub_strings(s):\n    '''\n    Write a function to find all substrings of a given string.\n    '''\n    assert isinstance(s,str),'s should be a string'\n    output=[]\n    for i in range(len(s)):\n        for j in range(i,len(s)+1):\n            output.append(s[i:j])\n    return output\n    #assert isinstance(s,str),'s should be a string'\n    #output=[]\n    #for i in range(len(s)):\n        #for j in range(i,len(s)+1):\n            #output.append(s[i:j])\n    #return output\ndef palindrome_list(nums):\n    '''\n    Write a function to check whether the list is a palindrome or not.\n    '''\n    assert isinstance(nums,list),'nums should be a list'\n    if len(nums)==1:\n        return True\n    if nums[0]==nums[-1]:\n        return palindrome_list(nums[1:-1])\n    else:\n        return False\n    #assert isinstance(nums,list),'nums should be a list'\n    #if len(nums)==1:\n        #return True\n    "
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    sum_digits = 0\n    while n!= 0:\n        sum_digits += (n % 10)\n        n = n // 10\n    if sum_digits <= 9:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return sum([int(i) for i in str(n)]) <= len(str(n))\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    while n!=0:\n        last_digit = n%10\n        freq[last_digit] +=1\n        n = n//10\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for i in range(len(n)):\n        if n[i] in d:\n            d[n[i]] += 1\n        else:\n            d[n[i]] = 1\n    for i in d:\n        if d[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # return True if there are no digits repeated, False otherwise\n    def digitFrequency(n):\n        frequency = {}\n        n = str(n)\n        for i in n:\n            if i in frequency:\n                frequency[i] += 1\n            else:\n                frequency[i] = 1\n        for i in frequency.values():\n            if i > int(i):\n                return False\n        return True\n    # return True if there are no digits that have higher frequency than themselves, False otherwise\n    def digitFrequencyAgain(n):\n        frequency = {}\n        n = str(n)\n        for i in n:\n            if i in frequency:\n                frequency[i] += 1\n            else:\n                frequency[i] = 1\n        for i in frequency.values():\n            if i < int(i):\n                return False\n        return True\n    # return True if there are no digits whose frequency is more than that of its left neighbor, False otherwise\n    def digitFrequencyLeft(n):\n        frequency = {}\n        n = str(n)\n        for i in n:\n            if i in frequency:\n                frequency[i] += 1\n            else:\n                frequency[i] = 1\n        for i in range(len(n)):\n            if i+1 < len(n):\n                if frequency[n[i]] > frequency[n[i+1]]:\n                    return False\n        return True\n    # return True if there are no digits whose frequency is more than that of its right neighbor, False otherwise\n    def digitFrequencyRight(n):\n        frequency = {}\n        n = str(n)\n        for i in n:\n            if i in frequency:\n                frequency[i] += 1\n            else:\n                frequency[i] = 1\n        for i in range(len(n)):\n            if i-1 >= 0:\n                if frequency[n[i]] > frequency[n[i-1]]:\n                    return False\n        return True\n    return digitFrequency(n) and digitFrequencyAgain(n) and digitFrequencyLeft(n) and digitFrequencyRight(n)\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize variables to count each digit of n\n    digit_0 = 0\n    digit_1 = 0\n    digit_2 = 0\n    digit_3 = 0\n    digit_4 = 0\n    digit_5 = 0\n    digit_6 = 0\n    digit_7 = 0\n    digit_8 = 0\n    digit_9 = 0\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # function to count frequency of each digit in a number.\n    def freqDigit(num): \n        \n        # base case: if number is less than 10, return number itself.\n        if num < 10: \n            return {num:1}\n        \n        # the number to be returned.\n        result = {}\n        \n        # iterate over all the digits from 0 to 9.\n        for i in range(0, 10): \n            \n            # variable to store frequency of current digit.\n            curr = 0\n            \n            # iterate over all the digits in current number.\n            while (num!= 0): \n                \n                # check if current digit is equal to current number.\n                if (num % 10 == i): \n                    curr += 1\n                \n                # decrement current number.\n                num = num // 10\n                \n            # store the frequency of current digit.\n            result[i] = curr\n        \n        # return the result.\n        return result\n    \n    # function to check whether the frequency of each digit in a number is less than or equal to the digit itself.\n    def valid(n): \n        \n        # get the frequency of each digit.\n        freq = freqDigit(n)\n        \n        # return False if the frequency of any digit is greater than its value.\n        if n in freq: \n            if freq[n] > n: \n                return False\n        \n        # return True if the frequency of any digit is less than or equal to its value.\n        return True\n    \n    # return True if the number passed is valid and False if the number is not valid.\n    return valid(n)\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) < 3:\n        return True\n    s = str(n)\n    counts = [0] * 10\n    for i in s:\n        counts[int(i)] += 1\n    for i in counts:\n        if i > counts[i]:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n))!= len(set(str(n))):\n        return False\n    \n    for digit in str(n):\n        if int(digit) > int(n) / 10:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    digits = ['0','1','2','3','4','5','6','7','8','9']\n    \n    for x in str(n):\n        if digits.index(x) > int(x):\n            return False\n        \n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    equal_list = []\n    for num in list:\n        if num == element:\n            equal_list.append(num)\n    if len(equal_list) == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    check_list = []\n    for item in list:\n        check_list.append(item == element)\n    return all(check_list)\n    # return check_list == [element]\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if list[0]!= element:\n        return False\n    return check_element(list[1:],element)\ndef check_element2(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0]!= element:\n        return False\n    return check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    flag = True\n    for i in list:\n        if i!= element:\n            flag = False\n    return flag\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == element:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[i]==element for i in range(len(list)))\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    new_list = []\n    for item in list:\n        if item!= element:\n            new_list.append(item)\n    if new_list == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"ab{2,3}a\"\n    if re.search(pattern, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Solution\n    '''\n    Use re.search() to return a boolean if a match is found.\n    '''\n    # Your code here\n    if re.search('a.'*2, text) or re.search('a.'*3, text):\n        return True\n    else:\n        return False\n    \ndef censor_three(text):\n    '''\n    Write a function that takes in a string and censors any word\n    that contains the letter \"t\", or \"T\".\n    '''\n    # Solution\n    '''\n    Replace the first instance of t or T with an *\n    '''\n    # Your code here\n    # Replace the first instance of t or T with an *\n    replaced_text = re.sub('t', '*', text, count=1)\n    # Replace the first instance of t or T with an *\n    replaced_text = re.sub('T', '*', replaced_text, count=1)\n    return replaced_text\n    \n    \ndef censor_two(text):\n    '''\n    Write a function that takes in a string and censors any word\n    that contains the letter \"t\" or \"T\" in the word.\n    '''\n    # Solution\n    '''\n    Replace the first instance of t or T with an *\n    '''\n    # Your code here\n    # Replace the first instance of t or T with an *\n    replaced_text = re.sub('t', '*', text, count=1)\n    # Replace the first instance of t or T with an *\n    replaced_text = re.sub('T', '*', replaced_text, count=1)\n    return replaced_text\n    \ndef censor_three_multiple_words(text):\n    '''\n    Write a function that takes in a string and censors any words\n    that contain the letter \"l\", or \"L\".\n    '''\n    # Solution\n    '''\n    Replace the first instance of l or L with an *\n    '''\n    # Your code here\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('l', '*', text, count=1)\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('L', '*', replaced_text, count=1)\n    return replaced_text\n    \ndef censor_two_multiple_words(text):\n    '''\n    Write a function that takes in a string and censors any words\n    that contain the letter \"l\" or \"L\" in the word.\n    '''\n    # Solution\n    '''\n    Replace the first instance of l or L with an *\n    '''\n    # Your code here\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('l', '*', text, count=1)\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('L', '*', replaced_text, count=1)\n    return replaced_text\n    \ndef censor_multiple_words(text):\n    '''\n    Write a function that takes in a string and censors any words\n    that contain the letters \"l\" or \"L\" in the word.\n    '''\n    # Solution\n    '''\n    Replace the first instance of l or L with an *\n    '''\n    # Your code here\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('l', '*', text, count=1)\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('L', '*', replaced_text, count=1)\n    return replaced_text\n    \ndef censor_multiple_words_with_substitution(text):\n    '''\n    Write a function that takes in a string and censors any words\n    that contain the letters \"l\" or \"L\", and instead of censoring them,\n    replace them with a string of their length.\n    '''\n    # Solution\n    '''\n    Replace the first instance of l or L with an *\n    '''\n    # Your code here\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('l', len(re.findall('l', text)), text, count=1)\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('L', len(re.findall('L', text)), replaced_text, count=1)\n    return replaced_text\n    \ndef censor_four(text):\n    '''\n    Write a function that takes in a string and censors any words\n    that contain the letter \"o\" or \"O\".\n    '''\n    # Solution\n    '''\n    Replace the first instance of o or O with an *\n    '''\n    # Your code here\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('o', '*', text, count=1)\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('O', '*', replaced_text, count=1)\n    return replaced_text\n    \ndef censor_four_multiple_words(text):\n    '''\n    Write a function that takes in a string and censors any words\n    that contain the letter \"o\" or \"O\" in the word.\n    '''\n    # Solution\n    '''\n    Replace the first instance of l or L with an *\n    '''\n    # Your code here\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('o', '*', text, count=1)\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('O', '*', replaced_text, count=1)\n    return replaced_text\n    \ndef censor_four_multiple_words_with_substitution(text):\n    '''\n    Write a function that takes in a string and censors any words\n    that contain the letter \"o\" or \"O\", and instead of censoring them,\n    replace them with a string of their length.\n    '''\n    # Solution\n    '''\n    Replace the first instance of l or L with an *\n    '''\n    # Your code here\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('o', len(re.findall('o', text)), text, count=1)\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('O', len(re.findall('O', text)), replaced_text, count=1)\n    return replaced_text\n    \ndef censor_four_words(text):\n    '''\n    Write a function that takes in a string and censors any words\n    that contain the letters \"o\" or \"O\" in the word.\n    '''\n    # Solution\n    '''\n    Replace the first instance of l or L with an *\n    '''\n    # Your code here\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('o', '*', text, count=1)\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('O', '*', replaced_text, count=1)\n    return replaced_text\n    \ndef censor_four_words_with_substitution(text):\n    '''\n    Write a function that takes in a string and censors any words\n    that contain the letters \"o\" or \"O\", and instead of censoring them,\n    replace them with a string of their length.\n    '''\n    # Solution\n    '''\n    Replace the first instance of l or L with an *\n    '''\n    # Your code here\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('o', len(re.findall('o', text)), text, count=1)\n    # Replace the first instance of l or L with an *\n    replaced_text = re.sub('O', len(re.findall('O', text)), replaced_text, count=1)\n    return replaced_text\n    \ndef censor_all(text):\n    '''\n    Write a function that censors al"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count(\"a\") == text.count(\"b\"):\n        return True\n    elif text.count(\"a\") == text.count(\"b\") + 1:\n        return True\n    elif text.count(\"a\") == text.count(\"b\") + 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r\"(ab){2,3}\", text):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # if text.find('ab')>0 or text.find('aba')>0 or text.find('abb')>0 or text.find('abab')>0:\n    #     return True\n    # else:\n    #     return False\n    # # Another way:\n    # return bool(re.search(r'ab{2,3}', text))\n    # # Third way:\n    # return len(re.findall(r'ab{2,3}', text))>0\n    # # Fourth way:\n    return re.search(r'ab{2,3}', text)\nprint(text_match_two_three(\"ab\"))\nprint(text_match_two_three(\"abb\"))\nprint(text_match_two_three(\"abab\"))\nprint(text_match_two_three(\"abbb\"))\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"ab{2,3}$\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match(\"a.{2,3}b\", text)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    m = re.search('ab{2,3}', text)\n    return m!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return text.count(\"a\") == len(re.findall(\"a\", text)) - (len(re.findall(\"a\", text)) - text.count(\"a\"))//2\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'ab{2,3}', text)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    max_sum_so_far = 0\n    for i in range(0, n): \n        if (max_sum_so_far >= max_sum):\n            max_sum_so_far = max_sum\n        max_sum += a[i]\n        if (max_sum_so_far == max_sum and i + k - 1 >= n):\n            return max_sum_so_far\n    return max_sum_so_far\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_sum = 0\n    max_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if i % k == (k - 1):\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            curr_sum = 0\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum as 0\n    max_sum = 0\n    \n    # Repeat the array k times and compute sum of the new array formed\n    for i in range(k):\n        sum = 0\n        for j in range(n):\n            sum = sum + a[j]\n        if (sum > max_sum):\n            max_sum = sum\n    \n    # Return the result\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(0, n):\n        for j in range(i + 1, n + 1):\n            a[i: j] = a[i: j] * k\n            # print(a)\n            # print(max_sum)\n            if max_sum < sum(a[i: j]):\n                max_sum = sum(a[i: j])\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_a = [a[i] for i in range(k)]\n    a = a*(k + 1)\n    ans = 0\n    for i in range(n):\n        ans = max(ans, sum(a[i:i + n]))\n    return ans\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # a) Initialize the answer with the first element of the array\n    max_sum = a[0]\n    # b) Initialize the sum of the elements of array as sum\n    sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    # initializing first and last for first sum\n    first, last = 0, 0\n    for i in range(n):\n        first += a[i]\n        # add this new number and update sum\n        last += a[i]\n        if first == last:\n            max_sum = max(max_sum, first)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_sum = 0\n    max_sum = 0\n    for i in range(n): \n        curr_sum += a[i] \n        if i % k == 0: \n            max_sum = max(max_sum, curr_sum) \n            curr_sum = 0\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1:\n        return a[0]\n    d = {}\n    max_sum = 0\n    for i in range(n):\n        d[a[i]] = i\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 0:\n        return max(a)\n    s = sum(a)\n    i = 0\n    while i < len(a):\n        t = sum(a[i::k])\n        if t > s:\n            s = t\n        i += 1\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1))/6\n    \n    \ndef main():\n    num = input('Enter number:')\n    print(square_Sum(num))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    sum=0\n    for i in range(0,n):\n        sum=sum+square_sum(i)\n    return sum\n    #Remove pass and write your logic here to find and return the sum of squares of first n even natural numbers.\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    num = n\n    s = 0\n    while num > 0:\n        s += (num ** 2)\n        num -= 2\n    return s\n    \n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if(i%2 == 0):\n            sum = sum + i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in range(n) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            total += i*i\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #code here\n    return (n*(n+1)*((2*n)+1))/6\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return ((2 * n) ** 2) + square_Sum(n-1)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for x in range(n+1):\n        if x%2 == 0:\n            sum = sum + (x**2)\n    return sum\n    #return n * (n+1) * (2*n+1) / 6\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length_list:\n            max_length_list = len(list1[i])\n    return max_length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) > 0:\n        max_len = len(list1[0])\n        for sub_list in list1:\n            if len(sub_list) > max_len:\n                max_len = len(sub_list)\n        return max_len\n    else:\n        return 0\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for i in list1:\n        if max_len<len(i):\n            max_len=len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(list1[0])\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for i in range(len(list1)):\n        if len(list1[i])>max_len:\n            max_len=len(list1[i])\n            list_index=i\n    return list1[list_index]\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = len(list1[0])\n    for i in range(1, len(list1)):\n        if max_length < len(list1[i]):\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = len(list1[0])\n    for i in range(len(list1)):\n        if len(list1[i]) > length:\n            length = len(list1[i])\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(list1[0])\n    for i in list1:\n        if max_len < len(i):\n            max_len = len(i)\n    return max_len\n    \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_memo(n, k, {})\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return k \n    if n == 2: \n        return k * k \n    \n    s = k * k \n    a = k * (k - 1) \n    b = k * (k - 2) \n    for i in range(3, n + 1): \n        s = s + a + b \n        a = b \n        b = b + k * (k - 1) \n    return s \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    colors = {}\n    return count_ways(n, k, colors)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    colors = [0] * k \n    \n    return count_no_of_ways_rec(n, colors) \n    \ndef count_no_of_ways_rec(n, colors): \n    \n    if n == 0: \n        return 1\n    \n    total_ways = 0 \n    \n    for i in range(len(colors)): \n        if i - 1 >= 0 and colors[i - 1]!= i: \n            prev_color = colors[i - 1] \n            \n            colors[i - 1] = i \n            \n            total_ways += count_no_of_ways_rec(n - 1, colors) \n            \n            colors[i - 1] = prev_color \n        \n    return total_ways\n    \nprint(count_no_of_ways(4, 3)) \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return k\n    elif k == 2:\n        return n - 1\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) + count_no_of_ways(n-3, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def paint_helper(n, k, dp):\n        if n == 0:\n            return 1\n        if n == 1:\n            if k == 1:\n                return 1\n            else:\n                return 0\n        if n == 2:\n            if k == 1:\n                return 1\n            elif k == 2:\n                return 1\n            else:\n                return 0\n        if n > 2:\n            if k == 1:\n                return 0\n            elif k == 2:\n                if dp[n-1][k-1] + dp[n-2][k-1] == 0:\n                    return dp[n-1][k]\n                else:\n                    return dp[n-1][k] + dp[n-2][k]\n            else:\n                if dp[n-1][k] + dp[n-2][k] == 0:\n                    return dp[n-1][k-1] + dp[n-2][k-1]\n                else:\n                    return dp[n-1][k] + dp[n-2][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #init\n    dp = [[0]*(k+1) for i in range(n+1)]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    \n    for i in range(k + 1):\n        dp[0][i] = 1\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n<m:\n        return n//m\n    else:\n        return 1\n    \n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #Use // for integer division\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # code here\n    def div(a,b):\n        return a//b\n    return div(n,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        a=int(n)\n        b=int(m)\n        c=a/b\n        return c\n    except ZeroDivisionError:\n        print('Division by Zero is not allowed')\n    except ValueError:\n        print('Wrong value entered')\n    \nprint('A number from which to divide is required.')\nn=input('Enter the dividend: ')\nprint('A number by which to divide is required.')\nm=input('Enter the divisor: ')\nprint(f'The quotient is {find(n,m)}'"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \ndef int_div(n,m):\n    '''\n    Write a python function to find remainder of two numbers (rounded down to the nearest integer).\n    '''\n    return n%m\n    \ndef str_int(s):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    return int(s)\n    \ndef str_float(s):\n    '''\n    Write a python function to convert a string to a float.\n    '''\n    return float(s)\n    \ndef int_str(n):\n    '''\n    Write a python function to convert an integer to a string.\n    '''\n    return str(n)\n    \ndef float_str(f):\n    '''\n    Write a python function to convert a float to a string.\n    '''\n    return str(f)\n    \ndef str_str(s):\n    '''\n    Write a python function to convert a string to another string.\n    '''\n    return str(s)\n    \ndef int_list(l):\n    '''\n    Write a python function to convert a list of numbers to a single integer.\n    '''\n    return int(''.join(str(e) for e in l))\n    \ndef float_list(l):\n    '''\n    Write a python function to convert a list of numbers to a single float.\n    '''\n    return float(sum(l))/len(l)\n    \ndef list_list(l):\n    '''\n    Write a python function to convert a list of strings to a single list.\n    '''\n    return list(l)\n    \ndef list_int(l):\n    '''\n    Write a python function to convert a list of integers to a single integer.\n    '''\n    return int(sum(l))\n    \ndef list_float(l):\n    '''\n    Write a python function to convert a list of floats to a single float.\n    '''\n    return float(sum(l))/len(l)\n    \ndef add_list(l1,l2):\n    '''\n    Write a python function to add two lists of numbers.\n    '''\n    return list_list(list(map(add,l1,l2)))\n    \ndef sub_list(l1,l2):\n    '''\n    Write a python function to subtract two lists of numbers.\n    '''\n    return list_list(list(map(sub,l1,l2)))\n    \ndef mult_list(l1,l2):\n    '''\n    Write a python function to multiply two lists of numbers.\n    '''\n    return list_list(list(map(mult,l1,l2)))\n    \ndef div_list(l1,l2):\n    '''\n    Write a python function to divide two lists of numbers.\n    '''\n    return list_list(list(map(div,l1,l2)))\n    \ndef pow_list(l1,l2):\n    '''\n    Write a python function to take power of two lists of numbers.\n    '''\n    return list_list(list(map(pow,l1,l2)))\n    \ndef list_sqrt(l):\n    '''\n    Write a python function to take square root of all elements of a list of numbers.\n    '''\n    return list(map(sqrt,l))\n    \ndef list_sin(l):\n    '''\n    Write a python function to take sine of all elements of a list of numbers.\n    '''\n    return list(map(sin,l))\n    \ndef list_cos(l):\n    '''\n    Write a python function to take cosine of all elements of a list of numbers.\n    '''\n    return list(map(cos,l))\n    \ndef list_tan(l):\n    '''\n    Write a python function to take tangent of all elements of a list of numbers.\n    '''\n    return list(map(tan,l))\n    \ndef list_ln(l):\n    '''\n    Write a python function to take natural logarithm of all elements of a list of numbers.\n    '''\n    return list(map(log,l))\n    \ndef list_log(l):\n    '''\n    Write a python function to take logarithm of all elements of a list of numbers.\n    '''\n    return list(map(log10,l))\n    \ndef list_abs(l):\n    '''\n    Write a python function to take absolute value of all elements of a list of numbers.\n    '''\n    return list(map(abs,l))\n    \ndef list_round(l):\n    '''\n    Write a python function to round all elements of a list of numbers.\n    '''\n    return list(map(round,l))\n    \ndef list_ceil(l):\n    '''\n    Write a python function to take ceiling of all elements of a list of numbers.\n    '''\n    return list(map(ceil,l))\n    \ndef list_floor(l):\n    '''\n    Write a python function to take floor of all elements of a list of numbers.\n    '''\n    return list(map(floor,l))\n    \ndef list_trunc(l):\n    '''\n    Write a python function to take truncate of all elements of a list of numbers.\n    '''\n    return list(map(trunc,l))\n    \ndef int_random(n):\n    '''\n    Write a python function to generate a random integer between 1 and n.\n    '''\n    return randint(1,n)\n    \ndef float_random(n):\n    '''\n    Write a python function to generate a random floating point number between 1 and n.\n    '''\n    return uniform(1,n)\n    \ndef str_random(s):\n    '''\n    Write a python function to generate a random string of a given length from a list of strings.\n    '''\n    return ''.join(choice(s) for i in range(randint(1,len(s))))\n    \ndef list_random(l):\n    '''\n    Write a python function to generate a random list of given length from a list of lists.\n    '''\n    return [randint(1,l) for i in range(randint(1,len(l)))]\n    \ndef tuple_random(l):\n    '''\n    Write a python function to generate a random tuple of given length from a list of tuples.\n    '''\n    return tuple(randint(1,i) for i in l)\n    \ndef set_random(s):\n    '''\n    Write a python function to generate a random set of given length from a list of sets.\n    '''\n    return {randint(1,s) for i in range(randint(1,len(s)))}\n    \ndef dict_random(d):\n    '''\n    Write a python function to generate a random dictionary of given length from a list of dictionaries.\n    '''\n    return {randint(1,k):randint(1,v) for i in range(randint(1,len(d)))}\n    \ndef bin_random(n):\n    '''\n    Write a python function to generate a random binary string of a given length.\n    '''\n    return bin(randint(1,2**n-1))[2:]\n    \ndef oct_random(n):\n    '''\n    Write a python function to generate a random octal string of a given length.\n    '''\n    return oct(randint(1,2**n-1))[2:]\n    \ndef hex_random(n):\n    '''\n    Write a python function to generate a random hexadecimal string of a given length.\n    '''\n    return hex(randint(1,2**n-1))[2:]\n    \ndef int_to_str(n):\n    '''\n    Write a python function to convert a given integer to a string.\n    '''\n    return str(n)\n    \ndef float_to_str(f):\n    '''\n    Write a python function to convert a given floating point number to a string.\n    '''\n    return str(f)\n    \ndef str_to_int(s):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    return int(s)\n    \ndef str_to_float(s):\n    '''\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n%m == 0:\n        return n//m\n    else:\n        return n//m+1\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        if m==0:\n            return \"Can't divide by zero\"\n        else:\n            return n/m\n    except Exception as e:\n        return f'{e}'\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \ndef main():\n    a = int(input(\"Enter a first number: \"))\n    b = int(input(\"Enter a second number: \"))\n    print(f\"The quotient of {a} and {b} is {find(a,b)}\")\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    result = math.sqrt((w*w) + (h*h))\n    print('Result is: ',result)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w*w)+(h*h))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside = (w**2 + h**2)**0.5\n    return thirdside\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print('The third side of a right angled triangle is: ', w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    try:\n        a = w**2 + h**2\n        b = 2 * (w*h)\n        c = w**2 + h**2\n        return(math.sqrt(a-b))\n    except TypeError:\n        print(\"The values of sides are invalid\")\n    else:\n        print(\"The third side of the triangle is\", c)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Use Pythagorean Theorem:\n    #s = m.sqrt((m.sqrt(a) - m.sqrt(b)) ** 2 + (m.sqrt(a) - m.sqrt(c)) ** 2)\n    s = math.sqrt((w**2+h**2)-(2*w*h*math.cos(math.pi/4)))\n    # The third side of the triangle can be found by using Pythagorean Theorem\n    # by taking the square root of the sum of the squares minus the square of the\n    # product of the sides minus the two products multiplied by the cosine of\n    # the right angle made between the two sides.\n    return s\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    import math\n    s=(math.sqrt(w*w+h*h))\n    print(\"Third side of a right angled triangle: \",s)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = round(math.sqrt(w**2 + h**2),4)\n    return side\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    try:\n        \n        s = math.sqrt((w**2)+(h**2))\n        return s\n    except:\n        return \"Invalid\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for item in listval:\n        if item > max:\n            max = item\n    return max\n    \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for item in listval:\n        if item < min:\n            min = item\n    return min\n    \ndef remove_duplicates(listval):\n    '''\n    Write a function to remove duplicates from a given heterogeneous list.\n    '''\n    new_list = []\n    for item in listval:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n    \ndef avg_val(listval):\n    '''\n    Write a function to find the average value in a given heterogeneous list.\n    '''\n    num_of_items = len(listval)\n    total = sum(listval)\n    average = total/num_of_items\n    return average\n    \ndef sum_val(listval):\n    '''\n    Write a function to find the sum of all items in a given heterogeneous list.\n    '''\n    total = sum(listval)\n    return total\n    \ndef is_sorted(listval):\n    '''\n    Write a function to check whether the given heterogeneous list is sorted or not.\n    '''\n    if listval == sorted(listval):\n        return True\n    else:\n        return False\n    \ndef is_in_list(listval, item):\n    '''\n    Write a function to check whether an item is in the given heterogeneous list or not.\n    '''\n    if item in listval:\n        return True\n    else:\n        return False\n    \ndef max_count(listval):\n    '''\n    Write a function to count the maximum number of items in a given heterogeneous list.\n    '''\n    max_count = 0\n    for item in listval:\n        if listval.count(item) > max_count:\n            max_count = listval.count(item)\n    return max_count\n    \ndef min_count(listval):\n    '''\n    Write a function to count the minimum number of items in a given heterogeneous list.\n    '''\n    min_count = 0\n    for item in listval:\n        if listval.count(item) < min_count:\n            min_count = listval.count(item)\n    return min_count\n    \ndef list_to_dict(listval):\n    '''\n    Write a function to convert a given heterogeneous list into a dictionary.\n    '''\n    my_dict = {}\n    for item in listval:\n        if isinstance(item, list):\n            continue\n        else:\n            my_dict[item] = listval.count(item)\n    return my_dict\n    \ndef reverse_dict(dictval):\n    '''\n    Write a function to reverse a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dictval.items():\n        if value in new_dict:\n            new_dict[value].append(key)\n        else:\n            new_dict[value] = [key]\n    return new_dict\n    \ndef max_to_min_dict(dictval):\n    '''\n    Write a function to convert a given dictionary into a dictionary with keys in decreasing order.\n    '''\n    my_dict = {}\n    key_list = []\n    for key, value in dictval.items():\n        key_list.append(key)\n    key_list.sort(reverse = True)\n    for item in key_list:\n        my_dict[item] = dictval[item]\n    return my_dict\n    \ndef max_to_min_dict_values(dictval):\n    '''\n    Write a function to convert a given dictionary into a dictionary with keys in decreasing order by value.\n    '''\n    my_dict = {}\n    key_list = []\n    for key, value in dictval.items():\n        key_list.append(key)\n    key_list.sort(key = lambda x: x[1], reverse = True)\n    for item in key_list:\n        my_dict[item[0]] = item[1]\n    return my_dict\n    \ndef is_anagram(word1, word2):\n    '''\n    Write a function to check whether two given words are anagrams or not.\n    '''\n    word1 = word1.replace(\" \", \"\").lower()\n    word2 = word2.replace(\" \", \"\").lower()\n    if sorted(word1) == sorted(word2):\n        return True\n    else:\n        return False\n    \ndef is_substring(string1, string2):\n    '''\n    Write a function to check whether one string is a substring of another string or not.\n    '''\n    if string1 in string2:\n        return True\n    else:\n        return False\n        \ndef substring_between(string1, string2):\n    '''\n    Write a function to get the substring between two given strings.\n    '''\n    my_string = string1.find(string2)\n    if my_string!= -1:\n        return string1[my_string+len(string2):]\n    else:\n        return False\n    \ndef get_new_list(listval):\n    '''\n    Write a function to convert a given list into a string.\n    '''\n    my_string = \"\"\n    for item in listval:\n        if type(item) == str:\n            my_string += \" \".join(item)\n        else:\n            my_string += str(item)\n        my_string += \" \"\n    return my_string\n    \ndef get_new_list_by_range(listval, a, b):\n    '''\n    Write a function to convert a given list into a string.\n    '''\n    my_string = \"\"\n    for item in listval:\n        if type(item) == str:\n            my_string += \" \".join(item)\n        else:\n            my_string += str(item)\n        my_string += \" \"\n    return my_string\n    \ndef get_new_list_by_range_ex(listval, a, b):\n    '''\n    Write a function to convert a given list into a string.\n    '''\n    my_string = \"\"\n    for item in listval:\n        if isinstance(item, list):\n            my_string += \" \".join(item)\n        else:\n            my_string += str(item)\n        my_string += \" \"\n    return my_string\n    \ndef get_new_list_by_range_ex_2(listval, a, b):\n    '''\n    Write a function to convert a given list into a string.\n    '''\n    my_string = \"\"\n    for item in listval:\n        if isinstance(item, list):\n            if len(item) >= a and len(item) <= b:\n                my_string += \" \".join(item)\n        else:\n            my_string += str(item)\n        my_string += \" \"\n    return my_string\n    \ndef remove_list_of_nums(listval, nums):\n    '''\n    Write a function to remove all the given numbers from a given heterogeneous list.\n    '''\n    new_list = []\n    for item in listval:\n        if item not in nums:\n            new_list.append(item)\n    return new_list\n    \ndef remove_list_of_nums_by_range(listval, a, b):\n    '''\n    Write a function to remove all the given numbers from a given heterogeneous list.\n    '''\n    new_list = []\n    for item in listval:\n        if item >= a and item <= b:\n            new_list.append(item)\n    return new_list\n    \ndef get_list_of_vowels(stringval):\n    '''\n    Write a function to get all the vowels in a given string.\n    '''\n    vowels = []\n    for item in stringval:\n        if item in \"aeiou\":\n            vowels.append(item)\n    return vowels\n    \ndef get_list_of_vowels_ex(stringval):\n    '''\n    Writ"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #we need to create an empty list to store all the values\n    listval = [4,6,1,-2]\n    print(listval)\n    #we are using a python built in function max() to find the maximum value\n    listval = max(listval)\n    #we are printing the maximum value\n    print(listval)\n    \nmax_val([4, 6, 1, -2])\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #this function works on heterogeneous lists of types\n    #first create a list of all types\n    types=[]\n    for x in listval:\n        types.append(type(x))\n    #now get the max from types list\n    maxval=max(types)\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    res = None\n    for val in listval:\n        if res == None:\n            res = val\n        else:\n            if val > res:\n                res = val\n    return res\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    def max_val_helper(listval, curr_max):\n        if len(listval) == 1:\n            return listval[0]\n        if len(listval) == 2:\n            if listval[0] > listval[1]:\n                return listval[0]\n            return listval[1]\n        if listval[0] > curr_max:\n            return max_val_helper(listval[1:], listval[0])\n        return max_val_helper(listval[1:], curr_max)\n    return max_val_helper(listval, -float('inf'))\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max_value = listval[0]\n    for i in range(0, len(listval)):\n        if max_value < listval[i]:\n            max_value = listval[i]\n    return max_value\n    \ndef main():\n    '''\n    Test function for max_val\n    '''\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 2, 5, 1, 9]\n    list3 = [-1, 2, 4, 0]\n    list4 = [-1, -2, 0]\n    list5 = [1]\n    list6 = [1, 2, 3, 4, 5, 6, 7]\n    list7 = [1, 2, 3, 4, 5, 6, 7, 8]\n    list8 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    \n    assert(max_val(list1) == 5)\n    assert(max_val(list2) == 9)\n    assert(max_val(list3) == 0)\n    assert(max_val(list4) == -1)\n    assert(max_val(list5) == 1)\n    assert(max_val(list6) == 7)\n    assert(max_val(list7) == 8)\n    assert(max_val(list8) == 9)\n    assert(max_val(list9) == 10)\n    assert(max_val(list10) == 20)\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_div = 0\n    for i in range(1,number + 1):\n        if number % i == 0:\n            sum_of_div += i\n    return sum_of_div\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([i for i in range(1, number) if number % i == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    print('Sum of divisors of number {} is {}'.format(number, number//2 + 1))\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    sum_of_divisors = 0\n    while divisor <= number:\n        if number % divisor == 0:\n            sum_of_divisors = sum_of_divisors + divisor\n        divisor = divisor + 1\n    return sum_of_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([x for x in range(1,number+1) if number % x == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([i for i in range(1, number+1) if number % i == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(i for i in range(1, number + 1) if number % i == 0)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisors_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors_sum += i\n    return divisors_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(i for i in range(1, number) if number % i == 0)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0, arr\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr,0,len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Initialize the array of counters with zeros\n    inv = [0]*n \n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergeSort_inv(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return Inv_Count(arr, 0, len(arr))\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr_len = len(arr)\n    if arr_len <= 1:\n        return 0, arr\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    merge_sort(arr)\n    return arr\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened += flatten_list(element)\n        else:\n            flattened.append(element)\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1,list):\n        return list1\n    if len(list1) == 0:\n        return []\n    if isinstance(list1[0],list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return [list1[0]] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if isinstance(i, list):\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) is list:\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    def flatten(list1):\n        for item in list1:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                result.append(item)\n    flatten(list1)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # list1 = [['a','b','c'],['d','e'],['f','g','h','i']]\n    new_list = []\n    for i in list1:\n        for j in i:\n            new_list.append(j)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        if type(list1[i]) is list:\n            flat_list.extend(flatten_list(list1[i]))\n        else:\n            flat_list.append(list1[i])\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) == list:\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for key, val in stdata:\n        d[key].append(val)\n    return [max(d[k]) for k in d]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = sorted(stdata, key = lambda x: x[2])\n    max_aggregate = [stdata[0]]\n    previous = 0\n    for x in stdata:\n        if x[1] > previous:\n            max_aggregate.append(x)\n            previous = x[1]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    count = 0\n    sum = 0\n    for item in stdata:\n        sum += item[1]\n        count += 1\n    return sum / count\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    list_of_tuples = []\n    for i in stdata:\n        list_of_tuples.append(i)\n    list_of_tuples.sort(key=lambda i:i[0])\n    list_of_tuples.sort(key=lambda i:i[1])\n    max_agg_value = max(list_of_tuples[-1][1], list_of_tuples[-1][1])\n    return max_agg_value\ndef get_max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = [tuple(map(int, i.split(','))) for i in stdata]\n    stdata.sort(key=lambda i:i[0])\n    stdata.sort(key=lambda i:i[1])\n    max_agg_value = max(stdata[-1][1], stdata[-1][1])\n    return max_agg_value\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    list_of_tuples = []\n    for i in stdata:\n        list_of_tuples.append(i)\n    list_of_tuples.sort(key=lambda i:i[0])\n    list_of_tuples.sort(key=lambda i:i[1])\n    max_agg_value = max(list_of_tuples[-1][1], list_of_tuples[-1][1])\n    return max_agg_value\ndef get_max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = [tuple(map(int, i.split(','))) for i in stdata]\n    stdata.sort(key=lambda i:i[0])\n    stdata.sort(key=lambda i:i[1])\n    max_agg_value = max(stdata[-1][1], stdata[-1][1])\n    return max_agg_value\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    list_of_tuples = []\n    for i in stdata:\n        list_of_tuples.append(i)\n    list_of_tuples.sort(key=lambda i:i[0])\n    list_of_tuples.sort(key=lambda i:i[1])\n    max_agg_value = max(list_of_tuples[-1][1], list_of_tuples[-1][1])\n    return max_agg_value\ndef get_max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = [tuple(map(int, i.split(','))) for i in stdata]\n    stdata.sort(key=lambda i:i[0])\n    stdata.sort(key=lambda i:i[1])\n    max_agg_value = max(stdata[-1][1], stdata[-1][1])\n    return max_agg_value\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    list_of_tuples = []\n    for i in stdata:\n        list_of_tuples.append(i)\n    list_of_tuples.sort(key=lambda i:i[0])\n    list_of_tuples.sort(key=lambda i:i[1])\n    max_agg_value = max(list_of_tuples[-1][1], list_of_tuples[-1][1])\n    return max_agg_value\ndef get_max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = [tuple(map(int, i.split(','))) for i in stdata]\n    stdata.sort(key=lambda i:i[0])\n    stdata.sort(key=lambda i:i[1])\n    max_agg_value = max(stdata[-1][1], stdata[-1][1])\n    return max_agg_value\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    list_of_tuples = []\n    for i in stdata:\n        list_of_tuples.append(i)\n    list_of_tuples.sort(key=lambda i:i[0])\n    list_of_tuples.sort(key=lambda i:i[1])\n    max_agg_value = max(list_of_tuples[-1][1], list_of_tuples[-1][1])\n    return max_agg_value\ndef get_max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = [tuple(map(int, i.split(','))) for i in stdata]\n    stdata.sort(key=lambda i:i[0])\n    stdata.sort(key=lambda i:i[1])\n    max_agg_value = max(stdata[-1][1], stdata[-1][1])\n    return max_agg_value\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    list_of_tuples = []\n    for i in stdata:\n        list_of_tuples.append(i)\n    list_of_tuples.sort(key=lambda i:i[0])\n    list_of_tuples.sort(key=lambda i:i[1])\n    max_agg_value = max(list_of_tuples[-1][1], list_of_tuples[-1][1])\n    return max_agg_value\ndef get_max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = [tuple(map(int, i.split(','))) for i in stdata]\n    stdata.sort(key=lambda i:i[0])\n    stdata.sort(key=lambda i:i[1])\n    max_agg_value = max(stdata[-1][1], stdata[-1][1])\n    return max_agg_value\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    list_of_tuples = []\n    for i in stdata:\n        list_of_tuples.append(i)\n    list_of_tuples.sort(key=lambda i:i[0])\n    list_of_tuples.sort(key=lambda i:i[1])\n    max_agg_value = max(list_of_tuples[-1][1], list_of_tuples[-1][1])\n    return max_agg_value\ndef get_max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = [tuple(map(int, i.split(','))) for i in stdata]\n    stdata.sort(key=lambda i:i[0])\n    stdata.sort(key=lambda i:i[1])\n    max_agg_value = max(stdata[-1][1], stdata[-1][1])\n    return max_agg_value\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    list_of_tuples = []\n    for i in stdata:\n        list_of_tuples.append(i)\n    list_of_tuples.sort(key=lambda i:i[0])\n    list_of_tuples.sort(key=lambda i:i[1])\n    max_ag"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_lst = []\n    for i in stdata:\n        agg_lst.append(i[0])\n    max_agg = max(agg_lst)\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for t in stdata:\n        d[t[0]] += t[1]\n    return max(d.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    group_data = defaultdict(list)\n    # This finds all the tuples in the table with the same key and stores it in a list\n    for i in stdata:\n        group_data[i[0]].append(i[1])\n    # Finds the maximum for each list of values\n    return [(k,max(v)) for k,v in group_data.items()]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # example data: [('a', 1), ('a', 3), ('a', 10), ('b', 1), ('b', 2)]\n    stdata = sorted(stdata, key=lambda x: x[0])\n    d = defaultdict(list)\n    for i in stdata:\n        d[i[0]].append(i[1])\n    \n    # example d: {'a': [1, 3, 10], 'b': [1, 2]}\n    # returning a dictionary of keys and max value in list\n    max_dict = {k: max(v) for k, v in d.items()}\n    return max_dict\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = 0\n    for k in range(len(stdata)):\n        n += stdata[k][0] * stdata[k][1]\n    print(n)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return max(temp_list)\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return min(temp_list)\ndef average_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return sum(temp_list)/len(temp_list)\ndef total_aggregate(stdata):\n    '''\n    Write a function to calculate the total aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return sum(temp_list)\ndef count_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return len(temp_list)\ndef query_1(stdata):\n    '''\n    Write a function to find the maximum aggregate.\n    '''\n    return max_aggregate(stdata)\ndef query_2(stdata):\n    '''\n    Write a function to find the minimum aggregate.\n    '''\n    return min_aggregate(stdata)\ndef query_3(stdata):\n    '''\n    Write a function to find the average aggregate.\n    '''\n    return average_aggregate(stdata)\ndef query_4(stdata):\n    '''\n    Write a function to find the total aggregate.\n    '''\n    return total_aggregate(stdata)\ndef query_5(stdata):\n    '''\n    Write a function to find the count aggregate.\n    '''\n    return count_aggregate(stdata)\ndef query_6(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return max(temp_list)\ndef query_7(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return min(temp_list)\ndef query_8(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return sum(temp_list)/len(temp_list)\ndef query_9(stdata):\n    '''\n    Write a function to calculate the total aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return sum(temp_list)\ndef query_10(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return len(temp_list)\ndef query_11(stdata):\n    '''\n    Write a function to find the maximum aggregate.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return max(temp_list)\ndef query_12(stdata):\n    '''\n    Write a function to find the minimum aggregate.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return min(temp_list)\ndef query_13(stdata):\n    '''\n    Write a function to find the average aggregate.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return sum(temp_list)/len(temp_list)\ndef query_14(stdata):\n    '''\n    Write a function to find the total aggregate.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return sum(temp_list)\ndef query_15(stdata):\n    '''\n    Write a function to find the count aggregate.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return len(temp_list)\ndef query_16(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return max(temp_list)\ndef query_17(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return min(temp_list)\ndef query_18(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return sum(temp_list)/len(temp_list)\ndef query_19(stdata):\n    '''\n    Write a function to calculate the total aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return sum(temp_list)\ndef query_20(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return len(temp_list)\ndef query_21(stdata):\n    '''\n    Write a function to find the maximum aggregate.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return max(temp_list)\ndef query_22(stdata):\n    '''\n    Write a function to find the minimum aggregate.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return min(temp_list)\ndef query_23(stdata):\n    '''\n    Write a function to find the average aggregate.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return sum(temp_list)/len(temp_list)\ndef query_24(stdata):\n    '''\n    Write a function to find the total aggregate.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return sum(temp_list)\ndef query_25(stdata):\n    '''\n    Write a function to find the count aggregate.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return len(temp_list)\ndef query_26(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp_list.append(ele[1])\n    return max(temp_list)\ndef query_27(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    temp_list = []\n    for ele in stdata:\n        temp"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # arr = []\n    # for i in range(2**n):\n    #     # print(bin(i))\n    #     arr.append(i)\n    #     arr.append(i^(1<<n))\n    # return len(set(arr))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return helper(n, n)\ndef helper(n, curr):\n    if curr == 0: return 1\n    if n == 1: return 2\n    return 2 * helper(n-1, curr-1) + helper(n-1, curr)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def gen(n):\n        s = bin(n)[2:]\n        for i in range(len(s)):\n            if s[i] == '0':\n                s = s[:i] + '1' + s[i+1:]\n                yield int(s,2)\n                s = s[:i] + '0' + s[i+1:]\n                yield int(s,2)\n            elif s[i] == '1':\n                s = s[:i] + '0' + s[i+1:]\n                yield int(s,2)\n                s = s[:i] + '1' + s[i+1:]\n                yield int(s,2)\n    return sum(gen(n))\n    \n    \ndef is_subseq(s, t):\n    '''\n    Write a function to determine whether a string is a sub-sequence of another string.\n    '''\n    def gen(s,t):\n        for i in range(len(s)):\n            if s[:i+1] == t[:i+1]:\n                yield s[i+1:]\n            if s[:i+1]!= t[:i+1]:\n                break\n    return all(not t[:i+1] for i in range(len(t)) if s[:i+1] == t[:i+1])\n    \n    \ndef rotate_matrix(matrix):\n    '''\n    Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.\n    '''\n    def flip_row(i, matrix):\n        matrix[i] = [0]*len(matrix[i])\n    \n    def flip_col(j, matrix):\n        for row in matrix:\n            row[j] = 0\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 0:\n                flip_row(i, matrix)\n                flip_col(j, matrix)\n    \n    return matrix\n    \n    \ndef flatten(matrix):\n    '''\n    Write an algorithm such that if an element in a 2D matrix is 0, its entire row and column are set to 0.\n    '''\n    def flip_row(i, matrix):\n        matrix[i] = [0]*len(matrix[i])\n    \n    def flip_col(j, matrix):\n        for row in matrix:\n            row[j] = 0\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 0:\n                flip_row(i, matrix)\n                flip_col(j, matrix)\n    \n    return matrix\n    \n    \ndef num_of_subseq_for_clumps(pattern, text, k, L, t):\n    '''\n    Write a program to find all motifs of length t in a string. Return the number of times each motif is found.\n    '''\n    def search_substr(sub, text):\n        i = text.find(sub)\n        while i!= -1:\n            yield i\n            i = text.find(sub, i+1)\n    \n    counts = {}\n    for i in range(0, len(text)-L+1):\n        sub = text[i:i+L]\n        for j in search_substr(sub, text):\n            if sub not in counts:\n                counts[sub] = 0\n            counts[sub] += 1\n    \n    if len(pattern) <= k:\n        sub = pattern\n        for i in search_substr(sub, text):\n            if sub not in counts:\n                counts[sub] = 0\n            counts[sub] += 1\n    \n    return counts\n    \n    \ndef num_of_clumps_in_text(pattern, text, k, L, t):\n    '''\n    Write a program to find the frequency of all k-mers in a string. Return the number of times each k-mer is found.\n    '''\n    def search_substr(sub, text):\n        i = text.find(sub)\n        while i!= -1:\n            yield i\n            i = text.find(sub, i+1)\n    \n    def gen_kmer(kmer):\n        for i in range(0, len(kmer)-L+1):\n            sub = kmer[i:i+L]\n            if len(sub)!= L:\n                break\n            yield sub\n    \n    counts = {}\n    for kmer in gen_kmer(pattern):\n        if kmer not in counts:\n            counts[kmer] = 0\n        counts[kmer] += 1\n    \n    for kmer in gen_kmer(text):\n        if kmer not in counts:\n            counts[kmer] = 0\n        counts[kmer] += 1\n    \n    return counts\n    \n    \ndef min_edit_distance(s1, s2):\n    '''\n    Write an efficient program to compute the edit distance between two strings.\n    '''\n    def gen_strings(s1, s2, i, j):\n        if i == len(s1):\n            for c in s2[j:]:\n                yield c, 'insert'\n            return\n        if j == len(s2):\n            for c in s1[i:]:\n                yield c, 'delete'\n            return\n        yield s1[i],'match'\n        yield s2[j],'match'\n        yield from gen_strings(s1, s2, i+1, j+1)\n    \n    return len(s1) + len(s2) - 2*sum(c1!= c2 for c1, c2 in gen_strings(s1, s2, 0, 0))\n    \n    \ndef is_palindrome(s):\n    '''\n    Write an efficient program to check whether a string is palindrome or not.\n    '''\n    def gen_palindrome(s):\n        for i in range(len(s)//2):\n            if s[i]!= s[len(s)-1-i]:\n                yield s[:i] + s[i+1:]\n    \n    return all(not t for t in gen_palindrome(s))\n    \n    \ndef translate_rna(rna):\n    '''\n    Given a string containing RNA, return the protein string transcribed from the RNA.\n    '''\n    codon_dict = {'UUU':'F', 'CUU':'L', 'AUU':'I', 'GUU':'V',\n                  'UUC':'F', 'CUC':'L', 'AUC':'I', 'GUC':'V',\n                  'UUA':'L', 'CUA':'L', 'AUA':'I', 'GUA':'V',\n                  'UUG':'L', 'CUG':'L', 'AUG':'M', 'GUG':'V',\n                  'UCU':'S', 'CCU':'P', 'ACU':'T', 'GCU':'A',\n                  'UCC':'S', 'CCC':'P', 'ACC':'T', 'GCC':'A',\n                  'UCA':'S', 'CCA':'P', 'ACA':'T', 'GCA':'A',\n                  'UCG':'S', 'CCG':'P', 'ACG':'T', 'GCG':'A',\n                  'UAU':'Y', 'CAU':'H', 'AAU':'N', 'GAU':'D',\n                  'UAC':'Y', 'CAC':'H', 'AAC':'N', 'GAC':'D',\n                  'UAA':'', 'CAA':'Q', 'AAA':'K', 'GAA':'E',\n                  'UAG':'', 'CAG':'Q', 'AAG':'K', 'GAG':'E',\n                  'UGU':'C', 'CGU':'R', 'AGU':'S', 'GGU':'G',\n                  "
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Assign variables to represent starting and ending points\n    start = 0\n    end = 2 ** (n*2)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n, s, e): \n        if s == e: \n            if n % 2 == 0: \n                return 1\n            else: \n                return 0\n        else: \n            return (count(n, s + 1, e) + count(n, s, e - 1)) \n    return count(n, 0, 2 ** n - 1) \n    \n    \ndef coin_change(coins, amount):\n    '''\n    Given a list of coins and a total amount, find the minimum number of coins required to make up that amount.\n    '''\n    def coin_change_helper(coins, amount):\n        if amount == 0: \n            return 0\n        if amount < 0:\n            return -1\n        if len(coins) == 0:\n            return -1\n        return min(coin_change_helper(coins, amount - coins[0]) + 1, \n                    coin_change_helper(coins[1:], amount))\n    return coin_change_helper(coins, amount)\n    \n    \ndef max_sum_contig_subarray(arr):\n    '''\n    Given an array, find the maximum sum of a contiguous subarray.\n    '''\n    def max_sum_helper(arr, left, right):\n        if left == right: \n            return arr[left]\n        else: \n            return max(arr[left] + max_sum_helper(arr, left + 1, right), \n                        arr[right] + max_sum_helper(arr, left, right - 1))\n    return max_sum_helper(arr, 0, len(arr) - 1)\n    \n    \ndef length_longest_substring(arr):\n    '''\n    Given a string, find the length of the longest substring without repeating characters.\n    '''\n    def max_substring_helper(arr, left, right):\n        if left == right: \n            return 1\n        else: \n            if arr[left] not in arr[left + 1:right + 1]: \n                return 1 + max_substring_helper(arr, left + 1, right)\n            else: \n                return max(max_substring_helper(arr, left + 1, right), \n                            max_substring_helper(arr, left, right - 1))\n    return max_substring_helper(arr, 0, len(arr) - 1)\n    \n    \ndef longest_substring_with_k_distinct(arr, k):\n    '''\n    Given an array, find the length of the longest subarray where no elements appear more than k times.\n    '''\n    def max_substring_helper(arr, left, right):\n        if left == right: \n            return 1\n        else: \n            if arr[left] not in arr[left + 1:right + 1]: \n                return 1 + max_substring_helper(arr, left + 1, right)\n            else: \n                return max(max_substring_helper(arr, left + 1, right), \n                            max_substring_helper(arr, left, right - 1))\n    return max_substring_helper(arr, 0, len(arr) - 1)\n    \n    \ndef smallest_subarray_with_given_sum(arr, s):\n    '''\n    Given an array of positive numbers and a positive number \u2018S\u2019, find the length of the smallest contiguous subarray whose sum is greater than or equal to \u2018S\u2019. Return 0 if no such subarray exists.\n    '''\n    def smallest_subarray_helper(arr, left, right, s):\n        if left == right: \n            return 0\n        else: \n            if s == 0:\n                return 0\n            if s < arr[right]: \n                return smallest_subarray_helper(arr, left, right - 1, s)\n            else: \n                return min(smallest_subarray_helper(arr, left, right - 1, s), \n                            1 + smallest_subarray_helper(arr, left + 1, right, s - arr[right]))\n    return smallest_subarray_helper(arr, 0, len(arr) - 1, s)\n    \n    \ndef longest_substring_with_at_most_k_distinct(arr, k):\n    '''\n    Given an array of positive numbers and a positive number \u2018K\u2019, find the length of the longest contiguous subarray whose sum is less than or equal to \u2018K\u2019. This problem follows the Sliding Window pattern, so the solution is similar to Longest Substring with At Most K Distinct.\n    '''\n    def max_substring_helper(arr, left, right, k):\n        if left == right: \n            return 1\n        else: \n            if arr[left] not in arr[left + 1:right + 1]: \n                return 1 + max_substring_helper(arr, left + 1, right, k)\n            else: \n                return max(max_substring_helper(arr, left + 1, right, k), \n                            max_substring_helper(arr, left, right - 1, k))\n    return max_substring_helper(arr, 0, len(arr) - 1, k)\n    \n    \ndef largest_sum_of_averages(arr, num_subarrays):\n    '''\n    Given an array of numbers arr and two positive integers \u2018K\u2019 and \u2018S\u2019, find the average of the maximum sum of \u2018K\u2019 consecutive elements in all subarrays of size \u2018S\u2019.\n    '''\n    def largest_sum_helper(arr, K, S):\n        if len(arr) < K or S > len(arr): \n            return -1\n        else:\n            total = 0\n            for i in range(len(arr) - K + 1):\n                total += sum(arr[i:i + K]) // K\n            return total\n    return largest_sum_helper(arr, num_subarrays, S)\n    \n    \ndef smallest_subarray_with_given_sum_2(arr, s):\n    '''\n    Given an array of positive numbers and a positive number \u2018S\u2019, find the length of the smallest contiguous subarray whose sum is greater than or equal to \u2018S\u2019. Return 0 if no such subarray exists.\n    '''\n    def smallest_subarray_helper(arr, left, right, s):\n        if left == right: \n            return 0\n        else: \n            if s == 0:\n                return 0\n            if s < arr[right]: \n                return smallest_subarray_helper(arr, left, right - 1, s)\n            else: \n                return 1 + min(smallest_subarray_helper(arr, left + 1, right, s - arr[right]), \n                                smallest_subarray_helper(arr, left, right - 1, s))\n    return smallest_subarray_helper(arr, 0, len(arr) - 1, s)\n    \n    \ndef longest_substring_with_k_distinct_chars(arr, k):\n    '''\n    Given an array of strings and a positive integer \u2018K\u2019, find the length of the longest substring in each string such that no more than \u2018K\u2019 distinct characters exist in the substring.\n    '''\n    def max_substring_helper(arr, left, right):\n        if left == right: \n            return 0\n        else: \n            if len(set(arr[left:right])) <= k:\n                return 1 + max(max_substring_helper(arr, left + 1, right), \n                                max_substring_helper(arr, left, right - 1))\n            else: \n                return max(max_substring_helper(arr, left + 1, right), \n                            max_substring_helper(arr, left, right - 1))\n    return max_substring_helper(arr, 0, len(arr))\n    \n    \ndef check_array_strict_partition(arr, n, k):\n    '''\n    Given an array of integers and an integer \u2018K\u2019, find the count of all possible distinct strict partitions of the array into sets of size \u2018K\u2019.\n    '''\n    def check_arra"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return ((2 ** n) * (2 ** n))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0]*(1<<n) for i in range(n)]\n    for i in range(n):\n        dp[i][1<<i] = 1\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    if n == 0:\n        return 0\n    for i in range(2**n):\n        first = i\n        last = i+2**n-1\n        if first % 10 == last % 10:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 2\n    else: \n        return count_binary_seq(n - 1) + count_binary_seq(n - 2)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return ((2**(n*2))-((2**(n*2))-1))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    for v in d.values():\n        if isinstance(v, dict):\n            # dict in dict, recursion\n            cur_depth = dict_depth(v) + 1\n        else:\n            # leaf node\n            cur_depth = 1\n        max_depth = max(cur_depth, max_depth)\n    return max_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d:\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n    \ndef list_depth(l):\n    '''\n    Write a function to find the depth of a list.\n    '''\n    if isinstance(l, list):\n        return 1 + (max(map(list_depth, l)) if l else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == None:\n        return 0\n    elif type(d) == dict:\n        depth = 0\n        for v in d.values():\n            depth = max(depth, 1 + dict_depth(v))\n        return depth\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        max_depth = 0\n        for v in d.values():\n            depth = dict_depth(v)\n            if depth > max_depth:\n                max_depth = depth\n        return max_depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max([dict_depth(v) for v in d.values()]) if isinstance(d, dict) else 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    elif len(d) == 0:\n        return 1\n    else:\n        depth = 0\n        for v in d.values():\n            if isinstance(v, dict):\n                depth = max(depth, 1 + dict_depth(v))\n        return depth\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # rotations = 3\n    # index = 4\n    # arr = [15,18,2,3,6,12]\n    length = len(arr)\n    rotations = rotations%length\n    new_arr = []\n    if(rotations > 0) :\n        for i in range(rotations) :\n            new_arr.append(arr[length-1])\n            for j in range(length-1) :\n                new_arr.append(arr[j])\n        for i in range(rotations,length) :\n            new_arr.append(arr[i])\n    else :\n        for i in range(length) :\n            new_arr.append(arr[i])\n    print(new_arr)\n    return new_arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    pass\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges[0],ranges[1]+1):\n        if(rotations[i] == index):\n            return i\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n=len(ranges)\n    for i in range(index+1,n) :\n        if ranges[i]>=ranges[index] :\n            return i \n    return n\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Write your code here\n    if ranges[0]>ranges[1] :\n        ranges[0],ranges[1]=ranges[1],ranges[0]\n    if index==-1 or index>len(arr) :\n        return -1\n    if index<=ranges[0] :\n        return arr[index]\n    elif index<=ranges[1] :\n        return arr[ranges[1]-index+len(arr)-1]\n    else :\n        return -1\n    \n    \n    \n    \n    \n    \ndef find_Element_V2(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Write your code here\n    if ranges[0]>ranges[1] :\n        ranges[0],ranges[1]=ranges[1],ranges[0]\n    \n    start=ranges[1]-rotations\n    end=ranges[0]+rotations\n    \n    if index<0 or index>=len(arr):\n        return -1\n    if index<start :\n        return arr[index]\n    elif index>end :\n        return -1\n    else :\n        return arr[end-1+index]\n        \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    try :\n        # for loops are used to iterate over a sequence\n        # range function returns a sequence of numbers, starting from 0 by default, \n        # and increments by 1 (by default), and stops before a specified number.\n        for i in range(ranges) : \n            # % is a special operator in python. \n            # % is called modulus and is used to find the remainder \n            # operator.\n            # The modulo of both numbers is calculated and if it is equal to the index, then we have found the element.\n            if (arr[(i+index)%ranges] == index) : \n                # return function is used to return the value from a function.\n                return arr[(i+index)%ranges]\n    except Exception as e :\n        # print(e) will print the error message.\n        # raise will raise the specified error as an exception.\n        raise Exception(e)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges) :\n        if i==index :\n            return arr[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges) :\n        if index < len(arr) :\n            print(\"Rotated list is:\",arr)\n            print(\"index is:\",index)\n            print(\"arr[index]\",arr[index])\n            arr[index] = arr[index+rotations]\n            index += rotations\n            print(\"Rotated list is:\",arr)\n            print(\"index is:\",index)\n            print(\"arr[index]\",arr[index])\n    return(arr[index])\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges) :\n        if(index == 0) :\n            print(\"Element is:\",arr[rotations])\n            break\n        else :\n            index -= 1\n            print(\"index:\",index)\n            print(\"rotations:\",rotations)\n            print(\"element:\",arr[rotations])\n            return arr[rotations]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    l=len(arr)\n    if(index<ranges[0]):\n        return arr[index]\n    elif(index<ranges[1]):\n        return arr[index%l]\n    elif(index<ranges[2]):\n        return arr[(index-rotations)%l]\n    else:\n        return arr[(index-rotations-1)%l]\n    \n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if len(words) == 0:\n        return ''\n    for word in words:\n        if word[0] == 'p':\n            return word\n    return ''\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    my_list = []\n    for word in words:\n        if(word[0]=='p'):\n            my_list.append(word)\n    return my_list\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words.split(' ')\n    for i in words:\n        if(i[0] == 'p'):\n            return i\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word_list = words.split()\n    #print(word_list)\n    p_words = []\n    for words in word_list:\n        #print(words)\n        if words[0] == 'p':\n            p_words.append(words)\n    print(p_words)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    final_list = []\n    for i in words:\n        if i[0] == 'p':\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if len(words)==0:\n        return []\n    elif len(words)==1:\n        return []\n    elif len(words)>=2:\n        #print(\"Words:\",words)\n        #print(words[0])\n        #print(words[1])\n        if words[0][0]=='p' and words[1][0]=='p':\n            return words[0],words[1]\n        else:\n            return start_withp(words[1:])\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [x for x in words if x[0] == 'p']\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # split the string into a list\n    l = words.split()\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # use regex to find the word starting with p\n    # append it to a list\n    #return words\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    ans = 0\n    for i in range(index, n):\n        if i == k:\n            break\n        else:\n            ans = max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    arr = [0] * n\n    for i in range(n):\n        arr[i] = a[i]\n    a.sort(reverse=True)\n    k = k - 1\n    i = 0\n    while i < n and k >= 0:\n        if arr[i] < a[k]:\n            arr[i] = a[k]\n            i += 1\n        k -= 1\n    return max(arr)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global maximum\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # If k is more than n, we cannot find any subsequence with sum greater than 0.\n    if k > n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [0 for _ in range(n)]\n    dp[0] = a[0]\n    dp[1] = max(dp[0], a[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2]+a[i])\n    return dp[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # TODO: Write your code here\n    dp = [0 for i in range(k+1)]\n    for i in range(k+1):\n        dp[i] = a[i]\n    for i in range(k+1, n):\n        for j in range(1, k+1):\n            if a[j] >= a[i]:\n                dp[j] = max(dp[j], dp[j-1] + a[i])\n    return dp[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == index:\n        return a[k]\n    else:\n        include = max_sum_increasing_subseq(a, n, index+1, k) + a[index]\n        exclude = max_sum_increasing_subseq(a, n, index+1, k+1)\n        return max(include, exclude)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        print(\"Invalid Input\")\n        return -1\n    result = 0\n    maxSum = 0\n    for i in range(n):\n        if i < k:\n            maxSum += a[i]\n        else:\n            maxSum = max(maxSum, a[i])\n        if maxSum > result:\n            result = maxSum\n    return result\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #  We can compute maxsum and also find sum\n    #  We can compute prefixsum as well\n    #  We can also find the position of k in the prefix sum array\n    #  Now we are done we can simply return prefixsum[index] + maxsum\n    #  Solves the problem in O(n) time and O(n) space\n    #  Time complexity O(n)\n    #  Space complexity O(n)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k < index or index < 0:\n        return 0\n    dp = [0 for _ in range(n + 1)]\n    dp[index] = a[index]\n    max_sum = dp[index]\n    for i in range(index + 1, k):\n        dp[i] = max(dp[i - 1], a[i])\n        max_sum = max(dp[i], max_sum)\n    for i in range(index + 1, k):\n        dp[i] = max(dp[i - 1] + a[i], dp[i])\n        max_sum = max(dp[i], max_sum)\n    return max_sum\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex1=[]\n    for i in range(m,n+1):\n        tuplex1.append(tuplex[i])\n    return tuplex1\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a = tuplex[0:m]\n    b = tuplex[m:n]\n    return (a,b)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex2 = []\n    for i in range(n):\n        tuplex2.append(tuplex[0][m:m+n])\n        tuplex = tuplex[1:]\n    return tuple(tuplex2)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if tuplex==[]:\n        tuplex=tuple()\n    else:\n        tuplex=tuple(tuplex)\n    # return tuplex[1:m]\n    return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if type(tuplex)==list:\n        return [tuplex[:m]+[:n] for tuplex in tuplex[m:]]\n    elif type(tuplex)==tuple:\n        return tuple(tuplex[:m]+[:n])\n    else:\n        raise TypeError('please enter a list or a tuple')\ndef shift_list(lst):\n    '''\n    Write a function to shift a list.\n    '''\n    if type(lst)==list:\n        return lst[-1:]+lst[:-1]\n    elif type(lst)==tuple:\n        return lst[-1:]+lst[:-1]\n    else:\n        raise TypeError('please enter a list or a tuple')\ndef append_tuple(tuplex):\n    '''\n    Write a function to append a tuple to a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return tuple(tuplex+tuplex[-1])\n    elif type(tuplex)==list:\n        return list(tuplex+tuplex[-1])\n    else:\n        raise TypeError('please enter a tuple or a list')\ndef pop_list(lst):\n    '''\n    Write a function to pop a list.\n    '''\n    if type(lst)==list:\n        return lst.pop()\n    elif type(lst)==tuple:\n        return lst.pop()\n    else:\n        raise TypeError('please enter a list or a tuple')\ndef insert_tuple(tuplex,i,val):\n    '''\n    Write a function to insert a value into a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return tuplex[:i]+[val]+tuplex[i:]\n    elif type(tuplex)==list:\n        return lst[:i]+[val]+lst[i:]\n    else:\n        raise TypeError('please enter a tuple or a list')\ndef remove_tuple(tuplex,*val):\n    '''\n    Write a function to remove value(s) from a tuple.\n    '''\n    if type(tuplex)==tuple:\n        if len(val)==0:\n            return tuple()\n        for v in val:\n            tuplex=tuplex[:tuplex.index(v)]+tuplex[tuplex.index(v)+1:]\n        return tuplex\n    elif type(tuplex)==list:\n        if len(val)==0:\n            return []\n        for v in val:\n            lst=lst[:lst.index(v)]+lst[lst.index(v)+1:]\n        return lst\n    else:\n        raise TypeError('please enter a tuple or a list')\ndef count_tuple(tuplex,val):\n    '''\n    Write a function to count how many values are in a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return tuplex.count(val)\n    elif type(tuplex)==list:\n        return lst.count(val)\n    else:\n        raise TypeError('please enter a tuple or a list')\ndef replace_tuple(tuplex,val,new_val):\n    '''\n    Write a function to replace a value in a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return tuplex[:tuplex.index(val)]+new_val+tuplex[tuplex.index(val)+1:]\n    elif type(tuplex)==list:\n        return lst[:lst.index(val)]+new_val+lst[lst.index(val)+1:]\n    else:\n        raise TypeError('please enter a tuple or a list')\ndef reverse_tuple(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return tuplex[::-1]\n    elif type(tuplex)==list:\n        return lst[::-1]\n    else:\n        raise TypeError('please enter a tuple or a list')\ndef sort_tuple(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return tuple(sorted(tuplex))\n    elif type(tuplex)==list:\n        return lst.sort()\n    else:\n        raise TypeError('please enter a tuple or a list')\ndef copy_tuple(tuplex):\n    '''\n    Write a function to copy a tuple.\n    '''\n    return tuplex[:]\ndef deepcopy_tuple(tuplex):\n    '''\n    Write a function to make a deep copy of a tuple.\n    '''\n    return deepcopy(tuplex)\ndef find_tuple(tuplex,val):\n    '''\n    Write a function to find a value in a tuple.\n    '''\n    return tuplex.index(val)\ndef min_tuple(tuplex):\n    '''\n    Write a function to find the minimum value in a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return min(tuplex)\n    elif type(tuplex)==list:\n        return min(lst)\n    else:\n        raise TypeError('please enter a tuple or a list')\ndef max_tuple(tuplex):\n    '''\n    Write a function to find the maximum value in a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return max(tuplex)\n    elif type(tuplex)==list:\n        return max(lst)\n    else:\n        raise TypeError('please enter a tuple or a list')\ndef len_tuple(tuplex):\n    '''\n    Write a function to find the length of a tuple.\n    '''\n    return len(tuplex)\ndef less_tuple(tuplex,val):\n    '''\n    Write a function to check if a value is less than the corresponding value in a tuple.\n    '''\n    return all(x<val for x in tuplex)\ndef greater_tuple(tuplex,val):\n    '''\n    Write a function to check if a value is greater than the corresponding value in a tuple.\n    '''\n    return all(x>val for x in tuplex)\ndef range_tuple(tuplex):\n    '''\n    Write a function to return a tuple of consecutive numbers, starting from 0.\n    '''\n    return tuple(range(len(tuplex)))\ndef sum_tuple(tuplex):\n    '''\n    Write a function to sum up all the values in a tuple.\n    '''\n    return sum(tuplex)\ndef index_tuple(tuplex,val):\n    '''\n    Write a function to find the index of a value in a tuple.\n    '''\n    return tuplex.index(val)\ndef membership_tuple(tuplex,val):\n    '''\n    Write a function to find whether a value exists in a tuple.\n    '''\n    return val in tuplex\ndef concatenate_tuple(tuplex,val):\n    '''\n    Write a function to concatenate a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return tuplex+val\n    elif type(tuplex)==list:\n        return lst+val\n    else:\n        raise TypeError('please enter a tuple or a list')\ndef repeat_tuple(tuplex,val):\n    '''\n    Write a function to repeat a tuple.\n    '''\n    return val*tuplex\ndef multiply_tuple(tuplex,val):\n    '''\n    Write a function to multiply all the values in a tuple.\n    '''\n    return val*tuplex\ndef divide_tuple(tuplex,val):\n    '''\n    Write a function to divide all the values in a tuple.\n    '''\n    return tuplex/val\ndef reversed_"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = tuple()\n    for i in range(m):\n        colon = colon + (tuplex[i][n],)\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = tuple()\n    for i in range(0,len(tuplex),m):\n        colon_tuplex += tuplex[i:i+m]\n    return colon_tuplex\ndef count_tuplex(tuplex,m):\n    '''\n    Write a function to count the number of tuples in a colon of a tuple.\n    '''\n    return len(tuplex) // m\ndef add_tuplex(tuplex,m):\n    '''\n    Write a function to add two tuples.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    for i in range(0,len(tuplex)):\n        tuplex_0[i] += 1\n        if tuplex[i] > 10:\n            tuplex_0[i] = 0\n    return tuplex_0\ndef add_tuplex_1(tuplex,m):\n    '''\n    Write a function to add two tuples.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    i = 0\n    while i < len(tuplex):\n        tuplex_0[i] += 1\n        if tuplex[i] > 10:\n            tuplex_0[i] = 0\n            i += m\n        else:\n            i += 1\n    return tuplex_0\ndef sum_tuplex(tuplex,m):\n    '''\n    Write a function to sum up all the elements in a tuple.\n    '''\n    return sum(tuplex) * m\ndef remove_tuplex(tuplex,m):\n    '''\n    Write a function to remove all the tuples in a colon of a tuple.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    for i in range(0,len(tuplex),m):\n        tuplex_0[i:i+m] = ()\n    return tuplex_0\ndef add_tuplex_s(tuplex,m):\n    '''\n    Write a function to add two tuples of the same length.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    for i in range(0,len(tuplex)):\n        tuplex_0[i] += 1\n        if tuplex[i] > 10:\n            tuplex_0[i] = 0\n    return tuplex_0\ndef add_tuplex_1_s(tuplex,m):\n    '''\n    Write a function to add two tuples of the same length.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    i = 0\n    while i < len(tuplex):\n        tuplex_0[i] += 1\n        if tuplex[i] > 10:\n            tuplex_0[i] = 0\n            i += m\n        else:\n            i += 1\n    return tuplex_0\ndef sum_tuplex_s(tuplex,m):\n    '''\n    Write a function to sum up all the elements in a tuple.\n    '''\n    return sum(tuplex) * m\ndef remove_tuplex_s(tuplex,m):\n    '''\n    Write a function to remove all the tuples in a colon of a tuple.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    for i in range(0,len(tuplex),m):\n        tuplex_0[i:i+m] = ()\n    return tuplex_0\ndef multiply_tuplex(tuplex,m):\n    '''\n    Write a function to multiply all the elements in a tuple.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    tuplex_1 = 1\n    for i in tuplex_0:\n        tuplex_1 *= i\n    return tuplex_1\ndef multiply_tuplex_s(tuplex,m):\n    '''\n    Write a function to multiply all the elements in a tuple.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    tuplex_1 = 1\n    for i in tuplex_0:\n        tuplex_1 *= i\n    return tuplex_1\ndef sum_m_tuplex(tuplex,m):\n    '''\n    Write a function to sum up all the elements in a tuple.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    tuplex_1 = 0\n    for i in tuplex_0:\n        tuplex_1 += i\n    return tuplex_1 * m\ndef get_max(tuplex):\n    '''\n    Write a function to get the maximum value in a tuple.\n    '''\n    return max(tuplex)\ndef get_min(tuplex):\n    '''\n    Write a function to get the minimum value in a tuple.\n    '''\n    return min(tuplex)\ndef get_avg(tuplex):\n    '''\n    Write a function to get the average value in a tuple.\n    '''\n    return sum(tuplex) / len(tuplex)\ndef get_median(tuplex):\n    '''\n    Write a function to get the median value in a tuple.\n    '''\n    tuplex.sort()\n    if len(tuplex) % 2!= 0:\n        return tuplex[len(tuplex) // 2]\n    else:\n        return (tuplex[len(tuplex) // 2] + tuplex[len(tuplex) // 2 - 1]) / 2\ndef get_var(tuplex):\n    '''\n    Write a function to get the variation of a tuple.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    tuplex_1 = 0\n    for i in tuplex_0:\n        tuplex_1 += (i - sum(tuplex_0) / len(tuplex_0)) ** 2\n    return tuplex_1 / len(tuplex_0)\ndef get_std(tuplex):\n    '''\n    Write a function to get the standard deviation of a tuple.\n    '''\n    return (get_var(tuplex)) ** 0.5\ndef get_dict(tuplex,tuplex_0):\n    '''\n    Write a function to get the dictionary of two tuples.\n    '''\n    dictionary = {}\n    for i in range(0,len(tuplex_0)):\n        dictionary[tuplex_0[i]] = tuplex[i]\n    return dictionary\ndef get_dict_s(tuplex,tuplex_0):\n    '''\n    Write a function to get the dictionary of two tuples.\n    '''\n    dictionary = {}\n    for i in range(0,len(tuplex_0)):\n        dictionary[tuplex_0[i]] = tuplex[i]\n    return dictionary\ndef get_freq_tuplex(tuplex,m):\n    '''\n    Write a function to get the frequency of tuples in a colon of a tuple.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    tuplex_1 = []\n    for i in range(0,len(tuplex_0),m):\n        tuplex_1.append(tuplex_0[i:i+m])\n    return tuplex_1\ndef get_freq_tuplex_s(tuplex,m):\n    '''\n    Write a function to get the frequency of tuples in a colon of a tuple.\n    '''\n    tuplex_0 = deepcopy(tuplex)\n    tuplex_1 = []\n    for i in range(0,len(tuplex_0),m):\n        tuplex_1.append(tuplex_0[i:i+m])\n    return tuplex_1\ndef get_freq_tuplex_s_1(tuplex,m):\n    '''\n    Write a function to get the frequency of tuples in a colon of a tuple.\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #tuplex=tuple(tuplex)\n    tuplex=list(tuplex)\n    tuplex.insert(m+n,':')\n    tuplex=tuple(tuplex)\n    print(tuplex)\ndef insert_tuplex(tuplex,m,n,p):\n    '''\n    Write a function to insert a list inside a tuple.\n    '''\n    tuplex=list(tuplex)\n    tuplex.insert(m,n)\n    tuplex.insert(m+1,p)\n    tuplex=tuple(tuplex)\n    print(tuplex)\ndef remove_tuplex(tuplex,n,o):\n    '''\n    Write a function to remove a list from a tuple.\n    '''\n    tuplex=list(tuplex)\n    tuplex.pop(n-1)\n    tuplex.pop(n-1)\n    tuplex.pop(n-1)\n    tuplex=tuple(tuplex)\n    print(tuplex)\ndef modify_tuplex(tuplex,n,o):\n    '''\n    Write a function to modify the contents of a tuple.\n    '''\n    tuplex=list(tuplex)\n    tuplex[n]=o\n    tuplex=tuple(tuplex)\n    print(tuplex)\ndef delete_tuplex(tuplex,n):\n    '''\n    Write a function to delete the nth tuple in a tuple.\n    '''\n    tuplex=list(tuplex)\n    tuplex.pop(n-1)\n    tuplex=tuple(tuplex)\n    print(tuplex)\ndef tuple_list(tuplex):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    listx=list(tuplex)\n    return listx\ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex=tuple(listx)\n    return tuplex\ndef get_tuplex_len(tuplex):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    tuplex=list(tuplex)\n    return len(tuplex)\ndef get_list_len(listx):\n    '''\n    Write a function to get the length of a list.\n    '''\n    return len(listx)\ndef get_tuplex_elements(tuplex,n):\n    '''\n    Write a function to get the nth elements of a tuple.\n    '''\n    tuplex=list(tuplex)\n    return tuplex[n]\ndef get_list_elements(listx,n):\n    '''\n    Write a function to get the nth elements of a list.\n    '''\n    listx=list(listx)\n    return listx[n]\ndef get_tuplex_element_index(tuplex,n):\n    '''\n    Write a function to get the index of the nth element of a tuple.\n    '''\n    tuplex=list(tuplex)\n    return tuplex.index(n)\ndef get_list_element_index(listx,n):\n    '''\n    Write a function to get the index of the nth element of a list.\n    '''\n    listx=list(listx)\n    return listx.index(n)\ndef get_tuplex_element_count(tuplex,n):\n    '''\n    Write a function to get the count of the nth element of a tuple.\n    '''\n    tuplex=list(tuplex)\n    return tuplex.count(n)\ndef get_list_element_count(listx,n):\n    '''\n    Write a function to get the count of the nth element of a list.\n    '''\n    listx=list(listx)\n    return listx.count(n)\ndef compare_tuples(tuplex,n,o):\n    '''\n    Write a function to compare if two tuples are equal.\n    '''\n    if tuplex==n:\n        return True\n    else:\n        return False\ndef get_tuple_from_dict(dictx):\n    '''\n    Write a function to convert a dictionary to a tuple.\n    '''\n    tuplex=tuple(dictx.keys())\n    return tuplex\ndef get_list_from_dict(dictx):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    listx=list(dictx.keys())\n    return listx\ndef get_dict_from_tuplex(tuplex,n):\n    '''\n    Write a function to convert a tuple to a dictionary.\n    '''\n    dictx={}\n    for i in range(0,n):\n        dictx[tuplex[i]]=tuplex[i+1]\n    return dictx\ndef get_dict_from_list(listx,n):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    dictx={}\n    for i in range(0,n):\n        dictx[listx[i]]=listx[i+1]\n    return dictx\ndef remove_dict_element(dictx,n):\n    '''\n    Write a function to remove the nth element from a dictionary.\n    '''\n    dictx=list(dictx)\n    dictx.pop(n)\n    dictx=dict(dictx)\n    return dictx\ndef remove_dict_elements(dictx,listx):\n    '''\n    Write a function to remove multiple elements from a dictionary.\n    '''\n    dictx=list(dictx)\n    for i in listx:\n        dictx.pop(i)\n    dictx=dict(dictx)\n    return dictx\ndef add_dict_element(dictx,n,o):\n    '''\n    Write a function to add an element to a dictionary.\n    '''\n    dictx[n]=o\n    return dictx\ndef add_dict_elements(dictx,listx):\n    '''\n    Write a function to add multiple elements to a dictionary.\n    '''\n    dictx=list(dictx)\n    for i in listx:\n        dictx.append(i)\n    dictx=dict(dictx)\n    return dictx\ndef list_remove_duplicates(listx):\n    '''\n    Write a function to remove all duplicates in a list.\n    '''\n    listx=list(listx)\n    listx=set(listx)\n    listx=list(listx)\n    return listx\ndef list_count(listx):\n    '''\n    Write a function to count how many times a value appears in a list.\n    '''\n    listx=list(listx)\n    return listx.count(listx)\ndef list_concat(listx,listy):\n    '''\n    Write a function to concatenate two lists.\n    '''\n    listx=list(listx)\n    listy=list(listy)\n    listx=listx+listy\n    return listx\ndef list_reverse(listx):\n    '''\n    Write a function to reverse a list.\n    '''\n    listx=list(listx)\n    listx.reverse()\n    return listx\ndef list_index(listx,n):\n    '''\n    Write a function to get the index of a value in a list.\n    '''\n    listx=list(listx)\n    return listx.index(n)\ndef list_index_all(listx,n):\n    '''\n    Write a function to get the index of the first occurence of a value in a list.\n    '''\n    listx=list(listx)\n    return listx.index(n)\ndef list_reverse_index(listx,n):\n    '''\n    Write a function to get the index of a value in a reversed list.\n    '''\n    listx=list(listx)\n    listx.reverse()\n    return list"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l=[]\n    for i in range(len(tuplex)):\n        tuplex[i]=tuplex[i].split(':')\n        l.append(tuplex[i][1])\n    return tuple(l)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # O(N) time | O(N) space\n    product = 1\n    max_product = -float('inf')\n    nums1_dict = {}\n    nums2_dict = {}\n    for num in nums1:\n        nums1_dict[num] = nums1_dict.get(num, 0) + 1\n    for num in nums2:\n        nums2_dict[num] = nums2_dict.get(num, 0) + 1\n    for num in nums1:\n        if num in nums2_dict:\n            product *= num\n            if product > max_product:\n                max_product = product\n    for num in nums2:\n        if num in nums1_dict:\n            product *= num\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # output = []\n    result = 1\n    for i in range(N):\n        result *= nums1[i] * nums2[i]\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1_sorted = sorted(nums1, reverse=True)\n    nums2_sorted = sorted(nums2, reverse=True)\n    products = []\n    for i in range(N):\n        product = nums1_sorted[i] * nums2_sorted[i]\n        products.append(product)\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_list = nums1 + nums2\n    max_list.sort()\n    result = []\n    for i in range(0, N):\n        result.append(max_list[i*2])\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    max_prod_size = N\n    if N == 1:\n        products.append(max(nums1[0], nums2[0]))\n    else:\n        for i in range(0, N):\n            max_num1 = max(nums1)\n            max_num2 = max(nums2)\n            products.append(max_num1 * max_num2)\n            nums1.remove(max_num1)\n            nums2.remove(max_num2)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    lst = [nums1[i] * nums2[j] for i in range(N) for j in range(N)]\n    lst.sort(reverse=True)\n    return lst[N]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # def largest_product(nums1, nums2, N):\n    #     # iterate through nums1 and nums2\n    #     # if the product of i and j is larger than the largest product so far, store it\n    #     # return the largest product\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # print(nums1, nums2)\n    # print(nums1[N-1]*nums2[N-1])\n    return nums1[N-1]*nums2[N-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    \n    k1 = k2 = 0\n    largest = 0\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    l1 = [num1 for num1 in nums1 for num2 in nums2 if num1 * num2 == N]\n    l2 = [num2 for num1 in nums1 for num2 in nums2 if num1 * num2 == N]\n    l = l1 + l2\n    print(l)\n    if len(l) > 0:\n        l.sort(reverse = True)\n        return l[0]\n    else:\n        return -1\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a > b):\n        return a\n    elif (a < b):\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        print(a, \"is maximum\")\n    else:\n        print(b, \"is maximum\")\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)\n    return\n    \nmaximum(3,8)\nmaximum(5,3)\nmaximum(3,3)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(f\"The maximum number is {a}\")\n    else:\n        print(f\"The maximum number is {b}\")\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \n    \ndef convert_tuple_to_string(str1):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    return ''.join(str1)\n    \n    \ndef main():\n    str1 = 'This is a test'\n    print(f'String to tuple: {string_to_tuple(str1)}')\n    print(f'Tuple to string: {convert_tuple_to_string(string_to_tuple(str1))}')\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(list(str1))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # your code here\n    return tuple(str1)\nprint(string_to_tuple('hello'))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip()\n    if not str1:\n        return tuple()\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = []\n    for i in str1:\n        str2.append(i)\n    return tuple(str2)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n ^ (n & (n-1)))\n    \n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    def set_left_most_unset_bit(n): \n        n = n | (n >> 1) \n        return n ^ (n >> 1) \n    return set_left_most_unset_bit\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ((1 << n) | n) ^ ((1 << n) - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while (1 << i) <= n: \n        i += 1\n    return (1 << i - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while (n & 1 == 0):\n        n = n >> 1\n        i += 1\n    return i\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    left_most_set_bit = -1\n    for i in range(0, 32):\n        bit_value = 1 & n\n        if bit_value == 0:\n            left_most_set_bit = i\n            break\n        n = n >> 1\n    return left_most_set_bit\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the mask to the number of bits in n. \n    # This number will be decremented each time a \n    # bit is set in the result.\n    mask = n\n    while mask > 0:\n        mask = mask & (mask - 1)\n        # Set the right most bit in the mask. \n        # The right most bit has value 1.\n        mask = mask | 1\n        # Return the result after decrementing \n        # the right most set bit.\n        return n ^ mask\n    # return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1\n    while mask < n:\n        mask = mask << 1\n    return mask >> 1\n    \n    \n    "
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    num_bits = n.bit_length() \n    mask = (1 << num_bits) - 1 \n    return n & mask\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Use this variable to keep track of leftmost unset bit\n    # the initial value of leftmost unset bit is 0\n    left_most_unset_bit = 0\n    # Traverse the bits in the integer and set the leftmost\n    # unset bit to the rightmost bit. If the current bit is set,\n    # increase the value of left_most_unset_bit by 1.\n    while (n):\n        if (n & 1):\n            left_most_unset_bit += 1\n        n = n >> 1\n    # Return the leftmost unset bit value\n    return left_most_unset_bit\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol=math.pi*r*r*h/3\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print('\\n' + '-'*40)\n    print(\"Volume of a cone\")\n    print('-'*40)\n    print(\"Radius: {}\".format(r))\n    print(\"Height: {}\".format(h))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*(r**2)*(h/3)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi*(r**2)*h)/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # r = radius, h = height\n    volume = (math.pi * r**2 * h)/3\n    return volume\ndef volume_right_circular_prism(r,h):\n    '''\n    Write a function to find the volume of a right circular prism.\n    '''\n    # r = radius, h = height\n    volume = math.pi * r**2 * h\n    return volume\ndef volume_rectangular_prism(w,l,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    # w = width, l = length, h = height\n    volume = w * l * h\n    return volume\ndef volume_parallelepiped(w,l,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    # w = width, l = length, h = height\n    volume = w * l * h\n    return volume\ndef volume_right_circular_cylinder(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    # r = radius, h = height\n    volume = math.pi * r**2 * h\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # r = radius, h = height\n    volume = math.pi * r**2 * h\n    return volume\ndef volume_cone_top_sill(r,h):\n    '''\n    Write a function to find the volume of a cone with the top and bottom faces flat.\n    '''\n    # r = radius, h = height\n    volume = math.pi * r**2 * (h/3)\n    return volume\ndef volume_cone_slant_side(r,h):\n    '''\n    Write a function to find the volume of a cone with the side face slanted.\n    '''\n    # r = radius, h = height\n    volume = math.pi * r**2 * (h/3) * (2 / 3)\n    return volume\ndef volume_cube(w,h,d):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    # w = width, h = height, d = depth\n    volume = w * h * d\n    return volume\ndef volume_right_circular_cone(r):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    # r = radius\n    volume = (math.pi * r**2) / 3\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # r = radius\n    volume = (4/3) * math.pi * r**3\n    return volume\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    # l = length, w = width, h = height\n    volume = l * w * h\n    return volume\ndef volume_cone_bottom(r,h):\n    '''\n    Write a function to find the volume of a cone with the bottom face flat.\n    '''\n    # r = radius, h = height\n    volume = (math.pi * r**2) / 3 * h\n    return volume\ndef volume_right_circular_pyramid(r):\n    '''\n    Write a function to find the volume of a right circular pyramid.\n    '''\n    # r = radius\n    volume = math.pi * r**2 / 3\n    return volume\ndef volume_pyramid(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    # r = radius, h = height\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\ndef volume_right_circular_sphere(r):\n    '''\n    Write a function to find the volume of a right circular sphere.\n    '''\n    # r = radius\n    volume = (4/3) * math.pi * r**3\n    return volume\ndef volume_spherical_capsule(r,h):\n    '''\n    Write a function to find the volume of a spherical capsule.\n    '''\n    # r = radius, h = height\n    volume = (math.pi * r**2 * h) / 3\n    return volume\ndef volume_right_circular_cylinder(r):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    # r = radius\n    volume = (math.pi * r**2)\n    return volume\ndef volume_cylinder_ends(r,h):\n    '''\n    Write a function to find the volume of a cylinder with the ends flat.\n    '''\n    # r = radius, h = height\n    volume = (math.pi * r**2 * h) / 3\n    return volume\ndef volume_cylinder_top_and_bottom(r,h):\n    '''\n    Write a function to find the volume of a cylinder with the ends slanted.\n    '''\n    # r = radius, h = height\n    volume = (math.pi * r**2 * (h / 3)) * (2 / 3)\n    return volume\ndef volume_rhombus(w,l):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    # w = width, l = length\n    volume = (w * l) / 2\n    return volume\ndef volume_right_circular_rhombus(r):\n    '''\n    Write a function to find the volume of a right circular rhombus.\n    '''\n    # r = radius\n    volume = (math.pi * r**2) / 2\n    return volume\ndef volume_rectangular_prism_parallel_to_x_axis(w,l,h):\n    '''\n    Write a function to find the volume of a rectangular prism parallel to the x-axis.\n    '''\n    # w = width, l = length, h = height\n    volume = w * l * h\n    return volume\ndef volume_rectangular_prism_parallel_to_y_axis(w,l,h):\n    '''\n    Write a function to find the volume of a rectangular prism parallel to the y-axis.\n    '''\n    # w = width, l = length, h = height\n    volume = w * l * h\n    return volume\ndef volume_rectangular_prism_parallel_to_z_axis(w,l,h):\n    '''\n    Write a function to find the volume of a rectangular prism parallel to the z-axis.\n    '''\n    # w = width, l = length, h = height\n    volume = w * l * h\n    return volume\ndef volume_triangular_prism(w,l,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    # w = width, l = length, h = height\n    volume = (w * l * h) / 2\n    return volume\ndef volume_triangular_prism_base(w,l,h):\n    '''\n    Write a function to find the volume of a triangular prism with only the base parallel to the x-axis.\n    '''\n    # w = width, l = length, h = height\n    volume = (w * l * h) / 2\n    return volume\ndef volume_triangular_prism_base(w,l,h):\n    '''\n    Write a function to find the volume of a triangular prism with only the base parallel to the y-axis.\n    '''\n    # w = width, l = length, h = height\n    volume = (w * l * h) / 2\n    return volume\ndef volume_triangular_prism_base(w,l,h):\n    '''\n    Write a function to find the volume of a triangular prism with only the base parallel to the z-axis.\n    '''\n    # w = width, l = length, h = height\n    volume = (w * l * h) / 2\n    return volume\ndef volume_parallelepiped_with_long_sides(w,l,h):\n    '''\n    Write a function to find the volume of a parallelepiped with long sides.\n    '''\n    # w = width, "
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=(1/3)*math.pi*r*r*h\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*r*r*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*r*r*r\n    return v\ndef volume_prism(a,b,c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    v=a*b*c\n    return v\ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    s=math.pi*r*r+(1/3)*math.pi*r*h\n    return s\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=2*math.pi*r*(r+h)\n    return s\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s=4*math.pi*r*r\n    return s\ndef surface_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    s=2*a*b+2*b*c+2*c*a\n    return s\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    a=math.pi*r*h\n    return a\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    a=2*math.pi*r*(r+h)\n    return a\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    a=4*math.pi*r*r\n    return a\ndef area_prism(a,b,c):\n    '''\n    Write a function to find the area of a prism.\n    '''\n    a=a*b*c\n    return a\ndef speed(u,t):\n    '''\n    Write a function to find the speed.\n    '''\n    v=u/t\n    return v\ndef acceleration(u,t):\n    '''\n    Write a function to find the acceleration.\n    '''\n    a=(u-((u*t)**2)/2)/t\n    return a\ndef frequency(a,t):\n    '''\n    Write a function to find the frequency.\n    '''\n    f=1/(2*math.pi*t)*a\n    return f\ndef capacity(w,t):\n    '''\n    Write a function to find the capacity.\n    '''\n    c=w/t\n    return c\ndef energy(w,t):\n    '''\n    Write a function to find the energy.\n    '''\n    e=w*t\n    return e\ndef work(w,t):\n    '''\n    Write a function to find the work.\n    '''\n    w=w*t\n    return w\ndef temperature(a,v):\n    '''\n    Write a function to find the temperature.\n    '''\n    t=(a/v)**0.5\n    return t\ndef pressure(r,a,v):\n    '''\n    Write a function to find the pressure.\n    '''\n    p=r*a/v\n    return p\ndef acceleration_of_free_fall(t,g,m):\n    '''\n    Write a function to find the acceleration of free fall.\n    '''\n    a=g*(1-((2*m)/(3*t)))\n    return a\ndef weight_on_a_planet(m,r):\n    '''\n    Write a function to find the weight on a planet.\n    '''\n    w=(m*5.972*(10**24))/(r**2)\n    return w\ndef work_on_a_planet(m,r,t):\n    '''\n    Write a function to find the work on a planet.\n    '''\n    w=work(m,t)/r\n    return w\ndef torque(m,r):\n    '''\n    Write a function to find the torque.\n    '''\n    t=m*r\n    return t\ndef force(m,r):\n    '''\n    Write a function to find the force.\n    '''\n    f=m*r\n    return f\ndef torque_on_a_planet(t,r):\n    '''\n    Write a function to find the torque on a planet.\n    '''\n    torque=t/(5.972*(10**24)*r**2)\n    return torque\ndef torque_on_a_sphere(t,r):\n    '''\n    Write a function to find the torque on a sphere.\n    '''\n    torque=t/(4*math.pi*r**2)\n    return torque\ndef mass_of_a_planet(m,r):\n    '''\n    Write a function to find the mass of a planet.\n    '''\n    m=r**3*(5.972*(10**24))\n    return m\ndef mass_of_a_sphere(r):\n    '''\n    Write a function to find the mass of a sphere.\n    '''\n    m=4*math.pi*r**3/3\n    return m\ndef force_on_a_sphere(f,r):\n    '''\n    Write a function to find the force on a sphere.\n    '''\n    force=f/r**2\n    return force\ndef force_on_a_planet(f,r):\n    '''\n    Write a function to find the force on a planet.\n    '''\n    force=f/(5.972*(10**24)*r**2)\n    return force\ndef pressure_on_a_sphere(p,r):\n    '''\n    Write a function to find the pressure on a sphere.\n    '''\n    pressure=p*r**(-2)\n    return pressure\ndef pressure_on_a_planet(p,r):\n    '''\n    Write a function to find the pressure on a planet.\n    '''\n    pressure=p/(5.972*(10**24)*r**2)\n    return pressure\ndef energy_on_a_sphere(e,r):\n    '''\n    Write a function to find the energy on a sphere.\n    '''\n    energy=e*r**2\n    return energy\ndef energy_on_a_planet(e,r):\n    '''\n    Write a function to find the energy on a planet.\n    '''\n    energy=e/(5.972*(10**24)*r**2)\n    return energy\ndef power_on_a_sphere(p,r):\n    '''\n    Write a function to find the power on a sphere.\n    '''\n    power=p*r**3\n    return power\ndef power_on_a_planet(p,r):\n    '''\n    Write a function to find the power on a planet.\n    '''\n    power=p/(5.972*(10**24)*r**3)\n    return power\ndef work_on_a_sphere(w,r):\n    '''\n    Write a function to find the work on a sphere.\n    '''\n    work=w*r**2\n    return work\ndef work_on_a_planet(w,r):\n    '''\n    Write a function to find the work on a planet.\n    '''\n    work=w/(5.972*(10**24)*r**2)\n    return work\ndef power_on_a_planet(p,r):\n    '''\n    Write a function to find the power on a planet.\n    '''\n    power=p/(5.972*(10**24)*r**3)\n    return power\ndef specific_impulse(m,v):\n    '''\n    Write a function to find the specific impulse.\n    '''\n    I="
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r * r * h / 3\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi * (r**2)) * (h / 3)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r * r) * (h/3)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # if n is not a power of 2, then the highest power of 2 that is less than n is n // 2\n    if n < 0: \n        n = -n \n    \n    power = 0\n    while n!= 0: \n        n = n // 2\n        power += 1\n        \n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p = p * 2\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highestPower = 0\n    i = 0\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = int(n)\n    for i in range(n+1):\n        if (2**i <= n):\n            return (2**i)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while True:\n        if 2**i <= n:\n            i += 1\n        else:\n            break\n    return i-1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = int(n)\n    if (n < 2):\n        return 0\n    while n > 2:\n        n >>= 1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    for i in range(n):\n        if 2**i >= n:\n            return 2**i\n        \ndef closest_power_of_2(n):\n    '''\n    Write a python function to find the closest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n>=2**31-1:\n        return 2**31-1\n    return 2**int(log(n,2))\n    \ndef closest_power_of_2_bin(n):\n    '''\n    Write a python function to find the closest power of 2 that is less than or equal to n.\n    Input: 10\n    Output: 2\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return n&(-n)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 1\n    while n >= 1:\n        x *= 2\n        n /= 2\n    return x\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while(2**i <= n):\n        i = i + 1\n    return i - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return 0\n    i = 2\n    while i <= n:\n        i = i << 1\n    return i >> 1\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = lambda n: 2*n + 1 if n < 1 else lucas(n-1) + lucas(n-2)\n    return lucas(n) if n > 1 else 2\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return lucas(n-1) + lucas(n-2)\n    \n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return 2 * find_sum_of_squares_of_fibonacci(n) + find_sum_of_squares_of_fibonacci(n-1)\n    \ndef find_sum_of_squares_of_fibonacci(n):\n    '''\n    Write a function to find then'th fibonacci number, where then'th fibonacci number is defined as the sum of the squares of the first n natural numbers.\n    '''\n    return int(((1 + 5 ** 0.5) / 2) ** n - ((1 - 5 ** 0.5) / 2) ** n) / 5 ** 0.5\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return n if n <= 1 else find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not isinstance(list_, list):\n        raise Exception(\"Argument must be a list.\")\n    if not isinstance(string, str):\n        raise Exception(\"Argument must be a string.\")\n    if not list_:\n        return string\n    if len(string)!= len(list_):\n        raise Exception(\"Arguments must be of the same length.\")\n    return string.join(list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(x, string) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string.format(i) for i in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Write a for loop to apply the format string to each element in the list\n    for i in range(len(list_)):\n        list_[i] = format_string(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    i = 0\n    while i < len(list_):\n        print(f'{list_[i]} {string}')\n        i += 1\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = {}\n    for i in range(0, len(l1)):\n        new_dict[l1[i]] = {}\n        for j in range(0, len(l2[i])):\n            new_dict[l1[i]][l2[i][j]] = l3[i][j]\n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    output = {}\n    for i in range(0, len(l1)):\n        output[l1[i]] = {}\n        output[l1[i]][l2[i]] = l3[i]\n    return output\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_list = {}\n    if len(l1) == len(l2) == len(l3):\n        for i in range(len(l1)):\n            dict_list[l1[i]] = {}\n            dict_list[l1[i]][l2[i]] = l3[i]\n    return dict_list\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i in range(len(l1)):\n        if type(l1[i])!= dict:\n            l1[i] = {l2[i]:l3[i]}\n        else:\n            l1[i].update({l2[i]:l3[i]})\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{key: value for key, value in zip(l1, i)} for i in zip(*l2, *l3)]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l1, l3))\n    d3 = {**d1, **d2}\n    return d3\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1, x)) for x in zip(*(l2, l3))]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_list = dict(zip(l1,l2))\n    return dict(zip(new_list,l3))\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2):\n        return \"Length of lists are different!\"\n    \n    dict1 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = l2[i]\n    \n    list_dict = []\n    for i in range(len(l3)):\n        list_dict.append({l3[i]: dict1.get(l3[i])})\n    return list_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)==len(l2) and len(l2)==len(l3):\n        d=dict()\n        for i in range(0,len(l1)):\n            d[l1[i]]=dict()\n            d[l1[i]][l2[i]]=l3[i]\n        return d\n    else:\n        return False\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def max_sum(n):\n        if n == 2 or n == 1:\n            return n\n        return max(max_sum(n/2) + max_sum(n/3) + max_sum(n/4) + max_sum(n/5), n)\n    return max_sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = int(n/2) + int(n/3) + int(n/4) + int(n/5)\n    return max_sum\n    \ndef test_get_max_sum():\n    assert get_max_sum(1) == 1\n    assert get_max_sum(2) == 2\n    assert get_max_sum(3) == 4\n    assert get_max_sum(4) == 6\n    assert get_max_sum(5) == 6\n    assert get_max_sum(6) == 12\n    assert get_max_sum(7) == 14\n    assert get_max_sum(8) == 16\n    assert get_max_sum(9) == 18\n    assert get_max_sum(10) == 18\n    assert get_max_sum(11) == 20\n    assert get_max_sum(12) == 20\n    assert get_max_sum(13) == 22\n    assert get_max_sum(14) == 24\n    assert get_max_sum(15) == 24\n    assert get_max_sum(16) == 24\n    assert get_max_sum(17) == 26\n    assert get_max_sum(18) == 26\n    assert get_max_sum(19) == 26\n    assert get_max_sum(20) == 26\n    assert get_max_sum(21) == 26\n    assert get_max_sum(22) == 26\n    assert get_max_sum(23) == 26\n    assert get_max_sum(24) == 26\n    assert get_max_sum(25) == 26\n    assert get_max_sum(26) == 26\n    assert get_max_sum(27) == 26\n    assert get_max_sum(28) == 26\n    assert get_max_sum(29) == 26\n    assert get_max_sum(30) == 26\n    assert get_max_sum(31) == 26\n    assert get_max_sum(32) == 26\n    assert get_max_sum(33) == 26\n    assert get_max_sum(34) == 26\n    assert get_max_sum(35) == 26\n    assert get_max_sum(36) == 26\n    assert get_max_sum(37) == 26\n    assert get_max_sum(38) == 26\n    assert get_max_sum(39) == 26\n    assert get_max_sum(40) == 26\n    assert get_max_sum(41) == 26\n    assert get_max_sum(42) == 26\n    assert get_max_sum(43) == 26\n    assert get_max_sum(44) == 26\n    assert get_max_sum(45) == 26\n    assert get_max_sum(46) == 26\n    assert get_max_sum(47) == 26\n    assert get_max_sum(48) == 26\n    assert get_max_sum(49) == 26\n    assert get_max_sum(50) == 26\n    assert get_max_sum(51) == 26\n    assert get_max_sum(52) == 26\n    assert get_max_sum(53) == 26\n    assert get_max_sum(54) == 26\n    assert get_max_sum(55) == 26\n    assert get_max_sum(56) == 26\n    assert get_max_sum(57) == 26\n    assert get_max_sum(58) == 26\n    assert get_max_sum(59) == 26\n    assert get_max_sum(60) == 26\n    assert get_max_sum(61) == 26\n    assert get_max_sum(62) == 26\n    assert get_max_sum(61) == 26\n    assert get_max_sum(60) == 26\n    assert get_max_sum(59) == 26\n    assert get_max_sum(58) == 26\n    assert get_max_sum(57) == 26\n    assert get_max_sum(56) == 26\n    assert get_max_sum(55) == 26\n    assert get_max_sum(54) == 26\n    assert get_max_sum(53) == 26\n    assert get_max_sum(52) == 26\n    assert get_max_sum(51) == 26\n    assert get_max_sum(50) == 26\n    assert get_max_sum(49) == 26\n    assert get_max_sum(48) == 26\n    assert get_max_sum(47) == 26\n    assert get_max_sum(46) == 26\n    assert get_max_sum(45) == 26\n    assert get_max_sum(44) == 26\n    assert get_max_sum(43) == 26\n    assert get_max_sum(42) == 26\n    assert get_max_sum(41) == 26\n    assert get_max_sum(40) == 26\n    assert get_max_sum(39) == 26\n    assert get_max_sum(38) == 26\n    assert get_max_sum(37) == 26\n    assert get_max_sum(36) == 26\n    assert get_max_sum(35) == 26\n    assert get_max_sum(34) == 26\n    assert get_max_sum(33) == 26\n    assert get_max_sum(32) == 26\n    assert get_max_sum(31) == 26\n    assert get_max_sum(30) == 26\n    assert get_max_sum(29) == 26\n    assert get_max_sum(28) == 26\n    assert get_max_sum(27) == 26\n    assert get_max_sum(26) == 26\n    assert get_max_sum(25) == 26\n    assert get_max_sum(24) == 26\n    assert get_max_sum(23) == 26\n    assert get_max_sum(22) == 26\n    assert get_max_sum(21) == 26\n    assert get_max_sum(20) == 26\n    assert get_max_sum(19) == 26\n    assert get_max_sum(18) == 26\n    assert get_max_sum(17) == 26\n    assert get_max_sum(16) == 26\n    assert get_max_sum(15) == 26\n    assert get_max_sum(14) == 26\n    assert get_max_sum(13) == 26\n    assert get_max_sum(12) == 26\n    assert get_max_sum(11) == 26\n    assert get_max_sum(10) == 26\n    assert get_max_sum(9) == 26\n    assert get_max_sum(8) == 26\n    assert get_max_sum(7) == 26\n    assert get_max_sum(6) == 26\n    assert get_max_sum(5) == 26\n    assert get_max_sum(4) == 26\n    assert get_max_sum(3) == 26\n    assert get_max_sum(2) == 26\n    assert get_max_sum(1) == 26\n    assert get_max_sum(0) == 26\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def calc_nth(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 5\n        else:\n            if n % 2 == 0:\n                return calc_nth(n/2) + calc_nth(n/2)\n            else:\n                return calc_nth(n/2) + calc_nth(n/3)\n    return calc_nth(n)\n    #return (calc_nth(n/2) + calc_nth(n/3) + calc_nth(n/4) + calc_nth(n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Return 0 if n is less than 0\n    if n < 0:\n        return 0\n    # Return 1 if n is 0\n    elif n == 0:\n        return 1\n    # Return 1 if n is 1\n    elif n == 1:\n        return 1\n    # If n is not 1 or 0 return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n    \n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f (n):\n        if n == 1:\n            return 1\n        else:\n            return max((f(n // 2) + f(n // 3) + f(n // 4) + f(n // 5)), n)\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    else:\n        return max( (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    from functools import lru_cache\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = n\n    while n > 1:\n        if (n / 2) % 1 == 0:\n            max_sum = max(max_sum, (get_sum(n/2) + get_sum(n/3) + get_sum(n/4) + get_sum(n/5)))\n        if (n / 3) % 1 == 0:\n            max_sum = max(max_sum, (get_sum(n/3) + get_sum(n/2) + get_sum(n/6) + get_sum(n/8)))\n        if (n / 4) % 1 == 0:\n            max_sum = max(max_sum, (get_sum(n/4) + get_sum(n/5) + get_sum(n/6) + get_sum(n/9)))\n        if (n / 5) % 1 == 0:\n            max_sum = max(max_sum, (get_sum(n/5) + get_sum(n/6) + get_sum(n/8) + get_sum(n/10)))\n        n -= 1\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Modify the function to modify the sum\n    def f(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return max(1 + f(n//2), f(n))\n        elif n % 3 == 0:\n            return max(1 + f(n//3), f(n))\n        elif n % 5 == 0:\n            return max(1 + f(n//5), f(n))\n        else:\n            return 1 + f(n)\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return max( ((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n) )\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for sublist in input_list:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            longest = sublist\n    return longest\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return [len(i) for i in input_list].index(max([len(i) for i in input_list]))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    length = len(input_list)\n    for i in input_list:\n        if len(i) == length:\n            length_list.append(i)\n    return length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #list_len = [len(i) for i in input_list]\n    list_len = []\n    for i in input_list:\n        list_len.append(len(i))\n    return list_len\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    output_list = []\n    for i in range(len(input_list)):\n        temp_list = input_list[i]\n        if len(temp_list) > max_length:\n            max_length = len(temp_list)\n            output_list = temp_list\n    return output_list\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for elem in test_tup:\n        if test_tup.count(elem) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    test_set = set(test_list)\n    return test_set == test_list\n    \ndef check_distinct_in_list(test_list):\n    '''\n    Write a function to check if given list contains no duplicates.\n    '''\n    test_set = set(test_list)\n    return test_set == test_list\n    \n    "
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:] and str1[i] not in str1[:i]:\n            return str1[i]\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code here\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in str1:\n        if count[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str2 = ''.join(set(str1))\n    for i in range(len(str2)):\n        if str2[i] in str1:\n            pass\n        else:\n            return str2[i]\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.index(char) == str1.rindex(char):\n            return char\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    alphabet_occurrence_mapper = {}\n    for char in str1:\n        if char not in alphabet_occurrence_mapper:\n            alphabet_occurrence_mapper[char] = 0\n        alphabet_occurrence_mapper[char] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # write your code here.\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_lower = str1.lower()\n    str_dict = dict()\n    for i in str_lower:\n        if i in str_dict:\n            str_dict[i] += 1\n        else:\n            str_dict[i] = 1\n    for i in str_dict:\n        if str_dict[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_repeated = ''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            non_repeated = str1[i]\n            break\n    return non_repeated\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = dict()\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    print(freq)\n    for i in str1:\n        if freq[i] == 1:\n            return i\n    return '_'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) >= 1: \n        if string[0] == string[-1]: \n            print(f\"The string {string} is valid\")\n        else: \n            print(f\"The string {string} is invalid\")\n    else: \n        print(f\"The string {string} is invalid\")\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0] == string[-1]):\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string)) \ndef check_char2(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    return False \ndef check_char3(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char4(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char5(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char6(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char7(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char8(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char9(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char10(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char11(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char12(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char13(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char14(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char15(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char16(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char17(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char18(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char19(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char20(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char21(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char22(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char23(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char24(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char25(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char26(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char27(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char28(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char29(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char30(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char31(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char32(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char33(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char34(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char35(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char36(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char37(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char38(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char39(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or no"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[len(string)-1]: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    return False\ndef check_char_b(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_str(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    if len(re.findall(r'a',string)) == 3:\n        return True\n    return False\ndef check_str_b(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return len(re.findall(r'a',string)) == 3\ndef check_str_c(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return string.count('a') == 3\ndef check_str_d(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return \"a\"*3 in string\ndef check_str_e(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return \"a\" in string and \"a\"*3 not in string\ndef check_str_f(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return \"aaa\" in string\ndef check_str_g(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return \"b\" not in string\ndef check_str_h(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string) == []\ndef check_str_i(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{2,}',string)!= []\ndef check_str_j(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{2,}',string) == []\ndef check_str_k(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{2,}',string)[0]!= re.findall(r'a{2,}',string)[0][::-1]\ndef check_str_l(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{2,}',string)!= []\ndef check_str_m(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{2,}',string)[0]!= re.findall(r'a{2,}',string)[0][::-1]\ndef check_str_n(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{2,}',string) == []\ndef check_str_o(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string)!= []\ndef check_str_p(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string) == []\ndef check_str_q(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string)[0]!= re.findall(r'a{3,}',string)[0][::-1]\ndef check_str_r(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string) == []\ndef check_str_s(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string)!= []\ndef check_str_t(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string) == []\ndef check_str_u(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string)!= []\ndef check_str_v(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string) == []\ndef check_str_w(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string)!= []\ndef check_str_x(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string)[0]!= re.findall(r'a{3,}',string)[0][::-1]\ndef check_str_y(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string)!= []\ndef check_str_z(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string)!= []\ndef check_str_aa(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string) == []\ndef check_str_ab(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string) == []\ndef check_str_ac(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of \u201ca\u201d.\n    '''\n    return re.findall(r'a{3,}',string) == []\ndef check_str_ad(string): \n    '''\n    Write a function to check whether the given string has exactly three occurences of "
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # if not re.match(regex, string):\n    #     print(string)\n    #     return False\n    # print(re.match(regex, string))\n    # print(string)\n    # print(re.match(regex, string))\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n    \n    \n    "
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string)==0 or len(string)==1:\n        return False\n    elif len(string)==2:\n        if string[0]==string[1]:\n            return True\n        else:\n            return False\n    else:\n        if string[0]==string[-1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    elif a > c:\n        return a\n    elif b > c:\n        return c\n    else:\n        return b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst = [a,b,c]\n    lst.sort()\n    if len(lst) == 3:\n        return (lst[1])\n    else:\n        return None\nprint(median_numbers(1,2,3))\nprint(median_numbers(10,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,3))\nprint"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif c < b:\n            return b\n        else:\n            return c\n    elif a < c:\n        if b < c:\n            return b\n        elif c < b:\n            return b\n        else:\n            return c\n    else:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_sorted = sorted([a,b,c])\n    median = (a_sorted[1] + a_sorted[2])/2\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    if nums[1] == nums[0] == nums[2]:\n        return 'All numbers are equal'\n    elif nums[1] == nums[0] or nums[1] == nums[2]:\n        return nums[1]\n    else:\n        return nums[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median_numbers = a,b,c\n    median_numbers.sort()\n    if len(median_numbers) == 3:\n        print('The median of three numbers is',median_numbers[1])\n    elif len(median_numbers) == 4:\n        print('The median of three numbers is',median_numbers[2])\n    else:\n        print('You can not find the median of three numbers.')\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a, b, c = sorted([a, b, c])\n    return a if a == b else b if (a < b < c) else c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if(a > b):\n        if(a > c):\n            if(b > c):\n                return c\n            else:\n                return b\n    else:\n        if(b > c):\n            if(a > c):\n                return c\n            else:\n                return a\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += sum([int(i) for i in str(num)])\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # define sum_of_digits\n    def sum_of_digits(nums):\n        result = 0\n        for x in nums:\n            result += x\n        return result\n    # test sum_of_digits\n    test_1 = [12, 45, 56, 67]\n    test_2 = [12, \"45\", 56, \"67\"]\n    test_3 = [12, \"45\", 56, \"67\"]\n    print(\"sum_of_digits(test_1) =\", sum_of_digits(test_1))\n    print(\"sum_of_digits(test_2) =\", sum_of_digits(test_2))\n    print(\"sum_of_digits(test_3) =\", sum_of_digits(test_3))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_of_digits_helper(num):\n        if num == 0:\n            return 0\n        return num % 10 + sum_of_digits_helper(num // 10)\n    return reduce(lambda x,y: x+y, map(sum_of_digits_helper, nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(list(map(lambda x: int(x), list(str(nums)))))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        for digit in str(num):\n            sum += int(digit)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        sum_digits += sum([int(i) for i in str(num)])\n    return sum_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    return sum([int(x) for x in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(char) for char in str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(map(int, str(num)))\n    return total\n    \nif __name__ == '__main__':\n    print(sum_of_digits(nums=[25, 123, 45, 676, 7896, 83, 25, 56, 789, 10]))\n    print(sum_of_digits(nums=[25, 123, 45, 676, 7896, 83, 25, 56, 789, 10]))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x ^ y for x, y in zip(test_tup1, test_tup2)])\n    \n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i, j in zip(test_tup1, test_tup2):\n        result.append(i^j)\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return test_tup1[0] ^ test_tup2[0]\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([test_tup1[i]^test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return [x ^ y for x, y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x ^ y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_freq = list(set(test_list))\n    return unique_freq\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count_set = set()\n    for tup in test_list:\n        count_set.add(tup)\n    return len(count_set)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dictionary = {}\n    for item in test_list:\n        if item not in dictionary:\n            dictionary[item] = 1\n        else:\n            dictionary[item] += 1\n    return dictionary\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    print('Extract the number of unique tuples in the given list.')\n    test_list = [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]\n    print(f'List = {test_list}')\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(sorted(sub_list)) for sub_list in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # print(\"Entered Function\")\n    # print(test_list)\n    # print(\"Length of list is: \", len(test_list))\n    count_tuple = 0\n    for i in test_list:\n        if type(i) == tuple:\n            count_tuple = count_tuple + 1\n    return count_tuple\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    return len(set(map(tuple, test_list)))\n    \ndef extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    return len(set(tuple(i) for i in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = set(test_list)\n    print(len(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += (test_tup1[i] + test_tup2[i],)\n    return test_tup3\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            result += (test_tup1[i] + test_tup2[i],)\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        res_tup = res_tup + (test_tup1[i] + test_tup2[i], )\n    return res_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([sum(x) for x in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Place code here\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1_lst = test_tup1[0]\n    test_tup2_lst = test_tup2[0]\n    result = ()\n    for i in range(len(test_tup1_lst)):\n        res = (test_tup1_lst[i] + test_tup2_lst[i],)\n        result = result + res\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    output = []\n    for index in range(len(test_tup1)):\n        try:\n            output.append(test_tup1[index] + test_tup2[index])\n        except IndexError:\n            output.append(test_tup1[index])\n    return tuple(output)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] + test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([x+y for x,y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    output_tup = ()\n    for i in range(len(test_tup1)):\n        output_tup = output_tup + (test_tup1[i] + test_tup2[i],)\n    return output_tup\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(input(\"Enter first number: \"))\n    b=int(input(\"Enter second number: \"))\n    if a<b:\n        print(a)\n    else:\n        print(b)\nminimum(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    return a\n    \n    "
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef minimum(*args):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if len(args) == 0:\n        return 0\n    if len(args) == 1:\n        return args[0]\n    if len(args) > 1:\n        return minimum(args[0],minimum(*args[1:]))\ndef maximum(*args):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if len(args) == 0:\n        return 0\n    if len(args) == 1:\n        return args[0]\n    if len(args) > 1:\n        return maximum(args[0],maximum(*args[1:]))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return(a if (a < b) else b)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a < b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return any(item in tuplex for item in tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check=0\n    for i in tuplex:\n        if i==tuple1:\n            check=1\n    if check==1:\n        return True\n    else:\n        return False\ndef check_index(tuplex,num): \n    '''\n    Write a function to check if a tuple contains a specific index.\n    '''\n    for i in range(0,len(tuplex)):\n        if i==num:\n            return True\n    return False\ndef get_index(tuplex,index): \n    '''\n    Write a function to return a specific element within a tuple.\n    '''\n    return tuplex[index]\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        for x in tuplex:\n            if x in tuplex:\n                return True\n    else:\n        return False\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        return bool(tuplex in tuple1)\n    else:\n        return False\n        \ndef check_tuplex_multiple(tuplex,tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        return bool(tuplex in tuple1)\n    elif tuple2:\n        return bool(tuplex in tuple2)\n    else:\n        return False\n        \ndef check_tuplex_or_not(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        return bool(tuplex in tuple1)\n    else:\n        return False\n        \ndef check_tuplex_or_not_multiple(tuplex,tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        return bool(tuplex in tuple1)\n    elif tuple2:\n        return bool(tuplex in tuple2)\n    else:\n        return False\n        \ndef check_tuplex_none(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 is None:\n        return False\n    else:\n        return bool(tuplex in tuple1)\n        \ndef check_tuplex_none_multiple(tuplex,tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 is None:\n        return False\n    elif tuple2 is None:\n        return False\n    else:\n        return bool(tuplex in tuple1) or bool(tuplex in tuple2)\n        \ndef check_tuplex_none_or_not(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 is None:\n        return False\n    else:\n        return bool(tuplex in tuple1)\n        \ndef check_tuplex_none_or_not_multiple(tuplex,tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 is None:\n        return False\n    elif tuple2 is None:\n        return False\n    else:\n        return bool(tuplex in tuple1) or bool(tuplex in tuple2)\n        \ndef check_tuplex_value(tuplex,tuple1,value): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        return value in tuple1\n    else:\n        return False\n        \ndef check_tuplex_value_multiple(tuplex,tuple1,tuple2,value): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        return value in tuple1\n    elif tuple2:\n        return value in tuple2\n    else:\n        return False\n        \ndef check_tuplex_value_or_not(tuplex,tuple1,value): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        return value in tuple1\n    else:\n        return False\n        \ndef check_tuplex_value_or_not_multiple(tuplex,tuple1,tuple2,value): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        return value in tuple1\n    elif tuple2:\n        return value in tuple2\n    else:\n        return False\n        \ndef check_tuplex_value_or_not_none(tuplex,tuple1,value): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 is None:\n        return False\n    else:\n        return value in tuple1\n        \ndef check_tuplex_value_or_not_none_multiple(tuplex,tuple1,tuple2,value): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 is None:\n        return False\n    elif tuple2 is None:\n        return False\n    else:\n        return value in tuple1 or value in tuple2\n        \ndef check_tuple_contain(tuple1,tuple2): \n    '''\n    Write a function to check whether a tuple exists within another tuple.\n    '''\n    if tuple1:\n        return bool(tuple2 in tuple1)\n    else:\n        return False\n        \ndef check_tuple_contain_multiple(tuple1,tuple2,tuple3): \n    '''\n    Write a function to check whether a tuple exists within another tuple.\n    '''\n    if tuple1:\n        return bool(tuple2 in tuple1)\n    elif tuple3:\n        return bool(tuple2 in tuple3)\n    else:\n        return False\n        \ndef check_tuple_contain_or_not(tuple1,tuple2): \n    '''\n    Write a function to check whether a tuple exists within another tuple.\n    '''\n    if tuple1:\n        return bool(tuple2 in tuple1)\n    else:\n        return False\n        \ndef check_tuple_contain_or_not_multiple(tuple1,tuple2,tuple3): \n    '''\n    Write a function to check whether a tuple exists within another tuple.\n    '''\n    if tuple1:\n        return bool(tuple2 in tuple1)\n    elif tuple3:\n        return bool(tuple2 in tuple3)\n    else:\n        return False\n        \ndef check_tuple_contain_none(tuple1,tuple2): \n    '''\n    Write a function to check whether a tuple exists within another tuple.\n    '''\n    if tuple1 is None:\n        return False\n    else:\n        return bool(tuple2 in tuple1)\n        \ndef check_tuple_contain_none_multiple(tuple1,tuple2,tuple3): \n    '''\n    Write a function to check whether a tuple exists within another tuple.\n    '''\n    if tuple1 is None:\n        return False\n    elif tuple3 is None:\n        return False\n    else:\n        return bool(tuple2 in tuple1) or bool(tuple2 in tuple3)\n        \ndef check_tuple_contain_none_or_not(tuple1,tuple2): \n    '''\n    Write a function to check whether a tuple exists within another tuple.\n    '''\n    if tuple1 is None:\n        return False\n    else:\n        return bool(tuple2 in tuple1)\n        \ndef check_tuple_contain_none_or_not_multiple(tuple1,tuple2,tuple3): \n    '''\n    Write a function to check whether a tuple exists within another tuple.\n    '''\n    if tuple1 is None:\n        return False\n    elif tuple3 is None:\n        return False\n    else:\n        return bool(tuple2 in tuple1) or bool(tuple2 in tuple3)\n        \ndef check_tuple_contain_value(tuple1,tuple2,value): \n    '''\n    Write a function to check whether a tuple exists within another tuple.\n    '''\n    if tuple1:\n        return value in tuple1\n    else:\n        return False\n        \ndef check_tuple_contain_value_multiple(tuple1,tuple2,tuple3,value): \n    '''\n    Write a function to check whether a tuple exists within another tuple.\n    '''\n    if tuple1:\n        return value in tuple1\n    elif tuple3:\n        return value in tuple3\n    else:\n        return False\n        \ndef check_tuple_contain_value_or_not("
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\ntuplex = (1,2,3,4,5,6,7,8,9,0)\ntuple1 = (1,2,3)\ntuple2 = (1,2,3,4)\nprint(check_tuplex(tuplex,tuple1))\nprint(check_tuplex(tuplex,tuple2))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple_set = set(tuple1) #converts to set to make unique\n    check_set = set(tuplex) #converts to set to make unique\n    print(check_set.issubset(tuple_set))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuplex)): \n        if tuplex[i] == tuple1: \n            return True \n    return False \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = x ^ (x >> 16) \n    x = x ^ (x >> 8) \n    x = x ^ (x >> 4) \n    x = x ^ (x >> 2) \n    x = x ^ (x >> 1) \n    return x & 0x1\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    even = 0\n    for i in range(len(x)):\n        if(x[i] == '0'):\n            even += 1\n        if(x[i] == '1'):\n            odd += 1\n    if((odd - even) % 2 == 0):\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\ndef find_Parity_2(x): \n    '''\n    Write a python function to find whether the parity of a given number is even.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\ndef find_Parity_3(x): \n    '''\n    Write a python function to find whether the parity of a given number is even or odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'odd' if x % 2!= 0 else 'even'\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) == 0\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if is_simple(n):\n        return ''.join(sorted(n, reverse = True))\n    else:\n        n = str(n)\n        l = len(n)\n        new = []\n        for i in range(l):\n            if i == 0:\n                new.append(str(int(n[i]) + 1))\n            elif i == l - 1:\n                new.append(str(int(n[i]) - 1))\n            else:\n                new.append(str(max(int(n[i]), int(n[i + 1]))))\n        return int(''.join(new))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    new_n = ''\n    prev = 0\n    for digit in range(len(n)-1,-1,-1):\n        digit_val = int(n[digit])\n        if digit_val < prev:\n            prev = digit_val\n            digit_val = prev\n        new_n = str(digit_val) + new_n\n        prev = digit_val\n    return int(new_n)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    result = ''\n    l = len(num)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_list = [int(i) for i in str(n)]\n    if len(num_list) == 1:\n        return num_list\n    else:\n        for i in range(len(num_list) - 1):\n            if num_list[i] < num_list[i + 1]:\n                break\n        num_list[i], num_list[i + 1] = num_list[i + 1], num_list[i]\n        num_list.sort()\n        return num_list\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    x = str(n)\n    for i in range(len(x)):\n        if int(x[i]) > int(x[i+1]):\n            x = x[:i] + x[i+1] + x[i] + x[i+2:]\n            break\n    return int(x)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    list_of_digits = [int(digit) for digit in str(n)]\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    list_of_nums = list(str(n))\n    list_of_nums.sort(reverse=True)\n    print(list_of_nums)\n    new_list = list_of_nums.copy()\n    new_list.insert(0, 0)\n    if new_list == list_of_nums:\n        return 'no bigger number'\n    else:\n        for i in range(len(new_list)):\n            if new_list[i] == 9:\n                new_list[i] = 0\n                new_list[i+1] += 1\n                return int(''.join(map(str,new_list)))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    number = list(str(n))\n    if number[-1] == '9':\n        for i in range(len(number)-1, 0, -1):\n            if number[i] < '9':\n                number[i], number[i-1] = number[i-1], number[i]\n                break\n    else:\n        for i in range(len(number)-1, 0, -1):\n            if number[i] < '9':\n                number[i], number[i-1] = number[i-1], number[i]\n                break\n    number = int(''.join(number))\n    return number\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < 2 or len(nums2) < 2:\n        return []\n    if len(nums1) == 2 and len(nums2) == 2:\n        if nums1[0] <= nums2[0] and nums1[1] <= nums2[1]:\n            return [nums1[0], nums1[1], nums2[0], nums2[1]]\n        elif nums1[0] >= nums2[0] and nums1[1] >= nums2[1]:\n            return [nums2[0], nums2[1], nums1[0], nums1[1]]\n    \n    pairs = []\n    if nums1[0] > nums2[0]:\n        nums1, nums2 = nums2, nums1\n    \n    heap = []\n    for i, num in enumerate(nums1):\n        heapq.heappush(heap, (num, i))\n    for _ in range(k):\n        if len(heap) == 0:\n            break\n        num1, i1 = heapq.heappop(heap)\n        if i1 + 1 < len(nums2):\n            heapq.heappush(heap, (nums2[i1 + 1], i1 + 1))\n        if i1 + 1 < len(nums2) and len(heap) < k:\n            num2, i2 = heapq.heappop(heap)\n            if num1 + num2 < nums2[i1 + 1] + nums2[i2]:\n                pairs.append((num1, num2))\n            heapq.heappush(heap, (nums2[i1 + 1] + nums2[i2], i1 + 1))\n    \n    return [nums1[pair[0]], nums2[pair[1]] for pair in pairs]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    result = []\n    heap = []\n    for i in range(min(len(nums1), len(nums2))):\n        heapq.heappush(heap, (nums1[i] + nums2[i], i, nums1[i], nums2[i]))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n            else:\n                if nums1[i]+nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n    pairs = []\n    while heap:\n        pairs.append([nums1[heap[0][1]], nums2[heap[0][2]]])\n        heapq.heappop(heap)\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    for item in nums1:\n        if len(result) < k:\n            heapq.heappush(result, (-item, item))\n        else:\n            if result[0][1] > item:\n                heapq.heappushpop(result, (-item, item))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for x, y in zip(nums1, nums2):\n        heapq.heappush(heap, (-(x+y), x, y))\n    return [heapq.heappop(heap)[1:] for _ in range(k)]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 == None or nums2 == None or k < 0 or len(nums1) < 1 or len(nums2) < 1:\n        return []\n    count = 0\n    output = []\n    num1 = -1\n    num2 = -1\n    while True:\n        if num1 < nums1[0] and num2 < nums2[0]:\n            count += 1\n            if count < k:\n                output.append([num1, num2])\n            else:\n                heapq.heappush(output, [num1, num2])\n                count -= 1\n                heapq.heappop(output)\n            if num1 == nums1[0]:\n                num1 += 1\n                heapq.heappop(nums1)\n                if nums1 == []:\n                    break\n            else:\n                num2 += 1\n                heapq.heappop(nums2)\n                if nums2 == []:\n                    break\n        elif num1 < nums1[0] and num2 == nums2[0]:\n            count += 1\n            if count < k:\n                output.append([num1, num2])\n            else:\n                heapq.heappush(output, [num1, num2])\n            num1 += 1\n            if num1 == nums1[0]:\n                num1 += 1\n                heapq.heappop(nums1)\n                if nums1 == []:\n                    break\n            else:\n                heapq.heappop(nums2)\n                if nums2 == []:\n                    break\n        elif num1 == nums1[0] and num2 < nums2[0]:\n            count += 1\n            if count < k:\n                output.append([num1, num2])\n            else:\n                heapq.heappush(output, [num1, num2])\n            num2 += 1\n            if num2 == nums2[0]:\n                num2 += 1\n                heapq.heappop(nums2)\n                if nums2 == []:\n                    break\n            else:\n                heapq.heappop(nums1)\n                if nums1 == []:\n                    break\n    return output\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return None\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return []\n    if len(nums1) == 1 or len(nums2) == 1: return sorted(map(lambda x, y: [x, y], nums1, nums2))[:k]\n    pq = []\n    for n in nums1:\n        for m in nums2:\n            if len(pq) < k:\n                heapq.heappush(pq, (-n - m, n, m))\n            elif n + m < -pq[0][0]:\n                heapq.heappushpop(pq, (-n - m, n, m))\n    return sorted([(n1, n2) for _, n1, n2 in pq])\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #print(list1)\n    list_result = []\n    for item in list1:\n        result = item[0]*item[1]\n        list_result.append(result)\n    return min(list_result)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = None\n    for item in list1:\n        if min_prod is None or min_prod[1] > item[1]:\n            min_prod = item\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # brute force approach:\n    # min_product = list1[0][0]*list1[0][1]\n    # for tup in list1:\n    #     if tup[0]*tup[1]<min_product:\n    #         min_product = tup[0]*tup[1]\n    # return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i][0] * list1[i][1])\n    return min(list2)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pairs = []\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            pairs.append((list1[i], list1[j]))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    try:\n        minimum = list1[0][0] * list1[0][1]\n        for element in list1:\n            if element[0] * element[1] < minimum:\n                minimum = element[0] * element[1]\n        return minimum\n    except IndexError:\n        return \"Enter at least one tuple.\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    def get_min(tup1,tup2):\n        tup1_len = len(tup1)\n        tup2_len = len(tup2)\n        if tup1_len == tup2_len:\n            return tup1 if tup1[0]*tup1[1] < tup2[0]*tup2[1] else tup2\n        elif tup1_len > tup2_len:\n            return tup1\n        return tup2\n    list2 = []\n    for i in range(0,len(list1),2):\n        for j in range(i+1,len(list1),2):\n            tup1 = list1[i]\n            tup2 = list1[j]\n            if tup1!= tup2:\n                list2.append(get_min(tup1,tup2))\n    print(list2)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = None\n    for element in list1:\n        if not min_prod:\n            min_prod = element\n        else:\n            if element[0]*element[1] < min_prod[0]*min_prod[1]:\n                min_prod = element\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #take input as a list of tuples\n    #if there is no element in the list return \"No Pairs\"\n    #else find the minimum product\n    tuple_list = list1\n    if len(tuple_list) == 0:\n        return \"No Pairs\"\n    else:\n        list1 = []\n        for i in range(0, len(tuple_list)):\n            tup_1 = tuple_list[i]\n            list1.append(tup_1[0]*tup_1[1])\n        #print(list1)\n        return min(list1)\nprint(min_product_tuple([(1, 2), (3, 3), (4, 7), (2, 3), (5, 4), (1, 1), (0, 1)]))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    smallest = list1[0][0]*list1[0][1]\n    for item in list1:\n        if item[0]*item[1] < smallest:\n            smallest = item[0]*item[1]\n    return smallest\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #print(min(listval))\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\nprint(min_val(listval))"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Your code here\n    minval = listval[0]\n    for x in listval:\n        if x < minval:\n            minval = x\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for i in listval:\n            if i < min_val:\n                min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    lst = listval\n    min = lst[0]\n    for i in range(0,len(lst)):\n        if (lst[i] < min):\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result > listval[i]):\n            result = listval[i]\n    return result\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result < listval[i]):\n            result = listval[i]\n    return result\n    \ndef min_index(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result > listval[i]):\n            result = listval[i]\n    return i\n    \ndef max_index(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result < listval[i]):\n            result = listval[i]\n    return i\n    \ndef min_elem(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result > listval[i]):\n            result = listval[i]\n    return result\n    \ndef max_elem(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result < listval[i]):\n            result = listval[i]\n    return result\n    \ndef min_elem_index(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result > listval[i]):\n            result = listval[i]\n    return i\n    \ndef max_elem_index(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result < listval[i]):\n            result = listval[i]\n    return i\n    \ndef min_elem_list(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result > listval[i]):\n            result = listval[i]\n    return result\n    \ndef max_elem_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result < listval[i]):\n            result = listval[i]\n    return result\n    \ndef min_index_list(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result > listval[i]):\n            result = listval[i]\n    return i\n    \ndef max_index_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result < listval[i]):\n            result = listval[i]\n    return i\n    \ndef min_elem_list_index(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result > listval[i]):\n            result = listval[i]\n    return i\n    \ndef max_elem_list_index(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result < listval[i]):\n            result = listval[i]\n    return i\n    \ndef min_elem_list_list(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result > listval[i]):\n            result = listval[i]\n    return result\n    \ndef max_elem_list_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result < listval[i]):\n            result = listval[i]\n    return result\n    \ndef min_index_list_index(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result > listval[i]):\n            result = listval[i]\n    return i\n    \ndef max_index_list_index(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result < listval[i]):\n            result = listval[i]\n    return i\n    \ndef min_elem_list_list_index(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result > listval[i]):\n            result = listval[i]\n    return i\n    \ndef max_elem_list_list_index(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result < listval[i]):\n            result = listval[i]\n    return i\n    \ndef min_elem_list_list_list(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result > listval[i]):\n            result = listval[i]\n    return result\n    \ndef max_elem_list_list_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(0, len(listval)):\n        if (result < listval[i]):\n            result = listval[i]\n    return result\n    \ndef list_count_list_list(listval):\n    '''\n    Write a function to count the number of elements in a given heterogeneous list.\n    '''\n    result = 0\n    for i in range(0, len(listval)):\n        result += len(listval[i])\n    return result\n    \ndef list_count_elem(listval):\n    '''\n    Write a function to count the number of elements in "
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    elif len(listval) == 0:\n        return None\n    else:\n        list_len = len(listval)\n        for i in range(list_len):\n            if type(listval[i]) == list:\n                listval[i] = min_val(listval[i])\n        if type(listval[0]) == list:\n            return min_val(listval)\n        else:\n            return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    minval=listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minval:\n            minval=listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return \"ValueError\"\n    if listval == [None]:\n        return \"ValueError\"\n    elif type(listval[0]) is list:\n        if len(listval[0]) == 0:\n            return \"ValueError\"\n        else:\n            return min_val(listval[0])\n    else:\n        return min(listval)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    import re\n    #First split the words and create a list of each word\n    words = re.findall(r'[A-Z][^A-Z]*',word)\n    #Then join them with a space between them and convert to camel case\n    return ''.join(i.capitalize() for i in words)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return ''.join(x.capitalize() for x in re.split('(?!^)([A-Z][a-z]*)', word))\n    \ndef snake_to_pascal(word):\n    '''\n    Write a function to convert the given snake case string to pascal case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef pascal_to_snake(word):\n    '''\n    Write a function to convert the given pascal case string to snake case string.\n    '''\n    return '_'.join(x.lower() for x in word.split('_'))\n    \ndef snake_to_kebab(word):\n    '''\n    Write a function to convert the given snake case string to kebab case string.\n    '''\n    return '-'.join(x.lower() for x in word.split('_'))\n    \ndef kebab_to_snake(word):\n    '''\n    Write a function to convert the given kebab case string to snake case string.\n    '''\n    return '_'.join(x.lower() for x in word.split('-'))\n    \ndef snake_to_title(word):\n    '''\n    Write a function to convert the given snake case string to title case string.\n    '''\n    return''.join(x.capitalize() for x in word.split('_'))\n    \ndef title_to_snake(word):\n    '''\n    Write a function to convert the given title case string to snake case string.\n    '''\n    return '_'.join(x.lower() for x in word.split(' '))\n    \ndef snake_to_sentence(word):\n    '''\n    Write a function to convert the given snake case string to sentence case string.\n    '''\n    return''.join(x.capitalize() for x in word.split('_'))\n    \ndef sentence_to_snake(word):\n    '''\n    Write a function to convert the given sentence case string to snake case string.\n    '''\n    return '_'.join(x.lower() for x in word.split(' '))\n    \ndef snake_to_kebab_sentence(word):\n    '''\n    Write a function to convert the given snake case string to kebab case sentence string.\n    '''\n    return '-'.join(x.capitalize() for x in word.split('_'))\n    \ndef kebab_to_snake_sentence(word):\n    '''\n    Write a function to convert the given kebab case string to snake case sentence string.\n    '''\n    return '_'.join(x.lower() for x in word.split('-'))\n    \ndef snake_to_pascal_sentence(word):\n    '''\n    Write a function to convert the given snake case string to pascal case sentence string.\n    '''\n    return''.join(x.capitalize() for x in word.split('_'))\n    \ndef pascal_to_snake_sentence(word):\n    '''\n    Write a function to convert the given pascal case string to snake case sentence string.\n    '''\n    return '_'.join(x.lower() for x in word.split(' '))\n    \ndef snake_to_title_sentence(word):\n    '''\n    Write a function to convert the given snake case string to title case sentence string.\n    '''\n    return''.join(x.capitalize() for x in word.split('_'))\n    \ndef title_to_snake_sentence(word):\n    '''\n    Write a function to convert the given title case string to snake case sentence string.\n    '''\n    return '_'.join(x.lower() for x in word.split(' '))\n    \ndef snake_to_all(word):\n    '''\n    Write a function to convert the given snake case string to all cases string.\n    '''\n    return {\n        'snake': word,\n        'camel': word,\n        'pascal': word,\n        'snake_sentence': snake_to_sentence(word),\n        'camel_sentence': snake_to_sentence(camel_to_snake(word)),\n        'pascal_sentence': snake_to_sentence(pascal_to_snake(word)),\n        'snake_kebab_sentence': snake_to_kebab_sentence(word),\n        'kebab_sentence': snake_to_kebab_sentence(kebab_to_snake(word)),\n        'snake_title': snake_to_title(word),\n        'title': snake_to_title(snake_to_title(word)),\n        'snake_pascal': snake_to_pascal(word),\n        'pascal': snake_to_pascal(snake_to_pascal(word)),\n        'snake_title_sentence': snake_to_title_sentence(word),\n        'title_sentence': snake_to_title_sentence(snake_to_title_sentence(word)),\n        'snake_pascal_sentence': snake_to_pascal_sentence(word),\n        'pascal_sentence': snake_to_pascal_sentence(snake_to_pascal_sentence(word)),\n        'snake_title_to_sentence': snake_to_title_sentence(word),\n        'title_to_sentence': snake_to_title_sentence(snake_to_title_sentence(word))\n    }.get(snake_to_all(word))\n    \ndef camel_to_all(word):\n    '''\n    Write a function to convert the given camel case string to all cases string.\n    '''\n    return {\n        'camel': word,\n        'camel_sentence': word,\n        'kebab_sentence': word,\n        'camel_kebab': camel_to_kebab(word),\n        'kebab': camel_to_kebab(word),\n        'camel_title': camel_to_title(word),\n        'title': camel_to_title(camel_to_title(word)),\n        'camel_pascal': camel_to_pascal(word),\n        'pascal': camel_to_pascal(camel_to_pascal(word)),\n        'camel_snake': camel_to_snake(word),\n        'snake': camel_to_snake(camel_to_snake(word)),\n        'camel_snake_sentence': camel_to_snake_sentence(word),\n        'snake_sentence': camel_to_snake_sentence(camel_to_snake_sentence(word)),\n        'camel_kebab_sentence': camel_to_kebab_sentence(word),\n        'kebab_sentence': camel_to_kebab_sentence(camel_to_kebab_sentence(word)),\n        'camel_title_sentence': camel_to_title_sentence(word),\n        'title_sentence': camel_to_title_sentence(camel_to_title_sentence(word))\n    }.get(camel_to_all(word))\n    \ndef pascal_to_all(word):\n    '''\n    Write a function to convert the given pascal case string to all cases string.\n    '''\n    return {\n        'pascal': word,\n        'pascal_sentence': word,\n        'kebab_sentence': word,\n        'pascal_kebab': pascal_to_kebab(word),\n        'kebab': pascal_to_kebab(word),\n        'pascal_title': pascal_to_title(word),\n        'title': pascal_to_title(pascal_to_title(word)),\n        'pascal_snake': pascal_to_snake(word),\n        'snake': pasca"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.islower():\n        return word\n    else:\n        words = []\n        words.append(word[0].upper())\n        for i in range(1, len(word)):\n            if word[i]!= \"_\":\n                words.append(word[i])\n            else:\n                words.append(\"_\")\n        return \"\".join(words)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = word.title()\n    camel_case = re.sub('_','',camel_case)\n    print(camel_case)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    split_word = word.split(\"_\")\n    camel_case_word = \"\"\n    for item in split_word:\n        if item!= split_word[0]:\n            camel_case_word += item.capitalize()\n        else:\n            camel_case_word += item.lower()\n    return camel_case_word\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    splitted_word = re.findall('[A-Z][^A-Z]*', word)\n    return \"\".join([\n        i.capitalize() if i else i \n        for i in splitted_word\n    ])\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    res = []\n    tmp = word.split('_')\n    for i in tmp:\n        if i == tmp[0]:\n            res.append(i)\n        else:\n            res.append(i.capitalize())\n    return ''.join(res)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title().replace('_','')\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # snake_to_camel('low_level_messaging') == 'lowLevelMessaging'\n    # snake_to_camel('number_one') == 'NumberOne'\n    # snake_to_camel('num_one') == 'NumOne'\n    # snake_to_camel('num_one_') == 'NumOne'\n    # snake_to_camel('_') == ''\n    # snake_to_camel('') == ''\n    # snake_to_camel('A-z') == 'A-z'\n    # snake_to_camel('a-z') == 'a-z'\n    # snake_to_camel('A-Z') == 'A-Z'\n    # snake_to_camel('a-z') == 'a-z'\n    # snake_to_camel('a_z') == 'a_z'\n    # snake_to_camel('_z') == ''\n    # snake_to_camel('z') == 'z'\n    # snake_to_camel('_') == ''\n    # snake_to_camel('-') == ''\n    # snake_to_camel('-_') == ''\n    # snake_to_camel('-') == ''\n    # snake_to_camel('_-') == ''\n    # snake_to_camel('__') == ''\n    # snake_to_camel('_.') == ''\n    # snake_to_camel('__.') == ''\n    # snake_to_camel('__..') == ''\n    # snake_to_camel('__.._') == ''\n    # snake_to_camel('__..__') == ''\n    # snake_to_camel('__..__.') == ''\n    # snake_to_camel('__..__..') == ''\n    # snake_to_camel('__..__.._') == ''\n    # snake_to_camel('__..__..__') == ''\n    # snake_to_camel('__..__..__.') == ''\n    # snake_to_camel('__..__..__..') == ''\n    # snake_to_camel('__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..') == ''\n    # snake_to_camel('__..__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..__..') == ''\n    # snake_to_camel('__..__..__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..__..__..') == ''\n    # snake_to_camel('__..__..__..__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..') == ''\n    # snake_to_camel('__..__..__..__..__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__..') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__..__..') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__..__..__..') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__..__..__.._') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__..__..__..__') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__..__..__..__..__..__.') == ''\n    # snake_to_camel('__..__..__..__..__..__..__..__..__..__."
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = []\n    for i in l:\n        if i%2==0:\n            l1.append(i)\n    return l1\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for i in l:\n        if i % 2 == 1:\n            odd_numbers.append(i)\n    return odd_numbers\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n    \ndef remove_odd_2(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_nums = []\n    for i in l:\n        if i%2!=0:\n            odd_nums.append(i)\n    return odd_nums\n    \ndef odd_no_func():\n    print(\"*** Odd Number Remover ***\")\n    l = [12,52,62,24,12,34,56,57,68,78]\n    l = remove_odd(l)\n    print(\"Original List:\",l)\n    \ndef odd_no_func_2():\n    print(\"*** Odd Number Remover 2 ***\")\n    l = [12,52,62,24,12,34,56,57,68,78]\n    l = remove_odd_2(l)\n    print(\"Original List:\",l)\n    \nodd_no_func()\nodd_no_func_2()\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for n in l:\n        if n%2 == 0:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            odd_list.append(l[i])\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for num in l:\n        if num % 2 == 0:\n            l.remove(num)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 ==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i][n])\n    return list2\n    \n    \n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    print(list1)\n    print(\"The nth element from the list is:\")\n    print(list1[n - 1])\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result_list = []\n    for item in list1:\n        result_list.append(item[n])\n    return result_list\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(list(x) for x in list1)[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #return list(list1[n-1])\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > 0:\n        return list1[n-1]\n    else:\n        return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print('n is larger than the length of the list')\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #TODO: Write code here\n    list_2 = []\n    list_3 = []\n    list_2 = list1[:n]\n    list_3 = list1[n:]\n    list_3.append(list_2[0])\n    return list_3\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #Check all values in list1 for any in list2\n    #and return a boolean result\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\nprint(overlapping([1,2,3],list(range(1,100))))\nprint(overlapping([1,2,3],list(range(1,100))))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #list1=list2=['a','b','c','d','e','f']\n    list1.sort()\n    list2.sort()\n    for val in list2:\n        if val in list1:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #return any(elem in list1 for elem in list2)\n    #return [i for i in list1 if i in list2]\n    return list(set(list1).intersection(list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    if count > 0:\n        return 1\n    else:\n        return 0\n    \n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    print('The original lists are as follows: ')\n    print('List 1: ', list1)\n    print('List 2: ', list2)\n    list1.extend(list2)\n    print('After concatenating the lists: ', list1)\n    for i in range(len(list1)):\n        if list1[i] in list1[i+1:]:\n            print('The element',list1[i],'exists in the list')\n        else:\n            print('The element',list1[i],'does not exist in the list')\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = False\n    for x in list1:\n        for y in list2:\n            if x == y:\n                result = True\n                break\n    return result\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if set(list1).isdisjoint(set(list2)):\n        print('\\nAll Values Exists\\n')\n    else:\n        print('\\nSome Values Exists\\n')\n    return\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1_set=set(list1)\n    list2_set=set(list2)\n    if(list1_set & list2_set):\n        return 1\n    else:\n        return 0"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    a=[]\n    for i in list1:\n        if i in list2:\n            a.append(i)\n    if a==[]:\n        return False\n    else:\n        return a\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    print(arr)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pro = arr[0]*arr[1]\n    max_pair = [arr[0],arr[1]]\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_pro:\n                max_pro = arr[i]*arr[j]\n                max_pair = [arr[i],arr[j]]\n    print('The pair with highest product is ',max_pair,'and product is ', max_pro)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr_sorted = sorted(arr)\n    max_product = arr_sorted[0] * arr_sorted[1]\n    max_pair = [arr_sorted[0], arr_sorted[1]]\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            product = arr[i]*arr[j]\n            if max_product < product:\n                max_product = product\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return 0\n    global_max = arr[0]*arr[1]\n    local_max = arr[0]\n    for i in range(1, len(arr)):\n        local_max = max(local_max*arr[i], arr[i])\n        if local_max > global_max:\n            global_max = local_max\n    return global_max\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Get the length of the array\n    n = len(arr)\n    # Initialize the result\n    result = -1\n    # Apply the algorithm\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if result < arr[i]*arr[j]:\n                result = arr[i]*arr[j]\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # The subarray that ends at index i and begins at 0\n    def subarray(arr, i):\n        if i == -1:\n            return [0]\n        return arr[:i+1]\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0: \n        return -1\n    if len(arr) == 1: \n        return arr[0]\n    if len(arr) == 2: \n        return arr[0]*arr[1]\n    max_prod = 0\n    for i in range(len(arr)): \n        if arr[i] > 0: \n            for j in range(i + 1, len(arr)): \n                if arr[i]*arr[j] > max_prod: \n                    max_prod = arr[i]*arr[j] \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize max and min variables. \n    max_ = arr[0] \n    min_ = arr[0] \n    \n    # Traverse the array. \n    for i in range(len(arr)): \n        if arr[i] > max_: \n            max_ = arr[i] \n        if arr[i] < min_: \n            min_ = arr[i] \n    \n    # Traverse the array again and if product is found \n    # update minimum and maximum variables. \n    for i in range(len(arr)): \n        if (arr[i] * max_ == arr[i] * min_): \n            return (arr[i], max_, min_) \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                i1 = i\n                i2 = j\n    return i1,i2,max_product\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = [tuple(i) for i in Input]\n    input_set = set()\n    for i in Input:\n        input_set.add(i[0])\n    return sorted(list(input_set))\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    output = []\n    for i in range(len(Input)): \n        #print(i)\n        output.append(Input[i][0])\n    #print(output)\n    #print(set(output))\n    #print(list(set(output)))\n    return(list(set(output)))"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    from itertools import groupby\n    Input = list(groupby(Input, lambda x: x[0]))\n    for i in Input:\n        print(i[0], len(list(i[1])))\n    print(Input)\n    return Input\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input : [('John', ('math', 80)), ('John', ('science', 90)), ('John', ('math', 90)), ('Mark', ('science', 95)), ('Mark', ('math', 85)), ('Mark', ('art', 75))]\n    # Output: John\n    # (John, 80)\n    # (John, 90)\n    # (John, 90)\n    # (Mark, 95)\n    # (Mark, 85)\n    # (Mark, 75)\n    # ----\n    # Logic:\n    # ----\n    # 1. Iterate through the tuple and store the first element as key in the dictionary.\n    # 2. When you encounter a new key, you need to store the tuple.\n    # 3. If you encounter the same key, then you need to store the second element of the tuple\n    # 4. If you encounter a new key in the tuple, then you need to store the tuple.\n    # 5. Compare the keys from the dictionary and find the common key and return the tuple with that key\n    # 6. Return the values in the dictionary for the common key\n    # ----\n    Output = {} # Initializing the Output Dictionary\n    for elem in Input:\n        key = elem[0] # Storing the first element of the tuple as key in the dictionary\n        if key not in Output:\n            Output[key] = [] # Storing the tuple in the dictionary\n        Output[key].append(elem[1]) # Storing the second element of the tuple as value for the key\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    res=[]\n    for item in Input:\n        # print(item)\n        tup = (item[0],)\n        # print(tup)\n        if tup not in res:\n            res.append(tup)\n        \n    return res\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dict = {}\n    for x in Input:\n        if x[0] in dict:\n            dict[x[0]] += 1\n        else:\n            dict[x[0]] = 1\n    for x in Input:\n        if dict[x[0]] == 1:\n            return x[0]\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique_list = [] \n    for x in Input: \n        if x not in unique_list: \n            unique_list.append(x)\n    tuple_list = []\n    for x in unique_list: \n        tuple_list.append(tuple(x))\n    final_list = []\n    for i in tuple_list:\n        count = 0\n        for j in tuple_list:\n            if i[0] in j:\n                count += 1\n        if count == len(tuple_list):\n            final_list.append(i[0])\n    return final_list\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_new =[]\n    for x in Input:\n        list_new.append(x[0])\n    print (list_new)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group_tuple = {}\n    for i in Input:\n        group_tuple.setdefault(i[0], []).append(i)\n    return group_tuple\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    set_tuple = set()\n    for each_tuple in Input: \n        for item in each_tuple: \n            if item not in set_tuple: \n                set_tuple.add(item)\n    for each_tuple in Input: \n        for item in set_tuple: \n            if item not in each_tuple: \n                break\n        else: \n            return item\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    result = lst[0]\n    len_max = len(result)\n    for element in lst:\n        if(len(element) > len_max):\n            result = element\n            len_max = len(element)\n    return result\n    "
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length_list = [len(element) for element in lst]\n    return max(length_list)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = len(lst[0]) \n    for i in range(1,len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = 0\n    for i in lst:\n        if len(i) > maxlen:\n            maxlen = len(i)\n    for i in lst:\n        if len(i) == maxlen:\n            return i\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = len(lst[0])\n    for i in lst:\n        if maximum < len(i):\n            maximum = len(i)\n    for i in lst:\n        if maximum == len(i):\n            return i\nlst = [\"python\", \"c++\", \"er\", \"programming\", \"examples\"]\nmax_len = Find_Max(lst)\nprint(max_len)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max1 = 0\n    max1_i = None\n    for i in range(0,len(lst)):\n        if len(lst[i])>max1:\n            max1 = len(lst[i])\n            max1_i = i\n    if max1_i==None:\n        print(\"No element of list having maximum length\")\n    else:\n        print(\"The element of list having maximum length is: \" + str(lst[max1_i]))\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if(len(i)>max_len):\n            max_len=len(i)\n            result=i\n    return result\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key = lambda x : len(x))\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    return lst[len(lst)-1]\n    \nprint(Find_Max(lst))\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    x = [len(i) for i in lst]\n    return lst[x.index(max(x))]\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        i = round(i)\n        sum += i\n    sum *= len(list1)\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1=0\n    for i in list1:\n        if type(i)==int:\n            sum1+=(round(i))\n        else:\n            sum1+=(round(float(i)))\n    return sum1*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total = total + round(i)\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    return sum*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    total = 0\n    for i in range(len(list1)):\n        list2.append(round(list1[i]))\n        total += list2[i]\n    print(total * len(list1))\n    return list2\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    print(sum*len(list1))\nround_and_sum([4.2, 1.1, 1.2, 3.1, 2.2, 1.9, 3.3])\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2=[]\n    for i in list1:\n        round_val=round(i,2)\n        list2.append(round_val)\n    sum=0\n    for i in list2:\n        sum+=i\n    print(list2)\n    print(sum)\n    print(len(list1))\n    print(sum*len(list1))\n    print('\\n')\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    print(sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        total += round(number)\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        i = round(i, 1)\n        sum = sum + i\n    return sum * len(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        sum += i ** 3\n        i += 1\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)/24)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n*(n+1)*(n+2)/6\n    \n    \ndef sum_natural_numbers(n): \n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n+sum_natural_numbers(n-1)\n        \n        \ndef sum_series(n,x=0,y=1):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    x and y are initial terms.\n    '''\n    if n==1:\n        return x\n    else:\n        return sum_series(n-1,x,y)+y\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,...\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n        \n        \ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factor of a number.\n    '''\n    if n==1:\n        return [1]\n    if n%2==0:\n        return [2] + prime_factors(n//2)\n    else:\n        return [n] + prime_factors(n-1)\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    if n==0:\n        return True\n    if n%10==0:\n        return False\n    else:\n        if n%10==n//10:\n            return palindrome_number(n//10)\n        else:\n            return False\n    \n    \ndef palindrome_string(n):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(n)<=1:\n        return True\n    if n[0]==n[-1]:\n        return palindrome_string(n[1:-1])\n    else:\n        return False\n    \n    \ndef reverse_string(n):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(n)<=1:\n        return n\n    else:\n        return reverse_string(n[1:])+n[0]\n    \n    \ndef reverse_string_pythonic(n):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return n[::-1]\n    \n    \ndef reverse_string_bitwise(n):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return int(n[::-1],2)\n    \n    \ndef reverse_string_by_stack(n):\n    '''\n    Write a python function to reverse a string.\n    '''\n    stack=list()\n    for i in n:\n        stack.append(i)\n    result=''\n    while len(stack)!=0:\n        result+=stack.pop()\n    return result\n    \n    \ndef palindrome_string_permutations(n):\n    '''\n    Write a python function to find all the palindrome permutations of a given string.\n    '''\n    if len(n)==1:\n        return [n,n[::-1]]\n    else:\n        result=list()\n        for i in palindrome_string_permutations(n[1:]):\n            for j in range(len(i)+1):\n                result.append(i[:j]+n[0]+i[j:])\n        return result\n    \n    \ndef palindrome_string_permutations_pythonic(n):\n    '''\n    Write a python function to find all the palindrome permutations of a given string.\n    '''\n    return [''.join(x) for x in itertools.permutations(n)]\n    \n    \ndef palindrome_string_permutations_bitwise(n):\n    '''\n    Write a python function to find all the palindrome permutations of a given string.\n    '''\n    return [int(i,2) for i in itertools.product('10'+n+'10',repeat=len(n)) if int(i,2)==int(i[::-1],2)]\n    \n    \ndef palindrome_string_permutations_by_stack(n):\n    '''\n    Write a python function to find all the palindrome permutations of a given string.\n    '''\n    stack=list()\n    stack.append(n)\n    while len(stack)!=0:\n        n=stack.pop()\n        if len(n)==1:\n            print(n,n[::-1])\n        else:\n            for i in palindrome_string_permutations(n[1:]):\n                stack.append(n[0]+i)\n                stack.append(i+n[0])\n    \n    \ndef pallindrome_substring(n):\n    '''\n    Write a python function to find the pallindrome substring of a given string.\n    '''\n    if len(n)==1:\n        return n\n    else:\n        if n[0]==n[-1]:\n            return n[0] + pallindrome_substring(n[1:-1]) + n[-1]\n        else:\n            return pallindrome_substring(n[:-1])\n            \n    \ndef pallindrome_substring_bitwise(n):\n    '''\n    Write a python function to find the pallindrome substring of a given string.\n    '''\n    return int(n,2)\n    \n    \ndef pallindrome_substring_pythonic(n):\n    '''\n    Write a python function to find the pallindrome substring of a given string.\n    '''\n    return n[::-1]\n    \n    \ndef pallindrome_substring_by_stack(n):\n    '''\n    Write a python function to find the pallindrome substring of a given string.\n    '''\n    stack=list()\n    stack.append(n)\n    while len(stack)!=0:\n        n=stack.pop()\n        if len(n)==1:\n            print(n,n[::-1])\n        else:\n            if n[0]==n[-1]:\n                stack.append(n[0] + pallindrome_substring(n[1:-1]) + n[-1])\n            else:\n                stack.append(pallindrome_substring(n[:-1]))\n    \n    \ndef pallindrome_substring_permutations(n):\n    '''\n    Write a python function to find the pallindrome substring of a given string.\n    '''\n    return [''.join(x) for x in itertools.permutations(n) if int(x,2)==int(x[::-1],2)]\n    \n    \ndef pallindrome_substring_permutations_bitwise(n):\n    '''\n    Write a python function to find the pallindrome substring of a given string.\n    '''\n    return [int(i,2) for i in itertools.product('10'+n+'10',repeat=len(n)) if int(i,2)==int(i[::-1],2)]\n    \n    \ndef pallindrome_substring_permutations_by_stack(n):\n    '''\n    Write a python function to find the pallindrome substring of a given string.\n    '''\n    stack=list()\n    stack.append(n)\n    while len(stack)!=0:\n        n=stack.pop()\n        if len(n)==1:\n            print(n,n[::-1])\n        else:\n            for i in pallin"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**3\n    print(total)\ncube_Sum(5)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n * (n+1) * (n+2) * (n+3) / 24\ndef subString(s,sub):\n    '''\n    Write a Python function to find a substring in a given string using index method.\n    '''\n    return s.find(sub)\ndef gcd(a,b):\n    '''\n    Write a Python function to compute GCD of two numbers using Euclid\u2019s algorithm.\n    '''\n    if a == 0:\n        return b\n    return gcd(b%a,a)\ndef lcm(a,b):\n    '''\n    Write a Python function to compute LCM of two numbers using GCD method.\n    '''\n    return (a*b)/gcd(a,b)\ndef towerOfHanoi(n, from_rod, to_rod, aux_rod): \n    '''\n    You are required to write a program to print the steps of Tower of Hanoi algorithm.\n    Your code should take input of n as the number of disks and output the steps of Tower of Hanoi algorithm.\n    '''\n    if n == 1: \n        print(\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod) \n        return\n    towerOfHanoi(n-1, from_rod, aux_rod, to_rod) \n    print(\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod) \n    towerOfHanoi(n-1, aux_rod, to_rod, from_rod)\nn = int(input(\"Enter the number of disks: \"))\ntowerOfHanoi(n, 'A', 'C', 'B')\ndef sumOdd(n):\n    '''\n    Write a Python program to compute the sum of the first n odd numbers.\n    '''\n    return n * (n+1) / 2\ndef triArea(b,h):\n    '''\n    Write a Python function to compute the area of a triangle.\n    '''\n    return 0.5 * b * h\ndef recArea(b,h):\n    '''\n    Write a Python function to compute the area of a rectangle.\n    '''\n    return b * h\ndef sineLaw(b,h,c):\n    '''\n    Write a Python function to compute the area of a triangle.\n    '''\n    return 0.5 * b * h / c\ndef sineLawRec(b,h,c):\n    '''\n    Write a Python function to compute the area of a rectangle.\n    '''\n    return b * h / c\ndef pythagoreanTheorem(a,b):\n    '''\n    Write a Python function to compute the area of a triangle.\n    '''\n    return (a*a + b*b)**0.5\ndef pythagoreanTheoremRec(a,b):\n    '''\n    Write a Python function to compute the area of a rectangle.\n    '''\n    return a * b\ndef fibonacciSeries(n):\n    '''\n    Write a Python program to print the Fibonacci series up to n number.\n    '''\n    n1,n2 = 0,1\n    print(\"Fibonacci series: \")\n    while n1<n:\n        print(n1, end=' ')\n        nth = n1+n2\n        n1 = n2\n        n2 = nth\nn = int(input(\"Enter the number of terms in the fibonacci series: \"))\nfibonacciSeries(n)\ndef arithmeticSeries(n):\n    '''\n    Write a Python program to print the sum of the first n numbers of the arithmetic series.\n    '''\n    print(0+n)\n    return (0+n) * (1+n) / 2\ndef sumSquare(n):\n    '''\n    Write a Python program to compute the sum of squares of the first n natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1)) / 6\ndef sumSquareRecursive(n):\n    '''\n    Write a Python program to compute the sum of squares of the first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    return sumSquareRecursive(n-1) + n*n\ndef sumSquareWhile(n):\n    '''\n    Write a Python program to compute the sum of squares of the first n natural numbers.\n    '''\n    s = 0\n    while n>0:\n        s = s + n*n\n        n = n-1\n    return s\ndef reverse(s):\n    '''\n    Write a Python program to reverse the string.\n    '''\n    return s[::-1]\ndef palindrome(s):\n    '''\n    Write a Python program to check whether a string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef evenOdd(n):\n    '''\n    Write a Python program to check whether a number is Odd or Even.\n    '''\n    if n%2==0:\n        print(\"even\")\n    else:\n        print(\"odd\")\ndef primeFactors(n):\n    '''\n    Write a Python program to get the prime factors of a given number.\n    '''\n    result = []\n    for i in range(2,n+1):\n        while n%i == 0:\n            result.append(i)\n            n = n/i\n    return result\ndef isPrime(n):\n    '''\n    Write a Python program to check whether a given number is a prime number or not.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef gcd(a,b):\n    '''\n    Write a Python function to compute the GCD of two numbers using Euclid\u2019s algorithm.\n    '''\n    return a if b==0 else gcd(b,a%b)\ndef lcm(a,b):\n    '''\n    Write a Python function to compute the LCM of two numbers using GCD method.\n    '''\n    return a*b/gcd(a,b)\ndef isPrime(n):\n    '''\n    Write a Python function to check whether a given number is a prime number or not.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef isPrime(n):\n    '''\n    Write a Python program to print all the prime numbers in an interval.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef sieveOfErasth(n):\n    '''\n    Write a Python program to print all the prime numbers in an interval.\n    '''\n    primes = []\n    for i in range(2,n):\n        if all(i%j!=0 for j in range(2,i)):\n            primes.append(i)\n    return primes\ndef palindrome(n):\n    '''\n    Write a Python program to check whether a given number is a palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\ndef sumOdd(n):\n    '''\n    Write a Python program to compute the sum of the first n odd numbers.\n    '''\n    return (n*(n+1)/2)\ndef sumSquare(n):\n    '''\n    Write a Python program to compute the sum of squares of the first n natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1)) / 6\ndef sumSquareRecursive(n):\n    '''\n    Write a Python program to compute the sum of squares of the first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    return n * n + sumSquareRecursive(n-1)\ndef sumSquareWhile(n):\n    '''\n    Write a Python program to compute the sum of squares of the first n natural numbers.\n    '''\n    s = 0\n    while n>0:\n        s = s + n*n\n        n = n-1\n    return s\ndef reverse(s):\n    '''\n    Write a Python program to reverse the string.\n    '''\n    return s[::-1]\ndef palindrome(s):\n    '''\n    Write a Python program to check whether a given number is a palindrome o"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if(i % 2 == 0):\n            sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # cube sum of n is defined as S = 1^3+2^3+...+(n-1)^3+n^3\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # return sum([i*i*i for i in range(1,n+1)])\n    return sum(i**3 for i in range(1,n+1) if i%2 == 0)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i*i*i for i in range(1, n+1, 2)])\n    \ndef cube_Sum_1(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(1, n+1, 2)])\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s = ''\n    for i in test_tup:\n        s += str(i) + '-'\n    return s\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for i in test_tup:\n        res += str(i) + '-'\n    return res[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    return delimiter.join(test_tup)\n    \ndef concatenate_list(test_lst):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    return delimiter.join(test_lst)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delim.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return str(test_tup[0]) + \"-\" + str(test_tup[1]) + \"-\" + str(test_tup[2])\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print(tuple(map(lambda x: x + '#', test_tup)))\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    list_of_tuples = []\n    for i in range(len(test_tup)):\n        temp_str = ''\n        for j in range(len(test_tup[i])):\n            if j!= len(test_tup[i])-1:\n                temp_str += test_tup[i][j]\n                temp_str += ','\n            else:\n                temp_str += test_tup[i][j]\n        list_of_tuples.append(temp_str)\n    return list_of_tuples\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n <= 0:\n        return \"Incorrect Input\"\n    else:\n        total = (n * (n + 1) * (n + 2)) / 6\n        return total\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        total += i**3 \n    return total/(n**3) \n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #code here\n    return sum(range(n+1))**3/n**3\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print(sum(i**3 for i in range(1, n+1))/n)\n    \nfind_Average_Of_Cube(10)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n <= 0:\n        return 'Invalid Input'\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum = sum + (i*i*i)\n        return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print (\"The average of cubes of first n natural numbers is = \",n*(n+1)*(n+2)/6)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n+1):\n        Sum += (i**3)\n    return Sum\n    \nif __name__ == \"__main__\":\n    n = int(input())\n    print(\"Sum Of Cubes of first n natural numbers is:\", find_Average_Of_Cube(n))\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average = 0\n    average = (n*(n+1)*(2*n+1))/6\n    return average\n    \ndef find_Average_Of_Square(n):\n    '''\n    Write a python function to find the average of squares of first n natural numbers.\n    '''\n    average = 0\n    average = ((n*(n+1))/2)**2\n    return average\n    \ndef find_Average_Of_Square_Root(n):\n    '''\n    Write a python function to find the average of square roots of first n natural numbers.\n    '''\n    average = 0\n    average = (1 + n)*n/2\n    return average\n    \ndef find_Average_Of_Multiples_Of(n,m):\n    '''\n    Write a python function to find the average of first n multiples of m.\n    '''\n    average = 0\n    average = n*m/2\n    return average\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = ('a', 'b', 'c', 'd')\n    rear_list = list()\n    for str in test_tuple:\n        rear_list.append(str[-1])\n    return tuple(rear_list)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    try:\n        result_tuple = tuple(item[-1] for item in test_tuple)\n        return result_tuple\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = [test_tuple[i][len(test_tuple[i])-1] for i in range(len(test_tuple))]\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = ('python', 'a', 'is', 'fun')\n    test_tuple = list(test_tuple)\n    rear_element = test_tuple[-1]\n    return rear_element\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i] == x:\n                count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if (x in list1[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in list1 if x in i])\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sub_list in list1:\n        if x in sub_list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for y in list1: \n        if x in y: \n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        for j in range(i, len(list1)): \n            if (list1[i] == x and list1[j] == x) or (list1[i]!= x and list1[j]!= x): \n                count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for y in range(len(list1)):\n        if x in list1[y]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    odd_numbers = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #new_list = [x for x in nums if x % 2!= 0]\n    #new_list = [x for x in nums if x % 2 == 0]\n    new_list = [x for x in nums if x % 2!= 0 and x % 2!= 0]\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num%2!=0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\nprint(filter_oddnumbers([1,2,3,4,5,6,7,8])"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    res = [num for num in nums if num % 2!= 0]\n    return res\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    # a list comprehension\n    # if num % 2 == 1:\n    #     odd_nums.append(num)\n    # return odd_nums\n    \n    odd_nums = [num for num in nums if num % 2 == 1]\n    return odd_nums\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r\"^(.*)-(.*)-(.*)\"\n    match = re.match(regex, dt)\n    if match:\n        groups = match.groups()\n        new_date = \"-\".join(groups[::-1])\n        return new_date\n    else:\n        return \"Invalid date\"\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    dt[2] = dt[2].split(\"T\")[0]\n    dt_new = \"\".join(dt)\n    return dt_new\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    return d[2] + '-' + d[1] + '-' + d[0]\n    \ndef replace_char_at_index(s, p, r):\n    '''\n    Write a function to replace all occurrences of a character in a string with another character.\n    '''\n    return s[:p] + r + s[p + 1:]\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:10]+'-'+dt[5:7]+'-'+dt[:4]\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.strip()\n    dt = dt.replace('/','-')\n    dt = dt.replace('-','/')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    print(\"\".join(dt[::-1]))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '-'.join(re.split('[^0-9]',dt))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = str(dt)\n    dt = dt[6:10] + '-' + dt[3:5] + '-' + dt[:2]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = dt[2]+'-'+dt[1]+'-'+dt[0]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if not my_list:\n        return []\n    length = len(my_list)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            current = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current:\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = current\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for n in range(len(my_list), 1, -1):\n        for i in range(n):\n            if my_list[i] > my_list[i + 1]:\n                my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n                \n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Start with a big gap, then reduce the gap\n    n = len(my_list)\n    gap = n//2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size // 2\n    while gap > 0:\n        for i in range(gap, size):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # s1 = set(test_tup1)\n    # s2 = set(test_tup2)\n    # s3 = s1 & s2\n    # print(s3)\n    # print(type(s3))\n    # if type(test_tup1) == type(test_tup2):\n    #     result = tuple(set(test_tup1) & set(test_tup2))\n    # return result\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [x & y for x,y in zip(test_tup1,test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple([(i) for i, j in zip(test_tup1, test_tup2) if i == j]))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = (1, 2, 3, 4, 5)\n    test_tup2 = (4, 5, 6, 7, 8)\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            and_tup += (test_tup1[i],)\n    print(and_tup)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \ndef discriminant(a, b, c):\n    '''\n    Write a function to calculate the discriminant. \n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \ndef quadratic_roots(a, b, c):\n    '''\n    Write a function to solve a quadratic equation and find its roots.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef cubic_roots(a, b, c, d):\n    '''\n    Write a function to solve a cubic equation and find its roots.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef quadratic_solve(a, b, c):\n    '''\n    Write a function to solve a quadratic equation and find its roots.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef cubic_solve(a, b, c, d):\n    '''\n    Write a function to solve a cubic equation and find its roots.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef quadratic_check(a, b, c):\n    '''\n    Write a function to check if a quadratic equation has real roots.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef cubic_check(a, b, c, d):\n    '''\n    Write a function to check if a cubic equation has real roots.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef solve_quadratic(a, b, c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef solve_cubic(a, b, c, d):\n    '''\n    Write a function to solve a cubic equation.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef quadratic_eq(a, b, c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef cubic_eq(a, b, c, d):\n    '''\n    Write a function to solve a cubic equation.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef quadratic_expr(a, b, c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef cubic_expr(a, b, c, d):\n    '''\n    Write a function to solve a cubic equation.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_factor(a, b):\n    '''\n    Write a function to check if a number is a factor of another number.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_factor_all(a, b):\n    '''\n    Write a function to check if a number is a factor of another number.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef factors(a):\n    '''\n    Write a function to return a list of all the factors of a number.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef factors_all(a):\n    '''\n    Write a function to return a list of all the factors of a number.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_prime(a):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_prime_all(a):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_coprime(a, b):\n    '''\n    Write a function to check if two numbers are coprime.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_coprime_all(a, b):\n    '''\n    Write a function to check if two numbers are coprime.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_even(a):\n    '''\n    Write a function to check if a number is even.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_even_all(a):\n    '''\n    Write a function to check if a number is even.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_odd(a):\n    '''\n    Write a function to check if a number is odd.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_odd_all(a):\n    '''\n    Write a function to check if a number is odd.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_perfect(a):\n    '''\n    Write a function to check if a number is perfect.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_perfect_all(a):\n    '''\n    Write a function to check if a number is perfect.\n    '''\n    pass\n    # TODO: complete the body of this function.\n    pass\n    # TODO: Write your code here.\n    \n    \n    \n    \ndef is_perfect_square(a):\n    '''\n    Write a function to check if a number is perfect square.\n    '''\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if c == 0:\n        return 'Undefined'\n    else:\n        # a = -b / c\n        return (0 - b) / c\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    # Solve the quadratic equation\n    d = (b**2) - (4*a*c)\n    \n    # Find the two roots \n    x1 = (-b + np.sqrt(d))/(2*a)\n    x2 = (-b - np.sqrt(d))/(2*a)\n    \n    # Create the x and y arrays\n    x = np.arange(-10, 10, 0.01)\n    y = x**2 + x + 1\n    \n    # Plot the parabola and the directrix\n    plt.plot(x, y)\n    plt.plot(x1, 0, 'r.')\n    plt.plot(x2, 0, 'r.')\n    plt.show()\n    \n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    return -b/(2*a) \n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # directrix has the form ax^2 + bx + c = 0\n    \n    # let a=1, b=3 and c=0\n    \n    # if we solve the quadratic equation, \n    # we get: x = (-b +/- (b^2 - 4*a*c)^(1/2))/(2*a)\n    \n    # solution: x = (3^(1/2) - 1)/2 = 0.866025403784\n    \n    # solution: x = (3 - 1.4142135623730951)/2 = 0.5\n    \n    \n    # if a=1, b=3 and c=0, then the directrix of a parabola has a point at (0.5, 3/2)\n    \n    # if a=1, b=1 and c=0, then the directrix of a parabola has a point at (1, 1/2)\n    \n    # if a=1, b=-3 and c=0, then the directrix of a parabola has a point at (-3/2, 1)\n    \n    \n    # if a=1, b=-1 and c=0, then the directrix of a parabola has a point at (-1, 1/2)\n    \n    # if a=1, b=3 and c=1, then the directrix of a parabola has a point at (-3/2, 1)\n    \n    # if a=1, b=-1 and c=1, then the directrix of a parabola has a point at (-1, 1/2)\n    \n    # if a=1, b=1 and c=1, then the directrix of a parabola has a point at (-1, 1/2)\n    \n    # if a=1, b=1 and c=2, then the directrix of a parabola has a point at (-1, 1/2)\n    \n    # if a=1, b=1 and c=3, then the directrix of a parabola has a point at (-1, 1/2)\n    \n    \n    # the points on the directrix have the form ax^2 + bx + c = 0\n    # these points are the tangent lines to the parabola\n    \n    # tangent line at (0, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 3 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (-3/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (-3/2, 1): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*-3/2\n    # a = 1, b = -3 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (-3/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (0, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = -1 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (-1/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (-1, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 1 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (-1/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (1, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 1 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (1/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (1, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 1 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (1/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (1, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 1 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (1/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (1, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 1 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (1/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (1, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 1 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (1/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (1, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 1 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (1/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (1, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 1 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (1/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (1, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 1 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (1/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (1, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 1 and c = 0.866025403784, so the discriminant = 1.0\n    # the solution is: x = (1/4)^(1/2) = 1.41421\n    \n    \n    # tangent line at (1, 1/2): ax^2 + bx + c = 0\n    # the discriminant is: 4*a*c = b^2 - 4*a*1/2\n    # a = 1, b = 1 and c = 0.866025403"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # The quadratic equation can be solved to find the directrix of a parabola. \n    # Solve for the discriminant:\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # formula to find directrix\n    if a!= 0:\n        D = -(b*b-4*a*c)**0.5/a/2\n        print(f'The directrix is {D}')\n    # formula to find vertex\n    else:\n        V = -b/2\n        print(f'The vertex is {V}')\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import numpy as np\n    from numpy import cos, sin, pi\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**(0.5)) / (2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import sqrt\n    def discriminant(a, b, c):\n        return (b**2) - (4*a*c)\n    disc = discriminant(a, b, c)\n    if disc < 0:\n        return None\n    else:\n        return sqrt(disc)/(2*a)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    if list1 == []:\n        return False\n    \n    for elem in list1:\n        if elem in list2:\n            return True\n            \n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if (set(list1) & set(list2)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1=set(list1)\n    set2=set(list2)\n    if len(set1.intersection(set2))>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n    \ndef main():\n    '''\n    Do not change anything below this line.\n    '''\n    import sys\n    print(median_trapezium(1,3,5))\n    print(median_trapezium(2,4,5))\n    print(median_trapezium(1,3,3))\n    \nmain()"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    median = (((base1 + base2)/2)*height)/2\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*height/2\ndef triangle_area(base,height):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (base*height)/2\ndef rectangle_area(width,length):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return width*length\ndef circle_area(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14159*radius**2\ndef square_area(side):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return side**2\ndef parallelogram_area(base,height):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return base*height\ndef trapezium_area(base1,base2,height):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return (base1+base2)*height/2\ndef circle_circumference(radius):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*radius\ndef square_circumference(side):\n    '''\n    Write a function to find the circumference of a square.\n    '''\n    return 4*side\ndef rectangle_circumference(width,length):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    return 2*width+2*length\ndef triangle_circumference(base,height):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    return 3*base\ndef parallelogram_circumference(base,height):\n    '''\n    Write a function to find the circumference of a parallelogram.\n    '''\n    return 2*(base+height)\ndef trapezium_circumference(base1,base2,height):\n    '''\n    Write a function to find the circumference of a trapezium.\n    '''\n    return base1+base2+height\ndef area_or_circumference(type,area):\n    '''\n    Write a function to check whether a function returns area or circumference.\n    '''\n    if type=='circle':\n        print(area_or_circumference('circle',area))\n    elif type=='square':\n        print(area_or_circumference('square',area))\n    elif type=='rectangle':\n        print(area_or_circumference('rectangle',area))\n    elif type=='triangle':\n        print(area_or_circumference('triangle',area))\n    elif type=='trapezium':\n        print(area_or_circumference('trapezium',area))\n    elif type=='parallelogram':\n        print(area_or_circumference('parallelogram',area))\narea_or_circumference('square',4)"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = ((base1 + base2) * height) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_base = base1+base2\n    trapezium_height = height/2\n    area = trapezium_base*trapezium_height\n    print(\"The area of the trapezium is \"+str(area))\n    return(area)\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_area = ((base1+base2)/2)*height\n    return trapezium_area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_one = int(input(\"What is the length of base 1? \"))\n    base_two = int(input(\"What is the length of base 2? \"))\n    height_one = int(input(\"What is the height? \"))\n    median = ((base_one + base_two) / 2) * height_one\n    print(f\"The median length of the trapezium is {median}\")\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    try:\n        if number > int(arr[0]):\n            return True\n        return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    l = len(arr)\n    for i in range(l):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    print(\"Write a function to check whether the entered number is greater than the elements of the given array.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return the index of the element in the given array which is greater than the entered number.\")\n    print(\"Write a function to return th"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number <= arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            flag = True\n    return flag\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        print(\"The number is greater than the maximum element in the array\")\n    else:\n        print(\"The number is less than or equal to the maximum element in the array\")\n        "
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number >= max(arr):\n        print('Number is greater than any of the elements of the array')\n    else:\n        print('Number is smaller than all of the elements of the array')\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab+\")\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # match = re.findall(r'ab+',text)\n    # return match\n    return len(re.findall(r'ab+',text))\n    \n    \n    \n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba+b+')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = \"aababc\"\n    pattern = \"ab+\"\n    r = re.findall(pattern, text)\n    if len(r) == 0:\n        return \"No Match\"\n    return r\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat1 = '^a.*b+$'\n    pat2 = 'a.*b{1,}$'\n    pat3 = '^a.*b+.*$'\n    pat4 = 'a.*b{1,}.*$'\n    pat5 = 'a.*b{1,}$'\n    pat6 = 'a.*?b+$'\n    pat7 = 'a.*?b{1,}$'\n    pat8 = 'a.*?b+.*$'\n    pat9 = 'a.*?b{1,}.*$'\n    pat10 = 'a.*?b{1,}$'\n    pat11 = 'a.*?b{1,}$'\n    pat12 = '^a.*?b{1,}$'\n    pat13 = '^a.*?b{1,}$'\n    pat14 = 'a.*b+$'\n    pat15 = 'a.*b{1,}$'\n    pat16 = '^a.*b+.*$'\n    pat17 = 'a.*b{1,}.*$'\n    pat18 = 'a.*b{1,}$'\n    pat19 = '^a.*?b{1,}$'\n    pat20 = '^a.*?b{1,}$'\n    pat21 = '^a.*?b+$'\n    pat22 = '^a.*?b+.*$'\n    pat23 = '^a.*?b{1,}$'\n    pat24 = '^a.*?b{1,}.*$'\n    pat25 = '^a.*?b{1,}$'\n    pat26 = '^a.*?b{1,}.*$'\n    pat27 = '^a.*?b{1,}$'\n    pat28 = '^a.*?b{1,}.*$'\n    pat29 = '^a.*?b{1,}$'\n    pat30 = '^a.*?b{1,}.*$'\n    pat31 = '^a.*?b{1,}$'\n    pat32 = '^a.*?b{1,}.*$'\n    pat33 = '^a.*b+$'\n    pat34 = '^a.*b+.*$'\n    pat35 = '^a.*b{1,}$'\n    pat36 = '^a.*b{1,}.*$'\n    pat37 = '^a.*?b{1,}$'\n    pat38 = '^a.*?b{1,}.*$'\n    pat39 = '^a.*?b{1,}$'\n    pat40 = '^a.*?b{1,}.*$'\n    pat41 = '^a.*?b{1,}$'\n    pat42 = '^a.*?b{1,}.*$'\n    pat43 = '^a.*?b{1,}$'\n    pat44 = '^a.*?b{1,}.*$'\n    pat45 = '^a.*?b{1,}$'\n    pat46 = '^a.*?b{1,}.*$'\n    pat47 = '^a.*b+$'\n    pat48 = '^a.*b+.*$'\n    pat49 = '^a.*b{1,}$'\n    pat50 = '^a.*b{1,}.*$'\n    pat51 = '^a.*?b{1,}$'\n    pat52 = '^a.*?b{1,}.*$'\n    pat53 = '^a.*?b{1,}$'\n    pat54 = '^a.*?b{1,}.*$'\n    pat55 = '^a.*?b{1,}$'\n    pat56 = '^a.*?b{1,}.*$'\n    pat57 = '^a.*?b{1,}$'\n    pat58 = '^a.*?b{1,}.*$'\n    pat59 = '^a.*?b{1,}$'\n    pat60 = '^a.*?b{1,}.*$'\n    pat61 = '^a.*?b{1,}$'\n    pat62 = '^a.*?b{1,}.*$'\n    pat63 = '^a.*?b{1,}$'\n    pat64 = '^a.*?b{1,}.*$'\n    pat65 = '^a.*?b{1,}$'\n    pat66 = '^a.*?b{1,}.*$'\n    pat67 = '^a.*?b{1,}$'\n    pat68 = '^a.*?b{1,}.*$'\n    pat69 = '^a.*?b{1,}$'\n    pat70 = '^a.*?b{1,}.*$'\n    pat71 = '^a.*?b{1,}$'\n    pat72 = '^a.*?b{1,}.*$'\n    pat73 = '^a.*?b{1,}$'\n    pat74 = '^a.*?b{1,}.*$'\n    pat75 = '^a.*?b{1,}$'\n    pat76 = '^a.*?b{1,}.*$'\n    pat77 = '^a.*?b{1,}$'\n    pat78 = '^a.*?b{1,}.*$'\n    pat79 = '^a.*?b{1,}$'\n    pat80 = '^a.*?b{1,}.*$'\n    pat81 = '^a.*?b{1,}$'\n    pat82 = '^a.*?b{1,}.*$'\n    pat83 = '^a.*?b{1,}$'\n    pat84 = '^a.*?b{1,}.*$'\n    pat85 = '^a.*?b{1,}$'\n    pat86 = '^a.*?b{1,}.*$'\n    pat87 = '^a.*?b{1,}$'\n    pat88 = '^a.*?b{1,}.*$'\n    pat89 = '^a.*?b{1,}$'\n    pat90 = '^a.*?b{1,}.*$'\n    pat91 = '^a.*?b{1,}$'\n    pat92 = '^a.*?b{1,}.*$'\n    pat93 = '^a.*?b{1,}$'\n    pat94 = '^a.*?b{1,}.*$'\n    pat95 = '^a.*?b{1,}$'\n    pat96 = '^a.*?b{1,}.*$'\n    pat97 = '^a.*?b{1,}$'\n    pat98 = '^a.*?b{1,}.*$'\n    pat99 = '^a.*?b{1,}$'\n    pat100 = '^a.*?b{1,}.*$'\n    pat101 = '^a.*?b{1,}$'\n    pat102 = '^a.*?b{1,}.*$'\n    pat103 = '^a.*?b{1,}$'\n    pat104 = '^a.*?b{1,}.*$'\n    pat105 = '^a.*?b{1,}$'\n    pat106 = '^a.*?b{1,}.*$'\n    pat107 = '^a.*?b{1,}$'\n    pat108 = '^a.*?b{1,}.*$'\n    pat109 = '^a.*?b{1,}$'\n    pat110 = '^a.*?b{1,}.*$'\n    pat111 = '^a.*?b{1,}$'\n    pat112 = '^a.*?b{1,}.*$'\n    pat113 = '^a.*?b{1,}$'\n    pat114 = '^a.*?b{1,}.*$'\n    pat115 = '^a.*?b{1,}$'\n    pat116 = '^a.*?b{1,}.*$'\n    pat117 = '^a.*?b{1,}$'\n    pat118 = '^a.*?b{1,}.*$'\n    pat119 = '^a.*?b{"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search(r\"^[ab]+$\", text))\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'ab*')\n    result = regex.search(text)\n    return result!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        return match.group()\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_two(text):\n    '''\n    Write a function that takes in a string of one or more words.\n    The string will contain a special  character .\n    Find the index of the first occurrence of the special character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    The search string can contain the  character. \n    Find the index of the first occurrence of the  character in the string.\n    '''\n    if re.search('a.*?b', text):\n        print('Match')\n    else:\n        print('No Match')\n    return re.search('a.*?b', text)\n    "
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    string = \"abababa\"\n    my_regex = r\"ab+\"\n    result = re.findall(my_regex,string)\n    print(result)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Your code goes here\n    last_digit = 0\n    while n!= 0:\n        last_digit = n % 10\n        n = n // 10\n    return last_digit\n    \n    \ndef Find_Perfect_Number(low, high) :\n    '''\n    Write a python function to find all the perfect numbers between low and high.\n    '''\n    # Your code goes here\n    for i in range(low, high + 1) :\n        sum = 0\n        for j in range(1, i) :\n            if i % j == 0 :\n                sum += j\n        if sum == i :\n            print (i)\n            \n    return\n    \n    \ndef is_Armstrong(n) :\n    '''\n    Write a python function to determine if a given number is an armstrong number.\n    '''\n    # Your code goes here\n    sum = 0\n    n_length = len(str(n))\n    for i in range(1, n_length + 1) :\n        sum += pow(n % 10, n_length)\n        n = n // 10\n    if sum == n :\n        return True\n    else :\n        return False\n        \n    \ndef Fibo(n) :\n    '''\n    Write a python function to calculate the nth Fibonacci number.\n    '''\n    # Your code goes here\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return Fibo(n - 1) + Fibo(n - 2)\n    \n    \ndef Prime_Number(low, high) :\n    '''\n    Write a python function to determine if a given number is a prime number.\n    '''\n    # Your code goes here\n    for i in range(low, high + 1) :\n        if i % 2!= 0 :\n            continue\n        for j in range(2, i) :\n            if i % j == 0 :\n                break\n        else :\n            print (i)\n    return\n    \n    \ndef is_Palindrome(n) :\n    '''\n    Write a python function to determine if a given number is a palindrome.\n    '''\n    # Your code goes here\n    temp = n\n    rev = 0\n    while n!= 0 :\n        rev = rev * 10 + n % 10\n        n = n // 10\n    if temp == rev :\n        return True\n    else :\n        return False\n        \n    \ndef Power(x, n) :\n    '''\n    Write a python function to calculate the power of a given number x raised to the nth power.\n    '''\n    # Your code goes here\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return x\n    else :\n        if n % 2 == 0 :\n            return Power(x, n // 2) * Power(x, n // 2)\n        else :\n            return Power(x, n // 2) * Power(x, n // 2) * x\n            \n            \ndef HCF(a, b) :\n    '''\n    Write a python function to determine the HCF of two numbers.\n    '''\n    # Your code goes here\n    if a < b :\n        a, b = b, a\n    while a!= 0 :\n        a, b = b % a, a\n    return b\n    \n    \ndef LCM(a, b) :\n    '''\n    Write a python function to determine the LCM of two numbers.\n    '''\n    # Your code goes here\n    while a!= 0 :\n        a, b = b % a, a\n    return b\n    \n    \ndef String_Compression(s) :\n    '''\n    Write a python function to determine the String Compression of a given String.\n    '''\n    # Your code goes here\n    compressed_string = ''\n    count = 0\n    for i in s :\n        if i == compressed_string[-1] :\n            count += 1\n        else :\n            compressed_string = compressed_string + str(count) + i\n            count = 1\n    compressed_string = compressed_string + str(count)\n    if len(compressed_string) < len(s) :\n        return compressed_string\n    else :\n        return s\n        \n        \ndef String_Reversal(s) :\n    '''\n    Write a python function to determine the String Reversal of a given String.\n    '''\n    # Your code goes here\n    s = list(s)\n    for i in range(len(s)) :\n        s[i] = s[len(s) - 1 - i]\n    return ''.join(s)\n    \n    \ndef Integer_to_Roman(num) :\n    '''\n    Write a python function to convert a given Integer to Roman.\n    '''\n    # Your code goes here\n    roman = ['I', 'V', 'X', 'L', 'C', 'D', 'M']\n    val = [1, 5, 10, 50, 100, 500, 1000]\n    roman_num = ''\n    i = 0\n    while num!= 0 :\n        for j in range(7) :\n            if num - val[j] >= 0 :\n                num = num - val[j]\n                roman_num = roman_num + roman[j]\n                i = j\n                break\n    return roman_num\n        \n        \ndef Roman_to_Integer(roman) :\n    '''\n    Write a python function to convert a given Roman number to Integer.\n    '''\n    # Your code goes here\n    roman = list(roman)\n    roman_num = 0\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    for i in range(len(roman)) :\n        if i > 0 and roman_dict[roman[i]] > roman_dict[roman[i - 1]] :\n            roman_num = roman_num + roman_dict[roman[i]] - 2 * roman_dict[roman[i - 1]]\n        else :\n            roman_num = roman_num + roman_dict[roman[i]]\n    return roman_num\n    \n    \ndef Generate_Array_Pattern(n, val) :\n    '''\n    Write a python function to generate an Array Pattern of size n where each element is equal to val.\n    '''\n    # Your code goes here\n    if n % 2!= 0 :\n        raise Exception(\"Please enter an even number.\")\n    arr = []\n    for i in range(1, n + 1) :\n        if i % 2!= 0 :\n            arr.append(val)\n        else :\n            arr.insert(0, val)\n    return arr\n    \n    \ndef Array_Sum(arr) :\n    '''\n    Write a python function to determine the sum of all the elements of an array.\n    '''\n    # Your code goes here\n    sum = 0\n    for i in range(len(arr)) :\n        sum = sum + arr[i]\n    return sum\n    \n    \ndef Array_Difference(arr1, arr2) :\n    '''\n    Write a python function to find the difference between two given arrays.\n    '''\n    # Your code goes here\n    diff = []\n    for i in range(len(arr1)) :\n        if arr1[i]!= arr2[i] :\n            diff.append(arr1[i])\n    return diff\n    \n    \ndef Rotate_Matrix(m) :\n    '''\n    Write a python function to rotate an array by 90 degrees.\n    '''\n    # Your code goes here\n    n = len(m)\n    m = [[row[i] for row in m] for i in range(n)]\n    for i in range(n) :\n        for j in range(i, n) :\n            temp = m[i][j]\n            m[i][j] = m[j][i]\n            m[j][i] = temp\n    for i in range(n) :\n        m[i] = m[i][::-1]\n    return m\n    \n    \ndef Generate_Pascal_Row(n) :\n    '''\n    Write a python function to generate the nth row of the Pascal triangle.\n    '''\n    # Your code goes here\n    for i in range(n + 1) :\n        if i == 0 :\n            row "
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #print(\"Last digit of \"+str(n)+\" is \"+str(n%10))\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    if n < 10 :\n        return n\n    else :\n        return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 10 :\n        return last_Digit(n//10)\n    else :\n        return n%10\n    \nif __name__ == \"__main__\" :\n    \n    n = int(input(\"Enter an integer : \"))\n    print(f\"The last digit of the integer {n} is : {last_Digit(n)}\")"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # code here\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n    \ndef check_prime(n) :\n    '''\n    Write a python function to find if a given number is prime or not.\n    '''\n    if n > 1 :\n        for i in range(2,n//2+1) :\n            if n%i == 0 :\n                return False\n        return True\n    else :\n        return False\n        \ndef modulo(n,m) :\n    '''\n    Write a python function to compute a modulo of 2 numbers.\n    '''\n    return n%m\n    \ndef fahrenheit_to_celcius(n) :\n    '''\n    Write a python function to convert fahrenheit to celcius.\n    '''\n    return (n-32)*5/9\n    \ndef power(n,p) :\n    '''\n    Write a python function to compute a power of a number.\n    '''\n    return n**p\n    \ndef fibonacci(n) :\n    '''\n    Write a python function to compute nth term of a fibonacci series.\n    '''\n    if n <= 1 :\n        return n\n    else :\n        return fibonacci(n-1)+fibonacci(n-2)\n        \ndef fibonacci_memoization(n, d) :\n    '''\n    Write a python function to compute nth term of a fibonacci series using memoization technique.\n    '''\n    if n not in d :\n        if n <= 1 :\n            d[n] = n\n        else :\n            d[n] = fibonacci_memoization(n-1, d)+fibonacci_memoization(n-2, d)\n    return d[n]\n    \ndef mersenne_prime(n, m) :\n    '''\n    Write a python function to find whether a given number is a mersenne prime or not.\n    '''\n    if check_prime(n) :\n        if modulo(n, m) == 1 :\n            return True\n        else :\n            return False\n    else :\n        return False\n        \ndef armstrong_number(n) :\n    '''\n    Write a python function to find whether a given number is an armstrong number or not.\n    '''\n    sum = 0\n    l = len(str(n))\n    for i in str(n) :\n        sum += pow(int(i), l)\n    if sum == n :\n        return True\n    else :\n        return False\n        \ndef reverse_string(string) :\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return string[::-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while(n>0):\n        n = n//10\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = int(input('Enter the Number: '))\n    if n < 0 :\n        return False\n    else :\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #a=n%10\n    return n%10\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for x in list1:\n        if x < 0:\n            list2.append(x)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos_list = []\n    for x in list1:\n        if x < 0:\n            neg_nos_list.append(x)\n    return neg_nos_list\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    lst = []\n    for i in list1:\n        if i < 0:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x < 0, list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [n for n in list1 if n < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x : x < 0, list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x<0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x<0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    newstr = \"\"\n    for char in str1:\n        if char not in newstr:\n            newstr += char\n    return newstr\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = ''.join([i for i in str1 if ord(i) % 2 == 0])\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalpha()])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    chars = []\n    for char in str1:\n        if char not in chars:\n            chars.append(char)\n    return ''.join(chars)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    res = ''\n    for c in str1:\n        if c.isalpha():\n            res += c\n    return res\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if i % 2 == 0:\n            str1 = str1.replace(i, \"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    str1 = 'Hello world'\n    str2 = ''.join(i for i in str1 if not i%2)\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    final_str=\"\"\n    for i in str1:\n        if i.isdigit()==False:\n            final_str=final_str+i\n    return final_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #str1 = 'abcde'\n    #str1 = 'aabbccddeeff'\n    print(f'This is the string before removing odd characters - {str1}')\n    for i in range(0, len(str1)):\n        if str1[i] % 2!= 0:\n            str1 = str1.replace(str1[i], '')\n    print(f'This is the string after removing odd characters - {str1}')\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def count(t):\n        a, b = t\n        return {(a, b), (b, a)}\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    length = len(test_list)\n    count = 0\n    for i in range(length):\n        for j in range(i,length):\n            if test_list[i][1] == test_list[j][0]:\n                count+=1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1][::-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    l = len(test_list)\n    if l % 2!= 0:\n        return 0\n    count = 0\n    for i in range(0, l):\n        if i + 1 < l:\n            if test_list[i] == test_list[i + 1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count=0\n    for item in test_list:\n        if type(item) == tuple:\n            if (item[1], item[0]) in test_list:\n                count+=1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = [('a', 'b'), ('b', 'a'), ('c', 'c'), ('b', 'd')]\n    def is_bidirectional(a, b):\n        return a in b and b in a\n    print(len(list(filter(is_bidirectional, test_list))))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    test_list = list(test_list)\n    if len(test_list) > 1:\n        for i in range(len(test_list)):\n            for j in range(i+1,len(test_list)):\n                if test_list[i][1] == test_list[j][0] and test_list[i][0] == test_list[j][1]:\n                    counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum([1 for i in range(len(test_list)-1) if test_list[i] == test_list[i+1][::-1]])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j]:\n                if test_list[i] == (i, j):\n                    count += 1\n                    print(test_list[i])\n    return count\n    \n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = ''\n    for i in L:\n        s += str(i)\n    return int(s)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    n = len(L)\n    L = [str(i) for i in L]\n    L = \"\".join(L)\n    L = int(L)\n    print(L)\n    return L\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [str(x) for x in L]\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 0\n    for i in L:\n        single = single * 10 + i\n    return single\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        L[0] = L[0] + multiple_to_single(L[1:])\n        return L[0]\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum = 0\n    for num in L:\n        sum += num\n    return sum\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #create empty string to store the int\n    L = str(L)\n    L = L.replace(\"[\",\"\")\n    L = L.replace(\"]\",\"\")\n    L = L.replace(\",\",\"\")\n    return int(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    numbers = []\n    for i in L:\n        numbers.append(str(i))\n    return int(''.join(numbers))\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    for i in re.finditer(r'(?<!\\w)(\\b(?:.*?[A-Z][a-z]*(?:-[A-Z][a-z]*)*)(?:\\b)\\b(?!\\w))', text):\n        result.append(i.group(0))\n    return result\nprint(find_adverb_position(text))\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    print(\"The position of adverb is:\",x)\n    print(\"The adverb is:\",x[0])\n    \ndef find_non_first_adverbs(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    print(\"The position of adverb is:\",x)\n    \ndef replace_adverb_with_first_adverb(text):\n    '''\n    Write a function to replace all adverbs in a given sentence with the first adverb.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adverbs is:\",text)\n    \ndef replace_first_adverb_with_second(text):\n    '''\n    Write a function to replace the first adverb with the second adverb.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    z=x[1]\n    text=re.sub(z,'',text)\n    print(\"The sentence after changing adverbs is:\",text)\n    \ndef replace_third_with_fourth(text):\n    '''\n    Write a function to replace the third adverb with the fourth adverb.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    z=x[1]\n    text=re.sub(y,'',text)\n    text=re.sub(z,'',text)\n    w=x[2]\n    text=re.sub(w,'',text)\n    print(\"The sentence after changing adverbs is:\",text)\n    \ndef replace_all_adverbs_with_second(text):\n    '''\n    Write a function to replace all adverbs in a given sentence with the second adverb.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adverbs is:\",text)\n    \ndef replace_adverbs_with_adjectives(text):\n    '''\n    Write a function to replace all adverbs in a given sentence with the adjectives.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adverbs is:\",text)\n    \ndef replace_two_adverbs_with_adjectives(text):\n    '''\n    Write a function to replace the first and second adverbs in a given sentence with the adjectives.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    z=x[1]\n    text=re.sub(y,'',text)\n    text=re.sub(z,'',text)\n    print(\"The sentence after changing adverbs is:\",text)\n    \ndef replace_adverb_with_adjective(text):\n    '''\n    Write a function to replace the first adverb in a given sentence with the adjective.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adverbs is:\",text)\n    \ndef replace_all_adverbs_with_adjective(text):\n    '''\n    Write a function to replace all adverbs in a given sentence with the adjective.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adverbs is:\",text)\n    \ndef replace_all_adjectives_with_adverbs(text):\n    '''\n    Write a function to replace all adjectives in a given sentence with the adverbs.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adverbs is:\",text)\n    \ndef replace_two_adjectives_with_adverb(text):\n    '''\n    Write a function to replace the first and second adjective in a given sentence with the adverb.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    z=x[1]\n    text=re.sub(y,'',text)\n    text=re.sub(z,'',text)\n    print(\"The sentence after changing adverbs is:\",text)\n    \ndef replace_adjectives_with_nouns(text):\n    '''\n    Write a function to replace all adjectives in a given sentence with the nouns.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adjectives is:\",text)\n    \ndef replace_noun_with_adjective(text):\n    '''\n    Write a function to replace the first noun in a given sentence with the adjective.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adjectives is:\",text)\n    \ndef replace_noun_with_nouns(text):\n    '''\n    Write a function to replace the first noun in a given sentence with the nouns.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adjectives is:\",text)\n    \ndef replace_noun_with_adjectives(text):\n    '''\n    Write a function to replace the first noun in a given sentence with the adjectives.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adjectives is:\",text)\n    \ndef replace_all_nouns_with_adjectives(text):\n    '''\n    Write a function to replace all nouns in a given sentence with the adjectives.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adjectives is:\",text)\n    \ndef replace_noun_with_adverb(text):\n    '''\n    Write a function to replace the first noun in a given sentence with the adverbs.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adjectives is:\",text)\n    \ndef replace_nouns_with_nouns(text):\n    '''\n    Write a function to replace all nouns in a given sentence with the nouns.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changing adjectives is:\",text)\n    \ndef replace_nouns_with_nouns_and_adverbs(text):\n    '''\n    Write a function to replace all nouns in a given sentence with the nouns and adverbs.\n    '''\n    x=re.findall(r'\\w+ly',text)\n    y=x[0]\n    text=re.sub(y,'',text)\n    print(\"The sentence after changin"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    text = text.split(\" \")\n    adverb = []\n    pos = []\n    for word in text:\n        if word.endswith('ly') or word.endswith('ing') or word.endswith('ed') or word.endswith('ing'):\n            if word in adverb:\n                pass\n            else:\n                adverb.append(word)\n                pos.append(text.index(word))\n    return adverb, pos\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return text.find(\"adverb\")\n    \ndef find_adverb(text):\n    '''\n    Write a function to find the first adverb in a given sentence.\n    '''\n    return text.split()[text.find(\"adverb\")]\n    \ndef find_adverb_range(text):\n    '''\n    Write a function to find the first adverb and the position of the next adverb in a given sentence.\n    '''\n    return (text.find(\"adverb\"), text.find(\"adverb\") + 1)\n    \ndef find_all_adverbs(text):\n    '''\n    Write a function to find all the adverbs in a given sentence.\n    '''\n    return re.findall('adverb', text)\n    \ndef find_all_adverbs_range(text):\n    '''\n    Write a function to find the position of the first adverb and the position of the next adverb in a given sentence.\n    '''\n    return [(text.find(\"adverb\"), text.find(\"adverb\") + 1)]\n    \ndef find_all_adverbs_in_order(text):\n    '''\n    Write a function to find the position of all the adverbs in a given sentence in the order they appear.\n    '''\n    return [text.find(\"adverb\"), text.find(\"adverb\") + 1]\n    \ndef find_all_adverbs_without_order(text):\n    '''\n    Write a function to find all the adverbs in a given sentence, but without order.\n    '''\n    return re.findall('adverb', text)\n    \ndef find_all_noun_chunks(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, but without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, but with their associated verbs.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, but with their associated verbs, and without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_without_verbs(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, but without their associated verbs.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_without_verbs_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, but without their associated verbs, and without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, but with their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs_and_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, but with their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_without_verbs_with_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, without their associated verbs, but in order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_without_verbs_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, without their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, with their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs_and_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, with their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, with their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_without_verbs_with_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, without their associated verbs, but in order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_without_verbs_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, without their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs_with_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, with their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs_and_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, with their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_without_verbs_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, without their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs_and_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, with their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_without_verbs_with_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, without their associated verbs, but in order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, with their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_without_verbs_without_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, without their associated verbs, without order.\n    '''\n    return re.findall('noun chunk', text)\n    \ndef find_all_noun_chunks_with_verbs_with_order(text):\n    '''\n    Write a function to find all the noun chunks in a given sentence, with their associated verbs, withou"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.split()\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] in adverbs:\n            adverbs.append(text[i])\n            break\n    for i in range(len(text)):\n        if text[i] in adverbs:\n            return text[i], i\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    adverb = None\n    for n,word in enumerate(text.split()):\n        if re.match(\"adverb\",word):\n            adverb = word\n            result.append(n)\n            break\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = re.findall(r'\\s(a|an|the)\\s',text)\n    if noun:\n        for i in range(len(noun)):\n            j = 0\n            while j < len(text):\n                if text[j] == \" \":\n                    j += 1\n                    continue\n                if text[j] == \".\" or text[j] == \",\":\n                    j += 1\n                    continue\n                if text[j] == \"?\" or text[j] == \"!\" or text[j] == \";\":\n                    j += 1\n                    continue\n                if j+len(noun[i])+1 < len(text) and text[j+len(noun[i])+1] == \" \":\n                    if text[j:j+len(noun[i])+1] == noun[i]:\n                        return [noun[i],j]\n                j += 1\n        return \"None\"\n    else:\n        return \"None\"\ndef find_adverb_position_new(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = re.findall(r'\\s(a|an|the)\\s',text)\n    if noun:\n        for i in range(len(noun)):\n            if text.index(noun[i]) < text.index(\".\"):\n                return \"None\"\n            j = 0\n            while j < len(text):\n                if text[j] == \" \":\n                    j += 1\n                    continue\n                if text[j] == \".\" or text[j] == \",\":\n                    j += 1\n                    continue\n                if text[j] == \"?\" or text[j] == \"!\" or text[j] == \";\":\n                    j += 1\n                    continue\n                if j+len(noun[i])+1 < len(text) and text[j+len(noun[i])+1] == \" \":\n                    if text[j:j+len(noun[i])+1] == noun[i]:\n                        return [noun[i],j]\n                j += 1\n        return \"None\"\n    else:\n        return \"None\"\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.search(\"(?<=adverb\\s).*\",text)\n    print(result.group())\n    return result.group()\n    \ndef find_adverb_position2(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(\"(?<=adverb\\s).*\",text)\n    print(result)\n    return result\n    \ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    result = re.search(\"(?<=noun\\s).*\",text)\n    print(result.group())\n    return result.group()\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list=[]\n    adverb=re.compile(r'\\sad\\s')\n    for match in re.finditer(adverb,text):\n        #print(match.start(),match.end())\n        adverb_list.append(match.start())\n    return adverb_list\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(' ')\n    adverb_position = []\n    for i in range(0, len(sentence)):\n        if re.search(r\"\\b[a-zA-Z]+(?:[-][a-zA-Z]+)?\\b\", sentence[i]):\n            adverb_position.append(i)\n    return adverb_position\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s=6*(l**2)\n    return s\ndef surfacearea_rectangularprism(w,l):\n    '''\n    Write a function to find the surface area of a rectangular prism of a given width and length.\n    '''\n    s=2*(w*l)\n    return s\ndef volume_of_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere of a given radius.\n    '''\n    v=4/3*(3.14)*(r**3)\n    return v\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder of a given radius and height.\n    '''\n    v=3.14*(r**2)*h\n    return v\ndef volume_of_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone of a given radius and height.\n    '''\n    v=1/3*3.14*(r**2)*h\n    return v\ndef volume_of_prism(l,w,h):\n    '''\n    Write a function to calculate the volume of a prism of a given length, width, and height.\n    '''\n    v=l*w*h\n    return v\ndef volume_of_cuboid(l,w,h):\n    '''\n    Write a function to calculate the volume of a cuboid of a given length, width, and height.\n    '''\n    v=l*w*h\n    return v\ndef volume_of_pyramid(l,w,h):\n    '''\n    Write a function to calculate the volume of a pyramid of a given base and height.\n    '''\n    v=1/3*l*w*h\n    return v\ndef volume_of_rightcircularcone(r):\n    '''\n    Write a function to calculate the volume of a right circular cone.\n    '''\n    v=1/3*3.14*r**2\n    return v\ndef volume_of_leftcircularcone(r):\n    '''\n    Write a function to calculate the volume of a left circular cone.\n    '''\n    v=3.14*r**2\n    return v\ndef volume_of_ellipsoid(r,h):\n    '''\n    Write a function to calculate the volume of an ellipsoid of a given radius and height.\n    '''\n    v=4/3*3.14*(r**3)\n    return v\ndef volume_of_hemisphere(r):\n    '''\n    Write a function to calculate the volume of a hemisphere of a given radius.\n    '''\n    v=1/3*3.14*(r**3)\n    return v\ndef volume_of_cylinder_with_cover(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder with a cover of a given radius and height.\n    '''\n    v=3.14*r*h\n    return v\ndef volume_of_cube_with_lid(l):\n    '''\n    Write a function to calculate the volume of a cube with a lid of a given length.\n    '''\n    v=l**3\n    return v\ndef volume_of_cone_with_lid(r):\n    '''\n    Write a function to calculate the volume of a cone with a lid of a given radius.\n    '''\n    v=1/3*3.14*r**2\n    return v\ndef volume_of_pyramid_with_lid(l,w):\n    '''\n    Write a function to calculate the volume of a pyramid with a lid of a given length and width.\n    '''\n    v=1/3*l*w\n    return v\ndef volume_of_cuboid_with_lid(l,w,h):\n    '''\n    Write a function to calculate the volume of a cuboid with a lid of a given length, width, and height.\n    '''\n    v=l*w*h\n    return v\ndef volume_of_cylinder_with_cap(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder with a cap of a given radius and height.\n    '''\n    v=3.14*r*h\n    return v\ndef volume_of_cube_with_base(l):\n    '''\n    Write a function to calculate the volume of a cube with a base of a given length.\n    '''\n    v=l**3\n    return v\ndef volume_of_cylinder_with_cap_and_base(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder with a cap and base of a given radius and height.\n    '''\n    v=3.14*r*h\n    return v\ndef volume_of_sphere_with_cap(r):\n    '''\n    Write a function to calculate the volume of a sphere with a cap of a given radius.\n    '''\n    v=4/3*3.14*(r**3)\n    return v\ndef volume_of_pyramid_with_cap(l,w,h):\n    '''\n    Write a function to calculate the volume of a pyramid with a cap of a given length, width, and height.\n    '''\n    v=1/3*l*w*h\n    return v\ndef volume_of_cuboid_with_cap_and_base(l,w,h):\n    '''\n    Write a function to calculate the volume of a cuboid with a cap and base of a given length, width, and height.\n    '''\n    v=l*w*h\n    return v\ndef volume_of_sphere_with_cap_and_base(r):\n    '''\n    Write a function to calculate the volume of a sphere with a cap and base of a given radius.\n    '''\n    v=4/3*3.14*(r**3)\n    return v\ndef area_of_hemisphere(r):\n    '''\n    Write a function to calculate the surface area of a hemisphere of a given radius.\n    '''\n    s=2*3.14*r**2\n    return s\ndef area_of_cylinder_with_cover(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder with a cover of a given radius and height.\n    '''\n    s=2*3.14*r*h+2*3.14*r**2\n    return s\ndef area_of_cube_with_lid(l):\n    '''\n    Write a function to calculate the surface area of a cube with a lid of a given length.\n    '''\n    s=6*l**2\n    return s\ndef area_of_cone_with_lid(r):\n    '''\n    Write a function to calculate the surface area of a cone with a lid of a given radius.\n    '''\n    s=3.14*r**2\n    return s\ndef area_of_pyramid_with_lid(l,w):\n    '''\n    Write a function to calculate the surface area of a pyramid with a lid of a given length and width.\n    '''\n    s=w*l+6*w\n    return s\ndef area_of_cuboid_with_lid(l,w,h):\n    '''\n    Write a function to calculate the surface area of a cuboid with a lid of a given length, width, and height.\n    '''\n    s=2*(l*w+l*h+w*h)\n    return s\ndef area_of_cylinder_with_cap(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder with a cap of a given radius and height.\n    '''\n    s=2*3.14*r*(r+h)\n    return s\ndef area_of_cube_with_base(l):\n    '''\n    Write a function to calculate the surface area of a cube with a base of a given length.\n    '''\n    s=6*l**2\n    return s\ndef area_of_cylinder_with_cap_and_base(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder with a cap and base of a given radius and height.\n    '''\n    s=2*3.14*r*(r+h)\n    return s\nde"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l*l*6\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6*(l*l)\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2*6\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa = 6*l**2\n    print(sa)\n    return sa\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    print(l*l*l)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6*(l**2)\n    return surfacearea\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_positive = 0\n    for num in nums:\n        if num > 0:\n            num_positive += 1\n    ratio = float(num_positive) / len(nums)\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #I want to create an array that contains an integer for every element in nums.\n    #I'm going to use the array() function to create the array.\n    #array() takes two parameters, the typecode and the initializer.\n    #I want to use an integer for the typecode so I will use 'i' for integer.\n    #I want to create a new array so I will initialize it to zero.\n    count = array('i',[])\n    for i in nums:\n        count.append(i)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        if nums[0] > 0:\n            return 1\n        else:\n            return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef return_counter(nums):\n    '''\n    Write a function to count how many times a number is followed by a larger number.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        if nums[0] > nums[1]:\n            return 1\n        else:\n            return 0\n    count = 0\n    for i in range(0,len(nums)-1):\n        if nums[i] < nums[i+1]:\n            count += 1\n    return count\ndef is_valid_mountain_array(nums):\n    '''\n    Write a function that takes in an array of integers and returns a boolean\n    indicating whether the array is a valid mountain array.\n    '''\n    if len(nums) < 3:\n        return False\n    curr_max = 0\n    for i in range(0,len(nums)):\n        if nums[i] > curr_max:\n            curr_max = nums[i]\n        else:\n            break\n    if curr_max == 0:\n        return False\n    for j in range(len(nums)-1, -1, -1):\n        if nums[j] < curr_max:\n            return False\n    return True\ndef reverse_sentence(sentence):\n    '''\n    Write a function that takes in a string and returns a new string with its\n    chars reversed.\n    '''\n    if len(sentence) == 0:\n        return \"\"\n    if len(sentence) == 1:\n        return sentence[0]\n    return sentence[len(sentence)-1] + reverse_sentence(sentence[0:len(sentence)-1])\ndef is_valid_mountain_array(nums):\n    '''\n    Write a function that takes in an array of integers and returns a boolean\n    indicating whether the array is a valid mountain array.\n    '''\n    if len(nums) < 3:\n        return False\n    curr_max = 0\n    for i in range(0,len(nums)):\n        if nums[i] > curr_max:\n            curr_max = nums[i]\n        else:\n            break\n    if curr_max == 0:\n        return False\n    for j in range(len(nums)-1, -1, -1):\n        if nums[j] < curr_max:\n            return False\n    return True\ndef is_sorted(nums):\n    '''\n    Write a function that takes in an array of integers and returns a boolean\n    indicating whether the array is sorted in ascending order.\n    '''\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return True\n    for i in range(0,len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\ndef min_max_sum_array(nums):\n    '''\n    Write a function that takes in an array of integers and returns an array\n    of three integers, with the first element being the minimum sum of all\n    the elements in the array, the second element being the maximum sum of\n    all the elements in the array, and the third element being the sum of the\n    array itself.\n    '''\n    if len(nums) == 0:\n        return [0,0,0]\n    min = max = sum = 0\n    for i in nums:\n        sum += i\n        if min > i:\n            min = i\n        if max < i:\n            max = i\n    return [min,max,sum]\ndef return_pos_count(nums):\n    '''\n    Write a function that takes in an array of integers and returns a count of the\n    number of integers that have a positive value.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\ndef rotate_array(nums):\n    '''\n    Write a function that takes in an array of integers and returns a new array\n    with all the elements in the array rotated to the right n times.\n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    new_list = []\n    for i in range(0,len(nums)):\n        new_list.append(nums[(i+1)%len(nums)])\n    return new_list\ndef return_most_frequent(nums):\n    '''\n    Write a function that takes in an array of integers and returns an integer\n    representing the element that appears the most frequently in the array.\n    '''\n    if len(nums) == 0:\n        return 0\n    nums.sort()\n    if len(nums) == 1:\n        return nums[0]\n    count = 1\n    prev_num = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] == prev_num:\n            count += 1\n            if count > 1:\n                return prev_num\n        else:\n            count = 1\n        prev_num = nums[i]\n    return prev_num\ndef has_duplicate_pairs(nums):\n    '''\n    Write a function that takes in an array of integers and returns a boolean\n    indicating whether or not that array contains any duplicate pairs.\n    '''\n    if len(nums) == 0:\n        return False\n    for i in range(0,len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if nums[i] == nums[j]:\n                return True\n    return False\ndef two_sum(nums,target):\n    '''\n    Write a function that takes in an array of integers and returns an array of\n    two integers (indices) that sum up to the target number.\n    '''\n    if len(nums) == 0:\n        return []\n    dic = {}\n    for i in range(0,len(nums)):\n        complement = target - nums[i]\n        if complement in dic:\n            return [dic[complement],i]\n        else:\n            dic[nums[i]] = i\n    return []\ndef sort_array_by_parity(nums):\n    '''\n    Write a function that takes in an array of integers and returns an array of\n    the same size where each element is equal to the number of elements in the\n    array with an odd index.\n    '''\n    if len(nums) == 0:\n        return []\n    odd_index = 0\n    for i in range(0,len(nums)):\n        if nums[i] % 2 == 1:\n            odd_index += 1\n    new_list = [0]*odd_index\n    for i in range(0,len(nums)):\n        if nums[i] % 2 == 1:\n            new_list[i%odd_index] += 1\n    return new_list\ndef is_rotation(list1,list2):\n    '''\n    Write a function that takes in two arrays of integers and returns a boolean\n    indicating whether or not list2 is a rotation of list1.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    if len(list1)!= len(list2):\n        return False\n    for i in range(0,len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\ndef has_duplicates(nums):\n    '''\n    Write a function that takes in an array of integers and returns a boolean\n    indicating whether or not the array contains duplicates.\n    '''\n    if len(nums) == 0:\n        retur"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    length=len(nums)\n    positive_count=0\n    for i in range(length):\n        if nums[i]>0:\n            positive_count+=1\n    print(positive_count/length)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    positive_count=0\n    total_count=len(nums)\n    for num in nums:\n        if num >0:\n            positive_count += 1\n    return positive_count/total_count\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i >= 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return sum([1 for x in nums if x>0])/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [5, 4, -8, -10, -6, -4, -2, -6, -4, 3] \n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i]<list1[j]:\n                list1[i],list1[j] = list1[j],list1[i]\n    print(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_negative=0\n    for i in list1:\n        if i<0:\n            max_negative=i\n    return max_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in list1:\n        if i < 0 and abs(i) > max:\n            max = abs(i)\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    lst1 = list1\n    lst1.sort()\n    print(lst1)\n    print(\"Largest negative number is: \", lst1[-1])\n    \nlargest_neg([-1, -2, -3, 4])\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # list1 = [2, -3, 5, -8, -6, -1, -5, -9]\n    # return largest_neg(list1)\n    \n    # if len(list1) == 0:\n    #     return False\n    # else:\n    #     i = 0\n    #     neg_num = 0\n    #     while i < len(list1):\n    #         if list1[i] < 0 and list1[i] > neg_num:\n    #             neg_num = list1[i]\n    #         i += 1\n    #     return neg_num\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #max(list1)\n    \n    \n    if list1 == []:\n        return \"List is empty\"\n    else:\n        list1.sort()\n        if list1[0] < 0:\n            return \"the largest negative number is -{0}\".format(list1[0])\n        else:\n            return \"there is no negative number\"\n            "
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in list1:\n        if i < 0:\n            return i\n    return None\ndef smallest_pos(list1):\n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    for i in list1:\n        if i > 0:\n            return i\n    return None\ndef neg_numbers(list1):\n    '''\n    Write a python function to find the number of negative numbers in the given list.\n    '''\n    c = 0\n    for i in list1:\n        if i < 0:\n            c+=1\n    return c\ndef remove_neg(list1):\n    '''\n    Write a python function to remove all negative numbers from the given list.\n    '''\n    for i in list1:\n        if i < 0:\n            list1.remove(i)\n    return list1\ndef remove_dups(list1):\n    '''\n    Write a python function to remove duplicate values from the given list.\n    '''\n    return list(set(list1))\ndef rotate(list1):\n    '''\n    Write a python function to rotate the given list by the given value.\n    '''\n    a = list1[:]\n    c = 0\n    for i in range(len(a)):\n        c = (i + list1[i]) % len(a)\n        a[i] = list1[c]\n    return a\ndef sum_list(list1):\n    '''\n    Write a python function to sum the numbers in the given list.\n    '''\n    return sum(list1)\ndef palindrome(list1):\n    '''\n    Write a python function to check if the given list is a palindrome or not.\n    '''\n    list1.sort()\n    return list1 == list1[::-1]\ndef find_unique(list1):\n    '''\n    Write a python function to find the unique element in the given list.\n    '''\n    for i in list1:\n        if list1.count(i) == 1:\n            return i\ndef mean(list1):\n    '''\n    Write a python function to find the average of the given list.\n    '''\n    return sum(list1) / len(list1)\ndef fib(n):\n    '''\n    Write a python function to print the Fibonacci sequence upto the given number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a, end=\" \")\n        a, b = b, a+b\n    print()\ndef count_fib(list1):\n    '''\n    Write a python function to count the number of Fibonacci numbers in the given list.\n    '''\n    c = 0\n    a = 0\n    b = 1\n    for i in list1:\n        if a == i:\n            c+=1\n        a, b = b, a+b\n    return c\ndef sum_fib(list1):\n    '''\n    Write a python function to sum the Fibonacci numbers in the given list.\n    '''\n    a = 0\n    b = 1\n    c = 0\n    for i in list1:\n        c = a+b\n        a, b = b, c\n    return c\ndef reverse(list1):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    return list1[::-1]\ndef max_list(list1):\n    '''\n    Write a python function to find the maximum number in the given list.\n    '''\n    return max(list1)\ndef min_list(list1):\n    '''\n    Write a python function to find the minimum number in the given list.\n    '''\n    return min(list1)\ndef common_elements(list1, list2):\n    '''\n    Write a python function to find the common elements in the given two lists.\n    '''\n    list1.sort()\n    list2.sort()\n    c = []\n    a, b = 0, 0\n    while a < len(list1) and b < len(list2):\n        if list1[a] == list2[b]:\n            c.append(list1[a])\n            a+=1\n            b+=1\n        elif list1[a] > list2[b]:\n            b+=1\n        else:\n            a+=1\n    return c\ndef reverse_string(str1):\n    '''\n    Write a python function to reverse the string.\n    '''\n    return str1[::-1]\ndef pal_perm(list1):\n    '''\n    Write a python function to check if the given string is a permutation of a palindrome or not.\n    '''\n    list1 = list(list1)\n    list1.sort()\n    return list1 == list1[::-1]\ndef check_palin(str1):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    '''\n    list1 = list(str1)\n    list1.sort()\n    return str1 == \"\".join(list1[::-1])\ndef binary_conversion(dec1):\n    '''\n    Write a python function to convert a decimal number into binary number.\n    '''\n    c = []\n    d = 0\n    e = 0\n    while d < dec1:\n        d = d + 1\n        c.append(d)\n    print(c)\n    for i in c:\n        e = e + 2 ** c.index(i)\n    return e\ndef is_pangram(str1):\n    '''\n    Write a python function to check if the given string is a pangram or not.\n    '''\n    a = list(str1.lower())\n    a.sort()\n    a = set(a)\n    if len(a) == 26:\n        return True\n    else:\n        return False\ndef count_chars(str1):\n    '''\n    Write a python function to count the number of characters in the string.\n    '''\n    return len(str1)\ndef check_brackets(str1):\n    '''\n    Write a python function to check if the given string has balanced brackets or not.\n    '''\n    l = []\n    for i in str1:\n        if i in [\"(\",\"[\",\"{\"]:\n            l.append(i)\n        else:\n            if len(l) == 0:\n                return False\n            if (i == \")\" and l.pop()!= \"(\") or (i == \"}\" and l.pop()!= \"{\") or (i == \"]\" and l.pop()!= \"[\"):\n                return False\n    if len(l) == 0:\n        return True\n    else:\n        return False\ndef is_balanced_par(str1):\n    '''\n    Write a python function to check if the given string is a balanced parentheses or not.\n    '''\n    l = []\n    for i in str1:\n        if i in [\"(\",\"[\",\"{\"]:\n            l.append(i)\n        else:\n            if len(l) == 0:\n                return False\n            if (i == \")\" and l.pop()!= \"(\") or (i == \"}\" and l.pop()!= \"{\") or (i == \"]\" and l.pop()!= \"[\"):\n                return False\n    if len(l) == 0:\n        return True\n    else:\n        return False\ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check if the given two strings are anagrams or not.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    return sorted(str1) == sorted(str2)\ndef is_anagram_1(str1, str2):\n    '''\n    Write a python function to check if the given two strings are anagrams or not.\n    '''\n    dic1, dic2 = {}, {}\n    for i in str1:\n        if i in dic1:\n            dic1[i] += 1\n        else:\n            dic1[i] = 1\n    for i in str2:\n        if i in dic2:\n            dic2[i] += 1\n        else:\n            dic2[i] = 1\n    return dic1 == dic2\ndef digit_freq"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    min = None\n    for num in list1:\n        if (min is None) or (num < min):\n            min = num\n    return min\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -9999\n    for i in range(0,len(list1)):\n        if list1[i] < max_num:\n            max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for i in range(0,len(list1)):\n        if(list1[i] < 0):\n            neg_list.append(list1[i])\n    print(max(neg_list))\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(test_list[i][:K] + test_list[i][K+1:]) for i in range(len(test_list))]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Your code here\n    return trim_tuple_helper(test_list, K, 0)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return trim_list([tuple(t[:K]) for t in test_list], K)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for index in range(len(test_list)):\n        if len(test_list[index]) > K:\n            test_list[index] = test_list[index][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(ele for ele in each if ele not in each[K:]) for each in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # your code here\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    print(test_list)\n    new_list = []\n    for i in range(0,len(test_list)):\n        if len(test_list[i]) >= K:\n            new_list.append(test_list[i])\n    print(new_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K == 0:\n        return tuple(test_list)\n    else:\n        return tuple(test_list[:K])\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(tuple(product(test_tup1, test_tup2)))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup3 = ()\n    for i in range(0, len(test_tup1)):\n        test_tup3 += (test_tup1[i]*test_tup2[i], )\n    return test_tup3\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication_output = ()\n    for index in range(len(test_tup1)):\n        index_multiplication_output += (test_tup1[index]*test_tup2[index],)\n    return index_multiplication_output\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    result_list = []\n    for index, x in enumerate(test_list1):\n        result_list.append(x * test_list2[index])\n    return tuple(result_list)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplied_tup = []\n    for x, y in zip(test_tup1, test_tup2):\n        multiplied_tup.append(x * y)\n    return tuple(multiplied_tup)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    product = []\n    for idx in range(len(test_tup1)):\n        product.append(test_tup1[idx]*test_tup2[idx])\n    return tuple(product)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n        return result\n    else:\n        return \"Tuples are of different lengths\"\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = test_tup1[0] * test_tup1[1]\n    test_tup2 = test_tup2[0] * test_tup2[1]\n    return (test_tup1, test_tup2)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)==len(test_tup2):\n        result=tuple(map(lambda x,y:x*y,test_tup1,test_tup2))\n    else:\n        print(\"the tuples are not of equal size\")\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for ele in tup: \n        print(\"Occurence of \", ele, \"is \", count[ele]) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # tup = (\"a\", \"a\", \"b\", \"a\", \"b\", \"a\", \"c\", \"d\", \"c\")\n    # lst = [\"a\", \"b\", \"c\"]\n    tup = tuple(tup)\n    # tup = tuple(tup)\n    lst = tuple(lst)\n    count = Counter(tup)\n    for i in lst:\n        print(f\"Occurence of {i} is: {count[i]}\")\n        \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = {} \n    for i in lst: \n        counter[i] = tup.count(i) \n    return counter \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(lst) \n    for i, j in tup:\n        if counts[i]:\n            print(f'Count of {i} is {counts[i]}')\n            "
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    l = []\n    for i in range(len(lst)):\n        l.append([lst[i],tup.count(lst[i])])\n    return l\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = Counter(lst) \n    for ele in tup: \n        if res[ele] == 1: \n            print (\"The number of occurrence of %d is %d\"%(ele, res[ele])) \n        else: \n            print (\"The number of occurrence of %d is %d\"%(ele, res[ele])) \n    return\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_list = []\n    lst_list = []\n    for tup in tup:\n        for lst in lst:\n            if tup.count(lst) > 0:\n                tup_list.append(tup)\n                lst_list.append(lst)\n    print(Counter(tup_list))\n    print(Counter(lst_list))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i in lst: \n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = dict() \n    for i in lst: \n        if i not in d: \n            d[i] = 1\n        else: \n            d[i] = d[i] + 1\n    for k, v in tup: \n        print('key = ', k, 'value = ', v, 'frequency = ', d.get(k, 0)) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    cube_list = []\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**3)\n        \ncube_nums([1,2,3,4,5])\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num ** 3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = [num**3 for num in nums]\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda x: x**3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for n in nums:\n        cubes.append(n**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i * (3*i-1) / 2\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = [1, 1, 2]\n    for i in range(2, n):\n        b = [a[i] + a[i - 2], a[i - 1] + a[i - 3]]\n        a.append(b[0])\n        a.append(b[1])\n    return sum(a)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0 or n == 1:\n        return n\n    return cal_sum(n-1) + (4 * (n-1) + 2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    while n >= 2:\n        for i in range(2,n):\n            if n % i == 0:\n                n = n//i\n                sum += i\n                break\n        else:\n            n = n - 1\n            sum += n\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for num in range(2, n+1):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum += num\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += cal_num(i)\n    return sum\n    \n    \ndef cal_num(n):\n    '''\n    Write a function to calculate the nth perrin number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += 1/cal_denominator(i)\n    return result\n    \n    \ndef cal_denominator(n):\n    '''\n    Write a function to calculate the denominator of the nth perrin number.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += (n - i)/(n - i + 1)\n    return result\n    \n    \ndef main():\n    print(cal_num(1))\n    print(cal_sum(20))\n    \nmain("
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=1/pow(i,2)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 1\n    for i in range(n):\n        sum += 1/(2*i+1)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for num in range(n):\n        sum += 2 * num * num\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = 0\n    while n > 0:\n        res += math.factorial(4 * n) // (math.factorial(n) ** 4)\n        n -= 1\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # return [string[i:i+l] for i in range(0,len(string),l)]\n    return list(map(lambda x: x[l-1:], str))\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    return [s for s in str if len(s) == l]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for i in range(len(l)):\n        if len(l[i]) == int(str):\n            str_list.append(l[i])\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [val[l] for val in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    f = []\n    for i in str:\n        if len(i) >= l:\n            f.append(i[0:l])\n    return f\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    while i < len(str):\n        print(str[i:i + l])\n        i += l\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == l:\n        return str\n    return None\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in l:\n        if len(i) >= l:\n            result.append(i[:l])\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [v[l:] for v in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.replace(' ','')\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text=text1\n    text=re.sub(r'\\s+',\"\", text)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result=''\n    for c in text1:\n        if c!=' ':\n            result+=c\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \", \"\")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1.strip():\n        return text1\n    else:\n        return text1\n        \nprint(remove_whitespaces('   '))\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == '':\n        return None\n    new_text = ''\n    for i in text1:\n        if i == '\\n' or i =='' or i == '\\t':\n            continue\n        new_text += i\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n        \nprint(loss_amount(110,120))\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount if actual_cost > sale_amount else 0\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # list of prime factors\n    sum = 0\n    p = 2\n    while (n > 1) :\n        if (n % p == 0):\n            while (n % p == 0) :\n                n = n / p\n            sum += p\n        p = p + 1\n    return sum \ndef printTuple(tu) : \n    '''\n    Write a python function to print the tuple in reverse order.\n    '''\n    for i in reversed(tu):\n        print(i,end=\",\")\n    print(\"\\b\")\ndef sumofTuples(n,m,k):\n    '''\n    Write a python function to sum a tuple of tuples.\n    '''\n    tup = ()\n    for i in range(n):\n        tup = tup + ((i,i**2,i**3),)\n    print(tup)\n    tup1 = ()\n    tup1 = tup1 + ((i,i**2,i**3) for i in range(m))\n    print(tup1)\n    tup2 = ()\n    tup2 = tup2 + ((i,i**2,i**3) for i in range(k))\n    print(tup2)\ndef findPrimeTuples(n,m):\n    '''\n    Write a python function to print prime numbers in a given range.\n    '''\n    tup = ()\n    for i in range(n):\n        tup = tup + ((i,i**2,i**3),)\n    for i in range(1,m+1):\n        if i%2==0:\n            print(i)\ndef getPrimeFactors(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    tup = ()\n    for i in range(2,n+1):\n        if n%i==0:\n            tup = tup + (i,)\n    print(tup)\ndef tuple_tuple_product(tu1,tu2):\n    '''\n    Write a python function to find product of two tuples of tuples.\n    '''\n    tup3 = ()\n    for i in range(len(tu1)):\n        tup3 = tup3 + ((tu1[i][0]*tu2[i][0],tu1[i][1]*tu2[i][1],tu1[i][2]*tu2[i][2]),)\n    print(tup3)\ndef tuple_tuple_sum(tu1,tu2):\n    '''\n    Write a python function to find sum of two tuples of tuples.\n    '''\n    tup3 = ()\n    for i in range(len(tu1)):\n        tup3 = tup3 + ((tu1[i][0]+tu2[i][0],tu1[i][1]+tu2[i][1],tu1[i][2]+tu2[i][2]),)\n    print(tup3)\ndef list_factorial(lst):\n    '''\n    Write a python function to find factorial of a list.\n    '''\n    tup = ()\n    for i in lst:\n        tup = tup + (math.factorial(i),)\n    print(tup)\ndef findAnagram(str1, str2): \n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    if(sorted(str1)== sorted(str2)): \n        print(\"The strings are anagram of each other\") \n    else: \n        print(\"The strings aren't anagram of each other\") \ndef palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    rev = ''.join(reversed(s))\n    if(s == rev):\n        return True\n    return False\ndef fib(n):\n    '''\n    Write a python function to print first n fibonacci numbers.\n    '''\n    a = 0\n    b = 1\n    if n <= 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        print(\"Fibonacci sequence:\")\n        print(a)\n    else:\n        print(\"Fibonacci sequence:\")\n        print(a)\n        print(b)\n        while(n>2):\n            c = a+b\n            a = b\n            b = c\n            print(c)\n            n = n-1\ndef reverse(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    rstr = \" \"\n    for i in s:\n        rstr = i + rstr\n    return rstr\ndef anagram(s1,s2):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    a = list(s1)\n    b = list(s2)\n    a.sort()\n    b.sort()\n    if a == b:\n        print(\"The strings are anagram of each other\")\n    else:\n        print(\"The strings aren't anagram of each other\")\ndef palindrom(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if s == reverse(s):\n        print(\"Yes,it is a palindrome\")\n    else:\n        print(\"No,it is not a palindrome\")\ndef isPermutation(s1,s2):\n    '''\n    Write a python function to check whether two strings are permutation or not.\n    '''\n    if(len(s1)!=len(s2)):\n        return False\n    s1 = s1.lower()\n    s2 = s2.lower()\n    s1 = list(s1)\n    s2 = list(s2)\n    s1.sort()\n    s2.sort()\n    if s1 == s2:\n        print(\"Yes,it is a permutation\")\n    else:\n        print(\"No,it isn't a permutation\")\ndef anagram(s1,s2):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    a = list(s1)\n    b = list(s2)\n    a.sort()\n    b.sort()\n    if a == b:\n        print(\"The strings are anagram of each other\")\n    else:\n        print(\"The strings aren't anagram of each other\")\ndef palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if s == reverse(s):\n        print(\"Yes,it is a palindrome\")\n    else:\n        print(\"No,it isn't a palindrome\")\ndef isPermutation(s1,s2):\n    '''\n    Write a python function to check whether two strings are permutation or not.\n    '''\n    if(len(s1)!=len(s2)):\n        return False\n    s1 = s1.lower()\n    s2 = s2.lower()\n    s1 = list(s1)\n    s2 = list(s2)\n    s1.sort()\n    s2.sort()\n    if s1 == s2:\n        print(\"Yes,it is a permutation\")\n    else:\n        print(\"No,it isn't a permutation\")\ndef anagram(s1,s2):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    a = list(s1)\n    b = list(s2)\n    a.sort()\n    b.sort()\n    if a == b:\n        print(\"The strings are anagram of each other\")\n    else:\n        print(\"The strings aren't anagram of each other\")\ndef palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if s == reverse(s):\n        print(\"Yes,it is a palindrome\")\n    else:\n        print(\"No,it isn't a palindrome\")\ndef isPermutation(s1,s2):\n    '''\n    Write a python function to check whether two strings are permutation or not.\n    '''\n    i"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 1\n    sum = 0\n    while (count * count <= n): \n        if (n % count == 0): \n            if (n / count == count): \n                sum += count \n            else: \n                sum += count \n                sum += n / count \n        count += 1\n    return sum \n    \ndef reverseSum(n) : \n    '''\n    Write a python function to find the reverse sum of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1): \n        sum += i \n    return sum \n    \ndef sumofDigits(n) : \n    '''\n    Write a python function to find the sum of digits in a number.\n    '''\n    return sum([int(i) for i in list(str(n))]) \n    \ndef sumofSquareOfDigits(n) : \n    '''\n    Write a python function to find the sum of squares of digits in a number.\n    '''\n    return sum([int(i) ** 2 for i in list(str(n))]) \n    \ndef sumofNumbers(n) : \n    '''\n    Write a python function to find the sum of digits of a number recursively.\n    '''\n    sum = 0\n    if n == 0: \n        return 0\n    else: \n        return n % 10 + sumofNumbers(int(n / 10)) \n    \ndef printAllSubsets(a) : \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    n = len(a) \n    for i in range(2 ** n): \n        s = bin(i)[2:].zfill(n) \n        print([a[j] for j in range(n) if s[j] == '1']) \n        \ndef printAllSubsetsRec(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsRec(a, i + 1, s + [a[i]]) \n        printAllSubsetsRec(a, i + 1, s) \n        \ndef printAllSubsetsIter(a): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    n = len(a) \n    for i in range(2 ** n): \n        s = bin(i)[2:].zfill(n) \n        print([a[j] for j in range(n) if s[j] == '1']) \n        \ndef isPerfect(n): \n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if n % i == 0: \n            sum += i \n    return sum == n \n    \ndef printAllSubsetsIter2(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsIter2(a, i + 1, s + [a[i]]) \n        printAllSubsetsIter2(a, i + 1, s) \n        \ndef printAllSubsetsRec2(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsRec2(a, i + 1, s + [a[i]]) \n        printAllSubsetsRec2(a, i + 1, s) \n        \ndef printAllSubsetsIter3(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsIter3(a, i + 1, s + [a[i]]) \n        printAllSubsetsIter3(a, i + 1, s) \n        \ndef printAllSubsetsRec3(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsRec3(a, i + 1, s + [a[i]]) \n        printAllSubsetsRec3(a, i + 1, s) \n    \ndef printAllSubsetsIter4(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsIter4(a, i + 1, s + [a[i]]) \n        printAllSubsetsIter4(a, i + 1, s) \n        \ndef printAllSubsetsRec4(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsRec4(a, i + 1, s + [a[i]]) \n        printAllSubsetsRec4(a, i + 1, s) \n    \ndef printAllSubsetsIter5(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsIter5(a, i + 1, s + [a[i]]) \n        printAllSubsetsIter5(a, i + 1, s) \n        \ndef printAllSubsetsRec5(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsRec5(a, i + 1, s + [a[i]]) \n        printAllSubsetsRec5(a, i + 1, s) \n    \ndef printAllSubsetsIter6(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsIter6(a, i + 1, s + [a[i]]) \n        printAllSubsetsIter6(a, i + 1, s) \n        \ndef printAllSubsetsRec6(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsRec6(a, i + 1, s + [a[i]]) \n        printAllSubsetsRec6(a, i + 1, s) \n    \ndef printAllSubsetsIter7(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsIter7(a, i + 1, s + [a[i]]) \n        printAllSubsetsIter7(a, i + 1, s) \n        \ndef printAllSubsetsRec7(a, i, s): \n    '''\n    Write a python function to print all possible subsets of given set.\n    '''\n    if i == len(a): \n        print(s) \n    else: \n        printAllSubsetsRec7(a, i + 1, s + [a[i]]) \n        printAllSubsetsRec7(a, i + 1, s) \n    \ndef printAllSubsetsIter8(a, i, s): "
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 and n%i == 0 : \n            res = res + i + n//i\n        \n    return res\ndef palindrome(n) : \n    '''\n    Write a Python function to check whether a number is a palindrome or not.\n    Palindrome are the numbers for which reverse is exactly same as the original one. For eg. 121 \n    '''\n    original = n \n    reverse = 0 \n    while n > 0 : \n        remainder = n%10\n        reverse = reverse*10 + remainder\n        n = n//10\n        \n    if original == reverse : \n        return True\n    else : \n        return False\n        \ndef is_prime(n) : \n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    if n < 2 : \n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False\n        \n    return True\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                result = result + i \n    return result \ndef FactorsSum(n) : \n    '''\n    Write a Python function to get the sum of the prime factors of a number.\n    '''\n    i = 2\n    result = 0\n    while i * i <= n : \n        if (n % i == 0) : \n            n = n / i \n            result = result + i \n        else : \n            i = i + 1\n    if (n > 1) : \n        result = result + n \n    return result \ndef is_prime(n) : \n    '''\n    Write a Python function to check if a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef is_perfect(n) : \n    '''\n    Write a Python function to check if a number is perfect or not.\n    '''\n    sum = 0\n    i = 1\n    while i <= n : \n        if (n % i == 0) : \n            sum = sum + i \n        i = i + 1\n    return sum == n \ndef nth_prime(n) : \n    '''\n    Write a Python function to return the nth prime number.\n    '''\n    count = 1\n    num = 2\n    while (count < n) : \n        num = num + 1\n        if (is_prime(num)) : \n            count = count + 1\n    return num \ndef nth_perfect(n) : \n    '''\n    Write a Python function to return the nth perfect number.\n    '''\n    num = 1\n    i = 1\n    while (i <= n) : \n        num = num + i \n        if (is_perfect(num)) : \n            i = i + 1\n    return num \ndef is_palindrome(n) : \n    '''\n    Write a Python function to check if a number is a palindrome or not.\n    '''\n    num = n \n    temp = 0\n    while (num > 0) : \n        temp = temp * 10 + num % 10\n        num = num / 10\n    return (temp == n) \ndef count_digits(n) : \n    '''\n    Write a Python function to count the digits in a number.\n    '''\n    count = 0\n    while (n!= 0) : \n        count = count + 1\n        n = n // 10\n    return count \ndef digits_sum(n) : \n    '''\n    Write a Python function to find the sum of digits in a number.\n    '''\n    sum = 0\n    while (n!= 0) : \n        sum = sum + (n % 10)\n        n = n // 10\n    return sum \ndef is_pandigital(n) : \n    '''\n    Write a Python function to check if a number is pandigital or not.\n    '''\n    i = 1\n    temp = 0\n    while (i <= count_digits(n)) : \n        temp = temp * 10 + (n % 10) \n        n = n // 10\n        i = i + 1\n    if (temp == n) : \n        return True\n    else : \n        return False\ndef prime_list(n) : \n    '''\n    Write a Python function to return a list of primes upto a given number.\n    '''\n    prime_numbers = []\n    for i in range(2, n + 1) : \n        if (is_prime(i)) : \n            prime_numbers.append(i)\n    return prime_numbers\ndef prime_factor(n) : \n    '''\n    Write a Python function to return a list of prime factors of a given number.\n    '''\n    prime_factors = []\n    for i in range(2, n + 1) : \n        if (n % i == 0) : \n            while (n % i == 0) : \n                prime_factors.append(i) \n                n = n // i \n    return prime_factors \ndef factors_sum(n) : \n    '''\n    Write a Python function to return the sum of the factors of a given number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            sum = sum + i \n    return sum \ndef factorial(n) : \n    '''\n    Write a Python function to find the factorial of a given number.\n    '''\n    if (n <= 1) : \n        return 1\n    return n * factorial(n - 1) \ndef gcd(x, y) : \n    '''\n    Write a Python function to find the greatest common divisor of two numbers.\n    '''\n    while (y!= 0) : \n        (x, y) = (y, x % y) \n    return x \ndef lcm(x, y) : \n    '''\n    Write a Python function to find the lowest common multiple of two numbers.\n    '''\n    return (x * y) // gcd(x, y) \ndef find_perfect_square(n) : \n    '''\n    Write a Python function to check if a given number is a perfect square or not.\n    '''\n    root = int(math.sqrt(n))\n    if (math.sqrt(n) - root == 0) : \n        return True\n    return False \ndef find_factors(n) : \n    '''\n    Write a Python function to return a list of factors of a number.\n    '''\n    factors = []\n    i = 1\n    while (i <= n) : \n        if (n % i == 0) : \n            factors.append(i) \n        i = i + 1\n    return factors \ndef find_prime_factors(n) : \n    '''\n    Write a Python function to return a list of prime factors of a number.\n    '''\n    prime_factors = []\n    for i in range(2, n + 1) : \n        if (n % i == 0) : \n            while (n % i == 0) : \n                prime_factors.append(i) \n                n = n // i \n    return prime_factors \ndef find_fibonacci_number(n) : \n    '''\n    Write a Python function to return the nth Fibonacci number.\n    '''\n    if (n <= 1) : \n        return n \n    else : \n        return (find_fibonacci_number(n - 1) + find_fibonacci_number(n - 2)) \ndef find_fibonacci_number_2(n) : \n    '''\n    Write a Python function to return the nth Fibonacci number.\n    '''\n    if (n <= 1) : \n        return n \n    f0 = 0\n    f1 = 1\n    fn = 1\n    for i in range(1, n) : \n        fn = f0 + f1\n        f0 = f1\n        f1 = fn \n    return fn \ndef is_pandigital_prime(n) : \n    '''\n    Write a Python function to check if a number is pandigital and a prime number or not.\n    '''\n    if (is_pandigital(n) == False) : \n        return False\n    prime_factors = find_prime_factors(n) \n    if (len(prime_factors) == 1) : \n        return True\n    else : \n        return False \ndef sum_divisors(n) : \n    '''\n    Write a Python function to find the sum of divisors of a given number.\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            if (n % 2 == 0) : \n                sum += i \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0) : \n        return 0\n    s = 1\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                s = s + i \n            else : \n                s = s + (i + n / i) \n    return s\n    \ndef sumofDivisors(n) : \n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    s = 1\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                s = s + i \n            else : \n                s = s + (i + n / i) \n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    temp = n \n    sum1 = 0\n    for i in range(1,temp): \n        if(n%i == 0): \n            if(i%2==0): \n                sum1 += i \n                temp = temp/i \n    return sum1\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            if (i % 2 == 0):\n                sum += i\n            if (n % i == 0):\n                if (i % 2 == 0):\n                    sum += i\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)+1)): \n        if (n % i == 0): \n            if (i % 2 == 0): \n                sum += i \n            else: \n                sum += n // i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n <= 0) : \n        return 0\n    sum = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                sum += i \n            if (n / i == i) : \n                sum += i \n    return sum \n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'[a-zA-Z]+[0-9a-zA-Z]*z[a-zA-Z]+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz2(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z[a-zA-Z]+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz3(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?<![a-zA-Z])[a-zA-Z]+z[a-zA-Z]+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz4(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z[a-zA-Z]+\\b(?![a-zA-Z])'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz5(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?<=z)[a-zA-Z]+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz6(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\bz[a-zA-Z]+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz7(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?<![a-z])z[a-zA-Z]+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz8(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?<=z)[a-zA-Z]+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz9(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?<![a-zA-Z])z\\b'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz10(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\bz\\b'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz11(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z\\w+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz12(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'[a-zA-Z]+[0-9a-zA-Z]*z[0-9a-zA-Z]*'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz13(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?<=\\s)\\w+z[a-zA-Z]+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz14(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?<=\\s)\\bz[a-zA-Z]+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz15(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z[a-zA-Z]+\\b'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz16(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z\\w+z'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz17(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?<=\\s)z\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz18(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?<=\\s)\\bz\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz19(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?<=\\s)\\bz\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz20(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z\\w+\\b'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz21(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?<=\\s)\\bz\\w+\\b'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz22(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z\\b'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz23(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\bz\\w+\\b'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz24(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z\\w+z'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz25(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z\\w+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz26(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\w+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz27(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z\\w+'\n    result = re.findall(pattern, text)\n    return result\n    \n    \ndef text_match_wordz28(text):\n    '''\n    Write a function that matches a word containing "
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #Use re.search\n    #Write a regular expression to match a word that contains a z\n    reg = re.compile(\"z.+\")\n    m = re.search(reg, text)\n    if m is not None:\n        print(\"Found: \", m.group())\n    else:\n        print(\"Not Found\")\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    r=re.compile(r\"\\b\\w*z\\w*\\b\")\n    result=r.findall(text)\n    print(result)\n    if result == []:\n        print(\"No wordz\")\n    else:\n        print(\"wordz\")\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    m = re.search('\\w*z\\w*', text)\n    if m:\n        return m.group(0)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.findall('\\\\b[a-z]+z[a-z]+\\\\b', text.lower())\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = '\\w*z\\w*'\n    result = re.findall(pattern,text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b\\w*z\\w*\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)\n    # return (bool(re.search(r'z', text)))\n    # return any(letter == 'z' for letter in text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #search = re.search(r\"\\w*z\\w*\", text)\n    search = re.search(r\"\\w*z\\w*\", text)\n    if search:\n        return search.group(0)\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum_list = [1,3,5,7,8,10,12]\n    if monthnum2 in monthnum_list:\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month31 = [1,3,5,7,8,10,12]\n    if monthnum2 in month31:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        monthnum = int(monthnum2)\n        if monthnum > 0 and monthnum <= 12:\n            if monthnum % 2 == 0 and monthnum!= 2:\n                if monthnum <= 7:\n                    if monthnum % 2 == 0:\n                        if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n                            return True\n                        else:\n                            return False\n                    elif monthnum == 2:\n                        return True\n                else:\n                    return False\n            elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except Exception as e:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        print('The number of days in the month are 31')\n    elif monthnum2 in [4,6,9,11]:\n        print('The number of days in the month are 30')\n    elif monthnum2 == 2:\n        print('The number of days in the month are 28')\n    else:\n        print('The month does not exist')\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        return True\n    elif monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11:\n        return False\n    else:\n        return \"invalid month number\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 4 == 0 and monthnum2 % 100!= 0 or monthnum2 % 400 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_string_list = []\n    for element in stringlist:\n        rev_string_list.append(element[::-1])\n    return rev_string_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    listlength = len(stringlist)\n    for x in range(0,listlength):\n        if type(stringlist[x]) is str:\n            stringlist[x] = stringlist[x][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in stringlist:\n        newlist.append(i[::-1])\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # A list comprehension is a compact way of creating a list from an existing list.\n    # It can be used to construct new lists from any sequence.\n    # The list comprehension takes the form of:\n    # newlist = [transform sequence or set of elements]\n    # in this example, the result is the reverse of the string list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = [x[::-1] for x in stringlist]\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for i in range(len(stringlist)):\n        reverse_list.append(stringlist[i][::-1])\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for string in stringlist:\n        if isinstance(string, str):\n            print(string[::-1])\n        else:\n            print(string)\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Initialize an empty list to store the reversed string\n    newstringlist = []\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [i[::-1] for i in stringlist]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    max_length = 1\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            sub_lst = lst[i:j+1]\n            if len(sub_lst) <= min_length:\n                min_length = len(sub_lst)\n                min_sub_lst = sub_lst\n    return min_sub_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub=min(lst,key=len)\n    return sub\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n            min_lst = item\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for sublst in lst:\n        if len(sublst) < min_len:\n            min_len = len(sublst)\n    return min_len\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    for i in range(len(lst)):\n        if min > len(lst[i]):\n            min = len(lst[i])\n            min_list = i\n    return lst[min_list]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Your code here\n    n=len(lst)\n    minlen=0\n    for i in range(1,n):\n        if (len(lst[0:i])>=minlen):\n            minlen=len(lst[0:i])\n    return minlen\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sub = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sub = lst[i]\n    return min_sub\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    result=min(lst,key=len)\n    return result\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=len(lst[0])\n    for sub_lst in lst:\n        if min_len>len(sub_lst):\n            min_len=len(sub_lst)\n    return min_len\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min([[i, len(i)] for i in lst], key=lambda x: x[1])[0]\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return (l+b)*2\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r*r\ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*math.pi*r\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r*r*r\ndef sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r*r*h\ndef cone_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 1/2*math.pi*r*(r+math.sqrt(r*r+h*h))\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi*r*r+math.pi*r*h\ndef pyramid_volume(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1/3*math.pi*h*l*l\ndef pyramid_surface_area(l,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return (1/2)*math.pi*h*(l*l+l*math.sqrt(2*h*h+l*l))\ndef parallelepiped_volume(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return l*w*h\ndef parallelepiped_surface_area(l,w,h):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return 2*(l*w+l*h+w*h)\ndef right_angled_triangle_area(b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return 1/2*b*h\ndef right_angled_triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return b+h+math.sqrt(b*b+h*h)\ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 1/2*b*h\ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return b+h\ndef trapezoid_area(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return 1/2*(b1+b2)*h\ndef trapezoid_perimeter(b1,b2,h):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    return b1+b2+h\ndef ellipsoid_volume(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return 4/3*math.pi*a*b*c\ndef ellipsoid_surface_area(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4*math.pi*a*b*c\ndef cube_volume(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return l*l*l\ndef cube_surface_area(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*l*l\ndef sphere_to_cube_ratio(r):\n    '''\n    Write a function to find the ratio between the volume of a sphere\n    and the volume of the cube of the same length on the same side.\n    '''\n    return 4/3*math.pi*r*r*r\ndef cube_to_sphere_ratio(l):\n    '''\n    Write a function to find the ratio between the volume of a cube\n    and the volume of a sphere of the same length on the same side.\n    '''\n    return math.pi*l*l*l/6\ndef cone_to_cube_ratio(r,h):\n    '''\n    Write a function to find the ratio between the volume of a cone\n    and the volume of the cube of the same length on the same side.\n    '''\n    return 1/3*math.pi*r*r*h\ndef cube_to_cone_ratio(l):\n    '''\n    Write a function to find the ratio between the volume of a cube\n    and the volume of a cone of the same length on the same side.\n    '''\n    return math.pi*l*l*l/3\ndef pyramid_to_cube_ratio(l,h):\n    '''\n    Write a function to find the ratio between the volume of a pyramid\n    and the volume of the cube of the same length on the same side.\n    '''\n    return 1/3*math.pi*l*l*h\ndef cube_to_pyramid_ratio(l):\n    '''\n    Write a function to find the ratio between the volume of a cube\n    and the volume of a pyramid of the same length on the same side.\n    '''\n    return 1/3*math.pi*l*l*l/3\ndef cylinder_to_cube_ratio(r):\n    '''\n    Write a function to find the ratio between the volume of a cylinder\n    and the volume of the cube of the same length on the same side.\n    '''\n    return math.pi*r*r\ndef cube_to_cylinder_ratio(l):\n    '''\n    Write a function to find the ratio between the volume of a cube\n    and the volume of a cylinder of the same length on the same side.\n    '''\n    return math.pi*l*l*l/6\ndef sphere_to_cylinder_ratio(r):\n    '''\n    Write a function to find the ratio between the volume of a sphere\n    and the volume of a cylinder of the same radius on the same side.\n    '''\n    return math.pi*r*r\ndef cylinder_to_sphere_ratio(r):\n    '''\n    Write a function to find the ratio between the volume of a cylinder\n    and the volume of a sphere of the same radius on the same side.\n    '''\n    return 4/3*math.pi*r*r\ndef right_angled_triangle_to_cube_ratio(b):\n    '''\n    Write a function to find the ratio between the volume of a right angled triangle\n    and the volume of the cube of the same length on the same side.\n    '''\n    return 1/2*b\ndef cube_to_right_angled_triangle_ratio(l):\n    '''\n    Write a function to find the ratio between the volume of a cube\n    and the volume of a right angled triangle of the same length on the same side.\n    '''\n    return math.sqrt(3)*l/2\ndef sphere_to_right_angled_triangle_ratio(r):\n    '''\n    Write a function to find the ratio between the volume of a sphere\n    and the volume of a right angled triangle of the same radius on the same side.\n    '''\n    return math.sqrt(3)/2*"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*2 + b*2\n    \ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle. Hint: Heron's formula.\n    '''\n    s = (a + b + c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n    \ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a+b+c\n    \ndef trapezoid_area(a,b,c,d):\n    '''\n    Write a function to find the area of a trapezoid. The formula is: A = (1/2)(b + c)h\n    '''\n    return ((b + c)/2)*h\n    \ndef trapezoid_perimeter(a,b,c,d):\n    '''\n    Write a function to find the perimeter of a trapezoid. The formula is: P = a + b + c + d\n    '''\n    return a + b + c + d\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle. The formula is: A = PIr^2\n    '''\n    return 3.14*(r**2)\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle. The formula is: P = 2PiR\n    '''\n    return 2*3.14*r\n    \ndef sphere_area(r):\n    '''\n    Write a function to find the area of a sphere. The formula is: A = 4PiR^2\n    '''\n    return 4*3.14*(r**2)\n    \ndef sphere_perimeter(r):\n    '''\n    Write a function to find the perimeter of a sphere. The formula is: P = 4PiR\n    '''\n    return 4*3.14*r\n    \ndef cylinder_area(r,h):\n    '''\n    Write a function to find the area of a cylinder. The formula is: A = PiRH\n    '''\n    return 3.14*r*h\n    \ndef cylinder_perimeter(r,h):\n    '''\n    Write a function to find the perimeter of a cylinder. The formula is: P = 2PiR + 2Ph\n    '''\n    return 2*3.14*r + 2*3.14*h\n    \ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone. The formula is: A = PiRH^2\n    '''\n    return 3.14*r*h\n    \ndef cone_perimeter(r,h):\n    '''\n    Write a function to find the perimeter of a cone. The formula is: P = PiR + Ph\n    '''\n    return 3.14*r + 2*3.14*h\n    \ndef cube_volume(l):\n    '''\n    Write a function to find the volume of a cube. The formula is: V = l^3\n    '''\n    return l**3\n    \ndef cube_surface_area(l):\n    '''\n    Write a function to find the surface area of a cube. The formula is: A = 6l^2\n    '''\n    return 6*(l**2)\n    \ndef cube_diagonal_length(l):\n    '''\n    Write a function to find the diagonal length of a cube. The formula is: D = 2^0.5l\n    '''\n    return 2**0.5*l\n    \ndef cuboid_volume(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid. The formula is: V = lbh\n    '''\n    return l*b*h\n    \ndef cuboid_surface_area(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid. The formula is: A = 2(l+b)h\n    '''\n    return 2*(l+b)*h\n    \ndef cuboid_diagonal_length(l,b,h):\n    '''\n    Write a function to find the diagonal length of a cuboid. The formula is: D = (2ab)^0.5\n    '''\n    return 2*(a*b)**0.5\n    \ndef ellipsoid_volume(r,s,t):\n    '''\n    Write a function to find the volume of a ellipsoid. The formula is: V = 4/3\u03c0r^3st\n    '''\n    return 4/3*3.14*(r**3)*s*t\n    \ndef ellipsoid_surface_area(r,s,t):\n    '''\n    Write a function to find the surface area of a ellipsoid. The formula is: A = 4\u03c0r(s + t + \u221a(s^2 - 3tc^2))\n    '''\n    return 4*3.14*r*(s + t + (s**2 - 3*t**2)**0.5)\n    \ndef ellipsoid_diagonal_length(r,s,t):\n    '''\n    Write a function to find the diagonal length of a ellipsoid. The formula is: D = \u221a(a^2b^2c^2 + b^2c^2 + c^2a^2 - a^2c^2 - b^2c^2 - c^2a^2 + 2abc)\n    '''\n    return (r**2)*(s**2)*(t**2) + (r**2)*(t**2)*(s**2) + (r**2)*(s**2)*(t**2) - (r**2)*(t**2)*(s**2) - (r**2)*(s**2)*(t**2) - (r**2)*(s**2)*(t**2) + 2*(r**2)*(s**2)*(t)\n    \ndef sphere_sphere_collision(r1,r2):\n    '''\n    Write a function to find the volume of a sphere after it collides with another sphere. The formula is: V = 4/3\u03c0r^3(r + r)\n    '''\n    return 4/3*3.14*(r1**3)*(r1 + r2)\n    \ndef sphere_ellipsoid_collision(r1,r2,s1,t1):\n    '''\n    Write a function to find the volume of a sphere after it collides with an ellipsoid. The formula is: V = 4/3\u03c0r^3(r + rs + t)\n    '''\n    return 4/3*3.14*(r1**3)*(r1 + r2*s1 + t1)\n    \ndef ellipsoid_ellipsoid_collision(r1,r2,s1,t1):\n    '''\n    Write a function to find the volume of an ellipsoid after it collides with another ellipsoid. The formula is: V = 4/3\u03c0r^3(r + rs + t + \u221a(s^2 - 3tc^2))\n    '''\n    return 4/3*3.14*(r1**3)*(r1 + r2*s1 + t1 + (s1**2 - 3*t1**2)**0.5)\n    \ndef ellipsoid_cube_collision(r1,r2,s1,t1):\n    '''\n    Write a function to find the volume of an ellipsoid after it collides with a cube. The formula is: V = 4/3\u03c0r^3(r + rs + t + \u221a(s^2 - 3tc^2))\n    '''\n    return 4/3*3.14*(r1**3)*(r1 + r2*s1 + t1 + (s1**2 - 3*t1**2)**0.5)\n    \ndef cube_cube_collision(r1,r2):\n    '''\n    Write a function to find the volume of a cube after it collides with another cube. The formula is: V = (1/6)\u03c0r^3\n    ''"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of your rectangle is \" + str(area) + \"cm^2.\")\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = []\n    for i in range(len(str1)):\n        if str1[i].islower():\n            result.append(str1[i])\n        else:\n            result.append(' ')\n            result.append(str1[i])\n    return ''.join(result)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    import re\n    str1 = \"ANUJ%RAJ%PRAVEEN\"\n    return re.sub(r'(?<=%RAJ).*?(?=%RAJ)', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in str1:\n        if(i.isupper()):\n            str1=str1.replace(i,\"\")\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[A-Z]', '', str1)\n    print(str2)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = \"\"\n    for letter in str1:\n        if letter.isupper() == False:\n            result += letter\n    return result\nprint(remove_uppercase(\"XML1GAMES\"))\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.split()\n    str1 =''.join(str1)\n    str1 = re.sub('[A-Z]', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    string=str1\n    print(\"Given string is : \",string)\n    newstr=string.replace(\" \",\"\")\n    print(\"The new string after removal of whitespace : \",newstr)\n    regex = re.compile('[A-Z]{1}[a-z]*')\n    result=regex.findall(newstr)\n    if(len(result)):\n        new_string=''\n        for i in range(len(newstr)):\n            if(newstr[i] in result):\n                new_string=new_string+newstr[i]\n        print(\"Removed Uppercase strings : \",new_string)\n    else:\n        print(\"No uppercase strings found\")\n    return \n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    lst = str1.split()\n    for i in lst:\n        if i.isupper():\n            lst.remove(i)\n    return''.join(lst)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print(re.findall(r'[a-z]',str1))\n    \ndef check_anagram(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    # print(sorted(str1.lower()))\n    # print(sorted(str2.lower()))\n    return sorted(str1.lower()) == sorted(str2.lower())\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n    \ndef Group_by(lst):\n    '''\n    Write a python function to group a list of lists by the first element of each sublist.\n    For example, if the input list is [[3,2,1],[4,1,3],[2,3,1]], your function should return [[3,2,1],[4,1,3]]. \n    Note that the output list is also a list.\n    '''\n    \n    return [list(list_set) for list_set in set(tuple(row) for row in lst)]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\ndef Shallow(lst): \n    '''\n    Write a python function to get the shallow copy of the list.\n    '''\n    return [i for i in lst]\ndef Select(lst, n): \n    '''\n    Write a python function to get the nth element of each sublist.\n    '''\n    return [i[n] for i in lst]\ndef Star(lst, n): \n    '''\n    Write a python function to get the repetition of the given element n times.\n    '''\n    return [n*i for i in lst]\ndef Sum(lst, start, end): \n    '''\n    Write a python function to get the sum of all the elements of the sublist\n    '''\n    return sum(lst[start-1:end])\ndef SubList(lst, n): \n    '''\n    Write a python function to return sublist from the index n to the end of list.\n    '''\n    return lst[n:]\ndef Zip(lst): \n    '''\n    Write a python function to zip all the sublists in a single list.\n    '''\n    return list(zip(*lst))\ndef main():\n    # Create a list.\n    lst = [ [ [ [ 3 ] ] ] ]\n    print('The original list is: ', lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    print (\"The given string is: \",str)\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    print(f\"No of upper case characters are: {str.upper().count('A')}\")\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    print(f\"Uppercase characters in '{str}': {[i for i in str if i.isupper()]}\")\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([c for c in str if c.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str_len=len(str)\n    return (str_len-str.lower().count(' '))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    print(\"All possible combinations of the elements of a given list:\")\n    combinations_list1 = list(itertools.combinations(list1, 3))\n    print(combinations_list1)\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    print(\"List:\",list1)\n    for i in range(1,n+1):\n        for j in combinations(list1,i):\n            print(j)\n            #print(j)\n        print(\"\\n\")\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list_helper(list1, [], [])\n    return combinations_list_helper_results\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # you can only combine with itself so only n\n    # elements in the list, n*n! combinations\n    # we will use recursion to calculate the combinations\n    \n    # this function will always take one argument\n    # that is the current combination\n    # we will start with an empty list\n    # so when we call it we have to start with an empty list\n    # because there is no combination of 0 elements to begin with\n    # let's define our base case\n    def combine(list1):\n        if len(list1) == 0:\n            return []\n        \n        # for this list we want to generate every combination of one\n        # element in the list\n        # we want to call this function again so we set the base case\n        # we need to change the combination we are looking at\n        # so we use the new argument combination\n        # we want to start with an empty list\n        # because we want to move forward in the list\n        # and we also want to generate each combination\n        # so we use the empty list\n        \n        def combine_one(list1):\n            # here we will add a one element combination to the current combination\n            combination = []\n            for l in list1:\n                combination.append(l)\n                # once we have added the element we want to return the combination\n                # we can use the.append to add an element to the end of the list\n                # the variable combination is the current combination we are looking at\n            return combination\n        \n        # next we want to generate the combination of one element\n        # so we will call the function combine_one again\n        # we will pass the list we are looking at\n        # the combination we are looking at will be [1]\n        # this will generate the combination with a one element\n        \n        # next we want to add the combination of one to the list of combinations\n        # we want to use the combine_one combination we created\n        # combination is the current combination we are looking at\n        # we want to create a new combination that we have added an element to\n        # so we will call combine_one\n        # the new combination we are looking at will be [1,2]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        \n        # once we have done this we want to do it again for the second element\n        # so we will call the function combine_one again\n        # the combination we are looking at will be [1,2]\n        # we will call the function combine_one\n        # the new combination we are looking at will be [2]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first two element combinations to the list of all the combinations\n        \n        # now we want to do it again for the third element\n        # so we will call the function combine_one again\n        # the combination we are looking at will be [1,2]\n        # we will call the function combine_one\n        # the new combination we are looking at will be [2,3]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first three element combinations to the list of all the combinations\n        # we will do this for every element in the list\n        # we will now return the list of all the combinations\n        \n        # so now we have the base case\n        # and we have generated the first element combinations\n        # then we have generated the second element combinations\n        # then we have generated the third element combinations\n        # and we have generated all the combinations\n        \n        # now we want to add the next element to the list of combinations\n        # so we want to call the function combine_one\n        # the combination we are looking at will be [1,2]\n        # the new combination we are looking at will be [2,3]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first three element combinations to the list of all the combinations\n        \n        # now we want to do it again for the fourth element\n        # so we will call the function combine_one again\n        # the combination we are looking at will be [1,2]\n        # we will call the function combine_one\n        # the new combination we are looking at will be [2,3]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first four element combinations to the list of all the combinations\n        \n        # now we want to do it again for the fifth element\n        # so we will call the function combine_one again\n        # the combination we are looking at will be [1,2]\n        # we will call the function combine_one\n        # the new combination we are looking at will be [2,3]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first five element combinations to the list of all the combinations\n        \n        # now we want to do it again for the sixth element\n        # so we will call the function combine_one again\n        # the combination we are looking at will be [1,2]\n        # we will call the function combine_one\n        # the new combination we are looking at will be [2,3]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first six element combinations to the list of all the combinations\n        \n        # now we want to do it again for the seventh element\n        # so we will call the function combine_one again\n        # the combination we are looking at will be [1,2]\n        # we will call the function combine_one\n        # the new combination we are looking at will be [2,3]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first seven element combinations to the list of all the combinations\n        \n        # now we want to do it again for the eighth element\n        # so we will call the function combine_one again\n        # the combination we are looking at will be [1,2]\n        # we will call the function combine_one\n        # the new combination we are looking at will be [2,3]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first eight element combinations to the list of all the combinations\n        \n        # now we want to do it again for the ninth element\n        # so we will call the function combine_one again\n        # the combination we are looking at will be [1,2]\n        # we will call the function combine_one\n        # the new combination we are looking at will be [2,3]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first nine element combinations to the list of all the combinations\n        \n        # now we want to do it again for the tenth element\n        # so we will call the function combine_one again\n        # the combination we are looking at will be [1,2]\n        # we will call the function combine_one\n        # the new combination we are looking at will be [2,3]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first ten element combinations to the list of all the combinations\n        \n        # now we want to do it again for the eleventh element\n        # so we will call the function combine_one again\n        # the combination we are looking at will be [1,2]\n        # we will call the function combine_one\n        # the new combination we are looking at will be [2,3]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first eleven element combinations to the list of all the combinations\n        \n        # now we want to do it again for the twelfth element\n        # so we will call the function combine_one again\n        # the combination we are looking at will be [1,2]\n        # we will call the function combine_one\n        # the new combination we are looking at will be [2,3]\n        # we want to append this combination to the list of all the combinations\n        # so we will use the.append method\n        # we have added the first twelve element combinations to the list of all the combinations\n        \n    "
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1, 2))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    if len(list1) == 1:\n        combinations.append(list1)\n    else:\n        for i in range(len(list1)):\n            list2 = list1[i+1:]\n            for x in combinations_list(list2):\n                combinations.append([list1[i]]+x)\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = list()\n    combinations.append(list1[0])\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(len(list1) + 1):\n        new_list = [list1[j:j + i] for j in range(len(list1) - i + 1)]\n        if new_list!= [[]]:\n            for x in new_list:\n                if x!= []:\n                    comb_list.append(x)\n    return comb_list\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    all_combinations = []\n    for i in range(1,len(list1)+1):\n        all_combinations.extend(list(itertools.combinations(list1,i)))\n    return all_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return itertools.combinations(list1, 3)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = None\n    for i in range(len(arr)):\n        local_max = None\n        for j in range(i, len(arr)):\n            if local_max is None:\n                local_max = product(arr[i:j+1])\n            else:\n                local_max = max(local_max, product(arr[i:j+1]))\n            global_max = max(global_max, local_max) if global_max is not None else local_max\n    return global_max\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #base case\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    #what if you find a max subarray, and then find a max subarray for the rest of the array.\n    #you can apply the same algo\n    #[-2, -4, 1, -1, 2, -6, -1, 4, 0]\n    max_subarray_of_n = max_subarray_product(arr[1:])\n    min_subarray_of_n = min_subarray_product(arr[1:])\n    max_product = arr[0] * max_subarray_of_n\n    min_product = arr[0] * min_subarray_of_n\n    max_ending_here = max(arr[0], max_product, min_product)\n    return max_ending_here\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Using Kadane's Algorithm\n    # Calculating the maximum product subarray by iterating through the array.\n    # At each index, storing the maximum subarray from the current index to the previous maximum.\n    # Calculating the maximum subarray by adding the current subarray and multiplying the sum by the product.\n    # Calculating the maximum subarray by multiplying the current subarray and adding the current subarray.\n    # Calculating the maximum subarray by calculating the current subarray product and storing it as the maximum product subarray.\n    # Return the maximum product subarray\n    max_product = 1\n    for i in range(len(arr)):\n        max_product = max(max_product,\n                          arr[i],\n                          arr[i] * (arr[i-1] if i > 0 else 1),\n                          arr[i] * (arr[i-1] * (arr[i-2] if i > 1 else 1))\n                          )\n        max_product = max(max_product,\n                          arr[i] * (arr[i-1] if i > 0 else 1),\n                          arr[i] * (arr[i-1] * (arr[i-2] if i > 1 else 1))\n                          )\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        raise ValueError('Empty array given')\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0]*arr[1], arr[0], arr[1])\n    left_arr = [arr[0]]\n    right_arr = [arr[-1]]\n    left = 0\n    right = len(arr) - 1\n    max_product_left = arr[0]\n    max_product_right = arr[-1]\n    for i in range(1, len(arr)):\n        max_product_left = max(max_product_left*arr[i], arr[i])\n        left_arr.append(max_product_left)\n    for i in range(len(arr)-2, -1, -1):\n        max_product_right = max(max_product_right*arr[i], arr[i])\n        right_arr.append(max_product_right)\n    right_arr.reverse()\n    right_arr = [0] + right_arr\n    max_product_left = max(left_arr)\n    max_product_right = max(right_arr)\n    return max(max_product_left*max_product_right, max_product_left, max_product_right)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #IMPORTANT: Make sure we are finding max from all positive values of the array.\n    #This means we can't just use a negative number for the left pointer to ensure we don't get a negative value of the subarray.\n    #We have to look for both negative and positive values.\n    left = 0\n    right = 0\n    max_left = 0\n    max_right = 0\n    max_product = 1\n    min_product = 1\n    min_left = 0\n    min_right = 0\n    for i in range(len(arr)):\n        max_product = max(max_product*arr[i],arr[i],1)\n        min_product = min(min_product*arr[i],arr[i],1)\n        max_left = max(max_left,min_product)\n        min_left = min(min_left,max_product)\n    return [max_left,max_product,min_left,min_product]\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = arr[0]\n    local_max = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # subarray = []\n    # global_max = -1\n    # for i in range(len(arr)):\n    #     for j in range(len(arr)):\n    #         if j == 0:\n    #             subarray = arr[i:]\n    #         else:\n    #             subarray = arr[i:j]\n    #         if len(subarray) >= 3:\n    #             local_max = np.prod(subarray)\n    #             if local_max > global_max:\n    #                 global_max = local_max\n    #                 max_subarray = subarray\n    # return global_max, max_subarray\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr or len(arr) < 0:\n        return\n    max_product, min_product, global_max_product, global_min_product = 1, 1, 1, 1\n    for num in arr:\n        max_product = max(max_product * num, num)\n        min_product = min(min_product * num, num)\n        global_max_product = max(global_max_product, max_product)\n        global_min_product = min(global_min_product, min_product)\n    return global_max_product\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 1:\n        return all(value == dict[key] for key in dict for value in dict.values())\n    else:\n        return all(value == dict[key] for key in dict for value in dict.values()) and check_value(dict, n - 1)\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key] == dict[list(dict.keys())[n]]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    list_of_values = []\n    for k in dict.values():\n        list_of_values.append(k)\n    if n == len(list_of_values):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    flag = True\n    for key in dict:\n        if dict[key]!= dict.get(key, -1):\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n        \ndict = {'one':1, 'two':2, 'three':3, 'four':4}\nprint(check_value(dict, 1))\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(dict[i] == dict[0] for i in dict):\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key] == n:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[i] == dict[n] for i in dict)\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = dict.values()\n    print(val)\n    return val[0] == val[1] == val[2] == val[3] == val[4] == n\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(dict.values()):\n        return n\n    else:\n        return 0\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    return {i: dict1[i] for i in dict1.keys() if dict1[i]}\n    \n    \ndef reverse_dict(dict1):\n    '''\n    Write a function to reverse the keys and values of a given dictionary.\n    '''\n    return {value:key for key, value in dict1.items()}\n    \n    \ndef sum_dict_values(dict1):\n    '''\n    Write a function to sum all the values of the given dictionary.\n    '''\n    return sum(dict1.values())\n    \n    \ndef sum_values_2(dict1):\n    '''\n    Write a function to sum all the values of the given dictionary using a generator expression.\n    '''\n    return sum({i: dict1[i] for i in dict1.keys()}.values())\n    \n    \ndef dict_keys(dict1):\n    '''\n    Write a function to get the key names of a given dictionary.\n    '''\n    return {i for i in dict1.keys()}\n    \n    \ndef dict_values(dict1):\n    '''\n    Write a function to get the values of a given dictionary.\n    '''\n    return {i for i in dict1.values()}\n    \n    \ndef delete_duplicates(dict1):\n    '''\n    Write a function to delete duplicate items from a given dictionary.\n    '''\n    return {i: dict1[i] for i in dict1.keys() if dict1[i] not in dict1.values()}\n    \n    \ndef list_values(dict1):\n    '''\n    Write a function to list all the values in a given dictionary.\n    '''\n    return {i for i in dict1.values()}\n    \n    \ndef list_items(dict1):\n    '''\n    Write a function to list all the items in a given dictionary.\n    '''\n    return {i for i in dict1.items()}\n    \n    \ndef list_values_2(dict1):\n    '''\n    Write a function to list all the values in a given dictionary using a generator expression.\n    '''\n    return (i for i in dict1.values())\n    \n    \ndef list_items_2(dict1):\n    '''\n    Write a function to list all the items in a given dictionary using a generator expression.\n    '''\n    return (i for i in dict1.items())\n    \n    \ndef dict_to_tuple(dict1):\n    '''\n    Write a function to convert a given dictionary into a tuple.\n    '''\n    return tuple(dict1.items())\n    \n    \ndef tuple_to_dict(tuple1):\n    '''\n    Write a function to convert a given tuple into a dictionary.\n    '''\n    return {i[0]: i[1] for i in tuple1}\n    \n    \ndef sum_dict_values_2(dict1):\n    '''\n    Write a function to sum all the values in a given dictionary using a generator expression.\n    '''\n    return sum(i for i in dict1.values())\n    \n    \ndef sum_dict_values_3(dict1):\n    '''\n    Write a function to sum all the values in a given dictionary using a for loop.\n    '''\n    sum_ = 0\n    for i in dict1.values():\n        sum_ += i\n    return sum_\n    \n    \ndef dict_add(dict1, dict2):\n    '''\n    Write a function to add two given dictionaries together.\n    '''\n    return {i: dict1[i]+dict2[i] for i in dict1.keys() if i in dict2.keys()}\n    \n    \ndef dict_intersection(dict1, dict2):\n    '''\n    Write a function to get the intersection of two given dictionaries.\n    '''\n    return {i: dict1[i] for i in dict1.keys() if i in dict2.keys()}\n    \n    \ndef dict_subtraction(dict1, dict2):\n    '''\n    Write a function to get the difference between two given dictionaries.\n    '''\n    return {i: dict1[i] for i in dict1.keys() if i not in dict2.keys()}\n    \n    \ndef dict_union(dict1, dict2):\n    '''\n    Write a function to get the union of two given dictionaries.\n    '''\n    return {i: dict1[i] for i in dict1.keys() if i in dict2.keys()}\n    \n    \ndef dict_union_2(dict1, dict2):\n    '''\n    Write a function to get the union of two given dictionaries using a generator expression.\n    '''\n    return {i: dict1[i] for i in dict1.keys() if i in dict2.keys()} | {i: dict2[i] for i in dict2.keys() if i not in dict1.keys()}\n    \n    \ndef get_keys(dict1):\n    '''\n    Write a function to get the keys of a given dictionary.\n    '''\n    return {i for i in dict1.keys()}\n    \n    \ndef get_values(dict1):\n    '''\n    Write a function to get the values of a given dictionary.\n    '''\n    return {i for i in dict1.values()}\n    \n    \ndef get_items(dict1):\n    '''\n    Write a function to get the items of a given dictionary.\n    '''\n    return {i for i in dict1.items()}\n    \n    \ndef get_items_2(dict1):\n    '''\n    Write a function to get the items of a given dictionary using a generator expression.\n    '''\n    return (i for i in dict1.items())\n    \n    \ndef get_items_3(dict1):\n    '''\n    Write a function to get the items of a given dictionary using a for loop.\n    '''\n    items_ = []\n    for i in dict1.items():\n        items_.append(i)\n    return items_\n    \n    \ndef get_items_4(dict1):\n    '''\n    Write a function to get the items of a given dictionary using a for loop.\n    '''\n    items_ = []\n    for i in dict1.keys():\n        items_.append((i, dict1[i]))\n    return items_\n    \n    \ndef get_items_5(dict1):\n    '''\n    Write a function to get the items of a given dictionary using a for loop.\n    '''\n    items_ = []\n    for i in dict1.values():\n        items_.append((i, dict1[i]))\n    return items_\n    \n    \ndef set_dict_values(dict1):\n    '''\n    Write a function to set the values of a given dictionary.\n    '''\n    return {i: set(dict1.values()) for i in dict1.keys()}\n    \n    \ndef set_dict_items(dict1):\n    '''\n    Write a function to set the values and items of a given dictionary.\n    '''\n    return {i: set((i, dict1[i])) for i in dict1.keys()}\n    \n    \ndef set_dict_values_2(dict1):\n    '''\n    Write a function to set the values of a given dictionary using a generator expression.\n    '''\n    return {i: set(dict1.values()) for i in dict1.keys()}\n    \n    \ndef set_dict_items_2(dict1):\n    '''\n    Write a function to set the values and items of a given dictionary using a generator expression.\n    '''\n    return {i: set((i, dict1[i])) for i in dict1.keys()}\n    \n    \ndef set_dict_values_3(dict1):\n    '''\n    Write a function to set the values of a given dictionary using a for loop.\n    '''\n    return {i: set(dict1.values()) for i in dict1.keys()}\n    \n    \ndef set_dict_items_3(dict1):\n    '''\n    Write a function to set the values and items of a given dictionary using a for loop.\n    '''\n    return {i: set((i, dict1[i])) for i in dict1.keys()}\n    \n    \ndef set_dict_values_4(dict1):\n    '"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 0, 'e': 0}\n    for i in dict1.keys():\n        if dict1[i] == 0:\n            del dict1[i]\n    print(dict1)\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x: y for x, y in dict1.items() if y!=''}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = dict(dict1)\n    while True:\n        try:\n            dict1.pop(None)\n        except:\n            break\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {k: v for k, v in dict1.items() if v!= ''}\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:val for key, val in dict1.items() if val}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == []:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    subsequence = set()\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            subsequence.add(arr[i] * arr[j])\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    max_val = -1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i] = -1\n        else:\n            max_val = max(max_val, arr[i])\n    \n    running_max = 0\n    running_min = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            running_max = -1*(running_max//running_min)\n            running_min = 1\n            max_val = max(max_val, running_max)\n        else:\n            running_max = max(running_max, arr[i]*running_min)\n            running_min = min(running_min*arr[i], 1)\n    \n    return max_val\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    mul = 1\n    max_mul = 1\n    for i in range(n):\n        mul *= arr[i]\n        max_mul = max(max_mul, mul)\n    \n    return max_mul\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product_ = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j]-arr[i]>0:\n                max_product_ = max(max_product_, arr[j]*arr[i])\n    return max_product_\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 1\n    n = len(arr)\n    for i in range(n):\n        prod = 1\n        for j in range(i,n):\n            prod *= arr[j]\n            max_prod = max(max_prod, prod)\n            if max_prod == prod:\n                break\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    if n==1:\n        return arr[0]\n    max_prod = 0\n    max_val = 0\n    for i in range(n):\n        for j in range(i,n):\n            prod = arr[j]\n            for k in range(i,j):\n                prod *= arr[k]\n            if prod>max_prod:\n                max_prod = prod\n                max_val = arr[j]\n    print(max_prod,max_val)\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    max_so_far = dp[0]\n    for i in range(1, len(arr)):\n        curr_max = 0\n        for j in range(i):\n            if arr[i] > arr[j] and dp[j] > curr_max:\n                curr_max = dp[j]\n        dp[i] = curr_max + arr[i]\n        max_so_far = max(dp[i], max_so_far)\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = 1\n    for i in range(n-1):\n        prod = arr[i] * arr[i+1]\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod\n    \narr = [2,5,6,1,3,4,4]\nprint max_product(arr)\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 4:\n        return -1\n    i = 3\n    while i < len(arr):\n        if arr[i] < arr[i-3] * arr[i-2] * arr[i-1]:\n            return arr[i-3] * arr[i-2] * arr[i-1]\n        i += 1\n    return -1\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return ((test_tup[0]+test_tup[1]) if (len(test_tup)>=2) else 0)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    l = []\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            l.append(test_tup[i]+test_tup[i+1])\n    return tuple(l)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_list = list(test_tup)\n    length = len(test_list)\n    for i in range(0,length-1):\n        print(test_list[i]+test_list[i+1])\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = []\n    for i in range(1,len(test_tup)):\n        new_tup.append(test_tup[i] + test_tup[i-1])\n    return tuple(new_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2], test_tup[2] + test_tup[3])\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # using the index, which starts from 0, to extract the element in tuple, where start index is 0 and the end index is len(test_tup)-1\n    # ex:\n    #     if test_tup = (1,2,3,4,5,6,7,8,9)\n    #     then:\n    #         (1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9)\n    #         start index 0, end index 8\n    #         start index 1, end index 7\n    #         start index 2, end index 6\n    #         start index 3, end index 5\n    #         start index 4, end index 4\n    #         start index 5, end index 3\n    #         start index 6, end index 2\n    #         start index 7, end index 1\n    #         start index 8, end index 0\n    #     so it returns the sum of each neighbor pair\n    #         1+2 = 3\n    #         3+4 = 7\n    #         5+6 = 11\n    #         7+8 = 15\n    #         9+7 = 16\n    #         11+6 = 17\n    #         15+4 = 19\n    #         19+3 = 22\n    #         22+2 = 24\n    #         24+1 = 25\n    #         25+0 = 26\n    #     so it returns the sum of neighbor pair 1+2, 3+4, 5+6, 7+8, 9+7, 11+6, 15+4, 19+3, 22+2, 24+1, 25+0 = 46\n    return sum([test_tup[i] for i in range(len(test_tup))-1])\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n    elif len(test_tup) % 2 == 0:\n        return sum(test_tup)\n    else:\n        return test_tup[-1] + test_tup[-2]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            total = test_tup[i] + test_tup[i+1]\n        elif i == len(test_tup)-1:\n            total = total + test_tup[i]\n        else:\n            total = total + test_tup[i] + test_tup[i+1]\n    return total\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    ret = 0\n    for i in range(n):\n        ret += test_tup[i]\n        if i!= n - 1:\n            ret += test_tup[i + 1]\n    return ret\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum_of_products = 0\n    for i in range(n):\n        if (i == 0):\n            sum_of_products += arr[i]\n        else:\n            sum_of_products = sum_of_products * arr[i] % n\n    return sum_of_products\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(n): \n        result = (result * arr[i]) % n \n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n): \n        prod = (prod * arr[i]) % n \n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    product = 1\n    for i in arr:\n        product *= i\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x, y: (x * y) % n, arr)\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for x in arr:\n        prod = (prod * x) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = result * i % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    remainder = product % n\n    return remainder \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result *= arr[i]\n        result %= n\n    return result\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    n=len(l)\n    if l[0]==1:\n        if n==1:\n            return False\n        else:\n            for i in range(1,n):\n                if l[i]==l[i-1]+1:\n                    pass\n                else:\n                    return False\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return False\n    else:\n        l.sort()\n        for i in range(len(l)-1):\n            if (l[i]+1)!= l[i+1]:\n                return False\n        return True\n    \n    \ndef check_for_prime_numbers(l):\n    '''\n    Write a python function to check whether the given list contains prime numbers or not.\n    '''\n    if len(l) <= 1:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(2,l[i]):\n                if l[i] % j == 0:\n                    return False\n        return True\n    \ndef check_divisibility_by_5(l):\n    '''\n    Write a python function to check whether the given list contains numbers divisible by 5 or not.\n    '''\n    if len(l) <= 1:\n        return False\n    else:\n        for i in range(len(l)):\n            if l[i] % 5!= 0:\n                return False\n        return True\n    \ndef check_for_non_divisors(l):\n    '''\n    Write a python function to check whether the given list contains numbers whose sum of divisors is equal to the number or not.\n    '''\n    if len(l) <= 1:\n        return False\n    else:\n        for i in range(len(l)):\n            num = l[i]\n            sum_of_divisors = 0\n            for j in range(1,num):\n                if num % j == 0:\n                    sum_of_divisors = sum_of_divisors + j\n            if sum_of_divisors == num:\n                return True\n        return False\n    \ndef find_sum_of_primes(l):\n    '''\n    Write a python function to find the sum of prime numbers in a list.\n    '''\n    sum_of_primes = 0\n    if len(l) <= 1:\n        return False\n    else:\n        for i in range(len(l)):\n            if check_for_prime_numbers(l[i]):\n                sum_of_primes = sum_of_primes + l[i]\n        return sum_of_primes\n    \n    \ndef check_for_pythagorean_triplets(l):\n    '''\n    Write a python function to check whether the given list contains pythagorean triplets or not.\n    '''\n    if len(l) <= 1:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(len(l)):\n                for k in range(len(l)):\n                    if (l[i]**2 + l[j]**2 == l[k]**2) or (l[i]**2 - l[j]**2 == l[k]**2) or (l[i]**2 == l[k]**2 + l[j]**2):\n                        return True\n        return False\n    \ndef check_sum_of_squares_of_prime_numbers(l):\n    '''\n    Write a python function to check whether the given list contains numbers whose sum of squares of prime numbers is equal to the number or not.\n    '''\n    if len(l) <= 1:\n        return False\n    else:\n        for i in range(len(l)):\n            num = l[i]\n            sum_of_squares = 0\n            for j in range(1,num):\n                if num % j == 0:\n                    if check_for_prime_numbers(j):\n                        sum_of_squares = sum_of_squares + j**2\n            if sum_of_squares == num:\n                return True\n        return False\n    \ndef find_the_number_having_greatest_number_of_divisors(l):\n    '''\n    Write a python function to find the number having maximum number of divisors in a list.\n    '''\n    if len(l) <= 1:\n        return False\n    else:\n        num_of_divisors = {}\n        for i in range(len(l)):\n            num_of_divisors[l[i]] = len(list(filter(lambda x: l[i] % x == 0, range(1, l[i] + 1))))\n        return max(num_of_divisors, key=num_of_divisors.get)\n    \ndef find_the_number_having_greatest_sum_of_divisors(l):\n    '''\n    Write a python function to find the number having maximum sum of divisors in a list.\n    '''\n    if len(l) <= 1:\n        return False\n    else:\n        num_of_sum_of_divisors = {}\n        for i in range(len(l)):\n            num_of_sum_of_divisors[l[i]] = sum(list(filter(lambda x: l[i] % x == 0, range(1, l[i] + 1))))\n        return max(num_of_sum_of_divisors, key=num_of_sum_of_divisors.get)\n    \ndef find_sum_of_divisors(l):\n    '''\n    Write a python function to find the sum of divisors in a list.\n    '''\n    if len(l) <= 1:\n        return False\n    else:\n        num_of_divisors = {}\n        for i in range(len(l)):\n            num_of_divisors[l[i]] = sum(list(filter(lambda x: l[i] % x == 0, range(1, l[i] + 1))))\n        return sum(num_of_divisors.values())\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i]!= prev + 1:\n            return False\n        prev = l[i]\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Base case \n    if len(l) == 0 or len(l) == 1: \n        return False\n    # If first element is not equal to last element then \n    # return false \n    if l[0] + 1!= l[1]: \n        return False\n    # Recursive call \n    return check_Consecutive(l[1:]) \n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    if l[0] + 1!= l[1]:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (all(l[i] + 1 == l[i + 1] for i in range(len(l) - 1)))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return 0\n    if l[0] + 1 == l[1]: \n        for i in range(1, len(l)): \n            if l[i]!= l[i-1] + 1: \n                return 0\n        return 1\n    return 0\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (all(x+1 == y for x, y in zip(l, l[1:])))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # if len(l)<=1:\n    #     return False\n    # return sorted(l)==list(range(l[0],l[-1]+1))\n    l.sort()\n    return l==list(range(l[0],l[-1]+1))\nprint(check_Consecutive([5,2,7,4,1,9]))\nprint(check_Consecutive([5,2,7,4,1,9,1]))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 2):\n        if (l[i] + 1) == l[i+1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # initialize an empty list for the intersection\n    intersection = []\n    \n    # iterate over the first list and check if it exists in the second list\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n            \n    # iterate over the second list and check if it exists in the first list\n    for j in test_list2:\n        if j in test_list1:\n            intersection.append(j)\n            \n    return intersection\n    \n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    tuple_dict = {}\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set()\n    for tup in test_list1:\n        for item in tup:\n            set1.add(item)\n    set2 = set()\n    for tup in test_list2:\n        for item in tup:\n            set2.add(item)\n    return list(set1 & set2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if(i == j):\n                intersection_list.append(i)\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for elem in test_list1:\n        if elem in test_list2:\n            intersection.append(elem)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # use set(list1).intersection(set(list2))\n    return list(set(test_list1) & set(test_list2))\n    \ntest_list1 = [1, 2, 3, 4]\ntest_list2 = [2, 4, 6, 7]\nprint(tuple_intersection(test_list1, test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return sorted(list(set(test_list1) & set(test_list2)))\n    \ndef dict_intersection(dict1, dict2):\n    '''\n    Write a function to find the dictionary intersection of the given dictionaries,\n    that is, the keys that are common in both the dictionaries.\n    '''\n    return set(dict1.keys()) & set(dict2.keys())\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return(str1.replace(ch,newch))\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = \"Haiti\"\n    str2 = \"\"\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newStr = str1.replace(ch, newch)\n    return newStr\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for ch in str1:\n        if ch == ch:\n            str2 += newch\n        else:\n            str2 += ch\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    print(str1)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp = []\n    for i,j in dict1.items():\n        temp.append((j,i))\n    temp.sort(reverse = True)\n    return temp\ndef sort_counter_2(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[0], reverse = True)\ndef sort_counter_3(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_4(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    items = list(dict1.items())\n    backitems = [[v[1],v[0]] for v in items]\n    backitems.sort()\n    return [ backitems[i][1] for i in range(0,len(backitems))]\ndef sort_counter_5(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    backitems = [[v[1],v[0]] for v in dict1.items()]\n    backitems.sort()\n    return [ backitems[i][1] for i in range(0,len(backitems))]\ndef sort_counter_6(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_7(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_8(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_9(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_10(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_11(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_12(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_13(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_14(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_15(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_16(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_17(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_18(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_19(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_20(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_21(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_22(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_23(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_24(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_25(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_26(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_27(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_28(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_29(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_30(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_31(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_32(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_33(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_34(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_35(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_36(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\ndef sort_counter_37(dict1):\n    ''"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1=dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return dict1\n    \ndef nested_sum(nested_list):\n    '''\n    Write a function that takes a nested list, and returns the sum of all numbers in the list. \n    [1, [2, [3, 4]], [5, 6, 7]]) -> 18\n    '''\n    sum = 0\n    for i in nested_list:\n        if type(i) == int:\n            sum += i\n        else:\n            sum += nested_sum(i)\n    return sum\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x:x[1], reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    import operator\n    return sorted(dict1.items(), key=operator.itemgetter(1))\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return(dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True)))\ndef dict_counter(dict1):\n    '''\n    Write a function to count the occurrences of the values in a dictionary.\n    '''\n    count = Counter(dict1)\n    return(count)\ndef remove_key(dict1, key):\n    '''\n    Write a function to remove all keys from a dictionary.\n    '''\n    dict1.clear()\n    return(dict1)\ndef dict_join(dict1, dict2):\n    '''\n    Write a function to join two dictionaries.\n    '''\n    return(dict1.update(dict2))\ndef dict_from_list(list1):\n    '''\n    Write a function to convert a list of tuples into a dictionary.\n    '''\n    return(dict(list1))\ndef dict_keys(dict1):\n    '''\n    Write a function to return all keys from a dictionary.\n    '''\n    return(list(dict1.keys()))\ndef dict_values(dict1):\n    '''\n    Write a function to return all values from a dictionary.\n    '''\n    return(list(dict1.values()))\ndef dict_items(dict1):\n    '''\n    Write a function to return all items from a dictionary.\n    '''\n    return(list(dict1.items()))\ndef dict_copy(dict1):\n    '''\n    Write a function to return a copy of a dictionary.\n    '''\n    return(dict1.copy())\ndef dict_pop(dict1, key):\n    '''\n    Write a function to remove a key from a dictionary.\n    '''\n    dict1.pop(key, None)\n    return(dict1)\ndef dict_from_keys(list1, dict2):\n    '''\n    Write a function to create a dictionary from two lists.\n    '''\n    return(dict(zip(list1, dict2)))\ndef dict_from_keys_values(list1, list2):\n    '''\n    Write a function to create a dictionary from two lists.\n    '''\n    return(dict(zip(list1, list2)))\ndef dict_values_keys(dict1):\n    '''\n    Write a function to return a list of keys and values in a dictionary.\n    '''\n    return([dict1.keys(), dict1.values()])\ndef dict_append(dict1, dict2):\n    '''\n    Write a function to append a dictionary to another dictionary.\n    '''\n    return(dict1.update(dict2))\ndef dict_popitem(dict1):\n    '''\n    Write a function to remove an arbitrary item from a dictionary.\n    '''\n    dict1.popitem()\n    return(dict1)\ndef dict_popitem_last(dict1):\n    '''\n    Write a function to remove the last item from a dictionary.\n    '''\n    dict1.popitem()\n    return(dict1)\ndef dict_del(dict1, key):\n    '''\n    Write a function to delete a key from a dictionary.\n    '''\n    dict1.pop(key, None)\n    return(dict1)\ndef dict_del_keys(dict1):\n    '''\n    Write a function to delete all keys from a dictionary.\n    '''\n    dict1.clear()\n    return(dict1)\ndef dict_del_values(dict1):\n    '''\n    Write a function to delete all values from a dictionary.\n    '''\n    dict1.clear()\n    return(dict1)\ndef dict_del_items(dict1):\n    '''\n    Write a function to delete all items from a dictionary.\n    '''\n    dict1.clear()\n    return(dict1)\ndef dict_keys_values_append(dict1, dict2):\n    '''\n    Write a function to combine two dictionaries.\n    '''\n    dict1.update(dict2)\n    return(dict1)\ndef dict_key_and_value_count(dict1):\n    '''\n    Write a function to return a dictionary with keys as elements in the list and values as the number of occurrences of the element in the list.\n    '''\n    dict2 = {}\n    for element in dict1:\n        if element in dict2:\n            dict2[element] += 1\n        else:\n            dict2[element] = 1\n    return(dict2)\ndef dict_values_add_1(dict1):\n    '''\n    Write a function to increment the value of each key by 1.\n    '''\n    for key in dict1:\n        dict1[key] += 1\n    return(dict1)\ndef dict_values_increment(dict1):\n    '''\n    Write a function to increment each value in a dictionary by 1.\n    '''\n    dict1 = dict1.copy()\n    for key in dict1:\n        dict1[key] += 1\n    return(dict1)\ndef dict_values_add_value(dict1, value):\n    '''\n    Write a function to add a value to all values in a dictionary.\n    '''\n    dict1 = dict1.copy()\n    for key in dict1:\n        dict1[key] += value\n    return(dict1)\ndef dict_values_subtract_value(dict1, value):\n    '''\n    Write a function to subtract a value from all values in a dictionary.\n    '''\n    dict1 = dict1.copy()\n    for key in dict1:\n        dict1[key] -= value\n    return(dict1)\ndef dict_values_multiply_value(dict1, value):\n    '''\n    Write a function to multiply all values in a dictionary by a value.\n    '''\n    dict1 = dict1.copy()\n    for key in dict1:\n        dict1[key] *= value\n    return(dict1)\ndef dict_values_divide_value(dict1, value):\n    '''\n    Write a function to divide all values in a dictionary by a value.\n    '''\n    dict1 = dict1.copy()\n    for key in dict1:\n        dict1[key] /= value\n    return(dict1)\ndef dict_values_divide_value_floor(dict1, value):\n    '''\n    Write a function to divide all values in a dictionary by a value and return the integer part.\n    '''\n    dict1 = dict1.copy()\n    for key in dict1:\n        dict1[key] = int(dict1[key]/value)\n    return(dict1)\ndef dict_values_count(dict1, value):\n    '''\n    Write a function to count the number of values in a dictionary.\n    '''\n    return(Counter(dict1))\ndef dict_values_count_equal(dict1, value):\n    '''\n    Write a function to count the number of values in a dictionary equal to a value.\n    '''\n    return(Counter(dict1)[value])\ndef dict_values_count_greater(dict1, value):\n    '''\n    Write a function to count the number of values in a dictionary greater than a value.\n    '''\n    return(Counter(dict1)[value])\ndef dict_values_count_greater_equal(dict1, value):\n    '''\n    Write a function to count the number of values in a dictionary greater than or equal to a value.\n    '''\n    return(Counter(dict1)[value])\ndef dict_values_count_lesser(dict1, value):\n    '''\n    Write a function to count the number of values in a dictionary less than a value.\n    '''\n    return(len(dict1) - Counter(dict1)[value])\ndef dict_values_count_lesser_equal(dict1, value):\n    '''\n    Write a function to count the number of values in a dictionary less than or equal to a value.\n    '''\n    return(len(dict1) - Counter(dict1)[value])\ndef dict_values_range(dict1, value):\n    '''\n    Write a function to count the number of values in a dictionary in a given range.\n    '''\n    return(Counter(dict1)[value])\ndef dict_values_range_equal(dict1, value1, value2):\n    '''\n    Write a function to count the number of values in a dictionary in a given range.\n    '''\n    return(Counte"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1,key=dict1.get,reverse=True)\n    \ndef get_percentage(dict1):\n    '''\n    Write a function to get the number of items in a dictionary.\n    '''\n    dict_length = len(dict1)\n    sum_dict = sum(dict1.values())\n    percentage_dict = {k:round(v/sum_dict,3)*100 for k,v in dict1.items()}\n    return sorted(percentage_dict.items(),key=lambda x:x[1],reverse=True)\n    \ndef get_shopping_cost(dishes):\n    '''\n    Write a function that will accept a list of dictionaries (groceries) and\n    calculate the total cost of the groceries purchased.\n    '''\n    cost = 0\n    for i in dishes:\n        cost += i.get('price',0)\n    return cost\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n    #return f'{min(nums)} + {max(nums)}'\nprint(big_sum([1,2,3,4,5]))\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(sum(nums)-max(nums)-min(nums))\n    return\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max=nums[0]\n    min=nums[0]\n    for i in nums:\n        if i>max:\n            max=i\n        if i<min:\n            min=i\n    return max+min\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    nums = sorted(nums)\n    for num in nums:\n        sum = sum + num\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Method 1:\n    return sum([min(nums), max(nums)])\n    \n    # Method 2:\n    # return sum(sorted(nums)[:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max=nums[0]\n    min=nums[0]\n    for i in range(0,len(nums)):\n        if nums[i]>max:\n            max=nums[i]\n        if nums[i]<min:\n            min=nums[i]\n    print(\"The sum of the largest and smallest value in the given array is:\",max+min)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(\"The sum of the smallest and largest value in the array is {}\".format(sum(nums)))\n    return\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = 0\n    min_num = 0\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num + min_num\n    \nif __name__ == '__main__':\n    print(big_sum([2,4,6,8,10]))\n    print(big_sum([-2,3,-4,-1,0,5]))\n    print(big_sum([-3,5,0,9,2,1])"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.islower():\n        return True\n    return False\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\nprint(is_lower('CODE'))\nprint(is_lower('codE'))\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef is_upper(string):\n    '''\n    Write a python function to check if the given string is in uppercase.\n    '''\n    return string.isupper()\n    \ndef is_alphabet(string):\n    '''\n    Write a python function to check if the given string is a alphabet or not.\n    '''\n    return string.isalpha()\n    \ndef is_numeric(string):\n    '''\n    Write a python function to check if the given string is a number or not.\n    '''\n    return string.isnumeric()\n    \ndef is_whitespace(string):\n    '''\n    Write a python function to check if the given string is a whitespace or not.\n    '''\n    return string.isspace()\n    \ndef is_title(string):\n    '''\n    Write a python function to check if the given string is a title or not.\n    '''\n    return string.istitle()\n    \ndef is_capitals(string):\n    '''\n    Write a python function to check if the given string is a capitals or not.\n    '''\n    return string.isupper()\n    \ndef is_lower_upper_numeric(string):\n    '''\n    Write a python function to check if the given string is a lowercase, uppercase, number, or title.\n    '''\n    return string.isalnum()\n    \ndef is_only_numeric(string):\n    '''\n    Write a python function to check if the given string is a only number or not.\n    '''\n    return string.isnumeric()\n    \ndef is_only_capital(string):\n    '''\n    Write a python function to check if the given string is a only capital letters or not.\n    '''\n    return string.isupper()\n    \ndef is_only_lower(string):\n    '''\n    Write a python function to check if the given string is a only lowercase or not.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]'\n    lowercase = re.findall(pattern, str1)\n    new_string = re.sub(pattern, '', str1)\n    print(new_string)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    i = 0\n    while i < len(str1):\n        if i == len(str1) - 1:\n            break\n        str2 += str1[i]\n        if str1[i] < str1[i + 1]:\n            str2 += str1[i + 1]\n        i += 1\n    if i == len(str1) - 1:\n        return str2\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # case 1\n    # ans = re.sub('[a-z]', \"\", str1, flags=re.IGNORECASE)\n    # return ans\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = re.sub('[a-z]','',str1)\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = re.compile('[a-z]{4}')\n    result = regex.findall(str1)\n    for i in result:\n        str1 = str1.replace(i, '')\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] == 'a':\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n    \ndef remove_digits(str1):\n    '''\n    Write a function to remove digits substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = \"ABCabc\"\n    str2 = str1.replace(\"abc\", \"\")\n    print(str2)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r\"\\b[a-z]\\b\", \"\", str1, flags=re.I)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1\n    p = re.compile(r'(?:[a-z]+)')\n    str2 = p.sub('', str2)\n    return str2\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Your code goes here\n    return n//10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # A function is defined to find the first digit of the number n.\n    \n    while n // 10 > 0 :  # The while loop is used to iterate through all the digits in the number n.\n        n = n // 10  # The function divides the number n by 10 and assigns the result to the variable n.\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n>=10 :\n        n = n/10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 10 :\n        n /= 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return n[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try :\n        return int(str(n)[0])\n    except :\n        return 0\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    pass\n    \ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 0 :  \n        return n // 10\n    else :  \n        return (n * -1) // 10\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    for i in list:\n        if(i % 2!= 0):\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!=0]\n    pass\ndef Even(list): \n    '''\n    Write a python function which takes a list of integers and returns the even ones.\n    '''\n    return [i for i in list if i%2==0]\n    pass\ndef Sum(list): \n    '''\n    Write a python function which takes a list of integers and returns the sum of the elements.\n    '''\n    return sum(list)\n    pass\ndef Sum_odd(list): \n    '''\n    Write a python function which takes a list of integers and returns the sum of the odd ones.\n    '''\n    return sum([i for i in list if i%2!=0])\n    pass\ndef Sum_even(list): \n    '''\n    Write a python function which takes a list of integers and returns the sum of the even ones.\n    '''\n    return sum([i for i in list if i%2==0])\n    pass\ndef Min(list): \n    '''\n    Write a python function which takes a list of integers and returns the minumum.\n    '''\n    return min(list)\n    pass\ndef Max(list): \n    '''\n    Write a python function which takes a list of integers and returns the maximum.\n    '''\n    return max(list)\n    pass\ndef Mean(list): \n    '''\n    Write a python function which takes a list of integers and returns the mean.\n    '''\n    return sum(list)/len(list)\n    pass\ndef Median(list): \n    '''\n    Write a python function which takes a list of integers and returns the median.\n    '''\n    list.sort()\n    if len(list)%2==0:\n        return list[int(len(list)/2)-1]+list[int(len(list)/2)]/2\n    else:\n        return list[int(len(list)/2)]\n    pass\ndef Mode(list): \n    '''\n    Write a python function which takes a list of integers and returns the mode.\n    '''\n    freq = {}\n    for num in list:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    return max(freq.items(), key=lambda x: x[1])[0]\n    pass\ndef Variance(list): \n    '''\n    Write a python function which takes a list of integers and returns the variance.\n    '''\n    mean = Mean(list)\n    var = 0\n    for i in list:\n        var += (i-mean)**2\n    return var/len(list)\n    pass\ndef Standard_Deviation(list): \n    '''\n    Write a python function which takes a list of integers and returns the standard deviation.\n    '''\n    return math.sqrt(Variance(list))\n    pass\ndef Bin_Search(lst,n):\n    '''\n    Write a python function which takes a list of integers and returns the index of the element\n    in the list if it is present. If not return -1.\n    '''\n    low = 0\n    high = len(lst)-1\n    while low<=high:\n        mid = (low+high)//2\n        if lst[mid]==n:\n            return mid\n        elif lst[mid]<n:\n            low = mid+1\n        elif lst[mid]>n:\n            high = mid-1\n    return -1\n    pass\ndef Sort_List(list):\n    '''\n    Write a python function which takes a list of integers and returns a sorted list.\n    '''\n    list.sort()\n    return list\n    pass\ndef Bool_search(lst,n):\n    '''\n    Write a python function which takes a list of integers and returns a Boolean.\n    If the list contains the element, return True. Otherwise, return False.\n    '''\n    if n in lst:\n        return True\n    else:\n        return False\n    pass\ndef Linear_search(lst,n):\n    '''\n    Write a python function which takes a list of integers and returns the index of the element\n    in the list if it is present. If not return -1.\n    '''\n    for i in range(0,len(lst)):\n        if lst[i]==n:\n            return i\n    return -1\n    pass\ndef Linear_Search_missing(lst, n):\n    '''\n    Write a python function which takes a list of integers and returns the index of the element\n    in the list if it is present. If not return -1.\n    '''\n    for i in range(0,len(lst)):\n        if lst[i]==n:\n            return i\n    return -1\n    pass\ndef Linear_Search_missing2(lst, n):\n    '''\n    Write a python function which takes a list of integers and returns the index of the element\n    in the list if it is present. If not return -1.\n    '''\n    for i in range(0,len(lst)):\n        if lst[i]==n:\n            return i\n        elif lst[i]<n:\n            return i\n    return -1\n    pass\ndef Bubble_sort(lst):\n    '''\n    Write a python function which takes a list of integers and returns a sorted list.\n    '''\n    for j in range(0,len(lst)):\n        for i in range(0,len(lst)-1-j):\n            if lst[i]>lst[i+1]:\n                lst[i],lst[i+1] = lst[i+1],lst[i]\n    return lst\n    pass\ndef Selection_sort(lst):\n    '''\n    Write a python function which takes a list of integers and returns a sorted list.\n    '''\n    for i in range(0,len(lst)):\n        min = i\n        for j in range(i+1,len(lst)):\n            if lst[j]<lst[min]:\n                min = j\n        lst[i],lst[min] = lst[min],lst[i]\n    return lst\n    pass\ndef Insertion_sort(lst):\n    '''\n    Write a python function which takes a list of integers and returns a sorted list.\n    '''\n    for i in range(1,len(lst)):\n        key = lst[i]\n        j=i-1\n        while j>=0 and key<lst[j]:\n            lst[j+1] = lst[j]\n            j -= 1\n        lst[j+1] = key\n    return lst\n    pass\ndef Shell_sort(lst):\n    '''\n    Write a python function which takes a list of integers and returns a sorted list.\n    '''\n    gap = len(lst)//2\n    while gap>0:\n        for i in range(gap,len(lst)):\n            key = lst[i]\n            j=i\n            while j>=gap and key<lst[j-gap]:\n                lst[j] = lst[j-gap]\n                j -= gap\n            lst[j] = key\n        gap = gap//2\n    return lst\n    pass\ndef Merge_sort(lst):\n    '''\n    Write a python function which takes a list of integers and returns a sorted list.\n    '''\n    if len(lst)<=1:\n        return lst\n    mid = len(lst)//2\n    left = Merge_sort(lst[:mid])\n    right = Merge_sort(lst[mid:])\n    l,r = 0,0\n    sorted = []\n    while l<len(left) and r<len(right):\n        if left[l]<right[r]:\n            sorted.append(left[l])\n            l += 1\n        else:\n            sorted.append(right[r])\n            r += 1\n    sorted = sorted+left[l:]+right[r:]\n    return sorted\n    pass\ndef Quick_sort(lst,start,end):\n    '''\n    Write a python function which takes a list of integers and returns a sorted list.\n    '''\n    if start>=end:\n        return lst\n    "
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #return [i for i in list if i%2 == 1]\n    return [i for i in list if i%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\nlist = [1,2,3,4,5,6,7,8]\nprint(Split(list))\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num%2]\n    # Write your code here\n    \ndef Multiply(list):\n    '''\n    Write a python function which takes a list of numbers and returns the product of all the odd numbers.\n    '''\n    return functools.reduce(lambda x, y: x*y, [num for num in list if num%2] )\n    # Write your code here\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2 == 1]\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2 == 1]\nprint(Split([1, 2, 3, 4, 5, 6]))\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = [x for x in list if x % 2 == 1]\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(odd)\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1=[]\n    for i in list:\n        if i%2!=0:\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # return int((n*(n+1)**2)//2 - (n*(n+1)*(2*n+1))//6)\n    return sum(i**3 for i in range(n)) - sum(i for i in range(n))**2\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    i = 1\n    while i <= n:\n        sum1 += i * i * i\n        sum2 += i\n        i += 1\n    return abs(sum1 - sum2 * sum2)\n    "
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n=int(n)\n    sum_of_cubes=0\n    for i in range(1,n+1):\n        sum_of_cubes+=i**3\n    print(\"The sum of cubes is :\",sum_of_cubes)\n    sum_of_numbers=0\n    for i in range(1,n+1):\n        sum_of_numbers+=i\n    print(\"The sum of numbers is :\",sum_of_numbers)\n    print(\"The difference is :\",sum_of_numbers**3-sum_of_cubes)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    import time\n    start_time = time.time()\n    nums = []\n    i = 1\n    while i < n+1 :\n        nums.append(i*i*i)\n        i += 1\n    print(nums)\n    print('Sum of cubes of the first ',n,' natural numbers is : ',sum(nums))\n    s = 0\n    for i in range(1,n+1) :\n        s += i\n    print('Sum of the first ',n,' natural numbers is : ',s)\n    print('Difference is : ',sum(nums) - s)\n    print(\"Time taken in seconds : \", time.time() - start_time)\n    \ndef multiplication_table(n) :\n    '''\n    Write a python function to create a multiplication table (from 1 to n) of a number n.\n    '''\n    import time\n    start_time = time.time()\n    nums = []\n    for i in range(1,n+1) :\n        nums.append(i)\n    print(nums)\n    print('Multiplication table of ',n,' is : ')\n    for i in range(1,n+1) :\n        print(nums)\n        for j in range(1,n+1) :\n            print(nums[j-1],end=\" \")\n        print('\\n')\n    print(\"Time taken in seconds : \", time.time() - start_time)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1) :\n        result += i ** 3\n    result = result ** (1/3)\n    result = result ** 3\n    sum1 = 0\n    for i in range(1,n+1) :\n        sum1 += i\n    sum1 = sum1 ** (1/3)\n    sum1 = sum1 ** 3\n    print(\"difference of sum of cubes and sum of n natural numbers:\",result - sum1)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = (n * (n + 1) * (n + 2)) / 6\n    sum_of_numbers = (n * (n + 1) / 2) ** 2\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_n = 0\n    for i in range(n+1):\n        sum_of_n += i\n        sum_of_cubes += (i ** 3)\n    return sum_of_cubes - sum_of_n ** 2\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (((n*(n+1))/2)**3) - (n*(n+1)*(2*n+1))/6 \nprint(difference(10))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n*(n+1)*(2*n+1))/6 - ((n*(n+1))/2)**2\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = sum(i**3 for i in range(1,n+1))\n    sum2 = sum(i for i in range(1,n+1))\n    return sum1-sum2\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here \n    pair_count = 0\n    for i in range(0, N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j] % 2 == 1):\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(N): \n        for j in range(i + 1, N): \n            if(A[i] ^ A[j]) % 2 == 1: \n                count += 1\n                \n    return count \n        \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A.sort()\n    count = 0\n    for i in range(N-1) :\n        x = A[i]\n        y = A[i+1]\n        if(x^y)%2!= 0 :\n            count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    count = 0\n    while i < N :\n        j = 0\n        while j < N :\n            if (j!= i) :\n                if (A[i] ^ A[j]) & 1 : \n                    count = count + 1\n            j = j + 1\n        i = i + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Odd_Pair_Count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if ((A[i] ^ A[j]) & 1) : \n                Odd_Pair_Count += 1\n    return Odd_Pair_Count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i+1, N) : \n            if (A[i] ^ A[j]) & 1 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = len(A)\n    count = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            if (A[i] ^ A[j]) % 2 == 1 : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if((A[i]^A[j])&1):\n                count += 1\n    return count\n    \ndef find_Odd_Pair_1(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if((A[i]^A[j])&1):\n                count += 1\n    return count    \ndef find_Odd_Pair_2(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    A_xor = 0\n    for i in range(N):\n        A_xor = A_xor^A[i]\n    count = (A_xor&-A_xor)>>1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if (A[i] ^ A[j]) & 1 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if(A[i]^A[j] % 2!= 0) : \n                count += 1\n    return count \n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            char = char.lower()\n        else:\n            char = char.upper()\n        result = result + char\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(i.swapcase() for i in string)\n    # return string.swapcase()\n    # return string.swapcase().swapcase()\n    # return ''.join(i.swapcase() for i in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = []\n    for char in string:\n        new_string.append(char.swapcase())\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join([ch.swapcase() for ch in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join([char.upper() if char.islower() else char.lower() for char in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(ch.lower() if ch.isupper() else ch.upper() for ch in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for i in range(len(string)):\n        if string[i].isupper():\n            string[i] = string[i].lower()\n        else:\n            string[i] = string[i].upper()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string_lower = string.lower()\n    string_upper = string.upper()\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    # don't need to keep track of 0s\n    if n1 == \"0\" or n2 == \"0\":\n        return None\n    # do digit by digit difference\n    sum = 0\n    for i in range(len(n1)):\n        sum += abs(int(n1[i]) - int(n2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < 10 and n2 < 10:\n        return abs(n1 - n2)\n    else:\n        d1 = abs(n1 // 10 - n2 // 10)\n        d2 = abs(n1 % 10 - n2 % 10)\n        return d1 + d2\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(i - j) for i, j in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([int(a) - int(b) for a, b in zip(str(n1), str(n2))])\n    #return sum(abs(ord(str(n1)[i]) - ord(str(n2)[i])) for i in range(0, len(str(n1))))\n    #return sum(abs(ord(str(n1)[i]) - ord(str(n2)[i])) for i in range(0, len(str(n1))))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = abs(int(n1))\n    n2 = abs(int(n2))\n    sum = 0\n    while(n1!= 0 or n2!= 0):\n        sum += abs(n1%10 - n2%10)\n        n1 //= 10\n        n2 //= 10\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = str(n1), str(n2)\n    return sum(abs(int(n1[i]) - int(n2[i])) for i in range(len(n1)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    print(n1, n2)\n    return 0\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    length = max(len(n1_list), len(n2_list))\n    if len(n1_list) == length:\n        n2_list = n2_list + ['0'] * (length - len(n2_list))\n    if len(n2_list) == length:\n        n1_list = n1_list + ['0'] * (length - len(n1_list))\n    return sum([abs(int(i) - int(j)) for i, j in zip(n1_list, n2_list)])\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    cur_sum = a[0]\n    for i in range(1, size):\n        cur_sum = max(a[i], cur_sum + a[i])\n        max_sum = max(cur_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_sum_subarray = []\n    for i in range(size):\n        current_sum = 0\n        for j in range(i, size):\n            current_sum += a[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_subarray = a[i:j+1]\n    return max_sum, max_sum_subarray\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in a:\n        current_sum += i\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    max_end = 0\n    max_start = 0\n    temp_sum = 0\n    \n    for i in range(size):\n        if temp_sum > 0:\n            temp_sum += a[i]\n        else:\n            temp_sum = a[i]\n            max_start = i\n        if max_sum < temp_sum:\n            max_sum = temp_sum\n            max_end = i\n    return max_sum, max_start, max_end\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -2147483648\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i+1\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        sum = 0\n        for j in range(i, size):\n            sum += a[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = max_so_far = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_sub_sum = 0\n    for i in range(size):\n        max_sub_sum += a[i]\n        if max_sub_sum < 0:\n            max_sub_sum = 0\n        if max_sum < max_sub_sum:\n            max_sum = max_sub_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        if current_sum > 0:\n            current_sum = current_sum + a[i]\n        else:\n            current_sum = a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        l = test_tup1\n        s = test_tup2\n    else:\n        l = test_tup2\n        s = test_tup1\n    new_tup = ()\n    for i in l:\n        if i not in new_tup:\n            new_tup = new_tup + (i, )\n    for i in s:\n        if i not in new_tup:\n            new_tup = new_tup + (i, )\n    return sorted(new_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return(sorted(list(set(test_tup1 + test_tup2))))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union = sorted(set1.union(set2))\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    final_tuple = ()\n    if test_tup1 == test_tup2:\n        return test_tup1\n    for num in test_tup1:\n        if num not in final_tuple:\n            final_tuple += (num,)\n    for num in test_tup2:\n        if num not in final_tuple:\n            final_tuple += (num,)\n    return tuple(sorted(final_tuple))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    return sorted(union_set)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for i in range(len(test_tup1)):\n        union.append(test_tup1[i])\n    for j in range(len(test_tup2)):\n        if test_tup2[j] not in union:\n            union.append(test_tup2[j])\n    return sorted(union)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_union = set(test_tup1) | set(test_tup2)\n    test_union_sorted = sorted(test_union)\n    return test_union_sorted\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = ()\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        for n in test_tup1:\n            union_tup = union_tup + (n,)\n        for n in test_tup2:\n            if n not in union_tup:\n                union_tup = union_tup + (n,)\n        union_tup = tuple(sorted(union_tup))\n        return union_tup\n    else:\n        return None\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    return sorted(union_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # create a dictionary where the sublists are the key and the value is the len of the list\n    dct = {}\n    # Create a list of max length for the sublists\n    max_lst = []\n    # loop through the list\n    for sub_list in lst:\n        # check if sub_list in dictionary\n        if sub_list in dct.keys():\n            # if sub_list in dictionary append the length to the max_lst\n            max_lst.append(dct[sub_list])\n        else:\n            # if not in dictionary set length to 1\n            dct[sub_list] = len(sub_list)\n            # append length to max_lst\n            max_lst.append(dct[sub_list])\n    # set the max value to the longest length of the max_lst\n    max_val = max(max_lst)\n    # return the max value\n    return max_val\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for item in lst:\n        if type(item) is list:\n            sublist_len = len(item)\n            if sublist_len > max_len:\n                max_len = sublist_len\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    temp = 1\n    for i in range(len(lst)):\n        if i!= 0:\n            if lst[i] == lst[i-1]:\n                temp+=1\n            else:\n                if temp > max_length:\n                    max_length = temp\n                temp = 1\n        else:\n            if temp > max_length:\n                max_length = temp\n            temp = 1\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0 \n    for i in range(0,len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for l in lst:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst = [2, 4, 6, 8, 10]\n    sub_lst = []\n    max_lst = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if (j <= (len(lst)-i) and lst[i:j]!= []):\n                sub_lst.append(lst[i:j])\n    max_lst = max(sub_lst, key=len)\n    print(max_lst)\n    \n    \ndef Find_Largest_Number(lst):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    lst = [2, 4, 6, 8, 10]\n    max_lst = max(lst)\n    print(max_lst)\n    \n    \ndef Find_Smallest_Number(lst):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    lst = [2, 4, 6, 8, 10]\n    min_lst = min(lst)\n    print(min_lst)\n    \n    \ndef Find_Smallest_Number_Except_Number_5(lst):\n    '''\n    Write a python function to find the smallest number in a list that is not 5.\n    '''\n    lst = [2, 4, 6, 8, 10]\n    x = 5\n    if x in lst:\n        lst.remove(x)\n    min_lst = min(lst)\n    print(min_lst)\n    \n    \ndef Print_Odd_Numbers_Between_2_and_50(num):\n    '''\n    Write a python function to print all odd numbers between 2 and 50.\n    '''\n    lst = []\n    for i in range(2, num):\n        if (i%2 == 1):\n            lst.append(i)\n    print(lst)\n    \n    \ndef Sort_List_With_Strings(lst):\n    '''\n    Write a python function to sort a list of strings.\n    '''\n    lst = ['c', 'f', 'b', 'a', 'd']\n    lst.sort()\n    print(lst)\n    \n    \ndef Sort_List_With_Numbers(lst):\n    '''\n    Write a python function to sort a list of numbers.\n    '''\n    lst = [1, 2, 4, 6, 8, 10]\n    lst.sort()\n    print(lst)\n    \n    \ndef Get_Sum_Of_Numbers_In_List(lst):\n    '''\n    Write a python function to sum all the numbers in a list.\n    '''\n    lst = [1, 2, 4, 6, 8, 10]\n    total_sum = sum(lst)\n    print(total_sum)\n    \n    \ndef Find_Maximum_In_List(lst):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    lst = [1, 2, 4, 6, 8, 10]\n    max_num = max(lst)\n    print(max_num)\n    \n    \ndef Remove_Duplicates_From_List(lst):\n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    lst = [1, 2, 4, 6, 8, 10, 1, 1]\n    x = 1\n    lst = [i for n, i in enumerate(lst) if i!= x]\n    print(lst)\n    \n    \ndef Remove_Duplicates_From_List_2(lst):\n    '''\n    Write a python function to remove duplicates from a list, and keep the original order.\n    '''\n    lst = [1, 2, 4, 6, 8, 10, 1, 1]\n    lst = list(dict.fromkeys(lst))\n    print(lst)\n    \n    \ndef Check_If_Two_Lists_Are_Equal(list1, list2):\n    '''\n    Write a python function to check if two lists are equal.\n    '''\n    list1 = [1, 2, 4, 6, 8, 10]\n    list2 = [1, 2, 4, 6, 8, 10]\n    if list1 == list2:\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \ndef Create_Dictionary_From_String(str):\n    '''\n    Write a python function to create a dictionary from a string.\n    '''\n    str = \"Cake Fudge Milkshake\"\n    x = str.split()\n    dct = {x[0]: x[1], x[2]: x[3], x[4]: x[5]}\n    print(dct)\n    \n    \ndef Create_Dictionary_From_String_2(str):\n    '''\n    Write a python function to create a dictionary from a string, with values as number of characters in the key.\n    '''\n    str = \"Cake Fudge Milkshake\"\n    x = str.split()\n    dct = {}\n    for i in range(0, len(x)):\n        dct[i] = len(x[i])\n    print(dct)\n    \n    \ndef Get_Max_Value_From_Dictionary(dict):\n    '''\n    Write a python function to get the maximum value from a dictionary.\n    '''\n    dict = {1: 6, 2: 7, 3: 8, 4: 9, 5: 4}\n    max_val = max(dict.values())\n    print(max_val)\n    \n    \ndef Get_Max_Value_From_Dictionary_2(dict):\n    '''\n    Write a python function to get the maximum value from a dictionary, and return the key for the value.\n    '''\n    dict = {1: 6, 2: 7, 3: 8, 4: 9, 5: 4}\n    max_val = max(dict, key=dict.get)\n    print(max_val)\n    \n    \ndef Get_Max_Value_From_Dictionary_3(dict):\n    '''\n    Write a python function to get the maximum value from a dictionary, and return the key for the value.\n    '''\n    dict = {1: 6, 2: 7, 3: 8, 4: 9, 5: 4}\n    max_val = max(dict, key=lambda k: dict[k])\n    print(max_val)\n    \n    \ndef Sort_List_In_Descending_Order(lst):\n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    lst = [10, 9, 8, 7, 6]\n    lst.sort(reverse = True)\n    print(lst)\n    \n    \ndef Sort_List_In_Descending_Order_2(lst):\n    '''\n    Write a python function to sort a list in descending order, and without using builtin functions.\n    '''\n    lst = [10, 9, 8, 7, 6]\n    for i in range(len(lst)):\n        for j in range(len(lst)-1):\n            if (lst[j] < lst[j+1]):\n                temp = lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = temp\n    print(lst)\n    \n    \ndef Sort_List_In_Descending_Order_3(lst):\n    '''\n    Write a python function to sort a list in descending order, and without using builtin functions.\n    '''\n    lst = [10, 9, 8, 7, 6]\n    length = len(lst)\n    for i in range(length):\n        for j in range(0, length-i-1):\n            if (lst[j] < lst[j+1]):\n                temp = lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = temp\n    print(lst)\n    \n    \ndef Remove_All_Element_From_List(lst):\n    '''\n    Write a python function to remove all elements from a list.\n    '''"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    len_max = len(lst[0])\n    len_sub = len(lst[0])\n    for i in range(len(lst)):\n        if len_sub < len(lst[i]):\n            len_sub = len(lst[i])\n    print('The length of the longest sublist is:', len_sub)\n    return len_sub\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if isinstance(i, list):\n            max_len = max(max_len, Find_Max_Length(i))\n        else:\n            max_len += 1\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for item in lst:\n        if len(item) > longest:\n            longest = len(item)\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex=r'\\\"(.*?)\\\"'\n    result=re.findall(regex, text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\\\".*\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # pattern = r'\\\"(.*?)\\\"'\n    pattern = r'\\\"(?P<value>.*?)\\\"'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\\\"(.*?)\\\"', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"\\S+\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = re.sub(r'[a-zA-Z]', '', text) #replace all alphabetical characters with ''\n    text = re.sub(r'[\\s]', '', text) #remove all spaces\n    text = re.sub(r'[^\\S]', '', text) #remove all non-alphanumeric\n    return re.findall(r'\".*?\"', text) #return all values between quotation marks\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] =='':\n            continue\n        elif text[i] == ',':\n            continue\n        elif text[i] == '.':\n            continue\n        elif text[i] == ';':\n            continue\n        elif text[i] == ':':\n            continue\n        elif text[i] == '\"':\n            text = text[:i]\n            break\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # your code here\n    values=re.findall(r\"\\\".*\\\"\", text)\n    return values\n    #print(values)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\\\"(.*)\\\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Write a regex pattern to match a single value between quotation marks.\n    # Write a pattern that matches all the quotation marks.\n    regex_pattern = r'\"[^\"]+\"'\n    regex_pattern2 = r'\"([^\"]+)\\\"'\n    # Use a pattern to extract all the values between quotation marks.\n    extracted_values = re.findall(regex_pattern, text)\n    extracted_values2 = re.findall(regex_pattern2, text)\n    print(extracted_values)\n    print(extracted_values2)\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if(arr[i]!=arr[j]):\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    x = y = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i]!= arr[j] and i!= j:\n                x += 1\n    y = n * (n-1)/2\n    return x,y\narr = [5,4,3,2,1]\nn = len(arr)\nprint(count_Pairs(arr,n))"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count \narr=[1,2,3,4,5]\nn=len(arr)\nprint(count_Pairs(arr,n))\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1): \n        for j in range(i+1,n): \n            if arr[i]!=arr[j]: \n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                c=c+1\n    return c\nn = int(input())\narr=list(int(i) for i in input().strip().split(' '))\nprint(count_Pairs(arr,n))\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # code here \n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return sum([1 for i in range(n) for j in range(i+1,n) if arr[i]!= arr[j]])\n    \n    \n    \ndef transpose(mat):\n    '''\n    Write a python function to transpose a matrix.\n    '''\n    return [[mat[j][i] for j in range(len(mat))] for i in range(len(mat[0]))]\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = [] \n    pair = [] \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i]!= arr[j]: \n                pairs.append(pair) \n                pair = [] \n                pair.append(arr[i]) \n                pair.append(arr[j]) \n            else: \n                continue\n    return len(pairs) \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n    \ndef repeat(sentence, num):\n    '''\n    Write a python function to repeat a string a given number of times.\n    '''\n    return sentence * num\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n    "
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    return 0 if n < 10 else sum_digits(n // 10) + n % 10\n    \n    \ndef get_odd_factors(n):\n    '''\n    Write a function that returns the list of all the odd factors of a number.\n    '''\n    \n    return [] if n < 1 else get_odd_factors(n - 1) + [n] if n % 2 == 1 else get_odd_factors(n // 2)\n    \n    \ndef merge_two_sorted_lists(l1, l2):\n    '''\n    Write a function that merges two lists of numbers, each of which is sorted in ascending order, into one single sorted list.\n    '''\n    \n    return [] if not l1 or not l2 else [l1[0]] + [l2[0]] + merge_two_sorted_lists(l1[1:], l2[1:]) if l1[0] < l2[0] else [l1[0]] + [l2[0]] + merge_two_sorted_lists(l1, l2[1:])\n    \n    \ndef is_subsequence(s, t):\n    '''\n    Write a function to determine if a string is a subsequence of another string.\n    '''\n    \n    return False if len(s) > len(t) else t[:len(s)] == s\n    \n    \ndef replace_digits(s):\n    '''\n    Write a function to replace all digits in a string with the next higher digit.\n    '''\n    \n    return \"\" if not s else replace_digits(s[1:]) + (chr(ord(s[0]) + 1) if s[0]!= '9' else 'a')\n    \n    \ndef shortest_substring(s):\n    '''\n    Write a function that takes in a string and returns its shortest possible palindrome.\n    '''\n    \n    return s\n    \n    \ndef remove_repetitions(s):\n    '''\n    Write a function to remove all the duplicate letters from a string.\n    '''\n    \n    return \"\" if not s else remove_repetitions(s[1:]) + (s[0] if len(s) > 1 and s[0]!= s[1] else \"\")\n    \n    \ndef find_missing_letter(chars):\n    '''\n    Write a function that takes in an array of lowercase English-letter strings and returns the first string that is not in the array.\n    '''\n    \n    return \"\" if not chars else find_missing_letter(chars[1:]) + (chr(ord(chars[0]) + 1) if chars[0]!= 'z' else 'a')\n    \n    \ndef is_valid_IP(s):\n    '''\n    Write a function that checks if a string is a valid IPv4 address or IPv6 address or neither.\n    '''\n    \n    return False\n    \n    \ndef has_valid_parantheses(s):\n    '''\n    Write a function to check the number of valid parantheses in a string.\n    '''\n    \n    return 0 if not s else has_valid_parantheses(s[1:]) + (1 if s[0] == \"(\" and s[-1] == \")\" else 0)\n    \n    \ndef number_of_islands(grid):\n    '''\n    Write a function that takes in a grid of 1s (land) and 0s (water) and returns the number of islands.\n    An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.\n    You may assume all four edges of the grid are all surrounded by water.\n    '''\n    \n    return 0 if not grid or not grid[0] else number_of_islands([[c for c in line] for line in grid]) + 1 if 1 in [sum([1 for c in line if c == 1]) for line in grid] else number_of_islands([[c for c in line if c == 0] for line in grid])\n    \n    \ndef is_palindrome_permutation(s):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether the string is a permutation of a palindrome.\n    '''\n    \n    return False\n    \n    \ndef is_palindrome_permutation_hash(s):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether the string is a permutation of a palindrome.\n    '''\n    \n    return False\n    \n    \ndef max_product_of_three(numbers):\n    '''\n    Write a function that returns the maximum product of three integers in a list of integers.\n    '''\n    \n    return 0 if not numbers else max_product_of_three([num for num in numbers[1:] if num < 0] + [numbers[0]] + [num for num in numbers[1:] if num >= 0])\n    \n    \ndef triangle_number_divisors(n):\n    '''\n    Write a function that returns the number of divisors of a triangle number with a given number of rows.\n    '''\n    \n    return 0 if not n else triangle_number_divisors(n - 1) + n + 1 if n > 1 else 1\n    \n    \ndef is_sum_divisible_by(n, m):\n    '''\n    Write a function that takes in two integers and returns a boolean representing whether the sum of the integers is divisible by the second integer.\n    '''\n    \n    return False\n    \n    \ndef is_palindrome_permutation_string(s):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether the string is a permutation of a palindrome.\n    '''\n    \n    return False\n    \n    \ndef count_triangular_numbers(n):\n    '''\n    Write a function that returns the sum of all the positive integers up to the nth triangular number.\n    '''\n    \n    return 0 if n < 1 else count_triangular_numbers(n - 1) + n\n    \n    \ndef count_k_distinct_characters(s, k):\n    '''\n    Write a function that returns the number of ways to choose k characters from a string such that no two characters chosen are the same.\n    '''\n    \n    return 0 if not s or not k or len(set(s)) < k else count_k_distinct_characters(s[1:], k) + count_k_distinct_characters(s, k - 1) if len(s) > 1 else 1\n    \n    \ndef word_search_in_a_grid(grid, word):\n    '''\n    Write a function that takes in a grid of letters and a word and returns a boolean representing whether the word can be found in the grid by going left-to-right, or up-to-down.\n    '''\n    \n    return False\n    \n    \ndef binary_search(arr, target):\n    '''\n    Write a function that takes in a sorted array of distinct integers and returns a boolean representing whether the integer is inside the array.\n    '''\n    \n    return False\n    \n    \ndef is_valid_sudoku(s):\n    '''\n    Write a function to check if a 9x9 Sudoku board is valid.\n    '''\n    \n    return False\n    \n    \ndef move_zeros(array):\n    '''\n    Write a function that moves all instances of \"0\" to the end of a list, preserving the order of the other elements.\n    '''\n    \n    return []\n    \n    \ndef move_zeros(array):\n    '''\n    Write a function that moves all instances of \"0\" to the end of a list, preserving the order of the other elements.\n    '''\n    \n    return []\n    \n    \ndef zero_matrix(matrix):\n    '''\n    Write a function that takes in a matrix and returns the matrix with zeros filled in.\n    '''\n    \n    return []\n    \n    \ndef search_quadruplets(arr, target):\n    '''\n    Write a function that takes in a sorted array of distinct integers and an integer representing a target sum.\n    It should find all quadruplets in the array that sum up to the target sum and return a two dimensional array of all these quadruplets in no particular order.\n    '''\n    \n    return []\n    \n    \ndef sum_of_all_primes_below(n):\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10+sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = str(n)\n    sum = 0\n    for i in s:\n        sum += int(i)\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in list(str(n))])\n    \n    # This is not efficient, as it makes another list of the numbers.\n    # There's a way to do it in place by making an int array, but it's\n    # more complex to understand.\n    #return sum(map(int, list(str(n))))\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return(list1 == sorted(list1))"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1: return True\n    else:\n        if list1[0] <= list1[1]:\n            if len(list1) == 2: return True\n            else:\n                if list1[1] <= list1[2]:\n                    if len(list1) == 3: return True\n                    else:\n                        if list1[2] <= list1[3]:\n                            if len(list1) == 4: return True\n                        else:\n                            return False\n                else:\n                    return False\n        else:\n            return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag=True\n    for i in range(1,len(list1)):\n        if list1[i]<=list1[i-1]:\n            flag=False\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0 or len(list1) == 1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] <= list1[i+1]:\n            return issort_list(list1[i+1:])\n    return False\n    \ndef issort_list_all(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0 or len(list1) == 1:\n        return True\n    return list1[0] <= list1[1] and issort_list_all(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    return list1[0] <= list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    print(list1)\n    if list1==list1[::-1]:\n        print(list1,'is sorted')\n    else:\n        print(list1,'is not sorted')\n    return\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list2 = sorted(list1)\n    if list1 == list2:\n        print(\"List is sorted.\")\n    else:\n        print(\"List is not sorted.\")\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n    \ndef dictionaries_of_lists(list_of_dictionaries):\n    '''\n    Write a function that returns the list of keys from each dictionary.\n    '''\n    result = []\n    for d in list_of_dictionaries:\n        result.append(list(d.keys()))\n    return result\n    \ndef merge_dictionaries(list_of_dictionaries):\n    '''\n    Write a function to merge all the dictionaries of lists into one dictionary\n    of lists. The keys are the keys of the first list's dictionary. The values\n    are lists that contain the corresponding values for all the dictionaries.\n    '''\n    result = {}\n    list_of_keys = dictionaries_of_lists(list_of_dictionaries)\n    for i, k in enumerate(list_of_keys):\n        result.setdefault(k[0], []).extend([list_of_dictionaries[j][k[0]] for j in range(len(list_of_dictionaries))])\n    return result\n    \ndef smallest_number_in_lists(list_of_lists):\n    '''\n    Write a function to return the smallest number in each list\n    '''\n    result = []\n    for l in list_of_lists:\n        result.append(min(l))\n    return result\n    \ndef main():\n    print(empty_list(2))\n    print(dictionaries_of_lists([{1:3, 2:4}, {1:5, 3:4}]))\n    print(merge_dictionaries([{1:3, 2:4}, {1:5, 3:4}]))\n    print(smallest_number_in_lists([[4, 7], [3, 8, 6], [1, 2, 0]]))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = [{} for i in range(length)]\n    return lst\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    list_of_dicts = []\n    for i in range(length):\n        list_of_dicts.append({})\n    return list_of_dicts\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = [{} for i in range(length)]\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dicts = [{}] * length\n    return list_of_dicts\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length == 0:\n        return []\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #empty lists\n    list_of_lists = []\n    sorted_list = []\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list in list1:\n        list.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    #split the list by comma into separate sublists\n    lists = list1.split(',')\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for l in list1:\n        # print(l)\n        l.sort()\n        # print(l)\n        sorted_list.append(l)\n    # print(sorted_list)\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Sort first sublist\n    list1[0].sort()\n    # Sort each sublist starting from 1\n    for i in range(1, len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in range(len(nums)):\n        unique_nums = set(nums[i])\n        for j in unique_nums:\n            print(j)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    while nums[0] == nums[1]:\n        nums.pop(0)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # return list(dict.fromkeys(nums))\n    # using sets\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    print('Input nums:', nums)\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                nums[j] = 'duplicate'\n    print('Output nums:', nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for i in nums:\n        unique_nums.add(i)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    list_a = nums[0]\n    list_b = nums[1]\n    list_a = list(set(list_a))\n    list_b = list(set(list_b))\n    return list_a, list_b\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    unique_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in unique_nums:\n            unique_nums.append(nums[i])\n    print(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_number = set(list_data)\n    product = 1\n    for i in unique_number:\n        product = product * i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = set(list_data)\n    product_unique_list = 1\n    for number in unique_list:\n        product_unique_list = product_unique_list*number\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if list_data.count(i) > 1:\n            continue\n        else:\n            unique_list.append(i)\n    product = 1\n    for j in unique_list:\n        product = product * j\n    print(product)\n    return\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    data=[]\n    for i in list_data:\n        if i not in data:\n            data.append(i)\n    print(data)\n    print(len(data))\n    product=1\n    for i in range(0,len(data)):\n        product=product*data[i]\n    print(\"The product of the unique numbers in the list is\",product)\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    def product(list_data):\n        product = 1\n        for i in list_data:\n            product = product * i\n        return product\n    list_data = [1,2,3,4,5,6,7,8,9]\n    print(product(list_data))\n    unique_data = set(list_data)\n    print(unique_data)\n    print(product(unique_data))\n    "
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    new_list = list(set(list_data))\n    product = 1\n    for i in new_list:\n        product = product * i\n    print(product)\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    # get list of numbers from list\n    numbers = set(list_data)\n    product = 1\n    for number in numbers:\n        product *= number\n    return product\n    \n    "
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    temp_list = set(list_data)\n    product = 1\n    for i in temp_list:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = set(list_data)\n    product = 1\n    for item in unique_list:\n        product = product * item\n    return product\n    \nif __name__ == \"__main__\":\n    list_data = [2,5,4,6,6,2,5,5,7,2,6,7,8,2,6]\n    print(unique_product(list_data))\n    "
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # print(set(list_data))\n    unique_number = set(list_data)\n    print(unique_number)\n    multiplication = 1\n    for number in unique_number:\n        multiplication *= number\n    return multiplication\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    pi = math.pi\n    sa = 2*pi*r*h + 2*pi*r*r\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2*3.14*r*h + 2*3.14*r**2\n    print(sa)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * (r**2) * h\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area\n    \nr = float(input('Please enter the radius of the cylinder: '))\nh = float(input('Please enter the height of the cylinder: '))\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = (2*math.pi*r*h) + (2*math.pi*r*r)\n    return sa\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (math.pi*(r**2)*h)\n    return v\ndef sierra_change_money(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_two(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_three(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_four(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_five(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_six(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_seven(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_eight(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_nine(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_ten(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_eleven(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_twelve(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_thirteen(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_fourteen(p,d,n):\n    '''\n    Write a function to calculate the amount of money you can win from playing\n    Sierra's Coin Change Game.\n    '''\n    # Your code here.\n    x = p\n    y = d\n    z = n\n    total = 0\n    while(z > 0):\n        if(z >= x):\n            z = z - x\n            total += 1\n            x = x - y\n            total += 1\n        else:\n            x = x - y\n            total += 1\n    return total\ndef sierra_change_money_fifteen(p,d,n):\n    '''\n    Writ"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.1415926535\n    sa = 2*pi*r*h + 2*pi*r**2\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    s = math.pi*r*r\n    a = 2*math.pi*r*h\n    sa = s+a\n    print(s,a,sa)\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    sa = (2 * pi * r * h) + (2 * pi * r**2)\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula: A = 2\u03c0rh + 2\u03c0r^2\n    surfacearea = 2*3.14*r*h + 2*3.14*r**2\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = (2 * math.pi * r * h) + (2 * math.pi * r ** 2)\n    return surfacearea\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if(A[i]==B[j]):\n                if(i==len(A)-1):\n                    flag=1\n                    break\n                else:\n                    i+=1\n                    continue\n            else:\n                break\n    if(flag==1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i, j, m, n = 0, 0, len(A), len(B)\n    if n > m:\n        return False\n    for i in range(m + 1):\n        if A[i] == B[j]:\n            if i == m - 1:\n                return True\n            else:\n                j += 1\n                i += 1\n        else:\n            if j == n - 1:\n                return False\n            else:\n                j += 1\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    flag = False\n    n = len(A)\n    m = len(B)\n    while i < n and j < m:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n            if j == m:\n                flag = True\n                break\n        else:\n            i = i - j + 1\n            j = 0\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # base case\n    if not B: \n        return True\n    if not A: \n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    listA = len(A)\n    listB = len(B)\n    if listA==0:\n        return False\n    if listB==0:\n        return True\n    if listA>listB:\n        return False\n    else:\n        i=0\n        j=0\n        while(j<len(B) and i<len(A)):\n            if A[i]==B[j]:\n                j=j+1\n            i=i+1\n        if j==len(B):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #remove pass and write your logic here\n    if B in A:\n        return True\n    else:\n        return False\n    \n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == 0 and len(B) == 0:\n        return True\n    elif len(A) > len(B):\n        return False\n    else:\n        for i in range(len(B)):\n            if B[i] == A[0]:\n                return is_Sub_Array(A[1:],B[i+1:])\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A.sort()\n    B.sort()\n    if len(A)<len(B):\n        temp = A\n        A = B\n        B = temp\n    for i in range(len(B)):\n        if B[i] == A[0]:\n            for j in range(len(A)):\n                if B[i+j]!= A[j]:\n                    break\n                if j+1 == len(A):\n                    return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)<=len(A):\n        for i in range(0,len(A)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # using naive method\n    if len(A) < len(B):\n        return False\n    \n    for i in range(0,len(B)):\n        if A == B[i:i+len(A)]:\n            return True\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    if n < 0: \n        return None\n    elif n == 0: \n        return 1\n    else: \n        for i in range(1, n + 1): \n            factorial = factorial * i \n        return factorial % 10\nn = 5\nprint(\"The last digit of factorial of 5 is:\", last_Digit_Factorial(n)) \n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return last_Digit_Factorial(n-1)*n\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    # print(factorial)\n    return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Do not change the following line\n    return functools.reduce(lambda x,y: x*y, range(1,n+1))\n    \n    # Your code here\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n!= 0:\n        factorial = factorial*n\n        n = n-1\n    return factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def factorial(n):\n        fact = 1\n        for i in range(1,n+1):\n            fact = fact * i\n        return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n    \ndef last_Digit_factorial_rec(n):\n    if n==1:\n        return 1\n    else:\n        return last_Digit_factorial_rec(n-1)\n    \n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Factorial cannot be found for negative number\")\n        return None\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        factorial = 1\n        while (n > 1):\n            factorial *= n\n            n -= 1\n        return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while n >= 1:\n        fact *= n\n        n -= 1\n    return fact%10\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # if(len(list1)==len(list2)==len(list3)):\n    #     result=[]\n    #     for i in range(len(list1)):\n    #         result.append(list1[i])\n    #         result.append(list2[i])\n    #         result.append(list3[i])\n    #     return result\n    # else:\n    #     return \"Length of lists are not equal\"\n    result=[]\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_final = []\n    for i in range(len(list1)):\n        list_final.append(list1[i])\n        list_final.append(list2[i])\n        list_final.append(list3[i])\n    return list_final\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list for the interleaved results\n    interleaved_list = []\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[0],list2[0],list3[0],list1[1],list2[1],list3[1],list1[2],list2[2],list3[2]]\n    \nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    out = []\n    for i in range(len(list1)):\n        out.append(list1[i])\n        out.append(list2[i])\n        out.append(list3[i])\n    return out\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for element in range(len(list1)):\n        new_list.append(list1[element])\n        new_list.append(list2[element])\n        new_list.append(list3[element])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1 = [1,2,3,4,5,6]\n    list2 = [10,11,12,13,14,15]\n    list3 = [20,21,22,23,24,25]\n    list_of_lists = [list1, list2, list3]\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list_of_lists[i][i])\n    for j in range(len(list2)):\n        flat_list.append(list_of_lists[j][j])\n    for k in range(len(list3)):\n        flat_list.append(list_of_lists[k][k])\n    return flat_list\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    print(*list1)\n    print(*list2)\n    print(*list3)\n    result = list(chain.from_iterable(zip(list1, list2, list3)))\n    print(result)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #similar = []\n    #for item1, item2 in zip(test_tup1, test_tup2):\n    #    if item1!= item2:\n    #        similar.append((item1, item2))\n    #return similar\n    return set(test_tup1)^set(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [i for i in test_tup1 if i not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #return [i for i in test_tup1 if i not in test_tup2]\n    return tuple(x for x in test_tup1 if x not in test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #Your code here\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    #print(list1,list2)\n    set1 = set(list1)\n    set2 = set(list2)\n    #print(set1,set2)\n    #print(set1.difference(set2))\n    res = set1.difference(set2)\n    #print(res)\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = set()\n    for item in test_tup1:\n        if item not in test_tup2:\n            result.add(item)\n    for item in test_tup2:\n        if item not in test_tup1:\n            result.add(item)\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_ele = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_ele.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            dissimilar_ele.append(j)\n    return dissimilar_ele\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = list()\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1!= elem2:\n                dissimilar_list.append(elem1)\n    return dissimilar_list\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            print(elem, end = \" \")\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [i for i in test_tup1 if i not in test_tup2]\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # new_tuple = []\n    # for num in test_tuple:\n        # if even_fnc(num):\n            # new_tuple.append(num)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) is tuple:\n            result.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for ele in test_tuple:\n        if ele % 2 == 0:\n            new_tuple = new_tuple + (ele, )\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = ()\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result += even_ele(i, even_fnc)\n        elif even_fnc(i):\n            result += i,\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # solution 1\n    test_tuple_1 = ()\n    for item in test_tuple:\n        if len(item) == 3:\n            if even_fnc(item[2]):\n                test_tuple_1 = test_tuple_1 + (item,)\n    return test_tuple_1\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple):\n        return False\n    elif test_tuple == tuple():\n        return test_tuple\n    else:\n        #print(test_tuple)\n        new_list = []\n        for element in test_tuple:\n            if isinstance(element, tuple):\n                new_list.append(even_ele(element, even_fnc))\n            elif isinstance(element, list):\n                new_list.append(even_ele(element, even_fnc))\n            elif isinstance(element, int):\n                if element % 2 == 0:\n                    new_list.append(element)\n            else:\n                return False\n        return tuple(new_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        for j in range(len(test_tuple[i])):\n            for k in range(len(test_tuple[i][j])):\n                if test_tuple[i][j][k] % 2!= 0:\n                    test_tuple[i][j][k] = even_fnc(test_tuple[i][j][k])\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(even_fnc(sub_tuple) for sub_tuple in test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if i%2 == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa = (b*s)*2 + ((b*s)*0.5)**2\n    return sa \n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if s>0:\n        return (b*b)*(1/2)*s\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_area = b**2\n    surface_area = (base_area + b*s) * 2\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if (s > b) or (s < 0):\n        return print(\"Invalid input.\")\n    else:\n        return b*b*s*0.5\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=3*b*(b+s)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if type(b)==str or type(s)==str:\n        print(\"String value entered\")\n    elif b<=0 or s<=0:\n        print(\"Enter a positive non zero value\")\n    else:\n        area=(1/2)*(b*b)*s\n        print(\"The surface area of the pyramid is\",area)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    return (b * s)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    if type(b) == int and type(s) == int: \n        if b == 0 or s == 0:\n            return 'Please enter an integer greater than 0.'\n        else:\n            return b*s\n    else:\n        return 'Please enter a positive integer for both the base and the side.'\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 0.5*b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (1/2) * b * s * ((1/2) * b + s)\n    print(\"The surface area of the square pyramid with a given base edge and height is \",area)\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('Empty')\n    else:\n        print('Not Empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not dict1\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict1=dict(dict1)\n    if not bool(dict1):\n        print(\"True\")\n    else:\n        print(\"False\")\nmy_dict(dict1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return (catalan_number(num-1) * (4 * num - 2)) / (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = []\n    for i in range(1, num + 1):\n        res.append(binomial(2 * i, i))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 4\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<=0:\n        return 0\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i) * catalan_number(num - 1 - i)\n        return res\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    # Base Case\n    if num == 0 or num == 1:\n        return 1\n    \n    # Recursion\n    return (catalan_number(num - 1) * (4 * num - 2)) // (num + 1)\n    \nif __name__ == '__main__':\n    num = 10\n    print(catalan_number(num))"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num > 2:\n        return (catalan_number(num - 1) + catalan_number(num - 2))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    #Catalan numbers are binomial coefficients\n    #Represented as cat[n] = cat[n-1]/(n+1)\n    #Solve using recursion: cat[n] = cat[n-1]*(2n-1)/(n+1)\n    #n is the index\n    #cat[0] = 1\n    #cat[1] = 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        return 0\n    return comb(num * 2, num) // (num + 1)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    print(\"\\n\\nQuestion 1.2:\")\n    # initialize a regular expression to find adverbs ending with ly\n    find_adverb_ly = re.compile(r'\\bl\\b')\n    # find the first match\n    result = find_adverb_ly.search(text)\n    # print the result\n    print(result)\n    # print the start position of the match\n    print(\"The start position of the adverb ending with 'ly' is: \", result.start())\n    # print the end position of the match\n    print(\"The end position of the adverb ending with 'ly' is: \", result.end())\n    # return result\n    # Question 1.3\n    print(\"\\n\\nQuestion 1.3:\")\n    # initialize a regular expression to find adverbs ending with 'ly'\n    find_adverb_ly = re.compile(r'\\bl\\b')\n    # find the first match\n    result = find_adverb_ly.search(text)\n    # print the result\n    print(result)\n    # initialize an array to store the positions of the match\n    start_pos = []\n    # loop through the text until the match\n    while result:\n        # append the position of the match\n        start_pos.append(result.start())\n        # find the next match\n        result = find_adverb_ly.search(text, result.end())\n    # print the array\n    print(\"The positions of the adverbs ending with 'ly' is: \", start_pos)\n    # return result\n    # Question 1.4\n    print(\"\\n\\nQuestion 1.4:\")\n    # initialize a regular expression to find adverbs ending with 'ly'\n    find_adverb_ly = re.compile(r'\\bl\\b')\n    # initialize an array to store the positions of the match\n    start_pos = []\n    # initialize a variable to store the position of the last match\n    last_pos = 0\n    # loop through the text until there is no match\n    while True:\n        # find the first match starting from the position of the last match\n        result = find_adverb_ly.search(text, last_pos)\n        # if there is no match\n        if result is None:\n            # break the loop\n            break\n        # if there is a match\n        else:\n            # append the position of the match\n            start_pos.append(result.start())\n            # update the position of the last match\n            last_pos = result.end()\n    # print the array\n    print(\"The positions of the adverbs ending with 'ly' is: \", start_pos)\n    # return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # pattern = re.compile(r'[a-zA-Z]+ly')\n    # pattern = re.compile(r'ly')\n    pattern = re.compile(r'(ly)$')\n    match = pattern.search(text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r\"ly\"\n    # for match in re.finditer(regex, text, re.MULTILINE):\n    #     # print(match)\n    #     print(match.span())\n    # regex = r\"(\\w+\\W+ly)\"\n    # match = re.search(regex, text, re.MULTILINE)\n    # print(match.group(1))\n    for match in re.finditer(regex, text, re.MULTILINE):\n        print(match.span(), match.group(1))\n    # print(match.span())\n    return match.group(1)\n    # return re.search(regex, text, re.MULTILINE)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # TODO: find adverbs ending with ly\n    result = re.search(\"\\w+ly\", text)\n    if result:\n        print(result)\n        print(\"found\")\n    else:\n        print(\"not found\")\n        "
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    all_adverbs = re.finditer(r\"\\b(\\w*ly)\\b\", text)\n    for adverb in all_adverbs:\n        result.append(adverb.span())\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'\\w+ly', text, re.I)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # patterns = [\"[^A-Za-z]ly$\"]\n    # for pattern in patterns:\n    #     result = re.search(pattern, text)\n    #     print(result)\n    #     print(result.group())\n    #     print(result.span())\n    \n    # list_of_adverbs = re.finditer(\"ly$\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # my_string = \"That's not a bad idea\"\n    # list_of_adverbs = re.finditer(\"not\", my_string)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # patterns = [\"([^A-Za-z]ly)$\", \"([^A-Za-z]ness)$\"]\n    # for pattern in patterns:\n    #     result = re.search(pattern, text)\n    #     print(result)\n    #     print(result.group(0))\n    #     print(result.group(1))\n    \n    # list_of_adverbs = re.finditer(\"not\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # pattern = \"ly$\"\n    # list_of_adverbs = re.finditer(pattern, text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # pattern = \"ness$\"\n    # list_of_adverbs = re.finditer(pattern, text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"[^A-Za-z]ness$\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # pattern = \"not\"\n    # list_of_adverbs = re.finditer(pattern, text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # patterns = [\"[^A-Za-z]ly$\", \"([^A-Za-z]ness)$\"]\n    # for pattern in patterns:\n    #     result = re.search(pattern, text)\n    #     print(result)\n    #     print(result.group(0))\n    #     print(result.group(1))\n    \n    # list_of_adverbs = re.finditer(\"not\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"not\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"ly$\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"ness$\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"not\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # text = \"That's not a bad idea\"\n    # list_of_adverbs = re.finditer(\"not\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"ly$\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"ness$\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"not\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # patterns = [\"ly$\", \"ness$\"]\n    # for pattern in patterns:\n    #     result = re.search(pattern, text)\n    #     print(result)\n    #     print(result.group())\n    #     print(result.span())\n    #     print('\\n')\n    \n    # patterns = [\"([^A-Za-z]ly)$\", \"([^A-Za-z]ness)$\"]\n    # for pattern in patterns:\n    #     result = re.search(pattern, text)\n    #     print(result)\n    #     print(result.group(0))\n    #     print(result.group(1))\n    #     print(result.span())\n    #     print('\\n')\n    \n    # text = \"That's not a bad idea\"\n    # list_of_adverbs = re.finditer(\"not\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"not\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"ly$\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"ness$\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # list_of_adverbs = re.finditer(\"not\", text)\n    # for adverb in list_of_adverbs:\n    #     print(adverb.group())\n    #     print(adverb.span())\n    #     print('\\n')\n    \n    # patterns = [\"ly$\", \"ness$\"]\n    # for pattern in pattern"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"(\\s*[^\\w]*ly\\b)\"\n    result = re.finditer(pattern, text)\n    for i in result:\n        print(i.group()[:-2])\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    find = re.compile(r\"ly+\")\n    match = find.search(text)\n    if match is not None:\n        return match.group()\n    else:\n        return None\n    \nif __name__ == '__main__':\n    text = \"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.\"\n    print(\"The first adverb ending with ly and its position in a given string:\", find_adverbs(text))"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    found_ly = re.search(r'\\bl\\w*ly\\b', text)\n    if found_ly:\n        return found_ly.group()\n    else:\n        return None\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item, value in items:\n        heapq.heappush(heap, (-value, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for item, _ in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    d={}\n    for i in items:\n        if i[1] not in d:\n            d[i[1]]=i[0]\n        else:\n            d[i[1]]+=i[0]\n    t=sorted(d.items(),key=lambda x:x[1],reverse=True)\n    print(t[:n])\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        if len(heap)<n:\n            heapq.heappush(heap,(-1*item[1],item))\n        else:\n            heapq.heappush(heap,(-1*item[1],item))\n            heapq.heappop(heap)\n    return heapq.nlargest(n,heap,key=lambda x:x[0])\nitems=[('Item1', 22), ('Item2', 35), ('Item3', 17), ('Item4', 24), ('Item5', 25)]\nprint(expensive_items(items,2))\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    new_list = []\n    new_list = [i for i in items if i[1] >= n]\n    return sorted(new_list, key=lambda x:x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1], reverse=True)\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_list = []\n    for item in items:\n        heapq.heappush(item_list,item[1])\n        if len(item_list) > n:\n            heapq.heappop(item_list)\n    return item_list\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Heap of top n items\n    heap = []\n    # Iterate over items and push - (price, product) to heap\n    for product, price in items.items():\n        heapq.heappush(heap, (-price, product))\n        if len(heap) > n:\n            # Remove from heap\n            heapq.heappop(heap)\n    # Results\n    return [price_item[1] for price_item in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #O(nlog(n))\n    items_heap = []\n    for i,item in enumerate(items):\n        heapq.heappush(items_heap,(item[1],item[0],i))\n    return [heapq.heappop(items_heap)[1:] for i in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items)<=n:\n        return items\n    else:\n        #price=[]\n        #for i in items:\n        #    price.append(i[1])\n        #price.sort()\n        #return [item[0] for item in items if item[1]==price[-n]]\n        return heapq.nlargest(n,items,key=lambda x:x[1])\nprint(expensive_items([('aaa', 1000), ('bbb', 400), ('ccc', 300), ('ddd', 200), ('eee', 100)],3))"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n > len(items):\n        return []\n    heap = []\n    for item in items:\n        item = item.split(':')\n        price = int(item[1])\n        heapq.heappush(heap,(-price,item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    results = []\n    while len(heap) > 0:\n        results.append(heapq.heappop(heap)[1])\n    return results\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    l2.extend(l1)\n    return l2\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # x = l[0:n] + l[n+1:]\n    # return x\n    return l[0:n] + [l[n]] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_arr = l[:n]\n    split_arr.append(l[n:])\n    return split_arr\n    \ndef split_Arr2(l, n):\n    return l[0:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[0:n]\n    l2 = l[n:]\n    return l1 + l2\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l.copy()\n    return arr[:n], arr[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l2 = l[0:n]\n    l3 = l[n:]\n    l3.extend(l2)\n    return l3\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    try:\n        tup = tuple(listx)\n        print('converted to tuple:', tup)\n    except Exception as e:\n        print('conversion to tuple failed!', e)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\nlist1 = [1,2,3,4,5,6,7,8,9,0]\ntuple1 = list_tuple(list1)\nprint(tuple1)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff=max(nums)-min(nums)\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n    \ndef sum_all(nums):\n    '''\n    Write a python function to sum all the values in a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    return max(nums) - min(nums)\n    "
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\nprint(big_diff([1,2,3,4,5,6,7]))\nprint(big_diff([-5,-2,-1,-4]))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #squares_between = []\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    assert type(a) == int\n    assert type(b) == int\n    assert a > 0\n    assert b > 0\n    return sum([i for i in range(a, b + 1) if int(i ** 0.5) ** 2 == i])\n    \n    \nprint(perfect_squares(1, 100))\nprint(perfect_squares(100, 200))"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sqrt_a = int(math.sqrt(a))\n    sqrt_b = int(math.sqrt(b))\n    perfect_squares = []\n    for i in range(sqrt_a, sqrt_b+1):\n        if (i*i) == a:\n            perfect_squares.append(i)\n        elif (i*i) == b:\n            perfect_squares.append(i)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def is_perfect_square(num):\n        sq = int(math.sqrt(num))\n        return sq**2 == num\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i = 0\n    c = (b**2 - a**2)**0.5\n    if a == b:\n        return a\n    elif a > b:\n        return 'Invalid Input'\n    else:\n        for i in range(a,b):\n            if i**2 == i+c:\n                return i+c\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # numbers = list(range(a, b))\n    # squares = [n**2 for n in numbers]\n    # print(squares)\n    # return squares\n    # for i in range(a, b):\n    #     if i % 2 == 0:\n    #         # print(i)\n    #         if i ** 0.5 % 1 == 0:\n    #             print(i)\n    #     else:\n    #         pass\n    return [i**2 for i in range(a, b) if i % 2 == 0 and i**0.5 % 1 == 0]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    lower = a\n    upper = b\n    result = []\n    for i in range(lower, upper + 1):\n        if i**0.5 % 1 == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sq_a = math.sqrt(a)\n    sq_b = math.sqrt(b)\n    if sq_a % 1 == 0:\n        sq_a = int(sq_a)\n    else:\n        sq_a = int(sq_a) + 1\n    if sq_b % 1 == 0:\n        sq_b = int(sq_b)\n    else:\n        sq_b = int(sq_b) + 1\n    sq_range = range(sq_a, sq_b + 1)\n    return [i ** 2 for i in sq_range]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through the numbers until a squared number is less than b\n    while a**2 < b:\n        a += 1\n    return a - 1\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return complex(x*math.cos(y),x*math.sin(y))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=int(x*cmath.exp(y*1j))\n    b=int(y*cmath.exp(x*1j))\n    return(a,b)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x,y)\n    return (round(r.real,3),round(r.imag,3))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    r = x\n    theta = y\n    if x==0 and y==0:\n        print(x,y)\n    if x ==0:\n        theta = 0\n    if y == 0:\n        theta = 0\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    print(x,y)\ndef polar_polar(x,y):\n    '''\n    Write a function to convert from rectangular coordinates to polar coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x ==0:\n        r = 0\n        theta = 0\n    if x!=0:\n        r = x\n    if y!=0:\n        theta = y\n    print(r,theta)\ndef rectangular_polar(x,y):\n    '''\n    Write a function to convert from rectangular coordinates to polar coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x == 0:\n        r = 0\n    if y == 0:\n        theta = 0\n    if x!= 0:\n        r = y/x\n    if y!= 0:\n        theta = cmath.phase(x/y)\n    print(r,theta)\ndef rectangular_rect(x,y):\n    '''\n    Write a function to convert from polar coordinates to rectangular coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x == 0:\n        r = 0\n    if y == 0:\n        theta = 0\n    if x!= 0:\n        r = y/x\n    if y!= 0:\n        theta = cmath.phase(x/y)\n    print(r,theta)\ndef rectangular_rect_new(x,y):\n    '''\n    Write a function to convert from polar coordinates to rectangular coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x == 0:\n        r = 0\n        theta = 0\n    if y == 0:\n        r = 0\n    if x!= 0:\n        r = y/x\n    if y!= 0:\n        theta = cmath.phase(x/y)\n    print(r,theta)\ndef polar_rect_new(x,y):\n    '''\n    Write a function to convert from polar coordinates to rectangular coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x == 0:\n        r = 0\n    if y == 0:\n        theta = 0\n    if x!= 0:\n        r = x\n    if y!= 0:\n        theta = y\n    print(r,theta)\ndef rect_rect(x,y):\n    '''\n    Write a function to convert from rectangular coordinates to rectangular coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x ==0:\n        if y == 0:\n            print(x,y)\n        else:\n            print(x,y)\n    if y == 0:\n        print(x,y)\n    if x!=0 and y!=0:\n        print(x,y)\ndef rect_rect_new(x,y):\n    '''\n    Write a function to convert from rectangular coordinates to rectangular coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x == 0:\n        if y == 0:\n            print(x,y)\n        else:\n            print(x,y)\n    if y == 0:\n        print(x,y)\n    if x!= 0 and y!= 0:\n        print(x,y)\ndef polar_rect_new(x,y):\n    '''\n    Write a function to convert from polar coordinates to rectangular coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x == 0:\n        if y == 0:\n            print(x,y)\n        else:\n            print(x,y)\n    if y == 0:\n        print(x,y)\n    if x!= 0 and y!= 0:\n        print(x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert from rectangular coordinates to polar coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x == 0:\n        if y == 0:\n            print(x,y)\n        else:\n            print(x,y)\n    if y == 0:\n        print(x,y)\n    if x!= 0 and y!= 0:\n        print(x,y)\ndef rect_rect_new(x,y):\n    '''\n    Write a function to convert from rectangular coordinates to rectangular coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x ==0:\n        if y == 0:\n            print(x,y)\n        else:\n            print(x,y)\n    if y == 0:\n        print(x,y)\n    if x!= 0 and y!= 0:\n        print(x,y)\ndef polar_rect_new(x,y):\n    '''\n    Write a function to convert from polar coordinates to rectangular coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x == 0:\n        if y == 0:\n            print(x,y)\n        else:\n            print(x,y)\n    if y == 0:\n        print(x,y)\n    if x!= 0 and y!= 0:\n        print(x,y)\ndef rect_polar_new(x,y):\n    '''\n    Write a function to convert from rectangular coordinates to polar coordinates.\n    '''\n    x = float(x)\n    y = float(y)\n    if x == 0:\n        if y == 0:\n            print(x,y)\n        else:\n            print(x,y)\n    if y == 0:\n        print(x,y)\n    if x!= 0 and y!= 0:\n        print(x,y)\ndef complex_add(x,y):\n    '''\n    Write a function to add complex numbers.\n    '''\n    x = float(x)\n    y = float(y)\n    a = x+y\n    print(a)\ndef complex_sub(x,y):\n    '''\n    Write a function to subtract complex numbers.\n    '''\n    x = float(x)\n    y = float(y)\n    a = x-y\n    print(a)\ndef complex_mul(x,y):\n    '''\n    Write a function to multiply complex numbers.\n    '''\n    x = float(x)\n    y = float(y)\n    a = x*y\n    print(a)\ndef complex_div(x,y):\n    '''\n    Write a function to divide complex numbers.\n    '''\n    x = float(x)\n    y = float(y)\n    a = x/y\n    print(a)\ndef complex_add_new(x,y):\n    '''\n    Write a function to add complex numbers.\n    '''\n    x = complex(x)\n    y = complex(y)\n    a = x+y\n    print(a)\ndef complex_sub_new(x,y):\n    '''\n    Write a function to subtract complex numbers.\n    '''\n    x = complex(x)\n    y = complex(y)\n    a = x-y\n    print(a)\ndef complex_mul_new(x,y):\n    '''\n    Write a function to multiply complex numbers.\n    '''\n    x = complex(x)\n    y = complex(y)\n    a = x*y\n    print(a)\ndef complex_div_new(x,y):\n    '''\n    Write a function to divide complex numbers.\n    '''\n    x = complex(x)\n    y = complex(y)\n    a = x/y\n    print(a)\ndef complex_add_rect(x,y,z):\n    '''\n    Write a function to add complex numbers to rectangular coordinates.\n    '''\n    x = float(x)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x,y))\n    x = r[0].real\n    y = r[0].imag\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.cos(y), x*cmath.sin(y)\nprint(polar_rect(1,cmath.pi))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    return (round(x*cmath.exp(y*1j),3),round(y,3))\n    \n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x * cmath.cos(y)\n    i = x * cmath.sin(y)\n    return round(r.real,2) + round(i.real,2) * 1j\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x+y*1j\n    return r.real, r.imag\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.polar(complex(x,y))\n    print('The rectangular coordinates are: ',x)\n    return\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[-1]\n    newList[-1]=temp\n    return newList\n    "
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef find_max(newList):\n    '''\n    Write a python function to return the maximum of the values in a list.\n    '''\n    max_val = newList[0]\n    for i in range(len(newList)):\n        if max_val < newList[i]:\n            max_val = newList[i]\n    return max_val\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    list_len=len(newList)\n    temp=newList[0]\n    newList[0]=newList[list_len-1]\n    newList[list_len-1]=temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList) \n    temp = newList[0] \n    newList[0] = newList[length - 1] \n    newList[length - 1] = temp \n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    print(newList)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k>n): \n        return 0\n    elif(k==n): \n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a=1;\n    b=1;\n    s=0;\n    for i in range(1,k+1):\n        s+=a\n        a*=(n-i+1)*b/(i*k)\n        b*=i\n    return s\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0: \n        return 1\n    if k==1: \n        return n\n    if k>=n: \n        return 1\n    return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    b=[0]*(n+1)\n    b[0]=b[1]=1\n    for i in range(2,n+1):\n        b[i] = b[i-1]+b[i-2]\n    return b[n]*b[k]\n    #return b[n]//b[k]\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n<0:\n        return -1\n    elif n==0 or n==1:\n        return 1\n    else:\n        fact=1\n        for i in range(2,n+1):\n            fact=fact*i\n        return fact\n    \ndef palindrome(n):\n    '''\n    Write a python function to find the palindrome of a number.\n    '''\n    rev=0\n    temp=n\n    while(n):\n        rev=rev*10+n%10\n        n=n//10\n    return rev==temp\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n<0:\n        return -1\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (factorial(n) / (factorial(k) * factorial(n - k)))\ndef binomial_coefficient(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (factorial(n) / (factorial(k) * factorial(n - k)))\n    # return int(binomial_coeff(n,k))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == k: return 1\n    if n < k: return 0\n    if n == 0: return 0\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in range(k+1)] for x in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i, k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n    return C[n][k]\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(1, k+1): \n        res = res * (n - k + i) // i \n    return res\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        if len(ip.split(\".\"))==4:\n            return ip\n        ip_list = ip.split(\".\")\n        while len(ip_list[3])>1 and ip_list[3][0]==\"0\":\n            ip_list[3] = ip_list[3][1:]\n        return \".\".join(ip_list)\n    except:\n        raise Exception(\"Invalid IP Address\")\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #return re.sub('^0+(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+).*', '\\1.\\2.\\3.\\4', ip)\n    return re.sub('^0+(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)', '\\g<1>.\\g<2>.\\g<3>.\\g<4>', ip)\n    \n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\.0+', '.', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    for i in ip:\n        if i == \".\":\n            ip = ip.replace(i, \"\")\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    x = re.match(\"\\d*\\.\\d*\\.\\d*\\.\\d*\",ip)\n    if x:\n        return x.group()\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('(?<=.)0', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #return re.sub('^0+(?P<ip>.*)', lambda match: match.group('ip'), ip)\n    return re.sub('(?P<ip>0+)', lambda match: match.group('ip'), ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    a = re.split('\\.', ip)\n    if int(a[0]) == 0:\n        return a[1]+'.'+a[2]+'.'+a[3]\n    elif int(a[1]) == 0:\n        return a[0]+'.'+a[2]+'.'+a[3]\n    elif int(a[2]) == 0:\n        return a[0]+'.'+a[1]+'.'+a[3]\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == '':\n        return ip\n    else:\n        return re.sub('0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Your code here\n    ip=re.sub(r'0+\\.','.',ip)\n    return ip\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for i in range(len(list1)):\n        if list1[i]%2!= 0:\n            odd_list.append(list1[i])\n        else:\n            even_list.append(list1[i])\n    return even_list[0] - odd_list[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list_odd = []\n    list_even = []\n    for i in list1:\n        if i % 2 == 0:\n            list_even.append(i)\n        else:\n            list_odd.append(i)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    diff = even_list[0] - odd_list[0]\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = list1[0:1]\n    even = list1[1:2]\n    diff = abs(sum(odd) - sum(even))\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in list1:\n        if list1.index(i)%2 == 0:\n            num1 = list1.index(i)\n        else:\n            num2 = list1.index(i)\n    return num1,num2"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if i%2==0:\n            num1=list1[i]\n        else:\n            num2=list1[i]\n    return num1,num2\n    \ndef first_and_last(list1):\n    '''\n    Write a function to find the first and the last element of a given list.\n    '''\n    first_ele=list1[0]\n    last_ele=list1[-1]\n    return first_ele,last_ele\n    \ndef first_and_last_without_slicing(list1):\n    '''\n    Write a function to find the first and the last element of a given list without using list slicing.\n    '''\n    first_ele=list1[0]\n    last_ele=list1[-1]\n    return first_ele,last_ele\n    \ndef first_and_last_with_min_max(list1):\n    '''\n    Write a function to find the first and last element with the minimum and maximum value in a given list.\n    '''\n    min=max=list1[0]\n    min_ind=max_ind=0\n    for i in range(len(list1)):\n        if list1[i]<min:\n            min=list1[i]\n            min_ind=i\n        if list1[i]>max:\n            max=list1[i]\n            max_ind=i\n    first_ele=min\n    last_ele=max\n    return first_ele,last_ele\n    \ndef duplicate_list(list1):\n    '''\n    Write a function to find the duplicate number in a given list of numbers.\n    '''\n    for i in range(len(list1)):\n        if list1.count(list1[i])>1:\n            return list1[i]\n    \ndef duplicate_list_with_hashing(list1):\n    '''\n    Write a function to find the duplicate number in a given list of numbers with the use of hashing.\n    '''\n    hash_table=dict()\n    for i in range(len(list1)):\n        hash_table[list1[i]]=list1[i]\n    for key,value in hash_table.items():\n        if value==key:\n            return key\n            \ndef duplicate_list_without_hashing(list1):\n    '''\n    Write a function to find the duplicate number in a given list of numbers without the use of hashing.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        list2.append(list1[i])\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return list1[i]\n            \ndef duplicate_number_in_sorted_array(list1):\n    '''\n    Write a function to find the duplicate number in a given sorted array of numbers.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==list1[i+1]:\n            return list1[i]\n    \ndef duplicate_number_in_sorted_array_2(list1):\n    '''\n    Write a function to find the duplicate number in a given sorted array of numbers.\n    '''\n    list1.sort()\n    for i in range(len(list1)):\n        if list1[i]==list1[i+1]:\n            return list1[i]\n            \ndef duplicate_number_in_sorted_array_3(list1):\n    '''\n    Write a function to find the duplicate number in a given sorted array of numbers.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==list1[i+1]:\n            return list1[i]\n    \ndef duplicate_number_in_sorted_array_4(list1):\n    '''\n    Write a function to find the duplicate number in a given sorted array of numbers.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]==list1[i+1]:\n            return list1[i]\n            \ndef remove_duplicate(list1):\n    '''\n    Write a function to remove the duplicate number from a given array.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        if list1[i] not in new_list:\n            new_list.append(list1[i])\n    return new_list\n    \ndef remove_duplicate_without_extra_space(list1):\n    '''\n    Write a function to remove the duplicate number from a given array.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i]==list1[j]:\n                list1[j]=0\n    list1=[i for i in list1 if i!=0]\n    return list1\n    \ndef find_sum_of_all_numbers(list1):\n    '''\n    Write a function to find the sum of all numbers in a given list.\n    '''\n    sum=0\n    for i in range(len(list1)):\n        sum+=list1[i]\n    return sum\n    \ndef find_sum_of_all_numbers_2(list1):\n    '''\n    Write a function to find the sum of all numbers in a given list.\n    '''\n    sum=0\n    for i in list1:\n        sum+=i\n    return sum\n    \ndef find_sum_of_all_numbers_3(list1):\n    '''\n    Write a function to find the sum of all numbers in a given list.\n    '''\n    return sum(list1)\n    \ndef find_sum_of_all_numbers_4(list1):\n    '''\n    Write a function to find the sum of all numbers in a given list.\n    '''\n    sum=0\n    for i in list1:\n        sum+=i\n    return sum\n    \ndef find_sum_of_all_numbers_5(list1):\n    '''\n    Write a function to find the sum of all numbers in a given list.\n    '''\n    sum=0\n    for i in range(len(list1)):\n        sum+=list1[i]\n    return sum\n    \ndef get_negative_numbers(list1):\n    '''\n    Write a function to get the negative numbers from a given list.\n    '''\n    neg_list=[]\n    for i in range(len(list1)):\n        if list1[i]<0:\n            neg_list.append(list1[i])\n    return neg_list\n    \ndef get_negative_numbers_2(list1):\n    '''\n    Write a function to get the negative numbers from a given list.\n    '''\n    neg_list=[]\n    for i in list1:\n        if i<0:\n            neg_list.append(i)\n    return neg_list\n    \ndef get_negative_numbers_3(list1):\n    '''\n    Write a function to get the negative numbers from a given list.\n    '''\n    neg_list=[i for i in list1 if i<0]\n    return neg_list\n    \ndef get_negative_numbers_4(list1):\n    '''\n    Write a function to get the negative numbers from a given list.\n    '''\n    return [i for i in list1 if i<0]\n    \ndef get_negative_numbers_5(list1):\n    '''\n    Write a function to get the negative numbers from a given list.\n    '''\n    return [i for i in list1 if i<0]\n    \ndef get_positive_numbers(list1):\n    '''\n    Write a function to get the positive numbers from a given list.\n    '''\n    pos_list=[]\n    for i in range(len(list1)):\n        if list1[i]>0:\n            pos_list.append(list1[i])\n    return pos_list\n    \ndef get_positive_numbers_2(list1):\n    '''\n    Write a function to get the positive numbers from a given list.\n    '''\n    pos_list"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    first_odd = list1[0]\n    first_even = list1[1]\n    return first_odd - first_even\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=0\n    odd=0\n    for i in list1:\n        if i%2==0:\n            even+=i\n        else:\n            odd+=i\n    return even-odd\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even, odd = 0, 0\n    for i in list1:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[1]\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if (n!=m) : \n        return -1\n    swaps = 0\n    for i in range(0,n):\n        if (str1[i]!= str2[i]) : \n            swaps += 1\n    return swaps \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    if n1 > n2 :\n        str1,str2 = str2,str1\n        n1,n2 = n2,n1\n    l1 = [0]*(n1+1)\n    l2 = [0]*(n1+1)\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            l1[i+1] = l1[i] + 1\n            l2[i+1] = l2[i] + 1\n        else:\n            l1[i+1] = l1[i]\n            l2[i+1] = l2[i]\n    m = 0\n    for i in range(n1+1):\n        if l1[i]!= l2[i]:\n            m = max(m, l2[i])\n    return m\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Create an array to store all 0's\n    zero_arr = [0] * len(str1)\n    one_arr = [0] * len(str1)\n    \n    # Traverse the string and count all the 1s and 0s\n    for i in range(len(str1)) : \n        if str1[i] == '1' :\n            one_arr[i] = one_arr[i] + 1\n        else :\n            zero_arr[i] = zero_arr[i] + 1\n    \n    # Create an array of swaps to be carried out\n    swap_arr = []\n    \n    # Check if we have more 0s than 1s\n    if zero_arr[0] > one_arr[0] :\n        # Swap all the 1s with the 1s we have\n        for i in range(1, len(zero_arr)) :\n            if one_arr[i] > 0 :\n                swap_arr.append(zero_arr[i] + 1)\n                one_arr[i] = one_arr[i] - 1\n    else :\n        # Swap all the 0s with the 0s we have\n        for i in range(1, len(zero_arr)) :\n            if zero_arr[i] > 0 :\n                swap_arr.append(one_arr[i] + 1)\n                zero_arr[i] = zero_arr[i] - 1\n    \n    # Add the last 1 to the swap array\n    swap_arr.append(one_arr[len(one_arr) - 1])\n    \n    # Store the length of the array into a variable\n    len_swap_arr = len(swap_arr)\n    \n    # Count the minimum number of swaps required to convert\n    # one binary number represented as a string to another\n    counter = 0\n    for i in range(0, len_swap_arr) :\n        counter = counter + swap_arr[i]\n    \n    return counter\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n=len(str1)\n    m=len(str2)\n    if n!=m:\n        return -1\n    a1=[int(i) for i in str1]\n    a2=[int(i) for i in str2]\n    a=[]\n    for i in range(n):\n        a.append(a1[i]-a2[i])\n    if n==1:\n        return 0 if a[0]==0 else 1\n    if a[0]==0:\n        return 1\n    if a[0]==1:\n        a[0]-=1\n        a[1]+=1\n        return 2\n    if a[0]==2:\n        a[0]-=2\n        a[1]+=1\n        return 3\n    a[0]-=3\n    a[1]+=1\n    return 4\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) :\n        return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1_list = list(str1)\n    str2_list = list(str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if(str1[i]!= str2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Example:\n    # str1 = '1100'\n    # str2 = '1010'\n    # Output = 1\n    def countSwaps(num):\n        swaps = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # initialize variables\n    total_swaps = 0\n    # the following section code is used to generate the list of binary number\n    # input_list = []\n    # for i in str1:\n    #     input_list.append(i)\n    # for j in str2:\n    #     input_list.append(j)\n    \n    # the following section code is used to convert the string to binary number\n    # num1 = int(str1,2)\n    # num2 = int(str2,2)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    dict = {}\n    count = 0\n    n = len(str1)\n    for i in range(n) :\n        dict[str1[i]] = dict.get(str1[i],0) + 1\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        if isinstance(i,int) or isinstance(i,float):\n            size+=8\n        elif isinstance(i,bool):\n            size+=1\n        elif isinstance(i,str):\n            size+=sys.getsizeof(i)\n        elif isinstance(i,tuple):\n            size+=tuple_size(i)\n        else:\n            size+=sys.getsizeof(i)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # python3  code\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(tuple_list.__sizeof__())\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Getting tuple elements\n    #print(tuple_list)\n    list_len = len(tuple_list)\n    #print(list_len)\n    #print(type(list_len))\n    #print(\"\\n\")\n    # Calculating the size\n    size_tuple = list_len * sys.getsizeof(list_len)\n    #print(size_tuple)\n    return size_tuple\ndef tuple_size_2(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Getting tuple elements\n    #print(tuple_list)\n    #print(type(tuple_list))\n    #print(\"\\n\")\n    # Calculating the size\n    size_tuple = 0\n    for item in tuple_list:\n        #print(item)\n        size_tuple += sys.getsizeof(item)\n    #print(size_tuple)\n    return size_tuple\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    # Getting list elements\n    #print(list_list)\n    #print(type(list_list))\n    #print(\"\\n\")\n    # Calculating the size\n    size_list = sys.getsizeof(list_list)\n    #print(size_list)\n    return size_list\ndef dict_size(dict_dict):\n    '''\n    Write a function to find the size in bytes of the given dictionary.\n    '''\n    # Getting dictionary elements\n    #print(dict_dict)\n    #print(type(dict_dict))\n    #print(\"\\n\")\n    # Calculating the size\n    size_dict = sys.getsizeof(dict_dict)\n    #print(size_dict)\n    return size_dict\ndef str_size(str_str):\n    '''\n    Write a function to find the size in bytes of the given string.\n    '''\n    #print(str_str)\n    #print(type(str_str))\n    #print(\"\\n\")\n    # Calculating the size\n    size_str = sys.getsizeof(str_str)\n    #print(size_str)\n    return size_str"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list) * sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum([sys.getsizeof(x) for x in tuple_list])\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef sum_tuple(tuple_list):\n    '''\n    Write a function to add up all the values in the tuple.\n    '''\n    return sum(tuple_list)\ndef average(tuple_list):\n    '''\n    Write a function to find the average value in the tuple.\n    '''\n    return sum(tuple_list) / len(tuple_list)\ndef max_tuple(tuple_list):\n    '''\n    Write a function to find the highest value in the tuple.\n    '''\n    return max(tuple_list)\ndef min_tuple(tuple_list):\n    '''\n    Write a function to find the lowest value in the tuple.\n    '''\n    return min(tuple_list)\ndef contains_tuple(tuple_list, target):\n    '''\n    Write a function to check if a tuple contains a specific value.\n    '''\n    return target in tuple_list\ndef count_tuple(tuple_list, target):\n    '''\n    Write a function to check how many times a target value appears in the tuple.\n    '''\n    return tuple_list.count(target)\ndef find_index_tuple(tuple_list, target):\n    '''\n    Write a function to find the index of a value in the tuple.\n    '''\n    return tuple_list.index(target)\ndef reverse_tuple(tuple_list):\n    '''\n    Write a function to reverse the tuple.\n    '''\n    return tuple_list[::-1]\ndef index_tuple(tuple_list):\n    '''\n    Write a function to index a tuple and return the index and the value.\n    '''\n    for i, value in enumerate(tuple_list):\n        print(i, value)\ndef slice_tuple(tuple_list, index):\n    '''\n    Write a function to slice a tuple using a tuple.\n    '''\n    return tuple_list[index[0]:index[1]]\ndef join_tuple(tuple_list):\n    '''\n    Write a function to join a tuple.\n    '''\n    return \"\".join(tuple_list)\ndef swap_tuple(tuple_list):\n    '''\n    Write a function to swap two values in the tuple.\n    '''\n    temp = tuple_list[0]\n    tuple_list[0] = tuple_list[1]\n    tuple_list[1] = temp\ndef sorted_tuple(tuple_list):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return tuple_list.sort()\ndef convert_tuple(tuple_list):\n    '''\n    Write a function to convert a tuple into a list.\n    '''\n    return list(tuple_list)\ndef reverse_convert_tuple(tuple_list):\n    '''\n    Write a function to convert a list into a tuple.\n    '''\n    return tuple(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list = list(tuple_list)\n    sum_list = 0\n    for i in tuple_list:\n        sum_list += sys.getsizeof(i)\n    return sum_list\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tuple in tuple_list:\n        if tuple[0] == '__sizeof__':\n            return(size)\n        elif type(tuple[0]) == tuple:\n            size += tuple_size(tuple[0])\n        elif type(tuple[0]) == list:\n            size += tuple_size(tuple[0])\n        elif type(tuple[0]) == int or type(tuple[0]) == str:\n            size += sys.getsizeof(tuple[0])\n        else:\n            size += sys.getsizeof(tuple[0])\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 and len(arr2) == 0:\n        raise Exception(\"Empty list\")\n    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    return merge(arr1, arr2)[k]\n    \ndef merge(arr1, arr2):\n    '''\n    Auxillary function to perform merge sort.\n    '''\n    return merge_arr(merge_arr(arr1, arr2))\n    \ndef merge_arr(arr):\n    '''\n    Auxillary function to perform merge sort.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    mid = int(len(arr) / 2)\n    arr1 = merge_arr(arr[0:mid])\n    arr2 = merge_arr(arr[mid:len(arr)])\n    return merge(arr1, arr2)\n    \ndef find_kth_2(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 and len(arr2) == 0:\n        raise Exception(\"Empty list\")\n    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k <= len(arr1):\n        return arr1[k - 1]\n    if k > len(arr1) + len(arr2):\n        return arr2[k - 1 - len(arr1)]\n    return merge(arr1, arr2)[k - 1 - len(arr1)]\n        \n        \nprint(\"Kth element from the two sorted arrays is: {}\".format(find_kth([1,2,3,4,5,6,7,8], [2,4,6,8,10,12,14], 3)))\nprint(\"Kth element from the two sorted arrays is: {}\".format(find_kth_2([1,2,3,4,5,6,7,8], [2,4,6,8,10,12,14], 3)))"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == [] and arr2 == []:\n        return None\n    elif arr1 == []:\n        return arr2[k]\n    elif arr2 == []:\n        return arr1[k]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    def __get_kth(arr1, arr2, k):\n        if len(arr1) == 0:\n            return arr2[k-1]\n        elif len(arr2) == 0:\n            return arr1[k-1]\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        \n        median = (k-1)//2\n        if arr1[median] < arr2[median]:\n            return __get_kth(arr1[median+1:], arr2[:median], k-median-1)\n        elif arr1[median] > arr2[median]:\n            return __get_kth(arr1, arr2[median+1:], k-median-1)\n        else:\n            return arr1[median]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2:\n        return None\n    \n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n    i = 0\n    j = 0\n    while i < arr1_len and j < arr2_len:\n        if arr1[i] > arr2[j]:\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            i += 1\n            j += 1\n    if i >= arr1_len:\n        return arr2[j+k-1]\n    else:\n        return arr1[i+k-1]\n    \n    \nif __name__ == '__main__':\n    print('{} is the {}th element of two sorted array: {} and {}'.format(\n        find_kth([1, 2, 4], [2, 4, 6], 3), 3,\n        [1, 2, 4], [2, 4, 6]\n    ))\n    print('{} is the {}th element of two sorted array: {} and {}'.format(\n        find_kth([1, 2, 4], [2, 4, 6], 5), 5,\n        [1, 2, 4], [2, 4, 6]\n    ))\n    print('{} is the {}th element of two sorted array: {} and {}'.format(\n        find_kth([1, 2, 4], [2, 4, 6], 9), 9,\n        [1, 2, 4], [2, 4, 6]\n    ))\n    "
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    if len(arr1) == 0:\n        return arr2[k-1]\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    mid_1 = min(k//2, len(arr1))\n    mid_2 = k - mid_1\n    \n    if arr1[mid_1 - 1] <= arr2[mid_2 - 1]:\n        return find_kth(arr1[mid_1:], arr2, mid_2)\n    else:\n        return find_kth(arr1, arr2[mid_2:], mid_1)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binary_search(start, end, arr):\n        if start > end:\n            return -1\n        mid = start + (end-start) // 2\n        if arr[mid] == k:\n            return mid\n        elif k > arr[mid]:\n            return binary_search(mid+1, end, arr)\n        else:\n            return binary_search(start, mid-1, arr)\n    \n    def find_kth(arr1, arr2, k):\n        l1, l2 = len(arr1), len(arr2)\n        if l1 == 0:\n            return arr2[k-1]\n        if l2 == 0:\n            return arr1[k-1]\n        if k > l1+l2:\n            return sys.maxsize\n        i1, i2 = 0, 0\n        while True:\n            if i1 == l1:\n                return arr2[i2+k-1]\n            elif i2 == l2:\n                return arr1[i1+k-1]\n            if arr1[i1] == arr2[i2]:\n                if i1+1 == l1 and i2+1 == l2:\n                    return arr1[i1]\n                elif i1+1 == l1:\n                    return arr2[i2]\n                elif i2+1 == l2:\n                    return arr1[i1]\n                i1 += 1\n                i2 += 1\n            elif arr1[i1] < arr2[i2]:\n                i1 += 1\n            elif arr1[i1] > arr2[i2]:\n                i2 += 1\n            else:\n                raise ValueError('arr1 and arr2 are not disjoint.')\n    \n    l1, l2 = len(arr1), len(arr2)\n    if l1 == 0:\n        return arr2[k-1]\n    if l2 == 0:\n        return arr1[k-1]\n    if l1+l2 < k:\n        return sys.maxsize\n    return find_kth(arr1, arr2, k)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    sum1 = 0\n    temp = number\n    while temp > 0:\n        r = temp % 10\n        sum1 += r ** length\n        temp //= 10\n    if sum1 == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    result = 0\n    length = len(str(number))\n    while number:\n        digit = number % 10\n        result += digit ** length\n        number //= 10\n    return result == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    num_length = len(number)\n    sum = 0\n    for num in number:\n        sum += int(num) ** num_length\n    if sum == int(number):\n        print(number, \"is an armstrong number\")\n    else:\n        print(number, \"is not an armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp_num = number\n    sum_digits = 0\n    temp_number = number\n    while temp_number!= 0:\n        remainder = temp_number % 10\n        sum_digits += remainder ** 3\n        temp_number = int(temp_number / 10)\n    if sum_digits == temp_num:\n        print(f\"{temp_num} is an armstrong number\")\n    else:\n        print(f\"{temp_num} is not an armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    arm_num = 0\n    length = len(str(number))\n    for i in str(number):\n        i = int(i)\n        arm_num += i**length\n    if number == arm_num:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    l = len(str(number))\n    total = 0\n    while n > 0:\n        total = total + (n % 10)**l\n        n = int(n/10)\n    return total == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    str_num = str(number)\n    length = len(str_num)\n    sum = 0\n    for i in range(length):\n        sum += int(str_num[i]) ** length\n    if sum == number:\n        print(number, 'is an armstrong number.')\n    else:\n        print(number, 'is not an armstrong number.')\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    sum = 0\n    for i in number_str:\n        sum += int(i) ** len(number_str)\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #  type number: int\n    #  rtype: boolean\n    num_str = str(number)\n    num_list = []\n    for n in num_str:\n        num_list.append(int(n))\n    print(num_list)\n    sum_of_num = sum(num_list)\n    num_of_digits = len(num_list)\n    num_of_digits_cube = pow(num_of_digits, 3)\n    if sum_of_num == num_of_digits_cube:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n=len(str(number))\n    t=number\n    sum1=0\n    while number:\n        r=number%10\n        sum1+=(r**n)\n        number=number//10\n    return sum1==t\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    for i in range(number+1):\n        sum_n += i\n    print('The sum of first ', number,'natural numbers is: ', sum_n)\n    print('The average of first ', number,'natural numbers is: ', sum_n/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(number):\n        sum += i\n        average = sum / number\n    return average, sum\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s, n = 0, number\n    while n:\n        s, n = s + n, n - 1\n    return s\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 1:\n        print('The sum of first {0} number is {1}'.format(number, (number - 1) * number))\n        print('The average of first {0} number is {1}'.format(number, (number - 1) / number))\n    else:\n        print('The sum of first {0} number is {1}'.format(number, (number - 1) * number + sum_average(number - 1)))\n        print('The average of first {0} number is {1}'.format(number, (number - 1) / number + average(number - 1)))\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number >= 1:\n        sum = 0\n        avg = 0\n        for i in range(1, number+1):\n            sum += i\n        avg = sum / number\n        return sum, avg\n    else:\n        return None\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_total = 0\n    for i in range(1,number+1):\n        sum_total += i\n    average = sum_total/number\n    return(sum_total, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        sum += i\n        count += 1\n    return sum/count\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    count=0\n    while number!=0:\n        count+=1\n        sum+=number\n        number-=1\n    print(\"Sum of\",count,\"natural number is: \",sum)\n    print(\"Average of\",count,\"natural number is: \",sum/count)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,number+1):\n        sum+=i\n    avg=sum/number\n    print(\"The sum of the first {} numbers is: {}\".format(number,sum))\n    print(\"The average of the first {} numbers is: {}\".format(number,avg))\n    return sum,avg\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(1, number+1):\n        sum = sum + i\n    avg = sum/number\n    return sum, avg\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) :\n        print(\"Given number is Even.\")\n    else :\n        print(\"Given number is Odd.\")\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is odd\")\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n    \ndef print_Even(n) : \n    '''\n    Write a python function to print even numbers from 1 to n where n is a given number.\n    '''\n    for i in range(n) : \n        if is_Even(i) : \n            print(i)\n            \ndef sum_of_Even(n) : \n    '''\n    Write a python function to print sum of even numbers from 1 to n where n is a given number.\n    '''\n    sum = 0\n    for i in range(n) : \n        if is_Even(i) : \n            sum += i\n    return sum\n    \ndef main() : \n    n = int(input(\"Enter the number : \"))\n    print(\"Even numbers from 1 to {} are : \".format(n))\n    print_Even(n)\n    print(\"Sum of even numbers from 1 to {} is : {}\".format(n,sum_of_Even(n)))\n    \nif __name__ == \"__main__\" : \n    main()"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0):\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    hash_table = {}\n    for ch in str1:\n        if ch in hash_table:\n            return ch\n        hash_table[ch] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # using a dictionary to store the character and its index\n    index = dict()\n    for i, v in enumerate(str1):\n        if v in index:\n            return v\n        else:\n            index[v] = i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0, len(str1) - 1):\n        j = 1\n        while i+j < len(str1):\n            if str1[i] == str1[i+j]:\n                return str1[i]\n                break\n            else:\n                j += 1\n        \n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    l = len(str1)\n    for i in range(0,l):\n        for j in range(i+1,l):\n            if(str1[i] == str1[j]):\n                return str1[i]\n    return False\nprint(first_repeated_char('abccdeffggf'))\nprint(first_repeated_char('abcd'))\nprint(first_repeated_char('aabcdefff'))\nprint(first_repeated_char('abcd'))\nprint(first_repeated_char('abcdefgh'))\nprint(first_repeated_char('abcdefghi'))\nprint(first_repeated_char('abcdefghijkl'))\nprint(first_repeated_char('abcdefghijklmnopqrstuvwxyz'))\nprint(first_repeated_char('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\nprint(first_repeated_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))\nprint(first_repeated_char('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'))\nprint(first_repeated_char('The quick brown fox jumps over the lazy dog'))\nprint(first_repeated_char('This string has no repeating characters'))\nprint(first_repeated_char('non repeating string'))\nprint(first_repeated_char('sss'))\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return 'String is empty'\n    else:\n        chars = list(str1)\n        for i in range(len(chars)):\n            if chars[i] in chars[i+1:]:\n                return chars[i]\n        return 'No repeated character'\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    hash_table = {}\n    for i in str1:\n        if i in hash_table:\n            return i\n        else:\n            hash_table[i] = 1\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return next(key for key,value in Counter(str1).items() if value>1)\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i in dict:\n            return i\n        else:\n            dict[i]=0\n    return 'Not found'\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def get_ludic_helper(num):\n        if num == 1:\n            return set([1])\n        if num < 1:\n            return set()\n        ludic = get_ludic_helper(num // 2)\n        ludic = ludic.union(set([num]))\n        if num % 2 == 0:\n            ludic = ludic.union(get_ludic_helper(num//2))\n        return ludic\n    return list(get_ludic_helper(n))"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def dfs(num):\n        nonlocal visit\n        if num >= n:\n            return True\n        if visit[num]:\n            return False\n        if num < 0 or num in visit:\n            return False\n        visit[num] = True\n        return dfs(num - num % 10) or dfs(num - num % 10 * 10) or dfs(num - num % 10 * 10 * 10)\n    visit = {}\n    for i in range(1, n):\n        if dfs(i):\n            yield i\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1,n+1):\n        if i == 1 or i == 2:\n            ludic_list.append(i)\n        else:\n            if i % 2 == 0 or i % 3 == 0:\n                continue\n            else:\n                ludic_list.append(i)\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(1, n):\n        if num == 0:\n            continue\n        if num == 1:\n            continue\n        if num == 2:\n            ludic.append(num)\n            continue\n        if num > 2 and num % 2!= 0:\n            ludic.append(num)\n            continue\n        for n in range(3, num + 1):\n            if num % n == 0:\n                break\n            elif n == num:\n                ludic.append(num)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        for j in range(1, i):\n            if i % j == 0 and i / j < n:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 10:\n        return [1]\n    if n < 100:\n        return [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    a = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    b = []\n    for i in range(len(a)):\n        b.append(2*a[i])\n    b.append(1)\n    b.append(0)\n    for i in range(len(a), n):\n        j = i - len(a)\n        c = []\n        for k in range(len(b)):\n            c.append(a[k] + b[k])\n        a = c\n    return a\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ans = []\n    for i in range(1, n):\n        if is_ludic(i):\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def next_number(n):\n        if len(str(n)) == 1:\n            return n\n        if len(str(n)) == 2 and n < 99:\n            return int(str(n)[0]) + int(str(n)[0]) + int(str(n)[1])\n        if len(str(n)) == 3 and n < 999:\n            return int(str(n)[0]) + int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2])\n        if len(str(n)) == 4 and n < 9999:\n            return int(str(n)[0]) + int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2]) + int(str(n)[3])\n        if len(str(n)) == 5 and n < 99999:\n            return int(str(n)[0]) + int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2]) + int(str(n)[3]) + int(str(n)[4])\n        if len(str(n)) == 6 and n < 999999:\n            return int(str(n)[0]) + int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2]) + int(str(n)[3]) + int(str(n)[4]) + int(str(n)[5])\n        if len(str(n)) == 7 and n < 9999999:\n            return int(str(n)[0]) + int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2]) + int(str(n)[3]) + int(str(n)[4]) + int(str(n)[5]) + int(str(n)[6])\n        if len(str(n)) == 8 and n < 99999999:\n            return int(str(n)[0]) + int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2]) + int(str(n)[3]) + int(str(n)[4]) + int(str(n)[5]) + int(str(n)[6]) + int(str(n)[7])\n        if len(str(n)) == 9 and n < 999999999:\n            return int(str(n)[0]) + int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2]) + int(str(n)[3]) + int(str(n)[4]) + int(str(n)[5]) + int(str(n)[6]) + int(str(n)[7]) + int(str(n)[8])\n        return None\n    ludic = []\n    for i in range(1, n):\n        if next_number(i) == n:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludic.append(i)\n        elif (i % 2 == 0):\n            ludic.append(i)\n        elif (i == 3):\n            ludic.append(i)\n        elif (i % 3 == 0):\n            ludic.append(i)\n        elif (i % 5 == 0):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    s =''.join(reversed(words))\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # 1.split the string by spaces\n    # 2.reverse the string\n    # 3.join the words\n    l = s.split()\n    l.reverse()\n    return''.join(l)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse(l):\n        if not l:\n            return []\n        return reverse(l[1:]) + [l[0]]\n    return''.join(reverse(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    string = s.split(' ')\n    return''.join(string[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    new = []\n    for i in s:\n        new.append(i[::-1])\n    return \" \".join(new)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return s\n    return reverse_words(s[1:]) + s[0]\n    \ndef reverse_words2(s):\n    if len(s) == 0:\n        return s\n    # \uccab\ubc88\uc9f8 \ub2e8\uc5b4\ub97c \ub300\ubb38\uc790\ub85c \ubc14\uafd4\uc11c \uc800\uc7a5\n    first_word = s[0].upper()\n    # \ub098\uba38\uc9c0 \ub2e8\uc5b4\ub4e4\uc744 \uc18c\ubb38\uc790\ub85c \ubc14\uafd4\uc11c \uc800\uc7a5\n    other_word = s[1:].lower()\n    # \uccab\ubc88\uc9f8 \ub2e8\uc5b4\uc758 \uccab\ubc88\uc9f8 \ubb38\uc790\uc640 \ub05d\uc5d0\uc11c \ub450\ubc88\uc9f8 \ubb38\uc790\ub97c \uc11c\ub85c \ubc14\uafb8\uace0 \ub2e4\uc2dc \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \ubb38\uc790\uc5f4 \ubc18\ud658\n    return first_word + reverse_words2(other_word)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s =''.join(s.split(' ')[::-1])\n    return s\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num>1:\n        for i in range(2,num):\n            if(num%i)==0:\n                print(num,\"is not a prime number\")\n                print(i,\"times\",num//i,\"is\",num)\n                break\n        else:\n            print(num,\"is a prime number\")\n    else:\n        print(num,\"is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime_list = []\n    for i in range(2, num):\n        if num % i == 0:\n            prime_list.append(i)\n    if len(prime_list) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    \n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # List comprehension\n    # list = [i for i in range(1,num) if i%num == 0]\n    # print(list)\n    # check = True if len(list) == 2 else False\n    # return check\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                print(i, \"times\", num // i, \"is\", num)\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * (180 / math.pi)\ndef radian_radian(radian):\n    '''\n    Write a function to convert radians to radians.\n    '''\n    return radian\ndef distance_between_points(point_a, point_b):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt(sum([(i - j) ** 2 for i, j in zip(point_a, point_b)]))\ndef distance_between_points_2d(point_a, point_b):\n    '''\n    Write a function to calculate the distance between two points in two dimensions.\n    '''\n    return math.sqrt((point_a[0] - point_b[0]) ** 2 + (point_a[1] - point_b[1]) ** 2)\ndef distance_between_points_3d(point_a, point_b):\n    '''\n    Write a function to calculate the distance between two points in three dimensions.\n    '''\n    return math.sqrt((point_a[0] - point_b[0]) ** 2 + (point_a[1] - point_b[1]) ** 2 + (point_a[2] - point_b[2]) ** 2)\ndef distance_between_points_4d(point_a, point_b):\n    '''\n    Write a function to calculate the distance between two points in four dimensions.\n    '''\n    return math.sqrt((point_a[0] - point_b[0]) ** 2 + (point_a[1] - point_b[1]) ** 2 + (point_a[2] - point_b[2]) ** 2 + (point_a[3] - point_b[3]) ** 2)\ndef distance_between_points_n(point_a, point_b):\n    '''\n    Write a function to calculate the distance between two points in any number of dimensions.\n    '''\n    return math.sqrt(sum([(i - j) ** 2 for i, j in zip(point_a, point_b)]))\ndef distance_between_points_n_2d(point_a, point_b):\n    '''\n    Write a function to calculate the distance between two points in two dimensions.\n    '''\n    return math.sqrt((point_a[0] - point_b[0]) ** 2 + (point_a[1] - point_b[1]) ** 2)\ndef distance_between_points_n_3d(point_a, point_b):\n    '''\n    Write a function to calculate the distance between two points in three dimensions.\n    '''\n    return math.sqrt((point_a[0] - point_b[0]) ** 2 + (point_a[1] - point_b[1]) ** 2 + (point_a[2] - point_b[2]) ** 2)\ndef distance_between_points_n_4d(point_a, point_b):\n    '''\n    Write a function to calculate the distance between two points in four dimensions.\n    '''\n    return math.sqrt((point_a[0] - point_b[0]) ** 2 + (point_a[1] - point_b[1]) ** 2 + (point_a[2] - point_b[2]) ** 2 + (point_a[3] - point_b[3]) ** 2)\ndef change_in_elevation(elevation_a, elevation_b):\n    '''\n    Write a function to calculate the change in elevation.\n    '''\n    return elevation_a - elevation_b\ndef change_in_elevation_2d(elevation_a, elevation_b):\n    '''\n    Write a function to calculate the change in elevation in two dimensions.\n    '''\n    return elevation_a[0] - elevation_b[0], elevation_a[1] - elevation_b[1]\ndef change_in_elevation_3d(elevation_a, elevation_b):\n    '''\n    Write a function to calculate the change in elevation in three dimensions.\n    '''\n    return elevation_a[0] - elevation_b[0], elevation_a[1] - elevation_b[1], elevation_a[2] - elevation_b[2]\ndef change_in_elevation_4d(elevation_a, elevation_b):\n    '''\n    Write a function to calculate the change in elevation in four dimensions.\n    '''\n    return elevation_a[0] - elevation_b[0], elevation_a[1] - elevation_b[1], elevation_a[2] - elevation_b[2], elevation_a[3] - elevation_b[3]\ndef change_in_elevation_n(elevation_a, elevation_b):\n    '''\n    Write a function to calculate the change in elevation in any number of dimensions.\n    '''\n    return elevation_a[0] - elevation_b[0], elevation_a[1] - elevation_b[1], elevation_a[2] - elevation_b[2], elevation_a[3] - elevation_b[3]\ndef change_in_elevation_n_2d(elevation_a, elevation_b):\n    '''\n    Write a function to calculate the change in elevation in two dimensions.\n    '''\n    return elevation_a[0] - elevation_b[0], elevation_a[1] - elevation_b[1]\ndef change_in_elevation_n_3d(elevation_a, elevation_b):\n    '''\n    Write a function to calculate the change in elevation in three dimensions.\n    '''\n    return elevation_a[0] - elevation_b[0], elevation_a[1] - elevation_b[1], elevation_a[2] - elevation_b[2]\ndef change_in_elevation_n_4d(elevation_a, elevation_b):\n    '''\n    Write a function to calculate the change in elevation in four dimensions.\n    '''\n    return elevation_a[0] - elevation_b[0], elevation_a[1] - elevation_b[1], elevation_a[2] - elevation_b[2], elevation_a[3] - elevation_b[3]\ndef wind_direction(wind_deg, wind_speed):\n    '''\n    Write a function to calculate the wind direction.\n    '''\n    return wind_deg + (wind_speed * (180 / math.pi))\ndef wind_direction_2d(wind_deg, wind_speed):\n    '''\n    Write a function to calculate the wind direction in two dimensions.\n    '''\n    return wind_deg[0] + (wind_speed[0] * (180 / math.pi)), wind_deg[1] + (wind_speed[1] * (180 / math.pi))\ndef wind_direction_3d(wind_deg, wind_speed):\n    '''\n    Write a function to calculate the wind direction in three dimensions.\n    '''\n    return wind_deg[0] + (wind_speed[0] * (180 / math.pi)), wind_deg[1] + (wind_speed[1] * (180 / math.pi)), wind_deg[2] + (wind_speed[2] * (180 / math.pi))\ndef wind_direction_4d(wind_deg, wind_speed):\n    '''\n    Write a function to calculate the wind direction in four dimensions.\n    '''\n    return wind_deg[0] + (wind_speed[0] * (180 / math.pi)), wind_deg[1] + (wind_speed[1] * (180 / math.pi)), wind_deg[2] + (wind_speed[2] * (180 / math.pi)), wind_deg[3] + (wind_speed[3] * (180 / math.pi))\ndef wind_direction_n(wind_deg, wind_speed):\n    '''\n    Write a function to calculate the wind direction in any number of dimensions.\n    '''\n    return wind_deg[0] + (wind_speed[0] * (180 / math.pi)), wind_deg[1] + (wind_speed[1] * (180 / math.pi)), wind_deg[2] + (wind_speed[2] * (18"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian=degree*(math.pi/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    print(\"Degree =\",degree,\"Radians =\",(degree*(math.pi/180)))\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    print(\"Expected Output: \", math.pi, \"\\n\")\n    print(\"Actual Output: \", radian_degree(math.pi), \"\\n\")\n    print(\"Expected Output: 3.14159265358979\\n\")\n    print(\"Actual Output: \", radian_degree(3.14159265358979), \"\\n\")\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = float(degree)\n    degree = degree * math.pi / 180\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*(180/math.pi)\ndef magnitude(vector):\n    '''\n    Write a function to return the magnitude of a vector.\n    '''\n    return math.sqrt(vector[0]**2+vector[1]**2+vector[2]**2)\ndef vector_magnitude(vector):\n    '''\n    Write a function to return the magnitude of a vector.\n    '''\n    return math.sqrt(vector[0]**2+vector[1]**2+vector[2]**2)\ndef unit_vector(vector):\n    '''\n    Write a function to return the unit vector of a vector.\n    '''\n    return vector/magnitude(vector)\ndef dot_product(vector_1,vector_2):\n    '''\n    Write a function to return the dot product of two vectors.\n    '''\n    return vector_1[0]*vector_2[0]+vector_1[1]*vector_2[1]+vector_1[2]*vector_2[2]\ndef cross_product(vector_1,vector_2):\n    '''\n    Write a function to return the cross product of two vectors.\n    '''\n    return [vector_1[1]*vector_2[2]-vector_1[2]*vector_2[1],vector_1[2]*vector_2[0]-vector_1[0]*vector_2[2],vector_1[0]*vector_2[1]-vector_1[1]*vector_2[0]]\ndef angle_between_vectors(vector_1,vector_2):\n    '''\n    Write a function to return the angle in radians between two vectors.\n    '''\n    return math.acos(dot_product(vector_1,vector_2)/(magnitude(vector_1)*magnitude(vector_2)))\ndef add_vectors(vector_1,vector_2):\n    '''\n    Write a function to add two vectors.\n    '''\n    return [vector_1[0]+vector_2[0],vector_1[1]+vector_2[1],vector_1[2]+vector_2[2]]\ndef sub_vectors(vector_1,vector_2):\n    '''\n    Write a function to subtract two vectors.\n    '''\n    return [vector_1[0]-vector_2[0],vector_1[1]-vector_2[1],vector_1[2]-vector_2[2]]\ndef scale_vector(vector,scalar):\n    '''\n    Write a function to scale a vector by a scalar.\n    '''\n    return [vector[0]*scalar,vector[1]*scalar,vector[2]*scalar]\ndef cross_product_matrix(vector_1,vector_2):\n    '''\n    Write a function to create the cross product matrix of two vectors.\n    '''\n    return [[0,-vector_2[2],vector_2[1]],[vector_2[2],0,-vector_2[0]],[-vector_2[1],vector_2[0],0]]\ndef vector_addition_matrix(vector_1,vector_2):\n    '''\n    Write a function to create the vector addition matrix of two vectors.\n    '''\n    return [[1,0,0],[0,1,0],[vector_2[0],vector_2[1],vector_2[2]]]\ndef vector_scalar_multiplication_matrix(vector,scalar):\n    '''\n    Write a function to create the vector scalar multiplication matrix of a vector and a scalar.\n    '''\n    return [[scalar,0,0],[0,scalar,0],[0,0,scalar]]\ndef matrix_addition(matrix_1,matrix_2):\n    '''\n    Write a function to add two matrices.\n    '''\n    return [[matrix_1[0][0]+matrix_2[0][0],matrix_1[0][1]+matrix_2[0][1],matrix_1[0][2]+matrix_2[0][2]],[matrix_1[1][0]+matrix_2[1][0],matrix_1[1][1]+matrix_2[1][1],matrix_1[1][2]+matrix_2[1][2]],[matrix_1[2][0]+matrix_2[2][0],matrix_1[2][1]+matrix_2[2][1],matrix_1[2][2]+matrix_2[2][2]]]\ndef matrix_scalar_multiplication(matrix,scalar):\n    '''\n    Write a function to scale a matrix by a scalar.\n    '''\n    return [[matrix[0][0]*scalar,matrix[0][1]*scalar,matrix[0][2]*scalar],[matrix[1][0]*scalar,matrix[1][1]*scalar,matrix[1][2]*scalar],[matrix[2][0]*scalar,matrix[2][1]*scalar,matrix[2][2]*scalar]]\ndef matrix_transpose(matrix):\n    '''\n    Write a function to transpose a matrix.\n    '''\n    return [[matrix[0][0],matrix[1][0],matrix[2][0]],[matrix[0][1],matrix[1][1],matrix[2][1]],[matrix[0][2],matrix[1][2],matrix[2][2]]]\ndef matrix_determinant(matrix):\n    '''\n    Write a function to return the determinant of a matrix.\n    '''\n    return matrix[0][0]*matrix[1][1]*matrix[2][2]+matrix[0][1]*matrix[1][2]*matrix[2][0]+matrix[0][2]*matrix[1][0]*matrix[2][1]-matrix[0][2]*matrix[1][1]*matrix[2][0]-matrix[0][1]*matrix[1][0]*matrix[2][2]-matrix[0][0]*matrix[1][2]*matrix[2][1]\ndef matrix_inverse(matrix):\n    '''\n    Write a function to return the inverse of a matrix.\n    '''\n    determinant=matrix_determinant(matrix)\n    return [[(matrix[1][1]*matrix[2][2]-matrix[1][2]*matrix[2][1])/determinant,(-matrix[0][1]*matrix[2][2]+matrix[0][2]*matrix[2][1])/determinant,(matrix[0][1]*matrix[1][2]-matrix[0][2]*matrix[1][1])/determinant],[(matrix[1][2]*matrix[2][0]-matrix[1][0]*matrix[2][2])/determinant,(-matrix[0][2]*matrix[2][0]+matrix[0][0]*matrix[2][2])/determinant,(matrix[0][2]*matrix[1][0]-matrix[0][0]*matrix[1][2])/determinant],[(matrix[1][0]*matrix[2][1]-matrix[1][1]*matrix[2][0])/determinant,(matrix[0][0]*matrix[2][1]-matrix[0][1]*matrix[2][0])/determinant,(matrix[0][0]*matrix[1][1]-matrix[0][1]*matrix[1][0])/determinant]]\ndef create_translation_matrix(vector):\n    '''\n    Write a function to create a translation matrix.\n    '''\n    return [[1,0,0,vector[0]],[0,1,0,vector[1]],[0,0,1,vector[2]],[0,0,0,"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    #radians = degree*(math.pi/180)\n    #return radians\n    return (degree*(math.pi/180))\n    \ndef radian_degree2(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree*(math.pi/180)\n    return radians\n    \ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = radian*(180/math.pi)\n    return degree\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # First, we can simply return a match object for the first match\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    # Now, we could also return the indices of the start and end of the match\n    # match = re.search(pattern, text)\n    # return match.group(), match.start(), match.end()\n    # Or, we could use the findall function to return a list of all match objects\n    # match = re.findall(pattern, text)\n    # return match[0]\n    # Finally, we could use finditer to return an iterator for all the matches\n    # matches = re.finditer(pattern, text)\n    # for match in matches:\n    #     print(match.group())\n    # This finds every occurrence of a pattern anywhere in the text\n    # matches = re.finditer(pattern, text)\n    # for match in matches:\n    #     print(match.group())\n    # This finds every occurrence of a pattern in the text but only returns the first one\n    # matches = re.findall(pattern, text)\n    # return matches[0]\n    # This finds every occurrence of a pattern in the text but returns a tuple with the index of the first match\n    # matches = re.findall(pattern, text)\n    # return matches[0], matches[1]\n    # This finds every occurrence of a pattern in the text but returns a list of all matches\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    return match.group()\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    m = pattern.search(text)\n    if m:\n        return m.group(0), m.start(), m.end()\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text).group(), re.search(pattern, text).start(), re.search(pattern, text).end()\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Write your code here\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(0), match.end(0)\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.search(pattern, text)\n    if matches!= None:\n        return matches.group()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    print('\\n--- FIND LITERALS ---')\n    print(text)\n    print(pattern)\n    matches = re.finditer(pattern, text)\n    print(matches)\n    for match in matches:\n        print(match)\n        print(match.span())\n        print(text[match.span()[0]:match.span()[1]])\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    print(result)\n    return result\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1]\n    for i in range(2,n+1):\n        bell.append((i * bell[i-1]) / (i-1))\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n+1) \n    bell[0] = bell[1] = 1\n    for i in range(2, n+1): \n        bell[i] = bell[i - 1] + bell[i - 2] \n    return bell[n] \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]\n    for i in range(1, n + 1):\n        bell.append(i * bell[i - 1])\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n  \n  "
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int((1+math.sqrt(1+8*n))/2) \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_list = [1, 1]\n    for i in range(2, n + 1):\n        bell_list.append(bell_list[i - 1] + bell_list[i - 2])\n    return bell_list[n]\n    \ndef factorial(n):\n    '''\n    Write a python function to find nth factorial.\n    '''\n    fact = 1\n    for i in range(2, n + 1):\n        fact = fact * i\n    return fact\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1,n+1): \n        bell[i][0] = bell[i-1][i-1] \n        for j in range(1,i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n  "
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n * (n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=0\n    bell=bell+1\n    for i in range(2,n+1):\n        bell=bell+i\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return 0\n    bell_value = 0\n    bell_value += bell_Number(n-1)\n    bell_value += bell_Number(n-2)\n    bell_value += bell_Number(n-3)\n    return bell_value\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    L = L - 1\n    \n    list1.pop(L)\n    \n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L + 1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    \n    for i in range(len(list1)):\n        if list1[i]!= L:\n            new_list.append(list1[i])\n        else:\n            continue\n    return new_list\n        \ndef main():\n    list1 = [1,2,3,4,5,6,7,8,9]\n    L = 5\n    new_list = remove_kth_element(list1, L)\n    print(new_list)\n    return\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Take the list of number and call the function\n    #Remove the kth element\n    list1[L] = None\n    #return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L):\n        list1.pop()\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print(\"\\n Remove kth element: \")\n    list2 = []\n    list2.append(list1[0])\n    for i in range(1, len(list1)):\n        if list1[i]!= list1[i - 1]:\n            list2.append(list1[i])\n    list2.append(list1[len(list1) - 1])\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    list2.pop(L)\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    newlist = []\n    if L == 0:\n        newlist = list1\n    elif L == len(list1):\n        newlist = list1[:-1]\n    else:\n        for i in range(len(list1)):\n            if i!= L-1:\n                newlist.append(list1[i])\n    return newlist\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Replace pass above with your code\n    res_list = list1.copy()\n    res_list.pop(L)\n    return res_list\n    \ndef remove_kth_element_alt(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Replace pass above with your code\n    res_list = list1.copy()\n    res_list.pop(L)\n    return res_list\n    "
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    \n    # This solution is O(N) time\n    if N > len(test_list[0]):\n        return None\n    else:\n        max_list = []\n        for i in range(len(test_list)):\n            max_list.append(max(test_list[i]))\n        return max_list\n    \n    # This solution is O(N^2) time\n    # for i in range(len(test_list)):\n    #     new_list = []\n    #     for j in range(len(test_list[i])):\n    #         if j == N:\n    #             new_list.append(test_list[i][j])\n    #     print(new_list)\n    \n    # This solution is O(N^2) time\n    # return [test_list[i][N] for i in range(len(test_list))]\n    \n    \nprint(max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return -1\n    return max([col[N] for col in test_list])\n    # return max([test_list[i][N] for i in range(len(test_list))])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #print(len(test_list[0]))\n    if N < 0:\n        return max(test_list[0])\n    return max(test_list[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # input: matrix, integer\n    # output: integer\n    if N > len(test_list) - 1:\n        return 'Error: N is too large'\n    else:\n        col = []\n        for i in range(0, len(test_list)):\n            col.append(test_list[i][N])\n        return max(col)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    print('\\n\\n', '=' * 6, 'testing max_of_nth', '=' * 6)\n    print(f'\\n{test_list}')\n    assert max_of_nth(test_list, 4) == 4\n    assert max_of_nth(test_list, 5) == 7\n    print(f'\\n{test_list}')\n    assert max_of_nth(test_list, 6) == 12\n    print(f'\\n{test_list}')\n    assert max_of_nth(test_list, 7) == 13\n    print(f'\\n{test_list}')\n    assert max_of_nth(test_list, 8) == 19\n    print(f'\\n{test_list}')\n    print('-' * 20, '\\n\\n')\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max_of_nth = 0\n    \n    for i in range(len(test_list)):\n        if (max_of_nth < test_list[i][N-1]):\n            max_of_nth = test_list[i][N-1]\n            \n    return max_of_nth\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    print \"Test_list: \" + str(test_list)\n    print \"N: \" + str(N)\n    col = N - 1\n    print \"Max value in column \" + str(col) + \": \" + str(max(test_list[col]))\n    return max(test_list[col])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_column = test_list[0][N-1]\n    for element in test_list:\n        if element[N-1] > max_column:\n            max_column = element[N-1]\n    return max_column\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth = test_list[0][N]\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_of_nth:\n            max_of_nth = test_list[i][N]\n    return max_of_nth\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N < 1 or N > len(test_list):\n        return 'Invalid'\n    if len(test_list) == 1:\n        return test_list[0]\n    first_line = test_list[0]\n    max_of_first_line = max(first_line)\n    list_of_column_maxes = [max_of_first_line]\n    for i in range(len(test_list)):\n        if i == 0:\n            continue\n        line = test_list[i]\n        list_of_column_maxes.append(max(line))\n    return list_of_column_maxes[N]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append([lst[i][0], lst[i][1]])\n    return res\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0][0],lst[1][1]]\n    \n    \ndef get_largest(lst):  \n    '''\n    Write a python function which takes a list of two numbers, and returns the greater of the two.\n    '''\n    if lst[0] > lst[1]:\n        return lst[0]\n    else:\n        return lst[1]\n        \ndef get_smallest(lst):  \n    '''\n    Write a python function which takes a list of two numbers, and returns the smaller of the two.\n    '''\n    if lst[0] < lst[1]:\n        return lst[0]\n    else:\n        return lst[1]\n        \ndef find_d(lst):  \n    '''\n    Write a python function which takes a list of numbers and returns the first element whose index is divisible by 3.\n    '''\n    for i in range(len(lst)):\n        if i%3 == 0:\n            return lst[i]\n            \ndef find_sum_of_divisors(lst):  \n    '''\n    Write a python function which takes a list of numbers and returns the sum of its divisors.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        for j in range(1,lst[i]+1):\n            if lst[i] % j == 0:\n                sum += j\n    return sum\n            \n            \ndef sum_of_squares(lst):  \n    '''\n    Write a python function which takes a list of numbers and returns the sum of the squares of its elements.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]**2\n    return sum\n    \n            \ndef product_of_odd_numbers(lst):  \n    '''\n    Write a python function which takes a list of numbers and returns the product of its odd numbers.\n    '''\n    prod = 1\n    for i in range(len(lst)):\n        if lst[i]%2 == 1:\n            prod *= lst[i]\n    return prod\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [l[0] for l in lst],[l[1] for l in lst]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for i in range(len(lst)):\n        first_list.append(lst[i][0])\n        second_list.append(lst[i][1])\n    return [first_list, second_list]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0][0],lst[1][1]]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(i) for i in zip(*lst)]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return [0]\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        new_list = [lst[0][0] + lst[1][0], lst[0][1] + lst[1][1]]\n    else:\n        lst1 = merge(lst[:len(lst)//2])\n        lst2 = merge(lst[len(lst)//2:])\n        new_list = merge(lst1 + lst2)\n    return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst2 = []\n    for element in lst:\n        lst2.append(element[0])\n        lst2.append(element[1])\n    return lst2\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # lst = [['orange', 1], ['banana', 2], ['apple', 3], ['kiwi', 4]]\n    lst2 = []\n    for x in range(len(lst)):\n        lst2.append([lst[x][0], lst[x][1]])\n    return lst2\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    index = 0\n    for i in test_list:\n        new_list.append(test_list[index] + test_list[index + 1] + test_list[index + 2])\n        index += 3\n    return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        total = 0\n        for j in range(i+1):\n            total += test_list[j]\n        new_list.append(total)\n    print(new_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = []\n    for i in range(len(test_list)):\n        cummulative_sum.append(sum(test_list[:i+1]))\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return(sum(test_list))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    cum_sum.append(test_list[0])\n    for i in range(1,len(test_list)):\n        cum_sum.append(cum_sum[i-1]+test_list[i])\n    return cum_sum\nprint(cummulative_sum([1,2,3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    for i in range(0, len(test_list)):\n        new_list.append(sum(test_list[0:i+1]))\n    return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list_len = len(test_list)\n    cummulative_sum = 0\n    for index, item in enumerate(test_list):\n        cummulative_sum = item + cummulative_sum\n        if index < test_list_len-1:\n            print(cummulative_sum)\n    print(cummulative_sum)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    test_list = list(test_list)\n    for i in test_list:\n        total += i\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # return [sum(test_list[:i+1]) for i in range(len(test_list))]\n    return list(accumulate(test_list))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for i in range(len(nums[0])):\n        sum = 0\n        for j in range(len(nums)):\n            sum += nums[j][i]\n        avg.append(sum/len(nums))\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(num)\n    return total / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x) / len(x) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(sum(t)/len(t), 2) for t in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    l = []\n    for x in nums:\n        l.append(mean(x))\n    return l\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        sum_nums = 0\n        for j in nums[i]:\n            sum_nums += j\n        result.append(sum_nums/len(nums[i]))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # list comprehension\n    # return [sum(row)/len(row) for row in zip(*nums)]\n    # a for loop\n    list = []\n    for i in range(len(nums)):\n        tuple = nums[i]\n        total = 0\n        for j in range(len(tuple)):\n            total = total + tuple[j]\n        list.append(total/len(tuple))\n    return list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    return [round(sum(tuple)/len(tuple), 1) for tuple in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_list = []\n    for i in nums:\n        sum = 0\n        for j in i:\n            sum += j\n        num_list.append(sum/len(i))\n    return num_list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    list_tuple = []\n    sum = 0\n    for tup in nums:\n        sum += sum(tup)\n        list_tuple.append(tup)\n    list_tuple = list(map(lambda x: x/len(nums), list_tuple))\n    return list_tuple\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([(x % y) for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        modulo_tup = tuple(map(lambda x,y: x % y, test_tup1, test_tup2))\n    return modulo_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    \n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    \n    \n    \ndef test_tuple_modulo():\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert (tuple_modulo(tuple(range(0, 3)), tuple(range(3, 6))) == tuple(range(0, 3)))\n    assert (tuple_modulo(tuple(range(0, 9)), tuple(range(4, 8))) == tuple(range(0, 9)))\n    assert (tuple_modulo(tuple(range(0, 9)), tuple(range(4, 8))) == tuple(range(0, 9)))\n    assert (tuple_modulo(tuple(range(0, 9)), tuple(range(4, 8))) == tuple(range(0, 9)))\n    \n    \ntest_tuple_modulo("
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([(i%j) for i,j in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tuple_modulo = []\n    for i in range(len(test_tup1)):\n        tuple_modulo.append(test_tup1[i] % test_tup2[i])\n    return tuple_modulo\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        tup_mod = ()\n        for i in range(len(test_tup1)):\n            tup_mod = tup_mod + (test_tup1[i] % test_tup2[i],)\n        return tup_mod\n    else:\n        return False\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def count_jumps(d):\n        if d==0:\n            return 0\n        elif d>0:\n            return 1 + count_jumps(d-1)\n        else:\n            return 1 + count_jumps(d+1)\n    return count_jumps(abs(steps))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0 or d == steps :\n        return 1\n    elif d > steps :\n        return 0\n    else:\n        return min_Jumps(steps, d-1) + min_Jumps(steps, d+1)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 1:\n        return 0\n    if steps == 1:\n        return 1\n    if d == 1 or d == 0:\n        return steps\n    if d < 0:\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if d == 0:\n        return steps\n    min_jumps = float('inf')\n    for i in range(1, steps + 1):\n        jumps = min_Jumps(steps - i, abs(d - i))\n        min_jumps = min(min_jumps, jumps)\n    return min_jumps + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    q = []\n    count = 0\n    q.append(0)\n    while (len(q)!= 0):\n        count += 1\n        for i in range(len(q)):\n            pos = q.pop(0)\n            if pos == d:\n                return count\n            if pos + steps[pos] > d:\n                q.append(pos)\n            else:\n                q.append(pos+steps[pos])\n                if pos + steps[pos] not in steps:\n                    q.append(pos+steps[pos])\n    return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    if d == 0 and steps == 1: \n        return 1\n    if d == 0 and steps!= 1: \n        return 0\n    if d >= steps: \n        return 1 + min_Jumps(steps - 1, d - 1)\n    return 1 + min(min_Jumps(steps - 1, d), min_Jumps(steps - 1, d - 1))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def get(x, y):\n        return -1 if x < 0 or x >= rows or y < 0 or y >= cols else d[x][y]\n    def get_value(x, y):\n        return -1 if x < 0 or x >= rows or y < 0 or y >= cols else v[x][y]\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    if steps < d: \n        return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps.sort()\n    curr_step = steps[0]\n    jump = 0\n    for step in steps[1:]:\n        if step < curr_step:\n            print('The minimum number of jumps required is ', jump)\n            return\n        curr_step -= d\n        jump += 1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # variable to store the maximum number of jumps \n    max_jumps = 0 \n    # visited array to store the points that have been visited already \n    visited = [] \n    # queue to store the number of points that have to be visited. \n    queue = [] \n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [i / j for i, j in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0:\n        return []\n    elif len(nums1) == 1:\n        if nums1[0]%nums2[0] == 0:\n            return nums1[0]//nums2[0]\n        else:\n            return [nums1[0]//nums2[0],nums1[0]%nums2[0]]\n    else:\n        if nums1[0]%nums2[0] == 0:\n            return [nums1[0]//nums2[0]] + div_list(nums1[1:],nums2[1:])\n        else:\n            return [nums1[0]//nums2[0],nums1[0]%nums2[0]] + div_list(nums1[1:],nums2[1:])\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == len(nums2):\n        return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    outlist=[]\n    for i in range(0,len(nums1)):\n        outlist.append(nums1[i]/nums2[i])\n    return outlist\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"nums1 and nums2 must be the same length\")\n    out = []\n    for num1,num2 in zip(nums1,nums2):\n        out.append(num1/num2)\n    return out\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    def div_list(nums1,nums2):\n        return [nums1[i]/nums2[i] for i in range(len(nums1))]\n    return div_list(nums1,nums2)\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    len1 = len(nums1)\n    len2 = len(nums2)\n    if len1!= len2:\n        return None\n    result = []\n    for i in range(0,len1):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list1 = []\n    for i in nums1:\n        list1.append(i / nums2[nums1.index(i)])\n    return list1\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1//num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l = []\n    for i in range(len(nums1)):\n        l.append(nums1[i]/nums2[i])\n    return l\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    letters = ''\n    numbers = ''\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            letters += char\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(filter(str.isdigit, test_str))+''.join(filter(str.isalpha, test_str))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count = 0\n    result = []\n    for i in test_str:\n        if i.isdigit():\n            count += 1\n        else:\n            result.append(i)\n    for j in range(count):\n        result.append(test_str[-j])\n    return \"\".join(result)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list and check each part\n    test_str_list = test_str.split()\n    new_list = []\n    for i in test_str_list:\n        # print(i)\n        # Checks if the string is a number\n        if i.isnumeric():\n            new_list.append(i)\n    # join the string together with the numbers at the end\n    new_list = \" \".join(new_list)\n    # print(new_list)\n    return new_list\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return \"\".join([\"\".join([x for x in test_str if not x.isdigit()]),\"\".join([x for x in test_str if x.isdigit()])])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            result_str += i\n    \n    return result_str + test_str[len(result_str):]\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isnumeric():\n            num_list.append(char)\n    return test_str.join(num_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    return re.sub(r'[^\\d]+', '', test_str)\n    "
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    list1 = list(test_str)\n    list2 = []\n    for char in list1:\n        if char.isdigit():\n            list2.append(char)\n    for char in list1:\n        if char.isalpha():\n            list2.append(char)\n    return ''.join(list2)\nprint(move_num(\"abcd12\"))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #split the string and join them together with no numbers\n    return ''.join([i for i in test_str if not i.isdigit()])\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    def not_divisible(s, n):\n        \n        if n%s==0:\n            return False\n        else:\n            return True\n    \n    n = len(a)\n    \n    res = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if not_divisible(a[i], a[j]):\n                res.append(a[i])\n                res.append(a[j])\n                break\n    \n    return len(set(res))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = []\n    for i in a:\n        if all(i%j == 0 for j in a):\n            s.append(i)\n    return len(s)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    assert len(a) >= 1, \"Length of array is less than 1\"\n    assert a.__class__.__name__ == 'list', \"Input type is not a list\"\n    assert all([type(x) is int for x in a]), \"Only integers are allowed in the array\"\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    max_size = 1\n    for i in range(1,n):\n        if a[i] % a[0] == 0:\n            dp[i] = 1\n            max_size = 1\n        else:\n            dp[i] = 1 + dp[i-1]\n            if a[i] % a[dp[i-1]] == 0:\n                dp[i] = dp[i-1] + 1\n            max_size = max(dp[i],max_size)\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort(reverse=True)\n    sum = 0\n    for i in range(len(a)-1,0,-1):\n        for j in range(i-1,0,-1):\n            if a[j] % a[i] == 0:\n                sum += a[j]\n                a.pop(j)\n                break\n    return sum\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if (a[j] % a[i]):\n                break\n            elif (j == len(a)-1):\n                return a[i]\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    count = 0\n    for i in range(len(a)):\n        subset = []\n        for j in range(len(a)):\n            if a[i] % a[j] == 0:\n                subset.append(a[j])\n        if subset:\n            if len(subset) > count:\n                count = len(subset)\n    return count\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # For all numbers in a list\n    for i in range(len(a)):\n        \n        # For each pair of numbers in the list\n        for j in range(i+1, len(a)):\n            \n            # Check if the pair is divisible\n            if a[j] % a[i] == 0:\n                \n                # Find the largest subset of the list that can be made divisible by the pair\n                sublist = [a[i], a[j]] + largest_subset(a[i+1:])\n                \n                # Check if the current pair and the returned subset are larger than the largest subset\n                if len(sublist) > len(largest_subset(a)):\n                    largest_subset(a) = sublist\n                \n    return largest_subset(a)"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    \n    size = 0\n    largest_subset = []\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if a[j] % a[i] == 0:\n                s = a[j]\n                b = [s]\n                b += a[i+1:]\n                if len(largest_subset) < len(b):\n                    size = len(b)\n                    largest_subset = b\n                elif len(largest_subset) == len(b):\n                    size = len(b)\n                    if len(largest_subset) > len(b):\n                        size = len(b)\n                        largest_subset = b\n    \n    return size, largest_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    s = set()\n    s.add(0)\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if not a[j] % a[i] == 0:\n                break\n        else:\n            s.add(i)\n    return(len(s))\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n%2 == 1):\n        return float(get_nth(arr1, arr2, int(n/2 + 0.5)))\n    else:\n        return (float(get_nth(arr1, arr2, int(n/2))) + float(get_nth(arr1, arr2, int(n/2 - 1))))/2\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    arr3 = []\n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            arr3.append(arr1[i])\n            i += 1\n        else:\n            arr3.append(arr2[j])\n            j += 1\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    i = j = 0\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    \n    if arr1[0] > arr2[0]:\n        arr1, arr2 = arr2, arr1\n    \n    if n % 2 == 0:\n        if n > 1:\n            mid_1 = n//2\n            mid_2 = mid_1 - 1\n        else:\n            mid_1 = n\n            mid_2 = mid_1 - 1\n        \n        return (arr1[mid_1] + arr2[mid_2]) / 2\n    \n    else:\n        mid = n//2\n        return arr1[mid]\n    \nif __name__ == '__main__':\n    arr1 = [1,2,3,4,5,6,7,8]\n    arr2 = [10,20,30,40,50,60]\n    \n    #arr1 = [1, 2]\n    #arr2 = [3, 4]\n    \n    print(get_median(arr1, arr2, len(arr1)))\n    "
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # median = []\n    # for i in range(len(arr1)):\n    #     if len(arr1)==1 and len(arr2)==1:\n    #         median.append((arr1[i] + arr2[i])/2)\n    #     elif len(arr1)==1 and len(arr2)!=1:\n    #         median.append(arr2[i])\n    #     elif len(arr2)==1 and len(arr1)!=1:\n    #         median.append(arr1[i])\n    #     elif len(arr1)==1 and len(arr2)!=1:\n    #         median.append((arr1[i] + arr2[i])/2)\n    #     elif len(arr1)!=1 and len(arr2)!=1:\n    #         if (arr1[i] + arr2[i])/2 == (arr1[i+1] + arr2[i+1])/2:\n    #             median.append((arr1[i] + arr2[i])/2)\n    #         elif (arr1[i] + arr2[i])/2 > (arr1[i+1] + arr2[i+1])/2:\n    #             median.append(arr1[i+1])\n    #         elif (arr1[i] + arr2[i])/2 < (arr1[i+1] + arr2[i+1])/2:\n    #             median.append(arr2[i+1])\n    #     elif len(arr1)==1 and len(arr2)==1:\n    #         if (arr1[i] + arr2[i])/2 < (arr1[i+1] + arr2[i+1])/2:\n    #             median.append(arr1[i+1])\n    #         else:\n    #             median.append(arr2[i+1])\n    #     elif len(arr2)==1 and len(arr1)==1:\n    #         if (arr1[i] + arr2[i])/2 < (arr1[i+1] + arr2[i+1])/2:\n    #             median.append(arr1[i+1])\n    #         else:\n    #             median.append(arr2[i+1])\n    # print(median)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    arr3 = []\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    s = arr1 + arr2\n    s.sort()\n    if (n%2 == 1):\n        return s[int(n/2)]\n    else:\n        return (s[int(n/2)] + s[int(n/2) - 1])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    elif n == 2:\n        return (min(arr1[0], arr2[0]) + max(arr1[1], arr2[1]))/2\n    else:\n        arr1_idx = 0\n        arr2_idx = 0\n        arr_sum = 0\n        arr_median = 0\n        while True:\n            if arr1[arr1_idx] < arr2[arr2_idx]:\n                arr_sum += arr1[arr1_idx]\n                arr1_idx += 1\n            else:\n                arr_sum += arr2[arr2_idx]\n                arr2_idx += 1\n            if arr1_idx == n:\n                arr_sum += arr2[arr2_idx]\n                arr2_idx += 1\n            elif arr2_idx == n:\n                arr_sum += arr1[arr1_idx]\n                arr1_idx += 1\n            if arr1_idx == n:\n                arr_median = arr_sum/n\n                break\n            elif arr2_idx == n:\n                arr_median = arr_sum/n\n                break\n        return arr_median\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if(n%2 == 0):\n        median = (arr1[int(n/2)] + arr2[int(n/2)])/2\n    else:\n        median = arr2[int(n/2)]\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Use the smaller list to iterate through\n    if len(arr1) < len(arr2):\n        for i in range(n):\n            if arr1[i] > arr2[i]:\n                arr1, arr2 = arr2, arr1\n                break\n    else:\n        for i in range(n):\n            if arr2[i] > arr1[i]:\n                arr1, arr2 = arr2, arr1\n                break\n    # now we have sorted lists.\n    if len(arr1) == len(arr2):\n        # check if n % 2 == 0\n        if n % 2 == 0:\n            return (arr1[n//2 - 1] + arr2[n//2])/2\n        else:\n            return arr2[n//2]\n    elif len(arr1) > len(arr2):\n        return arr1[n//2]\n    else:\n        return arr2[n//2]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n    \n    \ndef add_string(str1,str2):\n    '''\n    Write a function to return the sum of two numbers. You should not convert the inputs to integers directly.\n    '''\n    return str(int(str1)+int(str2))\n    \n    \ndef calculator(num1,num2,op):\n    '''\n    Write a function that takes in two numbers and an operator and return the result of the two numbers and the operator\n    '''\n    return eval(str(num1)+op+str(num2))\n    \n    \ndef mix_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns their intersection and the union.\n    '''\n    return [x for x in list1 if x in list2], [x for x in (list1+list2)]\n    \n    \ndef flatten(list_of_lists):\n    '''\n    Write a function that takes in a list of lists and returns a list that combines all items from the lists.\n    '''\n    return [x for l in list_of_lists for x in l]\n    \n    \ndef max_min_sum_avg(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a dictionary containing the max, min, and average of the list.\n    '''\n    return {'Max': max(nums), 'Min': min(nums), 'Avg': sum(nums)/len(nums)}\n    \n    \ndef filter_evens(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that only contains even numbers from the original list.\n    '''\n    return [x for x in nums if x%2==0]\n    \n    \ndef delete_first_and_last(list1):\n    '''\n    Write a function that takes in a list and returns a list with the first and last items removed.\n    '''\n    return list1[1:-1]\n    \n    \ndef remove_all_matches(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that contains only the elements that are NOT in both lists.\n    '''\n    return [x for x in list1+list2 if x not in list1 or x not in list2]\n    \n    \ndef get_matches(list1,list2):\n    '''\n    Write a function that takes in two lists and return a list of matches.\n    '''\n    return [x for x in list1+list2 if x in list1 and x in list2]\n    \n    \ndef get_unique_list(list1):\n    '''\n    Write a function that takes in a list and returns a list with all duplicate elements removed.\n    '''\n    return list(set(list1))\n    \n    \ndef get_common_items(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of the common elements between the lists.\n    '''\n    return [x for x in list1 if x in list2]\n    \n    \ndef get_unique_items(list1):\n    '''\n    Write a function that takes in a list and returns a list of unique items in that list.\n    '''\n    return list(set(list1))\n    \n    \ndef get_difference(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of items that are not in both lists.\n    '''\n    return [x for x in list1+list2 if x not in list1 or x not in list2]\n    \n    \ndef get_longer_list(list1,list2):\n    '''\n    Write a function that takes in two lists and return the list that contains the most amount of items. If both lists are equal in length, return the first list.\n    '''\n    return list1 if len(list1)>len(list2) else list2\n    \n    \ndef get_longest_string(list1):\n    '''\n    Write a function that takes in a list of strings and returns the longest string in the list.\n    '''\n    return max(list1, key=len)\n    \n    \ndef get_num_items_in_list(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary where the keys are the items in the list, and the values are the number of times the items appear in the list.\n    '''\n    return dict.fromkeys(list1,0)\n    \n    \ndef get_sum_of_numbers(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all of the numbers in the list.\n    '''\n    return sum(list1)\n    \n    \ndef remove_middle(list1):\n    '''\n    Write a function that takes in a list and returns a list with all items in the middle of the list removed.\n    '''\n    return list1[::2]\n    \n    \ndef middle_element(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the middle element of the list. If the list has an odd number of elements, return the middle element. If the list has an even number of elements, return the average of the middle two elements.\n    '''\n    return list1[(len(list1)-1)//2:(len(list1)+1)//2]\n    \n    \ndef get_index_of_item(list1,item):\n    '''\n    Write a function that takes in a list and returns the index of the first item in the list that matches the provided item. If there is no matching item, return -1.\n    '''\n    return list1.index(item) if item in list1 else -1\n    \n    \ndef get_index_of_last_item(list1,item):\n    '''\n    Write a function that takes in a list and returns the index of the last item in the list that matches the provided item. If there is no matching item, return -1.\n    '''\n    return list1.index(item) if item in list1 else -1\n    \n    \ndef get_count(list1,item):\n    '''\n    Write a function that takes in a list and returns the number of times that the provided item appears in the list.\n    '''\n    return list1.count(item)\n    \n    \ndef combine_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all of the items from the first list, followed by all of the items from the second list.\n    '''\n    return list1+list2\n    \n    \ndef get_product_of_list(list1):\n    '''\n    Write a function that takes in a list and returns the product of the numbers in the list.\n    '''\n    return reduce(lambda x,y:x*y,list1)\n    \n    \ndef get_largest_number(list1):\n    '''\n    Write a function that takes in a list and returns the largest number in that list. If there are multiple numbers that are equal in value, return the first number from the list.\n    '''\n    return max(list1)\n    \n    \ndef get_smallest_number(list1):\n    '''\n    Write a function that takes in a list and returns the smallest number in that list. If there are multiple numbers that are equal in value, return the first number from the list.\n    '''\n    return min(list1)\n    \n    \ndef get_third_smallest_number(list1):\n    '''\n    Write a function that takes in a list and returns the third smallest number in that list. If the list has less than 3 elements, return None.\n    '''\n    list1.sort()\n    if len(list1)>3:\n        return list1[2]\n    else:\n        return None\n    \n    \ndef get_third_largest_number(list1):\n    '''\n    Write a function that takes in a list and returns the third largest number in that list. If the list has less than 3 elements, return None.\n    '''\n    list1.sort(reverse=True)\n    if len(list1)>3:\n        return list1[2]\n    else:\n        return None\n        \n        \ndef get_n_smallest"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [x**n for x in nums]\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [num ** n for num in nums]\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(0,n):\n        nums = [num**n for num in nums]\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return list(map(lambda x: x**n, nums))\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    last = newList[-1] \n    newList[-1] = newList[0] \n    newList[0] = last \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        return [newList[-1]] + newList[1:-1] + [newList[0]]\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 1:\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[len(newList)-1]\n        newList[len(newList)-1] = temp\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    first=newList[0]\n    last=newList[-1]\n    newList[0]=last\n    newList[-1]=first\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    len1 = len(newList) \n    if (len1 % 2 == 0): \n        len2 = len1 / 2\n    else: \n        len2 = (len1 + 1) / 2\n    first_half = newList[0:int(len2)] \n    second_half = newList[int(len2):] \n    reversed_first_half = first_half[::-1] \n    final = second_half + reversed_first_half \n    return final\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    listLength = len(newList) \n    temp = newList[0] \n    newList[0] = newList[listLength - 1] \n    newList[listLength - 1] = temp \n    return newList \n  \ndef sum_List(newList): \n    '''\n    Write a Python function to sum all the numbers in a given list.\n    '''\n    total = 0\n    for i in newList:\n        total += i\n    return total \n  \ndef product_List(newList): \n    '''\n    Write a Python function to multiply all the numbers in a given list.\n    '''\n    total = 1\n    for i in newList:\n        total *= i\n    return total \n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # list_length = len(newList)\n    # newList[0], newList[list_length - 1] = newList[list_length - 1], newList[0]\n    # return newList\n    \n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r=r/2\n    return 3.14*r*r\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r = int(r)\n    area = math.sqrt(r**2-r**2)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (3.14*r**2)/2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi*r*r*r*(3*r/2)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = math.sqrt(r**2 - (r/2)**2)\n    return a*(3/2)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (pi*(r**2))/2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Area of triangle = \u00bd x r * r\n    area = 0.5 * r * r\n    \n    return area\n    \nprint(triangle_area(1))\nprint(triangle_area(2))\nprint(triangle_area(3))\nprint(triangle_area(4))\nprint(triangle_area(5))\nprint(triangle_area(6))\nprint(triangle_area(7))\nprint(triangle_area(8))\nprint(triangle_area(9))\nprint(triangle_area(10))\nprint(triangle_area(11))\nprint(triangle_area(12))\nprint(triangle_area(13))\nprint(triangle_area(14))\nprint(triangle_area(15))\nprint(triangle_area(16))\nprint(triangle_area(17))\nprint(triangle_area(18))\nprint(triangle_area(19))\nprint(triangle_area(20))\nprint(triangle_area(21))\nprint(triangle_area(22))\nprint(triangle_area(23))\nprint(triangle_area(24))\nprint(triangle_area(25))\nprint(triangle_area(26))\nprint(triangle_area(27))\nprint(triangle_area(28))\nprint(triangle_area(29))\nprint(triangle_area(30))\nprint(triangle_area(31))\nprint(triangle_area(32))\nprint(triangle_area(33))\nprint(triangle_area(34))\nprint(triangle_area(35))\nprint(triangle_area(36))\nprint(triangle_area(37))\nprint(triangle_area(38))\nprint(triangle_area(39))\nprint(triangle_area(40))\nprint(triangle_area(41))\nprint(triangle_area(42))\nprint(triangle_area(43))\nprint(triangle_area(44))\nprint(triangle_area(45))\nprint(triangle_area(46))\nprint(triangle_area(47))\nprint(triangle_area(48))\nprint(triangle_area(49))\nprint(triangle_area(50))\nprint(triangle_area(51))\nprint(triangle_area(52))\nprint(triangle_area(53))\nprint(triangle_area(54))\nprint(triangle_area(55))\nprint(triangle_area(56))\nprint(triangle_area(57))\nprint(triangle_area(58))\nprint(triangle_area(59))\nprint(triangle_area(60))\nprint(triangle_area(61))\nprint(triangle_area(62))\nprint(triangle_area(61))\nprint(triangle_area(60))\nprint(triangle_area(59))\nprint(triangle_area(58))\nprint(triangle_area(57))\nprint(triangle_area(56))\nprint(triangle_area(55))\nprint(triangle_area(54))\nprint(triangle_area(53))\nprint(triangle_area(52))\nprint(triangle_area(51))\nprint(triangle_area(50))\nprint(triangle_area(49))\nprint(triangle_area(48))\nprint(triangle_area(47))\nprint(triangle_area(46))\nprint(triangle_area(45))\nprint(triangle_area(44))\nprint(triangle_area(43))\nprint(triangle_area(42))\nprint(triangle_area(41))\nprint(triangle_area(40))\nprint(triangle_area(39))\nprint(triangle_area(38))\nprint(triangle_area(37))\nprint(triangle_area(36))\nprint(triangle_area(35))\nprint(triangle_area(34))\nprint(triangle_area(33))\nprint(triangle_area(32))\nprint(triangle_area(31))\nprint(triangle_area(30))\nprint(triangle_area(29))\nprint(triangle_area(28))\nprint(triangle_area(27))\nprint(triangle_area(26))\nprint(triangle_area(25))\nprint(triangle_area(24))\nprint(triangle_area(23))\nprint(triangle_area(22))\nprint(triangle_area(21))\nprint(triangle_area(20))\nprint(triangle_area(19))\nprint(triangle_area(18))\nprint(triangle_area(17))\nprint(triangle_area(16))\nprint(triangle_area(15))\nprint(triangle_area(14))\nprint(triangle_area(13))\nprint(triangle_area(12))\nprint(triangle_area(11))\nprint(triangle_area(10))\nprint(triangle_area(9))\nprint(triangle_area(8))\nprint(triangle_area(7))\nprint(triangle_area(6))\nprint(triangle_area(5))\nprint(triangle_area(4))\nprint(triangle_area(3))\nprint(triangle_area(2))\nprint(triangle_area(1))\nprint(triangle_area(0))\nprint(triangle_area(1))\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3.14159 * (r**2))/2\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r\n    return area\n    \ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed i"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #r = input('Enter radius of the circle:')\n    r = float(r)\n    r = 2*(r**2)\n    a = math.sqrt(r)\n    area = ((a**2)/2)\n    return area\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 0\n    if not end:\n        end = len(array)-1\n    if start < end:\n        mid = (start+end)//2\n        if array[mid]==mid+1:\n            return mid+1\n        elif array[mid]<mid+1:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid)\n    return 1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    array.sort()\n    if end is None:\n        end=len(array)\n    if end<=start:\n        return None\n    min_value=array[start]\n    max_value=array[end-1]\n    if min_value is not None and max_value is not None:\n        if min_value>0:\n            return 0\n        else:\n            for i in range(start+1,end):\n                if array[i]!=array[i-1]+1:\n                    return array[i-1]+1\n    elif min_value is None and max_value is None:\n        return None\n    elif max_value is None:\n        return array[start]\n    elif min_value is None:\n        return array[end-1]+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end - start > 1:\n        mid = (end + start) // 2\n        if array[mid] - array[start] > 1:\n            return find_First_Missing(array,start=start,end=mid)\n        else:\n            return find_First_Missing(array,start=mid,end=end)\n    else:\n        if array[start]!= start + 1:\n            return start + 1\n        else:\n            return find_First_Missing(array,start=start + 1,end=end)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start < end:\n        mid = start + (end-start)//2\n        if array[mid] == mid:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,mid+1,end)\n    else:\n        return start+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == end:\n        return start+1\n    if start > end:\n        return -1\n    if start==1 and end==1:\n        return 1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start>=end:\n        print \"The list does not have any missing number\"\n        return None\n    if end==None:\n        end=len(array)\n    array.sort()\n    if array[start]!=start:\n        return start\n    if array[end-1]!=end:\n        return end\n    for i in range(start+1,end):\n        if array[i]!=i:\n            return i\n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        raise Exception(\"Array is empty\")\n    if end == None:\n        end = len(array)\n    start = max(0,start)\n    end = min(end,len(array))\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    array = sorted(array)\n    if not end:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i:\n            return i\n    return end\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end <= start:\n        return None\n    if end == start+1:\n        if array[start] == start+1:\n            return start+1\n        else:\n            return start\n    if end == start+2:\n        if array[start] == start+1:\n            return start+1\n        else:\n            return start+2\n    if end == start+3:\n        if array[start] == start+2:\n            return start+2\n        else:\n            return start+3\n    if end == start+4:\n        if array[start] == start+3:\n            return start+3\n        else:\n            return start+4\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \",\"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    print(string.replace(' ',''))\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = \"\"\n    for ch in string:\n        if ch == \" \":\n            new_string += '%20'\n        else:\n            new_string += ch\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # method 1\n    string = string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_str = string.replace(\" \", \"%20\")\n    return new_str\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if (i%2 == 0):\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # list of even numbers \n    even_numbers = [] \n    # Iterate over each number in the list \n    for number in list: \n        # Check if the number is even and if it is append it to the list \n        if number % 2 == 0: \n            even_numbers.append(number) \n    return even_numbers \n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list = list(list)\n    i=0\n    for i in range(len(list)):\n        if (list[i]%2==0):\n            list.pop(i)\n    return list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even_numbers = []\n    \n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n        \n    return even_numbers\n    \n    \ndef Merge(list1, list2):\n    '''\n    Write a Python function to merge two Python dictionaries.\n    '''\n    merged_dict = {}\n    \n    for key in list1:\n        merged_dict[key] = list1[key]\n    \n    for key in list2:\n        merged_dict[key] = list2[key]\n    \n    return merged_dict\n    \n    \ndef Remove(list, value):\n    '''\n    Write a Python function to remove a specific value from a list.\n    '''\n    \n    new_list = []\n    \n    for i in range(0, len(list)):\n        if list[i]!= value:\n            new_list.append(list[i])\n            \n    return new_list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for i in list:\n        if i % 2 == 0:\n            even_num.append(i)\n    return even_num\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for n in list:\n        if n % 2 == 0:\n            even_numbers.append(n)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    new_list = []\n    for i in list:\n        if i%2==0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    print(\"Input list is: \"+ str(list))\n    newlist = []\n    for x in list:\n        if(x % 2 == 0):\n            newlist.append(x)\n    print(\"New list: \"+ str(newlist))\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # base case\n    if list == []:\n        return []\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = [(ele[0] + i[0], ele[1] + i[1]) for i in [(-1,0),(0,1),(1,0),(0,-1)] if (i[0] + ele[0])>=0 and (i[1] + ele[1])>=0]\n    return adjacent\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i = ele[0]\n    j = ele[1]\n    neighbors = [(i - 1, j), (i, j - 1), (i + 1, j), (i, j + 1)]\n    neighbors = [coord for coord in neighbors if (coord[0] >= 0 and coord[0] < grid.shape[0] and coord[1] >= 0 and coord[1] < grid.shape[1])]\n    return neighbors\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = sub + [ele]\n    adj = []\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if i == 0 and j == 0:\n                continue\n            elif (ele[0] + i) < 0 or (ele[1] + j) < 0:\n                continue\n            else:\n                adj = adj + [(ele[0] + i,ele[1] + j)]\n    adj = list(set(adj))\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub = ele\n    if len(sub) == 1:\n        return [(sub[0], sub[1]+1), (sub[0], sub[1]-1), (sub[0]+1, sub[1]), (sub[0]-1, sub[1]), (sub[0]-1, sub[1]+1), (sub[0]+1, sub[1]-1)]\n    else:\n        return [(sub[0], sub[1]+1), (sub[0], sub[1]-1), (sub[0]+1, sub[1]), (sub[0]-1, sub[1]), (sub[0]-1, sub[1]+1), (sub[0]+1, sub[1]-1)] + adjac((sub[0], sub[1]+1), sub[1:]) + adjac((sub[0], sub[1]-1), sub[1:]) + adjac((sub[0]+1, sub[1]), sub[1:]) + adjac((sub[0]-1, sub[1]), sub[1:]) + adjac((sub[0]-1, sub[1]+1), sub[1:]) + adjac((sub[0]+1, sub[1]-1), sub[1:])\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    new_sub = sub + [ele]\n    x_sub = new_sub[0]\n    y_sub = new_sub[1]\n    coord = [(x_sub, y_sub), (x_sub + 1, y_sub), (x_sub, y_sub + 1), (x_sub + 1, y_sub + 1)]\n    new_sub = coord\n    return new_sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = [ele]\n    for x1 in range(-1, 2):\n        for y1 in range(-1, 2):\n            if not (x1 == 0 and y1 == 0):\n                result.append((x + x1, y + y1))\n    result = list(set(result))\n    return(result)\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub = ele\n    else:\n        sub = sub + (ele[1] - sub[0], ele[0] - sub[1])\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # defining a function that extracts all the adjacent coordinates of the given coordinate tuple. \n    # sub will be a list that will contain all the coordinates \n    for x, y in [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]: \n        sub.append((x,y)) \n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y, z = ele\n    if sub == []:\n        return [(x+1,y,z), (x-1,y,z), (x,y+1,z), (x,y-1,z), (x,y,z+1), (x,y,z-1)]\n    else:\n        return [(x+1,y,z), (x-1,y,z), (x,y+1,z), (x,y-1,z), (x,y,z+1), (x,y,z-1)] - sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ele[0] + sub, ele[1] + sub\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = list(text)\n    i = 0\n    while i < len(text):\n        if text[i] =='':\n            text[i] = '_'\n        elif text[i] == '_':\n            text[i] =''\n        i += 1\n    return ''.join(text)\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    translated_text = text.replace(' ', '_')\n    translated_text = translated_text.replace('_','')\n    return translated_text\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    def replace(text):\n        if text.count(' ') > 0:\n            return text.replace(' ', '_')\n        else:\n            return text.replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n    \ndef check_palindrome(text):\n    '''\n    Write a function that checks whether a given string is a palindrome (a word, phrase, or sequence that reads the same backward as forward).\n    '''\n    return text[::-1].lower() == text.lower()\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = []\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n    for z in zeros:\n        num_list.remove(z)\n    for num in zeros:\n        num_list.append(num)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #make a copy of the list to prevent the original list from being changed\n    num_list = num_list[:]\n    #set a counter to keep track of the index position\n    i = 0\n    #set a flag to mark if a zero is found\n    zero_found = False\n    #loop through the original list\n    while i < len(num_list):\n        #if the element is a zero\n        if num_list[i] == 0:\n            #set the flag to True\n            zero_found = True\n            #remove the element from the original list\n            num_list.pop(i)\n            #add it to the end of the new list\n            num_list.append(0)\n            #move the index position\n            i = 0\n        #if the element is not a zero\n        else:\n            #move the index position\n            i += 1\n    #if a zero was found\n    if zero_found:\n        #return the new list\n        return num_list\n    #if a zero was not found\n    else:\n        #return the original list\n        return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    move_zero = []\n    move_zero = num_list\n    count = 0\n    for x in range(len(move_zero)):\n        if move_zero[x] == 0:\n            count = count + 1\n    for x in range(count):\n        move_zero.remove(0)\n        move_zero.append(0)\n    return move_zero\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in range(len(num_list) - 1, -1, -1):\n        if num_list[num] == 0:\n            del num_list[num]\n            num_list.append(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    end_of_list = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            end_of_list.append(num_list[i])\n    return end_of_list + [0] * num_list.count(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    for i in num_list:\n        if i == 0:\n            num_list.pop(index)\n            num_list.append(i)\n        else:\n            index = index + 1\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num == 0:\n            new_list.append(num)\n        else:\n            new_list.append(num)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = num_list.count(0)\n    num_list.remove(0)\n    for _ in range(zero_count):\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    temp_list = []\n    for i in num_list:\n        if i!= 0:\n            temp_list.append(i)\n    return(temp_list + [0] * num_list.count(0))\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for idx,num in enumerate(num_list):\n        if num == 0:\n            num_list.pop(idx)\n            num_list.append(num)\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    arr_sorted = sorted(arr)\n    # print(arr_sorted)\n    for i in range(0,len(arr_sorted)):\n        for j in range(i+1,len(arr_sorted)):\n            sum = arr_sorted[i]^arr_sorted[j]\n            print(sum)\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            x = x ^ (arr[i] ^ arr[j]) \n    return x \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_of_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_of_xor = sum_of_xor ^ arr[i] ^ arr[j]\n    return sum_of_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(0,n) :\n        for j in range(i+1,n):\n            total += arr[i] ^ arr[j]\n    return total\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        for j in range(i + 1, n) : \n            s = s + (arr[i] ^ arr[j]) \n    return s \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR Sum of pairs\n    # o(n)\n    # return sum([arr[i]^arr[j] for i in range(n) for j in range(i+1,n)])\n    # o(1)\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0 \n    for i in range(n) : \n        for j in range(i + 1, n) : \n            sum = sum ^ arr[i] ^ arr[j] \n    return sum\ndef main() : \n    arr = [ 2, 3, 7, 2, 9, 3, 1 ] \n    n = len(arr) \n    print(\"The sum of xor of all pairs is : {}\".format(pair_xor_Sum(arr, n)))\nif __name__ == \"__main__\" : \n    main()"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0 \n    for i in range(n) : \n        for j in range(i + 1,n) : \n            res += (arr[i] ^ arr[j]) \n    return res \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # variable to store the sum of pairs\n    result = 0\n    # iterate the list\n    for i in range(0,n) : \n        for j in range(i+1,n) :\n            # for each pair, find the xor and store it in result variable\n            result ^= arr[i] ^ arr[j]\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    iterable = list(iterable)\n    for element in iterable:\n        hq.heappush(h, element)\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in range(len(iterable)):\n        hq.heappush(h,iterable[i])\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable=list(iterable)\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        iterable[i]=hq.heappop(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    return actual_cost == sale_amount\n    \ndef test_noprofit_noloss():\n    assert noprofit_noloss(50,50)\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return \"Profit\"\n    else:\n        return \"Loss\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Complete this function\n    return (sale_amount == actual_cost)\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return (actual_cost == sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount: \n        return True \n    else:\n        return False \n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('The sale amount is not profitable')\n    else:\n        print('The sale amount is not a loss')\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = int(v)\n    t = int(t)\n    wci = 13.12 + (0.6215*t) - (11.37*(v**0.16)) + (0.3965*t*(v**0.16))\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = (v**0.16)\n    f = (t**0.16)\n    r = a+b*e+c*f\n    return round(r)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=round(35.74+0.6215*t+((0.4275*t)-35.75)*(v**0.16))\n    return wci\ndef get_the_num(num):\n    '''\n    Write a function to obtain the word corresponding to the positive/negative/zero of the number entered.\n    '''\n    num=float(num)\n    if num>0:\n        return \"positive\"\n    elif num<0:\n        return \"negative\"\n    elif num==0:\n        return \"zero\"\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_mph = v*(2.237/3600)\n    v_knots = v_mph*0.5144\n    v_mps = v_knots*0.5144\n    wci = 13.12 + 0.6215*t - 11.37 * math.pow(v_mps, 0.16) + 0.3965*t * math.pow(v_mps, 0.16)\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<3 or t<0:\n        return 0\n    else:\n        c=round((v**0.16)*(t**0.16),0)\n        return c\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    print(round(v * math.sqrt(t)/(0.6*1.8*math.log(t)),0))\n    return round(v * math.sqrt(t)/(0.6*1.8*math.log(t)),0)"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16)\n    return round(wind_chill_index)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<3 or t<0:\n        return 0\n    else:\n        return round(35.74+0.6215*t+((0.4275*t)-35.75)*(v**0.16))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + (0.6215*t) - (35.75 * (v**0.16)) + ((0.4275 * t) * (v**0.16))\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #convert t to Kelvin\n    T = t + 273.15\n    if T > 100:\n        T = T - 40\n    windchill = 13.12 + 0.6215*T - 11.37*math.pow(v,0.16) + 0.3965*T*math.pow(v,0.16)\n    if windchill > 35:\n        return math.ceil(windchill)\n    else:\n        return math.floor(windchill)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names\n    sample_names = [sample_names[i] for i in range(len(sample_names)) if sample_names[i].islower()]\n    sample_names = [sample_names[i] for i in range(len(sample_names)) if sample_names[i][0].islower()!= True]\n    return len(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_list = []\n    for i in sample_names:\n        if i[0].isupper():\n            new_list.append(i)\n    return sum([len(i) for i in new_list])\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['Mark', 'Karen', 'Cindy', 'Albert', 'Sam']\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for i in sample_names:\n        if i[0].islower():\n            result = result + len(i)\n    print(result)\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Start writing your code here\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name)-name.find('a') for name in sample_names if name.find('a')>=0 and name[name.find('a')].islower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # sample_names = ['a1', 'a2', 'b1', 'b2', 'c1', 'c2']\n    return sum([len(x) for x in sample_names if not x.startswith(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'))])\n    \ndef nam_length(sample_names):\n    return sum([len(x) for x in sample_names if not x.startswith(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'))])\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for i in sample_names:\n        if i[0].islower():\n            total += len(i)\n    print(total)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lst = []\n    for i in sample_names:\n        lst.append(len(i))\n        if i[0].islower():\n            lst.remove(len(i))\n    return sum(lst)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import re\n    return sum([len(re.findall(r'[a-z]', n)[0]) for n in sample_names if n[0].islower()])\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r'\\([^)]*\\)'\n    items = re.sub(regex, '', items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = []\n    for item in items:\n        if re.match('^\\(', item):\n            item = item[1:]\n        if re.match('\\)$', item):\n            item = item[:-1]\n        output.append(item)\n    return output\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = list()\n    for i in items:\n        if i == \"(\" or i == \")\":\n            continue\n        else:\n            temp.append(i)\n    return temp\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = str(items)\n    items = re.sub(\"[\\(\\[].*?[\\)\\]]\", \"\", items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis = ['(', ')', '[', ']', '{', '}', ';']\n    return_string = items\n    for char in parenthesis:\n        return_string = return_string.replace(char, '')\n    return return_string\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if type(items) is not str:\n        return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item.startswith('(') and item.endswith(')'):\n            item = item[1:-1]\n        new_items.append(item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        items[i] = re.sub('\\(.*?\\)', '', items[i])\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = items.replace('(','')\n    items = items.replace(')','')\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # O(N) time | O(1) space\n    # Number of nth nonagonal number is:\n    # n! / ((n-1)! * 2)\n    num = 1\n    for i in range(1, n+1):\n        num *= i\n    return int(num / (i * 2))\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*n + n\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    # First attempt, just starting from 1.\n    # number = 1\n    \n    # while number < n:\n    #     number += 1\n    #     print(number)\n    #     if number % 6 == 0:\n    #         continue\n    #     elif number % 5 == 0:\n    #         continue\n    #     else:\n    #         print(number)\n    \n    # print(number)\n    \n    # I was able to use the 6 and 5 sequence to get the nth nonagonal number, but \n    # this approach didn't work for n > 10,000.\n    \n    # So, I looked up the sequence and realized that it had 6k + 5 = 2n, so I then \n    # was able to do it with a bit of algebra. \n    \n    # 6 * (k - 2) = 2 * n \n    # 2 * k = 2 * n + 6 \n    # k = (n - 2) / 6 \n    \n    # The tricky part was realizing that the sequence starts at 1 and ends at 2n-1, \n    # so I had to get creative and use a while loop to get the first index, then a \n    # range to get the rest of the indices. \n    \n    # code:\n    \n    # first_index = 1\n    \n    # while first_index < n:\n    #     first_index += 1\n    #     print(first_index)\n    #     if first_index % 6 == 0:\n    #         continue\n    #     elif first_index % 5 == 0:\n    #         continue\n    #     else:\n    #         print(first_index)\n    \n    # print(first_index)\n    \n    # n = 10,000\n    # 1, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108\n    # code:\n    \n    # while first_index < n:\n    #     first_index += 6\n    #     print(first_index)\n    #     if first_index % 5 == 0:\n    #         continue\n    #     else:\n    #         print(first_index)\n    \n    # print(first_index)\n    \n    # k = (n - 2) / 6 \n    # print(k)\n    \n    # This gave me the nth nonagonal number. \n    \n    n = 10000\n    k = (n - 2) / 6 \n    first_index = (6 * k) + 5\n    print(first_index)\n    \n    # This is O(1) since we know that the first index is always less than the nth \n    # nonagonal number, so we don't have to find it.\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n**3 + n**2 + n) / 6\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n ** 2 - n + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n == 0): \n        return 0\n    if (n == 1): \n        return 1\n    if (n > 0): \n        return n + is_nonagonal(n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n - 1) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_num = 0\n    for i in range(1, n+1):\n        nonagonal_num += i\n    return nonagonal_num\n    \ndef is_odd(n):\n    '''\n    Write a function to find if the argument is odd or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n        \ndef is_even(n):\n    '''\n    Write a function to find if the argument is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n        return True\n    else:\n        return False\n        \ndef is_armstrong(n):\n    '''\n    Write a function to find if a number is an Armstrong number or not.\n    '''\n    sum = 0\n    temp = n\n    while temp > 0:\n        sum += (temp % 10) ** 3\n        temp //= 10\n    if sum == n:\n        return True\n    else:\n        return False\n    \ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits of a positive integer.\n    '''\n    sum = 0\n    temp = n\n    while temp > 0:\n        sum += temp % 10\n        temp //= 10\n    return sum\n    \ndef sum_of_odd_digits(n):\n    '''\n    Write a function that returns the sum of the odd digits of a positive integer.\n    '''\n    sum = 0\n    temp = n\n    while temp > 0:\n        if (temp % 2) == 1:\n            sum += (temp % 10)\n        temp //= 10\n    return sum\n    \ndef sum_of_even_digits(n):\n    '''\n    Write a function that returns the sum of the even digits of a positive integer.\n    '''\n    sum = 0\n    temp = n\n    while temp > 0:\n        if (temp % 2) == 0:\n            sum += (temp % 10)\n        temp //= 10\n    return sum\n    \ndef is_perfect(n):\n    '''\n    Write a function to find if a number is perfect or not.\n    '''\n    sum = 0\n    temp = n\n    while temp > 0:\n        sum += (temp % 10)\n        temp //= 10\n    return sum == n\n    \ndef is_pandigital(n):\n    '''\n    Write a function to find if a number is pandigital or not.\n    '''\n    temp = str(n)\n    if len(temp) > 9:\n        return False\n    for i in temp:\n        if i == \"0\":\n            return False\n    return True\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    #Set your initial conditions here.\n    count = 0 \n    current = 1\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    new_text = ''\n    \n    for char in text:\n        if char == 'z' and text[text.index(char) + 1] =='':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text\n    \n    \ndef is_in_range(value, range):\n    '''\n    Write a function that checks if a value is within a range.\n    '''\n    return range[0] <= value <= range[1]\n    \n    \ndef string_test(value):\n    '''\n    Write a function that checks if a string contains the letter 'e'.\n    '''\n    return 'e' in value.lower()\n    \n    \ndef is_upper_case(value):\n    '''\n    Write a function that checks if a string is all uppercase characters.\n    '''\n    return value.isupper()\n    \n    \ndef are_anagrams(value1, value2):\n    '''\n    Write a function that checks if two strings are anagrams of each other.\n    '''\n    value1 = value1.lower()\n    value2 = value2.lower()\n    return sorted(value1) == sorted(value2)\n    \n    \ndef string_length(value):\n    '''\n    Write a function that returns the length of a string.\n    '''\n    return len(value)\n    \n    \ndef string_contains(value1, value2):\n    '''\n    Write a function that checks if a string contains another string.\n    '''\n    return value2 in value1\n    \n    \ndef text_match_ends(text):\n    '''\n    Write a function that checks if the first and last character are the same in a string.\n    '''\n    return text[0] == text[-1]\n    \n    \ndef slice_the_ends(value):\n    '''\n    Write a function that removes the first and last characters of a string.\n    '''\n    return value[1:-1]\n    \n    \ndef slice_the_ends_but_not_the_middle(value):\n    '''\n    Write a function that removes the first and last characters, but does not remove the middle character.\n    '''\n    return value[1:-1:2]\n    \n    \ndef replace_char(value, char, index):\n    '''\n    Write a function that replaces all occurrences of a character in a string with another character.\n    '''\n    return value.replace(char, index)\n    \n    \ndef replace_all_occurrences(value, char, index):\n    '''\n    Write a function that replaces all occurrences of a character in a string with another character.\n    '''\n    new_value = ''\n    for char in value:\n        if char!= index:\n            new_value += char\n        else:\n            new_value += char\n    return new_value\n    \n    \ndef check_balanced_brackets(text):\n    '''\n    Write a function that checks if brackets in a string are balanced.\n    '''\n    bracket_stack = []\n    \n    for char in text:\n        if char in ['(', '{', '[']:\n            bracket_stack.append(char)\n        elif char in [')', '}', ']']:\n            if len(bracket_stack) == 0:\n                return False\n            elif char == ')' and bracket_stack[-1]!= '(':\n                return False\n            elif char == '}' and bracket_stack[-1]!= '{':\n                return False\n            elif char == ']' and bracket_stack[-1]!= '[':\n                return False\n            bracket_stack.pop()\n    \n    if len(bracket_stack) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef all_upper_case(value):\n    '''\n    Write a function that determines if a string is all uppercase characters.\n    '''\n    return value.isupper()\n    \n    \ndef get_unique_elements_list(value):\n    '''\n    Write a function that takes a list and returns a new list with unique elements of the first list.\n    '''\n    unique_list = []\n    \n    for element in value:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n    \n    \ndef get_unique_elements_set(value):\n    '''\n    Write a function that takes a list and returns a new set with unique elements of the first list.\n    '''\n    unique_set = set()\n    \n    for element in value:\n        unique_set.add(element)\n    return unique_set\n    \n    \ndef get_common_elements_list(value1, value2):\n    '''\n    Write a function that takes two lists and returns a new list with the elements that are common to both lists.\n    '''\n    common_list = []\n    \n    for element in value1:\n        if element in value2:\n            common_list.append(element)\n    return common_list\n    \n    \ndef get_common_elements_set(value1, value2):\n    '''\n    Write a function that takes two sets and returns a new set with the elements that are common to both sets.\n    '''\n    common_set = set()\n    \n    for element in value1:\n        if element in value2:\n            common_set.add(element)\n    return common_set\n    \n    \ndef get_unique_elements_set(value):\n    '''\n    Write a function that takes a set and returns a new set with unique elements of the first set.\n    '''\n    unique_set = set()\n    \n    for element in value:\n        if element not in unique_set:\n            unique_set.add(element)\n    return unique_set\n    \n    \ndef get_unique_elements_dict(value):\n    '''\n    Write a function that takes a dictionary and returns a new dictionary with unique keys of the first dictionary.\n    '''\n    unique_dict = {}\n    \n    for key, value in value.items():\n        if value not in unique_dict.values():\n            unique_dict[key] = value\n    return unique_dict\n    \n    \ndef remove_all_occurrences(value, char):\n    '''\n    Write a function that removes all occurrences of a character from a string.\n    '''\n    new_value = ''\n    for char in value:\n        if char!= char:\n            new_value += char\n    return new_value\n    \n    \ndef get_number_of_substrings(value, char):\n    '''\n    Write a function that counts the number of substrings that contain a given character.\n    '''\n    count = 0\n    length = len(value)\n    \n    for i in range(length):\n        if value[i:i+1] == char:\n            count += 1\n    return count\n    \n    \ndef get_number_of_vowels(value):\n    '''\n    Write a function that counts the number of vowels in a string.\n    '''\n    count = 0\n    vowels = 'aeiou'\n    \n    for char in value:\n        if char in vowels:\n            count += 1\n    return count\n    \n    \ndef is_palindrome(value):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    value = value.lower()\n    return value == value[::-1]\n    \n    \ndef get_sum_of_multiples_of_three(value):\n    '''\n    Write a function that returns the sum of all the multiples of three in a range.\n    '''\n    total = 0\n    \n    for i in range(value + 1):\n        if i % 3 == 0:\n            total += i\n    return total\n    \n    \ndef get_sum_of_multiples_of_five(value):\n    '''\n    Write a function that returns the sum of all the multiples of five in a range.\n    '''\n    total = 0\n    \n    for i in range(value + 1):\n        if i % 5 == 0:\n            total += i\n    return total\n    \n    \ndef get_sum_of_multiples_of_thre"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # if text.find('z') == 0 or text.find('z') == len(text)-1:\n    #     return False\n    # else:\n    #     return True\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = 'prez is a word'\n    if re.search(r'\\bz\\w+\\b',text):\n        print(f'{text} contains \"z\"')\n    else:\n        print(f'{text} does not contain \"z\"')\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    return re.search(r'z(?!\\b|\\s)', text) is None\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) == 0:\n        return False\n    if len(text) == 1 and text[0]!= 'z':\n        return False\n    elif len(text) == 2 and text[0]!= 'z' and text[1]!= 'z':\n        return False\n    elif len(text) == 3 and text[1] == 'z' and text[2]!= 'z':\n        return False\n    elif len(text) == 4 and text[2] == 'z' and text[3]!= 'z':\n        return False\n    elif len(text) == 5 and text[3] == 'z' and text[4]!= 'z':\n        return False\n    elif len(text) == 6 and text[4] == 'z' and text[5]!= 'z':\n        return False\n    elif len(text) == 7 and text[5] == 'z' and text[6]!= 'z':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz = r'(?<![a-z]z)z(?![a-z])'\n    return re.search(wordz, text) is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz = re.findall(r'\\wz\\w', text)\n    return wordz\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[^\\wz]z\\b'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n    \n    \n    \ndef text_match_word_both_ends(text):\n    '''\n    Write a function that checks if a string contains a word with both ends.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z]+\\w+\\b'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n        \n        \n        \ndef text_match_ends_only(text):\n    '''\n    Write a function that checks if a string contains '.' or ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.|\\,]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n        \n        \ndef text_match_ends_only_comma(text):\n    '''\n    Write a function that checks if a string contains ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[,]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n        \n        \n        \ndef text_match_ends_only_period(text):\n    '''\n    Write a function that checks if a string contains '.' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n        \n        \ndef text_match_ends_only_comma_period(text):\n    '''\n    Write a function that checks if a string contains '.' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.|,]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n        \n        \n        \ndef text_match_ends_only_period_comma(text):\n    '''\n    Write a function that checks if a string contains ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.,]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n    \n    \n    \ndef text_match_ends_only_comma_period_space(text):\n    '''\n    Write a function that checks if a string contains '.' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.|,| ]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n    \n    \ndef text_match_ends_only_comma_period_space_comma(text):\n    '''\n    Write a function that checks if a string contains ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.|,| ]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n    \n    \ndef text_match_ends_only_period_comma_space(text):\n    '''\n    Write a function that checks if a string contains ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.,| ]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n        \n    \ndef text_match_ends_only_comma_period_space_comma(text):\n    '''\n    Write a function that checks if a string contains ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.|,| ]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n    \n        \n        \n        \ndef text_match_ends_only_period_comma_space_comma(text):\n    '''\n    Write a function that checks if a string contains ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.,| ]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n    \n    \ndef text_match_ends_only_period_comma_space_comma_space(text):\n    '''\n    Write a function that checks if a string contains ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.|,| ]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n    \n    \ndef text_match_ends_only_period_comma_space_comma_space_comma(text):\n    '''\n    Write a function that checks if a string contains ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.|,| ]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n        \n        \ndef text_match_ends_only_period_comma_space_comma_space_comma_space(text):\n    '''\n    Write a function that checks if a string contains ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.|,| ]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n    \n    \ndef text_match_ends_only_period_comma_space_comma_space_comma_space_comma(text):\n    '''\n    Write a function that checks if a string contains ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.|,| ]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n    \n    \ndef text_match_ends_only_period_comma_space_comma_space_comma_space_comma_comma(text):\n    '''\n    Write a function that checks if a string contains ',' at the end of the word.\n    '''\n    text=text.lower()\n    pattern=r'\\b[a-zA-Z0-9]+[\\.|,| ]$'\n    match=re.findall(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n    \n    \ndef text_match_ends_only_period_comma_space_comma_space_comma_space_comma_comma_comma(text):\n    '''\n    Write a function that checks if "
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('z.*z',text)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.find(\"z\") == -1:\n        return False\n    if text[0] == \"z\" and text.find(\"z\") == 1:\n        return False\n    if text.find(\"z\") == 0:\n        return False\n    if text[len(text)-1] == \"z\":\n        return False\n    return True\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, n, 2*k+1):\n        input[i:i+k] = input[i:i+k][::-1]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # slice the list \n    # input[:k] means 0 to k-1 \n    # input[k:] means k to end \n    input = input[::-1] \n    print(input[:k][::-1] + input[k:]) \n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_Array_Upto_K(input, k) \n    print(\"Given Array is:\",input)\n    print(\"Reversed Array is:\",input[:k+1])\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # array = [1, 2, 3, 4, 5, 6, 7, 8]\n    if len(input) == 0:\n        return []\n    start = 0\n    end = len(input) - 1\n    while start < end and start < k:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[0:k][::-1] + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input == None: \n        return None\n    length = len(input)\n    if length < 2: \n        return input\n    result = []\n    if k == 0: \n        result.extend(input[:length])\n    elif k == length: \n        result.extend(input[length-1::-1])\n    else: \n        for i in range(length): \n            if i >= k: \n                result.append(input[i])\n        \n        for i in range(k): \n            result.append(input[i])\n        \n        for i in range(k, length): \n            result.append(input[length-1-i])\n    \n    return result\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0,k):\n        input.insert(0,input.pop(n-1))\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reversed_list = input[:k][::-1] + input[k:]\n    return reversed_list\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print(\"Input: \")\n    print(input)\n    print(\"Reversed upto K: \")\n    output = input[:k][::-1] + input[k:][::-1]\n    print(output)\n    print(\"\\n\")\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # first solution\n    #def reverse_Array_Upto_K_1(input, k):\n    #    arr = input[0:k]\n    #    arr.reverse()\n    #    input[0:k] = arr\n    #    return input\n    # return reverse_Array_Upto_K_1(input, k)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # return tuple(test_tup) + (test_dict,)\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + tuple(test_dict.values())\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    return test_tup + (test_dict,)\n    "
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup += tuple(test_dict.values())\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #take in a tuple\n    #add dictionary to tuple\n    #return tuple\n    tup_with_dict = (test_tup, test_dict)\n    return tup_with_dict\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def average(cost):\n        total = 0\n        count = 0\n        for row in cost:\n            for col in row:\n                total += col\n                count += 1\n        return total/count\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    dp = [[0 for x in range(len(cost[0]))] for y in range(len(cost))]\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == 0 or j == 0:\n                dp[i][j] = cost[i][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i][j - 1], dp[i - 1][j])\n    return dp[len(cost) - 1][len(cost[0]) - 1] / (len(cost) * len(cost[0]))\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    col = len(cost[0])\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Breadth first search\n    # Define a queue\n    # Keep track of the number of elements in the queue\n    # Iterate through the queue\n        # Get the current element from the queue\n        # Make a list of all possible moves from the current element\n        # For each element in the list, \n            # Add the element to the queue\n        # Check if element is the target\n        # If it is the target, add the path to the list of paths\n    # Return the longest path\n    \n    # initialize the cost matrix\n    cost_matrix = []\n    \n    # initialize the list of paths\n    paths = []\n    \n    # create a matrix of zeroes\n    for row in range(0, len(cost)):\n        cost_matrix.append([])\n        for col in range(0, len(cost[row])):\n            cost_matrix[row].append(0)\n    \n    # start the queue\n    queue = [[0,0]]\n    \n    # set the number of elements in the queue\n    n_queue = 1\n    \n    # iterate through the queue\n    while queue:\n        # get the current element\n        current = queue[0]\n        queue = queue[1:]\n        # make a list of possible moves\n        possible_moves = []\n        possible_moves.append([current[0]-1, current[1]])\n        possible_moves.append([current[0], current[1]+1])\n        # iterate through the list of possible moves\n        for move in possible_moves:\n            # check if the move is in the bounds of the matrix\n            if move[0] >= 0 and move[0] < len(cost_matrix) and move[1] >= 0 and move[1] < len(cost_matrix[0]):\n                # check if the move is a possible move\n                if cost_matrix[move[0]][move[1]] == 0:\n                    # mark the move as visited\n                    cost_matrix[move[0]][move[1]] = 1\n                    # add the path to the list\n                    paths.append(paths[:])\n                    # add the element to the queue\n                    queue.append(move)\n                    # increment the number of elements in the queue\n                    n_queue += 1\n        # check if the current element is equal to the target\n        if [len(cost)-1, len(cost)-1] == current:\n            # return the path\n            return paths\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def backtrack(row, col, m, n, cost, ans):\n        if row==n-1 and col==n-1:\n            ans[0] = max(ans[0], sum(cost)/len(cost))\n            return True\n        if row<n-1:\n            backtrack(row+1, col, m, n, cost+[cost[row][col]], ans)\n        if col<n-1:\n            backtrack(row, col+1, m, n, cost+[cost[row][col]], ans)\n    n = len(cost)\n    ans = [-float('inf')]\n    backtrack(0, 0, n, n, [cost[0][0]], ans)\n    return ans[0]\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 1 and len(cost[0]) == 1:\n        return [cost[0][0]]\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            total = 0\n            count = 0\n            if i == 0 and j == 0:\n                total = cost[0][0]\n                count = 1\n            elif i == 0 and j!= 0:\n                for k in range(j):\n                    total += cost[0][k]\n                    count += 1\n                total += cost[0][j]\n                count += 1\n            elif i!= 0 and j == 0:\n                for k in range(i):\n                    total += cost[k][0]\n                    count += 1\n                total += cost[i][0]\n                count += 1\n            else:\n                for k in range(i):\n                    total += cost[k][j]\n                    count += 1\n                total += cost[i][j]\n                count += 1\n            if total > max:\n                max = total\n                i_max = i\n                j_max = j\n                count_max = count\n    return i_max, j_max, count_max, max / count\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    global r, c\n    if r == 0 and c == 0:\n        return 0\n    m, n = len(cost), len(cost[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]/(m+n)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # generate a set of coordinates for each cell\n    n = len(cost)\n    coords = set()\n    for i in range(n):\n        for j in range(n):\n            coords.add((i,j))\n    # dfs with memorization\n    memo = {}\n    def dfs(coord):\n        if coord in memo:\n            return memo[coord]\n        if coord not in coords:\n            return 0\n        x,y = coord\n        if x==0 and y==n-1:\n            return cost[x][y]\n        else:\n            right_cost = dfs((x,y+1))\n            down_cost = dfs((x+1,y))\n            return right_cost + down_cost\n    \n    ans = -1\n    for coord in coords:\n        cost_sum = dfs(coord)\n        ans = max(ans, cost_sum/len(coords))\n    return ans\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {k:v for k,v in students.items() if v[0]>=h and v[1]>=w}\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for student in students.keys():\n        if student[0]>h or student[1]>w:\n            new_students[student] = students[student]\n    return new_students\n    \ndef filter_data_no_lambda(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return { student : students[student] for student in students if student[0]>h and student[1]>w }\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student in students:\n        if students[student][0]>=h and students[student][1]>=w:\n            result[student] = students[student]\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k: v for k, v in students.items() if v[0]>=h and v[1]>=w}\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if students[student][0] < h and students[student][1] < w:\n            students.pop(student)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if student_height > h or student_weight > w:\n            students[student] = (student_height,student_weight)\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_list = []\n    for i in range(len(students)):\n        if students[list(students)[i]][0] >= h and students[list(students)[i]][1] >= w:\n            new_list.append(students[list(students)[i]])\n    return new_list\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Your code goes here:\n    result = {}\n    for i in students.items():\n        if i[1][0]>=h and i[1][1]>=w:\n            result[i[0]] = i[1]\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # your code\n    return {k:v for k,v in students.items() if v[0] >= h and v[1] >= w}\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [student for student in students.keys() if students[student][0]>=h and students[student][1]>=w]\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    res = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            res += 1\n    return res\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for num1, num2 in zip(nums1, nums2):\n        if eq(num1, num2):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert (len(nums1) == len(nums2))\n    n = len(nums1)\n    pair = 0\n    for i in range(0, n):\n        if (nums1[i] == nums2[i]):\n            pair += 1\n    return pair\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pairs = 0\n    for index in range(0, len(nums1)):\n        if eq(nums1[index], nums2[index]):\n            same_pairs += 1\n    return same_pairs\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n    \n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2)\n    lst = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    def check(nums1, nums2):\n        '''\n        The function checks if the input list have same values\n        '''\n        if nums1 == nums2:\n            return 1\n        else:\n            return 0\n    count = 0\n    for i in range(len(nums1)):\n        count += check(nums1[i], nums2[i])\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 1\n    for _ in range(power):\n        power_sum *= base\n    return sum(map(int, str(power_sum)))\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in str(base**power):\n        total += int(i)\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    power = int(power)\n    sum = 0\n    for i in range(len(base)):\n        sum += int(base[i]) ** power\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(num) for num in str(base ** power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def sum_of_digits(number):\n        number = str(number)\n        return sum(int(digit) for digit in number)\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base**power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while(base > 0):\n        total += base % 10\n        base = base // 10\n    return total**power\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    i = 0\n    sum = 0\n    while i < power:\n        sum += base**i\n        i += 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i)**power for i in str(base)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(x) for x in str(base**power)])\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex_quotation = re.compile(r'\\\"[\\s\\S]+?\\\"')\n    quotation_extract = regex_quotation.findall(text1)\n    return quotation_extract\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #return re.findall('\\\"([^\\\"]*)\\\"', text1)\n    result=[]\n    for m in re.finditer('\\\"([^\\\"]*)\\\"', text1):\n        result.append(m.group(1))\n    return result\ndef matching_words_and_frequencies(filename):\n    '''\n    Write a function to return a dictionary where key is a word and values is a frequency.\n    '''\n    result={}\n    with open(filename) as fp:\n        text=fp.read().strip().lower()\n    for m in re.finditer('\\\"([^\\\"]*)\\\"', text):\n        result[m.group(1)]=result.get(m.group(1), 0)+1\n    return result\ndef list_all_files(directory):\n    '''\n    Write a function to list all files and their frequencies in a directory.\n    '''\n    result={}\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            result[name]=matching_words_and_frequencies(name)\n    return result\ndef list_common_words(files):\n    '''\n    Write a function to return a dictionary where key is a word and values is a frequency.\n    '''\n    result={}\n    for file in files:\n        for word in files[file]:\n            if word not in result:\n                result[word]=files[file][word]\n            else:\n                result[word]+=files[file][word]\n    return result\ndef display_common_words(word_list, frequency_list):\n    '''\n    Write a function to display the common words and their frequencies in sorted order.\n    '''\n    word_list = sorted(word_list.items(), key=lambda item: item[1], reverse=True)\n    for k in word_list:\n        print(k[0], ':', k[1])\ndef list_files_with_keywords(keyword, directory):\n    '''\n    Write a function to list all files with keyword in its name and their frequencies in a directory.\n    '''\n    result={}\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            if re.search(keyword, name):\n                result[name]=matching_words_and_frequencies(name)\n    return result\ndef list_files_with_keywords_2(keyword, directory):\n    '''\n    Write a function to list all files with keyword in its name and their frequencies in a directory.\n    '''\n    result={}\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            if re.search(keyword, name):\n                if name not in result:\n                    result[name]=matching_words_and_frequencies(name)\n                else:\n                    for word in matching_words_and_frequencies(name):\n                        result[name][word]+=matching_words_and_frequencies(name)[word]\n    return result\ndef list_files_with_keywords_3(keywords, directory):\n    '''\n    Write a function to list all files with keywords in its name and their frequencies in a directory.\n    '''\n    result={}\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            if re.search(keywords[0], name):\n                if name not in result:\n                    result[name]=matching_words_and_frequencies(name)\n                else:\n                    for word in matching_words_and_frequencies(name):\n                        result[name][word]+=matching_words_and_frequencies(name)[word]\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            if re.search(keywords[1], name):\n                if name not in result:\n                    result[name]=matching_words_and_frequencies(name)\n                else:\n                    for word in matching_words_and_frequencies(name):\n                        result[name][word]+=matching_words_and_frequencies(name)[word]\n    return result\ndef list_files_with_keywords_4(keywords, directory):\n    '''\n    Write a function to list all files with keywords in its name and their frequencies in a directory.\n    '''\n    result={}\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            for keyword in keywords:\n                if re.search(keyword, name):\n                    if name not in result:\n                        result[name]=matching_words_and_frequencies(name)\n                    else:\n                        for word in matching_words_and_frequencies(name):\n                            result[name][word]+=matching_words_and_frequencies(name)[word]\n    return result\ndef list_files_with_keywords_5(keywords, directory):\n    '''\n    Write a function to list all files with keywords in its name and their frequencies in a directory.\n    '''\n    result={}\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            for keyword in keywords:\n                if re.search(keyword, name):\n                    if name not in result:\n                        result[name]=matching_words_and_frequencies(name)\n                    else:\n                        for word in matching_words_and_frequencies(name):\n                            result[name][word]+=matching_words_and_frequencies(name)[word]\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            if re.search(keywords[0], name):\n                if name not in result:\n                    result[name]=matching_words_and_frequencies(name)\n                else:\n                    for word in matching_words_and_frequencies(name):\n                        result[name][word]+=matching_words_and_frequencies(name)[word]\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            if re.search(keywords[1], name):\n                if name not in result:\n                    result[name]=matching_words_and_frequencies(name)\n                else:\n                    for word in matching_words_and_frequencies(name):\n                        result[name][word]+=matching_words_and_frequencies(name)[word]\n    return result\ndef list_files_with_keywords_6(keywords, directory):\n    '''\n    Write a function to list all files with keywords in its name and their frequencies in a directory.\n    '''\n    result={}\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            for keyword in keywords:\n                if re.search(keyword, name):\n                    if name not in result:\n                        result[name]=matching_words_and_frequencies(name)\n                    else:\n                        for word in matching_words_and_frequencies(name):\n                            result[name][word]+=matching_words_and_frequencies(name)[word]\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            if re.search(keywords[0], name):\n                if name not in result:\n                    result[name]=matching_words_and_frequencies(name)\n                else:\n                    for word in matching_words_and_frequencies(name):\n                        result[name][word]+=matching_words_and_frequencies(name)[word]\n    for name in os.listdir(directory):\n        if os.path.isfile(name):\n            if re.search(keywords[1], name):\n                if name not in result:\n                    result[name]=matching_words_and_frequencies(name)\n                else:\n                    for word in matching_words_and_frequencies(name):\n                        result[name][word]+=matching_words_and_frequencies(name)[word]\n    return result\ndef list_files_with_keywords_7(keywords, directory):\n    '''\n    Write a function to list all files with keywords in its name and their frequencies in a directory.\n    '''\n    resul"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = text1.replace('\"', '')\n    return text2\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # for i in text1:\n    #     print(re.findall(\"\".join(i),r'\"[0-9a-zA-Z.,;:?!\\s\\t\\n\\r\\f\\v]*[\\s\\n\\r\\f\\v]*\"'))\n    return re.findall(\"\".join(text1),r'\"[0-9a-zA-Z.,;:?!\\s\\t\\n\\r\\f\\v]*[\\s\\n\\r\\f\\v]*\"' )\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', text1)\n    return values\ndef add_value(values):\n    '''\n    Write a function to add values to a list.\n    '''\n    mylist = []\n    for i in values:\n        mylist.append(i)\n    return mylist\ndef remove_comma(values):\n    '''\n    Write a function to remove comma from the list of values.\n    '''\n    mylist = []\n    for i in values:\n        i = i.replace(',', '')\n        mylist.append(i)\n    return mylist\ndef replace_comma(values):\n    '''\n    Write a function to replace comma with a period in the list of values.\n    '''\n    mylist = []\n    for i in values:\n        i = i.replace(',', '.')\n        mylist.append(i)\n    return mylist\ndef replace_colon(values):\n    '''\n    Write a function to replace colon with a period in the list of values.\n    '''\n    mylist = []\n    for i in values:\n        i = i.replace(':', '.')\n        mylist.append(i)\n    return mylist\ndef extract_values(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"[^\"]*\"', values)\n    return values\ndef extract_values2(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"[^\"]*\"', values)\n    return values\ndef extract_values3(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values4(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values5(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef replace_quotation(values):\n    '''\n    Write a function to remove comma from the list of values.\n    '''\n    mylist = []\n    for i in values:\n        i = i.replace('\"', '')\n        mylist.append(i)\n    return mylist\ndef extract_values6(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values7(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values8(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values9(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values10(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values11(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values12(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values13(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values14(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values15(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values16(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values17(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values18(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values19(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values20(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values21(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values22(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values23(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values24(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values25(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values26(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values27(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', values)\n    return values\ndef extract_values28(values):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall(r'\"([^\"]*)"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1 = '\"If you know what is good for you, don\\'t care for what is good for others, go ahead and do it. If you know what is not good for you, don\\'t care for what is not good for others, go ahead and not do it. If you don\\'t know, don\\'t care, don\\'t do it.\"'\n    \n    # use regular expressions to extract values between quotation marks\n    #regex_quotation = re.findall('\"(.*?)\"', text1)\n    #values = re.findall(r'\"[^\"]*\"', text1)\n    #values = re.findall(r'\"[^\"]*\"', text1)\n    regex_quotation = re.findall(r'\".*?\"', text1)\n    #print(regex_quotation)\n    values = []\n    for i in regex_quotation:\n        values.append(i[1:-1])\n    #print(values)\n    return values\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # write your code here\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    # findall() function returns a list containing all matches\n    # Output : ['100.0%', '0.39%']\n    # findall(regex, string, flags=0)\n    # Output : ['100.0%', '0.39%']\n    # Output : [('100.0%', '0.39%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%'), ('60.0%', '2.5%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%'), ('60.0%', '2.5%'), ('70.0%', '3.1%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%'), ('60.0%', '2.5%'), ('70.0%', '3.1%'), ('80.0%', '3.7%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%'), ('60.0%', '2.5%'), ('70.0%', '3.1%'), ('80.0%', '3.7%'), ('90.0%', '4.3%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%'), ('60.0%', '2.5%'), ('70.0%', '3.1%'), ('80.0%', '3.7%'), ('90.0%', '4.3%'), ('100.0%', '4.9%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%'), ('60.0%', '2.5%'), ('70.0%', '3.1%'), ('80.0%', '3.7%'), ('90.0%', '4.3%'), ('100.0%', '4.9%'), ('110.0%', '5.6%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%'), ('60.0%', '2.5%'), ('70.0%', '3.1%'), ('80.0%', '3.7%'), ('90.0%', '4.3%'), ('100.0%', '4.9%'), ('110.0%', '5.6%'), ('120.0%', '6.2%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%'), ('60.0%', '2.5%'), ('70.0%', '3.1%'), ('80.0%', '3.7%'), ('90.0%', '4.3%'), ('100.0%', '4.9%'), ('110.0%', '5.6%'), ('120.0%', '6.2%'), ('130.0%', '6.8%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%'), ('60.0%', '2.5%'), ('70.0%', '3.1%'), ('80.0%', '3.7%'), ('90.0%', '4.3%'), ('100.0%', '4.9%'), ('110.0%', '5.6%'), ('120.0%', '6.2%'), ('130.0%', '6.8%'), ('140.0%', '7.4%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%'), ('60.0%', '2.5%'), ('70.0%', '3.1%'), ('80.0%', '3.7%'), ('90.0%', '4.3%'), ('100.0%', '4.9%'), ('110.0%', '5.6%'), ('120.0%', '6.2%'), ('130.0%', '6.8%'), ('140.0%', '7.4%'), ('150.0%', '8.0%')]\n    # Output : [('100.0%', '0.39%'), ('10.0%', '0.5%'), ('20.0%', '1.1%'), ('30.0%', '1.3%'), ('40.0%', '1.6%'), ('50.0%', '2.0%'), ('60.0%', '2.5%'), ('70.0%', '3.1%'), ('80.0%', '3.7%'), ('90.0%', '4.3%'), ('100.0%', '4.9%'), ('110.0%', '5.6%'), ('120.0%', '6.2%'), ('130.0%', '6.8%'), ('14"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.lower()\n    #reg = re.compile(r'\\s*[\\\"]?[a-zA-Z0-9]*[\\\"]?')\n    reg = re.compile(r'\\s*[\\\"]?[a-zA-Z0-9]*[\\\"]?\\s*')\n    return reg.findall(text1)\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    import re\n    quotation = re.findall('\".+\"', text1)\n    return quotation\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # re.findall(regex, string)\n    # reg = \"\\\"\"\n    # print(re.findall(reg, text1))\n    reg = \"\\\".*?\\\"\"\n    print(re.findall(reg, text1))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup) - 1):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    mult_tup = []\n    for i in range(len(test_tup) - 1):\n        mult_tup.append(test_tup[i] * test_tup[i + 1])\n    return tuple(mult_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) > 2:\n        #slice tuple\n        t = test_tup[0:len(test_tup) - 1]\n        t_1 = test_tup[0]\n        t_2 = test_tup[-1]\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    multiply_list = []\n    for x in range(len(test_tup) - 1):\n        multiply_list.append(test_tup[x] * test_tup[x + 1])\n    return tuple(multiply_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # create a new list\n    multiply_list = []\n    for i in range(0, len(test_tup)):\n        if i == 0:\n            multiply_list.append(test_tup[i])\n        else:\n            # multiply and append to list\n            multiply_list.append(test_tup[i] * test_tup[i+1])\n    return tuple(multiply_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # create an empty tuple \n    new_tup = ()\n    # loop over the tuple and multiply each element by the next one\n    for i in range(len(test_tup)-1):\n        new_tup = new_tup + (test_tup[i]*test_tup[i+1],)\n    # return the new tuple\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([a*b for a, b in zip(test_tup, test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 2:\n        return (test_tup[0] * test_tup[1],)\n    else:\n        return (test_tup[0] * test_tup[1],) + multiply_elements(test_tup[1:])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    mult_tup = ()\n    for i in range(len(test_tup)-1):\n        mult_tup += (test_tup[i]*test_tup[i+1],)\n    return mult_tup\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(x) for x in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3=[]\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1)==len(lst2),'Lists should be of equal length.'\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    if len(lst1)!= len(lst2):\n        return -1\n    \n    return [sum(x) for x in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # return [a+b for a,b in zip(lst1,lst2)]\n    return sum(list(zip(lst1,lst2)),())\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    summ = 0\n    for i in range(len(lst1)):\n        summ = summ + lst1[i] + lst2[i]\n    return summ\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    summ = []\n    for i in range(len(lst1)):\n        summ.append(lst1[i]+lst2[i])\n    return summ\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert(len(lst1)==len(lst2))\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    ans = list(dict.fromkeys(nums))\n    ans.sort()\n    return ans\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    result = []\n    for i, x in enumerate(nums):\n        if i == 0:\n            result.append(x)\n            continue\n        if nums[i] == nums[i-1]:\n            continue\n        else:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums)==0:\n        return []\n    else:\n        nums.sort()\n        i=0\n        while(i<len(nums)-1):\n            if nums[i]==nums[i+1]:\n                del nums[i]\n                continue\n            i+=1\n        return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [item[0] for item in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return sorted(set(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    a = []\n    for x, y in groupby(nums):\n        a.append(list(y))\n    return a\nprint(consecutive_duplicates([1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 9]))"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    temp = [len(list(v)) for k, v in groupby(nums)]\n    count = 0\n    for i in temp:\n        if i > 1:\n            count += i\n    return count\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #nums = [1,2,3,4,5,1,1,1,1,2,3,4,5,6,7,7,7,8,9,9]\n    #nums = [1,2,3,4,5,5,5,5,6,7,7,7,8,9,9]\n    if not nums:\n        return []\n    else:\n        sorted_nums = sorted(nums)\n        temp = list(groupby(sorted_nums))\n        index = 0\n        #print(temp)\n        for i in range(len(temp)):\n            #print(i)\n            if len(temp[i][1]) == 1:\n                #print(temp[i][1])\n                index = i\n                break\n        #print(index)\n        index = 0\n        #print(temp)\n        for j in range(len(temp)):\n            if j == index:\n                continue\n            else:\n                return temp[index][0], temp[j][0]\n            #print(temp[index][0])\n            #print(temp[j][0])\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    grouped_dups = groupby(nums)\n    #print(grouped_dups)\n    return [key for key, group in grouped_dups if len(list(group))>1]\n    \nnums = [1,1,1,2,2,3,3,3,4,4,5,5,5,6,6,6,7,7,8,8,9,9,9,9]\nprint(consecutive_duplicates(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface(r,h):\n        surface = 2*math.pi*r*h + 2*math.pi*r*r\n        return surface\n    return lateral_surface\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A_cone=1/3*math.pi*(r**2)*h\n    return A_cone\nprint('Exercise 4.1')\nprint(lateralsurface_cone(5,7))\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*r**2*h)/3\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surfacearea = (3.14*(r**2)) + (3.14*r*h)\n    print('surfacearea of cone is',surfacearea)\n    return surfacearea\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print('The lateral surface area of a cone is given by:')\n    print('pi*r^2+2*pi*r*h')\n    print('{}'.format(math.pi*(r**2) + 2*math.pi*r*h))\n    return\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print('The lateral surface area of a cone is given by:')\n    print('pi*r^2+2*pi*r*h')\n    print('{}'.format(math.pi*(r**2) + 2*math.pi*r*h))\n    return\n    \n    \ndef lateralsurfacearea_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print('The lateral surface area of a cone is given by:')\n    print('pi*r^2+2*pi*r*h')\n    print('{}'.format(math.pi*(r**2) + 2*math.pi*r*h))\n    return\n    \ndef lateralsurfacearea_cone_alt(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print('The lateral surface area of a cone is given by:')\n    print('pi*r^2+2*pi*r*h')\n    print('{}'.format((math.pi*(r**2) + 2*math.pi*r*h)))\n    return\n    \ndef area_of_triangle(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \n    \ndef area_of_triangle_alt2(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt3(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt4(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt5(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt6(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt7(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt8(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt9(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt10(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt11(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt12(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt13(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt14(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt15(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt16(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \ndef area_of_triangle_alt17(base,height):\n    '''\n    Write a function to find the area of a triangle given base and height.\n    '''\n    print('The area of a triangle is given by:')\n    print('0.5*base*height')\n    print('{}'.format(0.5*base*height))\n    return\n    \nde"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*(r+math.sqrt((r**2)-(h**2)))\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(math.pi*r**2*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    s_lateral = math.pi*r*(r + math.sqrt((r ** 2) + h ** 2))\n    return s_lateral\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    r=float(r)\n    s_lateral = 4 * math.pi * r ** 2\n    return s_lateral\n    \ndef surface_volume_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    s_lateral = math.pi*r*(r + math.sqrt((r ** 2) + h ** 2))\n    v = s_lateral * h\n    return v\n    \ndef surface_volume_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    r=float(r)\n    s_lateral = 4 * math.pi * r ** 2\n    v = s_lateral * r ** 2\n    return v\n    \ndef lateral_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    s_lateral = math.pi*r*(r + math.sqrt((r ** 2) + h ** 2))\n    return s_lateral\n    \ndef lateral_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    r=float(r)\n    s_lateral = 4 * math.pi * r ** 2\n    return s_lateral\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    v = math.pi * (r ** 2) * h / 3\n    return v\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    r=float(r)\n    import math\n    v = (4/3) * math.pi * r ** 3\n    return v\n    \ndef lateral_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    s_lateral = math.pi*r*(r + math.sqrt((r ** 2) + h ** 2))\n    return s_lateral\n    \ndef lateral_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    r=float(r)\n    s_lateral = 4 * math.pi * r ** 2\n    return s_lateral\n    \ndef lateral_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    s_lateral = math.pi*r*(r + math.sqrt((r ** 2) + h ** 2))\n    return s_lateral\n    \ndef lateral_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    r=float(r)\n    s_lateral = 4 * math.pi * r ** 2\n    return s_lateral\n    \ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    s_lateral = math.pi*r*(r + math.sqrt((r ** 2) + h ** 2))\n    return s_lateral\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    r=float(r)\n    import math\n    s_lateral = 4 * math.pi * r ** 2\n    return s_lateral\n    \ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    s_lateral = math.pi*r*(r + math.sqrt((r ** 2) + h ** 2))\n    return s_lateral\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    r=float(r)\n    import math\n    s_lateral = 4 * math.pi * r ** 2\n    return s_lateral\n    \ndef lateral_surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    s_lateral = math.pi*r*(r + math.sqrt((r ** 2) + h ** 2))\n    return s_lateral\n    \ndef lateral_surface_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    r=float(r)\n    import math\n    s_lateral = 4 * math.pi * r ** 2\n    return s_lateral\n    \ndef lateral_surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    s_lateral = math.pi*r*(r + math.sqrt((r ** 2) + h ** 2))\n    return s_lateral\n    \ndef lateral_surface_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    r=float(r)\n    import math\n    s_lateral = 4 * math.pi * r ** 2\n    return s_lateral\n    \ndef lateral_surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    s_lateral = math.pi*r*(r + math.sqrt((r ** 2) + h ** 2))\n    return s_lateral\n    \ndef lateral_surface_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r.\n    '''\n    r=float(r)\n    import math\n    s_lateral = 4 * math.pi * r ** 2\n    return s_lateral\n    \ndef lateral_surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    import math\n    s_lateral = math.pi*r*(r + math.sqrt((r ** 2) + h ** 2))\n    return s_lateral\n    \ndef lateral_surface_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of "
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"The lateral surface area of the cone is\", (math.pi*r**2+2*math.pi*r*h)/3)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(' ', ':', text)\n    text = re.sub('\\.', ':', text)\n    text = re.sub(',', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace spaces\n    text = text.replace(\" \", \":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[.|,| ]', \":\", text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = {' ': ':', ',': ':', '.': ':'}\n    for key, val in special_chars.items():\n        text = text.replace(key, val)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[.,]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(\" \",\":\")\n    text=text.replace(\",\",\":\")\n    text=text.replace(\".\",\":\")\n    return text\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_output = text.replace(\" \", \":\")\n    text_output = text_output.replace(\",\",\":\")\n    text_output = text_output.replace(\".\",\":\")\n    return text_output\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return(re.sub(r'[\\W|\\d]+','', text))\ndef remove_first_last_special_chars(text):\n    '''\n    Write a function to remove the first and last characters of a string if it is a special character.\n    '''\n    return(text[1:-1])\ndef remove_numbers(text):\n    '''\n    Write a function to remove all digits and the characters that come after them from a string.\n    '''\n    return(re.sub(r'\\d+', '', text))\ndef text_in_brackets(text):\n    '''\n    Write a function to return the text contained inside square and curly brackets from a string.\n    '''\n    return(re.findall('\\[.*\\]', text))\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return(re.sub(r'[,|.|-|@#|$|%|*|+|?|!|\\[|\\]|/|:|;|\\{|\\}|\\^|\\||`|~|\\']+', '', text))\ndef combine_phrases(text):\n    '''\n    Write a function to combine phrases in a string.\n    '''\n    return(' '.join(re.findall(r'\\w+', text)))\ndef to_lower(text):\n    '''\n    Write a function to convert a string to all lowercase.\n    '''\n    return(text.lower())\ndef to_upper(text):\n    '''\n    Write a function to convert a string to all uppercase.\n    '''\n    return(text.upper())\ndef add_spaces(text):\n    '''\n    Write a function to add a space between every character in a string except for a space.\n    '''\n    return(re.sub(r'(.)(?![\\s])', r'\\1 ', text))\ndef remove_extra_spaces(text):\n    '''\n    Write a function to remove all the extra spaces from a string.\n    '''\n    return(re.sub('\\s+','', text))\ndef remove_non_alphanumerics(text):\n    '''\n    Write a function to remove all non-alphanumerics from a string.\n    '''\n    return(re.sub(r'[^\\w]','', text))\ndef switch_sentences(text):\n    '''\n    Write a function to switch the order of the sentences in a string.\n    '''\n    return(re.sub('(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\s', '. ', text))\ndef replace_letters(text):\n    '''\n    Write a function to replace a set of letters with another set of letters.\n    '''\n    return(re.sub('a', '4', text))\ndef replace_more_letters(text):\n    '''\n    Write a function to replace a set of letters with another set of letters.\n    '''\n    return(re.sub('[bcdfghjklmnpqrstvwxyz]', '4', text))\ndef remove_letters(text):\n    '''\n    Write a function to remove a set of letters from a string.\n    '''\n    return(re.sub('[bcdfghjklmnpqrstvwxyz]', '', text))\ndef remove_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    return(re.sub('\\d+', '', text))\ndef add_digits(text):\n    '''\n    Write a function to add digits to a string.\n    '''\n    return(re.sub('\\D','', text))\ndef remove_non_ascii(text):\n    '''\n    Write a function to remove all non-ASCII characters from a string.\n    '''\n    return(re.sub('[^\\x00-\\x7F]+','', text))\ndef remove_empty_brackets(text):\n    '''\n    Write a function to remove empty brackets from a string.\n    '''\n    return(re.sub(r'\\[\\s*\\]', '', text))\ndef remove_empty_parentheses(text):\n    '''\n    Write a function to remove empty parentheses from a string.\n    '''\n    return(re.sub(r'\\(\\s*\\,\\s*\\)', '', text))\ndef remove_empty_parentheses(text):\n    '''\n    Write a function to remove empty parentheses from a string.\n    '''\n    return(re.sub(r'\\(\\s*\\,\\s*\\)', '', text))\ndef remove_empty_brackets(text):\n    '''\n    Write a function to remove empty brackets from a string.\n    '''\n    return(re.sub(r'\\[\\s*\\]', '', text))\ndef remove_numbers_and_symbols(text):\n    '''\n    Write a function to remove all numbers and symbols from a string.\n    '''\n    return(re.sub(r'[^a-zA-Z0-9.+-]','', text))\ndef reverse(text):\n    '''\n    Write a function to reverse a string.\n    '''\n    return(text[::-1])\ndef capitalize_first_letters(text):\n    '''\n    Write a function to capitalize the first letters of every word in a string.\n    '''\n    return(re.sub(r'[A-Za-z]+', lambda x: x.group(0)[0].upper() + x.group(0)[1:], text))\ndef to_be(text):\n    '''\n    Write a function to convert the text 'to be' in the text.\n    '''\n    return(re.sub(r'\\b(not|n\\'t|\\'nt)\\b', 'be', text))\ndef is_all_caps(text):\n    '''\n    Write a function to check if a string contains all uppercase letters.\n    '''\n    return(re.search(r'^[A-Z]+$', text))\ndef is_all_lowercase(text):\n    '''\n    Write a function to check if a string contains all lowercase letters.\n    '''\n    return(re.search(r'^[a-z]+$', text))\ndef is_all_uppercase(text):\n    '''\n    Write a function to check if a string contains all uppercase letters.\n    '''\n    return(re.search(r'^[A-Z]+$', text))\ndef is_uppercase(text):\n    '''\n    Write a function to check if a string contains at least one uppercase letter.\n    '''\n    return(re.search(r'[A-Z]', text))\ndef is_lowercase(text):\n    '''\n    Write a function to check if a string contains at least one lowercase letter.\n    '''\n    return(re.search(r'[a-z]', text))\ndef is_titlecase(text):\n    '''\n    Write a function to check if a string is in titlecase.\n    '''\n    return(re.search(r'\\b[A-Z][a-z]+\\b', text))\ndef is_capitalized(text):\n    '''\n    Write a function to check if a string starts with a capital letter.\n    '''\n    return(re.search(r'^[A-Z]+', text))\ndef to_lowercase(text):\n    '''\n    Write a function to convert a string to all lowercase.\n    '''\n    return(text.lower())\ndef to_uppercase(text):\n    '''\n    Write a function to convert a string to all uppercase.\n    '''\n    return(text.upper())\ndef has_length(text):\n    '''\n    Write a function to check if a string has a given length.\n    '''\n    return(len(text) == 13)\ndef has_length_greater_than(text):\n    '''\n    Write a function to check if a string has a given length.\n    '''\n    return(len(text) > 13)\nde"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            # print(mid)\n            return mid\n        elif x < A[mid]:\n            right = mid - 1\n        elif x > A[mid]:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    \n    while start + 1 < end:\n        mid = start + (end - start) // 2\n        if A[mid] >= x:\n            end = mid\n        else:\n            start = mid\n    \n    if A[start] == x:\n        return start\n    if A[end] == x:\n        return end\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    start, end = 0, len(A)-1\n    while start <= end:\n        mid = start + (end-start) // 2\n        if A[mid] == x:\n            if mid == 0 or x!= A[mid-1]:\n                return mid\n            end = mid - 1\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    first_occurrence = -1\n    while left <= right:\n        middle = (left + right) // 2\n        if x == A[middle]:\n            first_occurrence = middle\n            right = middle - 1\n        elif x > A[middle]:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return first_occurrence\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)-1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x < A[mid]:\n            right = mid - 1\n        elif x > A[mid]:\n            left = mid + 1\n        else:\n            if mid - 1 < 0 or A[mid-1]!= x:\n                return mid\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)-1\n    while low <= high:\n        mid = (low+high)//2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            high = mid - 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid - 1 < 0:\n                return mid\n            if A[mid-1]!= x:\n                return mid\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            sum+=math.prod(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    result = []\n    for i in range(0, n):\n        prod *= arr[i]\n        result.append(prod)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = []\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            s.append(reduce(lambda x, y: x*y, arr[i:j+1]))\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Approach : \n    # The idea is to use sliding window technique. \n    # We use two variables l and r to store the start and end of the current window.\n    # Then we calculate the product of all the elements of the current window and add it to sum\n    # Note that we are starting the window at the beginning of the list as it makes the product easy.\n    # We keep incrementing the end of the window to see if the product is greater than prod.\n    # If it is greater, we do the same for the new end.\n    # Else we increment the start of the window, and continue the same.\n    # The approach is based on the fact that when a sublist is removed, the elements to the right of the removed elements\n    # are not affected. \n    # i.e. if we remove all elements between index 2 to 5, and also remove 4, then the product of elements from index 1 to 5 is unaffected.\n    # i.e. The sublist with 2,3,4,5 as the end is unaffected.\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    sum = 0\n    for i in arr:\n        prod *= i\n        sum += prod\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum=0\n    prod=1\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            prod=prod*arr[j]\n            sum=sum+prod\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_length = len(arr)\n    sum_prod = 0\n    for i in range(0,arr_length+1):\n        for j in range(i+1,arr_length+1):\n            product = 1\n            for k in range(i,j):\n                product = product * arr[k]\n            sum_prod = sum_prod + product\n    return sum_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_size = len(arr)\n    subarray_size = arr_size - 1\n    result_sum = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    sum_subarray = 0\n    for i in range(n):\n        prod *= arr[i]\n        sum_subarray += prod\n    \n    prod = 1\n    for i in range(n-1, -1, -1):\n        prod *= arr[i]\n        sum_subarray += prod\n    \n    return sum_subarray\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_subarrays_prod = 0\n    subarray = 1\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # code here\n    n = n >> 1\n    n = n << 1\n    return n ^ n>>32\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first = n & ~(0b11)\n    last = n & ~(0b1)\n    print(\"first:\", first)\n    print(\"last:\", last)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0xFFFFFFFF # stores all bits\n    # masking the last two bits\n    last_two_bits = n & mask\n    # toggle last two bits of the number\n    last_two_bits ^= 0xFFFF\n    # masking all bits except the first and last two bits\n    first_two_bits = n & (mask ^ 0xFFFF)\n    # combinging first two bits with xor of last two bits\n    return (first_two_bits << 16) | last_two_bits\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_bits(n):\n        # Right shift n by 1 bit and add 1\n        # This will add 0 to the last bit and\n        # subtract 1 from the first bit.\n        n = n >> 1\n        n = n | 1\n        # Left shift n by 1 bit\n        n = n << 1\n        return n\n    print(toggle_bits(n))\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(n)\n    n = n | (n >> 1)\n    n = n & ~(n % 2)\n    n = n | (n << 1)\n    n = n & ~(n % 2)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n>>1) ^ (n>>2)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = n\n    c = 1\n    while(c<len(bin(n))-3):\n        x = x^(1<<c)\n        c+=1\n    return x\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    last_bit_position = len(bin(n)) - 2\n    \n    if n & (1 << last_bit_position):\n        n ^= (1 << last_bit_position)\n    else:\n        n |= (1 << last_bit_position)\n    return n\n    \ndef set_middle_bits_pythonic(n):\n    '''\n    Using bitwise operations and masking\n    '''\n    n ^= ((n >> 1) & 0x55555555)\n    n = ((n << 1) & 0x33333333) | (n >> 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n>>1)\n    n = n ^ (n<<1)\n    n = n ^ (n>>8)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # left shift the number by 1 bit to the right\n    n >>= 1\n    # right shift the number by 1 bit to the left\n    n <<= 1\n    # return the number\n    return "
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[i]>x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l, r = 0, len(a) - 1\n    while l <= r:\n        mid = (r - l) // 2 + l\n        if a[mid] < x:\n            l = mid + 1\n        elif a[mid] > x:\n            r = mid - 1\n        else:\n            if mid == 0 or a[mid - 1]!= x:\n                return mid\n            r = mid - 1\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the insertion point with bisection search.\n    i = bisect.bisect_left(a, x)\n    return i\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the insertion point with bisection search.\n    i = bisect.bisect_right(a, x)\n    return i\n    \ndef left_deletion(a, x):\n    '''\n    Write a function to locate the left deletion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the insertion point with bisection search.\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return None\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x < a[0]:\n        return 0\n    for i in range(len(a)):\n        if x == a[i]:\n            return i\n        if x < a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n    \ndef left_search(a, x):\n    '''\n    Write a function to locate the leftmost value exactly equal to x in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a):\n        if a[i] == x:\n            return i\n    return -1\n    \ndef right_search(a, x):\n    '''\n    Write a function to locate the rightmost value exactly equal to x in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a):\n        if a[i] == x:\n            return i\n    return -1\n    \ndef insertion_sort(a):\n    '''\n    Write a function that takes in an array of integers and sorts those integers in place in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        j = i\n        while j > 0 and a[j] < a[j-1]:\n            a[j], a[j-1] = a[j-1], a[j]\n            j -= 1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0 or x < a[0]:\n        return 0\n    if x == a[0]:\n        return 1\n    for i in range(len(a)):\n        if x == a[i]:\n            return i + 1\n        if x > a[i]:\n            return i\n    return len(a) + 1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0 or x > a[len(a)-1]:\n        return len(a)\n    if x == a[len(a)-1]:\n        return len(a) - 1\n    for i in range(len(a)):\n        if x == a[i]:\n            return i - 1\n        if x > a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    if r < 0:\n        return 0\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if x <= a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect(a, x)\n    return i\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string)) \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return 'String starts with vowel'\n    else:\n        return 'String doesn\\'t starts with vowel'\n    #pass\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex, string)): \n        return True \n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex, string)): \n        print(string, 'Starts with a vowel')\n    else: \n        print(string, 'Does not starts with a vowel')\ndef is_even(number): \n    '''\n    Write a function to check whether the given number is even or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        if(int(number) % 2 == 0): \n            print(number, 'is even')\n        else: \n            print(number, 'is odd')\n    else: \n        print(number, 'is not a number')\ndef is_vowel(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(r\"^[aeiouAEIOU][A-Za-z0-9_]*$\", string)): \n        print('Yes, it is a vowel')\n    else: \n        print('No, it is not a vowel')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef is_odd(number): \n    '''\n    Write a function to check whether the given number is odd or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        if(int(number) % 2 == 1): \n            print(number, 'is odd')\n        else: \n            print(number, 'is even')\n    else: \n        print(number, 'is not a number')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match(r\"^[1-9][0-9]*$\", number)): \n        print(number, 'is an integer')\n    else: \n        print(number, 'is not an integer')\ndef check_num(number): \n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    if(re.match("
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        print(\"String is starting with a vowel\") \n    else: \n        print(\"String is not starting with a vowel\") \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n    \nprint(\"check_str('a_a') -> \", check_str('a_a')) \nprint(\"check_str('aA') -> \", check_str('aA')) \nprint(\"check_str('Aa') -> \", check_str('Aa')) \nprint(\"check_str('Aa') -> \", check_str('Aa')) \nprint(\"check_str('EA') -> \", check_str('EA')) \nprint(\"check_str('Ae') -> \", check_str('Ae')) \nprint(\"check_str('ae') -> \", check_str('ae')) \nprint(\"check_str('aE') -> \", check_str('aE')) \nprint(\"check_str('Aa') -> \", check_str('Aa')) \nprint(\"check_str('Aa') -> \", check_str('Aa')) \nprint(\"check_str('aAa') -> \", check_str('aAa')) \nprint(\"check_str('AaAa') -> \", check_str('AaAa')) \nprint(\"check_str('AaAa') -> \", check_str('AaAa')) \nprint(\"check_str('AaAa') -> \", check_str('AaAa')) \nprint(\"check_str('aAAa') -> \", check_str('aAAa')) \nprint(\"check_str('Aaaa') -> \", check_str('Aaaa')) \nprint(\"check_str('AaAaAa') -> \", check_str('AaAaAa')) \nprint(\"check_str('AaAaAa') -> \", check_str('AaAaAa')) \nprint(\"check_str('AaAaAa') -> \", check_str('AaAaAa')) \nprint(\"check_str('AaAaAa') -> \", check_str('AaAaAa')) \nprint(\"check_str('aAaAaAa') -> \", check_str('aAaAaAa')) \nprint(\"check_str('aAaAaAa') -> \", check_str('aAaAaAa')) \nprint(\"check_str('aAaAaAa') -> \", check_str('aAaAaAa')) \nprint(\"check_str('aAaAaAa') -> \", check_str('aAaAaAa')) \nprint(\"check_str('aAaAaAa') -> \", check_str('aAaAaAa')) \nprint(\"check_str('aAaAaAa') -> \", check_str('aAaAaAa')) \nprint(\"check_str('AaAaAaAa') -> \", check_str('AaAaAaAa')) \nprint(\"check_str('AaAaAaAa') -> \", check_str('AaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check_str('aAaAaAaAa')) \nprint(\"check_str('aAaAaAaAa') -> \", check"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return geometric_sum(n-1) + n**n\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 1\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum_rec(n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (1 / (1 + n)) + geometric_sum_rec(n-1)\n    return geometric_sum_rec(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (1 + geometric_sum(n - 1)) ** 2\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (2 * geometric_sum(n - 1)) if n > 0 else 0\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2 * geometric_sum(n-1))\n    \ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of n. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-17.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # n must be a positive integer\n    if n <= 0 or math.ceil(math.log10(n))!= math.floor(math.log10(n)): \n        return -1 \n    \n    # Initialize starting number with minimum digits \n    # so that n-digit triangular numbers can be formed. \n    start = 10**(n - 1) \n    \n    # Keep adding 1 to the starting number \n    # till it is divisible by 10 \n    while (10 * (start - 1)) % (n + 1)!= 0: \n        start += 1\n    \n    # find the smallest triangular number \n    # with n digits and return its index \n    return (10 * (start - 1)) / (n + 1) \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # return 0\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return n + total - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_num = int(\"9\"*n)\n    for i in range(n): \n        a = int(\"9\"*i) \n        b = int(\"9\"*(i+1)) \n        if(a+b>max_num): \n            return i \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    number = 0\n    n = int(n)\n    while True:\n        number += count\n        count += 1\n        if len(str(number)) == n:\n            return number\n            \ndef find_Index2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    count = 0\n    number = 0\n    while True:\n        number += count\n        count += 1\n        if math.log10(number)+1 >= n:\n            return number\n            \ndef min_product(n): \n    '''\n    Write a python function to find the minimum product of n consecutive digits of a given number. https://www.geeksforgeeks.org/minimum-product-of-n-consecutive-digits-of-a-given-number/\n    '''\n    product = 1\n    for i in range(n):\n        product *= int(input('enter the number: '))\n    return product \n    \ndef max_product(n): \n    '''\n    Write a python function to find the maximum product of n consecutive digits of a given number. https://www.geeksforgeeks.org/maximum-product-of-n-consecutive-digits-of-a-given-number/\n    '''\n    product = 1\n    for i in range(n):\n        product *= int(input('enter the number: '))\n    product = list(str(product))\n    product = list(map(int, product))\n    return max(product)\n    \ndef is_prime(n): \n    '''\n    Write a python function to check whether the given number is a prime or not. https://www.geeksforgeeks.org/python-program-to-check-whether-a-number-is-prime-or-not/\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if (n % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef print_prime_factors(n): \n    '''\n    Write a python function to print prime factors of a given number. https://www.geeksforgeeks.org/python-program-to-print-prime-factors-of-a-number/\n    '''\n    factors = []\n    for i in range(2,int(n/2)+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \ndef print_prime_factors2(n): \n    '''\n    Write a python function to print prime factors of a given number. https://www.geeksforgeeks.org/python-program-to-print-prime-factors-of-a-number/\n    '''\n    factors = []\n    for i in range(2,int(n/2)+1):\n        if n % i == 0 and is_prime(i):\n            factors.append(i)\n    return factors\n    \ndef print_prime_factors3(n): \n    '''\n    Write a python function to print prime factors of a given number. https://www.geeksforgeeks.org/python-program-to-print-prime-factors-of-a-number/\n    '''\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n/2\n    for i in range(3,int(n/2)+1,2):\n        while n % i == 0:\n            factors.append(i)\n            n = n/i\n    if n > 2:\n        factors.append(int(n))\n    return factors\n    \ndef prime_factorization(n): \n    '''\n    Write a python function to print prime factors of a given number. https://www.geeksforgeeks.org/python-program-to-print-prime-factors-of-a-number/\n    '''\n    prime_list = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            if is_prime(i) == True:\n                n = n/i\n                prime_list.append(i)\n            else:\n                i += 1\n        else:\n            i += 1\n    return prime_list\n    \ndef prime_factorization2(n): \n    '''\n    Write a python function to print prime factors of a given number. https://www.geeksforgeeks.org/python-program-to-print-prime-factors-of-a-number/\n    '''\n    prime_list = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            if is_prime(i) == True:\n                n = n/i\n                prime_list.append(i)\n            else:\n                i += 1\n        else:\n            i += 1\n    return prime_list\n    \ndef largest_prime_factor(n): \n    '''\n    Write a python function to print prime factors of a given number. https://www.geeksforgeeks.org/python-program-to-print-prime-factors-of-a-number/\n    '''\n    prime_list = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            if is_prime(i) == True:\n                n = n/i\n                prime_list.append(i)\n            else:\n                i += 1\n        else:\n            i += 1\n    return max(prime_list)\n    \ndef smallest_prime_factor(n): \n    '''\n    Write a python function to print prime factors of a given number. https://www.geeksforgeeks.org/python-program-to-print-prime-factors-of-a-number/\n    '''\n    prime_list = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            if is_prime(i) == True:\n                n = n/i\n                prime_list.append(i)\n            else:\n                i += 1\n        else:\n            i += 1\n    return min(prime_list)\n    \ndef sum_of_prime_factors(n): \n    '''\n    Write a python function to print prime factors of a given number. https://www.geeksforgeeks.org/python-program-to-print-prime-factors-of-a-number/\n    '''\n    sum_list = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            if is_prime(i) == True:\n                n = n/i\n                sum_list.append(i)\n            else:\n                i += 1\n        else:\n            i += 1\n    return sum(sum_list)\n    \ndef sum_of_prime_factors2(n): \n    '''\n    Write a python function to print prime factors of a given number. https://www.geeksforgeeks.org/python-program-to-print-prime-factors-of-a-number/\n    '''\n    sum_list = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            if is_prime(i) == True:\n                n = n/i\n                sum_list.append(i)\n            else:\n                i += 1\n        else:\n            i += 1\n    return sum(sum_list)\n    \ndef sum_of_prime_factors3(n): \n    '''\n    Write a python function to print prime factors of a given number. https://www.geeksforgeeks.org/python-program-to-print-prime-factors-of-a-number/\n    '''\n    sum_list = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            if is_prime(i) == True:\n                n = n/i\n                sum_list.append(i)\n            else:\n                i += 1\n        else:\n            i += 1\n    return sum(sum_list)\n    \ndef fac"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(input(\"Please enter the number of digits: \"))\n    s = set([])\n    a = 1\n    while len(s) < n:\n        for i in range(1,int(math.pow(10,a))):\n            s.add(i)\n        a += 1\n    a = 1\n    while len(s) > 0:\n        for i in range(1,a):\n            s.remove(i)\n        a += 1\n        \n    return a-1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    x = 0\n    for i in range(1, int(n)): \n        x += (i * (i + 1)) // 2\n    return x\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        i += 1\n        a = i*(i+1)/2\n        if len(str(a)) == n:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True: \n        if (len(str(i)) == n): \n            return i \n        i += 1 \ndef find_Triangular_Number(n): \n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/find-nth-triangular-number/\n    '''\n    sum = 0\n    i = 1\n    while(i <= n): \n        sum += i \n        i += 1\n    return sum\n    \ndef get_Factors(n): \n    '''\n    Write a python function to find the factors of a given number. https://www.geeksforgeeks.org/get-factors-of-a-given-number/\n    '''\n    # Converting the number into it's prime factor form. \n    while n % 2 == 0: \n        print(2,end = \" \") \n        n = n / 2\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while(1):\n        i += 1\n        if (math.log10(i) + 1) == n:\n            return i\ndef isPrime(n): \n    '''\n    Write a python function to check if a number is prime. https://www.geeksforgeeks.org/python-program-to-check-whether-a-number-is-prime-or-not/\n    '''\n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef isPalindrome(num): \n    '''\n    Write a python function to check if a number is palindrome. https://www.geeksforgeeks.org/python-program-to-check-if-a-number-is-palindrome/\n    '''\n    temp = num\n    rev = 0\n    while(num > 0):\n        dig = num % 10\n        rev = rev * 10 + dig\n        num = num // 10\n    return temp == rev\ndef printDigitFrom(n): \n    '''\n    Write a python function to print the digit of a number if it is of one decimal place. https://www.geeksforgeeks.org/python-program-to-print-first-digit-of-a-number/\n    '''\n    print(n)\n    n = abs(n)\n    while n >= 10:\n        n = n // 10\n    return n\ndef lengthOfLongestSubString(s):\n    '''\n    Write a python function to find the length of the longest substring without repeating characters. https://www.geeksforgeeks.org/length-of-the-longest-substring-without-repeating-characters/\n    '''\n    maxLength = 0\n    for i in range(0, len(s)): \n        unique = True\n        for j in range(i + 1, len(s)): \n            if s[i] == s[j]: \n                unique = False\n                break\n        if unique: \n            maxLength += 1\n    return maxLength\ndef printReversedString(s):\n    '''\n    Write a python function to reverse a string. https://www.geeksforgeeks.org/python-program-to-reverse-a-string/\n    '''\n    return s[::-1]\ndef sumOfDigits(n): \n    '''\n    Write a python function to sum of digits of a number. https://www.geeksforgeeks.org/python-program-to-sum-of-digits-of-a-number/\n    '''\n    return sum([int(i) for i in str(n)])\ndef checkPerfectNumber(n): \n    '''\n    Write a python function to check if a number is perfect number. https://www.geeksforgeeks.org/python-program-check-for-perfect-number/\n    '''\n    temp = 1\n    sum = 0\n    i = 1\n    while(i < n):\n        if n % i == 0: \n            sum += i\n            temp += 1\n        i += 1\n    return sum == n\ndef Fibonacci(n): \n    '''\n    Write a python function to generate Fibonacci series. https://www.geeksforgeeks.org/python-program-for-program-to-print-fibonacci-series/\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2)\ndef NthFibonacci(n): \n    '''\n    Write a python function to generate Fibonacci series of n length. https://www.geeksforgeeks.org/python-program-for-program-to-print-fibonacci-series/\n    '''\n    # Initialize first two Fibonacci numbers as 0 and 1 \n    a, b = 0, 1\n    # Check if N is less than 0 \n    if n < 0: \n        print(\"Incorrect input\") \n    # Check if N is equal to 0 \n    elif n == 0: \n        return 0\n    # Check if N is equal to 1 \n    elif n == 1: \n        return b\n    # Iterate N times \n    else: \n        for i in range(1, n): \n            a, b = b, a + b \n        return b\ndef perfectSquare(n): \n    '''\n    Write a python function to check if a number is a perfect square. https://www.geeksforgeeks.org/python-program-to-check-if-a-number-is-a-perfect-square/\n    '''\n    sq = math.sqrt(n)\n    if math.floor(sq) == sq: \n        return True\n    else: \n        return False\ndef isPangram(str1, alphabet=\"abcdefghijklmnopqrstuvwxyz\"): \n    '''\n    Write a python function to check if a string is a pangram or not. https://www.geeksforgeeks.org/python-program-to-check-if-a-string-is-pangram/\n    '''\n    if len(set(str1.lower())) <= 26: \n        str = set(str1.lower())\n        for ch in alphabet: \n            if ch in str: \n                continue\n            else: \n                return False\n        return True\n    return False\ndef isStringPermutation(str1, str2): \n    '''\n    Write a python function to check if a string is permutation of another string. https://www.geeksforgeeks.org/python-program-to-check-if-a-string-is-a-permutation-of-another-string/\n    '''\n    if len(str1)!= len(str2): \n        return False\n    str1 = sorted(str1.lower()) \n    str2 = sorted(str2.lower()) \n    return str1 == str2\ndef isPalindromeString(str1): \n    '''\n    Write a python function to check if a string is palindrome or not. https://www.geeksforgeeks.org/python-program-to-check-if-a-string-is-palindrome-or-not/\n    '''\n    return str1[::-1].casefold() == str1.casefold()\ndef isValidParenthesis(s): \n    '''\n    Write a python function to check if a string is a valid parenthesis or not. https://www.geeksforgeeks.org/python-program-to-check-validity-of-a-parentheses/\n    '''\n    stack = [] \n    for i in s: \n        if i in [\"(\", \"{\", \"[\"]: \n            stack.append(i) \n        else: \n            if not stack: \n                return False\n            temp = stack.pop() \n            if (i == \")\" and temp!= \"(\") or (i == \"}\" and temp!= \"{\") or (i == \"]\" and temp!= \"[\"): \n                return False\n    return len(stack) == 0\ndef isPalindromeNumber(n): \n    '''\n    Write a python function to check if a number is palindrome or not. https://www.geeksforgeeks.org/python-program-to-check-if-a-number-is-palindrome-or-not/\n    '''\n    return str(n)[::-1] == str(n)\ndef isVowel(c): \n    '''\n    Write a python function to check if a character is vowel or not. https://www.geeksforgeeks.org/python-program-to-check-whether-a-character-is-vowel-or-not/\n    '''\n    return c.lower() in ['a', 'e', 'i', 'o', 'u']\ndef isVowel2(c): \n    '''\n    Write a python function to check if a character is vowel or not. https://ww"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # test_tup = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\n    # output: {10:0, 20:1, 30:2, 40:3, 50:4, 60:5, 70:6, 80:7, 90:8, 100:9}\n    test_dict = {}\n    for idx in range(0, len(test_tup), 2):\n        test_dict[test_tup[idx]] = idx\n    print(test_dict)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        test_dict[test_tup[i][0]] = test_tup[i][1]\n    print(test_dict)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = dict()\n    for i in range(0,len(test_tup),2):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # test_tup = ('Harsh', 23, 'Mumbai')\n    # test_tup = ('Harsh', 23, 'Mumbai', 'India')\n    # test_tup = ('Harsh', 23, 'Mumbai', 'India', 'NY')\n    # test_tup = ('Harsh', 23, 'Mumbai', 'India', 'NY', 100)\n    # test_tup = ('Harsh', 23, 'Mumbai', 'India', 'NY', 100.23)\n    # test_tup = ('Harsh', 23, 'Mumbai', 'India', 'NY', 100.23, 'Harsh')\n    # test_tup = ('Harsh', 23, 'Mumbai', 'India', 'NY', 100.23, 'Harsh', True, False, True, False, True, False, True, False)\n    # test_tup = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0,len(test_tup)):\n        result[test_tup[i]]=test_tup[i+1]\n    return result\n    \ndef get_average(li):\n    '''\n    Write a function that takes in a list of integers and returns the average of the list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    sum = 0\n    for num in li:\n        sum+=num\n    return sum/len(li)\n    \ndef convert_to_celsius(fahrenheit):\n    '''\n    Write a function that takes in a number in fahrenheit and converts it to celsius. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    return (5/9)*(fahrenheit-32)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0,len(test_tup),2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    for i in range(len(test_tup)-1):\n        dict_[test_tup[i]] = test_tup[i+1]\n    return dict_\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(i == s[0] for i in s)\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    ch = []\n    for i in s:\n        if i not in ch:\n            ch.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if(s.count(i) > 1):\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    x=s[0]\n    y=s[1]\n    z=s[2]\n    x=x.lower()\n    y=y.lower()\n    z=z.lower()\n    if(x==y or y==z or z==x):\n        print('Characters are same.')\n    else:\n        print('Characters are not same.')\n        \nall_Characters_Same(\"abc\")\nall_Characters_Same(\"abcdefghi\")\nall_Characters_Same(\"abcdefgh\")\nall_Characters_Same(\"abcdefghijk\")\nall_Characters_Same(\"abcd\")\nall_Characters_Same(\"abcdefghi\")\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i] == s[i+1] :\n            return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    count = 0\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            count += 1\n    if count > 0:\n        return False\n    else:\n        return True\n        \nprint(all_Characters_Same(\"abab\"))\nprint(all_Characters_Same(\"abba\"))\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = \"aaabbbbb\"\n    s = \"aa\"\n    s = \"aaabbbbbb\"\n    s = \"aaa\"\n    s = \"a\"\n    s = \"bbbb\"\n    s = \"b\"\n    s = \"aabbcc\"\n    s = \"aabbcc\"\n    s = \"aabbcc\"\n    s = \"aabbcc\"\n    s = \"aaabbbccc\"\n    s = \"aaabbbbccc\"\n    s = \"aaabbbbccc\"\n    s = \"aaabbbbccc\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aabbbbccca\"\n    s = \"aab"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    chars = {}\n    for i in s :\n        if i in chars :\n            chars[i] += 1\n        else :\n            chars[i] = 1\n    \n    for i in chars :\n        if chars[i]!= 1 :\n            return False\n    \n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s1 = s[0]\n    for i in s :\n        if i!= s1 :\n            return False\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/4 * side**2 * math.sqrt(3)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side * math.sqrt(3) / 4\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side ** 3 * math.sqrt(3) / 4\ndef area_hexagon(side):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return 3 * side * side\ndef volume_hexagon(side):\n    '''\n    Write a function to caluclate the volume of a hexagon.\n    '''\n    return side ** 3 / math.sqrt(3)\ndef area_rectangular_prism(base, height):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    return base * height\ndef volume_rectangular_prism(base, height):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    return base * height\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side * side\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side ** 3\ndef area_cuboid(length, width, height):\n    '''\n    Write a function to caluclate the area of a cuboid.\n    '''\n    return length * width * height\ndef volume_cuboid(length, width, height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return length * width * height\ndef area_cone(base, side):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return base * side\ndef volume_cone(base, side):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return math.pi * base * side / 3\ndef area_cylinder(radius, height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return 2 * math.pi * radius * height\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return math.pi * radius ** 2 * height\ndef area_cone_slot(radius, height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return math.pi * radius ** 2\ndef volume_cone_slot(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return radius ** 2 * height / 3\ndef area_square_pyramid(base, slant_height):\n    '''\n    Write a function to caluclate the area of a square pyramid.\n    '''\n    return base * slant_height\ndef volume_square_pyramid(base, slant_height):\n    '''\n    Write a function to caluclate the volume of a square pyramid.\n    '''\n    return base ** 2 * slant_height / 3\ndef area_parallelepiped(length, breadth, height):\n    '''\n    Write a function to caluclate the area of a parallelepiped.\n    '''\n    return length * breadth * height\ndef volume_parallelepiped(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a parallelepiped.\n    '''\n    return length * breadth * height\ndef area_rectangular_prism_cut(base, height):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    return base * height\ndef volume_rectangular_prism_cut(base, height):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    return base * height\ndef area_parallelepiped_cut(length, breadth, height):\n    '''\n    Write a function to caluclate the area of a parallelepiped.\n    '''\n    return length * breadth * height\ndef volume_parallelepiped_cut(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a parallelepiped.\n    '''\n    return length * breadth * height\ndef area_square_pyramid_cut(base, slant_height):\n    '''\n    Write a function to caluclate the area of a square pyramid.\n    '''\n    return base * slant_height\ndef volume_square_pyramid_cut(base, slant_height):\n    '''\n    Write a function to caluclate the volume of a square pyramid.\n    '''\n    return base ** 2 * slant_height / 3\ndef area_cylinder_cut(radius, height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return 2 * math.pi * radius * height\ndef volume_cylinder_cut(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return math.pi * radius ** 2 * height\ndef area_cone_slot_cut(radius, height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return math.pi * radius ** 2\ndef volume_cone_slot_cut(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return radius ** 2 * height / 3\ndef area_circle_sector(radius, angle):\n    '''\n    Write a function to caluclate the area of a circle sector.\n    '''\n    return math.pi * radius * radius * math.sin(angle)\ndef volume_circle_sector(radius, angle):\n    '''\n    Write a function to caluclate the volume of a circle sector.\n    '''\n    return math.pi * radius ** 2 * angle / 360\ndef area_circular_pump(diameter):\n    '''\n    Write a function to caluclate the area of a circular pump.\n    '''\n    return math.pi * diameter\ndef volume_circular_pump(diameter):\n    '''\n    Write a function to caluclate the volume of a circular pump.\n    '''\n    return math.pi * diameter ** 3 / 6\ndef area_hemisphere(radius):\n    '''\n    Write a function to caluclate the area of a hemisphere.\n    '''\n    return math.pi * radius ** 2 / 2\ndef volume_hemisphere(radius):\n    '''\n    Write a function to caluclate the volume of a hemisphere.\n    '''\n    return math.pi * radius ** 3 / 3\ndef area_half_cone(radius, height):\n    '''\n    Write a function to caluclate the area of a half cone.\n    '''\n    return math.pi * radius * (radius + height * math.sqrt(2))\ndef volume_half_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a half cone.\n    '''\n    return math.pi * radius ** 2 * height / 3\ndef area_cone_with_slope(radius, height, slope):\n    '''\n    Write a function to caluclate the area of a cone with a given slope.\n    '''\n    return math.pi * radius * radius * math.sin(math.radians(slope))\ndef volume_cone_with_slope(radius, height, slope):\n    '''\n    Write a function to caluclate the volume of a cone with a given slope.\n    '''\n    return math.pi * radius ** 2 * height * math.sin(math.radians(slope))\ndef area_parabolic_cone(base, height):\n    '''\n    Write a function to caluclate the area of a parabolic cone.\n    '''\n    return 0.5 * math.pi * base * base * height\ndef volume_parabolic_cone(base, height):\n    '''\n    Write a function to caluclate the volume of a parabolic cone.\n    '''\n    return 0.5 * math.pi * base ** 3 * height\ndef area"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 3 * (math.sqrt(2) + 1) * 0.5\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side ** 2) * (3 ** 0.5)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * math.sqrt(3) * side**2 / 3\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3/12\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*math.sqrt(3)*side**3/12\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    print(side**3*math.sqrt(3)/4)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return round((math.sqrt(3)*(side**2)),2)\n    #Side of the triangle = side\n    #Perimeter of the triangle = side * 4\n    #Area = Square Root (3) * side**2\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Rotate right by m items\n    n = len(list)\n    temp = []\n    for i in range(0, m):\n        temp.append(list.pop())\n    for i in range(0, n-m):\n        list.append(temp[i])\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # initializing list\n    a = []\n    # slicing list from index m to end of the list\n    a.extend(list[m:])\n    # joining list from index 0 to index m\n    a.extend(list[:m])\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[-m:] + list[:len(list)-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) < m:\n        print (\"Length of list must be greater than m\")\n    n = len(list)\n    m = m % n\n    for i in range(m):\n        list.insert(0, list.pop())\n    return(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    n = m % l\n    if n == 0:\n        n = l\n    print(list[l-n:], list[:l-n])\n    list[l-n:], list[:l-n] = list[:l-n], list[l-n:]\n    print(list)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[:]\n    for i in range(m):\n        temp.append(list[i])\n    del(list[:])\n    for i in range(len(temp)):\n        list.append(temp[i])\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    p=list[-m:]\n    q=list[:-m]\n    return p+q\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    rotate_list = list[-m:] + list[:-m]\n    return rotate_list\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None:\n        return True\n    if test_tup[1] == None:\n        return True\n    if test_tup[2] == None:\n        return True\n    if test_tup[3] == None:\n        return True\n    if test_tup[4] == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        print(any(test_tup))\n    except:\n        print(\"tuple error\")\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if any(x is None for x in test_tup) else False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for ele in test_tup:\n        if ele == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(type(i) == type(None) for i in test_tup)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum+1) if all([num % int(digit) == 0 for digit in str(num)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # numlist = [i for i in range(startnum, endnum+1) if ((i%1==0) and (i%2==0) and (i%3==0) and (i%4==0) and (i%5==0) and (i%6==0) and (i%7==0) and (i%8==0) and (i%9==0) and (i%0==0))]\n    numlist = []\n    for i in range(startnum, endnum+1):\n        if ((i%1==0) and (i%2==0) and (i%3==0) and (i%4==0) and (i%5==0) and (i%6==0) and (i%7==0) and (i%8==0) and (i%9==0) and (i%0==0)):\n            numlist.append(i)\n    return numlist\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum+1) if check_divisible_by_digits(x)]\n    \ndef check_divisible_by_digits(number):\n    '''\n    A function to check whether the given number is divisible by the sum of its digits\n    '''\n    if sum([int(i) for i in str(number)]) % number == 0:\n        return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    mylist = []\n    for number in range(startnum, endnum+1):\n        numlist = []\n        for digit in str(number):\n            numlist.append(int(digit))\n        if sum(numlist) % len(numlist) == 0:\n            mylist.append(number)\n    return mylist\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if startnum == endnum:\n        return [startnum]\n    else:\n        return list(filter(lambda x: all([x % int(digit) == 0 for digit in str(x)]), range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    '''\n    for i in range(startnum, endnum):\n        if all(i%int(i)==0 for i in str(i)):\n            print(i)\n    '''\n    return [i for i in range(startnum, endnum) if all(i%int(i)==0 for i in str(i))]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    results = []\n    for i in range(startnum, endnum+1):\n        if all([i % int(digit) == 0 for digit in str(i)]):\n            results.append(i)\n    return(results)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    '''\n    >>> divisible_by_digits(1000,2000)\n    [1009, 1236, 1425, 1699, 1876, 2025, 2191, 2468, 2857, 3125, 3389, 3663, 4009, 4376, 4953, 5346, 5761, 6193, 6457, 6863, 7185, 7489, 7937, 8261, 8598, 8789, 9098, 9699, 9973, 10137, 10306, 10390, 10488, 10606, 10626, 10800, 10872, 10956, 11010, 11128, 11168, 11298, 11372, 11558, 11748, 11935, 12120, 12306, 12476, 12564, 12660, 12755, 12887, 13096, 13373, 13593, 13699, 13817, 13913, 14031, 14355, 14500, 14646, 14886, 15062, 15353, 15551, 15633, 15719, 15910, 16014, 16190, 16363, 16567, 16688, 16881, 17017, 17091, 17181, 17362, 17492, 17595, 17761, 17946, 18144, 18266, 18377, 18493, 18597, 18772, 18975, 19051, 19160, 19340, 19550, 19680, 19885, 19971, 20040, 20203, 20384, 20576, 20683, 20877, 20960, 21041, 21128, 21208, 21320, 21443, 21529, 21617, 21715, 21826, 21918, 22021, 22116, 22215, 22330, 22436, 22535, 22651, 22736, 22840, 22929, 23049, 23136, 23247, 23321, 23434, 23543, 23643, 23745, 23853, 23947, 24135, 24269, 24391, 24581, 24687, 24794, 24900, 25007, 25109, 25236, 25366, 25500, 25667, 25777, 25983, 26117, 26265, 26386, 26483, 26632, 26719, 26894, 27081, 27262, 27376, 27574, 27749, 27931, 28121, 28248, 28367, 28506, 28657, 28847, 28939, 29147, 29253, 29367, 29448, 29539, 29627, 29719, 29814, 29909, 30046, 30113, 30205, 30306, 30390, 30494, 30664, 30795, 30921, 31042, 31208, 31320, 31443, 31529, 31617, 31715, 31826, 31918, 32021, 32116, 32215, 32330, 32436, 32535, 32651, 32736, 32840, 32929, 33049, 33136, 33247, 33302, 33403, 33491, 33577, 33676, 33770, 33864, 33960, 34054, 34147, 34253, 34366, 34508, 34567, 34633, 34729, 34817, 34913, 35096, 35187, 35376, 35573, 35663, 35778, 35880, 35979, 36139, 36255, 36372, 36478, 36587, 36786, 36884, 36981, 37083, 37189, 37381, 37475, 37670, 37772, 37876, 37980, 38084, 38187, 38373, 38586, 38734, 38887, 38966, 39094, 39200, 39373, 39465, 39594, 39678, 39866, 40033, 40107, 40282, 40474, 40597, 40685, 40797, 40877, 40959, 41042, 41137, 41224, 41310, 41402, 41491, 41578, 41667, 41755, 41844, 41934, 42030, 42120, 42207, 42302, 42394, 42579, 42664, 42750, 42835, 42928, 43020, 43115, 43208, 43210, 43304, 43487, 43576, 43664, 43744, 43831, 43921, 44025, 44120, 44209, 44308, 44408, 44587, 44675, 44761, 44853, 44944, 45035, 45135, 45236, 45327, 45415, 45597, 45675, 45761, 45844, 45933, 46026, 46116, 46205, 46303, 46397, 46481, 46664, 46750, 46834, 46929, 47034, 47123, 47129, 47138, 47175, 47201, 47267, 47359, 47459, 47569, 47778, 47866, 47944, 48035, 48128, 48220, 48302, 48387, 48475, 48576, 48679, 48875, 48960, 49045, 49134, 49253, 49326, 49417, 49507, 49580, 49669, 49749, 49832, 49923, 50017, 50115, 50298, 50374, 50467, 50569, 50653, 50747, 50839, 50932, 51023, 51215, 51318, 51410, 51501, 51694, 51881, 51966, 52163, 52250, 52343, 52427, 52513, 52698, 52885, 52973, 53057, 53143, 53246, 53331, 53423, 53514, 53695, 53886, 53977, 54068, 54159, 54250, 54340, 54429, 54528, 54614, 54795, 54980, 55061, 55149, 55249, 55340, 55441, 55333, 55422, 55514, 55598, 55791, 55876, 55971, 56057, 56141, 56233, 56335, 56413, 56597, 56782, 56967, 57062, 57144, 57255, 57345, 57434, 57504, 57585, 57681, 57771, 57862, 57948, 58130, 58141, 58252, 58344, 58433, 58521, 58605, 58696, 58788, 58971, 59064, 59151, 59249, 59344, 59432, 59522, 59610, 59697, 59788, 59876, 59966, 60053, 60138, 60224, 60312, 60401, 60590, 60679, 60768, 60859, 60951, 61043, 61137, 61232, 61321, 61413, 61598, 61792, 61877, 61969, 62058, 62147, 62237, 62327, 62416, 62595, 62781, 62867, 62957, 63047, 63137, 63236, 63325, 63414, 63496, 63687, 63776, 63865, 63954, 64045, 64136, 64237, 64326, 64405, 64586, 64777, 64866, 64956, 65046, 65136, 65235, 65335, 65424, 65514, 65604, 65692, 65783, 65872, 65962, 66051, 66140, 66252, 66343, 66431, 66505, 66594, 66684, 66773, 66863, 66952, 67042, 67131, 67231, 67332, 67422, 67511, 67591, 67680, 67770, 67860, 67949, 68039, 68129, 68228, 68337, 68426, 68505, 68585, 68674, 68764, 68853, 68943, 69032, 69120, 69199, 69278, 69364, 69450, 69539, 69628, 69718, 69817, 69906, 69995, 70084, 70173, 70263, 70352, 70431, 70520, 70598, 70786, 70875, 70965, 71054, 71144, 71233, 71322, 71411, 71499, 71588, 71677, 71766, 71855, 71944, 72033, 72122, 7"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    r = []\n    for i in range(startnum, endnum):\n        if all( [i % int(d) == 0 for d in str(i)] ):\n            r.append(i)\n    return r\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print('\\n')\n    print('-'*40)\n    print('divisible_by_digits(startnum, endnum)')\n    print('-'*40)\n    divisible_numbers = []\n    startnum = int(input('Enter starting number: '))\n    endnum = int(input('Enter ending number: '))\n    for i in range(startnum, endnum):\n        if i % 1 == 0:\n            if i % 2 == 0:\n                if i % 3 == 0:\n                    if i % 4 == 0:\n                        if i % 5 == 0:\n                            if i % 6 == 0:\n                                if i % 7 == 0:\n                                    if i % 8 == 0:\n                                        if i % 9 == 0:\n                                            if i % 10 == 0:\n                                                divisible_numbers.append(i)\n    print('\\n')\n    print(f'Numbers divisible by all digits are: {divisible_numbers}')\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>=360:\n        return None\n    else:\n        return r**2*a/360\ndef test_sector_area():\n    assert sector_area(5,180)==50.26548245743669\n    assert sector_area(5,0)==None\n    assert sector_area(5,360)==50.26548245743669\ntest_sector_area()\ndef two_strings(s1,s2):\n    '''\n    Write a function that takes two strings and returns True if one is a permutation of the other. Return False otherwise.\n    '''\n    if sorted(s1)==sorted(s2):\n        return True\n    else:\n        return False\ndef test_two_strings():\n    assert two_strings('abc','cba')==True\n    assert two_strings('abc','def')==False\n    assert two_strings('abcd','dabc')==True\ntest_two_strings()\ndef unique_list(l):\n    '''\n    Write a function that takes a list and returns a new list with the unique elements of the first list.\n    '''\n    uniq=[]\n    for i in l:\n        if i not in uniq:\n            uniq.append(i)\n    return uniq\ndef test_unique_list():\n    assert unique_list([1,2,3,3,3,3,4,5])==[1,2,3,4,5]\n    assert unique_list([1,2,2,3,3])==[1,2,3]\n    assert unique_list([1,1,2,3,3,4,5])==[1,2,3,4,5]\ntest_unique_list()\ndef reverse_list(l):\n    '''\n    Write a function that reverses the elements of a list. The function should return the reversed list.\n    '''\n    return l[::-1]\ndef test_reverse_list():\n    assert reverse_list([1,2,3,4])==[4,3,2,1]\n    assert reverse_list([1,2,3])==[3,2,1]\n    assert reverse_list([1,1,2,3,4])==[4,3,2,1,1]\ntest_reverse_list()\ndef mirror_list(l):\n    '''\n    Write a function that mirrors a list. The function should return the mirrored list.\n    '''\n    return l+l[-2::-1]\ndef test_mirror_list():\n    assert mirror_list([1,2,3])==[3,2,1,1,2,3]\n    assert mirror_list([1,2,3,4])==[4,3,2,1,1,2,3,4]\n    assert mirror_list([1])==[1,1]\ntest_mirror_list()\ndef reverse_and_mirror_list(l):\n    '''\n    Write a function that computes the reversal and the mirror image of a list. The function should return the concatenation of the two results.\n    '''\n    return l[::-1]+l[-2::-1]\ndef test_reverse_and_mirror_list():\n    assert reverse_and_mirror_list([1,2,3])==[3,2,1,1,2,3]\n    assert reverse_and_mirror_list([1,2,3,4])==[4,3,2,1,1,2,3,4]\n    assert reverse_and_mirror_list([1,2,3,5])==[5,3,2,1,1,2,3,5]\ntest_reverse_and_mirror_list()\ndef divisible_by_ten(nums):\n    '''\n    Write a function to find all the numbers in a list that are divisible by 10. Return the numbers in a list.\n    '''\n    new_list=[]\n    for i in nums:\n        if i%10==0:\n            new_list.append(i)\n    return new_list\ndef test_divisible_by_ten():\n    assert divisible_by_ten([25, 30, 35, 40])==[25, 30, 35]\n    assert divisible_by_ten([25, 25, 35, 40])==[25, 35]\n    assert divisible_by_ten([20, 25, 30, 35, 40])==[25, 30, 35]\ntest_divisible_by_ten()\ndef avg_num(nums):\n    '''\n    Write a function to compute the average of a list of numbers. The function should return a float.\n    '''\n    return float(sum(nums)/len(nums))\ndef test_avg_num():\n    assert avg_num([1,2,3,4])==2.5\n    assert avg_num([4,5,3,6])==4.0\n    assert avg_num([2,2,2,2,2])==2.0\ntest_avg_num()\ndef quadratic_roots(a,b,c):\n    '''\n    Write a function to compute the roots of a quadratic equation. The function should return a list containing the two roots.\n    '''\n    roots=[]\n    if a==0:\n        if b==0:\n            if c==0:\n                return None\n            else:\n                return -c/b\n        else:\n            roots.append(-c/b)\n            if c==0:\n                return roots\n            else:\n                roots.append(-c/b)\n                return roots\n    else:\n        r=(-b+math.sqrt(b**2-4*a*c))/(2*a)\n        r2=(-b-math.sqrt(b**2-4*a*c))/(2*a)\n        roots.append(r)\n        roots.append(r2)\n        return roots\ndef test_quadratic_roots():\n    assert quadratic_roots(2,0,0)==[0,0]\n    assert quadratic_roots(1,3,2)==[1,-4]\n    assert quadratic_roots(1,0,0)==[0,0]\n    assert quadratic_roots(1,1,4)==[-2,-2]\ntest_quadratic_roots()\ndef factorial(n):\n    '''\n    Write a function that takes a single integer argument and returns a list containing the first n factorials.\n    '''\n    new_list=[]\n    i=1\n    while len(new_list)<=n:\n        new_list.append(math.factorial(i))\n        i+=1\n    return new_list\ndef test_factorial():\n    assert factorial(4)==[1,1,2,6]\n    assert factorial(2)==[1,2,6]\n    assert factorial(1)==[1]\ntest_factorial()\ndef fibonacci(n):\n    '''\n    Write a function that returns a list containing the first n Fibonacci numbers. Use the equation (0.5*(5**0.5-1))n=0 to find the nth Fibonacci number.\n    '''\n    new_list=[]\n    a=0\n    b=1\n    if n==0:\n        return new_list\n    elif n==1:\n        return [0]\n    else:\n        new_list=[0,1]\n        for i in range(2,n+1):\n            c=a+b\n            a=b\n            b=c\n            new_list.append(c)\n        return new_list\ndef test_fibonacci():\n    assert fibonacci(3)==[0,1,1]\n    assert fibonacci(4)==[0,1,1,2]\n    assert fibonacci(5)==[0,1,1,2,3]\n    assert fibonacci(6)==[0,1,1,2,3,5]\ntest_fibonacci()\ndef is_prime(n):\n    '''\n    Write a function that takes a single integer argument and returns True if the argument is prime, and False otherwise.\n    '''\n    if n==0 or n==1:\n        return False\n    else:\n        fo"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (r**2)*(math.acos(-1*a/180)-math.acos((a-360)/180))\n    #return None if a>360\n    #return math.acos(-1*a/180)*r**2 if a<360\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    return math.pi*(r**2)*a\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 360:\n        area = r**2 * math.sin(math.radians(a))\n        return area\n    else:\n        return None\nprint(sector_area(5,8))\nprint(sector_area(3,0))\nprint(sector_area(2,360))\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = float(input('Enter the angle in degrees: '))\n    radius = float(input('Enter the radius of the circle: '))\n    if angle > 360:\n        return None\n    return math.pi * radius * radius * (angle / 360)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        return round((math.pi*r**2)/2,3)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # try:\n    #     assert a >= 0 and a <= 360\n    # except AssertionError:\n    #     return None\n    # else:\n    if a < 360:\n        return r**2*(a/360)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        return (r**2)*((a/360)*math.pi)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        area = (r**2)*(a/360)\n        return round(area,1)\n    else:\n        return None"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    # Following are two lists to store the maximum \n    # length when i = j = k = 0. \n    L = [[[0 for k in range(l+1)] for j in range(n+1)] for i in range(m+1)] \n    \n    # Following are two list to store the maximum \n    # length when i = 0 and j = k = 0. \n    P = [[[0 for k in range(l+1)] for j in range(n+1)] for i in range(m+1)] \n    \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, l+1): \n                # Note: You can't use the word 'if'. \n                # This case is for when X = \"ab\", Y = \"c\" and Z = \"ab\". \n                if(X[i-1] == Y[j-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                    P[i][j][k] = 1\n                # The case when X = \"ab\" and Y = \"c\". \n                elif(L[i-1][j][k] >= L[i][j-1][k]): \n                    L[i][j][k] = L[i-1][j][k] \n                    P[i][j][k] = 2\n                # The case when X = \"ab\" and Z = \"ba\". \n                elif(L[i-1][j][k] >= L[i][j][k-1]): \n                    L[i][j][k] = L[i-1][j][k] \n                    P[i][j][k] = 3\n                # The case when Y = \"c\" and Z = \"bc\". \n                elif(L[i][j-1][k] >= L[i][j][k-1]): \n                    L[i][j][k] = L[i][j-1][k] \n                    P[i][j][k] = 4\n                # The case when X = \"a\" and Y = \"bc\". \n                elif(L[i-1][j][k] >= L[i][j][k-1]): \n                    L[i][j][k] = L[i-1][j][k] \n                    P[i][j][k] = 5\n    return L[m][n][l], P\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None for k in range(l+1)] for j in range(n+1)] for i in range(m+1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # create a table to store results of subproblems\n    L = [[[None]*(o+1) for _ in range(n+1)] for _ in range(m+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    # declaring the array for storing the dp values \n    L = [[[None]*(o + 1) for i in range(n + 1)] for i in range(m + 1)] \n    \n    # \"\"\"Following steps build L[m+1][n+1][o+1] in bottom up fashion \n    # Note: L[i][j][k] contains length of LCS of X[0..i-1] \n    # and Y[0..j-1] and Z[0..k-1]\"\"\"\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[0 for i in range(l + 1)] for j in range(n + 1)] for k in range(m + 1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    L = [[[None]*(o + 1) for i in range(n + 1)] for i in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n    index = L[m][n][o] \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n    i = m \n    j = n \n    k = o \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] == Z[k-1]: \n            lcs[index-1] = X[i-1] \n            i-=1\n            j-=1\n            k-=1\n            index-=1\n        elif L[i-1][j][k] == L[i][j][k]: \n            i-=1\n        elif L[i][j-1][k] == L[i][j][k]: \n            j-=1\n        else: \n            k-=1\n    print (\"Longest common subsequence is \" + \"\".join(lcs)) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None]*(n+1) for i in range(m+1)] for j in range(l+1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[0 for k in range(l + 1)] for j in range(n + 1)] for i in range(m + 1)] \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            for k in range(1, l + 1): \n                if X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    index = L[m][n][l] \n    lcs = [\"\"] * (index) \n    lcs[index - 1] = Z[l - 1] \n    i = m \n    j = n \n    k = l \n    while i > 0 and j > 0 and k > 0: \n        if X[i - 1] == Y[j - 1] == Z[k - 1]: \n            lcs[index - 1] = X[i - 1] \n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]: \n            i -= 1\n        elif L[i][j - 1][k] == L[i][j][k - 1]: \n            j -= 1\n        else: \n            k -= 1\n    return \"\".join(lcs) "
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=\\S)[A-Z](?=\\S)', r' ', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_string = ''\n    for each_char in str1:\n        if each_char.isupper():\n            new_string += each_char +''\n        else:\n            new_string += each_char\n    return new_string\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r\"([A-Z][a-z]+)\", r\" \\1\", str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Write your code here\n    new_str = str1\n    new_str = new_str.replace(\".\", \" \")\n    new_str = new_str.replace(\",\", \" \")\n    new_str = new_str.replace(\";\", \" \")\n    new_str = new_str.replace(\"!\", \" \")\n    new_str = new_str.replace(\"?\", \" \")\n    new_str = new_str.replace(\"-\", \" \")\n    new_str = new_str.replace(\"\\n\", \" \")\n    new_str = new_str.replace(\"(\", \" \")\n    new_str = new_str.replace(\")\", \" \")\n    new_str = new_str.replace(\"\\\"\", \" \")\n    new_str = new_str.replace(\"\\[\", \" \")\n    new_str = new_str.replace(\"\\]\", \" \")\n    new_str = new_str.replace(\"/\", \" \")\n    new_str = new_str.replace(\"\\^\", \" \")\n    new_str = new_str.replace(\"\\&\", \" \")\n    new_str = new_str.replace(\"\\*\", \" \")\n    new_str = new_str.replace(\"\\%\", \" \")\n    new_str = new_str.replace(\"\\#\", \" \")\n    new_str = new_str.replace(\"\\@\", \" \")\n    new_str = new_str.replace(\"\\=\", \" \")\n    new_str = new_str.replace(\"\\;\", \" \")\n    new_str = new_str.replace(\"\\:\", \" \")\n    new_str = new_str.replace(\"\\{\", \" \")\n    new_str = new_str.replace(\"\\}\", \" \")\n    new_str = new_str.replace(\"\\|\", \" \")\n    new_str = new_str.replace(\"\\\\\", \" \")\n    new_str = new_str.replace(\"\\~\", \" \")\n    new_str = new_str.replace(\"\\,\", \" \")\n    new_str = new_str.replace(\"\\_\", \" \")\n    new_str = new_str.replace(\"\\+\", \" \")\n    new_str = new_str.replace(\"\\.\", \" \")\n    new_str = new_str.replace(\"\\[\", \" \")\n    new_str = new_str.replace(\"\\]\", \" \")\n    new_str = new_str.replace(\"\\!\", \" \")\n    new_str = new_str.replace(\"\\?\", \" \")\n    new_str = new_str.replace(\"\\:\", \" \")\n    new_str = new_str.replace(\"\\{\", \" \")\n    new_str = new_str.replace(\"\\}\", \" \")\n    new_str = new_str.replace(\"\\|\", \" \")\n    new_str = new_str.replace(\"\\^\", \" \")\n    new_str = new_str.replace(\"\\&\", \" \")\n    new_str = new_str.replace(\"\\*\", \" \")\n    new_str = new_str.replace(\"\\%\", \" \")\n    new_str = new_str.replace(\"\\#\", \" \")\n    new_str = new_str.replace(\"\\@\", \" \")\n    new_str = new_str.replace(\"\\=\", \" \")\n    new_str = new_str.replace(\"\\\"\", \" \")\n    new_str = new_str.replace(\"\\;\", \" \")\n    new_str = new_str.replace(\"\\:\", \" \")\n    new_str = new_str.replace(\"\\,\", \" \")\n    new_str = new_str.replace(\"\\_\", \" \")\n    new_str = new_str.replace(\"\\+\", \" \")\n    new_str = new_str.replace(\"\\.\", \" \")\n    new_str = new_str.replace(\"\\[\", \" \")\n    new_str = new_str.replace(\"\\]\", \" \")\n    new_str = new_str.replace(\"/\", \" \")\n    new_str = new_str.replace(\"\\^\", \" \")\n    new_str = new_str.replace(\"\\&\", \" \")\n    new_str = new_str.replace(\"\\*\", \" \")\n    new_str = new_str.replace(\"\\%\", \" \")\n    new_str = new_str.replace(\"\\#\", \" \")\n    new_str = new_str.replace(\"\\@\", \" \")\n    new_str = new_str.replace(\"\\=\", \" \")\n    new_str = new_str.replace(\"\\;\", \" \")\n    new_str = new_str.replace(\"\\:\", \" \")\n    new_str = new_str.replace(\"\\{\", \" \")\n    new_str = new_str.replace(\"\\}\", \" \")\n    new_str = new_str.replace(\"\\|\", \" \")\n    new_str = new_str.replace(\"\\\\\", \" \")\n    new_str = new_str.replace(\"\\~\", \" \")\n    new_str = new_str.replace(\"\\,\", \" \")\n    new_str = new_str.replace(\"\\_\", \" \")\n    new_str = new_str.replace(\"\\+\", \" \")\n    new_str = new_str.replace(\"\\.\", \" \")\n    new_str = new_str.replace(\"\\[\", \" \")\n    new_str = new_str.replace(\"\\]\", \" \")\n    new_str = new_str.replace(\"\\!\", \" \")\n    new_str = new_str.replace(\"\\?\", \" \")\n    new_str = new_str.replace(\"\\:\", \" \")\n    new_str = new_str.replace(\"\\;\", \" \")\n    new_str = new_str.replace(\"\\;\", \" \")\n    new_str = new_str.replace(\"\\:\", \" \")\n    new_str = new_str.replace(\"\\;\", \" \")\n    new_str = new_str.replace(\"\\\"\", \" \")\n    new_str = new_str.replace(\"\\,\", \" \")\n    new_str = new_str.replace(\"\\_\", \" \")\n    new_str = new_str.replace(\"\\+\", \" \")\n    new_str = new_str.replace(\"\\.\", \" \")\n    new_str = new_str.replace(\"\\[\", \" \")\n    new_str = new_str.replace(\"\\]\", \" \")\n    new_str = new_str.replace(\"/\", \" \")\n    new_str = new_str.replace(\"\\^\", \" \")\n    new_str = new_str.replace(\"\\&\", \" \")\n    new_str = new_str.replace(\"\\*\", \" \")\n    new_str = new_str.replace(\"\\%\", \" \")\n    new_str = new_str.replace(\"\\#\", \" \")\n    new_str = new_str.replace(\"\\@\", \" \")\n    new_str = new_str.replace(\"\\=\", \" \")\n    new_str = new_str.replace(\"\\;\", \" \")\n    new_str = new_str.replace(\"\\:\", \" \")\n    new_str = new_str.replace(\"\\,\", \" \")\n    new_str = new_str.replace(\"\\_\", \" \")\n    new_str = new_str.replace(\"\\+\", \" \")\n    new_str = new_str.replace(\"\\.\", \" \")\n    new_str = new_str.replace(\"\\[\", \" \")\n    new_str = new_str.replace(\"\\]\", \" \")\n    new_str = new_str.replace(\"/\", \" \")\n    new_str = new_str.replace(\"\\^\", \" \")\n    new_str = new_str.replace(\"\\&\", \" \")\n    new_str = new_str.replace(\"\\*\", \" \")\n    new_str = new_str.replace(\"\\%\", \" \")\n    new_str = new_str.replace(\"\\#\", \" \")\n    ne"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    print(str1)\n    # str1 = re.sub(r'[A-Z]',r' \\1',str1)\n    # print(str1)\n    str1 = re.sub(r'([A-Z][a-z]+)',r' \\1',str1)\n    print(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<=[a-zA-Z])[A-Z][a-z]+(?=[A-Z|a-z])')\n    return pattern.sub(' ', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # return re.sub(r'(?<=\\S)([A-Z])(?=[A-Z])', r' ', str1)\n    return re.sub(r'(?<=\\S)\\S*([A-Z])(?=\\S*)', r' ', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1=input()\n    str2=''\n    for i in str1:\n        if i.isupper():\n            str2=str2+' '+i\n        else:\n            str2=str2+i\n    print(str2)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = \"There's only one thing that I want to do\"\n    # str1 = \"If it's a samba, the lyrics should be in english.\"\n    # str1 = \"If it's a samba, the lyrics should be in english.\"\n    # str1 = \"I'm going to make really profound observations\"\n    # str1 = \"My name is Erich Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 = \"My name is Eric Lo\"\n    # str1 "
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    return re.sub(r'(?<=\\w)([A-Z])', r' \\1', str1)\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(i) if i.isdigit() else i for i in re.split(\"(\\d+)\", x)])\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    print(sorted(nums_str, key = lambda x: int(x+x[1:]) if x.isdigit() else x))\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    nums_list = list(nums_str)\n    nums_list.sort(key=lambda x: int(''.join(str(ord(c)) for c in x)))\n    return nums_list\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    try:\n        nums_str = [i for i in nums_str if i.isdigit()] # List comprehension to get only numeric strings\n        nums_str = [int(i) for i in nums_str] # List comprehension to convert strings to ints\n        nums_str.sort(key = int, reverse = False)\n        return nums_str\n    except:\n        return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    from re import sub\n    nums_str.sort(key = lambda x: (sub(\"[^0-9]\", \"\", x), x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: [int(i) if i.isdigit() else i for i in re.split('(\\d+)', x)])\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda s: int(s))\n    print(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    nums = [str(num) for num in nums]\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    print(test_list, test_tup)\n    test_list.append(test_tup)\n    print(test_list)\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return None\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #test_list.append(test_tup)\n    return test_list + [test_tup]\n    #return None\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return list(test_list) + list(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= int(n/2):\n        return True\n    left_node = arr[2*i]\n    right_node = arr[2*i+1]\n    if left_node < right_node:\n        return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    length = len(arr)\n    if i >= length:\n        return True\n    \n    left = 2*i + 1\n    right = 2*i + 2\n    \n    if left < length and arr[left] < arr[i]:\n        return False\n    if right < length and arr[right] < arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    \n    \ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) <= 0:\n        return\n    \n    if i >= len(arr):\n        return\n    \n    # print(arr)\n    # print(i)\n    check_min_heap_helper(arr, 2*i + 1)\n    check_min_heap_helper(arr, 2*i + 2)\n    \n    if i == 0:\n        return\n    \n    parent = i // 2\n    if arr[i] >= arr[parent]:\n        return\n    \n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    #check if root element is minimum among root, left and right subtree\n    #if arr[i] > arr[i * 2] or arr[i] > arr[(i * 2) + 1]:\n    #    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # HINT: Check if left child < root and right child < root\n    if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    if 2*i+1 < len(arr) and arr[i] > arr[2*i+1]:\n        return False\n    if 2*i+2 < len(arr) and arr[i] > arr[2*i+2]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if i == 1:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    #checking if the parent node is less than the child node\n    if arr[i] < arr[2*i+1] or arr[i] < arr[2*i+2]:\n        return False\n    else:\n        #if the parent node is not less than the child node, then we recursively call the function\n        if 2*i+1 < len(arr):\n            return check_min_heap_helper(arr, 2*i+1)\n        elif 2*i+2 < len(arr):\n            return check_min_heap_helper(arr, 2*i+2)\n        else:\n            return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2 and arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2]:\n        return 1\n    elif i >= len(arr) // 2 and not(arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2]):\n        return 0\n    else:\n        return check_min_heap_helper(arr, 2*i+1) or check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = arr[i]\n    right = arr[2*i+1]\n    if left < right:\n        return check_min_heap_helper(arr, 2*i+1)\n    else:\n        return check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if(n == 0):\n        return 0\n    else:\n        return 4 * (n**2) + 4 * n - 3\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_num_helper(n, a, b):\n        if n == 0:\n            return b\n        else:\n            return jacobsthal_num_helper(n-1, a, b) + jacobsthal_num_helper(n-1, a, b)\n    return jacobsthal_num_helper(n, 0, 1)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def sum_of_digits(n):\n        '''\n        Write a function to get the sum of digits of a number.\n        '''\n        return sum([int(i) for i in str(n)])\n    def is_jacobsthal(n):\n        '''\n        Write a function to check whether a number is a jacobsthal number or not.\n        '''\n        return sum_of_digits(n) == sum_of_digits(sum_of_digits(n))\n    return n*(n+1)//2\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    p = [2]\n    x = 1\n    while len(p) < n:\n        x += 1\n        if is_prime(x):\n            p.append(x)\n    return p[n-1]\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 4: \n        return 1\n    else: \n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2)) \n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    res = 1\n    num = 3\n    i = 3\n    while i <= n: \n        res = num + (num * 2)\n        num = res\n        i += 1\n    return res\n  \ndef fibonacci_num(n): \n    '''\n    Write a function to find the nth fibonacci number.  https://www.geeksforgeeks.org/fibonacci-sequence/\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    res = 0\n    num1 = 0\n    num2 = 1\n    i = 2\n    while i <= n: \n        res = num1 + num2\n        num1 = num2\n        num2 = res\n        i += 1\n    return res\n    \ndef factor_sum(n): \n    '''\n    Write a function that returns the sum of all the divisors of a number.\n    '''\n    if n == 0: \n        return 0\n    res = 0\n    i = 1\n    while i <= n: \n        if n % i == 0: \n            res += i\n        i += 1\n    return res\n    \ndef prime_factorization(n): \n    '''\n    Write a function that returns a list of prime factorization of n.\n    '''\n    if n == 0: \n        return []\n    res = []\n    i = 2\n    while i <= n: \n        if n % i == 0: \n            res.append(i)\n            n /= i\n            continue\n        i += 1\n    return res\n    \ndef prime_factorization_list(n): \n    '''\n    Write a function that returns a list of prime factorization of n.\n    '''\n    if n == 0: \n        return []\n    res = []\n    i = 2\n    while i <= n: \n        if n % i == 0: \n            n /= i\n            res.append(i)\n            continue\n        i += 1\n    return res\n    \ndef is_prime(n): \n    '''\n    Write a function that returns whether or not a number is prime.\n    '''\n    if n <= 1: \n        return False\n    i = 2\n    while i <= n: \n        if n % i == 0: \n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # jacobsthal_num = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 4561, 8657,...]\n    # while len(jacobsthal_num) < n + 1:\n    #     jacobsthal_num.append(jacobsthal_num[-1] + jacobsthal_num[-2])\n    # return jacobsthal_num[n]\n    return sum(jacobsthal_num(n))\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    j = jacobsthal_num(n//2)\n    k = jacobsthal_num(n//2 + n%2)\n    return j * (j+k)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal = [0,1]\n    for i in range(2,n):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n    return jacobsthal[n-1]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_tuple = tuple(test_list[:K])\n    #print(min_tuple)\n    for i in range(K, len(test_list)):\n        if min_tuple[1] > test_list[i][1]:\n            min_tuple = tuple([test_list[i][0], test_list[i][1]] + list(min_tuple[:K-1]))\n    return list(min_tuple)\n    \ndef n_min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def add_new(new_tuple, main_list):\n        new_list = list(new_tuple)\n        if new_tuple not in main_list:\n            main_list.append(new_tuple)\n            main_list.sort(key = lambda x : x[1])\n        return main_list\n    \n    def get_index(item):\n        return item[0]\n        \n    main_list = []\n    sorted_list = sorted(test_list, key = get_index)\n    for i in range(K):\n        min_tuple = tuple(sorted_list[i])\n        #print(min_tuple)\n        add_new(min_tuple, main_list)\n    return main_list\n    \ndef top_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_tuple = tuple(test_list[:K])\n    #print(min_tuple)\n    for i in range(K, len(test_list)):\n        if min_tuple[1] < test_list[i][1]:\n            min_tuple = tuple([test_list[i][0], test_list[i][1]] + list(min_tuple[:K-1]))\n    return list(min_tuple)\n    \ndef n_top_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def add_new(new_tuple, main_list):\n        new_list = list(new_tuple)\n        if new_tuple not in main_list:\n            main_list.append(new_tuple)\n            main_list.sort(key = lambda x : x[1], reverse = True)\n        return main_list\n    \n    def get_index(item):\n        return item[0]\n        \n    main_list = []\n    sorted_list = sorted(test_list, key = get_index, reverse = True)\n    for i in range(K):\n        max_tuple = tuple(sorted_list[i])\n        #print(min_tuple)\n        add_new(max_tuple, main_list)\n    return main_list\n    \ndef test_top_k():\n    test_list = [['a', 4], ['b', 3], ['c', 2], ['d', 1]]\n    test_list_2 = [['a', 4], ['b', 3], ['c', 2], ['d', 1], ['e', 1]]\n    test_list_3 = [['a', 4], ['b', 3], ['c', 2], ['d', 1], ['e', 1], ['f', 1]]\n    print(test_list)\n    print('----')\n    print(top_k(test_list, 3))\n    print('----')\n    print(test_list_2)\n    print('----')\n    print(top_k(test_list_2, 3))\n    print('----')\n    print(test_list_3)\n    print('----')\n    print(top_k(test_list_3, 4))\n    \ndef test_n_top_k():\n    test_list = [['a', 4], ['b', 3], ['c', 2], ['d', 1]]\n    test_list_2 = [['a', 4], ['b', 3], ['c', 2], ['d', 1], ['e', 1]]\n    test_list_3 = [['a', 4], ['b', 3], ['c', 2], ['d', 1], ['e', 1], ['f', 1]]\n    print(test_list)\n    print('----')\n    print(n_top_k(test_list, 3))\n    print('----')\n    print(test_list_2)\n    print('----')\n    print(n_top_k(test_list_2, 3))\n    print('----')\n    print(test_list_3)\n    print('----')\n    print(n_top_k(test_list_3, 4))\n    \ndef test_min_k():\n    test_list = [['a', 4], ['b', 3], ['c', 2], ['d', 1]]\n    test_list_2 = [['a', 4], ['b', 3], ['c', 2], ['d', 1], ['e', 1]]\n    test_list_3 = [['a', 4], ['b', 3], ['c', 2], ['d', 1], ['e', 1], ['f', 1]]\n    print(test_list)\n    print('----')\n    print(min_k(test_list, 3))\n    print('----')\n    print(test_list_2)\n    print('----')\n    print(min_k(test_list_2, 3))\n    print('----')\n    print(test_list_3)\n    print('----')\n    print(min_k(test_list_3, 4))\n    \ndef test_n_min_k():\n    test_list = [['a', 4], ['b', 3], ['c', 2], ['d', 1]]\n    test_list_2 = [['a', 4], ['b', 3], ['c', 2], ['d', 1], ['e', 1]]\n    test_list_3 = [['a', 4], ['b', 3], ['c', 2], ['d', 1], ['e', 1], ['f', 1]]\n    print(test_list)\n    print('----')\n    print(n_min_k(test_list, 3))\n    print('----')\n    print(test_list_2)\n    print('----')\n    print(n_min_k(test_list_2, 3))\n    print('----')\n    print(test_list_3)\n    print('----')\n    print(n_min_k(test_list_3, 4))\n    \ndef test_top_k_empty():\n    test_list = []\n    test_list_2 = []\n    test_list_3 = []\n    print(test_list)\n    print('----')\n    print(top_k(test_list, 3))\n    print('----')\n    print(test_list_2)\n    print('----')\n    print(top_k(test_list_2, 3))\n    print('----')\n    print(test_list_3)\n    print('----')\n    print(top_k(test_list_3, 4))\n    \ndef test_n_top_k_empty():\n    test_list = []\n    test_list_2 = []\n    test_list_3 = []\n    print(test_list)\n    print('----')\n    print(n_top_k(test_list, 3))\n    print('----')\n    print(test_list_2)\n    print('----')\n    print(n_top_k(test_list_2, 3))\n    print('----')\n    print(test_list_3)\n    print('----')\n    print(n_to"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp = list(zip(*test_list))\n    k = K\n    min_ = min(temp[k])\n    # print(temp)\n    return min_\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    if n==0 or K==0:\n        return None\n    # Initialize starting point as minimum\n    # ending point\n    min_idx, min_val = 0, test_list[0][0]\n    for i in range(n):\n        if min_val>test_list[i][0]:\n            min_val=test_list[i][0]\n            min_idx=i\n    min_k_list=[]\n    for j in range(K):\n        min_k_list.append(test_list[min_idx])\n        for i in range(min_idx):\n            if test_list[i][1]<test_list[min_idx][1]:\n                min_idx=i\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    l = len(test_list)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import heapq\n    min_heap = []\n    for x in test_list:\n        heapq.heappush(min_heap, x)\n        if len(min_heap) > K:\n            heapq.heappop(min_heap)\n    return [heapq.heappop(min_heap) for x in range(K)]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # dict_list = []\n    # for i, j, k, l, m in test_list:\n    #     dict_list.append({'i':i, 'j':j, 'k':k, 'l':l,'m':m})\n    # #print('dict_list: ', dict_list)\n    # final_list = sorted(dict_list, key=lambda i: i['m'], reverse=True)[:K]\n    # for i in range(0,len(final_list)):\n    #     final_list[i] = list(final_list[i].values())\n    # final_list = tuple(final_list)\n    # return final_list\n    import heapq\n    topK = []\n    for i in range(0, len(test_list)):\n        if i < K:\n            topK.append(test_list[i])\n        else:\n            if test_list[i][-1] < topK[0][-1]:\n                topK[0] = test_list[i]\n            else:\n                pass\n    return topK\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    K = K\n    n = len(test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return min(test_list, key=lambda x: x[1])[0] if len(test_list) > K else None\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[0])\n    return [i[1] for i in test_list[:K]]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in l:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # your code here\n    res = []\n    for i, item in enumerate(l1):\n        if (item in l2) and (item in l3):\n            res.append(item)\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_set = set(l1)\n    l2_set = set(l2)\n    l3_set = set(l3)\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if (l1[i] in l2) and (l1[i] in l3):\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i] and l2[i] in l3[i]:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    ret = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            ret.append(l1[i])\n    return ret\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_set = set(l1)\n    l2_set = set(l2)\n    l3_set = set(l3)\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_set = set()\n    l2_set = set()\n    l3_set = set()\n    \n    l1_set.update(l1)\n    l2_set.update(l2)\n    l3_set.update(l3)\n    \n    res_list = list(l1_set.intersection(l2_set, l3_set))\n    return res_list\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return(min(numbers))\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list first\n    numbers.sort()\n    return numbers[1]\n    \ndef second_largest(numbers):\n    '''\n    Write a function to find the second largest number in a list.\n    '''\n    # sort the list in reverse order\n    numbers.sort(reverse=True)\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    m = min(numbers)\n    numbers.remove(m)\n    return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #numbers.sort()\n    #return numbers[1]\n    \n    #set_numbers = list(set(numbers))\n    #set_numbers.sort()\n    \n    #return set_numbers[1]\n    \n    set_numbers = sorted(list(set(numbers)))\n    \n    if len(set_numbers) < 2:\n        return \"There is not enough numbers to find the second smallest one.\"\n    \n    return set_numbers[1]\n    \nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert second_smallest([1, 2, 3, 4, 5]) == 3, \"Example\"\n    assert second_smallest([1, 1, 1, 0, 0, 0, 0]) == 1, \"All same\"\n    assert second_smallest([7, 7, 7, 7, 7, 7, 7]) == 7, \"All same2\"\n    assert second_smallest([1, 2, 4, 5]) == 4, \"Four is smallest\"\n    assert second_smallest([1, 1, 5, 5, 5, 6, 6]) == 5, \"Second smallest\"\n    assert second_smallest([1]) == \"There is not enough numbers to find the second smallest one.\"\n    \n    print('Done! Go Check!'"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sort = sorted(numbers)\n    # print(sort)\n    return sort[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n    \ndef second_smallest_numpy(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = np.array(numbers)\n    numbers = np.sort(numbers)\n    return numbers[1]\n    \ndef second_largest(numbers):\n    '''\n    Write a function to find the second largest number in a list.\n    '''\n    numbers.sort()\n    return numbers[-2]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    a = numbers[0]\n    b = numbers[1]\n    for i in numbers:\n        if i > a:\n            a = i\n    for j in numbers:\n        if j < a and j > b:\n            b = j\n    return b\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(\"a+b*\")\n    if pattern.match(text):\n        return \"Match\"\n    else:\n        return \"Not a Match\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return 'found match'\n    else:\n        return 'not matched'\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.b*')\n    if pattern.search(text):\n        return 'Match'\n    else:\n        return 'No Match'\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # text = input(\"enter your string: \")\n    if re.search(r'a\\b', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a.*b\"\n    result = re.match(pattern, text)\n    if result:\n        return \"Found a match!\"\n    else:\n        return \"No match was found!\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.finditer(r'a\\s*b*', text, re.MULTILINE)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"ab+\"\n    result = re.findall(pattern, text)\n    return len(result)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a\\b')\n    result = pattern.findall(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"ab*\"\n    if re.search(pattern, text):\n        return \"Match!\"\n    else:\n        return \"No match!\"\n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"ab+\"\n    if re.search(pattern, text):\n        return \"Match!\"\n    else:\n        return \"No match!\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*?')\n    if pattern.search(text):\n        return \"Found a match\"\n    else:\n        return \"Not matched\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return len([i for i in test_list if i[::-1] in test_list])\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # test_list = ['bc', 'ba', 'cb']\n    reverse_count = 0\n    for index, item in enumerate(test_list):\n        if item[::-1] in test_list:\n            reverse_count += 1\n    return reverse_count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total_pairs = 0\n    for element in test_list:\n        reverse_element = element[::-1]\n        if reverse_element in test_list:\n            total_pairs += 1\n    return total_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    d = {}\n    for item in test_list:\n        if item[::-1] in d:\n            d[item[::-1]] += 1\n        else:\n            d[item[::-1]] = 1\n    return d\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    d = {}\n    for i in test_list:\n        if i[::-1] in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    # print(d)\n    return sum(k * (k-1) // 2 for k in d.values())\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    import collections\n    count = collections.defaultdict(int)\n    for s in test_list:\n        rev_str = s[::-1]\n        count[rev_str] += 1\n    return sum([i * (i - 1) / 2 for i in count.values()])\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) == 1:\n        return 0\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # count = 0\n    # for i in range(0, len(test_list)):\n    #     for j in range(i + 1, len(test_list)):\n    #         if test_list[i][::-1] == test_list[j][::-1]:\n    #             count += 1\n    # return count\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def count_sublists(list1):\n        count = {}\n        for x in list1:\n            if tuple(x) in count:\n                count[tuple(x)] += 1\n            else:\n                count[tuple(x)] = 1\n        return count\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # your code here\n    return None\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if type(list1)!= list:\n        return \"Invalid input\"\n    if len(list1) < 1:\n        return \"Invalid input\"\n    if len(list1) == 1:\n        return {(tuple(list1),):1}\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # for i in range(len(list1)):\n    #     list1[i] = tuple(list1[i])\n    return {tuple(i):list1.count(i) for i in list1}\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    set_list = set()\n    list_count = {}\n    for element in list1:\n        if tuple(element) in set_list:\n            list_count[tuple(element)] += 1\n        else:\n            list_count[tuple(element)] = 1\n            set_list.add(tuple(element))\n    return list_count\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for sublist in list1:\n        try:\n            if dict1[tuple(sublist)]:\n                dict1[tuple(sublist)] += 1\n        except KeyError:\n            dict1[tuple(sublist)] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for i in list1:\n        if type(i) == list:\n            dic[tuple(i)] = list1.count(i)\n    return dic\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = [tuple(lst) for lst in list1]\n    list2 = set(list2)\n    list2 = list(list2)\n    d = {}\n    for i in list2:\n        d[i] = list1.count(i)\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        dict1[sublist] = dict1.get(sublist,0) + 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = 0\n    for sublist in list1:\n        for element in sublist:\n            count += 1\n    new_list = []\n    for sublist in list1:\n        new_list.append(tuple(sublist))\n    dictionary = dict(zip(new_list, [count] * len(new_list)))\n    return dictionary\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if isinstance(num, int):\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if round(float(num), 2) == float(num):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isdecimal():\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        return False\n    num = num.replace('.','')\n    if not num.isdecimal():\n        return False\n    if num.startswith('0') and len(num) > 1:\n        return False\n    if len(num) == 1:\n        return False\n    if num[-1]!= '0':\n        return False\n    if num[-2] == '.':\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except:\n        return False\n    return float(num) == int(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_len = len(num)\n    if num_len == 0:\n        return False\n    elif num_len < 3 or num_len > 3:\n        return False\n    else:\n        #check the number is valid or not\n        if not (num[0] == '-' or num[0] == '+'):\n            return False\n        elif num[0] == '-' and num_len == 1:\n            return False\n        elif num[0] == '-' and num_len > 1 and num[1]!= '.':\n            return False\n        elif num[0] == '+' and num_len == 1:\n            return False\n        elif num[0] == '+' and num_len > 1 and num[1]!= '.':\n            return False\n        else:\n            pass\n        \n        if num[0] == '-' and num_len == 1:\n            num_len = num_len + 1\n        elif num[0] == '+' and num_len == 1:\n            num_len = num_len + 1\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num[0] == '-' and num[1:].isdecimal() or num.isdecimal() and num[0]!= '-' or '.' in num:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_list = []\n    for num in arr:\n        if num not in unique_list:\n            unique_list.append(num)\n    if len(unique_list) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    num = [item for item in arr]\n    unique_list = list(set(num))\n    if len(unique_list) == 1:\n        print(\"The given list contains only one distinct element\")\n    else:\n        print(\"The given list contains more than one distinct element\")\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    hash_table = {}\n    for i in arr:\n        if hash_table.get(i):\n            return False\n        else:\n            hash_table[i] = 1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in set(arr):\n        if arr.count(i) == 1:\n            return i\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr))==1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for n in arr:\n        if n in seen:\n            return False\n        seen.add(n)\n    return True\n    \nprint(unique_Element([1, 2, 3, 3, 3, 5]))\nprint(unique_Element([1, 2, 3, 5]))\nprint(unique_Element([1, 2, 3, 4, 5, 6, 6]))\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return 30\n    elif monthnum3 == 2:\n        return 28\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return 31\n    else:\n        return -1\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 12 and monthnum3 >= 1:\n        if monthnum3 == 2:\n            return 29\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return 30\n        else:\n            return 31\n    else:\n        return 'Invalid Input'\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return \"February has 28 or 29 days.\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"There are 30 days in given month number.\"\n    else:\n        return \"There are 31 days in given month number.\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if monthnum3 in (1, 3, 5, 7, 8, 10, 12):\n        return \"Yes\"\n    elif monthnum3 in (4, 6, 9, 11):\n        return \"No\"\n    else:\n        return \"Not a valid month\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        return \"The month has 30 days.\"\n    elif monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11:\n        return \"The month has 31 days.\"\n    else:\n        return \"Invalid month number.\"\nprint(check_monthnumber_number(int(input(\"Enter a number: \"))))\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return 'Month has 30 days'\n    if monthnum3 == 2:\n        return 'Month has 28 days'\n    if monthnum3 == 3:\n        return 'Month has 31 days'\n    if monthnum3 == 4:\n        return 'Month has 30 days'\n    if monthnum3 == 5:\n        return 'Month has 31 days'\n    if monthnum3 == 6:\n        return 'Month has 30 days'\n    if monthnum3 == 7:\n        return 'Month has 31 days'\n    if monthnum3 == 8:\n        return 'Month has 31 days'\n    if monthnum3 == 9:\n        return 'Month has 30 days'\n    if monthnum3 == 10:\n        return 'Month has 31 days'\n    if monthnum3 == 11:\n        return 'Month has 30 days'\n    if monthnum3 == 12:\n        return 'Month has 31 days'\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        print(\"30\")\n    elif monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11:\n        print(\"30\")\n    else:\n        print(\"31\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==2:\n        return(\"the month number has 30 days\")\n    elif monthnum3 in [4,6,9,11]:\n        return(\"the month number has 30 days\")\n    elif monthnum3 in [1,3,5,7,8,10,12]:\n        return(\"the month number has 31 days\")\n    else:\n        return(\"invalid month number\")\ndef check_monthnumber_leapyear(monthnum4):\n    '''\n    Write a function to check whether the given month number is in leap year or not. Leap year is year which can be divided by 4 and 400.\n    '''\n    if monthnum4==2:\n        return(\"the month number is leap year\")\n    elif monthnum4 in [4,6,9,11]:\n        return(\"the month number is leap year\")\n    elif monthnum4 in [1,3,5,7,8,10,12]:\n        return(\"the month number is not leap year\")\n    else:\n        return(\"invalid month number\")\ndef check_daynumber_number(daynum5):\n    '''\n    Write a function to check whether the given day number is valid or not. Check if the given number is between 1 to 31.\n    '''\n    if daynum5<1 or daynum5>31:\n        return(\"invalid day number\")\n    else:\n        return(\"valid day number\")\ndef check_daynumber_month(daynum6):\n    '''\n    Write a function to check whether the given day number is valid or not. Check if the given number is between 1 to 31.\n    '''\n    if daynum6<1 or daynum6>calendar.monthrange(date.today().year,date.today().month)[1]:\n        return(\"invalid day number\")\n    else:\n        return(\"valid day number\")\ndef check_daynumber_leapyear(daynum7):\n    '''\n    Write a function to check whether the given day number is valid or not. Check if the given number is between 1 to 366.\n    '''\n    if daynum7<1 or daynum7>366:\n        return(\"invalid day number\")\n    else:\n        return(\"valid day number\")\ndef check_date(date8):\n    '''\n    Write a function to check whether the given date is valid or not. It should return a tuple that contains three values: year, month, day in the date.\n    '''\n    checklist = date8.split(\"/\")\n    year = checklist[0]\n    month = checklist[1]\n    day = checklist[2]\n    if month not in month_list:\n        return(\"invalid month\")\n    elif day not in day_list:\n        return(\"invalid day\")\n    elif year not in year_list:\n        return(\"invalid year\")\n    else:\n        return(year,month,day)\ndef check_date_leapyear(date9):\n    '''\n    Write a function to check whether the given date is valid or not. It should return a tuple that contains three values: year, month, day in the date.\n    '''\n    checklist = date9.split(\"/\")\n    year = checklist[0]\n    month = checklist[1]\n    day = checklist[2]\n    if month not in month_list_leap:\n        return(\"invalid month\")\n    elif day not in day_list_leap:\n        return(\"invalid day\")\n    elif year not in year_list_leap:\n        return(\"invalid year\")\n    else:\n        return(year,month,day)\ndef check_date_number(date10):\n    '''\n    Write a function to check whether the given date is valid or not. It should return a tuple that contains three values: year, month, day in the date.\n    '''\n    checklist = date10.split(\"-\")\n    year = checklist[0]\n    month = checklist[1]\n    day = checklist[2]\n    if month not in month_list:\n        return(\"invalid month\")\n    elif day not in day_list:\n        return(\"invalid day\")\n    elif year not in year_list:\n        return(\"invalid year\")\n    else:\n        return(year,month,day)\ndef check_date_month(date11):\n    '''\n    Write a function to check whether the given date is valid or not. It should return a tuple that contains three values: year, month, day in the date.\n    '''\n    checklist = date11.split(\"-\")\n    year = checklist[0]\n    month = checklist[1]\n    day = checklist[2]\n    if month not in month_list:\n        return(\"invalid month\")\n    elif day not in day_list:\n        return(\"invalid day\")\n    elif year not in year_list:\n        return(\"invalid year\")\n    else:\n        return(year,month,day)\ndef check_date_number(date12):\n    '''\n    Write a function to check whether the given date is valid or not. It should return a tuple that contains three values: year, month, day in the date.\n    '''\n    checklist = date12.split(\"/\")\n    year = checklist[0]\n    month = checklist[1]\n    day = checklist[2]\n    if month not in month_list:\n        return(\"invalid month\")\n    elif day not in day_list:\n        return(\"invalid day\")\n    elif year not in year_list:\n        return(\"invalid year\")\n    else:\n        return(year,month,day)\ndef check_date_leapyear(date13):\n    '''\n    Write a function to check whether the given date is valid or not. It should return a tuple that contains three values: year, month, day in the date.\n    '''\n    checklist = date13.split(\"-\")\n    year = checklist[0]\n    month = checklist[1]\n    day = checklist[2]\n    if month not in month_list_leap:\n        return(\"invalid month\")\n    elif day not in day_list_leap:\n        return(\"invalid day\")\n    elif year not in year_list_leap:\n        return(\"invalid year\")\n    else:\n        return(year,month,day)\ndef check_time(time14):\n    '''\n    Write a function to check whether the given time is valid or not. It should return a tuple that contains three values: hour, minute, second in the time.\n    '''\n    checklist = time14.split(\":\")\n    hour = checklist[0]\n    minute = checklist[1]\n    second = checklist[2]\n    if hour not in time_list:\n        return(\"invalid hour\")\n    elif minute not in time_list:\n        return(\"invalid minute\")\n    elif second not in time_list:\n        return(\"invalid second\")\n    else:\n        return(hour,minute,second)\ndef check_time_number(time15):\n    '''\n    Write a function to check whether the given time is valid or not. It should return a tuple that contains three values: hour, minute, second in the time.\n    '''\n    checklist = time15.split(\":\")\n    hour = checklist[0]\n    minute = checklist[1]\n    second = checklist[2]\n    if hour not in time_list:\n        return(\"invalid hour\")\n    elif minute not in time_list:\n        return(\"invalid minute\")\n    elif second not in time_list:\n        return(\"invalid second\")\n    else:\n        return(hour,minute,second)\ndef check_time_leapyear(time16):\n    '''\n    Write a function to check whether the given time is valid or not. It should return a tuple that contains three values: hour, minute, second in the time.\n    '''\n    checklist = time16.split(\":\")\n    hour = checklist[0]\n    minute = checklist[1]\n    second = checklist[2]\n    if hour not in time_list_leap:\n        return(\"invalid hour\")\n    elif minute not in time_list_leap:\n        return(\"invalid minute\")\n    elif second not in time_list_leap:\n        return(\"invalid second\")\n    else:\n        return(hour,minute,second)\ndef check_time_number(time1"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_number = str(monthnum3)\n    if month_number == \"12\":\n        return \"The month has 31 days.\"\n    elif month_number == \"1\" or month_number == \"3\" or month_number == \"5\" or month_number == \"7\" or month_number == \"8\" or month_number == \"10\" or month_number == \"12\":\n        return \"The month has 31 days.\"\n    elif month_number == \"4\" or month_number == \"6\" or month_number == \"9\" or month_number == \"11\":\n        return \"The month has 30 days.\"\n    else:\n        return \"The month number is invalid.\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    print(arr)\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        if (arr[i+1] - arr[i] < min_diff):\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff=arr[1]-arr[0]\n    for i in range(1,n):\n        diff=arr[i]-arr[i-1]\n        if(diff<min_diff):\n            min_diff=diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    sorted_arr = sorted(arr) \n    min_diff = sorted_arr[1] - sorted_arr[0] \n    for i in range(1, n): \n        if(sorted_arr[i] - sorted_arr[i - 1] < min_diff): \n            min_diff = sorted_arr[i] - sorted_arr[i - 1] \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return 0\n    arr.sort()\n    ans = 10**9\n    for i in range(n-1):\n        ans = min(ans, arr[i+1]-arr[i])\n    return ans\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    min_diff = arr[1] - arr[0] \n    for i in range(n-1): \n        if (arr[i + 1] - arr[i] < min_diff): \n            min_diff = arr[i + 1] - arr[i] \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        if min_diff > arr[i+1] - arr[i]:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    minimum_diff = arr[1] - arr[0]\n    # Check for minimum difference between 2 and length-1 elements\n    for i in range(0,n-1):\n        if(arr[i+1] - arr[i] < minimum_diff):\n            minimum_diff = arr[i+1] - arr[i]\n    # Check for minimum difference between the largest and smallest elements\n    if(abs(arr[n-1] - arr[0]) < minimum_diff):\n        minimum_diff = abs(arr[n-1] - arr[0])\n    return minimum_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    min_diff = arr[1] - arr[0] \n    for i in range(1, n): \n        if (arr[i] - arr[i - 1] < min_diff): \n            min_diff = arr[i] - arr[i - 1] \n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = arr[1]-arr[0]\n    for i in range(0,n-1):\n        if arr[i+1]-arr[i]<diff:\n            diff = arr[i+1]-arr[i]\n    print(\"Minimum difference is: \",diff)\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n-1):\n        if arr[i+1]-arr[i] < min_diff:\n            min_diff = arr[i+1]-arr[i]\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit()==True:\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for c in str:\n        if c.isdigit():\n            ctr = ctr + 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit_count = 0\n    for i in str:\n        if i.isdigit():\n            digit_count += 1\n    return digit_count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for char in str:\n        if char.isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for c in str:\n        if c.isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # code here\n    n1=0\n    n2=0\n    temp=1\n    if n==1:\n        return 0\n    else:\n        for i in range(1,n+1):\n            if n%i==0:\n                n1=n1+1\n        for i in range(1,n+1):\n            if i*i<=n:\n                n2=n2+1\n        if n1==n2:\n            return 1\n        else:\n            while n>temp:\n                temp=temp+1\n                if is_polite(temp)==True:\n                    print(temp)\n                    return True\n            return False\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #n=7\n    #polite number is the number whose decimal representation has no zeros\n    #eg: 13, 27, 511, \n    #2, 3, 5, 7\n    #2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511\n    #x=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]\n    #polite=[2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 31"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # define variables \n    i = 1\n    j = 0\n    # define the number of terms required \n    nthTerm = n \n    # break loop if nthTerm becomes 0 \n    while nthTerm!= 0: \n        # find the sum of divisors \n        k = sum_divisors(i) \n        # update i and j \n        j += 1\n        # if nth term is not even \n        if j % 2!= 0: \n            # increment i by 1 \n            i += 1\n        # if k is equal to n \n        elif k == nthTerm: \n            # return i \n            return i \n        # increment i by 1 \n        i += 1\n        # decrement nthTerm by 1 \n        nthTerm -= 1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #Base case:\n    if n == 1: \n        return 1\n    #Recursive Case:\n    elif n % 2 == 0: \n        return int((n / 2) ** 2)\n    else: \n        return int((3 * n) + 1)\n    \ndef reverse(s): \n    '''\n    Write a function to reverse a string. geeksforgeeks.org/reverse-a-string-in-python/\n    '''\n    return s[::-1] \n    \ndef is_palindrome(n): \n    '''\n    Write a function to check whether a number is palindrome or not. geeksforgeeks.org/check-whether-a-number-is-palindrome-or-not/\n    '''\n    return str(n) == reverse(str(n)) \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite_helper(n, num):\n        if num == 1:\n            return n\n        return is_polite_helper(n+1, num*2)\n    return is_polite_helper(1, n)\n    \n    \n    \ndef get_ceil(n): \n    '''\n    Write a function to return the ceiling of n, i.e. the smallest integer greater than or equal to n. geeksforgeeks.org/ceil-function/\n    '''\n    return int(math.ceil(n))\n    \n    \ndef get_floor(n): \n    '''\n    Write a function to return the floor of n, i.e. the largest integer less than or equal to n. geeksforgeeks.org/floor-function/\n    '''\n    return int(math.floor(n))\n    \ndef is_divisible(n): \n    '''\n    Write a function to check if the given number is divisible by 3 or 5. geeksforgeeks.org/check-if-n-is-divisible-by-3-or-5/\n    '''\n    return (n%3==0 or n%5==0)\n    \ndef get_factorial(n): \n    '''\n    Write a function to return the factorial of n. geeksforgeeks.org/factorial-of-n/\n    '''\n    if n==1:\n        return 1\n    return n*get_factorial(n-1)\n    \ndef get_factorial_rec(n): \n    '''\n    Write a function to return the factorial of n using recursion. geeksforgeeks.org/factorial-of-n/\n    '''\n    if n<=1:\n        return 1\n    return n*get_factorial_rec(n-1)\n    \ndef get_fibonacci(n): \n    '''\n    Write a function to return nth fibonacci number. geeksforgeeks.org/fibonacci-sequence/\n    '''\n    return get_fibonacci_helper(1, n)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #The 3-rd polite number is 2 - 1 = 1\n    if n == 1: \n        return 1\n    #The 2-nd polite number is 3 - 2 = 1\n    if n == 2: \n        return 2\n    return is_polite(n - 1) + is_polite(n - 2)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polites = [2,3,5,7]\n    if n < 1: \n        return 0\n    if n > 30: \n        return -1\n    elif n < len(polites): \n        return n \n    else: \n        if n%10 == 0: \n            return n \n        else: \n            return polites[math.ceil(n/10)-1]\n        \ndef is_polite_num(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polites = [2,3,5,7]\n    if n < 1: \n        return 0\n    elif n > 30: \n        return -1\n    else: \n        return polites[n%10]\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0: \n        return 0\n    elif n == 1: \n        return 2 \n    else: \n        #l=[0,1,2]\n        l=[]\n        if n%2==0:\n            l.append(2)\n        for i in range(3,int(math.sqrt(n))+1):\n            if(n%i==0):\n                if is_polite(n/i)==1:\n                    l.append(i)\n        if(len(l)>0):\n            return 1\n        else:\n            return 0\n    \ndef no_of_polite(n): \n    '''\n    Write a function to find number of polite numbers. geeksforgeeks.org/number-of-polite-numbers/\n    '''\n    if n < 0: \n        return 0\n    elif n == 1: \n        return 1 \n    else: \n        #l=[0,1,2]\n        l=[]\n        if n%2==0:\n            l.append(2)\n        for i in range(3,int(math.sqrt(n))+1):\n            if(n%i==0):\n                if is_polite(n/i)==1:\n                    l.append(i)\n        if(len(l)>0):\n            return len(l)+1\n        else:\n            return 1\n    \ndef no_of_polite_1(n): \n    '''\n    Write a function to find number of polite numbers. geeksforgeeks.org/number-of-polite-numbers/\n    '''\n    if n < 0: \n        return 0\n    elif n == 1: \n        return 1 \n    else: \n        #l=[0,1,2]\n        l=[]\n        if n%2==0:\n            l.append(2)\n        for i in range(3,int(math.sqrt(n))+1):\n            if(n%i==0):\n                if is_polite(n/i)==1:\n                    l.append(i)\n        if(len(l)>0):\n            return len(l)+1\n        else:\n            return 1\n    \ndef no_of_polite_2(n): \n    '''\n    Write a function to find number of polite numbers. geeksforgeeks.org/number-of-polite-numbers/\n    '''\n    if n < 0: \n        return 0\n    elif n == 1: \n        return 1 \n    else: \n        #l=[0,1,2]\n        l=[]\n        if n%2==0:\n            l.append(2)\n        for i in range(3,int(math.sqrt(n))+1):\n            if(n%i==0):\n                if is_polite(n/i)==1:\n                    l.append(i)\n        if(len(l)>0):\n            return len(l)+1\n        else:\n            return 1\n    \ndef no_of_polite_3(n): \n    '''\n    Write a function to find number of polite numbers. geeksforgeeks.org/number-of-polite-numbers/\n    '''\n    if n < 0: \n        return 0\n    elif n == 1: \n        return 1 \n    else: \n        #l=[0,1,2]\n        l=[]\n        if n%2==0:\n            l.append(2)\n        for i in range(3,int(math.sqrt(n))+1):\n            if(n%i==0):\n                if is_polite(n/i)==1:\n                    l.append(i)\n        if(len(l)>0):\n            return len(l)+1\n        else:\n            return 1\n        \ndef no_of_polite_4(n): \n    '''\n    Write a function to find number of polite numbers. geeksforgeeks.org/number-of-polite-numbers/\n    '''\n    if n < 0: \n        return 0\n    elif n == 1: \n        return 1 \n    else: \n        #l=[0,1,2]\n        l=[]\n        if n%2==0:\n            l.append(2)\n        for i in range(3,int(math.sqrt(n))+1):\n            if(n%i==0):\n                if is_polite(n/i)==1:\n                    l.append(i)\n        if(len(l)>0):\n            return len(l)+1\n        else:\n            return 1\n        \ndef no_of_polite_5(n): \n    '''\n    Write a function to find number of polite numbers. geeksforgeeks.org/number-of-polite-numbers/\n    '''\n    if n < 0: \n        return 0\n    elif n == 1: \n        return 1 \n    else: \n        #l=[0,1,2]\n        l=[]\n        if n%2==0:\n            l.append(2)\n        for i in range(3,int(math.sqrt(n))+1):\n            if(n%i==0):\n                if is_polite(n/i)==1:\n                    l.append(i)\n        if(len(l)>0):\n            return len(l)+1\n        else:\n            return 1\n        \ndef no_of_polite_6(n): \n    '''\n    Write a function to find number of polite numbers. geeksforgeeks.org/number-of-polite-numbers/\n    '''\n    if n < 0: \n        return 0\n    elif n == 1: \n        return 1 \n    else: \n        #l=[0,1,2]\n        l=[]\n        if n%2==0:\n            l.append(2)\n        for i in range(3,int(math.sqrt(n))+1):\n            if(n%i==0):\n                if is_polite(n/i)==1:\n                    l.append(i)\n        if(len(l)>0):\n            return len(l)+1\n        else:\n            return 1\n        \ndef no_of_polite_7(n): \n    '''\n    Write a function to find number of polite numbers. geeksforgeeks.org/number-of-polite-numbers/\n    '''\n    if n < 0: \n        return 0\n    elif n == 1: \n        return 1 \n    else: \n        #l=[0,1,2]\n        l=[]\n        if n%2==0:\n            l.append(2)\n        for i in range(3,int(math.sqrt(n))+1):\n            if(n%i==0):\n                if is_polite(n/i)==1:\n                    l.append(i)\n        if(len(l)>0):\n            return len(l)+1\n        else:\n            return 1\n        \ndef no_of_polite_8(n): \n    '''\n    Write a function to find number of polite numbers. geeksforgeeks.org/number-of-polite-numbers/\n    '''\n    if n < 0: \n        return 0\n    elif n == 1: \n        return 1 \n    else: \n        #l=[0,1,2]\n        l=[]\n        if n%2==0:\n            l.append(2)\n        for i in range(3,int(math.sqrt(n))+1):\n            if(n%i==0):\n                if is_polite(n/i)==1:\n                    l.append(i)\n        if(len(l)>0):\n            return len(l)+1\n        else:\n            return 1\n        \ndef no_of_polite_9(n): \n    '''\n    Write a function to find number of polite numbers. geeksforgeeks.org/number-of-polite-numbers/\n    '''\n    if n < 0: \n        return 0\n    elif n == 1: \n        return "
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0 \n    nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    i = 1 \n    while True: \n        count += 1 \n        i = 10 * i + 1 \n        if i > 9999: \n            break \n        nums.append(i)\n    \n    return nums[n - 1]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i = 0\n    pair_list = []\n    for item in l1:\n        if i < len(l1)-1:\n            pair_list.append((item,l1[i+1]))\n        i += 1\n    return pair_list\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    p = []\n    for i in range(len(l1)-1):\n        if l1[i] == l1[i+1] - 1:\n            p.append([l1[i],l1[i+1]])\n    return p\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # My Solution\n    # def pair_wise(l):\n    #     result = []\n    #     for i in range(0, len(l)-1):\n    #         result.append((l[i], l[i+1]))\n    #     return result\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        if i % 2 == 0:\n            l2.append([l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        l.append((l1[i],l1[i+1]))\n    return l\n    \n    \ndef cartesian_product(l1,l2):\n    '''\n    Write a function to compute the cartesian product of two lists.\n    '''\n    l = []\n    for i in l1:\n        for j in l2:\n            l.append(tuple([i,j]))\n    return l\n    \n    \ndef pattern(x):\n    '''\n    Write a function to generate the following pattern.\n    '''\n    l = []\n    for i in range(1,x+1):\n        l.append(('*'*i))\n    return l\n    \n    \ndef is_perfect(x):\n    '''\n    Write a function to determine if a given number is perfect. A number n is perfect if the sum of its divisors is exactly equal to n.\n    '''\n    l = []\n    for i in range(1,x+1):\n        if x % i == 0:\n            l.append(i)\n    s = sum(l)\n    if s == x:\n        return True\n    return False\n    \n    \ndef is_permutation(s1,s2):\n    '''\n    Write a function to check whether two given strings are permutations of each other or not.\n    '''\n    l = list(s1)\n    l.sort()\n    if s2 == ''.join(l):\n        return True\n    else:\n        return False\n        \n        \ndef is_palindrome(s1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    l = list(s1)\n    if l == l[::-1]:\n        return True\n    else:\n        return False\n        \n        \ndef to_decimal(b,n):\n    '''\n    Write a function to convert a given binary string into its decimal equivalent.\n    '''\n    l = list(b)\n    s = 0\n    for i in range(len(l)):\n        s += int(l[i])*(2**(len(l)-i-1))\n    return s\n    \n    \ndef to_binary(d,n):\n    '''\n    Write a function to convert a given decimal number into its binary equivalent.\n    '''\n    l = []\n    s = str(d)\n    for i in range(len(s)):\n        l.append(s[i])\n    while n:\n        l.insert(0,int(l[0]))\n        l.pop()\n        n -= 1\n    return ''.join([str(x) for x in l])\n    \n    \ndef number_of_numbers(s,n):\n    '''\n    Write a function to generate all possible numbers from a given string, which are divisible by 5.\n    '''\n    l = []\n    for i in range(1,n+1):\n        s1 = ''.join([str(i) for i in range(1,n+1)])\n        if i % 5 == 0:\n            if s in s1:\n                l.append(i)\n    return l\n    \n    \ndef divisible_by_5(s):\n    '''\n    Write a function to print all the numbers divisible by 5 from a given string.\n    '''\n    l = []\n    for i in range(1,len(s)+1):\n        s1 = ''.join([str(i) for i in range(1,len(s)+1)])\n        if s in s1:\n            l.append(i)\n    return l\n    \n    \ndef reverse(s):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return s[::-1]\n    \n    \ndef factorial(x):\n    '''\n    Write a function to compute the factorial of a given number.\n    '''\n    s = 1\n    for i in range(1,x+1):\n        s *= i\n    return s\n    \n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse a given string without using built-in functions.\n    '''\n    l = list(s)\n    l.reverse()\n    return ''.join([str(x) for x in l])\n    \n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove all vowels from a given string.\n    '''\n    v = ['a','e','i','o','u']\n    l = list(s)\n    for i in range(len(l)):\n        if l[i] in v:\n            l[i] = ''\n    return ''.join([str(x) for x in l])\n    \n    \ndef is_rotation(s1,s2):\n    '''\n    Write a function to check whether two given strings are rotations of each other or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s2 = s2*2\n    for i in range(len(s1)):\n        if s1 == s2[i:i+len(s1)]:\n            return True\n    return False\n    \n    \ndef smallest_number(l):\n    '''\n    Write a function to find the smallest number in a given list.\n    '''\n    l1 = []\n    for i in range(len(l)):\n        l1.append(min(l))\n        l.remove(min(l))\n    return l1\n    \n    \ndef largest_number(l):\n    '''\n    Write a function to find the largest number in a given list.\n    '''\n    l1 = []\n    for i in range(len(l)):\n        l1.append(max(l))\n        l.remove(max(l))\n    return l1\n    \n    \ndef prime_factors(n):\n    '''\n    Write a function to find the prime factors of a given number.\n    '''\n    l = []\n    for i in range(2,n+1):\n        while n % i == 0:\n            l.append(i)\n            n /= i\n    return l\n    \n    \ndef palindrome_prime_factors(n):\n    '''\n    Write a function to find the prime factors of a given number, and the palindrome prime factors of this number.\n    '''\n    l = []\n    for i in range(2,n+1):\n        while n % i == 0:\n            l.append(i)\n            n /= i\n    l1 = []\n    for i in l:\n        if is_palindrome(str(i)) and i!= 1:\n            l1.append(i)\n    return l1\n    \n    \ndef circular_prime_factors(n):\n    '''\n    Write a function to find the prime factors of a given number, and the circular prime factors of this number.\n    '''\n    l = []\n    for i in range(2,n+1):\n        while n % i == 0:\n            l.append(i)\n            n /= i\n    l1 = []\n    for i in l:\n        if is_circular(i):\n            l1.append(i)\n    return l1\n    \n    \ndef smallest_divisor(n):\n    '''\n    Write a function to find the smallest divisor of a given number.\n    '''\n    for i in range(2,n+1):\n        if n % i == 0:\n            return i\n    \n    \ndef is_circular(n):\n    '''\n    Write a function to check whether a given number is circular or not.\n    '''\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    return False\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef prime_factors_with_multiplicity(n):\n    '''\n    Write a function to find the prime factors o"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    output=[]\n    for i in range(len(l1)):\n        if i<len(l1)-1:\n            output.append((l1[i],l1[i+1]))\n    return output\ndef slice_list(l1):\n    '''\n    Write a function that slices a given list from the 4th element from the end\n    until the 5th element from the end.\n    '''\n    return l1[4:-5]\ndef sorted(l1):\n    '''\n    Write a function that takes a list of integers as input and returns a list of the\n    same integers in increasing order.\n    '''\n    return sorted(l1)\ndef string_to_list(s1):\n    '''\n    Write a function that takes a string as input and returns a list with each character\n    as an element.\n    '''\n    return list(s1)\ndef get_item(l1):\n    '''\n    Write a function that takes a list of elements of the same type as the parameter and\n    returns the first element of the list.\n    '''\n    return l1[0]\ndef remove_item(l1):\n    '''\n    Write a function that takes a list of integers as input and returns the list with the\n    first and last items removed.\n    '''\n    return l1[1:-1]\ndef replace_item(l1):\n    '''\n    Write a function that takes a list of integers as input and returns the list with the\n    first element of the list replaced with a new list containing the last two elements of the\n    original list.\n    '''\n    return [l1[1],l1[2]]\ndef check_odd_even(l1):\n    '''\n    Write a function that takes a list of integers as input and returns a list of the same\n    integers where every even index element is replaced with the string 'even' and every odd\n    index element is replaced with the string 'odd'.\n    '''\n    return ['odd' if num%2!=0 else 'even' for num in l1]\ndef count_words(s1):\n    '''\n    Write a function that takes a string as input and returns a dictionary with the keys as\n    the unique words in the string and the values as the count of those unique words in the\n    string.\n    '''\n    return {word: s1.count(word) for word in set(s1.split())}\ndef unique_words(s1):\n    '''\n    Write a function that takes a string as input and returns the number of unique words in\n    the string.\n    '''\n    return len(set(s1.split()))\ndef is_palindrome(s1):\n    '''\n    Write a function that takes a string as input and returns True if the string is a palindrome,\n    False otherwise.\n    '''\n    return s1[::-1].casefold()==s1.casefold()\ndef reverse_string(s1):\n    '''\n    Write a function that takes a string as input and returns a string in which the first\n    character of each word is swapped with the last character of the word.\n    '''\n    return''.join(list(map(lambda word: word[::-1],s1.split())))\ndef to_upper_case(s1):\n    '''\n    Write a function that takes a string as input and returns a string where each character\n    is upper-cased.\n    '''\n    return s1.upper()\ndef is_uppercase(s1):\n    '''\n    Write a function that takes a string as input and returns True if the string is all\n    uppercase, False otherwise.\n    '''\n    return s1.isupper()\ndef is_lowercase(s1):\n    '''\n    Write a function that takes a string as input and returns True if the string is all\n    lowercase, False otherwise.\n    '''\n    return s1.islower()\ndef is_number(s1):\n    '''\n    Write a function that takes a string as input and returns True if the string is a\n    number, False otherwise.\n    '''\n    return s1.isnumeric()\ndef is_alphabetical(s1):\n    '''\n    Write a function that takes a string as input and returns True if the string is in\n    alphabetical order, False otherwise.\n    '''\n    return sorted(s1)==list(s1)\ndef is_pangram(s1):\n    '''\n    Write a function that takes a string as input and returns True if the string contains\n    every letter of the alphabet at least once, False otherwise.\n    '''\n    return set(s1)==set('abcdefghijklmnopqrstuvwxyz')\ndef is_anagram(s1,s2):\n    '''\n    Write a function that takes two strings as input and returns True if the strings are\n    anagrams, False otherwise.\n    '''\n    return sorted(s1)==sorted(s2)\ndef is_substring(s1,s2):\n    '''\n    Write a function that takes two strings as input and returns True if one string is a\n    substring of the other, False otherwise.\n    '''\n    return s2.find(s1)>=0\ndef is_prime(n):\n    '''\n    Write a function that takes a number as input and returns True if the number is prime,\n    False otherwise.\n    '''\n    if n<=1:\n        return False\n    for num in range(2,n//2+1):\n        if n%num==0:\n            return False\n    return True\ndef is_prime_number(n):\n    '''\n    Write a function that takes a number as input and returns True if the number is prime,\n    False otherwise.\n    '''\n    return is_prime(n)\ndef square_number(n):\n    '''\n    Write a function that takes a number as input and returns the square of the number.\n    '''\n    return n**2\ndef cube_number(n):\n    '''\n    Write a function that takes a number as input and returns the cube of the number.\n    '''\n    return n**3\ndef square_root(n):\n    '''\n    Write a function that takes a number as input and returns the square root of the number.\n    '''\n    return n**0.5\ndef print_even(n1,n2):\n    '''\n    Write a function that takes two numbers as input and prints all even numbers between\n    the two numbers (including the end numbers).\n    '''\n    for num in range(n1,n2+1):\n        if num%2==0:\n            print(num)\ndef print_odd(n1,n2):\n    '''\n    Write a function that takes two numbers as input and prints all odd numbers between\n    the two numbers (including the end numbers).\n    '''\n    for num in range(n1,n2+1):\n        if num%2!=0:\n            print(num)\ndef sum_of_squares(n):\n    '''\n    Write a function that takes a number as input and returns the sum of the squares of all\n    the odd digits in the number.\n    '''\n    return sum(map(lambda digit: digit**2,list(str(n))[::2]))\ndef sum_of_cubes(n):\n    '''\n    Write a function that takes a number as input and returns the sum of the cubes of all\n    the odd digits in the number.\n    '''\n    return sum(map(lambda digit: digit**3,list(str(n))[::2]))\ndef find_smallest(l1):\n    '''\n    Write a function that takes a list as input and returns the smallest element in the list.\n    '''\n    return min(l1)\ndef find_largest(l1):\n    '''\n    Write a function that takes a list as input and returns the largest element in the list.\n    '''\n    return max(l1)\ndef remove_smallest(l1):\n    '''\n    Write a function that takes a list as input and returns a list with all instances of the\n    smallest element removed.\n    '''\n    l1.remove(min(l1))\n    return l1\ndef remove_smallest_keep_order(l1):\n    '''\n    Write a function that takes a list as input and returns a list with all instances of the\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    new_l1 = [i for i in l1]\n    l2 = []\n    for i in range(len(new_l1)):\n        l2.append((new_l1[i], new_l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    length_of_list = len(arr)\n    arr.sort()\n    right = length_of_list - 1\n    left = 0\n    pairs = 0\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count=0\n    for x in arr:\n        for y in arr:\n            if (x+y==sum):\n                count+=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pair_count += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs.append((arr[i], arr[j]))\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    return len(list(filter(lambda x: (x[0] + x[1] == sum), list(combinations(arr,2)))))\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == sum):\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    hash_map = dict()\n    for i in range(len(arr)):\n        hash_map[arr[i]] = hash_map.get(arr[i], 0) + 1\n    \n    pairs = 0\n    for x in hash_map:\n        if sum - x in hash_map:\n            pairs += hash_map.get(x) * hash_map.get(sum - x)\n    \n    return pairs\n    "
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i < j and arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1=li1\n    l2=li2\n    li_dif=list(set(l1)-set(l2))\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res=list(set(li1)-set(li2))\n    res.extend(list(set(li2)-set(li1)))\n    return res\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1) - set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res = []\n    for i in li1:\n        if i not in li2:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([(n * i) ** 4 for i in range(1, n + 1, 2)])\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1) : \n        if (i % 2!= 0) : \n            result += i**4\n    return result \n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum( [i**4 for i in range(1,n+1,2)] )\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return (sum([x ** 4 for x in range(1, n + 1) if x % 2!= 0]))\n    \ndef nth_prime(n) :\n    '''\n    Write a python function to find n prime numbers.\n    '''\n    return (sum([x for x in range(1, n + 1) if nth_prime_check(x)]))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_numbers = range(1,n+1,2)\n    power = lambda x : x*x*x*x\n    sum = 0\n    for i in range(len(odd_numbers)) :\n        sum += power(odd_numbers[i])\n    return sum\n    \ndef odd_num_sum_linear(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_numbers = range(1,n+1,2)\n    sum = 0\n    for i in range(len(odd_numbers)) :\n        sum += odd_numbers[i]*odd_numbers[i]*odd_numbers[i]*odd_numbers[i]\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1,n+1,2)])\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_sum = 0\n    for i in range(1, n+1) : \n        if i % 2!= 0 : \n            odd_sum = odd_sum + (i * (i * i)) \n    return odd_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1, 2) :\n        s += i**4\n    return s\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # find sum of square of first n odd natural numbers\n    total = 0\n    for i in range(1, n + 1) :\n        total += i * i * i * i\n    return total"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    queue = deque()\n    for item in exp:\n        if item == '(' or item == '{' or item == '[':\n            queue.append(item)\n        else:\n            if not queue:\n                return False\n            current_item = queue.pop()\n            if current_item == '(' and item!= ')':\n                return False\n            if current_item == '{' and item!= '}':\n                return False\n            if current_item == '[' and item!= ']':\n                return False\n    if queue:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef is_parenth(s):\n    if len(s) == 0:\n        return False\n    parenth_map = {'(':')', '{':'}', '[':']'}\n    stack = []\n    for char in s:\n        if char in parenth_map:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if parenth_map[stack.pop()]!= char:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef check_parenth(s):\n    if is_parenth(s):\n        return 'The string is balanced'\n    else:\n        return 'The string is not balanced'\ndef get_max_profit_stock(prices):\n    '''\n    You are given an array prices where prices[i] is the price of a given stock on the ith day.\n    You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n    Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n    '''\n    if len(prices) < 2:\n        return 0\n    profit = 0\n    for i in range(1, len(prices)):\n        if prices[i] > prices[i - 1]:\n            profit += prices[i] - prices[i - 1]\n    return profit\ndef k_greatest(a, k):\n    '''\n    You are given an array of positive numbers and a positive number, k.\n    Find the maximum sum of any contiguous subarray of size k.\n    '''\n    if len(a) < k:\n        return 0\n    if len(a) == k:\n        return sum(a)\n    sum_list = [0]\n    for i in range(k):\n        sum_list.append(sum_list[-1] + a[i])\n    for i in range(k, len(a)):\n        sum_list[i] = sum_list[i - 1] + a[i]\n    return max(sum_list[k:])\ndef find_permutation(nums):\n    '''\n    Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n    '''\n    nums_set = set()\n    nums_set_list = []\n    for num in nums:\n        nums_set.add(num)\n        nums_set_list.append(num)\n    for i in range(len(nums)):\n        if i not in nums_set:\n            return i\n    return len(nums)\ndef get_missing_num(arr):\n    '''\n    Given an unsorted array containing n+1 integers where each integer is between 1 and n (inclusive), \n    find the missing integer.\n    '''\n    arr_set = set()\n    for num in arr:\n        arr_set.add(num)\n    for i in range(len(arr) + 1):\n        if i not in arr_set:\n            return i\ndef get_missing_num_v2(arr):\n    '''\n    Given an unsorted array containing n+1 integers where each integer is between 1 and n (inclusive), \n    find the missing integer. But, you are not allowed to use any sorting function that you have not learned yet.\n    '''\n    n = len(arr)\n    nums = [False] * (n + 1)\n    for num in arr:\n        nums[num] = True\n    for i in range(n):\n        if nums[i]:\n            continue\n        else:\n            return i\n    return n\ndef reverse_words(words):\n    '''\n    Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        words[i] = list(words[i])\n        words[i].reverse()\n        words[i] = ''.join(words[i])\n    return''.join(words)\ndef reverse_words_v2(words):\n    '''\n    Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n    But, you are not allowed to use any sorting function that you have not learned yet.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        words[i] = list(words[i])\n    n = len(words) - 1\n    for i in range(n, -1, -1):\n        start = 0\n        end = len(words[i]) - 1\n        while start <= end:\n            words[i][start], words[i][end] = words[i][end], words[i][start]\n            start += 1\n            end -= 1\n        words[i] = ''.join(words[i])\n    return''.join(words)\ndef reverse_words_v3(words):\n    '''\n    Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n    But, you are not allowed to use any sorting function that you have not learned yet.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        words[i] = list(words[i])\n    return''.join([''.join(word[::-1]) for word in words])\ndef reverse_words_v4(words):\n    '''\n    Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n    But, you are not allowed to use any sorting function that you have not learned yet.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        words[i] = list(words[i])\n    return''.join([''.join(word) for word in words])\ndef reverse_words_v5(words):\n    '''\n    Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n    But, you are not allowed to use any sorting function that you have not learned yet.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        words[i] = list(words[i])\n    return''.join([''.join(word) for word in words])\ndef is_anagram(s1, s2):\n    '''\n    Given two strings s and t, write a function to determine if t is an anagram of s.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = s1.lower()\n    s2 = s2.lower()\n    s1_list = [0] * 256\n    s2_list = [0] * 256\n    for char in s1:\n        s1_list[ord(char)] += 1\n    for char in s2:\n        s2_list[ord(char)] += 1\n    return s1_list == s2_list\ndef is_anagram_v2(s1, s2):\n    '''\n    Given two strings s and t, write a function to determine if t is an anagram of s.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = s1.lower()\n    s2 = s2.lower()\n    s1_list = [0] * 256\n    s2_list = [0] * 256\n    for char in s1:\n        s1_list[ord(char)] += 1\n    for char in s2:\n        s2_lis"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    queue = deque()\n    for char in exp:\n        if char in ['(','{','[']:\n            queue.append(char)\n        else:\n            if len(queue) == 0:\n                return False\n            else:\n                top = queue.pop()\n                if (top == '(' and char!= ')') or (top == '{' and char!= '}') or (top == '[' and char!= ']'):\n                    return False\n    if len(queue) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # we need to check two things for balancing:\n    # 1. number of opening and closing braces must be same\n    # 2. if open and close braces match then we need to check for the last close brace's corresponding open brace's index\n    #    because if there is no such open brace then it will be considered as unbalanced if there is a mismatch\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    exp = deque(exp)\n    for ch in exp:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    '''\n    Example:\n    >>> check_expression('({a+b}){c+d}')\n    False\n    >>> check_expression('[a+b]*(x+2y)*{gg+kk}')\n    True\n    >>> check_expression('{{[(])]}}')\n    False\n    >>> check_expression('[(])')\n    False\n    >>> check_expression('[({})](])')\n    False\n    >>> check_expression('[({})]')\n    True\n    >>> check_expression('((()))')\n    True\n    >>> check_expression('[({[]})](])')\n    True\n    '''\n    \n    '''\n    \n    '''\n    \n    queue = deque()\n    for char in exp:\n        if char in '([{':\n            queue.append(char)\n        elif char in ')]}':\n            if len(queue) == 0:\n                return False\n            if(queue[-1] == '(' and char == ')') or (queue[-1] == '[' and char == ']') or (queue[-1] == '{' and char == '}'):\n                queue.pop()\n            else:\n                return False\n    if len(queue) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_list = [\"(\", \"{\", \"[\"] \n    close_list = [\")\", \"}\", \"]\"] \n    stack = deque() \n    for i in exp: \n        if i in open_list: \n            stack.append(i) \n        elif i in close_list: \n            pos = close_list.index(i) \n            if ((len(stack) > 0) and\n                (open_list[pos] == stack[len(stack)-1])): \n                stack.pop() \n            else: \n                return False\n    if len(stack) == 0: \n        return True\n    return False"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    opening = set('({[')\n    closing = set(')}]')\n    for i in exp:\n        if i in opening:\n            stack.append(i)\n        elif i in closing:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '(' and i == ')':\n                stack.pop()\n            elif stack[-1] == '{' and i == '}':\n                stack.pop()\n            elif stack[-1] == '[' and i == ']':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_symbols = ['(', '{', '[']\n    close_symbols = [')', '}', ']']\n    for symbol in exp:\n        if symbol in open_symbols:\n            stack.append(symbol)\n        elif symbol in close_symbols:\n            if len(stack) == 0:\n                return False\n            index = close_symbols.index(symbol)\n            if stack[len(stack)-1] == open_symbols[index]:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    t = []\n    for word in test_str.split():\n        if len(word)!= K:\n            t.append(word)\n    return''.join(t)\n    \n    \ndef binary_search(test_str, K):\n    '''\n    Write a function that takes a string and a target string and finds the\n    first location in the string where the target string appears as a substring.\n    If the target string does not exist in the string, the function returns -1.\n    '''\n    if K == \"\":\n        return -1\n    def find_next_location(test_str, start, end, K):\n        # base case\n        if K == \"\":\n            return start - 1\n        if start <= end:\n            mid = (start + end) // 2\n            # If element is present at the middle itself\n            if K == test_str[mid]:\n                return mid\n            # If element is smaller than mid, then it can only\n            # be present in left subarray\n            elif K < test_str[mid]:\n                return find_next_location(test_str, start, mid - 1, K)\n            # Else the element can only be present in right subarray\n            else:\n                return find_next_location(test_str, mid + 1, end, K)\n        else:\n            # Element is not present in the array\n            return -1\n    return find_next_location(test_str, 0, len(test_str) - 1, K)\n    \n    \ndef remove_nth_occurence(test_str, N):\n    '''\n    Write a function to remove the Nth occurrence of a character from a given string.\n    '''\n    if N > len(test_str):\n        return test_str\n    else:\n        return test_str.replace(test_str[N - 1], \"\", 1)\n    \n    \ndef remove_element(test_arr, K):\n    '''\n    Write a function that takes an array and an integer K and returns an array of length\n    length(array) - K where K is the minimum index for which the value at that index\n    is not equal to the value at index K.\n    '''\n    if len(test_arr) < K:\n        return test_arr\n    else:\n        return test_arr[:len(test_arr) - K]\n    \n    \ndef find_nth_number(test_arr, N):\n    '''\n    Write a function that returns the Nth number in the fibonacci sequence.\n    '''\n    if N <= 1:\n        return N\n    else:\n        return find_nth_number(test_arr, N - 1) + find_nth_number(test_arr, N - 2)\n    \n    \ndef find_greatest_number(test_arr):\n    '''\n    Write a function that takes in an array of numbers and returns the greatest number\n    in the array. If the array is empty, the function should return False.\n    '''\n    if len(test_arr) == 0:\n        return False\n    else:\n        max = 0\n        for num in test_arr:\n            if num > max:\n                max = num\n        return max\n    \n    \ndef get_greatest_number_index(test_arr):\n    '''\n    Write a function that takes in an array of numbers and returns the index of the\n    greatest number in the array. If the array is empty, the function should return\n    False.\n    '''\n    if len(test_arr) == 0:\n        return False\n    max = 0\n    for i in range(len(test_arr)):\n        if test_arr[i] > max:\n            max = test_arr[i]\n            max_index = i\n    return max_index\n    \n    \ndef get_greatest_number_sum(test_arr):\n    '''\n    Write a function that takes in an array of numbers and returns the sum of the\n    greatest two number in the array. If the array is empty, the function should\n    return False.\n    '''\n    if len(test_arr) == 0:\n        return False\n    else:\n        max1 = test_arr[0]\n        max2 = test_arr[1]\n        for num in test_arr:\n            if num > max1:\n                max2 = max1\n                max1 = num\n            elif num > max2:\n                max2 = num\n        return max1 + max2\n    \n    \ndef sum_elements_between(test_arr, start, end):\n    '''\n    Write a function that takes in an array of numbers and returns the sum of all\n    the elements in the array between indices start and end (both inclusive).\n    If the array is empty, the function should return False. If end is less than\n    or equal to start, the function should return False.\n    '''\n    if len(test_arr) == 0:\n        return False\n    elif end <= start:\n        return False\n    else:\n        return sum(test_arr[start:end + 1])\n    \n    \ndef move_zeroes(test_arr):\n    '''\n    Write a function that takes in an array of numbers and returns an array of the\n    same length where the index of a 0 is filled with the value of the index of a\n    non zero.\n    '''\n    if len(test_arr) == 0:\n        return False\n    else:\n        new_arr = [None] * len(test_arr)\n        for i in range(len(test_arr)):\n            if test_arr[i] == 0:\n                new_arr[0] = test_arr[i]\n                test_arr[0] = test_arr[i]\n            else:\n                new_arr[i] = test_arr[i]\n                test_arr[i] = test_arr[i]\n    return new_arr\n    \n    \ndef move_zeroes_pythonic(test_arr):\n    '''\n    Write a function that takes in an array of numbers and returns an array of the\n    same length where the index of a 0 is filled with the value of the index of a\n    non zero. This function should use the python list method\n    '''\n    if len(test_arr) == 0:\n        return False\n    else:\n        return [test_arr[i] for i in range(len(test_arr)) if test_arr[i]!= 0] + [0 for i in range(len(test_arr)) if test_arr[i] == 0]\n    \n    \ndef find_duplicate(test_arr):\n    '''\n    Write a function that takes in an array of numbers and returns an array of\n    all the duplicate values in the array.\n    '''\n    if len(test_arr) == 0:\n        return False\n    else:\n        new_arr = []\n        for num in test_arr:\n            if test_arr.count(num) > 1 and num not in new_arr:\n                new_arr.append(num)\n        return new_arr\n    \n    \ndef get_pivot(test_arr, start, end):\n    '''\n    Write a function that takes in an array of numbers and returns the index of the\n    largest number in the array between index start and index end (both inclusive).\n    If start is greater than end, the function should return False.\n    '''\n    if start > end:\n        return False\n    else:\n        max_index = start\n        for i in range(start, end + 1):\n            if test_arr[i] > test_arr[max_index]:\n                max_index = i\n        return max_index\n    \n    \ndef get_pivot_py_way(test_arr, start, end):\n    '''\n    Write a function that takes in an array of numbers and returns the index of the\n    largest number in the array between index start and index end (both inclusive).\n    If start is greater than end, the function should return False.\n    This function should use the python list method.\n    '''\n    if start > end:\n        return False\n    else:\n        return test_arr.index(max(test_arr[start:end + 1]))\n    \n    \ndef get_missing_number(test_arr):\n    '''\n    Write a function that takes in an array of numbers and returns the missing\n    number in the array. If the array is empty, the function should return False.\n    '''"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    count = 0\n    while count < len(words):\n        if len(words[count]) == K:\n            words.remove(words[count])\n        else:\n            count += 1\n    return words\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(word for word in test_str.split() if len(word)!= K)\n    \n    "
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_list = []\n    for word in test_str.split():\n        if len(word)!= K:\n            new_list.append(word)\n    return \" \".join(new_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not isinstance(test_str, str):\n        return None\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(' ')\n    print(test_str)\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            del test_str[i]\n    print(test_str)\n    return''.join(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = []\n    test_str = test_str.split()\n    for word in test_str:\n        if len(word) == K:\n            continue\n        else:\n            new_str.append(word)\n    return''.join(new_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    string = test_str.split(\" \")\n    for s in string:\n        if len(s) == K:\n            string.remove(s)\n    return \" \".join(string)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K > len(test_str):\n        return test_str\n    res = ''\n    for word in test_str.split():\n        if len(word) == K:\n            continue\n        else:\n            res += word +''\n    return res\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K <= 0:\n        return test_str\n    new_str = \"\"\n    for i in test_str.split():\n        if len(i) == K:\n            pass\n        else:\n            new_str += i + \" \"\n    return new_str\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern = 'ab'\n    if pattern == '':\n        return None\n    length = len(pattern)\n    if len(text) < length:\n        return None\n    count = 0\n    for i in range(len(text)-length+1):\n        if text[i] == pattern[0]:\n            for j in range(1,length):\n                if text[i+j]!= pattern[j]:\n                    break\n                elif j == length-1:\n                    count += 1\n                    print(i+1,'Occurance :', text[i:i+length])\n    if count == 0:\n        return None\n    return count\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text.find(pattern)!= -1:\n        print('The text string contain {}'.format(pattern))\n        print('The position of the substring is : {}'.format(text.find(pattern)))\n    else:\n        print('The text string does not contain {}'.format(pattern))\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance = re.search(pattern, text)\n    if occurance:\n        return occurance.group()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #print(text,pattern)\n    m = re.search(pattern,text)\n    if m:\n        return m.group()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result= re.findall(pattern,text)\n    if len(result)>0:\n        return result\n    else:\n        return None\n    \n    \ndef replace_substring(text,pattern,replacement):\n    '''\n    Write a function to replace a substring within a string with a new substring. Return a tuple of the number of replacements made and the modified string.\n    '''\n    new_text= re.sub(pattern,replacement,text)\n    return (new_text,text.count(pattern))\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #Substring = pattern\n    #Position = int(text.find(pattern))\n    result = re.search(pattern, text)\n    if result!= None:\n        print(result.start())\n    else:\n        print(\"None\")\n        \n        \ntext = \"consultadd Training in Japan\"\npattern = \"consult\"\noccurance_substring(text,pattern)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n            print(match.start())\n    except:\n        print(None)\ndef occurance_substring2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring6(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring7(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring8(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring9(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring10(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring11(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring12(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring13(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring14(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring15(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring16(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring17(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring18(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring19(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(None)\ndef occurance_substring20(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        p = re.compile(pattern)\n        matches = p.finditer(text)\n        for match in matches:\n            print(match.group(0))\n    except:\n        print(Non"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not text or not pattern:\n        return None\n    occurance = {}\n    length = len(pattern)\n    for i in range(len(text)-length+1):\n        if text[i:i+length] == pattern:\n            if pattern in occurance:\n                occurance[pattern].append(i)\n            else:\n                occurance[pattern] = [i]\n    return occurance\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text_list = text.split(\" \")\n    pattern_list = pattern.split(\" \")\n    final_list = []\n    for word in text_list:\n        if word in pattern_list:\n            final_list.append(word)\n    if len(final_list)>0:\n        return final_list\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern not in text:\n        return None\n    match = re.search(pattern,text)\n    return match.span()\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums = set()\n    for i in range(0, len(nums), 2):\n        odd_nums.add(nums[i])\n    if len(odd_nums) == len(nums) / 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index=[]\n    for i in range(len(nums)):\n        if i%2!=0:\n            odd_index.append(nums[i])\n    return odd_index\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    l = len(nums)\n    for i in range(1,l,2):\n        if nums[i]%2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = []\n    for index,num in enumerate(nums):\n        if index%2!= 0 and num % 2!= 0:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2==0:\n            return False\n    return True\nprint(odd_position([4,3,2,7,5,3,4]))\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i+1) % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(1, len(nums), 2):\n        if nums[index] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for num in range(len(nums)):\n        if (num+1) % 2 == 0:\n            if nums[num] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            if i+1 < len(test_str):\n                if test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u':\n                    count += 1\n            if i-1 >= 0:\n                if test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u':\n                    count += 1\n        elif test_str[i] == 'A' or test_str[i] == 'E' or test_str[i] == 'I' or test_str[i] == 'O' or test_str[i] == 'U':\n            if i+1 < len(test_str):\n                if test_str[i+1] == 'A' or test_str[i+1] == 'E' or test_str[i+1] == 'I' or test_str[i+1] == 'O' or test_str[i+1] == 'U':\n                    count += 1\n            if i-1 >= 0:\n                if test_str[i-1] == 'A' or test_str[i-1] == 'E' or test_str[i-1] == 'I' or test_str[i-1] == 'O' or test_str[i-1] == 'U':\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    total = 0\n    for i in range(len(test_str)):\n        if i+1 < len(test_str):\n            if test_str[i] in ['a','e','i','o','u'] and test_str[i+1] in ['a','e','i','o','u']:\n                total += 1\n        if i+2 < len(test_str):\n            if test_str[i] in ['a','e','i','o','u'] and test_str[i+2] in ['a','e','i','o','u']:\n                total += 1\n        if i+3 < len(test_str):\n            if test_str[i] in ['a','e','i','o','u'] and test_str[i+3] in ['a','e','i','o','u']:\n                total += 1\n    return total\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    result = 0\n    for i in range(len(test_str)):\n        if (test_str[i] == \"a\" or test_str[i] == \"e\" or test_str[i] == \"i\" or test_str[i] == \"o\" or test_str[i] == \"u\" or test_str[i] == \"A\" or test_str[i] == \"E\" or test_str[i] == \"I\" or test_str[i] == \"O\" or test_str[i] == \"U\") and test_str[i-1] in test_str:\n            result = result + 1\n        elif (test_str[i] == \"a\" or test_str[i] == \"e\" or test_str[i] == \"i\" or test_str[i] == \"o\" or test_str[i] == \"u\" or test_str[i] == \"A\" or test_str[i] == \"E\" or test_str[i] == \"I\" or test_str[i] == \"O\" or test_str[i] == \"U\") and test_str[i+1] in test_str:\n            result = result + 1\n        elif (test_str[i] == \"a\" or test_str[i] == \"e\" or test_str[i] == \"i\" or test_str[i] == \"o\" or test_str[i] == \"u\" or test_str[i] == \"A\" or test_str[i] == \"E\" or test_str[i] == \"I\" or test_str[i] == \"O\" or test_str[i] == \"U\") and test_str[i+1] in test_str and test_str[i-1] in test_str:\n            result = result + 1\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum(1 for c in test_str if c.lower() in \"aeiou\")\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_str = \"aeiou\"\n    vowels = 0\n    test_str = test_str.lower()\n    for index,char in enumerate(test_str):\n        if index + 1 < len(test_str):\n            if test_str[index + 1] in vowel_str and char in vowel_str:\n                vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u' or test_str[i] == 'A' or test_str[i] == 'E' or test_str[i] == 'I' or test_str[i] == 'O' or test_str[i] == 'U':\n            if i == 0:\n                if test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u' or test_str[i+1] == 'A' or test_str[i+1] == 'E' or test_str[i+1] == 'I' or test_str[i+1] == 'O' or test_str[i+1] == 'U':\n                    count = count + 1\n                else:\n                    count = count\n            elif i == len(test_str) - 1:\n                if test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u' or test_str[i-1] == 'A' or test_str[i-1] == 'E' or test_str[i-1] == 'I' or test_str[i-1] == 'O' or test_str[i-1] == 'U':\n                    count = count + 1\n                else:\n                    count = count\n            else:\n                if test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u' or test_str[i-1] == 'A' or test_str[i-1] == 'E' or test_str[i-1] == 'I' or test_str[i-1] == 'O' or test_str[i-1] == 'U':\n                    count = count + 1\n                elif test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u' or test_str[i+1] == 'A' or test_str[i+1] == 'E' or test_str[i+1] == 'I' or test_str[i+1] == 'O' or test_str[i+1] == 'U':\n                    count = count + 1\n                else:\n                    count = count\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    vowels_count = 0\n    i = 0\n    while(i < len(test_str)):\n        if test_str[i] in ['a','e','i','o','u']:\n            if i == 0:\n                if test_str[i+1] in ['a','e','i','o','u']:\n                    vowels_count += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] in ['a','e','i','o','u']:\n                    vowels_count += 1\n            else:\n                if test_str[i-1] in ['a','e','i','o','u'] and test_str[i+1] in ['a','e','i','o','u']:\n                    vowels_count += 1\n            i += 1\n        else:\n            i += 1\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i-1] not in vowels or test_str[i+1] not in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(0,len(test_str)-1):\n        if test_str[i] in vowels:\n            if test_str[i+1] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    # test_str = 'abracadabra'\n    vowel_neighbor_count = 0\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n    \n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    hash_set = set()\n    for i in range(len(arr)): \n        if arr[i] not in hash_set: \n            hash_set.add(arr[i]) \n        else: \n            return arr[i] \n        return 0\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr: \n        if i not in arr[arr.index(i)+1:]: \n            sum += i \n    return sum\nprint(find_sum([1, 3, 2, 2, 3, 4, 5]))\nprint(find_sum([0, 1, 3, 2, 0, 2, 3]))\nprint(find_sum([1, 3, 2, 2, 3, 4, 5, 6]))\nprint(find_sum([1, 2, 3, 4]))\nprint(find_sum([0, 1, 3, 2, 3, 4, 5, 6, 7]))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 1: \n        return arr[0]\n    else: \n        return arr[0] + find_sum(arr[1:])\ndef palindrome(num):\n    '''\n    Write a python function to find palindrome numbers.\n    '''\n    if num == num[::-1]:\n        return True\n    else:\n        return False\ndef prime(num):\n    '''\n    Write a python function to find prime numbers.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\ndef find_triplets(arr):\n    '''\n    Write a python function to find triplet in a given list.\n    '''\n    arr.sort()\n    for i in range(0, len(arr)-2):\n        if (arr[i] + arr[i+1]) == arr[i+2]:\n            return True\n    return False\ndef consecutive(arr):\n    '''\n    Write a python function to find consecutive numbers in a given list.\n    '''\n    arr.sort()\n    for i in range(0, len(arr)-1):\n        if (arr[i] + 1) == arr[i+1]:\n            return True\n    return False\ndef find_sum_of_digits(num):\n    '''\n    Write a python function to find sum of digits in a given number.\n    '''\n    sum = 0\n    while num:\n        sum += num % 10\n        num //= 10\n    return sum\ndef sum_of_digits_factors(num):\n    '''\n    Write a python function to find sum of digits in a given number where factors of digits sum is equal to the number.\n    '''\n    sum = 0\n    while num:\n        sum += num % 10\n        num //= 10\n    return sum\ndef find_count(arr, target):\n    '''\n    Write a python function to find count of numbers in a given list which is multiple of its digit.\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 10 == 0:\n            count += 1\n    return count\ndef count_numbers(arr, n):\n    '''\n    Write a python function to count numbers in a given list which are divisible by a given number.\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] % n == 0:\n            count += 1\n    return count\ndef sum_of_digits(num):\n    '''\n    Write a python function to find sum of digits in a given number.\n    '''\n    sum = 0\n    while num:\n        sum += num % 10\n        num //= 10\n    return sum\ndef sum_of_digits_factors(num):\n    '''\n    Write a python function to find sum of digits in a given number where factors of digits sum is equal to the number.\n    '''\n    sum = 0\n    while num:\n        sum += num % 10\n        num //= 10\n    return sum\ndef get_nth_number(num, n):\n    '''\n    Write a python function to find nth number in the series of numbers.\n    '''\n    num = num * (n-1)\n    return num % 9 + 1\ndef next_bigger(num):\n    '''\n    Write a python function to find next bigger number by rearranging digits.\n    '''\n    i = len(str(num)) - 1\n    while i > 0 and str(num)[i-1] >= str(num)[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(str(num)) - 1\n    while str(num)[j] <= str(num)[i-1]:\n        j -= 1\n    str_num = str(num)\n    str_num = str_num[:i-1] + str_num[j] + ''.join(sorted(str_num[i-1:j] + str_num[i:]))\n    num = int(str_num)\n    return num\ndef reverse(num):\n    '''\n    Write a python function to find reverse of a number.\n    '''\n    rev = 0\n    while num:\n        rev = (rev * 10) + num % 10\n        num //= 10\n    return rev\ndef sum_of_digits_reverse(num):\n    '''\n    Write a python function to find sum of digits in a given number where digits in the number are reversed.\n    '''\n    rev = 0\n    while num:\n        rev = (rev * 10) + num % 10\n        num //= 10\n    return rev\ndef reverse_sum(num):\n    '''\n    Write a python function to find reverse of a number and return sum of digits in both numbers.\n    '''\n    rev = 0\n    while num:\n        rev = (rev * 10) + num % 10\n        num //= 10\n    return sum_of_digits(rev)\ndef reverse_sum_factors(num):\n    '''\n    Write a python function to find reverse of a number and return sum of digits in both numbers where factors of digits sum is equal to the number.\n    '''\n    rev = 0\n    while num:\n        rev = (rev * 10) + num % 10\n        num //= 10\n    return sum_of_digits_factors(rev)\ndef find_triple_factors(num):\n    '''\n    Write a python function to find triple factors in a given number.\n    '''\n    i = 1\n    while num >= i:\n        if num % i == 0:\n            if num // i == i:\n                return False\n            else:\n                i += 1\n        else:\n            i += 1\n    return True\ndef get_triple_factors(num):\n    '''\n    Write a python function to find triple factors in a given number and return a list of numbers.\n    '''\n    triple_factors = []\n    i = 1\n    while num >= i:\n        if num % i == 0:\n            if num // i == i:\n                triple_factors.append(i)\n            else:\n                triple_factors.append(i)\n                triple_factors.append(num//i)\n        i += 1\n    return triple_factors\ndef all_factors(num):\n    '''\n    Write a python function to find all factors in a given number.\n    '''\n    factors = []\n    i = 1\n    while num >= i:\n        if num % i == 0:\n            factors.append(i)\n        i += 1\n    return factors\ndef prime_factors(num):\n    '''\n    Write a python function to find prime factors in a given number.\n    '''\n    factors = []\n    i = 2\n    while num > 1:\n        if num % i == 0:\n            factors.append(i)\n            num //= i\n        else:\n            i += 1\n    return factors\ndef factors_of_num(num):\n    '''\n    Write a python function to find factors of a given number and return a list of numbers.\n    '''\n    i = 1\n    factors = []\n    while num >= i:\n        if num % i == 0:\n            factors.append(i)\n        i += 1\n    return factors\ndef count_of_factors(num):\n    '''\n    Write a python function to find count of factors in a given number.\n    '''\n    i = 1\n    count = 0\n    while num >= i:\n        if num % i == 0:\n            count += 1\n        i += 1\n    return count\ndef get_prime_factors(num):\n    '''\n    Write a python function to find prime factors in a given number and return a list of numbers.\n    '''\n    prime_factors = []\n    i = 2\n    while num > 1:\n        if num % i == 0:\n            if prime(i):\n                prime_factors.append(i)\n                num //= i\n            else:\n                i += 1\n        else:\n            i += 1\n    return prime_factors\ndef get_prime_factors_with_powers(num):\n    '''\n    Write a python function to find prime factors in "
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_rep = []\n    for i in range(len(arr)):\n        if i+1 < len(arr):\n            if arr[i]!= arr[i+1]:\n                non_rep.append(arr[i])\n    return sum(non_rep)\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    a = []\n    for i in arr:\n        if i not in a:\n            a.append(i)\n    print(a)\n    return sum(a)\n    \n    \n    \ndef sum_even_numbers(arr):\n    '''\n    Write a python function to return the sum of all even numbers in a given list.\n    '''\n    a = []\n    for i in arr:\n        if i%2 == 0:\n            a.append(i)\n    print(a)\n    return sum(a)\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_rep = list(set(arr))\n    return sum(non_rep) \n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if arr.count(i)>1:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    result=[[list(g) for _, g in groupby(list1)]]\n    if len(result)==1:\n        return result\n    else:\n        for i in range(1,len(list1)):\n            if list1[i]==list1[i-1]:\n                result.append([list1[i]])\n            else:\n                result[-1].append(list1[i])\n        return result"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    i = 0\n    while i < len(list1):\n        count = 1\n        while i+1 < len(list1) and list1[i] == list1[i+1]:\n            count += 1\n            i += 1\n        if count > 1:\n            list1[i] = [list1[i]]*count\n            i += count\n        else:\n            i += 1\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    unique_list=[]\n    for key,group in groupby(list1):\n        unique_list.append(list(group))\n    return unique_list\nprint(pack_consecutive_duplicates([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(list1):\n        print([list(g)] * (len(list(g))), end=' ')\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for ele, group in groupby(list1)]\n    \n    \nlist1 = [2, 3, 3, 3, 6, 2, 4, 2]\nprint(pack_consecutive_duplicates(list1))\n    \n    \ndef pack_consecutive_duplicates_into_new_list(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for ele, group in groupby(list1):\n        list2.append(list(group))\n    return list2\n    \nlist1 = [2, 3, 3, 3, 6, 2, 4, 2]\nprint(pack_consecutive_duplicates_into_new_list(list1))\n    \n    \ndef group_by_2(list1):\n    '''\n    Write a function to group elements in a list by value to sublists.\n    '''\n    list2 = {}\n    for i in list1:\n        if i in list2:\n            list2[i].append(i)\n        else:\n            list2[i] = [i]\n    return list2\n    \nlist1 = [2, 3, 3, 3, 6, 2, 4, 2]\nprint(group_by_2(list1))\n    \n    \ndef group_by_2_using_list_comprehension(list1):\n    '''\n    Write a function to group elements in a list by value to sublists.\n    '''\n    return {i: [j for j in list1 if j == i] for i in list1}\n    \nlist1 = [2, 3, 3, 3, 6, 2, 4, 2]\nprint(group_by_2_using_list_comprehension(list1))\n    \n    \ndef group_by_2_with_2_variables(list1):\n    '''\n    Write a function to group elements in a list by value to sublists.\n    '''\n    list2 = {}\n    for i in list1:\n        if i in list2:\n            list2[i].append(i)\n        else:\n            list2[i] = [i]\n    return list2\n    \nlist1 = [2, 3, 3, 3, 6, 2, 4, 2]\nprint(group_by_2_with_2_variables(list1))\n    \n    \ndef list_to_dict(list1):\n    '''\n    Write a function to convert a list of lists into a dictionary of keys and values.\n    '''\n    return {list1[i]: list1[i+1] for i in range(0, len(list1), 2)}\n    \nlist1 = [[1, 'l'], [2, 'o'], [3, 'v'], [4, 'e']]\nprint(list_to_dict(list1))\n    \n    \ndef list_to_dict_using_zip_function(list1):\n    '''\n    Write a function to convert a list of lists into a dictionary of keys and values.\n    '''\n    return dict(zip(list1[::2], list1[1::2]))\n    \nlist1 = [[1, 'l'], [2, 'o'], [3, 'v'], [4, 'e']]\nprint(list_to_dict_using_zip_function(list1))\n    \n    \ndef group_by_using_key_list_comprehension(list1):\n    '''\n    Write a function to group elements in a list by value to sublists.\n    '''\n    return {i: [j for j in list1 if j[0] == i] for i in set(j[0] for j in list1)}\n    \nlist1 = [[1, 'l'], [2, 'o'], [3, 'v'], [4, 'e']]\nprint(group_by_using_key_list_comprehension(list1))\n    \n    \ndef group_by_using_key_list_comprehension_with_3_variables(list1):\n    '''\n    Write a function to group elements in a list by value to sublists.\n    '''\n    return {i: [j for j in list1 if j[0] == i and j[1] == 'l'] for i in set(j[0] for j in list1) if 'l' in set(j[1] for j in list1)}\n    \nlist1 = [[1, 'l'], [2, 'l'], [3, 'l'], [4, 'e'], [5, 'l'], [6, 'l'], [7, 'v'], [8, 'l']]\nprint(group_by_using_key_list_comprehension_with_3_variables(list1))\n    \n    \ndef group_by_using_key_dict_comprehension(list1):\n    '''\n    Write a function to group elements in a list by value to sublists.\n    '''\n    return {i: [j for j in list1 if j[0] == i] for i in set(j[0] for j in list1)}\n    \nlist1 = [[1, 'l'], [2, 'l'], [3, 'l'], [4, 'e'], [5, 'l'], [6, 'l'], [7, 'v'], [8, 'l']]\nprint(group_by_using_key_dict_comprehension(list1))\n    \n    \ndef group_by_using_key_dict_comprehension_with_3_variables(list1):\n    '''\n    Write a function to group elements in a list by value to sublists.\n    '''\n    return {i: [j for j in list1 if j[0] == i and j[1] == 'l'] for i in set(j[0] for j in list1) if 'l' in set(j[1] for j in list1)}\n    \nlist1 = [[1, 'l'], [2, 'l'], [3, 'l'], [4, 'e'], [5, 'l'], [6, 'l'], [7, 'v'], [8, 'l']]\nprint(group_by_using_key_dict_comprehension_with_3_variables(list1))\n    \n    \ndef sum_group_by_using_key_list_comprehension(list1):\n    '''\n    Write a function to group elements in a list by value to sublists.\n    '''\n    return {i: sum(j for j in list1 if j[0] == i) for i in set(j[0] for j in list1)}\n    \nlist1 = [[1, 'l'], [2, 'l'], [3, 'l'], [4, 'e'], [5, 'l'], [6, 'l'], [7, 'v'], [8, 'l']]\nprint(sum_group_by_using_key_list_comprehension(list1))\n    \n    \ndef sum_group_by_using_key_dict_comprehension(list1):\n    '''\n    Write a function to group elements in a list by value to sublists.\n    '''\n    return {i: sum(j for j in list1 if j[0] == i) for i in set(j[0] for j in list1)}\n    \nlist1 = [[1, 'l'], [2, 'l'], [3, 'l'], [4, 'e'], [5, 'l'], [6, 'l'], [7, 'v'], [8, 'l']]\nprint(sum_group_by_using_key_dict_comprehension(list1))\n    \n    \ndef sum_group_by_using_key_dict_comprehension_with_3_variables(list1):\n    '''\n    Write a function to group elements in a list by value to sublists.\n    '''\n    return {i: sum(j for j in list1 if j[0] == i and j[1] == 'l') for i in set(j[0] for j in list1) if 'l' in set(j["
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack(item):\n        return [list(g) for _, g in groupby(item)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(list1):\n        #print(k)\n        #print(list(g))\n        print([list(g)])\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_without_duplicates = []\n    for item in list1:\n        if len(list_without_duplicates) == 0:\n            list_without_duplicates.append(item)\n        if item!= list_without_duplicates[-1]:\n            list_without_duplicates.append(item)\n    #print(list_without_duplicates)\n    sublists = []\n    list_without_duplicates = [x for x in list_without_duplicates if x not in sublists]\n    if len(list_without_duplicates) > 0:\n        sublists.append(list_without_duplicates)\n    #print(sublists)\n    for item in sublists:\n        new_sublist = []\n        for item2 in item:\n            new_sublist.append([item2])\n        sublists.append(new_sublist)\n    #print(sublists)\n    for item in sublists:\n        for item2 in item:\n            item2.sort()\n    #print(sublists)\n    for item in sublists:\n        item.sort()\n    #print(sublists)\n    return sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list=list(groupby(list1))\n    print(new_list)\n    \n    \npack_consecutive_duplicates([2, 3, 3, 3, 6, 2, 4, 2])\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = dict()\n    for sublist in list1:\n        if tuple(sublist) in count_dict:\n            count_dict[tuple(sublist)] += 1\n        else:\n            count_dict[tuple(sublist)] = 1\n    return count_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for i in list1:\n        if type(i) == list:\n            result[tuple(i)] = result.get(tuple(i), 0) + 1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for sublist in list1:\n        tuple1 = tuple(sublist)\n        if tuple1 not in list_dict:\n            list_dict[tuple1] = 1\n        else:\n            list_dict[tuple1] += 1\n    return list_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = [1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]]\n    list_of_lists = [list(x) for x in list1]\n    tuple_list = []\n    for i in range(len(list_of_lists)):\n        tuple_list.append(tuple(list_of_lists[i]))\n    tuple_list = set(tuple_list)\n    dic = {}\n    for i in tuple_list:\n        dic[i] = list1.count(i)\n    print(dic)\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # so to make the sublist a tuple\n    list1 = tuple(list1)\n    \n    # making a dictionary\n    sub_list_dict = {}\n    \n    for i in list1:\n        sub_list_dict[i] = list1.count(i)\n    \n    return sub_list_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # solution 1\n    list1_set = set()\n    for sublist in list1:\n        list1_set.add(tuple(sublist))\n    # return len(list1_set)\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # list1 = [1,2,3,[1,1,1],5,[1,1,1,1],4,[1,1,1],1,1,1,1,1,1,1,1,1,1]\n    # result = {(1,1,1): 1, (1,1,1,1): 1, (1,1,1): 1, (1,1,1): 1, (1,1,1,1): 1, (1,1,1): 1, (1,1,1): 1, (1,1,1): 1, (1,1,1): 1, (1,1,1,1): 1, (1,1,1): 1, (1,1,1): 1, (1,1,1,1): 1, (1,1,1): 1, (1,1,1,1): 1, (1,1,1): 1, (1,1,1,1): 1, (1,1,1): 1, (1,1,1): 1, (1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1): 1, (1,1,1,1,1,1): 1, (1,1,1,1,1,1): 1, (1,1,1,1,1,1): 1, (1,1,1,1,1,1): 1, (1,1,1,1,1,1): 1, (1,1,1,1,1,1): 1, (1,1,1,1,1,1): 1, (1,1,1,1,1,1): 1, (1,1,1,1,1,1): 1, (1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1): 1, (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1): 1}\n    # print(result)\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    set1 = set()\n    for sublist in list1:\n        subtuple = tuple(sublist)\n        set1.add(subtuple)\n    return set1\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Your function should take one argument, the list.\n    # You should return a dictionary where each element of the list is a key, and the value is the frequency of that element in the list.\n    # The returned dictionary should be in descending order.\n    # You can use a for loop to iterate through the list.\n    # You can use the set() function to turn every list element into a set of its own.\n    # You can then use the len() function to find the number of items in the set.\n    # You can then use the dict() function to create a dictionary from the list, using each list element as a key and its frequency as its value.\n    # You can use the items() function to return a list of tuples.\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def get_count(list1):\n        return len(set(tuple(sublist) for sublist in list1))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = [(0, 1, 2), (1, 2, 0), (2, 0, 1)]\n    print(\"Original list of tuples:\") \n    print(test_list) \n    print() \n    result_list = list(combinations(test_list, 2)) \n    print(\"Resultant list of tuples:\") \n    print(result_list)\n    print()\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = [sum(i) for i in combinations(test_list, 2)]\n    return sum_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(1,len(test_list)):\n        sum_list.append(combinations(test_list,i))\n        print(sum_list)\n    print(\"Combinations are:\")\n    for i in range(len(sum_list)):\n        print(list(sum_list[i]))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, 2)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, 2)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum = 3\n    comb = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            s = test_list[i] + test_list[j]\n            if s == sum:\n                comb.append((test_list[i],test_list[j]))\n    return comb\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # import itertools\n    # for i in itertools.combinations(tuple,2):\n    #     print(i)\n    # # Get all combinations of [1, 2, 3]\n    # # and length 2\n    # print(list(combinations([1, 2, 3], 2)))\n    # print(list(combinations(range(4), 3)))\n    # print(list(combinations(\"GeeksForGeeks\", 2)))\n    tuple_list = [(1, 2), (1, 4), (1, 6), (1, 8), (2, 3), (2, 6), (3, 4), (3, 6), (4, 6), (5, 6), (5, 7), (5, 8), (6, 7), (6, 8), (7, 8)]\n    list1 = []\n    list2 = []\n    list3 = []\n    list4 = []\n    list5 = []\n    list6 = []\n    list7 = []\n    list8 = []\n    list9 = []\n    list10 = []\n    list11 = []\n    list12 = []\n    list13 = []\n    list14 = []\n    list15 = []\n    list16 = []\n    list17 = []\n    list18 = []\n    list19 = []\n    list20 = []\n    list21 = []\n    list22 = []\n    list23 = []\n    list24 = []\n    list25 = []\n    list26 = []\n    list27 = []\n    list28 = []\n    list29 = []\n    list30 = []\n    list31 = []\n    list32 = []\n    list33 = []\n    list34 = []\n    list35 = []\n    list36 = []\n    list37 = []\n    list38 = []\n    list39 = []\n    list40 = []\n    list41 = []\n    list42 = []\n    list43 = []\n    list44 = []\n    list45 = []\n    list46 = []\n    list47 = []\n    list48 = []\n    list49 = []\n    list50 = []\n    list51 = []\n    list52 = []\n    list53 = []\n    list54 = []\n    list55 = []\n    list56 = []\n    list57 = []\n    list58 = []\n    list59 = []\n    list60 = []\n    list61 = []\n    list62 = []\n    list63 = []\n    list64 = []\n    list65 = []\n    list66 = []\n    list67 = []\n    list68 = []\n    list69 = []\n    list70 = []\n    list71 = []\n    list72 = []\n    list73 = []\n    list74 = []\n    list75 = []\n    list76 = []\n    list77 = []\n    list78 = []\n    list79 = []\n    list80 = []\n    list81 = []\n    list82 = []\n    list83 = []\n    list84 = []\n    list85 = []\n    list86 = []\n    list87 = []\n    list88 = []\n    list89 = []\n    list90 = []\n    list91 = []\n    list92 = []\n    list93 = []\n    list94 = []\n    list95 = []\n    list96 = []\n    list97 = []\n    list98 = []\n    list99 = []\n    list100 = []\n    list101 = []\n    list102 = []\n    list103 = []\n    list104 = []\n    list105 = []\n    list106 = []\n    list107 = []\n    list108 = []\n    list109 = []\n    list110 = []\n    list111 = []\n    list112 = []\n    list113 = []\n    list114 = []\n    list115 = []\n    list116 = []\n    list117 = []\n    list118 = []\n    list119 = []\n    list120 = []\n    list121 = []\n    list122 = []\n    list123 = []\n    list124 = []\n    list125 = []\n    list126 = []\n    list127 = []\n    list128 = []\n    list129 = []\n    list130 = []\n    list131 = []\n    list132 = []\n    list133 = []\n    list134 = []\n    list135 = []\n    list136 = []\n    list137 = []\n    list138 = []\n    list139 = []\n    list140 = []\n    list141 = []\n    list142 = []\n    list143 = []\n    list144 = []\n    list145 = []\n    list146 = []\n    list147 = []\n    list148 = []\n    list149 = []\n    list150 = []\n    list151 = []\n    list152 = []\n    list153 = []\n    list154 = []\n    list155 = []\n    list156 = []\n    list157 = []\n    list158 = []\n    list159 = []\n    list160 = []\n    list161 = []\n    list162 = []\n    list163 = []\n    list164 = []\n    list165 = []\n    list166 = []\n    list167 = []\n    list168 = []\n    list169 = []\n    list170 = []\n    list171 = []\n    list172 = []\n    list173 = []\n    list174 = []\n    list175 = []\n    list176 = []\n    list177 = []\n    list178 = []\n    list179 = []\n    list180 = []\n    list181 = []\n    list182 = []\n    list183 = []\n    list184 = []\n    list185 = []\n    list186 = []\n    list187 = []\n    list188 = []\n    list189 = []\n    list190 = []\n    list191 = []\n    list192 = []\n    list193 = []\n    list194 = []\n    list195 = []\n    list196 = []\n    list197 = []\n    list198 = []\n    list199 = []\n    list200 = []\n    list201 = []\n    list202 = []\n    list203 = []\n    list204 = []\n    list205 = []\n    list206 = []\n    list207 = []\n    list208 = []\n    list209 = []\n    list210 = []\n    list211 = []\n    list212 = []\n    list213 = []\n    list214 = []\n    list215 = []\n    list216 = []\n    list217 = []\n    list218 = []\n    list219 = []\n    list220 = []\n    list221 = []\n    list222 = []\n    list223 = []\n    list224 = []\n    list225 = []\n    list226 = []\n    list227 = []\n    list228 = []\n    list229 = []\n    list230 = []\n    list231 = []\n    list232 = []\n    list233 = []\n    list234 = []\n    list235 = []\n    list236 = []\n    list237 = []\n    list238 = []\n    list239 = []\n    list240 = []\n    list241 = []\n    list242 = []\n    list243 = []\n    list244 = []\n    list245 = []\n    list246 = []\n    list247 = []\n    list248 = []\n    list249 = []\n    list250 = []\n    list251 = []\n    list252 = []\n    list253 = []\n    list254 = []\n    list255 = []\n    list256 = []\n    list257 = []\n    list258 = []\n    list259 = []\n    list260 = []\n    list261 = []\n    list262 = []\n    list263 = []\n    list264 = []\n    list265 = []\n    list266 = []\n    list267 = []\n    list268 = []\n    list269 = []\n    list270 = []\n    list271 = []\n    list272 = []\n    list273 = []\n    list274 = []\n    list275 = []\n    list276 = []\n    list277 = []\n    list278 = []\n    list279 = []\n    list280 = []\n    list281 = []\n    list282 = []\n    list283 = []\n    list284 = []\n    list285 = []\n    list286 = []\n    list287 = []\n    list288 = []\n    list289 = []\n    list290 = []\n    list291 = []\n    list292 = []\n    list293 = []\n    list294 = []\n    list295 = []\n    list296 = []\n    list29"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [list(t) for t in combinations(test_list, 2) if sum(t) in test_list]\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    unique_combinations = []\n    for i in range(1,len(test_list)+1):\n        temp = list(combinations(test_list,i))\n        for j in temp:\n            unique_combinations.append(j)\n    print(unique_combinations)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # return list(combinations(test_list, 3))\n    return list(combinations(test_list, 2))\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    result = 0\n    for i in range(1, math.ceil(math.sqrt(n))): \n        if (n % i == 0): \n            if (n / i == i): \n                result += 1\n            else: \n                result += 2\n    return result \n    \ndef count_divisors_sqrt(n):\n    '''\n    Write a python program to check whether the count of divisors is even for all the numbers between 1 and n using while loop. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    c = 1\n    while(n > c): \n        if(count_divisors(c) % 2 == 0): \n            print(\"even number\", c)\n        else:\n            print(\"odd number\", c)\n        c += 1\ncount_divisors_sqrt(5000)\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    x = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                x += 1\n            else : \n                x += 2\n    return x\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if n / i == i : \n                count += 1\n            else : \n                count += 2\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,(n // 2) + 1) : \n        if n % i == 0 : \n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    if count%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n)) + 1) : \n        if(n % i == 0) : \n            if(n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            count += 1\n    if count % 2 == 0 : \n        return \"Even\"\n    else : \n        return \"Odd\"\n    \ndef gcd(a,b) : \n    '''\n    Write a python function to print greatest common divisor of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-13.php\n    '''\n    if b == 0 : \n        return a\n    else : \n        return gcd(b,a%b)\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        return 3\n    if n == 4: \n        return 6\n    if n == 5: \n        return 4\n    divisors = 0\n    for i in range(1, n+1): \n        if n % i == 0: \n            divisors += 1\n    return divisors \n    \n    \ndef group_of_students(arr) : \n    '''\n    Write a python function to create groups of students according to their age. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if len(arr) < 2: \n        return arr \n    sorted_arr = sorted(arr)\n    i = 0 \n    while i < len(sorted_arr)-1: \n        if sorted_arr[i+1] - sorted_arr[i] == 1: \n            i += 1 \n        else: \n            i += 2 \n    return sorted_arr[0::i]\n    \n    \ndef remove_zeros(arr): \n    '''\n    Write a python function to remove zeros from an array. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return [i for i in arr if i!=0] \n    \n    \ndef array_diff_sum(arr1, arr2) : \n    '''\n    Write a python function to find the sum of the elements of an array minus all the occurrences of its first occuring element. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    diff = sum(arr1) - sum([i for i in arr1 if i in arr2])\n    return diff \n    \n    \ndef array_diff_sum2(arr1, arr2): \n    '''\n    Write a python function to find the sum of the elements of an array minus all the occurrences of its first occuring element. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return sum(arr1) - sum( [i for i in arr1 if i in arr2] ) \n    \n    \ndef bubble_sort_random_nums(arr): \n    '''\n    Write a python function to sort an array using bubble sort. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] > arr[j+1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr \n    \n    \ndef bubble_sort_asc(arr): \n    '''\n    Write a python function to sort an array using bubble sort. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] > arr[j+1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr \n    \n    \ndef merge_sort(arr): \n    '''\n    Write a python function to sort an array using merge sort. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if len(arr) < 2: \n        return arr \n    mid = len(arr)//2\n    left_arr = merge_sort(arr[:mid])\n    right_arr = merge_sort(arr[mid:])\n    arr = []\n    left_index = 0 \n    right_index = 0 \n    while left_index < len(left_arr) and right_index < len(right_arr): \n        if left_arr[left_index] < right_arr[right_index]: \n            arr.append(left_arr[left_index])\n            left_index += 1 \n        else: \n            arr.append(right_arr[right_index])\n            right_index += 1 \n    arr += left_arr[left_index:]\n    arr += right_arr[right_index:]\n    return arr\n    \n    \ndef bubble_sort(arr): \n    '''\n    Write a python function to sort an array using bubble sort. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] > arr[j+1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr \n    \n    \ndef group_of_strings(arr): \n    '''\n    Write a python function to group an array of strings into an array of arrays of strings. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    groups = []\n    for i in set(arr): \n        groups.append([j for j in arr if j == i])\n    return groups \n    \n    \ndef array_pair_sum(arr, k): \n    '''\n    Write a python function to find the pair of integers whose sum equals a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(len(arr)-1): \n        for j in range(1, len(arr)): \n            if arr[i] + arr[j] == k: \n                return (arr[i], arr[j]) \n    return []\n    \n    \ndef array_pair_sum2(arr, k): \n    '''\n    Write a python function to find the pair of integers whose sum equals a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    seen = {}\n    for num in arr: \n        target = k - num \n        if target not in seen: \n            seen[num] = True \n        else: \n            return (num, target)\n    return []\n    \n    \ndef array_pair_sum3(arr, k): \n    '''\n    Write a python function to find the pair of integers whose sum equals a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return [i for i in arr if i in set(arr) - set([k-i for i in arr])]\n    \n    \ndef array_pair_sum4(arr, k): \n    '''\n    Write a python function to find the pair of integers whose sum equals a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return [x for x in arr if k-x in arr]\n    \n    \ndef array_pair_sum5(arr, k): \n    '''\n    Write a python function to find the pair of integers whose sum equals a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return list(k - x for x in arr if k - x in arr)\n    \n    \ndef array_pair_sum6(arr, k): \n    '''\n    Write a python function to find the pair of integers whose sum equals a given number. https:/"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n // i == i) : \n                count += 1\n            else : \n                count += 2\n    return count \ndef fizz_buzz(n) : \n    '''\n    Write a Python function to print the numbers from 1 to N.\n    But for multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\".\n    For numbers which are multiples of both three and five print \"FizzBuzz\".\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-15.php\n    '''\n    for i in range(1, n + 1) : \n        if (i % 5 == 0) and (i % 3 == 0) : \n            print('FizzBuzz')\n        elif (i % 5 == 0) : \n            print('Buzz')\n        elif (i % 3 == 0) : \n            print('Fizz')\n        else : \n            print(i)\ndef beautiful_number(n) : \n    '''\n    Write a Python function to print the first N (1<=N<=100) beautiful numbers.\n    Beautiful numbers are numbers whose digits are beautiful. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-19.php\n    '''\n    for i in range(1, n+1) : \n        number = i\n        sum = 0\n        while(number!= 0) : \n            digit = number % 10\n            sum += digit\n            number //= 10\n        if (sum%7 == 0) : \n            print(i)\ndef prime_number(n) : \n    '''\n    Write a Python function to print all prime numbers from 1 to N. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-13.php\n    '''\n    for i in range(2, n + 1) : \n        is_prime = 1\n        for j in range(2, i) : \n            if (i % j == 0) : \n                is_prime = 0\n                break\n        if (is_prime) : \n            print(i)\ndef print_stars(n) : \n    '''\n    Write a Python function to print a hollow star pattern. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-18.php\n    '''\n    for i in range(1, n + 1) : \n        if (i == 1) : \n            print(\"*\")\n        else : \n            print(\"*\" + \" \" * (n - 2) + \"*\")\ndef remove_duplicates(list) : \n    '''\n    Write a Python function to remove duplicates from a list. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-14.php\n    '''\n    without_duplicates = list(set(list))\n    return without_duplicates\ndef fibonacci(n) : \n    '''\n    Write a Python program to print the Fibonacci series up to n. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-3.php\n    '''\n    a = 0\n    b = 1\n    if (n == 0) : \n        print(a)\n    elif (n == 1) : \n        print(b)\n    else : \n        print(a)\n        print(b)\n        for i in range(2, n) : \n            c = a + b\n            a = b\n            b = c\n            print(c)\ndef sequence_search(list, number) : \n    '''\n    Write a Python function to search a number in a list.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-4.php\n    '''\n    for i in range(len(list)) : \n        if (list[i] == number) : \n            return i\n    return -1\ndef search_rotated_array(list, key) : \n    '''\n    Write a Python function to search a number in a sorted and rotated array. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-9.php\n    '''\n    start_index = 0\n    end_index = len(list) - 1\n    while (start_index <= end_index) : \n        mid = (start_index + end_index) // 2\n        if (list[mid] == key) : \n            return True\n        if (list[mid] < list[end_index]) : \n            if (key >= list[mid] and key <= list[end_index]) : \n                start_index = mid + 1\n            else : \n                end_index = mid - 1\n        else : \n            if (key >= list[start_index] and key <= list[mid]) : \n                end_index = mid - 1\n            else : \n                start_index = mid + 1\n    return False\ndef min_difference(list) : \n    '''\n    Write a Python function to find the minimum difference between the successive elements of a list. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-12.php\n    '''\n    min_diff = list[1] - list[0]\n    for i in range(len(list) - 1) : \n        if (list[i + 1] - list[i]) < min_diff : \n            min_diff = list[i + 1] - list[i]\n    return min_diff\ndef find_smallest_missing_positive(list) : \n    '''\n    Write a Python function to sort a list of positive numbers in ascending order where each number is at most n. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-11.php\n    '''\n    for i in range(len(list)) : \n        while True : \n            if (list[i]!= i + 1 and list[i] > 0 and list[i] <= len(list)) : \n                temp = list[i]\n                list[i] = list[temp - 1]\n                list[temp - 1] = temp\n            else : \n                break\n    for i in range(len(list)) : \n        if (list[i]!= i + 1) : \n            return i + 1\n    return len(list) + 1\ndef find_missing_number(list) : \n    '''\n    Write a Python function to find the first missing positive integer in a given list of integers. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-10.php\n    '''\n    for i in range(len(list)) : \n        while True : \n            if (list[i]!= i + 1 and list[i] > 0 and list[i] <= len(list)) : \n                temp = list[i]\n                list[i] = list[temp - 1]\n                list[temp - 1] = temp\n            else : \n                break\n    for i in range(len(list)) : \n        if (list[i]!= i + 1) : \n            return i + 1\n    return len(list) + 1\ndef sieve_of_eratosthenes(n) : \n    '''\n    Write a Python program to print the prime numbers from 1 to N. \n    https://www.w3resource.com/python-e"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt=0\n    for i in range(1,n//2+1) : \n        if n%i==0 : \n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) % 2 == 0:\n        return \"Please enter an odd length array\"\n    else:\n        return sum(arr[i] for i in range(0,len(arr),2))\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Write your code here\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(i, len(arr)):\n            sum = sum + arr[j]\n            if j % 2!= 0:\n                print(sum, end ='')\n            else:\n                continue\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            sum_subarrays += sum(arr[i:j+1])\n    return sum_subarrays\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    def sum_odd_length_subarray(arr, start, end):\n        '''\n        a method to find the sum of all odd length subarrays\n        '''\n        sum = 0\n        for i in range(start, end+1):\n            sum += arr[i]\n        return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([arr[i:i+3] for i in range(len(arr)) if len(arr[i:i+3]) % 2!= 0])"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if len(arr[i])%2!=0:\n            for j in range(len(arr[i])):\n                if len(arr[i])==1:\n                    sum+=arr[i][j]\n                elif len(arr[i])==2:\n                    sum+=arr[i][j]\n                else:\n                    sum+=arr[i][j]\n                    break\n    return sum\narr = [[1,1,2,1,1],[2,2],[2,1,1,1]]\nprint(odd_length_sum(arr))\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    sum = 0\n    for i in range(len(arr)):\n        j = 0\n        while(j+i < len(arr)):\n            sum += arr[j+i]\n            j += 2\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(i) for i in arr if len(i) % 2!= 0])\n    \n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_arr = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if (j - i) % 2 == 1:\n                sum_arr += sum(arr[i:j])\n    return sum_arr\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # r,g,b = rgb_to_dec(r,g,b)\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    minimum = min(r, min(g, b))\n    maximum = max(r, max(g, b))\n    V = maximum\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return int(h), int(s), int(v)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    Max = max(r, g, b)\n    Min = min(r, g, b)\n    V = Max\n    \n    if V == Min:\n        return 0.0, 0.0, V\n    \n    s = (Max - Min) / Max\n    \n    if V == r:\n        H = (60 * ((g - b) / (Max - Min)) + 360) % 360\n    elif V == g:\n        H = (60 * ((b - r) / (Max - Min)) + 120) % 360\n    elif V == b:\n        H = (60 * ((r - g) / (Max - Min)) + 240) % 360\n    \n    return H / 2, s, V\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    diff_color = max_color - min_color\n    if max_color == min_color:\n        h = 0\n    elif max_color == r:\n        h = (60 * ((g - b) / diff_color) + 360) % 360\n    elif max_color == g:\n        h = (60 * ((b - r) / diff_color) + 120) % 360\n    elif max_color == b:\n        h = (60 * ((r - g) / diff_color) + 240) % 360\n    if max_color == 0:\n        s = 0\n    else:\n        s = (diff_color / max_color) * 100\n    v = max_color * 100\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    newlist = []\n    for i in list1:\n        if i % 2 == 0:\n            newlist.append(i)\n    product = 1\n    for i in newlist:\n        product *= i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    l = []\n    for i in list1:\n        if i%2 == 0:\n            l.append(i)\n        elif i%2!= 0:\n            l.append(i)\n    if len(l)%2!= 0:\n        l.pop()\n    l1 = []\n    for i in list1:\n        if i%2 == 0:\n            l1.append(i)\n        elif i%2!= 0:\n            l1.append(i)\n    return l,l1\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even)>0 and len(odd)>0:\n        print('Product of first even number and odd number of a given list:',even[0]*odd[0])\n    elif len(even)>0 and len(odd)==0:\n        print('Product of first even number of a given list:',even[0]*0)\n    elif len(even)==0 and len(odd)>0:\n        print('Product of first odd number of a given list:',odd[0]*0)\n    else:\n        print('Product of first even and odd number of a given list:',0)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum_of_even = 0\n    sum_of_odd = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            sum_of_even = sum_of_even + i\n        else:\n            sum_of_odd = sum_of_odd + i\n    return sum_of_even * sum_of_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            prod = prod * list1[i]\n        else:\n            prod = prod * list1[i]\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i % 2 == 0:\n            list2.append(i)\n    prod = 1\n    for j in list2:\n        prod = prod * j\n    print(prod)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=1\n    odd=1\n    for x in list1:\n        if(x%2==0):\n            even=even*x\n        else:\n            odd=odd*x\n    print(even,odd)\n    return even,odd\nmul_even_odd([2,3,4,5])\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    num_even = []\n    num_odd = []\n    for i in list1:\n        if i % 2 == 0:\n            num_even.append(i)\n        else:\n            num_odd.append(i)\n    return(num_even[0]*num_odd[1])\nlist1 = [1,2,3,4,5,6,7,8]\nprint(mul_even_odd(list1))\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for num in list1:\n        if num % 2 == 0:\n            prod = prod * num\n        else:\n            pass\n    return prod\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_str = test_str.replace('(','')\n    new_str = new_str.replace(')','')\n    new_str = new_str.replace(',','')\n    list_int = new_str.split(' ')\n    return tuple(list_int)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #res = []\n    #for s in test_str.split(' '):\n    #    try:\n    #        res.append(int(s))\n    #    except ValueError:\n    #        res.append(s)\n    #return tuple(res)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    lst = test_str.strip('()').split(',')\n    try:\n        lst = list(map(int, lst))\n    except ValueError:\n        print('Invalid input data!')\n        exit()\n    return tuple(lst)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(x) for x in test_str.split(',')])\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval('(' + test_str + ')')\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str.split(' ')[0]), int(test_str.split(' ')[1])\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tup = tuple(test_str.split(','))\n    return tup\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return 0\n    for i in range(len(a)):\n        if x > a[i]:\n            continue\n        else:\n            return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo, hi = 0, len(a)\n    while lo < hi:\n        mid = (lo+hi)//2\n        if x > a[mid]:\n            lo = mid+1\n        else:\n            hi = mid\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i] >= x:\n            return i\n    return n\ndef insertion_sort(a):\n    '''\n    Insertion sort\n    '''\n    n = len(a)\n    for j in range(1, n):\n        i = j\n        while i > 0 and a[i] < a[i-1]:\n            temp = a[i]\n            a[i] = a[i-1]\n            a[i-1] = temp\n            i -= 1\n    return a\ndef insertion_sort_reversed(a):\n    '''\n    Insertion sort in reversed order\n    '''\n    n = len(a)\n    for j in range(1, n):\n        i = j\n        while i > 0 and a[i] > a[i-1]:\n            temp = a[i]\n            a[i] = a[i-1]\n            a[i-1] = temp\n            i -= 1\n    return a\ndef selection_sort(a):\n    '''\n    Selection sort\n    '''\n    n = len(a)\n    for j in range(n):\n        min_index = j\n        for i in range(j+1, n):\n            if a[i] < a[min_index]:\n                min_index = i\n        temp = a[j]\n        a[j] = a[min_index]\n        a[min_index] = temp\n    return a\ndef insertion_sort_recursive(a):\n    '''\n    Insertion sort with recursive call\n    '''\n    n = len(a)\n    for j in range(1, n):\n        temp = a[j]\n        i = j\n        while i > 0 and a[i-1] > temp:\n            a[i] = a[i-1]\n            i -= 1\n        a[i] = temp\n    return a\ndef merge_sort(a):\n    '''\n    Merge sort\n    '''\n    n = len(a)\n    if n <= 1:\n        return a\n    mid = n // 2\n    left = a[:mid]\n    right = a[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    a = merge(left, right)\n    return a\ndef merge(left, right):\n    '''\n    Merge two arrays into one\n    '''\n    result = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            result.append(left[left_index])\n            left_index += 1\n        else:\n            result.append(right[right_index])\n            right_index += 1\n    result.extend(left[left_index:])\n    result.extend(right[right_index:])\n    return result\ndef quicksort(a):\n    '''\n    Quicksort\n    '''\n    n = len(a)\n    if n <= 1:\n        return a\n    pivot = a[0]\n    left = []\n    right = []\n    for i in range(1, n):\n        if a[i] < pivot:\n            left.append(a[i])\n        else:\n            right.append(a[i])\n    return quicksort(left) + [pivot] + quicksort(right)\ndef quicksort_inplace(a):\n    '''\n    Quicksort with inplace sort\n    '''\n    n = len(a)\n    if n <= 1:\n        return a\n    pivot = a[0]\n    left = []\n    right = []\n    for i in range(1, n):\n        if a[i] < pivot:\n            left.append(a[i])\n        else:\n            right.append(a[i])\n    left = quicksort_inplace(left)\n    right = quicksort_inplace(right)\n    return left + [pivot] + right\ndef mergesort(a):\n    '''\n    Merge sort\n    '''\n    n = len(a)\n    if n <= 1:\n        return a\n    mid = n // 2\n    left = mergesort(a[:mid])\n    right = mergesort(a[mid:])\n    return merge(left, right)\ndef mergesort_inplace(a):\n    '''\n    Merge sort inplace\n    '''\n    n = len(a)\n    if n <= 1:\n        return a\n    mid = n // 2\n    left = mergesort_inplace(a[:mid])\n    right = mergesort_inplace(a[mid:])\n    a = merge_inplace(left, right)\n    return a\ndef merge_inplace(left, right):\n    '''\n    Merge two arrays into one inplace\n    '''\n    n = len(left)\n    m = len(right)\n    left_index = 0\n    right_index = 0\n    while left_index < n and right_index < m:\n        if left[left_index] < right[right_index]:\n            left_index += 1\n        else:\n            left_index_2 = left_index + 1\n            while left_index_2 < n and left[left_index_2] > right[right_index]:\n                left_index_2 += 1\n            right_index_2 = right_index + 1\n            while right_index_2 < m and left[left_index_2] > right[right_index_2]:\n                right_index_2 += 1\n            if left_index_2 >= n:\n                for i in range(right_index, m):\n                    left[left_index] = right[i]\n                break\n            if right_index_2 >= m:\n                for i in range(left_index, left_index_2):\n                    left[left_index] = left[i]\n                break\n            for i in range(right_index, right_index_2):\n                left[left_index] = right[i]\n            for i in range(left_index_2, n):\n                left[i] = left[i]\n            break\n    return left\ndef heapify(a, n, i):\n    '''\n    Heapify sub-tree rooted at index i\n    '''\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and a[l] > a[largest]:\n        largest = l\n    if r < n and a[r] > a[largest]:\n        largest = r\n    if largest!= i:\n        a[i], a[largest] = a[largest], a[i]\n        heapify(a, n, largest)\ndef heap_sort(a):\n    '''\n    Heap sort\n    '''\n    n = len(a)\n    for i in range(n, -1, -1):\n        heapify(a, n, i)\n    for i in range(n-1, 0, -1):\n        a[i], a[0] = a[0], a[i]\n        heapify(a, i, 0)\n    return a\ndef heapsort_inplace(a):\n    '''\n    Heap sort inplace\n    '''\n    n = len(a)\n    for i in range(n, -1, -1):\n        heapify_inplace(a, n, i)\n    for i in range(n-1, 0, -1):\n        a[0], a[i] = a[i], a[0]\n        heapify_inplace(a, i, 0)\n    return a\ndef heapify_inplace(a, n, i):\n    '''\n    Heapify sub-tree rooted at index i\n    '''\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and a[l] > a[largest]:\n        largest = l\n    if r < n and a[r] > a[largest]:\n        largest = r\n    if largest!= i:\n        a[i], a[largest] = a[largest], a[i]\n        h"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    result = re.search(pattern, text)\n    if result:\n        print(\"Match found: \", result.group())\n    else:\n        print(\"No match was found.\")\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab{3}\")\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return \"Not found\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall(r'ab{3}',text)\n    if match:\n        return len(match)\n    else:\n        return 0\ndef text_match_substring(text):\n    '''\n    Write a function that matches a string that has an a followed by 3 'b'.\n    '''\n    match = re.search(r'ab{3}',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_braces(text):\n    '''\n    Write a function that matches a string that has 3 groups of braces.\n    '''\n    match = re.search(r'\\{.*\\}.*\\{.*\\}.*\\{.*\\}', text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_at(text):\n    '''\n    Write a function that matches a string that has an a followed by anything, ending in anything.\n    '''\n    match = re.search(r'a.*',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_at_beginning(text):\n    '''\n    Write a function that matches a string that has an a followed by anything, starting with anything.\n    '''\n    match = re.search(r'^a.*',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_three_vowels(text):\n    '''\n    Write a function that matches a string that has three vowels in a row.\n    '''\n    match = re.search(r'.*[aeiou].*[aeiou].*[aeiou]',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_double_letter(text):\n    '''\n    Write a function that matches a string that has a pair of any two letters that appears at least twice in the string without overlapping, like xyxy (xy) or aabcdefgaa (aa), but not like aaa (aa, but it overlaps).\n    '''\n    match = re.search(r'((\\w)\\2{1})',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_ends_with_consonant(text):\n    '''\n    Write a function that matches a string that ends in a consonant.\n    '''\n    match = re.search(r'^.*[^aeiou].*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_four_vowels(text):\n    '''\n    Write a function that matches a string that has four vowels in a row.\n    '''\n    match = re.search(r'^.*[^aeiou].*[^aeiou].*[^aeiou].*[^aeiou].*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_pairs(text):\n    '''\n    Write a function that matches a string that has a pair of any two letters.\n    '''\n    match = re.search(r'(.*[a-zA-Z])\\1',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_ends_with_consonant_vowel(text):\n    '''\n    Write a function that matches a string that ends in a consonant.\n    '''\n    match = re.search(r'^.*[aeiou].*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_four_vowels_consonant(text):\n    '''\n    Write a function that matches a string that has four vowels in a row and then a consonant.\n    '''\n    match = re.search(r'^.*[aeiou].*[aeiou].*[aeiou].*[^aeiou].*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_between(text):\n    '''\n    Write a function that matches a string that has an a followed by anything, ending in anything but not starting with an a.\n    '''\n    match = re.search(r'a.*[^a]$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_three_vowels_consonant(text):\n    '''\n    Write a function that matches a string that has three vowels in a row and then a consonant.\n    '''\n    match = re.search(r'^.*[aeiou].*[aeiou].*[^aeiou].*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_ends_with_num(text):\n    '''\n    Write a function that matches a string that ends in a number.\n    '''\n    match = re.search(r'^.*[0-9].*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_three_consonants(text):\n    '''\n    Write a function that matches a string that has three consonants in a row.\n    '''\n    match = re.search(r'^.*[b-dg-hj-kq-tv-z].*[b-dg-hj-kq-tv-z].*[b-dg-hj-kq-tv-z].*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_ends_with_num_vowel(text):\n    '''\n    Write a function that matches a string that ends in a number followed by a vowel.\n    '''\n    match = re.search(r'^.*[0-9].*[aeiou].*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_ends_with_vowel(text):\n    '''\n    Write a function that matches a string that ends in a vowel.\n    '''\n    match = re.search(r'^.*[aeiou].*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_three_consonants_vowel(text):\n    '''\n    Write a function that matches a string that has three consonants in a row followed by a vowel.\n    '''\n    match = re.search(r'^.*[b-dg-hj-kq-tv-z].*[aeiou].*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_two_digits_number(text):\n    '''\n    Write a function that matches a string that has two digits.\n    '''\n    match = re.search(r'^.*\\d.*\\d.*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_repeat_char(text):\n    '''\n    Write a function that matches a string that has a char repeat two or more times in a row.\n    '''\n    match = re.search(r'^.*(\\w)\\1.*\\1.*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matches!\"\ndef text_match_two_different_words(text):\n    '''\n    Write a function that matches a string that has two different words.\n    '''\n    match = re.search(r'^.*\\w.*\\s.*\\w.*$',text)\n    if match:\n        return match.group()\n    else:\n        return \"No matche"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.match(r'a{3}b', text):\n        return 'Match'\n    return 'No Match'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab{3}\")\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r\"ab{3}\", text)\n    if result!= None:\n        return 'found'\n    else:\n        return 'not found'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    p = re.compile(r\"ab{3}\")\n    p.findall(text)\n    for match in p.findall(text):\n        return match\ndef text_match_three_with_re(text):\n    return re.findall(r\"ab{3}\", text)\n    \n    \ndef text_match_three_with_split(text):\n    return re.split(r'ab{3}', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = re.compile('ab{3}')\n    mo = regex.search(text)\n    if mo!= None:\n        return mo.group()\n    else:\n        return -1\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '^a..b.b..b$'\n    result = re.findall(pattern, text)\n    return result!= []\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.findall(r\"ab{3}\", text)\n    if result:\n        print(f\"result = {result}\")\n        return True\n    return False\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_str = ''.join(test_str)\n    print(test_str)\n    print(test_list)\n    return tuple(test_list), test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple = new_tuple + test_str\n    print(new_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str) + tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    str_list = test_str.split()\n    \n    if len(test_list) == 0:\n        return None\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple1 = (test_str, test_list)\n    return tuple1\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = test_list.split(test_str)\n    return tuple(new_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return ()\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i = 0\n    for num in nums:\n        if i%2 == 0 and num%2!= 0:\n            return False\n        elif i%2!= 0 and num%2 == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # for num in nums:\n    #     if num % 2!= 0:\n    #         return False\n    # return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    lst = nums.copy()\n    for i in range(0, len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2!= 0:\n                lst.remove(lst[i])\n    if len(lst) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    lst = nums\n    length = len(lst)\n    if length % 2 == 0:\n        for num in range(length - 1):\n            if lst[num] % 2 == 0 and lst[num + 1] % 2 == 0:\n                return True\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = [num for num in nums if num % 2 == 0]\n    return True if len(even_numbers) == len(nums) else False\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = all([nums[i]%2==0 for i in range(0,len(nums),2)])\n    return result\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Method 1\n    # for tup in test_tup:\n    #     for elem in tup:\n    #         if elem not in test_tup:\n    #             test_tup.remove(tup)\n    #             break\n    # return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = list(test_tup)\n    #count = 0\n    for i in range(len(test_list)):\n        test_list = list(test_tup)\n        if type(test_list[i]) == tuple:\n            test_list.remove(test_list[i])\n        test_tup = tuple(test_list)\n    return test_tup\n    #print(test_list)\n    #print(count)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    lst = []\n    for i in test_tup:\n        if type(i) == tuple:\n            pass\n        else:\n            lst.append(i)\n    return tuple(lst)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                new_tup += (j,)\n        else:\n            new_tup += (i,)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup_cp = list(test_tup)\n    remove_nested_helper(test_tup_cp, len(test_tup_cp))\n    return tuple(test_tup_cp)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i) == type(test_tup[0]):\n            if i not in new_tup:\n                new_tup.append(i)\n        else:\n            if i not in new_tup:\n                new_tup.append(i)\n    return tuple(new_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # You may assume that the input tuple is always a valid tuple.\n    # The input tuple can contain duplicate elements.\n    # The input tuple should not be empty.\n    # Example\n    # Input : tup = (10, (20, 30), 40)\n    # Output: tup = (10, 40)\n    # The list is nested.\n    # 20, 30 is removed from the input tuple.\n    \n    lst = []\n    for i in test_tup:\n        if type(i) == list:\n            lst.append(i[0])\n        else:\n            lst.append(i)\n    return tuple(lst)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for item in test_tup if type(item)!= tuple]\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    for tup in test_tup:\n        if type(tup) is tuple:\n            test_tup.remove(tup)\n            remove_nested(test_tup)\n    return test_tup\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for list in input_list:\n        if isinstance(list, list):\n            counter += 1\n    return counter\n    \ndef get_even_length(input_list):\n    '''\n    Write a python function to return the index of first even length in a given list.\n    '''\n    # TODO: finish this function\n    length = 0\n    for index in input_list:\n        if isinstance(index, list):\n            length = length + len(index)\n    for index in input_list:\n        if length % 2 == 0:\n            return input_list.index(index)\n        length = length - 1\n    return -1\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for each_list in input_list:\n        if isinstance(each_list,list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list: \n        if type(x) == list: \n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return 0\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            counter += 1\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == type([]):\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start+end)//2\n        if arr[mid] > x:\n            end = mid -1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            if (mid == len(arr)-1) or (arr[mid+1]!=x):\n                return mid\n            else:\n                start = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # if arr is sorted\n    if sorted(arr)==arr:\n        return len(arr)-1\n    else:\n        for i in range(len(arr)-1):\n            if arr[i]<=x and arr[i+1]>x:\n                return i\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] < x:\n            low = mid+1\n        elif arr[mid] > x:\n            high = mid-1\n        else:\n            if mid == len(arr)-1 or arr[mid+1]!= x:\n                return mid\n            else:\n                low = mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    low = 0\n    high = n-1\n    while(low<=high):\n        mid = low+(high-low)//2\n        if arr[mid] == x:\n            if mid+1 < n and arr[mid+1] == x:\n                high = mid\n            else:\n                return mid\n        elif arr[mid] < x:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if n<=1:\n        return -1\n    if n==2:\n        if arr[0]==x:\n            return 0\n        return 1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while end >= start:\n        mid = (start + end) // 2\n        if arr[mid] > x:\n            end = mid - 1\n        elif arr[mid] < x:\n            start = mid + 1\n        elif arr[mid] == x:\n            if mid == len(arr)-1 or arr[mid+1]!= x:\n                return mid\n            else:\n                start = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=len(arr)-1\n    while i>=0:\n        if arr[i]==x:\n            return i\n        i-=1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    first=0\n    last=len(arr)-1\n    while first<=last:\n        mid=(first+last)//2\n        if arr[mid]>x:\n            last=mid-1\n        elif arr[mid]<x:\n            first=mid+1\n        else:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                first=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=len(arr)\n    for i in range(l-1,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = input('Write something: ')\n    r = re.compile('a.*b$')\n    if r.match(text):\n        return print('\\nMatching text.\\n')\n    else:\n        return print('\\nMatching not found.\\n')\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    reg = \"^.*a.*b$\"\n    result = re.match(reg, text)\n    if result:\n        return result.group()\n    return None\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.lower()\n    a = re.search(r'a.*b$',text)\n    print(a)\n    return True if a else False\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = \"a.*b$\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.*?b'\n    if re.match(pattern, text):\n        return 'found'\n    else:\n        return 'not found'\nprint(text_starta_endb('abc'))\nprint(text_starta_endb('abcde'))\nprint(text_starta_endb('aabcde'))\nprint(text_starta_endb('abbcde'))\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.b$')\n    if pattern.search(text):\n        return 'Match found'\n    else:\n        return 'Match not found'\n        "
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass # Implement me!\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.+b$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_start_end(text, start, end):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.+b$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_end_starts(text, start, end):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'.*b\\s*a.*')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_whole_word(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^\\s*{}'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_non_word(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?!\\s){}'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_non_match(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?!\\s){}'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_non_match_start(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?!\\s){}'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_non_match_end(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.*(?!\\s){}'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_front_whitespace(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\s*{}'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_end_whitespace(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'{}[\\s]*$'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_whitespace(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\s*{}\\s*'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_front_whitespace(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\s*{}'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_start_whitespace(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^\\s*{}'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_end_whitespace(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'{}[\\s]*$'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_whitespace(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\s*{}\\s*'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_all_whitespace(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\s*{}\\s*'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_non_whitespace(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^\\s*{}\\s*$'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_non_whitespace_end(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=\\s){}$'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_non_whitespace_start(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^{}[\\s]*'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_non_whitespace_start_end(text, word):\n    '''\n    Write a function that matches if a string has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^(?!\\s){}[\\s]*$'.format(word))\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return False\n    \ndef text_match_non_whitespace_end"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.*b$'\n    result = re.findall(pattern,text)\n    return result\nprint(text_starta_endb('xxba'))\nprint(text_starta_endb('aaab'))\nprint(text_starta_endb('aab'))\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a.*?b$', text)\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    total = 0\n    for value in dict.values():\n        total = total + value\n        \n    return total\n        \n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Your code here.\n    # dict = {1:10, 2:20, 3:30}\n    # return sum(dict.values())\n    \n    # OR\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n    \ndef return_count(dict):\n    '''\n    Write function to find the number of items in the given dictionary.\n    '''\n    # Your code here.\n    # dict = {1:10, 2:20, 3:30}\n    # return len(dict)\n    \n    # OR\n    return len(dict)\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k in dict:\n        total = total + dict[k]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s=0\n    for i in dict:\n        s+=dict[i]\n    return s\n    \ndef return_sum_v2(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s=0\n    for i in dict:\n        s+=dict.get(i)\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for i in dict.values():\n        sum+=i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l=int(input('enter lower bound'))\n    r=int(input('enter upper bound'))\n    summ=0\n    for x in range(l,r):\n        if x%2!=0:\n            summ+=x\n    print(summ)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    def is_odd(n):\n        if n % 2!= 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range :\"))\n    r = int(input(\"Enter the upper limit of the range :\"))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum_odd += i\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(n) if i % 2 == 1)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n>1:\n        return n+sum_odd(n-2)\n    return n\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n%2 == 0:\n        return n/2\n    else:\n        return n\n    \nprint(sum_odd(10))\nprint(sum_odd(30))\nprint(sum_odd(100))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l=int(input(\"Enter the lower limit:\"))\n    r=int(input(\"Enter the upper limit:\"))\n    total=0\n    for i in range(l,r):\n        if i%2!=0:\n            total+=i\n    print(\"The sum of odd numbers is:\",total)\n    \ndef sum_prime(n): \n    '''\n    Write a python function to find the sum of all prime numbers within the range l and r.\n    '''\n    l=int(input(\"Enter the lower limit:\"))\n    r=int(input(\"Enter the upper limit:\"))\n    total=0\n    for i in range(l,r):\n        flag=0\n        for j in range(2,i):\n            if i%j==0:\n                flag=1\n                break\n        if flag==0:\n            total+=i\n    print(\"The sum of prime numbers is:\",total)\n    \ndef sum_perfect(n): \n    '''\n    Write a python function to find the sum of all perfect numbers within the range l and r.\n    '''\n    l=int(input(\"Enter the lower limit:\"))\n    r=int(input(\"Enter the upper limit:\"))\n    total=0\n    for i in range(l,r):\n        flag=0\n        for j in range(1,i):\n            if i%j==0:\n                flag+=j\n        if flag==i:\n            total+=i\n    print(\"The sum of perfect numbers is:\",total)\n    \ndef sum_abundant(n): \n    '''\n    Write a python function to find the sum of all abundant numbers within the range l and r.\n    '''\n    l=int(input(\"Enter the lower limit:\"))\n    r=int(input(\"Enter the upper limit:\"))\n    total=0\n    for i in range(l,r):\n        flag=0\n        for j in range(1,i):\n            if i%j==0:\n                flag+=j\n        if flag>i:\n            total+=i\n    print(\"The sum of abundant numbers is:\",total)\n    \ndef sum_prime_abundant(n): \n    '''\n    Write a python function to find the sum of all numbers within the range l and r, which are both prime and abundant.\n    '''\n    l=int(input(\"Enter the lower limit:\"))\n    r=int(input(\"Enter the upper limit:\"))\n    total=0\n    for i in range(l,r):\n        flag=0\n        for j in range(1,i):\n            if i%j==0:\n                flag+=j\n        if flag>i:\n            flag=0\n            for j in range(1,i):\n                if i%j==0:\n                    flag+=j\n            if flag==i:\n                total+=i\n    print(\"The sum of numbers which are both prime and abundant is:\",total)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 1:\n        return 1\n    elif n%2==0:\n        return sum_odd(n-1)\n    elif n%2==1:\n        return sum_odd(n-1) + n\n        \nprint(sum_odd(n))\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\ndef _prod(arr):  \n    '''\n    Write a python function to find the product of an array.\n    '''\n    return reduce((lambda x, y: x*y), arr)\ndef _min(arr):\n    '''\n    Write a python function to find the minimum of an array.\n    '''\n    return reduce((lambda x, y: x if x < y else y), arr)\ndef _max(arr):\n    '''\n    Write a python function to find the maximum of an array.\n    '''\n    return reduce((lambda x, y: x if x > y else y), arr)\ndef _avg(arr):\n    '''\n    Write a python function to find the average of an array.\n    '''\n    return _sum(arr)/len(arr)\ndef _med(arr):\n    '''\n    Write a python function to find the median of an array.\n    '''\n    return _sort(arr)[len(arr)//2] if len(arr) % 2 == 0 else _sort(arr)[len(arr)//2]\ndef _sort(arr):\n    '''\n    Write a python function to sort an array.\n    '''\n    return sorted(arr)\ndef _dups(arr):\n    '''\n    Write a python function to find all the duplicate values in an array.\n    '''\n    return [item for item, count in collections.Counter(arr).items() if count > 1]\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum+=i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for ele in arr:\n        sum += ele\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    left = n >> d\n    right = n & (2**32-1-2**d)\n    return (left << 32-d) + right\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    x1 = n>>d | n<<(32-d)\n    x2 = n>>32-d | n<<d\n    return (x1^x2)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # First, we perform d bit left shift and then we do XOR\n    n=n<<d\n    return n^(2**d-1)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #First shift n right d bits\n    n = n >> d\n    #Then shift n left d bits\n    n = n << d\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # First, shift the bits to the right by d to the right:\n    n >> d\n    # Now, left-shift the bits to the left by d bits:\n    n << d\n    return n\n    \ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # First, shift the bits to the left by d to the left:\n    n << d\n    # Now, right-shift the bits to the right by d bits:\n    n >> d\n    return n\n    \ndef add(x,y):\n    '''\n    Write a function to add 2 binary numbers.\n    '''\n    return (x ^ y)\n    \ndef sum_binary(s1,s2):\n    '''\n    Write a function to add 2 binary numbers.\n    '''\n    result = \"\"\n    carry = 0\n    \n    for i in range(max(len(s1),len(s2))):\n        \n        # At each step, sum up the two numbers' digits. The digit can be obtained from the result of the previous step by taking the ith bit of the result, or the ith bit of the larger number.\n        # First, determine the ith bit of the result:\n        if i<len(s1):\n            x = int(s1[len(s1)-1-i])\n        else:\n            x = 0\n            \n        if i<len(s2):\n            y = int(s2[len(s2)-1-i])\n        else:\n            y = 0\n            \n        sum = carry + x + y\n        \n        # Carry is 1 if the sum is larger than 10. Otherwise, carry is 0.\n        # Use a flag (carry) to indicate the result of the previous step.\n        if sum>1:\n            carry = 1\n        else:\n            carry = 0\n            \n        # At each step, the digit of the result is obtained by taking the ith bit of the result, or the ith bit of the larger number.\n        if sum>1:\n            result = str(sum-2) + result\n        else:\n            result = str(sum) + result\n            \n    if carry == 1:\n        result = '1' + result\n    \n    return result\n    \ndef nth_bit(n,x):\n    '''\n    Write a function to return the nth bit of x.\n    '''\n    return ((x >> n) % 2)\n    \ndef set_nth_bit(n,x):\n    '''\n    Write a function to set the nth bit of x to 1.\n    '''\n    return (x | (1 << n))\n    \ndef clear_nth_bit(n,x):\n    '''\n    Write a function to clear the nth bit of x to 0.\n    '''\n    return (x & ~(1 << n))\n    \ndef toggle_nth_bit(n,x):\n    '''\n    Write a function to toggle the nth bit of x.\n    '''\n    return (x ^ (1 << n))\n    \ndef get_nth_bit(n,x):\n    '''\n    Write a function to get the nth bit of x.\n    '''\n    return (x & (1 << n))\n    \ndef is_power_of_2(x):\n    '''\n    Write a function to determine whether a number is a power of 2.\n    '''\n    if x<=0:\n        return False\n        \n    while x>1:\n        if x%2==0:\n            x /= 2\n        else:\n            return False\n            \n    return True\n    \ndef is_power_of_2_pythonic(x):\n    '''\n    Write a function to determine whether a number is a power of 2.\n    '''\n    return (x>0) and (x&(x-1)==0)\n    \ndef xor_list(x,y):\n    '''\n    Write a function to compute the bitwise xor of two lists of equal length.\n    '''\n    return [a^b for a,b in zip(x,y)]\n    \ndef generate_key(bits):\n    '''\n    Write a function to generate a secret key.\n    '''\n    return (random.getrandbits(bits))\n    \ndef linear_congruence(a,m,x0):\n    '''\n    Write a function to compute the linear congruence x, where x = x0 + a (mod m).\n    '''\n    return ((x0+a)%m)\n    \ndef split_half(x):\n    '''\n    Write a function that splits a number into two halves.\n    '''\n    return (x>>1,x&1)\n    \ndef merge_half(lh,rh):\n    '''\n    Write a function that merges two numbers into one.\n    '''\n    return ((lh<<1)+(rh))\n    \ndef F(x,y,z):\n    '''\n    Write a function that computes the modular exponentiation x^y mod z.\n    '''\n    return (pow(x,y,z))\n    \ndef P(x,y,z):\n    '''\n    Write a function that computes the modular exponentiation x^y mod z.\n    '''\n    return (pow(x,y,z))\n    \ndef is_prime(x,rounds=20):\n    '''\n    Write a function to determine whether a number is a prime.\n    '''\n    if x<=0:\n        return False\n        \n    if x==1:\n        return False\n        \n    if x==2:\n        return True\n        \n    if x%2==0:\n        return False\n        \n    l = x-1\n    r = x+1\n    \n    for i in range(rounds):\n        l = (l+1)%x\n        r = (x-r)%x\n        \n        if r==0:\n            return False\n            \n    return True\n    \ndef generate_prime(bits=32):\n    '''\n    Write a function that generates a random prime of the specified number of bits.\n    '''\n    while True:\n        n = random.getrandbits(bits)\n        if is_prime(n):\n            return n\n            \ndef multiply_modular(a,b,n):\n    '''\n    Write a function that computes a*b mod n.\n    '''\n    return (F(a,b,n))\n    \ndef gcd_extended(a,b):\n    '''\n    Write a function to compute the Extended Euclidean algorithm.\n    '''\n    r0,s0,t0 = a,1,0\n    r1,s1,t1 = b,0,1\n    \n    while r1!=0:\n        q = r0 // r1\n        r = r0 - q*r1\n        s = s0 - q*s1\n        t = t0 - q*t1\n        \n        r0,s0,t0 = r1,s1,t1\n        r1,s1,t1 = r,s,t\n        \n    return (r0,s0,t0)\n    \ndef gcd(a,b):\n    '''\n    Write a function to compute the Greatest Common Divisor (gcd) of two numbers.\n    '''\n    return gcd_extended(a,b)[0]\n    \ndef gcd_pythonic(a,b):\n    '''\n    Write a function to compute the Greatest Common Divisor (gcd) of two numbers.\n    '''\n    if b==0:\n        return a\n        \n    else:\n        return gcd_pythonic(b,a%b)\n        \ndef mod_inverse(a,n):\n    '''\n    Write a function to compute the multiplicative inverse of a number a modulo n.\n    '''\n    g,x,y = gcd_extended(a,n)\n    if g!=1:\n        raise ValueError\n        \n    return x%n\n    \ndef mod_inverse_pythonic(a,n):\n    '''\n    Write a function to compute the multiplicative inverse of a number a modulo n.\n    '''\n    g,x,y = "
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Step 1\n    # get the most significant bit\n    # 1. turn n into a binary number\n    # 2. keep only the last d bits\n    # 3. convert the d bits into a number\n    # 4. shift the remaining bits to the right by d\n    # 5. get the last d bits\n    # 6. return the number\n    n = bin(n)[2:]\n    n = n[-d:] + n[:-d]\n    n = int(n,2)\n    n = bin(n)[2:]\n    return n\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Step 1\n    # get the most significant bit\n    # 1. turn n into a binary number\n    # 2. keep only the last d bits\n    # 3. convert the d bits into a number\n    # 4. shift the remaining bits to the left by d\n    # 5. get the last d bits\n    # 6. return the number\n    n = bin(n)[2:]\n    n = n[-d:] + n[:-d]\n    n = int(n,2)\n    n = bin(n)[2:]\n    return n\n    \ndef shift_right(n,d):\n    '''\n    Write a function to that shift right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Step 1\n    # get the most significant bit\n    # 1. turn n into a binary number\n    # 2. keep only the last d bits\n    # 3. convert the d bits into a number\n    # 4. shift the remaining bits to the left by d\n    # 5. get the last d bits\n    # 6. return the number\n    n = bin(n)[2:]\n    n = n[-d:] + n[:-d]\n    n = int(n,2)\n    n = bin(n)[2:]\n    return n\n    \ndef shift_left(n,d):\n    '''\n    Write a function to that shift left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Step 1\n    # get the most significant bit\n    # 1. turn n into a binary number\n    # 2. keep only the last d bits\n    # 3. convert the d bits into a number\n    # 4. shift the remaining bits to the right by d\n    # 5. get the last d bits\n    # 6. return the number\n    n = bin(n)[2:]\n    n = n[-d:] + n[:-d]\n    n = int(n,2)\n    n = bin(n)[2:]\n    return n\n    \ndef int_to_bytes(n,l):\n    '''\n    Write a function that converts an integer into bytes of length l.\n    '''\n    if n > 2**(l*8)-1:\n        print(\"Integer cannot be converted into bytes of length {}\".format(l))\n    bytes = bytes()\n    for i in range(l):\n        bytes = bytes + (n >> (i*8)) % 256.to_bytes(1, 'big')\n    return bytes\n    \ndef bytes_to_int(bytes):\n    '''\n    Write a function that converts bytes into an integer.\n    '''\n    n = 0\n    for i in range(len(bytes)):\n        n = n + bytes[i] << (i*8)\n    return n\n    \ndef pad_message(m,l):\n    '''\n    Write a function that pads a message with bytes of length l using PKCS7 padding.\n    '''\n    # Step 1\n    # 1. get the length of the message\n    # 2. compute the number of bytes to pad the message\n    # 3. pad the message to get the desired length\n    # 4. return the padded message\n    length = len(m)\n    if length > 2**(l*8):\n        print(\"Message cannot be padded\")\n    bytes_to_pad = l - length % l\n    for i in range(bytes_to_pad):\n        m = m + bytes([bytes_to_int(bytes(chr(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(bytes_to_int(byte"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff >> (32 - d) << (32 - d)\n    return ((n << d) | (n >> (32 - d))) & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n&0x80000000:\n        return ((n << d) | (n >> (32 - d)))&0xFFFFFFFF\n    return n<<d\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    return ((n<<d) | (n>>(32-d)))&0xffffffff \n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result = \"\"\n    for letter in text:\n        if letter not in \" \":\n            result += letter\n    return result\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # return text.replace(\" \", \"\")\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ','')\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_text = text.replace(\" \", \"\")\n    return new_text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #your code here\n    return text.replace(\" \", \"\")\n    \ndef remove_all_punctuations(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    #your code here\n    return re.sub(\"[^\\w\\s]\", \"\", text)\n    \ndef split_text_by_words(text):\n    '''\n    Write a function to split text into a list of words.\n    '''\n    #your code here\n    return text.split()\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expressions to remove any kind of whitespace characters\n    regex = r\"\\s\"\n    result = re.sub(regex, \"\", text, flags=re.MULTILINE)\n    return result\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    return len([i for i in [x,y,z] if x == y == z])\n    \nprint(test_three_equal(3,3,3))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(2,4,4))\nprint(test_three_equal(1,2,4)"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x+y+z)/3\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    if(x==y):\n        count=count+1\n    if(y==z):\n        count=count+1\n    if(z==x):\n        count=count+1\n    return count\ndef test_three_equal_numbers_two():\n    '''\n    Write a python program to test if the three given numbers have the same value or not.\n    '''\n    a=int(input(\"Enter 1st number: \"))\n    b=int(input(\"Enter 2nd number: \"))\n    c=int(input(\"Enter 3rd number: \"))\n    if(a==b and a==c):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if(x == y == z):\n        print(3)\n    elif(x == y or x == z or y == z):\n        print(2)\n    else:\n        print(0)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x):\n        for j in range(y):\n            for k in range(z):\n                if x == y == z:\n                    count += 1\n                    break\n                elif x == y:\n                    count += 1\n                    break\n                elif x == z:\n                    count += 1\n                    break\n                elif y == z:\n                    count += 1\n                    break\n                else:\n                    continue\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = [1,1,1]\n    y = [2,2,2]\n    z = [3,3,3]\n    return(x,y,z)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    def main(x,y,z):\n        return x+y+z-max(x,y,z)-min(x,y,z)\n    return main(x,y,z)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    l = 0\n    r = n-1\n    while(l<r):\n        if arr[l]>arr[r]:\n            print(l,r)\n            return r\n        l += 1\n        r -= 1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr = list(arr)\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        if arr[start] <= arr[end]:\n            return end - start\n        else:\n            arr[start], arr[end] = arr[end], arr[start]\n            end -= 1\n            start += 1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    for i in range(0, n):\n        j = i\n        while j >=0:\n            if arr[j] > arr[j+1]:\n                return j\n            else:\n                break\n        j -=1\n    return -1\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if not arr:\n        return -1\n    n = len(arr)\n    low = 0\n    high = n-1\n    mid = 0\n    while low <= high:\n        mid = (high + low)//2\n        \n        if arr[mid] > arr[high]:\n            low = mid + 1\n        elif arr[mid] < arr[high]:\n            high = mid - 1\n        else:\n            high = high - 1\n    return low\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Write your code here\n    n = len(arr)\n    c = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            break\n        c += 1\n    return c\n    \n    \ndef count_rotation_v2(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Write your code here\n    n = len(arr)\n    c = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            break\n        c += 1\n    return n - c - 1\n    \n    \ndef count_rotation_v3(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low, high = 0, n-1\n    while low < high:\n        mid = low + (high-low)//2\n        if arr[mid] >= arr[low]:\n            low = mid+1\n        elif arr[mid] < arr[high]:\n            high = mid\n    if arr[low] >= arr[0]:\n        return low - 0\n    else:\n        return n - (low + 1)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    sorted_arr = arr.copy()\n    sorted_arr.sort()\n    sorted_arr_set = set(sorted_arr)\n    if len(sorted_arr_set)!= len(sorted_arr):\n        return -1\n    min_arr = arr.copy()\n    min_arr.sort()\n    min_arr_set = set(min_arr)\n    if len(min_arr_set)!= len(min_arr):\n        return -1\n    if arr == sorted_arr:\n        return 0\n    for i in range(n):\n        if arr[i]!= sorted_arr[i]:\n            return i\n    return -1\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n    mid = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr) - 1\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # code here\n    temp=arr[0]\n    n=len(arr)\n    for i in range(1,n):\n        if arr[i]<temp:\n            count=i\n        temp=arr[i]\n    print(count)\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    start = 0\n    end = n-1\n    mid = start\n    \n    while (mid <= end):\n        if arr[mid] == 0:\n            arr[start],arr[mid] = arr[mid],arr[start]\n            start += 1\n            mid += 1\n        elif arr[mid] == 1:\n            mid += 1\n        else:\n            arr[mid],arr[end] = arr[end],arr[mid]\n            end -= 1\n        \n    for i in range(n):\n        if arr[i] == 1:\n            return n-i\n    \n    return 0\n    "
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n\n    if (sqrt % 2 == 0):\n        return False\n    i = 3\n    while (i * i <= n):\n        if (n % i == 0):\n            return False\n        i = i + 2\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    y = 0\n    # Find the number of iterations using binary search\n    # https://en.wikipedia.org/wiki/Binary_search_algorithm#Search_for_perfect_squares\n    while (x & 1) == 0:\n        y += 1\n        x = x >> 1\n    \n    # If the number is a perfect square, then it's power of 2 will be equal to y\n    # Otherwise it is not a perfect square\n    if (x * x == n) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # define the function and pass the number\n    def isPerfectSquare(n) :\n        # initialize the low and high\n        low = 1\n        high = n\n        # loop until low is greater than or equal to high\n        while low <= high :\n            # Find the mid point\n            mid = low + (high - low) // 2\n            # if the number is square then it will be equal to mid * mid\n            if mid * mid == n :\n                return True\n            # if it is not square then it is either greater than mid * mid\n            # or smaller than mid * mid\n            elif mid * mid > n :\n                high = mid - 1\n            # if it is not square then it is either greater than mid * mid\n            # or smaller than mid * mid\n            else :\n                low = mid + 1\n        return False\n    # pass the number\n    result = isPerfectSquare(n)\n    # if the result is True, then n is a perfect square\n    if result == True :\n        print(\"YES\")\n    # if the result is False, then n is not a perfect square\n    else :\n        print(\"NO\")\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check for perfect square\n    if int(math.sqrt(n)) == math.sqrt(n):\n        return True\n    else:\n        return False\n    \n    \ndef is_prime(n) :\n    '''\n    Write a function that takes a single parameter for a given number and returns True if the number is prime, otherwise returns False.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i = i + 2\n    return True\n    \n    \ndef is_even(n) :\n    '''\n    Write a function that checks whether a given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_odd(n) :\n    '''\n    Write a function that checks whether a given number is odd or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n    \ndef is_palindrome(n) :\n    '''\n    Write a function that checks whether a given number is a palindrome or not.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    y = 0\n    while (x > 0):\n        y = y + x % 10\n        x = x // 10\n    return (y == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 2) :\n        return False;\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 2) :\n        return False;\n    \n    sqrt = sqrt(n)\n    if (int(sqrt + 0.5) * int(sqrt + 0.5) == n) :\n        return True\n    else :\n        return False;\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(math.sqrt(n))\n    return s*s == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(math.sqrt(n))\n    return s*s == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    n = abs(int(n))\n    if n<0:\n        return False\n    x = int(math.sqrt(n))\n    return x*x==n\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if product(arr)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for number in arr:\n        product *= number\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    #Code here\n    \n    if arr == [] :\n        return \"No Elements\"\n    \n    p = 1\n    for i in arr:\n        p = p*i\n    \n    return p%2==0\n    \n    \nprint(is_product_even([1, 2, 3, 4, 5]))\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    result = 1\n    for i in arr:\n        result *= i\n    if result % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    #empty list to append even numbers\n    even_list = []\n    for i in arr:\n        #if the product of the numbers in the list is even, append to the even list\n        if i%2 == 0:\n            even_list.append(i)\n        #if the product of the numbers in the list is odd, return false\n        else:\n            return False\n    return even_list\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    \n    for i in arr:\n        product *= i\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    prod = 1\n    \n    for num in arr:\n        prod *= num\n    \n    return prod % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for x in arr:\n        product *= x\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for sub_list in lists:\n        if sum(sub_list) > max_sum:\n            max_sum = sum(sub_list)\n            max_list = sub_list\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sums = [sum(l) for l in lists]\n    return [lists[i] for i in range(len(lists)) if sum(lists[i]) == max(sums)]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        if sum(i) > max_sum:\n            max_list = i\n            max_sum = sum(i)\n    return max_list\n    \n    \ndef max_prod_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose product of elements is the highest.\n    '''\n    max_prod = 0\n    max_list = []\n    for i in lists:\n        if prod(i) > max_prod:\n            max_list = i\n            max_prod = prod(i)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    list_max = max(lists, key=sum)\n    return list_max\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def sum_list(lst):\n        return sum(lst)\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for lst in lists:\n        sum = 0\n        for elem in lst:\n            sum += elem\n        if sum > max_sum:\n            max_sum = sum\n            max_sum_list = lst\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max([[i for i in lists if sum(i)==i] for i in lists], key=sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max([sum(x) for x in lists])\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def sum(lst):\n        s = 0\n        for i in lst:\n            s += i\n        return s\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    best = []\n    best_sum = 0\n    for l in lists:\n        curr_sum = 0\n        for e in l:\n            curr_sum += e\n        if curr_sum > best_sum:\n            best = [l]\n            best_sum = curr_sum\n        elif curr_sum == best_sum:\n            best.append(l)\n    return best\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Convert the input to uppercase\n    test_str = test_str.upper()\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    new_str = \"\"\n    new_str = test_str.upper()\n    maximum = 0\n    if new_str!= \"\":\n        for i in new_str:\n            if i.isupper():\n                if new_str.count(i) > maximum:\n                    maximum = new_str.count(i)\n    return maximum\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    cur_run = 0\n    for ch in test_str:\n        if ch.isupper():\n            cur_run += 1\n            max_run = max(cur_run, max_run)\n        else:\n            cur_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count+=1\n            result = max(count,result)\n        else:\n            count = 0\n    return result\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for ch in test_str:\n        if ch.isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    for i in range(len(test_str)):\n        count = 0\n        for j in range(i, len(test_str)):\n            if test_str[j] >= 'A' and test_str[j] <= 'Z':\n                count += 1\n            else:\n                break\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n    \n    \n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count, max_count = 0, 0\n    for char in test_str:\n        if char.isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    run = 0\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        elif i.isupper() == False:\n            if count > run:\n                run = count\n                count = 0\n        else:\n            count = 0\n    return max(run, count)\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return \"There are no odd numbers in the list\"\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return 'None'\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2 == 1:\n            return n\n        else:\n            pass\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n    return None\n    \n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers[0]\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = sorted(test_tup, key = lambda x : x[0])\n    for i in range(len(test_tup)):\n        if test_tup[i][1] >= K:\n            return test_tup[i][0]\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == 2:\n        if len(test_tup[0]) == K and len(test_tup[1]) == K:\n            return 1\n        else:\n            return 0\n    else:\n        return check_K(test_tup[1:], K)\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print(test_tup)\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len([i for i in test_tup if i == K])\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    flag = True\n    for i in range(0, len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i][0]==test_tup[j][0] or test_tup[i][1]==test_tup[j][1]:\n                if test_tup[i][0]!=test_tup[j][0] or test_tup[i][1]!=test_tup[j][1]:\n                    flag = False\n    return flag and (K in test_tup)\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # for i in range(len(K)):\n    #     if K[i] in test_tup:\n    #         return True\n    # return False\n    #return any(item in test_tup for item in K)\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    flag = False\n    if test_tup[0] > K:\n        flag = True\n    if test_tup[1] > K:\n        flag = True\n    return flag\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    a,b = test_tup\n    if a > b and K > 0:\n        return K < a\n    elif b > a and K < 0:\n        return K > b\n    else:\n        return K == a or K == b\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup) == K\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0, len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n    return True\n    \n    \n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    if(test_tup1[0] < test_tup2[0]):\n        return True\n    elif(test_tup1[0] > test_tup2[0]):\n        return False\n    else:\n        return check_smaller(test_tup1[1:], test_tup2[1:])\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0] or test_tup1[1] > test_tup2[1] or test_tup1[2] > test_tup2[2] or test_tup1[3] > test_tup2[3] or test_tup1[4] > test_tup2[4]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    length_test_tup1 = len(test_tup1)\n    length_test_tup2 = len(test_tup2)\n    if length_test_tup1 == length_test_tup2:\n        smaller = [x for x in test_tup1 if x < test_tup2]\n    else:\n        print(\"Error!\")\n    if len(smaller) == 0:\n        print(\"No smaller element than the second tuple.\")\n    else:\n        print(\"The smaller element is:\", smaller)\n    return smaller\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n        \ndef check_larger(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is larger than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] > test_tup2[i]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    res = []\n    for idx in range(len(test_tup1)):\n        if test_tup2[idx] < test_tup1[idx]:\n            res.append(True)\n        else:\n            res.append(False)\n    return res\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    check = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            check = False\n    return check\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = False\n    for x, y in zip(test_tup1, test_tup2):\n        if x > y:\n            result = True\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if all(a < b for a,b in zip(test_tup1, test_tup2)):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    }
]