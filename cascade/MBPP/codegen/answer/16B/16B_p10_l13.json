[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set_test_tup1 = set(test_tup1)\n    set_test_tup2 = set(test_tup2)\n    return list(set_test_tup1 & set_test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for num1 in test_tup1:\n        for num2 in test_tup2:\n            if num1 == num2:\n                shared_elements.append(num1)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    sim_elem = list(set(test_tup1) & set(test_tup2))\n    return sim_elem\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    list3 = list1 + list2\n    res = [i for i in list3 if list3.count(i) == 2]\n    return res\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    temp = list(test_tup1)\n    count = 0\n    for i in range(len(temp)):\n        for j in range(len(test_tup2)):\n            if temp[i] == test_tup2[j]:\n                count += 1\n                break\n    if count == len(temp):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    res = [i for i in test_tup1 if i in test_tup2]\n    return res\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n    # return list(set(list1).intersection(list2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # using set for remove the duplicates and then convert to list\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_ele = []\n    for i in test_tup1:\n        if i in test_tup2:\n            similar_ele.append(i)\n    return similar_ele\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return(True)\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return(True)\n    return(False)\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for x in range(2, n):\n        if n % x == 0:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if is_not_prime(n):\n        return False\n    else:\n        return True\ndef prime_factors(n):\n    '''\n    Write a python function to identify prime factors of a given number.\n    '''\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\ndef sum_of_factors(n):\n    '''\n    Write a python function to identify the sum of all factors of a given number.\n    '''\n    total = 1\n    for i in prime_factors(n):\n        total += i\n    return total\ndef list_of_factors(n):\n    '''\n    Write a python function to identify all the prime factors of a given number.\n    '''\n    return list(set(prime_factors(n)))\ndef is_coprime(n, m):\n    '''\n    Write a python function to identify whether two numbers are coprime or not.\n    '''\n    if max(list_of_factors(n)) == min(list_of_factors(n)) and max(list_of_factors(m)) == min(list_of_factors(m)):\n        return True\n    else:\n        return False\ndef gcd(n, m):\n    '''\n    Write a python function to compute the gcd of two numbers.\n    '''\n    return max(list_of_factors(n))\ndef lcm(n, m):\n    '''\n    Write a python function to compute the lcm of two numbers.\n    '''\n    return n * m / gcd(n, m)\ndef prime_factors_of_factors(n):\n    '''\n    Write a python function to identify all the prime factors of the prime factors of a given number.\n    '''\n    factors = []\n    for i in prime_factors(n):\n        for j in prime_factors(i):\n            if j not in factors:\n                factors.append(j)\n    return factors\ndef sum_of_factors_of_factors(n):\n    '''\n    Write a python function to identify the sum of all the prime factors of the prime factors of a given number.\n    '''\n    total = 1\n    for i in prime_factors_of_factors(n):\n        total += i\n    return total\ndef list_of_factors_of_factors(n):\n    '''\n    Write a python function to identify all the prime factors of the prime factors of a given number.\n    '''\n    factors = []\n    for i in prime_factors_of_factors(n):\n        if i not in factors:\n            factors.append(i)\n    return factors\ndef sum_of_all_primes(n):\n    '''\n    Write a python function to identify the sum of all the primes below a given number.\n    '''\n    total = 0\n    for i in range(2, n):\n        if is_prime(i):\n            total += i\n    return total\ndef sum_of_all_nonprimes(n):\n    '''\n    Write a python function to identify the sum of all the non-primes below a given number.\n    '''\n    total = 0\n    for i in range(2, n):\n        if is_not_prime(i):\n            total += i\n    return total\ndef sum_of_all_primes_below_n(n):\n    '''\n    Write a python function to identify the sum of all the primes below a given number.\n    '''\n    total = 0\n    for i in range(2, n):\n        if is_prime(i):\n            total += i\n    return total\ndef sum_of_all_nonprimes_below_n(n):\n    '''\n    Write a python function to identify the sum of all the non-primes below a given number.\n    '''\n    total = 0\n    for i in range(2, n):\n        if is_not_prime(i):\n            total += i\n    return total\ndef sum_of_all_primes_between_n_and_m(n, m):\n    '''\n    Write a python function to identify the sum of all the primes between two given numbers.\n    '''\n    total = 0\n    for i in range(n, m + 1):\n        if is_prime(i):\n            total += i\n    return total\ndef sum_of_all_nonprimes_between_n_and_m(n, m):\n    '''\n    Write a python function to identify the sum of all the non-primes between two given numbers.\n    '''\n    total = 0\n    for i in range(n, m + 1):\n        if is_not_prime(i):\n            total += i\n    return total\ndef sum_of_all_primes_between_two_sets_of_numbers(n_1, n_2):\n    '''\n    Write a python function to identify the sum of all the primes between two sets of given numbers.\n    '''\n    total = 0\n    for i in range(n_1, n_2 + 1):\n        if is_prime(i):\n            total += i\n    return total\ndef sum_of_all_nonprimes_between_two_sets_of_numbers(n_1, n_2):\n    '''\n    Write a python function to identify the sum of all the non-primes between two sets of given numbers.\n    '''\n    total = 0\n    for i in range(n_1, n_2 + 1):\n        if is_not_prime(i):\n            total += i\n    return total\ndef sum_of_prime_factors(n):\n    '''\n    Write a python function to identify the sum of the prime factors of a given number.\n    '''\n    total = 0\n    for i in prime_factors(n):\n        total += i\n    return total\ndef sum_of_nonprime_factors(n):\n    '''\n    Write a python function to identify the sum of the non prime factors of a given number.\n    '''\n    total = 0\n    for i in list_of_factors(n):\n        if i not in prime_factors(n):\n            total += i\n    return total\ndef list_of_prime_factors(n):\n    '''\n    Write a python function to identify all the prime factors of a given number.\n    '''\n    return list(set(prime_factors(n)))\ndef list_of_nonprime_factors(n):\n    '''\n    Write a python function to identify all the non prime factors of a given number.\n    '''\n    return list(set(list_of_factors(n)) - set(prime_factors(n)))\ndef sum_of_prime_factors_of_list_of_numbers(n_list):\n    '''\n    Write a python function to identify the sum of the prime factors of a list of numbers.\n    '''\n    total = 0\n    for i in n_list:\n        for j in prime_factors(i):\n            total += j\n    return total\ndef sum_of_nonprime_factors_of_list_of_numbers(n_list):\n    '''\n    Write a python function to identify the sum of the non prime factors of a list of numbers.\n    '''\n    total = 0\n    for i in n_list:\n        for j in list_of_factors(i):\n            if j not in prime_factors(i):\n                total += j\n    return total\ndef sum_of_prime_factors_of_factors_of_list_of_numbers(n_list):\n    '''\n    Write a python function to identify the sum of the prime factors of the prime factors of a list of numbers.\n    '''\n    total = 0\n    for i in n_list:\n        for j in prime_factors(i):\n            for k in prime_factors(j):\n                if k not in prime"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # your code goes here\n    if n<2:\n        return \"Not a prime number\"\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i==0:\n            return \"Not a prime number\"\n    return \"Prime number\"\nprint(is_not_prime(1))"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return \"1 is neither prime nor composite\"\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return \"Given number is composite\"\n    return \"Given number is prime\"\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if (n % i) == 0:\n                return True\n                break\n        else:\n            return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return []\n    else:\n        largest_heap = []\n        for num in nums:\n            if len(largest_heap) == n:\n                if num >= largest_heap[0]:\n                    hq.heappop(largest_heap)\n                    hq.heappush(largest_heap,num)\n                else:\n                    pass\n            else:\n                hq.heappush(largest_heap,num)\n        return largest_heap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize empty heap and list of tuples, and track largest item\n    largest_heap = []\n    largest_list = []\n    largest = 0\n    for num in nums:\n        # If the largest item is greater than the current number, replace it\n        if largest >= num:\n            hq.heapreplace(largest_heap, (num, num))\n        else:\n            # If the current number is greater than the largest, add it to the heap and list\n            hq.heappush(largest_heap, (num, num))\n            largest_list.append((num, num))\n            largest = num\n        # If the length of largest_list is greater than n, remove the smallest item from the heap and list\n        if len(largest_list) > n:\n            hq.heappop(largest_heap)\n    # Convert the heap to a list and return it\n    largest_list = [tup[1] for tup in largest_heap]\n    return largest_list\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        print(hq.heappop(nums),end=' ')\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,-num)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    for num in nums:\n        hq.heappush(q, -num)\n    result = []\n    for i in range(n):\n        result.append(-hq.heappop(q))\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0:\n        return []\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap, nums[i])\n    return heap\ndef heap_queue_pop(heap):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.heappop(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        print(hq.heappop(nums))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    return sorted(nums,reverse=True)[:n]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1) == 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = x\n    while (n): \n        if (n % 2 == 0): \n            return False\n        n = n / 2; \n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    temp = x\n    while (temp):\n        temp = temp & (temp-1)\n        if temp == 0:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x!= 0): \n        if (x & 1!= 0) : \n            return False\n        x = x >> 1\n    return True\ndef LCM(a, b):\n    '''\n    Write a Python program to find the lowest common multiple (LCM) of two positive integers. \n    '''\n    bigger=max(a,b)\n    smaller=min(a,b)\n    \n    if(bigger%smaller==0):\n        return bigger\n    else:\n        return LCM(smaller, bigger % smaller)\ndef Multiplicative_Inverse(a, b):\n    '''\n    Write a Python program to find the multiplicative inverse of two numbers.\n    '''\n    for x in range(1,b):\n        if((a*x)%b==1):\n            return x\n    return -1\ndef reverse_a_number(a):\n    '''\n    Write a Python function that takes in a number and returns the number with its digits reversed.\n    '''\n    print(a)\n    if a < 0:\n        return -reverse_a_number(-a)\n    r = 0\n    while a > 0:\n        r = 10 * r + a % 10\n        a = a // 10\n    return r\ndef reverse(a):\n    '''\n    Write a Python function that takes in a number and returns the number with its digits reversed.\n    '''\n    r=0\n    i=0\n    while a!=0:\n        rem=a%10\n        r+=rem*(10**i)\n        a=a//10\n        i+=1\n    return r\ndef is_prime(n):\n    '''\n    Write a Python function that takes in a number and returns true if the number is prime, otherwise it returns false.\n    '''\n    if n<2:\n        return False\n    for i in range(2, n//2+1):\n        if n%i==0:\n            return False\n    return True\ndef is_Palindrome(s):\n    '''\n    Write a Python function to check whether a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef generate_all_substrings(s):\n    '''\n    Write a Python function to generate all possible substrings of a string.\n    '''\n    for i in range(len(s)):\n        for j in range(len(s)):\n            print(s[i:j])\ndef check_substring(s1, s2):\n    '''\n    Write a Python function to check whether a string is a substring of another string or not.\n    '''\n    if s2 in s1:\n        return True\n    else:\n        return False\ndef find_dublicates(arr):\n    '''\n    Write a Python function that takes a list and returns a list of all elements that appear more than once.\n    '''\n    new_list = []\n    for i in arr:\n        if arr.count(i) > 1:\n            if i not in new_list:\n                new_list.append(i)\n    return new_list\ndef remove_dublicates(arr):\n    '''\n    Write a Python function to remove the dublicates of a list.\n    '''\n    new_list = []\n    for i in arr:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\ndef factorial(n):\n    '''\n    Write a Python function to calculate the factorial of a number (a non-negative integer).\n    '''\n    if n == 0:\n        return 1\n    return n*factorial(n-1)\ndef factors(n):\n    '''\n    Write a Python function that takes in a number and returns a list of all the factors of a given number.\n    '''\n    return [i for i in range(1,n+1) if n%i==0]\ndef Sum_of_Digits(n):\n    '''\n    Write a Python function to add all the digits of a number.\n    '''\n    s = 0\n    while n!= 0:\n        s += n % 10\n        n = n // 10\n    return s\ndef is_rightangled(a, b, c):\n    '''\n    Write a Python function to check whether a triangle is right-angled or not.\n    '''\n    a2=a**2\n    b2=b**2\n    c2=c**2\n    if(a2+b2==c2):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a Python function to check whether a number is a perfect square or not.\n    '''\n    import math\n    if a < 0:\n        return False\n    n = int(math.sqrt(a))\n    if n*n == a:\n        return True\n    else:\n        return False\ndef summation(n, term):\n    '''\n    Write a Python function to return the sum of the first n terms of a sequence.\n    '''\n    return term(1)*(n-1) + term(2)\ndef fibonacci(n):\n    '''\n    Write a Python function to compute the sum of the first n terms of the Fibonacci sequence.\n    '''\n    return summation(n, lambda x: x)\ndef find_nth_fibonacci(n):\n    '''\n    Write a Python function to find the nth term of the Fibonacci sequence.\n    '''\n    f_1=0\n    f_2=1\n    f_3=1\n    for i in range(3,n+1):\n        f_1=f_2\n        f_2=f_3\n        f_3=f_1+f_2\n    return f_3\ndef find_maximum_substring(s):\n    '''\n    Write a Python function to find the maximum substring of a given string.\n    '''\n    result=0\n    start=0\n    end=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            x=s[i:j]\n            if len(x)>result:\n                result=len(x)\n                start=i\n                end=j\n    return s[start:end]\ndef find_longest_word(s):\n    '''\n    Write a Python function to find the longest word in a given string.\n    '''\n    return max(s.split(\" \"), key=len)\ndef find_anagrams(s):\n    '''\n    Write a Python function to find all the anagrams of a string.\n    '''\n    anagrams=[]\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            x=s[i:j]\n            if x in s[j:]:\n                if x not in anagrams:\n                    anagrams.append(x)\n    return anagrams\ndef permutation(s):\n    '''\n    Write a Python function to calculate the number of permutations of a given string.\n    '''\n    if s == \"\":\n        return 1\n    return sum(permutation(s[:i]+s[i+1:]) for i in range(len(s)))\ndef reverse_a_string(s):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    s = \"\"\n    for i in range(len(s)-1,-1,-1):\n        s+=s[i]\n    return s\ndef longest_substring(s):\n    '''\n    Write a Python function to find the longest substring of a given string.\n    '''\n    substrings=[]\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            x=s[i:j]\n            if x not in substrings:\n                substrings.append(x)\n    return max(substrings, key=len)\ndef factorial(n):\n    '''\n    Write a Python function to calculate the factorial of a number (a non-negative integer).\n    '''\n    if n == 0:\n        return 1\n    return n*factorial(n-1)\ndef factors(n):\n    ''"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return 0\n    \n    while (x): \n        if x & 1: \n            return 0\n        x = x >> 1\n    return 1\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x > 2:\n        x = x/2\n    if x == 1:\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = 1\n    while (n < x): \n        n = n * 2\n    return (n == x) \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # number = x\n    # y = bin(x)\n    # while (x!= 0):\n    #     x = x >> 1\n    #     y = y >> 1\n    # if (x == y):\n    #     return True\n    # else:\n    #     return False\n    # # print(x, y)\n    # # print(bin(x), bin(y))\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for word in text.split(' '):\n        if len(word) >= 4:\n            print(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern=r'\\b\\w{4,}\\b'\n    return re.findall(pattern,text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    x = re.findall(r'\\w{4,}', text)\n    print(x)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    output = re.findall(r'\\b\\w{4,}\\b',text)\n    print(\"Char long words are: \", output)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    find_words_regex = re.compile(r'\\w{4,}')\n    find_words = find_words_regex.findall(text)\n    return find_words\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    my_list = re.findall(r'\\w{4,}', text)\n    return my_list\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num*num)\n    return new_list\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i ** 2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i ** 2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x*x for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = list(map(lambda num: num**2, nums))\n    return result\n    \ndef check_fib(num):\n    '''\n    Write a function to check whether a number is part of Fibonacci series or not. Return True if number is part of series otherwise False.\n    '''\n    num_list = [0,1]\n    num_list.extend(list(map(lambda x,y:x+y, num_list[1:-1], num_list[2:])))\n    if num in num_list:\n        return True\n    else:\n        return False\n        \ndef palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not. Return True if it is palindrome otherwise False.\n    '''\n    string = string.casefold()\n    l = len(string)\n    mid = l//2\n    l_str = list(string[:mid])\n    r_str = list(string[mid:])\n    r_str.reverse()\n    if l_str == r_str:\n        return True\n    else:\n        return False\n        \ndef rev_sent(sentence):\n    '''\n    Write a function to reverse a given sentence (only spaces and characters should be reversed).\n    '''\n    sentence = sentence.split(' ')\n    sentence = list(map(lambda s:s[::-1], sentence))\n    sentence =''.join(sentence)\n    return sentence\n    \ndef unique_list(l):\n    '''\n    Write a function that will return a list of unique elements from the given list. You cannot use additional data structures\n    '''\n    l = set(l)\n    return list(l)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(0,len(nums)):\n        nums[i] = nums[i]*nums[i]\n    print(nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num * num for num in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    return 1 + find_Rotations(str[1:] + str[0])\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    no_rotation = []\n    for i in range(len(str)):\n        if str[i:] + str[:i] == str:\n            no_rotation.append(i)\n    return no_rotation\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    l = len(str)\n    if l <= 1:\n        return 0\n    \n    s1 = str[:l//2]\n    s2 = str[l//2:]\n    \n    #print(s1, s2)\n    i = 0\n    while i < len(s1) and s1!= s2:\n        #print(s1, s2, i, end=\"\\r\")\n        #print(str[i], end=\"\")\n        s1 = s1[1:] + s1[0]\n        i += 1\n    #print(s1, s2)\n    \n    return i+1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str) \n    str1 = str + str \n    count = 0\n    for i in range(0, length): \n        if (str1[i:i+length] == str): \n            count+=1\n    return count \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotate(s, n): \n        return s[n:] + s[:n] \n    l = len(str) \n    if (l == 0): \n        return 0\n    for i in range(l): \n        if (rotate(str, i) == str): \n            return i \n    return l\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    if (n <= 1): \n        return 0\n    count = 0\n    for i in range(n - 1): \n        if (str[i]!= str[i + 1]): \n            count += 1\n            if (count == n - 1): \n                return count \n    return count \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    if(n==0): \n        return\n    for x in range(n): \n        if(str[x:] + str[:x] == str): \n            return x \n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) <= 1:\n        return 0\n    for i in range(1, len(str)):\n        if str[i:] + str[:i] == str:\n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    current = str\n    minRotations = 0\n    for i in range(len(str)):\n        current = current[1:] + current[0]\n        minRotations += 1\n        if current == str:\n            return minRotations\n    return minRotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Considering only upper case letters\n    str = str.upper()\n    l = []\n    for i in range(n):\n        l.append(str[i:]+str[:i])\n    print(l)\n    count = 0\n    for i in range(n):\n        if(l[i] == str):\n            count += 1\n    return count\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Created by : Sumedh\n    # Created on : 19-June-2020\n    return s.replace(ch, \"\")\n    "
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\") \n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '')\n  "
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # return s.replace(ch, \"\")\n    return \"\".join([ch if ch!=s[i] else '' for i in range(len(s))])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # to remove the first occurrence of a given character \n    # from the string \n    string = s\n    char = ch \n    s = s.replace(char, \"\") \n    s = s[1:len(s)-1] \n    s = s + char \n    print(s) \n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    s=list(s)\n    s.remove(ch)\n    s.remove(ch)\n    return ''.join(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[0]+s[1:].replace(ch,\"\",1)+s[-1]\n    "
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    try:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n    except:\n        return \"Character does not exist in the string\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first_occurance = s.index(ch)\n        # last_occurance = len(s)-s[::-1].index(ch)-1\n        last_occurance = s[::-1].index(ch)\n        return s[:first_occurance] + s[first_occurance+1:last_occurance+1] + s[last_occurance+1:]\n    else:\n        return s\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sum_row(row):\n        return sum(row)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #convert the matrix to a list of lists to sort it.\n    matrix_list = []\n    for i in range(len(M)):\n        matrix_list.append(M[i])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = M[:]\n    N = len(M)\n    for i in range(0, N):\n        M[i] = sorted(M[i])\n    for i in range(0, N):\n        for j in range(0, N-i-1):\n            if sum(M[j]) < sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    M.sort(key=lambda x: sum(x))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=lambda l: sum([abs(x) for x in l]))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = []\n    for i in range(len(M)):\n        M[i] = sum(M[i])\n    sorted_M.sort(key=lambda x: x)\n    print(sorted_M)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(1, len(M)):\n        for j in range(len(M) - 1, i - 1, -1):\n            if M[j][i] > M[j - 1][i]:\n                M[j], M[j - 1] = M[j - 1], M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = []\n    max_rows = max([len(row) for row in M])\n    for i in range(len(M)):\n        row = []\n        for j in range(max_rows):\n            if j < len(M[i]):\n                row.append(M[i][j])\n            else:\n                row.append(0)\n        sorted_M.append(row)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Append Sum of row elements to M_sorted\n    M_sorted = []\n    for i in range(len(M)):\n        sum = 0\n        for j in range(len(M[i])):\n            sum += M[i][j]\n        M_sorted.append(sum)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n    \ndef get_number_input(prompt,errormsg,numtype): \n    '''\n    Write a Python function to get an integer number from the user. \n    Arguments:\n    prompt -- message to display to the user when asking for input\n    errormsg -- message to display if the value entered by the user is not valid\n    numtype -- type of number to be entered by the user\n    Return value:\n    number entered by the user\n    '''\n    while True: \n        try: \n            number=numtype(input(prompt))\n            return number \n        except ValueError: \n            print(errormsg)\n            continue \n            \ndef create_table(tablelist,table_name) : \n    '''\n    Write a Python function to create a database table \n    with given columns and data types.\n    Arguments:\n    tablelist -- list of columns with data types\n    table_name -- name of the table to be created \n    Return value:\n    None\n    '''\n    db = sqlite3.connect('Lab08.db') \n    cursor = db.cursor() \n    colname=[]\n    datatype=[]\n    for col in tablelist : \n        colname.append(col[0])\n        datatype.append(col[1])\n    cmd = 'CREATE TABLE '+table_name+' ('+colname[0]+' '+datatype[0]+','+colname[1]+' '+datatype[1]+','+colname[2]+' '+datatype[2]+')'\n    cursor.execute(cmd) \n    db.close() \n    return \n    \ndef create_table_with_cid() : \n    '''\n    Write a Python function to create a table with columns ID, name, marks. \n    Use this function if you want to add a column with unique id for each row. \n    Arguments:\n    None\n    Return value:\n    None\n    '''\n    db = sqlite3.connect('Lab08.db') \n    cursor = db.cursor() \n    cursor.execute('CREATE TABLE student (ID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Marks REAL)')\n    db.commit() \n    db.close() \n    return\n    \ndef read_table(table_name,where=None): \n    '''\n    Write a Python function to read from a database table and print out the data. \n    Arguments:\n    table_name -- name of the table to be read from \n    where -- where clause to be used in the read statement\n    Return value:\n    None\n    '''\n    db = sqlite3.connect('Lab08.db') \n    cursor = db.cursor() \n    if where!=None: \n        cmd = 'SELECT * FROM '+table_name+' WHERE '+where \n    else : \n        cmd = 'SELECT * FROM '+table_name\n    cursor.execute(cmd) \n    result=cursor.fetchall() \n    for row in result : \n        print(row) \n    db.close() \n    return \n    \ndef update_table(table_name,column,value,where) : \n    '''\n    Write a Python function to update a database table. \n    Arguments:\n    table_name -- name of the table to be updated \n    column -- column name where the data needs to be updated \n    value -- new value for the column \n    where -- where clause if there is one \n    Return value:\n    None\n    '''\n    db = sqlite3.connect('Lab08.db') \n    cursor = db.cursor() \n    if where!=None : \n        cmd = 'UPDATE '+table_name+' SET '+column+'=? WHERE '+where \n    else : \n        cmd = 'UPDATE '+table_name+' SET '+column+'=?'\n    cursor.execute(cmd,(value,)) \n    db.commit() \n    db.close() \n    return \n    \ndef delete_table(table_name,where=None) : \n    '''\n    Write a Python function to delete data from a database table. \n    Arguments:\n    table_name -- name of the table to be deleted from \n    where -- where clause if there is one \n    Return value:\n    None\n    '''\n    db = sqlite3.connect('Lab08.db') \n    cursor = db.cursor() \n    if where!=None : \n        cmd = 'DELETE FROM '+table_name+' WHERE '+where \n    else : \n        cmd = 'DELETE FROM '+table_name \n    cursor.execute(cmd) \n    db.commit() \n    db.close() \n    return\n    \ndef insert_into_table(table_name,column,values): \n    '''\n    Write a Python function to insert data into a database table. \n    Arguments:\n    table_name -- name of the table to be updated \n    column -- column names \n    values -- column values \n    Return value:\n    None\n    '''\n    db = sqlite3.connect('Lab08.db') \n    cursor = db.cursor() \n    cmd = 'INSERT INTO '+table_name+' ('+column+') VALUES('+values+')' \n    cursor.execute(cmd) \n    db.commit() \n    db.close() \n    return\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    volume = (1/6) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(\"The volume of a triangular prism is : \"+str(0.5*(l*b*h)))\n    return 0.5*(l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    print(\"The volume of the triangular prism is\", volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    import math\n    \n    volume = l*b*h / 3\n    return math.sqrt(volume)\n    "
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/2) * l * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5 * l * b * h\n    \n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    return bool(re.search(r'^[a-z]+_[a-z]+$', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_+[a-z]{2,}', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'_[a-z]',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[_]\\w+[_]',text):\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text) == 0:\n        return False\n    count = 1\n    for i in range(0, len(text)-1):\n        if text[i] == '_' and text[i+1].islower():\n            count += 1\n        if text[i+1]!= '_':\n            count = 1\n        if text[i]!= '_' and text[i].islower() and count == 1:\n            return False\n        if text[i]!= '_' and text[i].islower() and count > 1:\n            return False\n    if text[-1] == '_' and text[len(text)-2].islower():\n        return False\n    if text[len(text)-1]!= '_':\n        return False\n    if text[0]!= '_' and text[0].islower():\n        return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # lowercase, replace with underline, lowercase again\n    return re.sub(\"[^_]+_[^_]+_[^_]+_[^_]+\", \"\", text.lower()) == \"\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.compile(r'^[a-z]+_[a-z]+$').match(text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'[a-z][_][a-z]*'\n    result = re.findall(regex,text)\n    if result!= []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-z]+_[a-z]')\n    return bool(regex.search(text))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a)\n    #return 4 * (a ** 2)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a*4)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = list(string) \n    l2 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for i in range(0, len(l1)): \n        for j in range(0, len(l2)): \n            if l1[i] == l2[j]: \n                l1[i] = '$'\n    for items in l1: \n        if items == '$': \n            l1.remove(items)\n    str = \"\" \n    return l1\ndef printlist(list1): \n    for i in range(len(list1)): \n        print list1[i], \ndef find_without(str1, str2):\n    length = len(str2) \n    result = 0 \n    for i in range(0, length): \n        for j in range(0, length): \n            if str1[j] == str2[i]: \n                result = 1\n                break\n        if result == 1: \n            break\n    if result == 0: \n        return -1\n    else: \n        return j \ndef list_to_str(list1): \n    str1 = \"\" \n    for ele in list1: \n        str1 = str1 + ele \n    return str1 \ndef remove_without(string, sub_str):\n    sub_len = len(sub_str) \n    string_len = len(string) \n    substring_last_index = -1\n    if string == '': \n        return -1\n    for i in range(0, string_len - sub_len + 1): \n        j = find_without(string, sub_str) \n        if j > substring_last_index: \n            substring_last_index = j \n            if substring_last_index == string_len - sub_len: \n                break\n    if substring_last_index == -1: \n        return -1\n    return string[:substring_last_index] \nif __name__ == \"__main__\":\n    string = \"thequickbrownfox\"\n    sub_str = \"quick\"\n    print(remove_without(string, sub_str))\n    string = \"ababab\"\n    sub_str = \"ab\"\n    print(remove_without(string, sub_str))\n    string = \"\"\n    sub_str = \"quick\"\n    print(remove_without(string, sub_str))\n    string = \"thequickbrownfox\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkill\"\n    print(remove_without(string, sub_str))\n    string = \"thisisacoolstring\"\n    sub_str = \"overkil"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = list(string) \n    for i in l:\n        if i in string2:\n            l.remove(i)\n    return l \n    \ndef list_to_str(l): \n    '''\n    Write a function that concatenates the list of strings in the following manner:\n    '''\n    concat = \"\"\n    for i in l:\n        concat = concat + i\n    return concat\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(filter(lambda x: x not in string,string))\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n    char_list = [0] * NO_OF_CHARS\n    for char in string:\n        char_list[ord(char)] += 1\n    start = 0\n    for i in range(NO_OF_CHARS):\n        if char_list[i] == 0:\n            start = i\n            break\n    # print(start, char_list)\n    new_str_list = [start]\n    # print(new_str_list)\n    for char in string:\n        char_list[ord(char)] -= 1\n        if char_list[ord(char)] == 0:\n            start = start + 1\n            new_str_list.append(start)\n    new_str_list.append(NO_OF_CHARS)\n    return new_str_list\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    arr=list(string) \n    i=0\n    for j in range(len(arr)): \n        if arr[j] not in arr[i:j]: \n            i+=1\n            arr[i]=arr[j] \n    return ''.join(arr[i:]) \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = []\n    l2 = []\n    for i in string:\n        l1.append(ord(i))\n    for i in string2:\n        l2.append(ord(i))\n    for i in range(len(l1)):\n        if l1[i] not in l2:\n            return l1[i:]\n    return l1\nprint(str_to_list(\"prasadgoswami\"))\nprint(str_to_list(\"prajapatgs\")"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    \n    key = []\n    for ch in string:\n        if ord(ch) not in key:\n            key.append(ord(ch))\n    \n    result = \"\"\n    for ch in string:\n        if ord(ch) in key:\n            continue\n        result += ch\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    temp_arr = [] \n    final_arr = [] \n    for i in string: \n        temp_arr.append(i) \n    for i in string: \n        if i not in temp_arr: \n            final_arr.append(i) \n    return \"\".join(final_arr) \n  \ndef list_to_str(char_list): \n    '''\n    Write a function to convert list to string.\n    '''\n    return ''.join(char_list) \n  \ndef find_count(string, sub_str): \n    '''\n    Write a function to count characters in a string and return the count of sub string.\n    '''\n    count = 0\n    for i in range(0, len(string)): \n        if (string[i] == sub_str[0]): \n            if (string[i:i + len(sub_str)] == sub_str): \n                count = count + 1\n    return count \n  \ndef find_index(string, sub_str): \n    '''\n    Write a function to find index of the sub string in string.\n    '''\n    index = -1\n    for i in range(0, len(string)): \n        if (string[i] == sub_str[0]): \n            if (string[i:i + len(sub_str)] == sub_str): \n                index = i \n                break\n    return index \n  \ndef count_occurences(string, sub_str): \n    '''\n    Write a function to count number of occurrences of a substring in a string.\n    '''\n    count = 0\n    index = find_index(string, sub_str) \n    while(index!= -1): \n        count = count + 1\n        index = find_index(string, sub_str) \n    return count \n  \ndef str_rotate_count(string, sub_str): \n    '''\n    Write a function to rotate the string by the number of characters in sub_str.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        if (len(string) > len(sub_str)): \n            return count_occurences(string[index + len(sub_str):], sub_str) \n        else: \n            return count_occurences(string[:len(string) - index], sub_str) \n    return 0 \n  \ndef str_rotate_index(string, sub_str): \n    '''\n    Write a function to find the character at the required index in the rotated string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        if (len(string) > len(sub_str)): \n            return list_to_str(string[index + len(sub_str):]) \n        else: \n            return list_to_str(string[:len(string) - index]) \n    return \" \"\n  \ndef str_strchr(string, sub_str): \n    '''\n    Write a function to find the index of the first character of the sub_str in string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return index \n    return -1\n  \ndef str_strcmp(string, sub_str): \n    '''\n    Write a function to compare the strings.\n    '''\n    if string == sub_str: \n        return 0\n    return -1\n  \ndef str_strcpy(string, sub_str): \n    '''\n    Write a function to copy a substring into another string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return string[:index] + sub_str + string[index + len(sub_str):] \n    return \"\"\n  \ndef str_strncmp(string, sub_str, size): \n    '''\n    Write a function to compare the strings with the given size.\n    '''\n    if string == sub_str: \n        return 0\n    if (len(string) >= size): \n        return 1 if string[:size] == sub_str else -1\n    return -1\n  \ndef str_strncpy(string, sub_str, size): \n    '''\n    Write a function to copy a substring into another string with the given size.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return string[:index] + sub_str + string[index + len(sub_str):] \n    return string[:size] + sub_str\n  \ndef str_strstr(string, sub_str): \n    '''\n    Write a function to find the first occurrence of the substring in string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return index \n    return -1\n  \ndef str_strrchr(string, sub_str): \n    '''\n    Write a function to find the last occurrence of the character in the string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return index \n    return -1\n  \ndef str_strspn(string, sub_str): \n    '''\n    Write a function to find the first occurrence of the sub string in string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return index \n    return -1\n  \ndef str_strstrspn(string, sub_str): \n    '''\n    Write a function to find the first occurrence of the sub string in string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return index \n    return -1\n  \ndef str_strstrcp(string, sub_str): \n    '''\n    Write a function to find the first occurrence of the sub string in string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return index \n    return -1\n  \ndef str_strstrrchr(string, sub_str): \n    '''\n    Write a function to find the last occurrence of the character in the string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return index \n    return -1\n  \ndef str_strstrrspn(string, sub_str): \n    '''\n    Write a function to find the first occurrence of the sub string in string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return index \n    return -1\n  \ndef str_strstrspnr(string, sub_str, size): \n    '''\n    Write a function to find the first occurrence of the sub string in string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return index \n    return -1\n  \ndef str_strstrrstr(string, sub_str): \n    '''\n    Write a function to find the first occurrence of the sub string in string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return index \n    return -1\n  \ndef str_strstrrstrrchr(string, sub_str): \n    '''\n    Write a function to find the last occurrence of the character in the string.\n    '''\n    index = find_index(string, sub_str) \n    if (index!= -1): \n        return index \n    return -1\n  \ndef str_strstrrstrrspn(string, sub_str, size): \n    '''\n    Write a function to find the first occurrence of the sub string in string.\n    '''\n    index = find_index(string, sub_str) "
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    len1 = len(string) \n    len2 = len(string) \n    final_string = [''] * len1 \n    j = 0\n    for i in range(0, len1): \n        if string[i] not in string[:i]: \n            final_string[j] = string[i] \n            j += 1\n    return \"\".join(final_string)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = [] \n    l2 = []\n    for i in string:\n        l1.append(ord(i))\n    for j in string2:\n        l2.append(ord(j))\n    for i in l2:\n        if i in l1:\n            l1.remove(i)\n    return l1\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # time complexity of this solution is O(n log n) because of sorting algorithm.\n    if len(arraynums) == 0:\n        return False\n    arraynums = sorted(arraynums)\n    for index, num in enumerate(arraynums):\n        if index < len(arraynums)-1 and num == arraynums[index+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(0,len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i]==arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = [5,4,7,3,7,8,3,1,1]\n    dictnums = {}\n    for i in arraynums:\n        if i not in dictnums:\n            dictnums[i] = True\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = sorted(arraynums)\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return False if len(set(arraynums)) == len(arraynums) else True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dupes = []\n    for item in arraynums:\n        if arraynums.count(item) > 1:\n            dupes.append(item)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for i in range(0, len(arraynums) - 1):\n        if arraynums[i] == arraynums[i + 1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for element in arraynums:\n        if element in seen:\n            return True\n        seen.add(element)\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 5 == 2\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x%3==0) and (x%5==0):\n        return True\n    else:\n        return False\ndef is_woodall_improved(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x%3==0) and (x%5==0)\nprint(is_woodall_improved(77))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import random\n    wood = [x for x in range(1,101)]\n    woodball = random.choice(wood)\n    if woodball == x:\n        return True\n    else:\n        return False\n    return woodball\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    sum = 0\n    y = x\n    while y > 0:\n        rem = y%10\n        sum = sum + rem**3\n        y = y//10\n    if x == sum:\n        print(x, \"is a woodall.\")\n    else:\n        print(x, \"is not a woodall.\")\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x % 5 == 0 else False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    count=0\n    n=x\n    while x!=0:\n        r=x%10\n        x=x//10\n        if r%2==0:\n            count=count+1\n    if count==len(str(n)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 or x % 3 == 0:\n        print('Yes')\n    else:\n        print('No')\n        \ndef test_is_woodall():\n    assert is_woodall(5) == 'Yes'\n    assert is_woodall(6) == 'No'\n    assert is_woodall(10) == 'Yes'\n    assert is_woodall(15) == 'No'\n    assert is_woodall(18) == 'Yes'\n    assert is_woodall(20) == 'Yes'\n    assert is_woodall(25) == 'No'\n    \ndef is_prime(x):\n    '''\n    Write a function to check if the given number is prime or not.\n    '''\n    if x < 2:\n        print('No')\n    else:\n        for i in range(2, x//2+1):\n            if x % i == 0:\n                print('No')\n                break\n        else:\n            print('Yes')\n            \ndef test_is_prime():\n    assert is_prime(5) == 'Yes'\n    assert is_prime(4) == 'No'\n    assert is_prime(10) == 'Yes'\n    assert is_prime(15) == 'No'\n    assert is_prime(18) == 'Yes'\n    assert is_prime(20) == 'No'\n    \n    \ndef get_next_prime(x):\n    '''\n    Write a function to get the next prime number after the given number\n    '''\n    if x < 2:\n        return None\n    else:\n        for i in range(2, x):\n            if x % i == 0:\n                break\n        else:\n            return x\n        return get_next_prime(x+1)\n    \ndef test_get_next_prime():\n    assert get_next_prime(5) == 7\n    assert get_next_prime(10) == 11\n    assert get_next_prime(15) == 17\n    assert get_next_prime(25) == 29\n    assert get_next_prime(27) == 29\n    assert get_next_prime(29) == 31\n    assert get_next_prime(30) == 31\n    assert get_next_prime(31) == 31\n    assert get_next_prime(32) == 31\n    assert get_next_prime(33) == 31\n    assert get_next_prime(34) == 31\n    assert get_next_prime(35) == 31\n    \ndef is_abundant(x):\n    '''\n    Write a function to check if the given number is abundant or not\n    '''\n    def get_divisors(x):\n        divisors = []\n        for i in range(1, x//2+1):\n            if x % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    if sum(get_divisors(x)) > x:\n        print('Yes')\n    else:\n        print('No')\n        \ndef test_is_abundant():\n    assert is_abundant(12) == 'Yes'\n    assert is_abundant(18) == 'Yes'\n    assert is_abundant(20) == 'No'\n    assert is_abundant(21) == 'No'\n    assert is_abundant(24) == 'Yes'\n    \ndef get_abundant_numbers(n):\n    '''\n    Write a function to get all abundant numbers in a range of numbers\n    '''\n    abundant_numbers = []\n    for i in range(1, n):\n        if is_abundant(i):\n            abundant_numbers.append(i)\n    return abundant_numbers\n    \ndef test_get_abundant_numbers():\n    assert get_abundant_numbers(100) == [12, 18, 20, 24, 30, 40, 51, 54, 60, 69, 78, 80]\n    \ndef is_perfect(x):\n    '''\n    Write a function to check if the given number is perfect or not\n    '''\n    def get_divisors(x):\n        divisors = []\n        for i in range(1, x//2+1):\n            if x % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    if sum(get_divisors(x)) == x:\n        print('Yes')\n    else:\n        print('No')\n        \ndef test_is_perfect():\n    assert is_perfect(6) == 'Yes'\n    assert is_perfect(28) == 'Yes'\n    assert is_perfect(496) == 'Yes'\n    assert is_perfect(8128) == 'No'\n    assert is_perfect(8169) == 'No'\n    assert is_perfect(8190) == 'No'\n    \ndef is_sudoku(x):\n    '''\n    Write a function to check if the given number is sudoku or not\n    '''\n    def get_box(x, y):\n        if x % 3 == 0:\n            if y % 3 == 0:\n                box = [x-3, y-3, x-3+1, y-3+1, x-3+2, y-3+2]\n            elif y % 3 == 1:\n                box = [x-3, y-3, x-3+1, y-3+1, x-3+2, y-3+2, x-3, y-3+3]\n            else:\n                box = [x-3, y-3, x-3+1, y-3+1, x-3+2, y-3+2, x-3, y-3+3]\n        elif x % 3 == 1:\n            if y % 3 == 0:\n                box = [x-3, y-3, x-3+1, y-3+1, x-3+2, y-3+2, x-3+1, y-3+1]\n            elif y % 3 == 1:\n                box = [x-3, y-3, x-3+1, y-3+1, x-3+2, y-3+2, x-3+1, y-3+1, x-3, y-3+3, x-3+1, y-3+3]\n            else:\n                box = [x-3, y-3, x-3+1, y-3+1, x-3+2, y-3+2, x-3+1, y-3+1, x-3, y-3+3, x-3+1, y-3+3]\n        else:\n            if y % 3 == 0:\n                box = [x-3, y-3, x-3+1, y-3+1, x-3+2, y-3+2, x-3+2, y-3+2]\n            elif y % 3 == 1:\n                box = [x-3, y-3, x-3+1, y-3+1, x-3+2, y-3+2, x-3+2, y-3+2, x-3, y-3+3, x-3+1, y-3+3]\n            else:\n                box = [x-3, y-3, x-3+1, y-3+1, x-3+2, y-3+2, x-3+2, y-3+2, x-3, y-3+3, x-3+1, y-3+3]\n        return box\n        \n    for i in range(9):\n        if len(set(x[i]))!= 9:\n            print('No')\n            return\n        for j in range(9):\n            if len(set(x[:,j]))!= 9:\n                print('No')\n                return\n            if len(set(x[get_box(i, j)]))!= 9:\n                print('No')\n                return\n    print('Yes')\n    \ndef test_is_sudoku():\n    assert is_sudoku([\n        [5, 3, 0, 0, 7, 0, 0, 0, 0],\n        [6, 0, 0, 1, 9, 5, 0, 0, 0],\n        [0, 9, 8, 0, 0, 0, 0, 6, 0],\n        [8, 0"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #your code here\n    return \"woodall\" in str(x)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % (int(x**(1/2))) == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 5 == 0 and x % 3 == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num:\n        rem = num%10\n        num = num//10\n        rev = rev*10 + rem\n    if num == rev - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    return int(num) == int(num[::-1])*2 -1\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = (rev_num * 10) + (num % 10)\n        num = int(num / 10)\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    def rev(num):\n        if num == 0:\n            return 0\n        elif num < 0:\n            return -rev(abs(num))\n        return int(str(num)[::-1])\n    return (num == rev(num + 1))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    while num>0:\n        rev=(rev*10)+num%10\n        num//=10\n    return (num==rev or num==rev+1)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while (num > 0):\n        rem = num%10\n        rev_num = (rev_num * 10) + rem\n        num = num // 10\n    if (rev_num == (num - 1)):\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    res=0\n    while(num):\n        res=(res*10)+num%10\n        num=num//10\n    if(res==num+1):\n        print(res)\n        print(num)\n        print(\"It is one less than twice its reverse\")\n    else:\n        print(\"It is not one less than twice its reverse\")\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num1 = int(num)\n    rev_num = int(str(num)[::-1])\n    if num1 == rev_num - 1:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num1 = str(num)\n    num2 = str(num)[::-1]\n    num3 = int(num2) + 1\n    num4 = int(num2)\n    if num3 == num1:\n        return True\n    return False\ndef tally(num):\n    '''\n    Write a python function to check if the sum of digits of a given number is a number itself.\n    '''\n    num = str(num)\n    sum = 0\n    for i in num:\n        sum += int(i)\n    return num == str(sum)\ndef power(num):\n    '''\n    Write a python function to check if a given number is a power of 2.\n    '''\n    num = int(num)\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    if num == 2:\n        return True\n    while num % 2 == 0:\n        num /= 2\n    if num == 1:\n        return True\n    return False\ndef perfect_power(num):\n    '''\n    Write a python function to check if a given number is the product of two distinct perfect numbers.\n    '''\n    if power(num) == False:\n        return False\n    num2 = int(num)\n    i = 2\n    while i * i < num2:\n        if num2 % i == 0:\n            return False\n        i += 1\n    return True\ndef perfect_power2(num):\n    '''\n    Write a python function to check if a given number is the product of two distinct perfect numbers.\n    '''\n    num1 = int(num)\n    i = 2\n    while i * i < num1:\n        if num1 % i == 0:\n            num2 = int(num1 / i)\n            if power(num2) == True and num2!= i:\n                return True\n        i += 1\n    return False\ndef prime_factors(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    lst = []\n    i = 2\n    num1 = int(num)\n    while i * i < num1:\n        if num1 % i == 0:\n            num2 = int(num1 / i)\n            if power(num2) == True and num2!= i:\n                lst.append(num2)\n            elif num2!= i:\n                lst.append(i)\n        i += 1\n    if i * i == num1:\n        lst.append(i)\n    return lst\ndef prime_factors2(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    num1 = int(num)\n    lst = []\n    for i in range(2,num1):\n        while num1 % i == 0:\n            lst.append(i)\n            num1 /= i\n    if num1!= 1:\n        lst.append(num1)\n    return lst\ndef twin_prime(num):\n    '''\n    Write a python function to check if a given number is a twin prime.\n    '''\n    num1 = int(num)\n    if prime_factors2(num1) == [2,3] or prime_factors2(num1) == [3,2]:\n        return True\n    return False\ndef twin_prime2(num):\n    '''\n    Write a python function to check if a given number is a twin prime.\n    '''\n    num1 = int(num)\n    lst = []\n    for i in range(2,num1):\n        while num1 % i == 0:\n            num1 /= i\n            if num1 == 1:\n                lst.append(i)\n    if len(lst) == 2:\n        return True\n    return False\ndef twin_prime3(num):\n    '''\n    Write a python function to check if a given number is a twin prime.\n    '''\n    num1 = int(num)\n    lst = []\n    for i in range(2,num1):\n        while num1 % i == 0:\n            num1 /= i\n            lst.append(i)\n    if len(lst) == 2:\n        return True\n    return False\ndef twin_prime4(num):\n    '''\n    Write a python function to check if a given number is a twin prime.\n    '''\n    num1 = int(num)\n    i = 2\n    while i * i < num1:\n        if num1 % i == 0:\n            num2 = int(num1 / i)\n            if power(num2) == True and num2!= i:\n                return True\n        i += 1\n    if i * i == num1:\n        return True\n    return False\ndef twin_prime5(num):\n    '''\n    Write a python function to check if a given number is a twin prime.\n    '''\n    num1 = int(num)\n    i = 2\n    while i * i < num1:\n        if num1 % i == 0:\n            num2 = int(num1 / i)\n            if power(num2) == True and num2!= i:\n                return True\n        i += 1\n    if i * i == num1:\n        return True\n    return False\ndef twin_prime6(num):\n    '''\n    Write a python function to check if a given number is a twin prime.\n    '''\n    num1 = int(num)\n    lst = []\n    for i in range(2,num1):\n        while num1 % i == 0:\n            num1 /= i\n            lst.append(i)\n    if len(lst) == 2:\n        return True\n    return False\ndef twin_prime7(num):\n    '''\n    Write a python function to check if a given number is a twin prime.\n    '''\n    num1 = int(num)\n    i = 2\n    while i * i < num1:\n        if num1 % i == 0:\n            num2 = int(num1 / i)\n            if power(num2) == True and num2!= i:\n                return True\n        i += 1\n    if i * i == num1:\n        return True\n    return False\ndef twin_prime8(num):\n    '''\n    Write a python function to check if a given number is a twin prime.\n    '''\n    num1 = int(num)\n    i = 2\n    while i * i < num1:\n        if num1 % i == 0:\n            num2 = int(num1 / i)\n            if power(num2) == True and num2!= i:\n                return True\n        i += 1\n    if i * i == num1:\n        return True\n    return False\ndef twin_prime9(num):\n    '''\n    Write a python function to check if a given number is a twin prime.\n    '''\n    num1 = int(num)\n    i = 2\n    while i * i < num1:\n        if num1 % i == 0:\n            num2 = int(num1 / i)\n            if power(num2) == True and num2!= i:\n                return True\n        i += 1\n    if i * i == num1:\n        return True\n    return False\ndef twin_prime10(num):\n    '''\n    Write a python function to check if a given number is a twin prime.\n    '''\n    num1 = int(num)\n    i = 2\n    while i * i < num1:\n        if num1 % i == 0:\n            num2 = int(num1 / i)\n            if power(num2) == True and num2!= i:\n                return True\n        i += 1\n    if i * i == num1:\n        return True\n    return False\ndef twin_prime11(num):\n    '''\n    Write a python function to check if a given number is a twin prime.\n    '''\n    num1 = int(num)\n    i = 2\n    while i * i < num1:\n        if num1 % i == 0:\n            num2 = int(num1 / i)\n            if power(num2) == True and num2!= i:\n                return True\n        i += 1\n    if i * i == num1:\n        return True\n    return False\ndef twin_prime12(num):\n    '''\n    Write a python function to check if a given number is "
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #check if the number is less than 10\n    if num < 10:\n        return False\n    #convert to string to find reverse\n    str_num = str(num)\n    rev_str_num = str_num[::-1]\n    if int(rev_str_num) == (int(str_num) -1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(0,len(arr)) : \n        for j in range(i+1,len(arr)) : \n            current_num = arr[i]*10+arr[j]\n            if (current_num > max_num) : \n                max_num = current_num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        for j in range(i):\n            if arr[j]<arr[j+1]:\n                temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n    return arr[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return arr[0]\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n    return arr[n-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Start with the first element in the array.\n    largest_num = arr[0] \n    \n    # Initialize the current number as the first element.\n    current_num = arr[0] \n    \n    # Iterate the loop till we reach the end of the array.\n    for num in arr[1:] : \n        \n        # If the new number is greater than current number, then update the largest_num. \n        if num > current_num : \n            largest_num = current_num \n            \n        # Update the current number as the new number.\n        current_num = num \n    \n    return largest_num\n    \ndef find_Max_Num_V2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Initialize the largest_num to the first element.\n    largest_num = arr[0] \n    \n    # Iterate the loop till we reach the end of the array.\n    for i in range(1, len(arr)) : \n        \n        # Comparing the largest_num with the new number, update if new number is greater than the current largest number.\n        if arr[i] > largest_num : \n            largest_num = arr[i] \n    \n    return largest_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return arr[0]\n    else :\n        max_num = arr[0]\n        for i in range(n) :\n            num = arr[i]\n            while num > 0 :\n                rem = num % 10\n                max_num = max_num * 10 + rem\n                num = num // 10\n        return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize variables.\n    max_number = -1\n    n = len(arr)\n    # Traverse through the list of digits.\n    for i in range(n) : \n        # Check for each number that it is greater than current max.\n        for j in range(i, n) : \n            # If num > max_number, update it.\n            if num(arr[i:j]) > max_number : \n                max_number = num(arr[i:j])\n    # Return the largest number.\n    return max_number\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # to store the current Max Number \n    largest = 0\n    # to store the number of elements processed\n    len_of_arr = len(arr) \n    # to iterate over the elements of the array\n    for i in range(0, len_of_arr): \n        # to find the largest number of the element at index i \n        arr_i = [int(k) for k in str(arr[i])] \n        # to find the largest number of the element at index i and its subsequent element\n        if largest < max(arr_i): \n            largest = max(arr_i) \n    # to return the largest number \n    return largest\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return(max(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxNum = '' \n    for i in range(0, len(arr)): \n        if arr[i] >= maxNum: \n            maxNum = arr[i] \n    return maxNum \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxNum = []\n    n = len(arr)\n    # Iterate the array\n    for i in range(n): \n        for j in range(n): \n            for k in range(n): \n                if (arr[i] + arr[j] + arr[k] > arr[i] + arr[j] + arr[k]): \n                    continue\n                else: \n                    if arr[i] + arr[j] + arr[k] not in maxNum:\n                        maxNum.append(arr[i] + arr[j] + arr[k])\n    print(max(maxNum))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\nprint(opposite_Signs(-1,1))\nprint(opposite_Signs(1,-1))\nprint(opposite_Signs(-1,1))\nprint(opposite_Signs(1,1))"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    return x>0 and y<0 or x<0 and y>0\n    \n    \n    \n    \nprint(opposite_Signs(-1,3))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x > 0 and y > 0):\n        print(\"True\")\n    elif(x < 0 and y < 0):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0 \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    else:\n        return False\nprint(opposite_Signs(10,-7)) \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x*y > 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0)or(x>0 and y<0): \n        return True\n    else:\n        return False\n        \n        \n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n+1)*n/2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 2*n + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n_oct = int((3 * n ** 2 + n) / 2)\n    return n_oct\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    count = 1\n    nth_octa = 1\n    \n    while count < n:\n        nth_octa = nth_octa + 8*count\n        count += 1\n    \n    return nth_octa\n    \n    \n    \n    \nif __name__ == \"__main__\":\n    \n    n = 4\n    print(is_octagonal(n))\n    "
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    nth_octagonal_number = 0\n    def triangle_number(n):\n        return n*(n+1)/2\n    if n < 1:\n        return None\n    else:\n        for i in range(1,n+1):\n            nth_octagonal_number += triangle_number(i)\n        return nth_octagonal_number\ndef octagonal_number_to_triangle(n):\n    return n*(n+1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = int(n)\n    return n * (3 * n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * 8 + is_octagonal(n-1)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = []\n    def dfs(index, path):\n        if index == len(s):\n            substrings.append(path)\n        else:\n            dfs(index+1, path+s[index])\n            dfs(index+1, path+s[index])\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    freq = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            freq[s[i:j]] += 1\n    #print(freq)\n    return len([i for i in freq if i[0] == '0' and len(i) > 1])\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # list_of_substrings = []\n    # for i in range(len(s)):\n    #     for j in range(len(s)-1, i, -1):\n    #         if sum([int(i) for i in s[i:j+1]]) == len(s[i:j+1]):\n    #             list_of_substrings.append(s[i:j+1])\n    # return list_of_substrings\n    return len(set(s[i:j+1] for i in range(len(s)) for j in range(len(s)-1, i, -1) if sum([int(i) for i in s[i:j+1]]) == len(s[i:j+1])))\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    num_substrings = 0\n    for i in range(len(s)):\n        num_substrings += count_substring_of_len(s,i)\n    return num_substrings\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            subString = s[i:j]\n            subString_sum = 0\n            for k in subString:\n                subString_sum += int(k)\n            if subString_sum == len(subString):\n                result += 1\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substr = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr[s[i:j+1]] += 1\n    return len(substr)\ns = \"abccbcdbb\"\nprint(count_Substrings(s))\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(map(int, list(s[i:j]))) == len(s[i:j]):\n                res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    def count_Substring(i,j,length):\n        if i < 0:\n            return 0\n        if j == -1:\n            return 1\n        if i >= length:\n            return 0\n        return count_Substring(i+1,j+1,length) + count_Substring(i,j+1,length)\n    return count_Substring(0,0,length)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    for j in range(n):\n        dp[j][j] = 1\n    for i in range(n-1,-1,-1):\n        for j in range(i+1,n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j],dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    N = len(s)\n    count = 0\n    d = defaultdict(int)\n    # for i in range(N):\n    #     for j in range(i+1, N+1):\n    #         if sum(list(map(int,s[i:j]))) == j-i:\n    #             count += 1\n    for i in range(1, N+1):\n        d[i] += 1\n        for j in range(i):\n            sum_i_to_j = sum(list(map(int, s[j:i])))\n            if sum_i_to_j == i-j:\n                count += d[i-j]\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    #return min(xs)\n    return reduce(lambda x,y: x if x<y else y, xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # start writing your code here\n    \n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = min(xs)\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    s=xs[0]\n    for i in xs:\n        if i < s:\n            s=i\n    return s\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # if xs is empty, return None\n    if len(xs) == 0:\n        return None\n    # if only one element in the list, return the element itself\n    elif len(xs) == 1:\n        return xs[0]\n    # if there are more than one element in the list, return smallest number\n    else:\n        return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff=0\n    test_list=sorted(test_list)\n    for i in range(len(test_list)-1):\n        if (abs(test_list[i] - test_list[i+1])) > max_diff:\n            max_diff=abs(test_list[i] - test_list[i+1])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(test_list[i] - test_list[i+1] for i in range(0, len(test_list), 2))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = None\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if max_diff is None or abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    # Write your code here\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if abs(test_list[i] - test_list[j]) > maximum and i!= j:\n                maximum = abs(test_list[i] - test_list[j])\n    return maximum\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    max_diff = abs(test_list[1]-test_list[0])\n    for i in range(1,len(test_list)-1):\n        diff = abs(test_list[i+1]-test_list[i])\n        if diff>max_diff:\n            max_diff = diff\n    return max_diff\n    #return test_list[len(test_list)-1]-test_list[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    x = [i for i in range(len(test_list))]\n    diff = []\n    for i in x:\n        for j in x:\n            if i!= j:\n                diff.append(abs(test_list[i]-test_list[j]))\n    return(max(diff))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return None\n    else:\n        max_diff = 0\n        for i in range(len(test_list)):\n            for j in range(len(test_list)):\n                if i < j:\n                    if test_list[i] - test_list[j] > max_diff:\n                        max_diff = test_list[i] - test_list[j]\n        return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    sorted_tuple_list = sorted(test_list, key=lambda x: x[0])\n    highest_difference = sorted_tuple_list[0][0] - sorted_tuple_list[1][0]\n    lowest_difference = sorted_tuple_list[-1][0] - sorted_tuple_list[-2][0]\n    for i in range(len(sorted_tuple_list)):\n        if i == 0 or i == len(sorted_tuple_list)-1:\n            continue\n        if sorted_tuple_list[i][0] - sorted_tuple_list[i+1][0] > highest_difference:\n            highest_difference = sorted_tuple_list[i][0] - sorted_tuple_list[i+1][0]\n        if sorted_tuple_list[i][0] - sorted_tuple_list[i-1][0] > highest_difference:\n            highest_difference = sorted_tuple_list[i][0] - sorted_tuple_list[i-1][0]\n    return highest_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    return abs(test_list[0] - test_list[1])\n    \n    \nif __name__ == '__main__':\n    n = int(input())\n    ar = list(map(int, input().split()))\n    print(max_difference(ar))\n    \n\"\"\"\nSample Input:\n4\n9 5 2 6\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for pair in zip(test_list,test_list[1:]):\n        diff_list.append(abs(pair[0]-pair[1]))\n    return max(diff_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        for j in range(len(subjectmarks)):\n            if subjectmarks[i][1]>subjectmarks[j][1]:\n                temp=subjectmarks[i]\n                subjectmarks[i]=subjectmarks[j]\n                subjectmarks[j]=temp\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjects = {}\n    for mark in subjectmarks:\n        if mark[1] not in subjects.keys():\n            subjects[mark[1]] = [mark]\n        else:\n            subjects[mark[1]].append(mark)\n    print(subjects)\n    return subjects\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda tup: tup[1], reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks[2]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    print(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key = lambda x: x[1])\n    print(sorted_marks)\n    \nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Your code goes here\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_list = sorted(subjectmarks, key=lambda x: x[1])\n    return new_list\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #loop through the list\n    #for each item in the list\n    #return a sorted list\n    sorted_list = []\n    for item in subjectmarks:\n        sorted_list.append(item[1])\n    sorted_list.sort()\n    return sorted_list\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) > 0:\n        if isinstance(data_list[0], list):\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for num in data_list:\n        if type(num) == list:\n            result += recursive_list_sum(num)\n        else:\n            result += num\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        first_el = data_list[0]\n        rest = data_list[1:]\n        if type(first_el) == int:\n            return first_el + recursive_list_sum(rest)\n        else:\n            return recursive_list_sum(first_el) + recursive_list_sum(rest)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if type(element) is list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    elif len(data_list) > 1:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, int):\n        return data_list\n    elif isinstance(data_list, list):\n        return sum(recursive_list_sum(data) for data in data_list)\n    else:\n        return 0\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(count)\npos_count([5,10,-2,3,7,8])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print('\\nNumber of positive numbers:', count)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(x > 0 for x in list)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in range(0, len(list)):\n        if list[i] > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 4636453, 13834823, 29398345, 91275560]\n    for i in range(n):\n        bell.append(bell[-1] + bell[-2])\n    return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    return sum([bell_number(i-1)*bell_number(n-i) for i in range(1, n)])\n    \n    \n    "
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_num = [[0]*(n+1) for _ in range(n+1)]\n    bell_num[0][0] = 1\n    for i in range(1, n+1):\n        bell_num[i][0] = bell_num[i-1][0]\n        for j in range(1, i+1):\n            bell_num[i][j] = bell_num[i-1][j-1] + bell_num[i][j-1]\n    return bell_num[n][n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    if n % 2 == 0:\n        return bell_number(n/2)*bell_number(n/2)\n    else:\n        return bell_number(n/2)*bell_number(n/2)*bell_number(n/2+1)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    assert(n == len(bell_numbers))\n    num_partitions = [[0 for i in range(n+1)] for j in range(n+1)]\n    num_partitions[0][0] = 1\n    for i in range(n+1):\n        for j in range(i+1):\n            if j == 0:\n                num_partitions[i][j] = 1\n            elif j == i:\n                num_partitions[i][j] = 1\n            else:\n                for k in range(j):\n                    num_partitions[i][j] += num_partitions[i-1][k] * num_partitions[j-k-1][i-j-1]\n    return num_partitions[n][n] - 1\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # problem sets\n    problems = range(1, n + 1)\n    # table containing the bell numbers\n    table = [0 for i in range(n + 1)]\n    # the first bell number is always 1\n    table[0] = 1\n    # the first problem is the sum of all the bell numbers except for itself\n    table[1] = bell_numbers(1, n)\n    # go through the table and add the number of ways to partition the other problems\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            table[i] += table[j] * bell_numbers(j + 1, i - 1)\n    return table[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [0] * (n + 1)\n    bells[0] = 1\n    bells[1] = 1\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            bells[i] = bells[i] + bells[i - j]\n    return bells[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    assert n >= 0\n    bells = [1, 1, 2]\n    if n == 0: return bells[0]\n    if n == 1: return bells[1]\n    if n == 2: return bells[2]\n    while n > 2:\n        bells[2] = bells[1] + bells[2]\n        bells[1] = bells[0] + bells[1]\n        bells[0] = bells[1] + bells[0]\n        n -= 1\n    return bells[0] + bells[1] + bells[2]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i]<=A[i+1] for i in range(len(A)-1)) or all(A[i]>=A[i+1] for i in range(len(A)-1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag = True\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A = sorted(A)\n    if (A == A[::-1]):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,3,2]\n    # Output = True\n    # A = [1,3,4]\n    # Output = False\n    if len(A) < 2:\n        return True\n    elif A[0] == A[-1]:\n        return True\n    else:\n        monotonic_increasing = True\n        monotonic_decreasing = True\n        for i in range(len(A)-1):\n            if A[i] == A[i+1]:\n                continue\n            elif A[i] > A[i+1]:\n                monotonic_increasing = False\n            elif A[i] < A[i+1]:\n                monotonic_decreasing = False\n        return monotonic_increasing or monotonic_decreasing\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sub in s:\n        if sub not in l:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    return is_sublist(l[1:], s) if l[0] == s[0] and is_sublist(l[1:], s[1:]) else False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if len(s) > len(l):\n        return False\n    i, j = 0, 0\n    while i < len(l):\n        if l[i] == s[j]:\n            j += 1\n            if j == len(s):\n                return True\n        i += 1\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    s_len = len(s)\n    for i in range(len(l) - len(s) + 1):\n        if l[i] == s[0]:\n            match = 1\n            for j in range(1, s_len):\n                if l[i + j]!= s[j]:\n                    match = 0\n                    break\n            if match:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif not l:\n        return False\n    elif l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    print(\"List = {}\".format(l))\n    print(\"Sublist = {}\".format(s))\n    if not s:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif l == []:\n        return False\n    else:\n        return is_sublist(l[1:], s) or is_sublist(l[1:], s[1:])\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif len(l) < len(s):\n        return False\n    elif l[:len(s)] == s:\n        return True\n    else:\n        return is_sublist(l[1:], s)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_tuple = True\n    for i in range(0,len(Input)-1):\n        if(len(Input[i])!=len(Input[i+1])):\n            equal_tuple = False\n    print(equal_tuple)\n    return\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = list(Input)\n    for ele in Input:\n        if len(ele)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def length(Input):\n        return len(Input)\n    Lengths = []\n    for Tuple in Input:\n        Lengths.append(len(Tuple))\n    if len(set(Lengths)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_list = list(Input)\n    temp = tuple_list[0]\n    flag = 0\n    for i in range(len(tuple_list)):\n        if(temp!= tuple_list[i]):\n            flag = 1\n            break\n    if(flag == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i == j:\n                continue\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 1:\n        return True\n    else:\n        first_item = Input[0]\n        return all(item[0] == first_item[0] and item[1] == first_item[1] for item in Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n    \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                Output.append(True)\n            else:\n                Output.append(False)\n    print(Output)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(Input)) == 1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    comb_sort_helper(nums, 0, len(nums) - 1)\n    \ndef comb_sort_helper(nums, first, last):\n    if first >= last:\n        return\n    \n    # find the range of sublist for Comb sort\n    gap = (last - first) // 2\n    i = first\n    j = first + gap\n    \n    # partition\n    while j <= last:\n        if nums[j] < nums[last]:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j += 1\n        else:\n            j += 1\n    \n    # sort recursively\n    comb_sort_helper(nums, first, i - 1)\n    comb_sort_helper(nums, i, last)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    shrink_factor = 1.3\n    gap = len(nums)\n    swapped = True\n    i = 0\n    while gap > 1 or swapped:\n        gap = int(float(gap) / shrink_factor)\n        swapped = False\n        i = 0\n        while gap + i < len(nums):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    shrink_factor = 1.3\n    gap = len(nums)\n    sorted = False\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        nums[i],nums[j] = nums[j],nums[i]\n    \n    gap = len(nums)\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1,int(gap/1.25))  # minimum gap is 1\n        swapped = False\n        \n        for i in range(len(nums)-gap):\n            if nums[i] > nums[i+gap]:\n                swap(i,i+gap)\n                swapped = True\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # use a flag value to determine if list is sorted\n    sorted = False\n    # loop through list until sorted\n    while not sorted:\n        # create a flag to hold our sorted state\n        sorted = True\n        # create variables to hold our sublists\n        i = 0\n        j = len(nums) - 1\n        # loop through list and check sorted\n        while i < j:\n            # check if sorted\n            if nums[i] > nums[j]:\n                # swap values\n                nums[i], nums[j] = nums[j], nums[i]\n                # set sorted flag to False\n                sorted = False\n            # move to next index\n            j -= 1\n        # increase i until sublist sorted\n        i += 1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(i,n):\n            if i*i+j*j == n:\n                print(\"Yes\")\n                return\n    print(\"No\")\n    return\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    l = []\n    for i in range(1, n):\n        if i**2 < n:\n            l.append(i**2)\n        else:\n            break\n    for i in range(0, len(l)):\n        if n-l[i] in l and l.index(n-l[i])!=i:\n            print(\"Yes\")\n            return\n    print(\"No\")\n    return\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    l = n**0.5\n    if l.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Square of N\n    N = n**0.5\n    #print(N)\n    #Check if N is an int. If not then return 0\n    if N.is_integer():\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        else:\n            if (int(N)**2) == (n-int(N)):\n                return 1\n            else:\n                return 0\n    else:\n        return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    squares = []\n    for i in range(1,n):\n        if i*i > n:\n            break\n        squares.append(i*i)\n    print(\"squares\",squares)\n    squares.sort()\n    print(\"squares\",squares)\n    for i in range(len(squares)):\n        for j in range(i,len(squares)):\n            if (squares[i]-squares[j]) == n:\n                print(\"Difference of squares\",squares[i],squares[j],n)\n                return\n    print(\"Not found\")\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n+1):\n        if ((i * i) - (i-1) * (i-1)) == n:\n            return print(\"true\")\n        elif ((i * i) - (i-1) * (i-1)) > n:\n            return print(\"false\")\n        else:\n            continue\ndif_Square(int(input(\"Enter a number: \")))\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        for j in range(1,n):\n            if (i*i) + (j*j) == n:\n                return 1\n    return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_root = (n**(1/2))\n    if int(square_root + 0.5)**2 == n:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # n = int(input(\"Enter the number you want to check: \"))\n    for i in range(n+1):\n        for j in range(n+1):\n            if i**2 + j**2 == n:\n                return (True, i, j)\n    return (False, 0, 0)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def isSquare(n): \n        x = int(math.sqrt(n)) \n        return (x * x == n) \n    if(isSquare(n)): \n        print(\"YES\") \n    else: \n        print(\"NO\")\n    '''\n    Write a python function to check whether the given number is a perfect number or not. \n    '''\n    def perfect_number(n):\n        sum = 0\n        for x in range(1,n):\n            if(n % x == 0):\n                sum += x\n        return(sum == n)\n    '''\n    Write a python function to check whether the given number is a strong number or not.\n    '''\n    def strong_num(n):\n        l = list()\n        sum = 0\n        while(n>0):\n            l.append(n%10)\n            n = n//10\n        for x in l:\n            sum += (x**5)\n        return(sum == n)\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    def palindrome(n):\n        n = str(n)\n        return (n==n[::-1])\n    '''\n    Write a python function to check whether the given number is an armstrong number or not.\n    '''\n    def armstrong(n):\n        sum = 0\n        order = len(str(n))\n        temp = n\n        while(temp>0):\n            digit = temp % 10\n            sum += digit**order\n            temp //= 10\n        return(sum == n)\n    '''\n    Write a python program to check whether the given number is a prime number or not.\n    '''\n    def isPrime(n):\n        if n>1:\n            for i in range(2,n//2):\n                if (n%i)==0:\n                    return False\n                else:\n                    return True\n    '''\n    Write a python function to check whether the given number is a perfect square or not.\n    '''\n    def perfect_square(n):\n        if(math.sqrt(n)==int(math.sqrt(n))):\n            return True\n        else:\n            return False\n    '''\n    Write a python function to check whether the given number is a Fibonacci number or not.\n    '''\n    def isFibonacci(n):\n        return (n==((5*(((1+5**.5)/2)**n-((1-5**.5)/2)**n))/5**.5))\n    '''\n    Write a python function to check whether the given number is an abundant number or not.\n    '''\n    def isAbundant(n):\n        sum=0\n        for x in range(1,n):\n            if(n%x==0):\n                sum += x\n        return(sum>n)\n    '''\n    Write a python function to check whether the given number is a harmonic number or not.\n    '''\n    def isHarmonic(n):\n        return (1/n==int(1/n))\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    def palindrome_v2(n):\n        n = str(n)\n        return (n==n[::-1])\n    '''\n    Write a python program to check whether the given number is a strong number or not.\n    '''\n    def strong_num_v2(n):\n        l = list()\n        sum = 0\n        while(n>0):\n            l.append(n%10)\n            n = n//10\n        for x in l:\n            sum += (x**5)\n        return(sum == n)\n    '''\n    Write a python function to check whether the given number is a strong number or not.\n    '''\n    def strong_num_v3(n):\n        l = list()\n        sum = 0\n        while(n>0):\n            l.append(n%10)\n            n = n//10\n        for x in l:\n            sum += (x**5)\n        return(sum == n)\n    '''\n    Write a python program to print the prime numbers between the given range.\n    '''\n    def prime_number_between(start,end):\n        l = list()\n        for i in range(start,end):\n            if(i>1):\n                for j in range(2,i):\n                    if(i%j==0):\n                        break\n                else:\n                    l.append(i)\n        return(l)\n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    def divisors(n):\n        count = 0\n        for i in range(1,int(math.sqrt(n))+1):\n            if(n%i==0):\n                if(n/i==i):\n                    count+=1\n                else:\n                    count+=2\n        return(count)\n    '''\n    Write a python function to check whether the given number is an Armstrong number or not.\n    '''\n    def armstrong_v2(n):\n        l = list()\n        sum = 0\n        while(n>0):\n            l.append(n%10)\n            n = n//10\n        for x in l:\n            sum += (x**len(l))\n        return(sum == n)\n    '''\n    Write a python function to check whether the given number is an Armstrong number or not.\n    '''\n    def armstrong_v3(n):\n        sum = 0\n        while(n>0):\n            sum += (n%10)**3\n            n = n//10\n        return(sum == n)\n    '''\n    Write a python function to check whether the given number is an armstrong number or not.\n    '''\n    def armstrong_v4(n):\n        sum = 0\n        order = len(str(n))\n        temp = n\n        while(temp>0):\n            digit = temp % 10\n            sum += (digit**order)\n            temp //= 10\n        return(sum == n)\n    '''\n    Write a python function to check whether the given number is an armstrong number or not.\n    '''\n    def armstrong_v5(n):\n        sum = 0\n        temp = n\n        order = len(str(n))\n        while(temp>0):\n            digit = temp % 10\n            sum += digit**order\n            temp //= 10\n        return(sum == n)\n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    def perfect_number_v2(n):\n        sum = 0\n        for x in range(1,n):\n            if(n%x==0):\n                sum += x\n        return(sum == n)\n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    def perfect_number_v3(n):\n        sum = 1\n        for x in range(2,int(math.sqrt(n))+1):\n            if(n%x==0):\n                if(x==int(math.sqrt(n))):\n                    sum += x\n                else:\n                    sum += x\n                    sum += n//x\n        return(sum == n)\n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    def perfect_number_v4(n):\n        sum = 1\n        for x in range(2,int(n/2)+1):\n            if(n%x==0):\n                sum += x\n        return(sum == n)\n    '''\n    Write a python program to print all the prime factors of a number.\n    '''"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color in patterns:\n            if patterns[color] == colors[0]:\n                continue\n            elif patterns[color]!= colors[0]:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # TODO: Write your code here\n    \n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(patterns)):\n        if patterns[i] == 0:\n            if colors[i] == 0:\n                return False\n        elif patterns[i] == 1:\n            if colors[i] == 1:\n                return False\n        else:\n            if colors[i] == 2:\n                return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    index_of_color = []\n    for i in range(len(colors)):\n        if colors[i] not in index_of_color:\n            index_of_color.append(colors[i])\n    index_of_pattern = []\n    for i in range(len(patterns)):\n        if patterns[i] not in index_of_pattern:\n            index_of_pattern.append(patterns[i])\n    for i in range(len(index_of_color)):\n        for j in range(len(index_of_pattern)):\n            if index_of_color[i] == index_of_pattern[j]:\n                index_of_color[i] = j\n    for i in range(len(index_of_color)):\n        if i + 1 == len(index_of_color):\n            if index_of_color[i] == index_of_pattern[i + 1]:\n                return True\n            else:\n                return False\n        if index_of_color[i] == index_of_pattern[i + 1]:\n            continue\n        else:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    next_color = 0\n    for i in range(len(patterns)):\n        if patterns[i] == next_color:\n            next_color = (next_color+1)%len(colors)\n        elif patterns[i]!= next_color and i>0:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    '''\n    colors = [\"red\", \"green\", \"blue\"]\n    patterns = [\"g-r-b\", \"r-g-b\", \"b-r-g\"]\n    '''\n    \n    for i,color in enumerate(colors):\n        if i == 0:\n            if color == patterns[i][0]:\n                continue\n            else:\n                return False\n        elif i == len(colors)-1:\n            if color == patterns[i][1]:\n                continue\n            else:\n                return False\n        else:\n            if color == patterns[i][0] or color == patterns[i][1]:\n                continue\n            else:\n                return False\n    \n    return True\n    \n    \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    else:\n        for color, pattern in zip(colors, patterns):\n            if color == pattern:\n                continue\n            elif color == 'black':\n                if pattern!= 'black':\n                    return False\n            else:\n                if pattern!= 'white':\n                    return False\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors_dict = {}\n    for color, pattern in zip(colors, patterns):\n        if pattern in colors_dict and colors_dict[pattern]!= color:\n            return False\n        colors_dict[pattern] = color\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if not colors or not patterns: return False\n    if len(colors)!= len(patterns): return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n    \ndef check_correctness(colors, patterns):\n    '''\n    Write a function that takes in an array of colors, an array of patterns, and\n    returns True if colors and patterns follow the same pattern, and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern = 0\n    for color in colors:\n        if pattern < len(patterns) and color == patterns[pattern]:\n            pattern += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [i for i in test_list if (i[0] % K == 0 and i[1] % K == 0)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in range(len(test_list)):\n        if all([x % K == 0 for x in test_list[i]]):\n            tuples.append(test_list[i])\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(i,j) for i, j in test_list if i % K == 0 and j % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(x, y) for x, y in test_list if (x % K == 0 and y % K == 0)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        flag = 0\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K!= 0:\n                flag = 1\n                break\n        if flag == 0:\n            res.append(test_list[i])\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if not test_list:\n        return []\n    else:\n        result = []\n        for tuple in test_list:\n            if all(element % K == 0 for element in tuple):\n                result.append(tuple)\n        return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # base case is an empty list\n    if not test_list:\n        return []\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            flag = True\n            for m in range(0, K):\n                if(test_list[i][m] % K!= 0 and test_list[j][m] % K!= 0):\n                    flag = False\n                    break\n            if(flag):\n                print(test_list[i], test_list[j])\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if sum(i) % K == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [i for i in test_list if (len(i) == K and all([j%K == 0 for j in i]))]\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0): \n        return True\n    else: \n        return False\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0:\n        return False\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n    \n    return True\n    \n    \ndef main():\n    '''\n    This function tests the is_Diff function.\n    '''\n    print(is_Diff(0))\n    print(is_Diff(12))\n    print(is_Diff(13))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    while(n > 0):\n        if n % 11 == 0:\n            return True\n        else:\n            return False\n        break\n        \n    \n    # This code is contributed by Rituraj Jain \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1, n+1): \n        if (i%11==0): \n            print(i,\"is divisible by 11\")\n        else: \n            print(i,\"is not divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (11 % n == 0) \ndef divisible(num):\n    '''\n    Write a python function to check whether a number is divisible by 2 and 3.\n    '''\n    return ((2 % num == 0) and (3 % num == 0))\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    return (n > 1 and all(n % i for i in range(2, n // 2)))\ndef is_even(n):\n    '''\n    Write a python function to check whether a number is even or not.\n    '''\n    return (n % 2 == 0)\ndef is_palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether a number is armstrong or not.\n    '''\n    return sum([int(i) ** len(str(n)) for i in str(n)]) == n\ndef is_pangram(str):\n    '''\n    Write a python function to check whether a sentence is pangram or not.\n    '''\n    return len(set(str.lower())) == 26\ndef is_leap_year(year):\n    '''\n    Write a python function to check whether a year is leap year or not.\n    '''\n    return ((year % 4 == 0) and (year % 100!= 0)) or (year % 400 == 0)\ndef find_factors(n):\n    '''\n    Write a python function to find all the factors of a number.\n    '''\n    return [i for i in range(1, n+1) if n % i == 0]\ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    return n ** 0.5 % 1 == 0\ndef is_power_of_two(n):\n    '''\n    Write a python function to check whether a number is power of two or not.\n    '''\n    return (n > 0) and (n & (n - 1) == 0)\ndef find_max(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a, b)\ndef sum_of_squares(n):\n    '''\n    Write a python function to calculate the sum of squares of first n natural numbers.\n    '''\n    return sum(i * i for i in range(1, n + 1))\ndef is_square(n):\n    '''\n    Write a python function to check whether a number is a square number or not.\n    '''\n    return n ** 0.5 % 1 == 0\ndef is_power(n, m):\n    '''\n    Write a python function to check whether a number is power of another number or not.\n    '''\n    return n ** m % m == 0\ndef is_permutation(str1, str2):\n    '''\n    Write a python function to check whether two strings are permutation of each other or not.\n    '''\n    return sorted(str1) == sorted(str2)\ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check whether two strings are anagram of each other or not.\n    '''\n    return sorted(str1.lower()) == sorted(str2.lower())\ndef is_palindrome_permutation(str1):\n    '''\n    Write a python function to check whether a string is palindrome permutation or not.\n    '''\n    return len(set(str1.lower())) == len(str1.lower())\ndef find_leap_years(start, end):\n    '''\n    Write a python function to find leap years between start and end year.\n    '''\n    return [i for i in range(start, end + 1) if is_leap_year(i)]\ndef find_leap_years_form(start, end):\n    '''\n    Write a python function to find leap years between start and end year in form of 4 or 400.\n    '''\n    return [i for i in range(start, end + 1) if is_leap_year(i) or is_leap_year(i) and is_even(i)]\ndef is_year_leap(year):\n    '''\n    Write a python function to check whether a year is leap year or not.\n    '''\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\ndef find_intersection(lst1, lst2):\n    '''\n    Write a python function to find the intersection of two list.\n    '''\n    return list(set(lst1) & set(lst2))\ndef is_match(str1, str2):\n    '''\n    Write a python function to check whether two strings are anagram of each other or not.\n    '''\n    if sorted(str1.lower()) == sorted(str2.lower()):\n        return True\n    else:\n        return False\ndef main():\n    print(is_diff(21))\n    print(is_Diff(21))\n    print(divisible(7))\n    print(divisible(8))\n    print(is_prime(4))\n    print(is_prime(7))\n    print(is_even(21))\n    print(is_even(22))\n    print(is_palindrome(121))\n    print(is_palindrome(134))\n    print(is_armstrong(153))\n    print(is_armstrong(154))\n    print(is_pangram('The quick brown fox jumps over the lazy dog'))\n    print(is_pangram('The quick brown fox jumps over the lazy dog.'))\n    print(is_pangram('We promptly judged antique ivory buckles for the next prize'))\n    print(is_pangram('We promptly judged antique ivory buckles for the prize'))\n    print(find_factors(100))\n    print(find_factors(24))\n    print(is_power_of_two(64))\n    print(is_power_of_two(8))\n    print(find_max(9, 10))\n    print(sum_of_squares(10))\n    print(is_square(25))\n    print(is_square(9))\n    print(is_square(16))\n    print(is_power(9, 2))\n    print(is_power(9, 4))\n    print(is_power(2, 4))\n    print(is_power(1, 4))\n    print(find_max(24, 25))\n    print(sum_of_squares(24))\n    print(is_square(24))\n    print(is_square(25))\n    print(is_square(26))\n    print(find_leap_years(1900, 2050))\n    print(find_leap_years_form(1900, 2050))\n    print(find_leap_years(1990, 2050))\n    print(find_leap_years_form(1990, 2050))\n    print(is_leap_year(2000))\n    print(is_leap_year(1900))\n    print(find_leap_years(1000, 2050))\n    print(find_leap_years_form(1000, 2050))\n    print(find_leap_years(1900, 2050))\n    print(find_leap_years_form(1900, 2050))\n    print(is_leap_year(2020))\n    print(is_leap_year(2030))\n    print(is_leap_year(2040))\n    print(is_leap_year(2050))\n    print(find_leap_years(1000, 2050))\n    print(find_leap_years_form(1000, 2050))\n    print(find_leap_years(1900, 2050))\n    print(find_leap_years_form(1900, 2050))\n    print(is_year_leap(1900))\n    print(is_year_leap(2020))\n    print(find_leap_years(1900, 2050))\n    print(find_leap_years_form(1900, 2050))\n    print(find_leap_years(1000, 205"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print('It is divisible by 11.')\n    else:\n        print('It is not divisible by 11.')\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \nn = 11\nif is_Diff(n): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print('The word is even')\n    else:\n        print('The word is odd')\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"even\"\n    return \"odd\" \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    return(len(s)%2==1)\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return 'Even'\n    else: \n        return 'Odd'\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1: \n        return 0 \n    \n    return n * (n + 1) * (n + 2) // 6 \n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    #Tetrahedral number is a sum of (n choose 3)\n    #where n is the number of vertices.\n    return int(sum(scipy.special.comb(n,3,exact=True)))\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) / 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # if the user provides a number as an argument, return that number\n    # else, return the nth tetrahedral number\n    if type(n) == int:\n        return int(n)\n    else:\n        # nth tetrahedral number = sum of n consecutive tetrahedral numbers\n        total = 0\n        for i in range(n):\n            total += i + 1\n        return int(total)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    result = n * (n + 1) * (n + 2) / 6\n    return result\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    return n*(n+1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialise variables\n    i = 0\n    t_number = 0\n    # Find the tetrahedral number using a while loop.\n    while i < n:\n        t_number += (i * (i + 1) * (i + 2) // 6)\n        i += 1\n    return t_number\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3)//24\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * r**3\n    return volume\nprint(\"\\n\")\nprint(\"volume_sphere\")\nprint(\"Enter radius of sphere:\")\nr = float(input())\nprint(\"Result:\")\nprint(volume_sphere(r))\nprint(\"\\n\")\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # r is radius\n    # V = (4/3) * pi * r^3\n    # V = 4/3 * 3.14 * r^3\n    # V = 4/3 * r^3 * 3.14\n    # V = 4/3 * r^3 * 22/7\n    # V = 4/3 * r^3 * 3.14 / 7\n    # V = 4/3 * r^3 * 3.14 * 7/22\n    # V = 4/3 * r^3 * 3.14 * (7/22)^3\n    # V = 4/3 * r^3 * 3.14 * 7/22^3\n    # V = 4/3 * r^3 * 3.14 * 7/22^5\n    # V = 4/3 * r^3 * 3.14 * 7/22^6\n    # V = 4/3 * r^3 * 3.14 * 7/22^10\n    # V = 4/3 * r^3 * 3.14 * 7/22^20\n    # V = 4/3 * r^3 * 3.14 * 7/22^30\n    # V = 4/3 * r^3 * 3.14 * 7/22^40\n    # V = 4/3 * r^3 * 3.14 * 7/22^50\n    # V = 4/3 * r^3 * 3.14 * 7/22^60\n    # V = 4/3 * r^3 * 3.14 * 7/22^70\n    # V = 4/3 * r^3 * 3.14 * 7/22^80\n    # V = 4/3 * r^3 * 3.14 * 7/22^90\n    # V = 4/3 * r^3 * 3.14 * 7/22^100\n    # V = 4/3 * r^3 * 3.14 * 7/22^1000\n    # V = 4/3 * r^3 * 3.14 * 7/22^10000\n    # V = 4/3 * r^3 * 3.14 * 7/22^100000\n    # V = 4/3 * r^3 * 3.14 * 7/22^1000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^10000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^100000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^1000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^10000000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000000\n    # V = 4/3 * r^3 * 3.14 * 7/22^2000000000"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3*math.pi*r**3\n    return v\n    # Your code here\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    vol = s**3\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    vol = 4/3 * pi * r**3\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0) * math.pi * (r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(input(\"What is the radius of the sphere? \"))\n    \n    v = (4/3) * math.pi * (r**3)\n    \n    print(\"The volume of the sphere is {0:.2f}\".format(v))\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    volume = float(4/3*math.pi*(r**3))\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4/3*math.pi*(r**3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in range(len(strr)):\n        res += ord(strr[i])\n    return chr(res%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    import math\n    result=0\n    strr=strr.lower()\n    for i in strr:\n        result=result+ord(i)\n        \n    return math.ceil(result%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for x in strr:\n        result+=ord(x)\n    return result%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)%26\n    return chr(sum%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum=sum+ord(i)\n    ch = sum % 26\n    print(chr(ch))\n    return ch\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return sum % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum(ord(str(i)) for i in str(strr))%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in strr:\n        total += ord(i)\n    return chr(total % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s=0\n    for i in strr:\n        s+=ord(i)%26\n    return s\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n > 1:\n        return sequence(n-1) + sequence(n-2)\n    \ndef allSequence(n):\n    '''\n    Write a function to find all numbers in the newman conway sequence.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n > 1:\n        return allSequence(n-1) + allSequence(n-2)\n    \ndef main():\n    # Test case\n    print(sequence(10))\n    print(allSequence(10))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sequence(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n**2 + n + 1\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be at least 1.\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 34\n    elif n == 9:\n        return 55\n    elif n == 10:\n        return 89\n    elif n == 11:\n        return 144\n    elif n == 12:\n        return 233\n    elif n == 13:\n        return 377\n    elif n == 14:\n        return 610\n    elif n == 15:\n        return 987\n    elif n == 16:\n        return 1597\n    elif n == 17:\n        return 2584\n    elif n == 18:\n        return 4181\n    elif n == 19:\n        return 6765\n    elif n == 20:\n        return 10946\n    elif n == 21:\n        return 17711\n    elif n == 22:\n        return 28657\n    elif n == 23:\n        return 46368\n    elif n == 24:\n        return 75025\n    elif n == 25:\n        return 121393\n    elif n == 26:\n        return 196418\n    elif n == 27:\n        return 317811\n    elif n == 28:\n        return 514229\n    elif n == 29:\n        return 832040\n    elif n == 30:\n        return 1346269\n    elif n == 31:\n        return 2178309\n    elif n == 32:\n        return 3524578\n    elif n == 33:\n        return 5702887\n    elif n == 34:\n        return 9227465\n    elif n == 35:\n        return 1548008755920\n    elif n == 36:\n        return 2415781715420\n    elif n == 37:\n        return 3908816901449\n    elif n == 38:\n        return 7995807366375\n    elif n == 39:\n        return 11349031704839\n    elif n == 40:\n        return 1655801413064\n    elif n == 41:\n        return 26791429635843\n    elif n == 42:\n        return 4334944373834\n    elif n == 43:\n        return 7014087339723\n    elif n == 44:\n        return 11349031704839\n    elif n == 45:\n        return 1655801413064\n    elif n == 46:\n        return 26791429635843\n    elif n == 47:\n        return 4334944373834\n    elif n == 48:\n        return 7014087339723\n    elif n == 49:\n        return 11349031704839\n    elif n == 50:\n        return 1655801413064\n    elif n == 51:\n        return 26791429635843\n    elif n == 52:\n        return 4334944373834\n    elif n == 53:\n        return 7014087339723\n    elif n == 54:\n        return 11349031704839\n    elif n == 55:\n        return 1655801413064\n    elif n == 56:\n        return 26791429635843\n    elif n == 57:\n        return 4334944373834\n    elif n == 58:\n        return 7014087339723\n    elif n == 59:\n        return 11349031704839\n    elif n == 60:\n        return 1655801413064\n    elif n == 61:\n        return 26791429635843\n    elif n == 62:\n        return 4334944373834\n    elif n == 63:\n        return 7014087339723\n    elif n == 64:\n        return 11349031704839\n    elif n == 65:\n        return 1655801413064\n    elif n == 66:\n        return 26791429635843\n    elif n == 67:\n        return 4334944373834\n    elif n == 68:\n        return 7014087339723\n    elif n == 69:\n        return 11349031704839\n    elif n == 70:\n        return 1655801413064\n    elif n == 71:\n        return 26791429635843\n    elif n == 72:\n        return 4334944373834\n    elif n == 73:\n        return 7014087339723\n    elif n == 74:\n        return 11349031704839\n    elif n == 75:\n        return 1655801413064\n    elif n == 76:\n        return 26791429635843\n    elif n == 77:\n        return 4334944373834\n    elif n == 78:\n        return 7014087339723\n    elif n == 79:\n        return 11349031704839\n    elif n == 80:\n        return 1655801413064\n    elif n == 81:\n        return 26791429635843\n    elif n == 82:\n        return 4334944373834\n    elif n == 83:\n        return 7014087339723\n    elif n == 84:\n        return 11349031704839\n    elif n == 85:\n        return 1655801413064\n    elif n == 86:\n        return 26791429635843\n    elif n == 87:\n        return 4334944373834\n    elif n == 88:\n        return 7014087339723\n    elif n == 89:\n        return 11349031704839\n    elif n == 90:\n        return 1655801413064\n    elif n == 91:\n        return 26791429635843\n    elif n == 92:\n        return 4334944373834\n    elif n == 93:\n        return 7014087339723\n    elif n == 94:\n        return 11349031704839\n    elif n == 95:\n        return 1655801413064\n    elif n == 96:\n        return 26791429635843\n    elif n == 97:\n        return 4334944373834\n    elif n == 98:\n        return 7014087339723\n    elif n == 99:\n        return 11349031704839\n    elif n == 100:\n        return 1655801413064\n    elif n == 101:\n        return 26791429635843\n    elif n == 102:\n        return 4334944373834\n    elif n == 103:\n        return 7014087339723\n    elif n == 104:\n        return 11349031704839\n    elif n == 105:\n        return 1655801413064\n    elif n == 106:\n        return 26791429635843\n    elif n == 107:\n        return 4334944373834\n    elif n == 108:\n        return 7014087339723\n    elif n == 109:\n        return 11349031704839\n    elif n == 110:\n        return 1655801413064\n    elif n == 111:\n        return 26791429635843\n    elif n == 112:\n        return 4334944373834\n    elif n == 113:\n        return 7014087339723\n    elif n == 114:\n        return 11349031704839\n    elif n == 115:\n        return 1655801413064\n    elif n == 116:\n        return 26791429635843\n    elif n == 117:\n        return 4334944373834\n    elif n == 118:\n        return 7014087339723\n    elif n == 119:\n        return 11349031704839\n    elif n == 120:\n        return 1655801413064\n    elif n == 121:\n        return 26791429635843\n    elif n == 122:\n        return 4334944373834\n    elif n == 123:\n        return 7014087339723\n    elif n == 124:\n        return 11349031704839\n    elif n == 125:\n        return 1655801413064\n    elif n == 126:\n        retur"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    def next_num(curr_num): \n        '''\n        Find the next number in the sequence\n        '''\n        if curr_num < 4: \n            return curr_num+1\n        else: \n            num_seq = [2] + [curr_num]\n            while True: \n                curr_num = num_seq[-1] - num_seq[-2]\n                if curr_num > 1: \n                    num_seq.append(curr_num)\n                else: \n                    num_seq.append(curr_num+2)\n                    return curr_num+2\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        #sum of the previous two numbers\n        return sequence(n - 1) + sequence(n - 2) \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def check_nth_number(n):\n        last_number = 0\n        next_number = 1\n        count = 0\n        while count < n:\n            yield last_number\n            last_number, next_number = next_number, last_number + next_number\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0, 1, 1]\n    if n > 3: \n        for i in range(3, n): \n            seq.append(seq[i-1] + seq[i-2])\n    return seq[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def sequence(n):\n    #https://www.youtube.com/watch?v=U7oIiF2QNkU\n        if n == 0: return 0\n        if n == 1: return 1\n        return sequence(n-1) + sequence(n-2)\n    return sequence(n)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=4*math.pi*r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if type(r)!= int and type(r)!= float:\n        return 'Invalid Input'\n    sa = 4*math.pi*(r**2)\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Make sure the input is a float\n    if (type(r)!= float) and (type(r)!= int):\n        return 'Input must be a number.'\n    elif (r<0) or (r>1):\n        return 'Input must be between 0 and 1.'\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #given radius in cm\n    radius = r/100\n    #finds the surface area\n    surfacearea = 4*math.pi*(radius**2)\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r==0:\n        return 4*math.pi\n    else:\n        return 4*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*(r**2)\n    return surface_area\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (1 + sqrt(3)*(1+8*n))/4\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    res = 0\n    for i in range(1, n + 1):\n        res = ((i * 2 - 1) * i) + i\n    return res\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # Using geometric series\n    return (-1)**(n + 1) * n * (3**n - 1) / 2\n    \ndef hexagonal_number(n):\n    '''\n    Write a function to find nth hexagonal number.\n    '''\n    \n    return n * (2 * n - 1)\n    \nif __name__ == \"__main__\":\n    n = 1\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 2\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 3\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 4\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 5\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 6\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 7\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 8\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 9\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 10\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 11\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 12\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 13\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 14\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 15\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 16\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 17\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 18\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 19\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 20\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 21\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 22\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 23\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 24\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 25\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 26\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 27\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 28\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 29\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 30\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 31\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 32\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 33\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 34\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 35\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 36\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 37\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 38\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 39\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 40\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 41\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 42\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 43\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 44\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 45\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 46\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 47\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 48\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 49\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 50\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 51\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    \n    n = 52\n    result = hexagonal_number(n)\n    print(f\"hexagonal number of n = {n}: {result}\")\n    "
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(((-1 + sqrt(1 + 8 * n)) / 2) + 0.5)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    res = []\n    n = n%1000000007\n    res.append(0)\n    for i in range(1, n):\n        res.append(res[-1] + 1)\n        n = n - (1 + 2*i)\n        if n%1000000007 == 0:\n            return res[n//1000000007]\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return [1, 2, 3, 4, 5, 6, 7]\n    x = centered_hexagonal_number(n - 1)\n    return [x[i] + (x[i - 1] + x[i + 1]) // 2 for i in range(1, len(x) - 1)] + x[:1] + x[-1:]\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num_list = []\n    num_list.append(0)\n    for i in range(1, n+1):\n        num_list.append(int(num_list[i-1] + 3*i*(i-1)/2))\n    return num_list[n]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {**dict1,**dict2,**dict3}\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return ct.defaultdict(list, dict1, dict2, dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Code here\n    return dict(dict1,**dict2,**dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_f = {}\n    for i in dict1:\n        dict_f[i] = dict1[i]\n    for j in dict2:\n        dict_f[j] = dict2[j]\n    for k in dict3:\n        dict_f[k] = dict3[k]\n    return dict_f\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_count=collections.Counter(list1)\n    print(freq_count)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1=collections.Counter(list1)\n    print(dict1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = dict()\n    for item in list1:\n        d[item] = d.get(item,0) + 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_count = {}\n    for item in list1:\n        if item in freq_count:\n            freq_count[item] += 1\n        else:\n            freq_count[item] = 1\n    return freq_count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.defaultdict(int)\n    for i in list1:\n        dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict_freq = {}\n    for item in list1:\n        if item not in dict_freq:\n            dict_freq[item] = 1\n        else:\n            dict_freq[item] += 1\n    return dict_freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = [i for i in list1 if i]\n    freq_dict = {}\n    for i in list2:\n        if i not in freq_dict:\n            freq_dict[i] = list2.count(i)\n    return freq_dict\n    \n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for num in list1:\n        if num not in dict1:\n            dict1[num] = 1\n        else:\n            dict1[num] = dict1[num] + 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n    \ndef freq_count_2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    This time using default dictionary.\n    '''\n    dic = collections.defaultdict(int)\n    for i in list1:\n        dic[i] += 1\n    return dic\n        \ndef max_word_count(list1):\n    '''\n    Write a function to get the maximum value of the number of words in a list of strings.\n    '''\n    max1 = 0\n    for i in list1:\n        if len(i.split()) > max1:\n            max1 = len(i.split())\n    return max1\n    \ndef max_word_count_2(list1):\n    '''\n    Write a function to get the maximum value of the number of words in a list of strings.\n    This time using max function.\n    '''\n    return max([len(i.split()) for i in list1])\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    print(count)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # your code here\n    \n    return closest_num_helper(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    while True:\n        if N % 2 == 0:\n            N = N / 2\n        else:\n            N = N + 1\n        if N % 2!= 0:\n            break\n    return N\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N<=1:\n        return N\n    \n    return(closest_num(N-1)) if N-1>=0 else closest_num(N+1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    \n    def closest(n, nums):\n        return min(nums, key=lambda x: abs(n-x))\n    \n    return closest(N, range(1, N))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(1, N + 1):\n        if i > N:\n            print('No smaller number than', N, 'is found')\n            break\n        else:\n            print('closest smaller number than', N, 'is', i)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def func(n, N, v):\n        if n not in N:\n            return v\n        else:\n            i = N.index(n)\n            if i==0:\n                return N[1]\n            elif i==len(N)-1:\n                return N[i-1]\n            else:\n                if abs(N[i]-n) > abs(N[i+1]-n):\n                    return N[i+1]\n                else:\n                    return N[i]\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert N >= 0\n    my_dict = {i: i - N for i in range(1, N + 1)}\n    my_dict[1] = 0\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N % 2 == 0:\n        if N > 1:\n            return (N - 1) / 2\n        elif N < -1:\n            return (N + 1) / 2\n        else:\n            return N\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return N\n    \n    n = N//10\n    m = N%10\n    for i in range(n,0,-1):\n        if i < m:\n            if (N-i*10)%i == 0:\n                return i\n            else:\n                continue\n        elif i == m:\n            return i\n        else:\n            if (N-i*10)%i == 0:\n                return i\n            else:\n                continue\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max=0\n    for x in list1:\n        if len(x)>max:\n            max=len(x)\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    dict1={}\n    for i in list1:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    list2=list(dict1.keys())\n    print(list2)\n    return(max(dict1.keys(),key=lambda i:dict1[i]))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # 1. Initiate a variable \n    len_longest = 0\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    lengths = []\n    for w in list1:\n        lengths.append(len(w))\n    return max(lengths)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_word=[]\n    for i in range(0,len(list1)):\n        len_word.append(len(list1[i]))\n    return(len_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    m = len(list1[0])\n    for i in range(len(list1)):\n        if m < len(list1[i]):\n            m = len(list1[i])\n    return m\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if(len(i) > max_len):\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    print(\"The length of the longest word is: \", max_len)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length_list = []\n    for i in list1:\n        if len(i) == 0:\n            continue\n        length_list.append(len(i))\n    return max(length_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word = 0\n    for i in list1:\n        if len(i)>word:\n            word = len(i)\n    return word\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1 in str for str in sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_length = len(sub_str)\n    \n    for i in range(0, len(str1) - sub_str_length + 1):\n        if str1[i: i + sub_str_length] == sub_str:\n            return i, i + sub_str_length\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:len(sub_str) + i] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    print(\"\\n\")\n    print(\"Testing the find_substring function with the following:\")\n    print(\"str1: {} and sub_str: {}\".format(str1, sub_str))\n    \n    is_found = False\n    index = 0\n    len_str = len(str1)\n    len_substr = len(sub_str)\n    \n    while is_found is False:\n        if str1[index:(index+len_substr)] == sub_str:\n            is_found = True\n        index += 1\n    print(\"Returning: {}\".format(is_found))\n    print(\"\\n\")\n    return is_found\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Approach-1:\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for str2 in str1:\n        if str2 in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_of_substrings = []\n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            list_of_substrings.append(str1[i:])\n    return list_of_substrings\n    # list1 = []\n    # for i in range(len(str1)):\n    #     if str1[i:].startswith(sub_str):\n    #         list1.append(str1[i:])\n    # return list1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    substring_found = 0\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    x = str(n)\n    sum1 = 0\n    for i in range(len(x)):\n        sum1 += int(x[i])\n    sum2 = 0\n    for i in range(len(x)):\n        sum2 += int(x[i])*int(x[i])\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    a = 0\n    b = 0\n    for i in s:\n        if i == '0':\n            a += 1\n        elif i == '1':\n            b += 1\n        else:\n            return False\n    if a % 2 == 0 and b % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    \n    n = str(n)\n    if len(n)==3:\n        if int(n[1:])%2==1 and int(n[0])%2==0:\n            return True\n        elif int(n[1:])%2==0 and int(n[0])%2==1:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    for i in range(len(n)-1):\n        if n[i] == n[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l = list(str(n))\n    if len(set(l)) == 1:\n        return False\n    for i in range(1, len(l)):\n        if l[i]!= l[i-1]:\n            if abs(int(l[i]) - int(l[i-1]))!= 1:\n                return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    import math\n    n = int(n)\n    factors = [int(f) for f in str(n) if int(f)!= 0]\n    for i in range(0,len(factors)):\n        for j in range(i+1,len(factors)):\n            if (len(str(factors[i]*factors[j])) % 2) == 0:\n                if math.gcd(factors[i],factors[j]) == 1:\n                    return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert given number into a string\n    number = str(n)\n    # Store length of given number\n    length = len(number)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum += abs(i - (i*i + 1)/(i*i))\n    if(sum == 1):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if is_even(n): \n        return False\n    else: \n        n = int(n / 2)\n        while (n): \n            if (n % 10 == (n // 10) % 10): \n                return False\n            else: \n                n = int(n / 10)\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    if n < 10:\n        return False\n    a = int(s[0:2])\n    b = int(s[2:5])\n    c = int(s[5:8])\n    d = int(s[8:])\n    return (a - b) * (c - d) > 0\n    \n    \n    \ndef is_redundant(n):\n    '''\n    Write a function which will take a number and return true if the number is redundant.\n    \n    Example:\n    Input: 123\n    Output: True\n    \n    Input: 12345\n    Output: False\n    '''\n    s = str(n)\n    if len(s) < 2:\n        return False\n    for i in range(len(s)-1):\n        if int(s[i]) > int(s[i+1]):\n            return False\n    return True\n    \n    \ndef is_simple(n):\n    '''\n    Write a function to check whether the given number is simple or not.\n    '''\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n == 2:\n        return True\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \n    \ndef is_prime(n):\n    '''\n    Write a function which will take a number n and will return true if the given number is prime and false otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n        \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \n    \ndef fib(n):\n    '''\n    Write a function which will calculate n-th Fibonacci number.\n    '''\n    a, b = 0, 1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    for i in range(2, n+1):\n        c = a + b\n        a, b = b, c\n    return c\n    \n    \n    \ndef factorial(n):\n    '''\n    Write a function which will calculate factorial of the given number n.\n    '''\n    if n == 1:\n        return 1\n    if n == 0:\n        return 1\n    \n    f = 1\n    for i in range(1, n + 1):\n        f *= i\n    return f\n    \n    \n    \ndef prime_factors(n):\n    '''\n    Write a function which will calculate prime factors of the given number n.\n    '''\n    if n == 0:\n        return []\n    \n    pf = []\n    for i in range(2, n+1):\n        while n % i == 0:\n            pf.append(i)\n            n //= i\n    return pf\n    \n    \n    \ndef is_even(n):\n    '''\n    Write a function which will check whether the given number is even or not.\n    '''\n    if n == 0:\n        return True\n    \n    if n % 2 == 0:\n        return True\n    \n    return False\n    \n    \n    \ndef is_even_by_recursion(n):\n    '''\n    Write a function which will check whether the given number is even or not.\n    '''\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return True\n    if n == 1:\n        return False\n    return is_even_by_recursion(n-1)\n    \n    \n    \ndef is_odd(n):\n    '''\n    Write a function which will check whether the given number is odd or not.\n    '''\n    if n % 2 == 0:\n        return False\n    return True\n    \n    \n    \ndef is_odd_by_recursion(n):\n    '''\n    Write a function which will check whether the given number is odd or not.\n    '''\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n == 1:\n        return True\n    return is_odd_by_recursion(n-1)\n    \n    \n    \ndef is_palindrome(n):\n    '''\n    Write a function which will check whether the given number is palindrome or not.\n    '''\n    if n < 0:\n        return False\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    return False\n    \n    \n    \ndef reverse(s):\n    '''\n    Write a function which will reverse a string.\n    '''\n    if len(s) <= 1:\n        return s\n    return reverse(s[1:]) + s[0]\n    \n    \n    \ndef factorial_by_recursion(n):\n    '''\n    Write a function which will calculate factorial of the given number n.\n    '''\n    if n == 1:\n        return 1\n    if n == 0:\n        return 1\n    return n * factorial_by_recursion(n-1)\n    \n    \n    \ndef gcd(a, b):\n    '''\n    Write a function which will calculate greatest common divisor of a and b.\n    '''\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n    \n    \n    \ndef gcd_by_recursion(a, b):\n    '''\n    Write a function which will calculate greatest common divisor of a and b.\n    '''\n    if b == 0:\n        return a\n    if a < b:\n        return gcd_by_recursion(b, a)\n    return gcd_by_recursion(b, a % b)\n    \n    \n    \ndef find_lcm(a, b):\n    '''\n    Write a function which will calculate lowest common multiple of a and b.\n    '''\n    return a * b / gcd_by_recursion(a, b)\n    \n    \n    \ndef find_lcm_by_recursion(a, b):\n    '''\n    Write a function which will calculate lowest common multiple of a and b.\n    '''\n    if b == 0:\n        return a\n    if a < b:\n        return find_lcm_by_recursion(b, a)\n    return find_lcm_by_recursion(b, a % b)\n    \n    \n    \ndef sum_of_digits(n):\n    '''\n    Write a function which will calculate sum of digits of the given number n.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_of_digits(n // 10)\n    \n    \n    \ndef sum_of_digits_by_recursion(n):\n    '''\n    Write a function which will calculate sum of digits of the given number n.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_of_digits_by_recursion(n // 10)\n    \n    \n    \ndef reverse_by_stack(s):\n    '''\n    Write a function which will reverse a string by stack.\n    '''\n    if len(s) <= 1:\n        return s\n    tmp = [s[-1]]\n    for i in range(len(s)-2, -1, -1):\n        tmp.append(s[i])\n    return \"\".join(tmp)\n    \n    \n    \ndef is_palindrome_by_recursion(s):\n    '''\n    Write a function which will check whether the given string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    return s[0] == s[-1] and is_palindrome_by_recursion(s[1:-1])\n    \n    \n    \ndef fibonacci(n):\n    '''\n    Write a function which will return n-th number of Fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n    \n    \n    \ndef fibonacci_by_recursion(n):\n    '''"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b == 2:\n        return power(a, b - 1) * a\n    else:\n        return power(a, b - 1) * a + a\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    elif(b%2==0):\n        return power(a,b//2)**2\n    else:\n        return power(a,b//2)**2*a\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    elif(b==1):\n        return a\n    elif(b%2==0):\n        return power(a*a,b//2)\n    else:\n        return a*power(a*a,b//2)\na=int(input())\nb=int(input())\nprint(power(a,b))\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b < 0:\n        return 1 / (a * power(a, -b))\n    else:\n        return power(a, b - 1) * a\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        return a**b\n    except:\n        raise\n    \n    \ndef main():\n    print(power(2,3))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\nprint(power(5,2))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key = itemgetter(1))\n    return minimum[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    try:\n        index_min = 0\n        for index, elem in enumerate(test_list):\n            if elem[1] < test_list[index_min][1]:\n                index_min = index\n        return test_list[index_min]\n    except:\n        return None\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(0,1)(min(test_list, key=itemgetter(1,0)))[0]\n    #return min(test_list, key=lambda x: x[0])\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for x in test_list:\n        if x[1] < minimum[1]:\n            minimum = x\n    return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x: x[1])\n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    for tuple in test_list:\n        if tuple[1] < index_min[1]:\n            index_min = tuple\n    return index_min\ndef index_minimum_tuple(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    for tuple in test_list:\n        if tuple[1] < index_min[1]:\n            index_min = tuple\n    return index_min[0]\ndef index_minimum_tuple_test(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    for tuple in test_list:\n        if tuple[1] < index_min[1]:\n            index_min = tuple\n    return index_min[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    return max(test_list, key=itemgetter(1))[0]\n    \ndef index_first_smallest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Using min()\n    # return min(test_list, key = itemgetter(1))\n    \n    # Using sorted()\n    # return sorted(test_list, key=itemgetter(1))[0]\n    \n    # Using min() & lambda\n    # return min(test_list, key = lambda x: x[1])\n    \n    # Using lambda + list comprehension\n    return min(test_list, key = lambda x: x[1])\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])  # Assume the first sublist is the shortest.\n    for sublist in lst:  # Loop through the sublists.\n        if len(sublist) < min_len:  # Update the minimum length.\n            min_len = len(sublist)\n    return min_len  # Return the shortest list length.\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # First check whether the list is empty or not\n    if len(lst) == 0:\n        return 0\n    min_len = len(lst[0])\n    for ele in lst:\n        # Update the minimum value\n        if len(ele) < min_len:\n            min_len = len(ele)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=len(lst[0])\n    for i in range(1,len(lst)):\n        if min_len>len(lst[i]):\n            min_len=len(lst[i])\n    return min_len\n    \nlst=[[2,3,4,1],[3,4,5],[2,4,6,7]]\nprint(Find_Min_Length(lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_list = []\n    for i in range(len(lst)):\n        if len(lst[i]) < len(min_list):\n            min_list = lst[i]\n    return min_list\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])  #set a min length\n    for sub_lst in lst:  #for each sub list\n        if len(sub_lst) < min_length:  #check if it's shorter than the current min\n            min_length = len(sub_lst)  #replace the min length\n    return min_length  #return the min length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = min(len(x) for x in lst)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    list_size=[]\n    for i in range(0,len(lst)):\n        list_size.append(len(lst[i]))\n    return min(list_size)\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum = len(lst[0])  \n    for i in range(1, len(lst)):\n        if len(lst[i]) < minimum:\n            minimum = len(lst[i])\n    return minimum\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    total = 1\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            if n/i == i:\n                total += 1\n            else:\n                total += 2\n    return total\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        return\n    # Base Case\n    if n == 0 or n == 1:\n        return 1\n    # n is even\n    if n % 2 == 0:\n        return divisor(n // 2) + 1\n    else:\n        return divisor(n-1) + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # divisor of 0 is 1\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    from math import sqrt\n    i=1\n    while i<=int(sqrt(n)):\n        if n%i==0:\n            if n/i==i:\n                print(i)\n            else:\n                print(i,n/i)\n        i=i+1\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<0:\n        return False\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count = count + 1\n    return count + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    l=[]\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i==0:\n            l.append(i)\n            l.append(n//i)\n    print(len(set(l)))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return len(divisor_list(n))\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counter = 0\n    dict1 = {}\n    for i in list1:\n        if isinstance(i, list):\n            dict1 = frequency_lists(i)\n            for k, v in dict1.items():\n                dict1[k] = v + 1\n            counter += 1\n        else:\n            dict1[i] = dict1.get(i, 0) + 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Your code here\n    # Method 1 \n    list2 = []\n    for i in list1:\n        for j in i:\n            list2.append(j)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for each in list1:\n        if each in freq_dict:\n            freq_dict[each] += 1\n        else:\n            freq_dict[each] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \n    \n    \ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for i in list1:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return [list1.count(i) for i in list1]\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    dic = {}\n    # loop through the list1\n    for i in list1:\n        # check if the value exists in the dictionary\n        if i in dic:\n            # increment the counter\n            dic[i] += 1\n        else:\n            # else add the value to the dictionary\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    x = 1\n    for i in numbers:\n        x = x * i\n    return x / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x*y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    list_length = len(numbers)\n    product = 1\n    for i in numbers:\n        product = product * i\n    return product / list_length\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #This is a terrible solution\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    mul = 1\n    for i in numbers:\n        mul = mul*i\n    return mul/length\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for i in numbers:\n        num *= i\n    print(num/len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if numbers == []:\n        return 1\n    return reduce(lambda a,b:a*b,numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total_sum = 1\n    for num in numbers:\n        total_sum = total_sum * num\n    return total_sum / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    decimal_to_binary_rec(n, 0)\n    return n_bin\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # base case\n    if (n == 0): \n        return 0\n    \n    if (n > 0): \n        return n % 2 + 10 * decimal_to_binary(int(n / 2)) \n    \n    return -n % 2 + 10 * decimal_to_binary(int((-n)/2))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    # while n > 0:\n    #     binary += str(n % 2)\n    #     n = n // 2\n    #     print(n)\n    # return binary[::-1]\n    while n > 0:\n        binary += str(n % 2)\n        n = n // 2\n    return binary[::-1]\n    \ndef binary_to_decimal(binary):\n    return int(binary, 2)\n    \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n  "
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    while n!= 0:\n        result = str(n % 2) + result\n        n = n // 2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    while n > 0:\n        result = str(n%2) + result\n        n //= 2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while n!= 0:\n        binary.append(n%2)\n        n = n//2\n    binary = binary[::-1]\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert type(n) == int\n    result = ''\n    while n:\n        result = str(n % 2) + result\n        n //= 2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return None\n    else:\n        num = int(str(num)[::-1])\n        num_list = list(str(num))\n        for i in range(len(num_list)):\n            num_list[i] = int(num_list[i])\n        for i in range(len(num_list)):\n            if num_list[i] % 2 == 0:\n                num_list[i] += 1\n                break\n        for i in range(len(num_list)):\n            if num_list[i] % 2!= 0:\n                num_list[i] += 1\n                break\n        num = int(''.join(map(str, num_list[::-1])))\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # handle negative numbers\n    if num < 0:\n        num = str(-num)\n        if int(num[0]) > int(num[-1]):\n            # if the first digit is greater than the last digit, add one to the first digit and return the string\n            num = int(num[0]) + 1\n            return int(num + num[::-1])\n        else:\n            # if the first digit is not greater than the last digit, add one to the last digit and return the string\n            num = int(num[-1]) + 1\n            return int(num + num[::-1])\n    # handle non-negative integers\n    else:\n        # get the length of the number\n        length = len(str(num))\n        # if the length is 1, return the number plus one\n        if length == 1:\n            return num + 1\n        # if the length is 2, check if the first and last number are the same, and if they are, increase the first number by one\n        elif length == 2:\n            if int(str(num)[0]) == int(str(num)[-1]):\n                num = int(str(num)[0]) + 1\n                return int(str(num) + str(num)[::-1])\n            # if they are not the same, return the number plus one\n            else:\n                return num + 1\n        # if the length is greater than 2, check if the first and last digits are the same, if they are, increase the number\n        elif length > 2:\n            if int(str(num)[0]) == int(str(num)[-1]):\n                num = int(str(num)[0]) + 1\n                return int(str(num) + str(num)[::-1])\n            # if they are not the same, return the number plus one\n            else:\n                return num + 1\n    \n    \ndef binary_gap(num):\n    '''\n    Given a positive integer N, find and return the longest distance between two consecutive 1's in the binary representation of N.\n    If there aren't two consecutive 1's, return 0.\n    '''\n    # iterate through the binary representation of the number\n    for i in range(0, len(bin(num)[2:])):\n        # if the current digit is a 1, check if the digit on the right is a 1 and if so, record the index\n        if bin(num)[i] == \"1\":\n            if bin(num)[i+1] == \"1\":\n                # if the digit on the right is a 1, record the index\n                index = i\n    # check if there is a 1 on the right of a 1\n    if bin(num)[index + 1] == \"1\":\n        # if so, return the distance between the 1's\n        return index - index + 1\n    # if not, return 0\n    else:\n        return 0\n    \n    \ndef min_swaps_palindrome(num):\n    '''\n    Given a string s, find the minimum number of characters to be inserted to transform s into a palindrome.\n    '''\n    # set the string to lowercase\n    num = num.lower()\n    # check if the string is a palindrome\n    if num == num[::-1]:\n        # if so, return 0\n        return 0\n    # check if the string is a palindrome with one character being removed\n    elif len(num) % 2 == 1:\n        # iterate through the string\n        for i in range(0, len(num)):\n            # if the current and next character are the same, and the next character is not the last character, remove the next character and return the number of characters\n            if num[i] == num[i + 1]:\n                if i < len(num) - 2:\n                    num = num[:i] + num[i + 2:]\n                    return len(num)\n                # if the last character is the same, remove the last character and return the number of characters\n                else:\n                    num = num[:i]\n                    return len(num)\n    # iterate through the string\n    for i in range(0, len(num)):\n        # if the current and next character are the same, and the next character is not the last character, remove the next character and return the number of characters\n        if num[i] == num[i + 1]:\n            if i < len(num) - 2:\n                num = num[:i] + num[i + 2:]\n                return len(num)\n            # if the last character is the same, remove the last character and return the number of characters\n            else:\n                num = num[:i]\n                return len(num)\n    # if the string cannot be made a palindrome by removing characters, return the number of characters\n    return len(num)\n    \n    \ndef num_distinct_islands(grid):\n    '''\n    Given a 2D array grid where each element is either 0 or 1, find the number of islands and the distance between them.\n    '''\n    # set the rows and columns\n    rows, columns = len(grid), len(grid[0])\n    # iterate through the grid\n    for row in range(0, rows):\n        for column in range(0, columns):\n            # if the current position is 1\n            if grid[row][column] == 1:\n                # set the starting position\n                cur_row, cur_col = row, column\n                # set the current number of islands to 1\n                islands = 1\n                # while the current position is 1, increment the number of islands\n                while cur_row < rows and grid[cur_row][cur_col] == 1:\n                    cur_row += 1\n                    islands += 1\n                while cur_col < columns and grid[cur_row][cur_col] == 1:\n                    cur_col += 1\n                    islands += 1\n                # if the current number of islands is greater than 1, set the number of islands to 1 and check the previous position\n                if islands > 1:\n                    grid[row][column] = 1\n                    islands = 1\n                    while cur_row > 0 and grid[cur_row - 1][cur_col] == 1:\n                        cur_row -= 1\n                        islands += 1\n                    while cur_col > 0 and grid[cur_row][cur_col - 1] == 1:\n                        cur_col -= 1\n                        islands += 1\n                    grid[row][column] = islands\n    # set the number of islands to 0\n    islands = 0\n    # iterate through the grid\n    for row in range(0, rows):\n        for column in range(0, columns):\n            # if the current position is 1\n            if grid[row][column] == 1:\n                # increase the number of islands\n                islands += 1\n    # return the number of islands and the distance between the islands\n    return islands, islands - 1\n    \n    \ndef num_decodings(s):\n    '''\n    Given a string s, return the number of ways to decode it.\n    '''\n    # check if the length of the string is 0\n    if len(s) == 0:\n        # return 1 as there is only one possible decoded string\n        return 1\n    # check if the length is 1, return 1 since there is only one way to decode a string of length 1\n    elif len(s) == 1:\n        return 1\n    # if the length is greater than 1, check if the current character is a 1\n    if s[0] == \"1\":\n        # check if the second character is a 1\n        if s[1] == \"1\":\n            # if so, return the number of ways to decode the string minus one\n            return num_decodings(s[1:]) - 1\n        # if not, return the number of ways to decode the string\n        else:\n            return num_decodings(s[1:])\n    # if the length of the string is greater than 1, check if the current character is a 2\n    if s[0] == \"2\":\n        # check if the second character is a 1\n        if s[1] == \"1\":\n            # if so, return the number of ways to decode the string minus one\n            return num_decodings(s[1:])\n        # if not, check if the third character is a 1\n        if s[2] == \"1\":\n            # if so, return the number of ways to decode the string minus two\n            return num_decodings(s[2:]) - 2\n        # if not, return the number of ways to decode the string"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num[0]!= '9':\n        num = num[1:]\n        num = num[::-1]\n        print(num)\n        last = num[0]\n        num = num[1:]\n        num = int(num)\n        num += 1\n        num = str(num)\n        num = last + num[::-1]\n    else:\n        num = num[1:]\n        num = num[::-1]\n        last = num[0]\n        num = num[1:]\n        num = int(num)\n        num += 1\n        num = str(num)\n        num = str(int(last) + int(num)) + num[::-1]\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return int(num)\n    else:\n        rev = num[::-1]\n        if rev[1:] == num[:-1]:\n            new_num = int(num[0] + str(int(rev[0]) - 1) + str(int(rev[0]) + 1) + str(rev[1:]))\n        else:\n            for i in range(1, len(rev)):\n                if rev[i:] == num[:-i]:\n                    new_num = int(num[:-i] + str(int(rev[i - 1]) - 1) + str(int(rev[i - 1]) + 1) + rev[i:])\n                    break\n    return new_num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #initialize values\n    num_str = str(num)\n    #initialize string palindrome and current palindrome\n    pal = num_str + num_str[::-1]\n    curr_pal = ''\n    #variable to hold the palindrome that we've found\n    smallest_pal = 0\n    #variable to hold the difference between the curr_pal and the smallest_pal\n    delta = sys.maxsize\n    #loop through\n    for i in range(len(num_str)):\n        for j in range(len(num_str)):\n            #if the two values are the same\n            if num_str[i] == num_str[j]:\n                #and the palindrome is less than the delta\n                if int(pal[i+j]) - int(pal[i+j+1]) < delta:\n                    #update the palindrome and delta\n                    curr_pal = pal[i+j:i+j+2]\n                    smallest_pal = int(curr_pal)\n                    delta = int(pal[i+j]) - int(pal[i+j+1])\n    return smallest_pal\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_len = len(num_str)\n    \n    if num_len <= 1:\n        return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    num_list = [int(x) for x in str(num)]\n    for i in range(0,len(num_list)//2):\n        if num_list[i]!= num_list[-(i+1)]:\n            for j in range(i,len(num_list)):\n                if num_list[i] == num_list[j]:\n                    num_list[i], num_list[j] = num_list[j], num_list[i]\n                    break\n            break\n    return int(\"\".join([str(x) for x in num_list]))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    n = len(num)\n    if n == 1:\n        return int(num)\n    elif n == 2:\n        return int(num[::-1]) + 1\n    else:\n        for i in range(n):\n            if num[i]!= num[-(i+1)]:\n                num = list(num)\n                num[i] = num[-(i+1)]\n                num[-(i+1)] = num[i]\n                num = ''.join(num)\n                break\n        return int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    try:\n        num = int(num)\n    except:\n        raise ValueError('Please enter an integer.')\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #    Your code goes here\n    #        num: int\n    #        return: int\n    num_str = str(num)\n    if len(num_str) <= 1:\n        return num_str\n    if num_str[0] == '9':\n        return num_str[1:]\n    if num_str[0] == '1':\n        if num_str[1] == '0':\n            return num_str[2:]\n        else:\n            return str(int(num_str[1]) - 1) + num_str[2:]\n    else:\n        return str(int(num_str[0]) - 1) + num_str[1:]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Set low and high points\n    low = 0\n    high = len(arr) - 1\n    # While low and high do not cross\n    while low <= high:\n        # Find the middle point\n        middle = (low + high) // 2\n        # Check if it is in the right spot\n        if arr[middle] == k:\n            # return the middle point\n            return middle\n        # Check if it is greater than the middle point\n        elif arr[middle] > k:\n            # Set the high point to the middle point\n            high = middle\n        # Otherwise, it is less than the middle point\n        else:\n            # Set the low point to the middle point\n            low = middle + 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        m = int(len(arr) / 2)\n        if k == m:\n            return arr[m]\n        elif k > m:\n            return kth_element(arr[m:], k - m)\n        else:\n            return kth_element(arr[:m], k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[high] = arr[high], arr[i+1]\n        return i + 1\n    \n    def kth_helper(arr, k, low, high):\n        if low == high:\n            return arr[low]\n        else:\n            pivot = partition(arr, low, high)\n            if pivot == k:\n                return arr[pivot]\n            elif k < pivot:\n                return kth_helper(arr, k, low, pivot - 1)\n            else:\n                return kth_helper(arr, k, pivot + 1, high)\n    return kth_helper(arr, k, 0, len(arr) - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, low, high, k):\n        pivot = arr[high]\n        i = low - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    return arr[k - 1] if k <= n else -1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k or k < 1:\n        return None\n    pivot = partition(arr, 0, len(arr) - 1)\n    if pivot + 1 == k:\n        return arr[pivot]\n    elif pivot + 1 > k:\n        return kth_element(arr[:pivot], k)\n    else:\n        return kth_element(arr[pivot + 1:], k - pivot - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start, end = 0, len(arr) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n        if arr[mid] > arr[mid + 1]:\n            end = mid\n        else:\n            start = mid + 1\n    return arr[start]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    output = \"\"\n    \n    for i, c in enumerate(word):\n        if i == 0:\n            output += c.upper()\n        else:\n            output += c.lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = ''\n    for i, c in enumerate(word):\n        if c.isupper() and i > 0:\n            res += '_' + c.lower()\n        else:\n            res += c\n    return res\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            new_word = word[0].upper()\n        else:\n            if word[i] == '_':\n                new_word += word[i+1].upper()\n            else:\n                new_word += word[i]\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = list(word)\n    print(word_list)\n    cap_list = []\n    for i in range(len(word_list)):\n        if word_list[i] == \"_\":\n            cap_list.append(word_list[i])\n        else:\n            cap_list.append(word_list[i].upper())\n    print(cap_list)\n    new_list = ''.join(cap_list)\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = list(word)\n    for idx, word in enumerate(word_list):\n        if word == '_':\n            word_list[idx+1] = word_list[idx+1].upper()\n    return ''.join(word_list)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    output = ''\n    for i in range(len(word)):\n        if word[i] == '_':\n            if word[i+1]!= '_':\n                output = output + word[i+1].upper()\n        else:\n            output = output + word[i]\n    return output\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    split_words = word.split('_')\n    return split_words[0] + ''.join(i.capitalize() for i in split_words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    a = word.split(\"_\")\n    b = []\n    for i in a:\n        b.append(i.capitalize())\n    c = \"\".join(b)\n    return c\nprint(snake_to_camel(\"snake_case\"))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(i.title() for i in word.split('_'))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = 0\n    if n == 1:\n        num = 0\n    elif n == 2:\n        num = m\n    elif n > 2:\n        num = m + eulerian_num(n-2, m)\n    return num\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    x = 0\n    for i in range(n, m):\n        for j in range(1, i+1):\n            if gcd(j, i) == 1:\n                x += 1\n    if x > 0:\n        print(f'gcd(n, m) = 1')\n        print(f'a({n}, {m}) = {x}')\n        return x\n    elif x == 0:\n        print(f'gcd(n, m) = {gcd(n, m)}')\n        print(f'a({n}, {m}) = -1')\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a_n = 1\n    for i in range(n):\n        a_n = a_n + (m*(m-1))\n    return a_n\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        return a(m, n)\n    else:\n        return a(n, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = (m - 1) * m ** n - 1\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    else:\n        return n+eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return eulerian_num(n - 1, m) + m * eulerian_num(n // 2, m)\n    else:\n        return eulerian_num(n - 1, m) + m * eulerian_num(n // 2, m) - eulerian_num(n - 1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n == m):\n        return n * (n - 1) / 2\n    if (n % 2 == 0 or m % 2 == 0):\n        return 0\n    else:\n        return n * m\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # number of nodes and edges in a graph \n    # a graph is an Eulerian if it has an Eulerian circuit\n    # number of nodes is number of vertices\n    # number of edges is number of edges\n    # a Eulerian graph is an Eulerian graph with number of edges equal to number of nodes -1\n    # Theorem : There is an Eulerian path in a graph iff there is a Hamiltonian circuit\n    return (n*m) - 1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    for i in range(1, n):\n        if gcd(i, n) == 1:\n            ans += 1\n    for j in range(1, m):\n        if gcd(j, m) == 1:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort(key=str.lower)\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_to_sort = [i for i in input_list]\n    return sorted(list_to_sort)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sublist) for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list_item in input_list:\n        list_item.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for l in input_list:\n        l.sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x is True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if bool(i) == True:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    true_count=0\n    for x in lst:\n        if x:\n            true_count+=1\n    return true_count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\nprint(count([True, True, False, True]))\nprint(count(['a', True, 'b', False]))\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([e for e in lst if e])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # YOUR CODE STARTS HERE\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n    # YOUR CODE ENDS HERE\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n    \nprint(count([False,False,True]))\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list, test_tup)\n    return (test_list, test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + [4,5,6]\n    test_tup = test_tup + (7,8,9)\n    return [test_list, test_tup]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    l = []\n    for i in test_tup:\n        l.append(list(i))\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_1 = [1,2,3]\n    tuple_1 = (1,2,3)\n    tuple_1 = tuple_1 + list_1\n    print(tuple_1)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for tup in test_tup:\n        test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return (test_list + list(test_tup))\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return [tuple(test_list)] + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num1:\n        return num2\n    if not num2:\n        return num3\n    if not num3:\n        return num1\n    final_list=[]\n    heapq.heapify(final_list)\n    while num1 and num2 and num3:\n        if num1[0]<=num2[0] and num1[0]<=num3[0]:\n            heapq.heappush(final_list,num1[0])\n            num1.pop(0)\n        elif num2[0]<=num1[0] and num2[0]<=num3[0]:\n            heapq.heappush(final_list,num2[0])\n            num2.pop(0)\n        elif num3[0]<=num1[0] and num3[0]<=num2[0]:\n            heapq.heappush(final_list,num3[0])\n            num3.pop(0)\n    return final_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # initialize empty array to hold all of the elements of all three lists\n    all_list = []\n    all_list.extend(num1)\n    all_list.extend(num2)\n    all_list.extend(num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1=num1[::-1]\n    num2=num2[::-1]\n    num3=num3[::-1]\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    return sorted(num1)\n    \ndef insert_in_a_sorted_list(num,i):\n    '''\n    Write a function to insert an element into a sorted list.\n    '''\n    return num[:i]+[num[i]]+num[i+1:]\n    \ndef find_max_in_bitonic_array(arr):\n    '''\n    Write a program to find the maximum number in a bitonic array.\n    An array is considered bitonic if it is monotonically increasing and then monotonically decreasing. \n    Monotonically increasing or decreasing means that for any index i in the array arr[i]!= arr[i+1].\n    '''\n    i=0\n    while i<len(arr):\n        if arr[i]>arr[i+1]:\n            break\n        i+=1\n    j=i\n    while j<len(arr):\n        if arr[j]>arr[j-1]:\n            return arr[j]\n        j+=1\n    return -1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None:\n        return num2\n    elif num2==None:\n        return num3\n    elif num3==None:\n        return num1\n    else:\n        return merge_sorted_list(num1,heapq.heappushpop(num2,num1[0]),num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    nums = [num1,num2,num3]\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    for i in range(len(nums)):\n        result.append(nums[i])\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    num1_idx = num2_idx = num3_idx = 0\n    while num1_idx < len(num1) and num2_idx < len(num2) and num3_idx < len(num3):\n        if num1[num1_idx] < num2[num2_idx] < num3[num3_idx]:\n            result.append(num1[num1_idx])\n            num1_idx += 1\n        elif num2[num2_idx] < num1[num1_idx] < num3[num3_idx]:\n            result.append(num2[num2_idx])\n            num2_idx += 1\n        else:\n            result.append(num3[num3_idx])\n            num3_idx += 1\n    if num1_idx < len(num1):\n        result += num1[num1_idx:]\n    if num2_idx < len(num2):\n        result += num2[num2_idx:]\n    if num3_idx < len(num3):\n        result += num3[num3_idx:]\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for i in range(len(num1)):\n        merged_list.append(num1[i])\n    for i in range(len(num2)):\n        merged_list.append(num2[i])\n    for i in range(len(num3)):\n        merged_list.append(num3[i])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    return list(heapq.merge(num1,num2,num3))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    combined_list=[]\n    for i in range(len(num1)):\n        combined_list.append(num1[i])\n    for j in range(len(num2)):\n        combined_list.append(num2[j])\n    for k in range(len(num3)):\n        combined_list.append(num3[k])\n    return combined_list\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    def isodd(num):\n        if num%2==0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0 \n    for i in range(n):\n        if(s[i] == '1'):\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n<0):\n        return \"Wrong Input\"\n    if(n==0):\n        return 0\n    if(s==''):\n        return 0\n    sum=0\n    for i in range(len(s)):\n        if(s[i]=='0'):\n            if((i+n)%2==1):\n                sum+=1\n        else:\n            if((i+n)%2==0):\n                sum+=1\n    return sum\ns=\"101010\"\nn=1\nprint(odd_Equivalent(s,n))\ns=\"101010\"\nn=2\nprint(odd_Equivalent(s,n))\ns=\"101010\"\nn=3\nprint(odd_Equivalent(s,n))\ns=\"101010\"\nn=4\nprint(odd_Equivalent(s,n))\ns=\"101010\"\nn=5\nprint(odd_Equivalent(s,n))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return s.count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    assert(n >= 0)\n    \n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return s.count('1') + s.count('0')\n    if n == 3:\n        return s.count('0') + s.count('1')\n    if n % 2 == 0:\n        return (odd_Equivalent(s, n-1) + (s.count('0') * odd_Equivalent(s, n-2))) % 1000000007\n    else:\n        return ((odd_Equivalent(s, n-1) + odd_Equivalent(s, n-2)) % 1000000007 + s.count('1') * odd_Equivalent(s, n-3)) % 1000000007\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    while(s):\n        #print(s)\n        if(s[0]=='0'):\n            s=s[1:]\n            continue\n        else:\n            s=s[1:]+s[0]\n            count+=1\n            \n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def rotate(s,n):\n        return s[n:] + s[:n]\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return sum(x%2 for x in s[n:] + s[:n])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if int(s[i])%2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return s.count('0')+s.count('1')==n and n%2==1\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def element_in_nested_lists(element):\n        for n in nestedlist:\n            if element in n:\n                return True\n        return False\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def unnest(nestedlist):\n        return [item for sublist in nestedlist for item in sublist]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # your code here\n    \n    #create a set of all the elements\n    total_list = []\n    for x in nestedlist:\n        total_list += x\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for x in range(len(nestedlist[i][j])):\n                nestedlist[i][j][x] = nestedlist[i][j][x].lower()\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # since nested lists are mutable, I can change them\n    for i in range(len(nestedlist)):\n        nestedlist[i] = sorted(nestedlist[i])\n    \n    # initialize two variables, one for each list's elements\n    first_set = set(nestedlist[0])\n    second_set = set(nestedlist[1])\n    \n    # iterate through the sets, and add all common elements\n    # to a new set\n    union_set = set()\n    for item in first_set:\n        if item in second_set:\n            union_set.add(item)\n    \n    # return the result\n    return union_set\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    d = {}\n    for i in nestedlist:\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    max_ = 0\n    for key in d.keys():\n        if d[key] > max_:\n            max_ = d[key]\n            res = key\n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    i = 0\n    j = 0\n    common = []\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(nestedlist[0]).intersection(*nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    seen = set()\n    for lst in nestedlist:\n        seen.update(set(lst))\n    return seen\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # check for leading and trailing whitespaces and if it is a negative sign\n    if (text[0] == '-' or text[0] == '+') and text[1:].isdigit():\n        return True\n    if text.isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if len(text) == 0: return False\n    if text[0] == '-':\n        if text[1:].isdigit(): return True\n    elif text.isdigit(): return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = True\n    for i in list1:\n        if bool(i):\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if isinstance(list1, list) and list1:\n        for i in list1:\n            if not isinstance(i, dict):\n                return False\n            if i:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all([isinstance(i, dict) for i in list1]):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list=[]\n    for x in list1:\n        empty_list.append(x)\n    for y in empty_list:\n        if y=={}:\n            print(\"The dictionary is empty.\")\n            break\n        else:\n            print(\"Not empty.\")\n            break\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n    \n    \n    \ndef check_empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True\n    \n    \n    \ndef sum_list(list1):\n    '''\n    Write a function to return the sum of all elements in a list.\n    '''\n    sum1 = 0\n    for i in list1:\n        sum1 = sum1 + i\n    return sum1\n    \n    \n    \ndef avg(list1):\n    '''\n    Write a function to return the average value of all elements in a list.\n    '''\n    return sum_list(list1)/len(list1)\n    \n    \n    \ndef add_more_stuff(a_list):\n    '''\n    Write a function to add some more stuff onto the end of a list.\n    '''\n    a_list.append(42)\n    a_list.append([0,1,2])\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function to remove some more stuff from the end of a list.\n    '''\n    a_list.pop()\n    a_list.pop()\n    \n    \n    \ndef remove_more_stuff(a_list):\n    '''\n    Write a function t"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    dict_count = 0\n    for i in list1:\n        if bool(i) == True:\n            dict_count = dict_count + 1\n    if dict_count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    c=0\n    for i in list1:\n        if i!={}:\n            c=c+1\n    if c==0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    if len(list1) == 0:\n        return True\n    else:\n        if list1[0] == {}:\n            return empty_dit(list1[1:])\n        else:\n            return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag=0\n    for i in range(len(list1)):\n        if list1[i]:\n            flag=1\n    if flag==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] * 10 ** i\n    return sum\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    nums.sort(reverse=True)\n    result = 0\n    for num in nums:\n        result *= 10\n        result += num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums_str = ''.join(list(map(str, nums)))\n    return int(nums_str)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum_nums = 0\n    for num in nums:\n        sum_nums += num\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(\"\".join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res = res * 10 + num\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    assert type(nums) == tuple\n    for i in nums:\n        assert type(i) == int and i >= 0\n    return int(''.join(str(nums[i]) for i in range(len(nums))))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    def str_to_int(nums):\n        string = ''\n        for i in range(len(nums)):\n            string += str(nums[i])\n        return int(string)\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return list(map(float, test_list))\n    except ValueError:\n        return []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        for element in sublist:\n            float_list.append(float(element))\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for list in test_list:\n        float_list.append(list_to_float_helper(list))\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if type(test_list)!= list:\n        raise TypeError(\"Please enter a list of lists.\")\n    for inner_list in test_list:\n        if type(inner_list)!= list:\n            raise TypeError(\"Please enter a list of lists.\")\n        for elem in inner_list:\n            try:\n                elem = float(elem)\n            except:\n                raise ValueError(\"Please enter a list of lists of floats.\")\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n    \n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # code goes here\n    return list(map(float, test_list))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = [float(x) for x in test_list]\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for i in range(len(sublist)):\n            try:\n                sublist[i] = float(sublist[i])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    print(f'Converting the list: {test_list}')\n    try:\n        converted_list = [float(i) for i in test_list]\n        print(f'Converted the list: {converted_list}')\n    except ValueError as e:\n        print(f'The exception is: {e}')\n    \nlist_to_float(test_list)\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split()\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_string = string.split(' ')\n    return list_string\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split(' ')\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ') \n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(\" \")\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(\" \"))\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    x = 1\n    while x < len(arr):\n        if arr[x] == arr[x-1]:\n            x += 2\n        else:\n            return arr[x-2]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    dict = {}\n    for i in arr:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    middle = len(arr)//2\n    left = arr[:middle]\n    right = arr[middle:]\n    left_answer = search(left)\n    right_answer = search(right)\n    if left_answer == right_answer:\n        return left_answer\n    else:\n        return right_answer\n    \ndef binary_search(arr, key):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        middle = (left+right)//2\n        if arr[middle] == key:\n            if (middle-1) >= 0 and arr[middle-1] == key:\n                right = middle-1\n            else:\n                return arr[middle]\n        elif arr[middle] < key:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return arr[right]\n    \narr = [1,1,2,2,3,4,4,5,5]\narr2 = [1,1,2,3,4,4,5,5]\nkey = 1\nkey2 = 4\nprint(search(arr))\nprint(search(arr2))\nprint(binary_search(arr, key))\nprint(binary_search(arr2, key2)"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        for elem in arr:\n            if arr.count(elem) == 1:\n                return elem\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    index = 0\n    for i in arr:\n        if index == 0:\n            seen = i\n        if seen!= i:\n            index += 1\n            seen = i\n    return seen"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    num_frequency_map = {}\n    for item in arr:\n        if item in num_frequency_map:\n            num_frequency_map[item] += 1\n        else:\n            num_frequency_map[item] = 1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    found_once = []\n    \n    for num in arr:\n        if num not in found_once:\n            found_once.append(num)\n        else:\n            found_once.remove(num)\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    #1st approach\n    # n = len(arr)\n    # # n = n*(n-1)/2\n    # sum_array = n*(n-1)/2\n    # res = n*(n+1)/2\n    # return res - sum_array\n    \n    #2nd approach\n    # count = {}\n    # for i in arr:\n    #     count[i] = count.get(i,0) + 1\n    # for i in arr:\n    #     if count[i] == 1:\n    #         return i\n    \n    #3rd approach\n    # for i in range(1,len(arr)):\n    #     arr[i] += arr[i-1]\n    # for i in range(0,len(arr)-1):\n    #     if arr[i] == arr[i+1]:\n    #         return arr[i]\n    \n    #4th approach\n    # for i in arr:\n    #     if arr.count(i) == 1:\n    #         return i\n    \n    #5th approach\n    # for i in range(len(arr)):\n    #     if arr[i] == arr[i+1]:\n    #         return arr[i]\n    \n    #6th approach\n    # arr.sort()\n    # if arr[0] == arr[1] and arr[-1] == arr[-2]:\n    #     return arr[0]\n    \n    #7th approach\n    # d = {}\n    # for i in arr:\n    #     if i in d:\n    #         d[i] += 1\n    #     else:\n    #         d[i] = 1\n    # for i in d:\n    #     if d[i] == 1:\n    #         return i\n    \n    #8th approach\n    # x = 0\n    # y = 0\n    # for i in arr:\n    #     x = x^i\n    # for i in range(len(arr)):\n    #     y = y^arr[i]\n    # return x^y\n    \n    #9th approach\n    # # Time: O(n) and space: O(1)\n    # def singleNumber(self, arr):\n    #     x = 0\n    #     for i in arr:\n    #         x = x^i\n    #     return x\n    \n    #10th approach\n    # Time: O(n) and space: O(1)\n    # arr.sort()\n    # for i in range(0,len(arr),2):\n    #     if i+1 < len(arr):\n    #         if arr[i]!= arr[i+1]:\n    #             return arr[i]\n    #     else:\n    #         return arr[i]\n    \n    #11th approach\n    # Time: O(n) and space: O(1)\n    # first = arr[0]\n    # for i in range(1,len(arr)):\n    #     first = first^arr[i]\n    # return first\n    \n    #12th approach\n    # Time: O(n) and space: O(1)\n    # res = arr[0]\n    # for i in range(1,len(arr)):\n    #     res = res^arr[i]\n    # return res\n    \n    #13th approach\n    # Time: O(n) and space: O(1)\n    # res = 0\n    # for i in range(len(arr)):\n    #     res = res^arr[i]\n    # return res\n    \n    #14th approach\n    # Time: O(n) and space: O(1)\n    # res = arr[0]\n    # for i in range(1,len(arr)):\n    #     res = res^arr[i]\n    # return res\n    \n    #15th approach\n    # Time: O(n) and space: O(1)\n    # for i in range(len(arr)):\n    #     arr[i] = arr[i]^arr[i+1]\n    # return arr[0]\n    \n    #16th approach\n    # Time: O(n) and space: O(1)\n    # for i in range(len(arr)):\n    #     res = res^arr[i]\n    # return res\n    \n    #17th approach\n    # Time: O(n) and space: O(n)\n    # dict = {}\n    # for i in arr:\n    #     if i in dict:\n    #         dict[i] += 1\n    #     else:\n    #         dict[i] = 1\n    # for i in dict:\n    #     if dict[i] == 1:\n    #         return i\n    \n    #18th approach\n    # Time: O(n) and space: O(n)\n    # dict = {}\n    # for i in arr:\n    #     if i not in dict:\n    #         dict[i] = 1\n    #     else:\n    #         dict[i] += 1\n    # for i in dict:\n    #     if dict[i] == 1:\n    #         return i\n    \n    #19th approach\n    # Time: O(n) and space: O(n)\n    # x = 0\n    # y = 0\n    # for i in arr:\n    #     x = x^i\n    # for i in range(len(arr)):\n    #     y = y^arr[i]\n    # return x^y\n    \n    #20th approach\n    # Time: O(n) and space: O(n)\n    # hash = {}\n    # for i in arr:\n    #     if i in hash:\n    #         hash[i] += 1\n    #     else:\n    #         hash[i] = 1\n    # for i in hash:\n    #     if hash[i] == 1:\n    #         return i\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    new_list = []\n    for item in list1:\n        if type(item) == tuple:\n            new_list.append(item)\n        elif type(item) == int:\n            new_list.append((item, item))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_prod = 0\n    for pair in list1:\n        prod = abs(pair[0] * pair[1])\n        if prod > max_abs_prod:\n            max_abs_prod = prod\n    return max_abs_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod_list = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_prod_list[0]:\n                max_prod_list.insert(0, abs(list1[i][0]*list1[j][1]))\n    return max_prod_list\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    assert list1!= []\n    max_product = list1[0]\n    for item in list1:\n        if abs(item[0]) * abs(item[1]) > abs(max_product[0]) * abs(max_product[1]):\n            max_product = item\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(list(i))\n    print(list2)\n    result=[]\n    for i in range(len(list2)):\n        for j in range(i+1,len(list2)):\n            p=list2[i][0]*list2[i][1]*list2[j][0]*list2[j][1]\n            result.append(p)\n    print(result)\n    return max(result)\n    \nlist1=[(3, -6), (1, 2), (-8, 0), (2, 1)]\nprint(max_product_tuple(list1))"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list_of_lists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            list_of_lists.append([list1[i], list1[j]])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    largest = 0\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product > largest:\n                largest = product\n    return largest\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)<=0:\n        return None\n    return max(list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = []\n    for i in list1:\n        if len(i) == 3:\n            a = i[0] * i[1]\n            b = i[0] * i[2]\n            c = i[1] * i[2]\n            result.append(max(a,b,c))\n    return max(result)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_list = []\n    for x in range(1, limit + 1):\n        y = sum_divisors(x)\n        if y!= x and y < limit and x in sum_divisors(y):\n            print('{0} and {1} are amicable.'.format(x, y))\n            amicable_list.append(x)\n    return sum(amicable_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers(num):\n        return sum(e for e in range(1, num) if is_amicable_number(e))\n    return sum_amicable_numbers(limit)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(sum_amicable_numbers(limit))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(n):\n        return sum([i for i in range(1,n) if n%i == 0])\n    \n    s = 0\n    for i in range(1, limit):\n        if i not in amicable_numbers_set:\n            a = sum_divisors(i)\n            b = sum_divisors(a)\n            if i == b and i!= a:\n                s += i\n                amicable_numbers_set.add(a)\n                amicable_numbers_set.add(b)\n    return s\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Assume that only pairs of amicable numbers exist for n > 1\n    # Ex: 3, 4 and 12 are amicable pairs\n    # 5, 25 and 220 are not amicable pairs\n    # However, 29 and 329 are amicable pairs\n    # So the solution will also be of this form.\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    nums = []\n    for i in range(1, limit):\n        n = sum(get_divisors(i)[:-1])\n        if n!= i and i == sum(get_divisors(n)[:-1]):\n            nums.append(i+n)\n    return sum(nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Generate list of numbers from 1 to limit\n    numbers = range(1, limit)\n    # Initialize counter\n    total = 0\n    # Iterate over numbers\n    for i in range(len(numbers)):\n        # Check if number has been seen before\n        seen = False\n        # Iterate over all previous numbers\n        for j in range(len(numbers)):\n            # Check if current number is divisible by the number before it\n            if numbers[i] % numbers[j] == 0 and numbers[i]!= numbers[j]:\n                # Set the current number as seen\n                seen = True\n                # Add current number to total\n                total += numbers[i]\n                # If we've seen this number before, remove it from the list\n                if numbers[j] in numbers:\n                    numbers.remove(numbers[j])\n                # If we've seen this number before, remove it from the list\n                if numbers[i] in numbers:\n                    numbers.remove(numbers[i])\n                break\n        # If we've seen this number before, skip it\n        if seen:\n            continue\n    # Return the sum of all amicable numbers\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for x in range(1, limit):\n        if amicable_number(x):\n            total += x\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers(limit):\n        def is_amicable(x):\n            y = sum(divisors(x))\n            return sum_divisors(y) == x and x!= y\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for n in range(1, limit):\n        a = get_factors(n)\n        b = get_factors(sum(a))\n        if n == sum(b) and n!= sum(a):\n            amicable_numbers.add(n)\n            amicable_numbers.add(sum(b))\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # a,b=complex(a,b)\n    # print(a)\n    # print(b)\n    a=complex(a)\n    b=complex(b)\n    c=a/b\n    angle=cmath.phase(c)\n    # print(angle)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)/(cmath.pi*2)\ndef sum_complex(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    return a + b\ndef mul_complex(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    return a*b\ndef sub_complex(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    return a - b\ndef div_complex(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    return a / b\ndef mod_complex(a):\n    '''\n    Write a function to return the module of a complex number.\n    '''\n    return cmath.polar(a)[0]\ndef conjugate_complex(a):\n    '''\n    Write a function to return the conjugate of a complex number.\n    '''\n    return a.conjugate()\ndef pow_complex(a,b):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    return a**b\ndef print_complex(a,b):\n    '''\n    Write a function to print a complex number in rectangular form\n    '''\n    return (a.real,a.imag)\ndef complex_peri(a):\n    '''\n    Write a function to return the perimeter of a complex number\n    '''\n    return 2*cmath.pi*abs(a)\ndef complex_area(a):\n    '''\n    Write a function to return the area of a complex number\n    '''\n    return (abs(a)**2)*cmath.pi/2\ndef div_tuple(a,b):\n    '''\n    Write a function to divide two tuples.\n    '''\n    return a[0]/b[0],a[1]/b[1]\ndef add_tuple(a,b):\n    '''\n    Write a function to add two tuples.\n    '''\n    return a[0] + b[0],a[1] + b[1]\ndef mul_tuple(a,b):\n    '''\n    Write a function to multiply two tuples.\n    '''\n    return a[0]*b[0] - a[1]*b[1], a[0]*b[1] + a[1]*b[0]\ndef sub_tuple(a,b):\n    '''\n    Write a function to subtract two tuples.\n    '''\n    return a[0] - b[0],a[1] - b[1]\ndef div_list(a,b):\n    '''\n    Write a function to divide two lists.\n    '''\n    return a[0]/b[0],a[1]/b[1]\ndef add_list(a,b):\n    '''\n    Write a function to add two lists.\n    '''\n    return a[0] + b[0],a[1] + b[1]\ndef mul_list(a,b):\n    '''\n    Write a function to multiply two lists.\n    '''\n    return a[0]*b[0] - a[1]*b[1], a[0]*b[1] + a[1]*b[0]\ndef sub_list(a,b):\n    '''\n    Write a function to subtract two lists.\n    '''\n    return a[0] - b[0],a[1] - b[1]\ndef div_dict(a,b):\n    '''\n    Write a function to divide two dictionaries.\n    '''\n    return a[0]/b[0],a[1]/b[1]\ndef add_dict(a,b):\n    '''\n    Write a function to add two dictionaries.\n    '''\n    return a[0] + b[0],a[1] + b[1]\ndef mul_dict(a,b):\n    '''\n    Write a function to multiply two dictionaries.\n    '''\n    return a[0]*b[0] - a[1]*b[1], a[0]*b[1] + a[1]*b[0]\ndef sub_dict(a,b):\n    '''\n    Write a function to subtract two dictionaries.\n    '''\n    return a[0] - b[0],a[1] - b[1]\ndef div_set(a,b):\n    '''\n    Write a function to divide two sets.\n    '''\n    return a[0]/b[0],a[1]/b[1]\ndef add_set(a,b):\n    '''\n    Write a function to add two sets.\n    '''\n    return a[0] + b[0],a[1] + b[1]\ndef mul_set(a,b):\n    '''\n    Write a function to multiply two sets.\n    '''\n    return a[0]*b[0] - a[1]*b[1], a[0]*b[1] + a[1]*b[0]\ndef sub_set(a,b):\n    '''\n    Write a function to subtract two sets.\n    '''\n    return a[0] - b[0],a[1] - b[1]\ndef div_frozenset(a,b):\n    '''\n    Write a function to divide two sets.\n    '''\n    return a[0]/b[0],a[1]/b[1]\ndef add_frozenset(a,b):\n    '''\n    Write a function to add two sets.\n    '''\n    return a[0] + b[0],a[1] + b[1]\ndef mul_frozenset(a,b):\n    '''\n    Write a function to multiply two sets.\n    '''\n    return a[0]*b[0] - a[1]*b[1], a[0]*b[1] + a[1]*b[0]\ndef sub_frozenset(a,b):\n    '''\n    Write a function to subtract two sets.\n    '''\n    return a[0] - b[0],a[1] - b[1]\ndef div_range(a,b):\n    '''\n    Write a function to divide two ranges.\n    '''\n    return a[0]/b[0],a[1]/b[1]\ndef add_range(a,b):\n    '''\n    Write a function to add two ranges.\n    '''\n    return a[0] + b[0],a[1] + b[1]\ndef mul_range(a,b):\n    '''\n    Write a function to multiply two ranges.\n    '''\n    return a[0]*b[0] - a[1]*b[1], a[0]*b[1] + a[1]*b[0]\ndef sub_range(a,b):\n    '''\n    Write a function to subtract two ranges.\n    '''\n    return a[0] - b[0],a[1] - b[1]\ndef div_bytes(a,b):\n    '''\n    Write a function to divide two bytes objects.\n    '''\n    return a[0]/b[0],a[1]/b[1]\ndef add_bytes(a,b):\n    '''\n    Write a function to add two bytes objects.\n    '''\n    return a[0] + b[0],a[1] + b[1]\ndef mul_bytes(a,b):\n    '''\n    Write a function to multiply two bytes objects.\n    '''\n    return a[0]*b[0] - a[1]*b[1], a[0]*b[1] + a[1]*b[0]\ndef sub_bytes(a,b):\n    '''\n    Write a function to subtract two bytes objects.\n    '''\n    return a[0] - b[0],a[1] - b[1]\ndef div_bytearray(a,b):\n    '''\n    Write a function to divide two bytearrays.\n    '''\n    return a[0]/b[0],a[1]"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a*b.conjugate())/cmath.pi*180\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if type(a) == complex and type(b) == complex:\n        a = a\n        b = b\n        a = a*cmath.rect(1,math.pi/180)\n        b = b*cmath.rect(1,math.pi/180)\n        if a >= 0 and b >= 0:\n            return a-b\n        else:\n            return -(a-b)\n    else:\n        return None\ndef angle_complex_2(a,b):\n    if type(a) == complex and type(b) == complex:\n        a = a*cmath.rect(1,math.pi/180)\n        b = b*cmath.rect(1,math.pi/180)\n        if a >= 0 and b >= 0:\n            return a-b\n        else:\n            return -(a-b)\n    else:\n        return None\ndef dot(a,b):\n    '''\n    Write a function to get the dot product of two lists of the same length.\n    '''\n    if type(a) == list and type(b) == list and len(a) == len(b):\n        return sum([a[i]*b[i] for i in range(len(a))])\n    else:\n        return None\ndef list_div(a,b):\n    '''\n    Write a function to divide two numbers and get the quotient and remainder.\n    '''\n    if type(a) == int and type(b) == int and b!= 0:\n        return a//b, a%b\n    else:\n        return None\ndef list_mult(a,b):\n    '''\n    Write a function to multiply two lists of the same length.\n    '''\n    if type(a) == list and type(b) == list and len(a) == len(b):\n        return [a[i]*b[i] for i in range(len(a))]\n    else:\n        return None\ndef list_sum(a,b):\n    '''\n    Write a function to add two lists of the same length.\n    '''\n    if type(a) == list and type(b) == list and len(a) == len(b):\n        return [a[i]+b[i] for i in range(len(a))]\n    else:\n        return None\ndef list_complex(a,b):\n    '''\n    Write a function to calculate the complex number a + ib.\n    '''\n    if type(a) == list and type(b) == list and len(a) == 2 and len(b) == 2:\n        return [a[0]+b[0],a[1]+b[1]]\n    else:\n        return None\ndef list_complex_2(a,b):\n    '''\n    Write a function to calculate the complex number a + ib.\n    '''\n    if type(a) == list and type(b) == list and len(a) == 2 and len(b) == 2:\n        return [a[0]*b[0]-a[1]*b[1],a[0]*b[1]+a[1]*b[0]]\n    else:\n        return None\ndef list_conj(a):\n    '''\n    Write a function to calculate the complex conjugate of a list.\n    '''\n    if type(a) == list and len(a) == 2:\n        return [a[0],-a[1]]\n    else:\n        return None\ndef list_conj_2(a):\n    '''\n    Write a function to calculate the complex conjugate of a list.\n    '''\n    if type(a) == list and len(a) == 2:\n        return [a[0]*a[0],a[1]*a[1]]\n    else:\n        return None\ndef matrix_add(a,b):\n    '''\n    Write a function to add two matrices of the same size.\n    '''\n    if type(a) == list and type(b) == list and len(a) == len(b) and len(a[0]) == len(b[0]):\n        return [[a[i][j]+b[i][j] for j in range(len(a[0]))] for i in range(len(a))]\n    else:\n        return None\ndef matrix_add_2(a,b):\n    '''\n    Write a function to add two matrices of the same size.\n    '''\n    if type(a) == list and type(b) == list and len(a) == len(b) and len(a[0]) == len(b[0]):\n        return [[sum(a[i][j]*b[i][j] for j in range(len(a[0]))) for i in range(len(a))]]\n    else:\n        return None\ndef matrix_add_3(a,b):\n    '''\n    Write a function to add two matrices of the same size.\n    '''\n    if type(a) == list and type(b) == list and len(a) == len(b) and len(a[0]) == len(b[0]):\n        return [[a[i][j]+b[i][j] for j in range(len(a[0]))] for i in range(len(a))]\n    else:\n        return None\ndef matrix_mult(a,b):\n    '''\n    Write a function to multiply two matrices of the same size.\n    '''\n    if type(a) == list and type(b) == list and len(a) == len(b[0]) and len(a[0]) == len(b):\n        return [[sum([a[i][k]*b[k][j] for k in range(len(a))]) for j in range(len(b[0]))] for i in range(len(a))]\n    else:\n        return None\ndef matrix_mult_2(a,b):\n    '''\n    Write a function to multiply two matrices of the same size.\n    '''\n    if type(a) == list and type(b) == list and len(a) == len(b[0]) and len(a[0]) == len(b):\n        return [[sum(a[i][k]*b[k][j] for k in range(len(a))) for j in range(len(b[0]))] for i in range(len(a))]\n    else:\n        return None\ndef matrix_mult_3(a,b):\n    '''\n    Write a function to multiply two matrices of the same size.\n    '''\n    if type(a) == list and type(b) == list and len(a) == len(b[0]) and len(a[0]) == len(b):\n        return [[sum([a[i][k]*b[k][j] for k in range(len(a))]) for j in range(len(b[0]))] for i in range(len(a))]\n    else:\n        return None\ndef matrix_trans(a):\n    '''\n    Write a function to transpose a matrix.\n    '''\n    if type(a) == list and len(a) == len(a[0]):\n        return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    else:\n        return None\ndef matrix_trans_2(a):\n    '''\n    Write a function to transpose a matrix.\n    '''\n    if type(a) == list and len(a) == len(a[0]):\n        return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    else:\n        return None\ndef list_mult_matrix(a,b):\n    '''\n    Write a function to multiply a list of lists with a matrix.\n    '''\n    if type(a) == list and type(b) == list and len(a[0]) == len(b) and len(a) == len(b[0]):\n        return [[sum([a[i][k]*b[k][j] for k in range(len(a))]) for j in range(len(b[0]))] for i in range(len(a))]\n    else:\n        return None\ndef list_mult_matrix_2(a,b)"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        return 'error'\n    elif a.real == 0:\n        if a.imag > 0:\n            return '2pi'\n        else:\n            return '-2pi'\n    else:\n        return str(complex(a).angle) +'radians'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a>0 and b>0:\n        x = cmath.phase(complex(a,b))\n        return x\n    elif a>0 and b<0:\n        x = cmath.phase(complex(a,b))\n        x = 360-x\n        return x\n    elif a<0 and b>0:\n        x = cmath.phase(complex(a,b))\n        x = 180-x\n        return x\n    elif a<0 and b<0:\n        x = cmath.phase(complex(a,b))\n        x = 180+x\n        return x\ndef angle_complex_2(z):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(z))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # first, we need to determine if the number is a real number or complex number.\n    # a and b are complex numbers with the same complex parts, and the same imaginary parts.\n    # so, we need to find out whether they have the same real parts.\n    # if a and b have the same real parts, then we can do the complex number.\n    # if a and b have different real parts, then we can do the complex number.\n    # to find out the real parts, we need to calculate the square of the modulus.\n    # because a and b are complex numbers with the same complex parts.\n    # there are two cases:\n    # case 1: a.modulus ** 2 = b.modulus ** 2\n    # case 2: a.modulus ** 2!= b.modulus ** 2\n    # in case 1, the answer is cmath.phase(a)\n    # in case 2, the answer is cmath.phase(b) - cmath.phase(a)\n    # a.modulus ** 2 = |a| ** 2, b.modulus ** 2 = |b| ** 2\n    # so, the formula is: (|a| ** 2) - (|b| ** 2)\n    # to get the complex number.\n    # using the modulus method.\n    # to get the real parts.\n    # return cmath.phase(complex(a))\n    # to get the angle, we need to find out how many times the imaginary parts will be multiplied to the real parts\n    # we multiply the imaginary parts to the real parts, and then times 2 to get the angle.\n    # return cmath.phase(complex(a)) * 2\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = a + b * 1j\n    print(complex_number)\n    angle = cmath.phase(complex_number)\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    prev, curr = 0, 0\n    for i in string:\n        if i == '0':\n            curr += 1\n        else:\n            prev = curr + 1\n            curr = 0\n    return max(curr, prev)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max = 0\n    for i in string:\n        if i == '0':\n            count += 1\n        else:\n            count -= 1\n        if count > max:\n            max = count\n    return max\n    \n    \ndef find_max_ones_zeroes(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max = 0\n    for i in range(len(string)):\n        count = 0\n        for j in range(i, len(string)):\n            if string[j] == '1':\n                count += 1\n            else:\n                count -= 1\n            if count > max:\n                max = count\n    return max\n            \n    \ndef count_zeros(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in string:\n        if i == '1':\n            count += 1\n    return count\n    \ndef count_one(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in string:\n        if i == '0':\n            count += 1\n    return count\n    \n    \ndef count_one_2(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count > max:\n            max = count\n    return max\n    \n    \ndef count_one_3(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count -= 1\n        if count > max:\n            max = count\n    return max\n    \ndef add_zeros_to_front(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return '0' * (32 - len(string)) + string\n    \n    \ndef add_zeros_to_back(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return string + '0' * (32 - len(string))\n    \n    \ndef add_zeros_to_front_2(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \n    \ndef add_zeros_to_front_3(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \ndef add_zeros_to_front_4(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \ndef add_zeros_to_front_5(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \n        \ndef add_zeros_to_front_6(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \n        \ndef add_zeros_to_front_7(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \n        \ndef add_zeros_to_front_8(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \n        \ndef add_zeros_to_front_9(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \n        \ndef add_zeros_to_front_10(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \n        \ndef add_zeros_to_front_11(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \n        \ndef add_zeros_to_front_12(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \n        \ndef add_zeros_to_front_13(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \n        \ndef add_zeros_to_front_14(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 32:\n        return string\n    else:\n        return '0' * (32 - len(string)) + string\n        \n        \ndef add_zeros_to_front_15(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in an"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_len = 0\n    curr_len = 0\n    \n    for char in string:\n        if char == \"0\":\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n        else:\n            curr_len = 0\n    \n    return max_len\n    "
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # a = \"1\"\n    # b = \"0101010\"\n    # a = \"011011011011010\"\n    # b = \"1011011011011010\"\n    a = \"10101101101101101\"\n    b = \"101101101101101010\"\n    # a = \"10101101101101101\"\n    # b = \"101101101101101101\"\n    # a = \"101\"\n    # b = \"101101101101101010\"\n    n = len(a)\n    m = len(b)\n    l = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                l[i][j] = int(a[i] == b[j])\n            elif i == 0:\n                l[i][j] = int(l[i][j-1] + int(a[i] == b[j]))\n            elif j == 0:\n                l[i][j] = int(l[i-1][j] + int(a[i] == b[j]))\n            else:\n                l[i][j] = max(l[i-1][j], l[i][j-1]) + int(a[i] == b[j])\n    print(l[n-1][m-1])\n    return\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string is None or len(string) == 0:\n        return None\n    max_count = 0\n    curr_count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_count = curr_count + 1\n            if curr_count > max_count:\n                max_count = curr_count\n        else:\n            curr_count = 0\n    return max_count\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    maximum = 0\n    for i in range(len(string)):\n        count_1 = 0\n        count_0 = 0\n        for j in range(i,len(string)):\n            if string[j]=='0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            if count_0-count_1 > maximum:\n                maximum = count_0-count_1\n    return maximum\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max([(string.count('0')-string.count('1')),(string.count('1')-string.count('0'))])\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff=0\n    count_zero=0\n    count_one=0\n    for i in range(len(string)):\n        if string[i]=='0':\n            count_zero+=1\n        else:\n            count_one+=1\n        if abs(count_zero-count_one)>max_diff:\n            max_diff=abs(count_zero-count_one)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n=len(string) \n    l=[] \n    for i in range(n): \n        for j in range(i,n): \n            if(string[i:j+1].count('0') == string[i:j+1].count('1')): \n                l.append(len(string[i:j+1])) \n    return max(l) \nprint(find_length(\"101010\")) \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # create an array of zeros to store the count of 0s\n    zeros_count = [0]*len(string) \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n    return gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return math.gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #return sum(set(a).intersection(b))\n    s = set()\n    i = 1\n    while i <= min(a,b):\n        if a%i == 0 and b%i == 0:\n            s.add(i)\n        i += 1\n    return sum(s)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = a\n    y = b\n    def cd(x, y):\n        if y == 0:\n            return x\n        else:\n            return cd(y, x % y)\n    s = cd(a,b)\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    return sum([i for i in range(1,b+1) if a%i==0 and b%i==0])\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum=1\n    for i in range(2,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            sum+=i\n    return sum\ndef common_divisors(x,y):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum(x,y)\nprint(common_divisors(25,50))"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    while b!= 0:\n        (a,b) = (b,a%b)\n    return a\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (a>b):\n        small = b\n    else:\n        small = a\n    for i in range(1, small+1):\n        if((a%i==0) & (b%i==0)):\n            sum_cd = sum_cd + i\n    return sum_cd\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum([x for x in range(1, min(a, b)+1) if a % x == 0 and b % x == 0])\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str.split():\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str:\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            result.append(str[i])\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for i in str:\n        if len(i) > n:\n            long_words.append(i)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    lst = str.split(' ')\n    print('Words with length greater than', n, ':')\n    for word in lst:\n        if len(word) > n:\n            print(word, end=' ')\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # 1. check rows\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # 2. check sum of every row\n    for row in my_matrix:\n        if sum(row)!= 15:\n            return False\n    # 3. check column sum\n    cols = [sum(i) for i in zip(*my_matrix)]\n    if sum(cols)!= 15:\n        return False\n    # 4. check sub matrix sum\n    for sub_matrix in [\n        [my_matrix[0][0], my_matrix[1][0], my_matrix[2][0]],\n        [my_matrix[0][1], my_matrix[1][1], my_matrix[2][1]],\n        [my_matrix[0][2], my_matrix[1][2], my_matrix[2][2]]]:\n        if sum(sub_matrix)!= 15:\n            return False\n    # 5. check magic number\n    if sum([my_matrix[i][j] for i in [0, 1, 2] for j in [0, 1, 2]])!= 15:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # TODO: Need to complete this function\n    # 1. Split the matrix into rows and columns\n    # 2. Sum the rows and columns and store them as two lists\n    # 3. Make sure that they are equal\n    # 4. Sum all the elements\n    # 5. Make sure that it equals the sum of the two diagonals\n    \n    # Solution 1\n    # return sum([sum(my_matrix[i]) for i in range(len(my_matrix))]) == sum([sum(my_matrix[j]) for j in range(len(my_matrix[0]))]) == sum([sum([my_matrix[i][j] for i in range(len(my_matrix))]) for j in range(len(my_matrix[0]))]) == sum([sum([my_matrix[i][j] for j in range(len(my_matrix[0]))]) for i in range(len(my_matrix))])\n    # Solution 2\n    # import numpy as np\n    # arr = np.array(my_matrix)\n    # row = np.sum(arr, axis=1)\n    # col = np.sum(arr, axis=0)\n    # d1 = np.sum(arr.diagonal())\n    # d2 = np.sum(np.fliplr(arr).diagonal())\n    # return (row == col == d1 == d2).all()\n    # Solution 3\n    # Sum of the numbers in the diagonals\n    # sum_diagonals = (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    #                  + my_matrix[2][0] + my_matrix[1][1] + my_matrix[0][2])\n    # Sum of the numbers in the rows\n    # row_sums = [sum(row) for row in my_matrix]\n    # Sum of the numbers in the columns\n    # col_sums = [sum([my_matrix[j][i] for j in range(len(my_matrix))]) for i in range(len(my_matrix[0]))]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #Create a list of numbers for each of the rows\n    row_nums = []\n    col_nums = []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check the dimensions of the matrix\n    row_len = len(my_matrix)\n    col_len = len(my_matrix[0])\n    num_sum = 0\n    row_sum = 0\n    col_sum = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check for invalid matrix\n    if len(my_matrix) < 2:\n        return False\n    # Check if a 2x2 square is present\n    if len(my_matrix) == 2 and len(my_matrix[0]) == 2:\n        if my_matrix[0][0] + my_matrix[0][1] + my_matrix[1][0] + my_matrix[1][1] == 15:\n            return True\n    # Check if a 3x3 square is present\n    if len(my_matrix) == 3 and len(my_matrix[0]) == 3:\n        if my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] + my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2] == 15:\n            return True\n    # Check if a 4x4 square is present\n    if len(my_matrix) == 4 and len(my_matrix[0]) == 4:\n        if my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] + my_matrix[0][3] + my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] + my_matrix[1][3] + my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2] + my_matrix[2][3] + my_matrix[3][0] + my_matrix[3][1] + my_matrix[3][2] + my_matrix[3][3] == 15:\n            return True\n    # Check if a 5x5 square is present\n    if len(my_matrix) == 5 and len(my_matrix[0]) == 5:\n        if my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] + my_matrix[0][3] + my_matrix[0][4] + my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] + my_matrix[1][3] + my_matrix[1][4] + my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2] + my_matrix[2][3] + my_matrix[2][4] + my_matrix[3][0] + my_matrix[3][1] + my_matrix[3][2] + my_matrix[3][3] + my_matrix[3][4] + my_matrix[4][0] + my_matrix[4][1] + my_matrix[4][2] + my_matrix[4][3] + my_matrix[4][4] == 15:\n            return True\n    # Check if a 6x6 square is present\n    if len(my_matrix) == 6 and len(my_matrix[0]) == 6:\n        if my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] + my_matrix[0][3] + my_matrix[0][4] + my_matrix[0][5] + my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] + my_matrix[1][3] + my_matrix[1][4] + my_matrix[1][5] + my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2] + my_matrix[2][3] + my_matrix[2][4] + my_matrix[2][5] + my_matrix[3][0] + my_matrix[3][1] + my_matrix[3][2] + my_matrix[3][3] + my_matrix[3][4] + my_matrix[3][5] + my_matrix[4][0] + my_matrix[4][1] + my_matrix[4][2] + my_matrix[4][3] + my_matrix[4][4] + my_matrix[4][5] + my_matrix[5][0] + my_matrix[5][1] + my_matrix[5][2] + my_matrix[5][3] + my_matrix[5][4] + my_matrix[5][5] == 15:\n            return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_square = [\n    [8, 1, 6],\n    [3, 5, 7],\n    [4, 9, 2]\n    ]\n    if (my_matrix == magic_square):\n        print (\"magic square\")\n    else:\n        print (\"not a magic square\")\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if my_matrix[0][0] == my_matrix[1][0] and my_matrix[0][0] == my_matrix[2][0]:\n        for i in my_matrix:\n            if len(set(i)) == 1:\n                return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_sum = 0\n    counter = 0\n    while counter < len(my_matrix):\n        magic_sum = magic_sum + my_matrix[counter][counter]\n        counter = counter + 1\n    counter = 0\n    while counter < len(my_matrix):\n        magic_sum = magic_sum + my_matrix[counter][len(my_matrix) - counter - 1]\n        counter = counter + 1\n    counter = 0\n    print(magic_sum)\n    while counter < len(my_matrix) - 1:\n        magic_sum = magic_sum + my_matrix[len(my_matrix) - counter - 1][counter]\n        counter = counter + 1\n    counter = 0\n    while counter < len(my_matrix) - 1:\n        magic_sum = magic_sum + my_matrix[counter][counter]\n        counter = counter + 1\n    print(magic_sum)\n    if magic_sum == 900:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 0:\n        return False\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    row_sums = [0] * len(my_matrix)\n    column_sums = [0] * len(my_matrix[0])\n    for x in range(len(my_matrix)):\n        for y in range(len(my_matrix[x])):\n            row_sums[x] += my_matrix[x][y]\n            column_sums[y] += my_matrix[x][y]\n    for x in row_sums:\n        if x!= 0:\n            if x % len(my_matrix)!= 0:\n                return False\n    for x in column_sums:\n        if x!= 0:\n            if x % len(my_matrix)!= 0:\n                return False\n    s = 0\n    for x in range(len(my_matrix)):\n        for y in range(len(my_matrix)):\n            s += my_matrix[x][y]\n    if s % len(my_matrix)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if rows and columns are the same length\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_item = nums[0]\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n        if d[n] > max_freq:\n            max_freq = d[n]\n            max_item = n\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    hash_table = defaultdict(int)\n    for num in nums:\n        hash_table[num] += 1\n    max_frequency = -1\n    max_frequency_item = None\n    for key in hash_table:\n        if hash_table[key] > max_frequency:\n            max_frequency = hash_table[key]\n            max_frequency_item = key\n    return max_frequency_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_frequency = 0\n    max_item = None\n    for num, freq in d.items():\n        if freq > max_frequency:\n            max_item = num\n            max_frequency = freq\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    num_dict = defaultdict(int)\n    max_freq = 0\n    max_item = 0\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    for i in nums:\n        count_dict[i] += 1\n    return max(count_dict, key=count_dict.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    map = defaultdict(int)\n    for num in nums:\n        map[num] += 1\n    return max(map, key=map.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Take a list and return the item with maximum occurences.\n    d = defaultdict(int)\n    for i in nums:\n        d[i]+=1\n    return max(d, key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = 0\n    max_freq = 0\n    freq = defaultdict(int)\n    for i in nums:\n        freq[i] += 1\n        if freq[i]>max_freq:\n            max_freq = freq[i]\n            result = i\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    num_dict = defaultdict(int)\n    max_occur = 0\n    max_item = None\n    for num in nums:\n        num_dict[num] += 1\n        if num_dict[num] > max_occur:\n            max_occur = num_dict[num]\n            max_item = num\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_1 = defaultdict(int)\n    for i in nums:\n        dict_1[i] += 1\n    max_1 = max(dict_1.values())\n    return [i for i in dict_1 if dict_1[i] == max_1]\n    # return sorted(list(dict_1.values()), reverse=True)[0]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    string = list(str1)\n    i, j = 0, len(str1)-1\n    while i<j:\n        if string[i].lower() not in vowels:\n            i += 1\n        elif string[j].lower() not in vowels:\n            j -= 1\n        else:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n    return ''.join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in str1:\n        if i not in vowel:\n            str2 = str2+i\n        else:\n            str2 = str2+i\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = ['a','e','i','o','u']\n    vowel_string = \"\"\n    for char in str1:\n        if char in vowel:\n            vowel_string += char\n    rev_vowel_string = vowel_string[::-1]\n    final_string = \"\"\n    for char in str1:\n        if char in vowel:\n            final_string += rev_vowel_string[vowel.index(char)]\n        else:\n            final_string += char\n    return final_string\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str2 = \"\"\n    for char in str1:\n        if char in vowels:\n            str2 += char\n    for i in range(0, len(str1)):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set([\"a\",\"e\",\"i\",\"o\",\"u\"])\n    vowels_not_in_str = set([])\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n        else:\n            vowels_not_in_str.add(char)\n    rev_vowel_list = list(reversed(vowel_list))\n    return \"\".join(rev_vowel_list) + \"\".join(vowels_not_in_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    \n    vowel_string = \"\".join([s for s in str1 if s in vowels])\n    return vowel_string[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    reversed_str = [i for i in str1 if i not in vowels]\n    new_string = \"\".join(reversed_str)\n    reversed_vowels = [i for i in new_string if i in vowels]\n    return \"\".join(reversed_vowels) + new_string[len(reversed_vowels):]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_str = ''\n    str2 = list(str1)\n    for i in range(len(str2)):\n        if str2[i].lower() in vowels:\n            vowel_str += str2[i]\n            str2[i] = ''\n    return ''.join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    reverse_string = list(str1)\n    vowel_indexes = []\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowel_indexes.append(i)\n    for i in range(len(vowel_indexes)):\n        reverse_string[vowel_indexes[i]] = str1[vowel_indexes[-i-1]]\n    return ''.join(reverse_string)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"({})\".format(','.join(str(elem) for elem in tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s += str(i)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for i in tup1:\n        tup_str += str(i)\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1).replace(\"'\", \"\")\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '{}'.format(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ('('+str(tup1[0])+', '+str(tup1[1])+')')\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum = neg_sum + num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum = sum + num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    print(f\"Input: {nums}\")\n    result = sum([num for num in nums if num < 0])\n    print(f\"Sum: {result}\")\n    print()\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negatives = 0\n    for num in nums:\n        if num < 0:\n            sum_negatives += num\n    return sum_negatives\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_nums = 0\n    for num in nums:\n        if num < 0:\n            sum_nums += num\n    return sum_nums\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    negatives = 0\n    for i in nums:\n        if i < 0:\n            negatives += i\n    return negatives\n    \n    \ndef sum_negativenum_listcomprehension(nums):\n    '''\n    Using List Comprehensions, you can write the above function in just one line of code.\n    '''\n    return sum([i for i in nums if i < 0])\n    \n    \ndef sum_negativenum_inplace(nums):\n    '''\n    Inplace algorithm: \n        If the array is not sorted, this inplace algorithm is better\n        If the array is sorted, this algorithm does not work\n    '''\n    # There are two point, we need to store the current index\n    # When we have iterated to the end of the array, \n    # we know we have done it with no negatives\n    # so we can just return the sum\n    \n    n = len(nums)\n    index = 0\n    # we can use a while loop here because \n    # we have already checked that the array is sorted\n    while index < n:\n        if nums[index] < 0:\n            nums[index], nums[index + 1] = nums[index + 1], nums[index]\n            index += 1\n        else:\n            index += 1\n            \n    return sum([i for i in nums if i < 0])\n    \n    \ndef isPalindrome(s):\n    '''\n    Write a function which checks whether the given string is a palindrome.\n    '''\n    \n    return True if s[::-1] == s else False\n    \n    \ndef isPalindrome_chars(s):\n    '''\n    Using characters as stack, we only need to add\n    and remove characters one at a time.\n    '''\n    \n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        while s[left].isalnum() == False:\n            left += 1\n            if left >= right:\n                return True\n        while s[right].isalnum() == False:\n            right -= 1\n            if left >= right:\n                return True\n        \n        if s[left].lower()!= s[right].lower():\n            return False\n        else:\n            left += 1\n            right -= 1\n    \n    return True\n    \n    \ndef isPalindrome_stack(s):\n    '''\n    Using a stack\n    '''\n    stack = []\n    \n    for char in s:\n        if char.isalnum():\n            stack.append(char.lower())\n    \n    left = 0\n    right = len(stack) - 1\n    \n    while left < right:\n        if stack[left]!= stack[right]:\n            return False\n        else:\n            left += 1\n            right -= 1\n    \n    return True\n    \n    \ndef isPalindrome_stack_reverse(s):\n    '''\n    Using a stack to store the reversed characters\n    '''\n    stack = []\n    \n    for char in s:\n        if char.isalnum():\n            stack.append(char.lower())\n            \n    left = 0\n    right = len(stack) - 1\n    \n    while left < right:\n        if stack[left]!= stack[right]:\n            return False\n        else:\n            left += 1\n            right -= 1\n    \n    return True\n    \n    \ndef isPalindrome_stack_count(s):\n    '''\n    Using a stack to store the characters count\n    '''\n    stack = []\n    count = 0\n    \n    for char in s:\n        if char.isalnum():\n            stack.append(char.lower())\n            count += 1\n            \n    left = 0\n    right = len(stack) - 1\n    \n    while left < right:\n        if stack[left]!= stack[right]:\n            return False\n        else:\n            left += 1\n            right -= 1\n    \n    return True\n    \n    \ndef reverseString(s):\n    '''\n    Using two pointers\n    '''\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1\n        \n    return s\n    \n    \ndef reverseString_twoPointers(s):\n    '''\n    Two pointers:\n        We need to make sure that the index that we're pointing to \n        is the last index in the list\n    '''\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1\n    \n    return s\n    \n    \ndef reverseString_slicing(s):\n    '''\n    Slicing\n        We can use slicing to reverse a string\n        using the steps described below\n    '''\n    return s[::-1]\n    \n    \ndef isPalindrome_slicing(s):\n    '''\n    We can use slicing to reverse a string\n    using the steps described below\n    '''\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left].isalnum() == False:\n            left += 1\n        elif s[right].isalnum() == False:\n            right -= 1\n        else:\n            if s[left].lower()!= s[right].lower():\n                return False\n            else:\n                left += 1\n                right -= 1\n    return True\n    \n    \ndef strStr(haystack, needle):\n    '''\n    Use two pointers to find needle in haystack.\n    '''\n    left = 0\n    right = len(needle) - 1\n    \n    while left < len(haystack):\n        if haystack[left:right + 1] == needle:\n            return left\n        else:\n            left += 1\n            right = len(needle) - 1\n            \n    return -1\n    \n    \ndef strStr_KMP(haystack, needle):\n    '''\n    Use the Knuth-Morris-Pratt algorithm to find needle in haystack.\n    '''\n    \n    n = len(needle)\n    \n    # A table of shift amounts\n    shifts = [1] * (n + 1)\n    j = 0\n    for i in range(1, n):\n        while j > 0 and needle[i]!= needle[j]:\n            j = shifts[j - 1]\n            \n        if needle[i] == needle[j]:\n            j += 1\n            \n        shifts[i + 1] = j\n    \n    # Do the actual search\n    j = 0\n    for i in range(len(haystack)):\n        while j > 0 and needle[j]!= haystack[i]:\n            j = shifts[j - 1]\n        \n        if needle[j] == haystack[i]:\n            j += 1\n        \n        if j == n:\n            return i - n + 1\n    \n    return -1\n    \n    \ndef strStr_KMP_table(haystack, needle):\n    '''\n    KMP table\n    '''\n    n = len(needle)\n    \n    # create a table\n    table = [0] * n\n    \n    # create a table\n    j = 0\n    for i in range(1, n):\n        while j > 0 and needle[i]!= needle[j]:\n            j = table[j - 1]\n            \n        if needle[i] == needle[j]:\n            j += 1\n            table[i] = j\n            \n    # Do the actual search\n    j = 0\n    for i in range(len(haystack)):\n        while j > 0 and needle[j]!= haystack[i]:\n            j = table[j - 1]\n        \n        if needle[j] == haystack[i]:\n            j += 1\n        \n        if j == n:\n            return i - n + 1\n    \n    return -1\n    \n    \ndef strStr_KMP_table_exceed(haystack, needle):\n    '''\n    KMP table\n    '''\n    n = len(needle)\n    \n    # create a table\n    table = [0] * n\n    \n    # create a table\n    "
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += i\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = 0\n    for i in range(1,n):\n        x += i * (2*i-1)\n    return x\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # First digit is the value of (1 + 2 * sqrt(3) + 3 * sqrt(3) ** 2) / 2\n    # Second digit is the value of sqrt(3) * (1 + sqrt(3)) / 2\n    # The function should return hexagonal number\n    # Formula taken from https://en.wikipedia.org/wiki/Hexagonal_number\n    return int((1 + 2 * math.sqrt(3) + 3 * math.sqrt(3) ** 2) / 2 * math.sqrt(3) * (1 + math.sqrt(3)) / 2 * n)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \n    \ndef find_hexagonal_number(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return hexagonal_num(n)\n    \n    \ndef hexagonal_sum(n): \n    '''\n    Write a function to find the sum of the first n hexagonal numbers.\n    '''\n    return hexagonal_num(n) * (1 + n) * (1 / 2)\n    \n    \ndef find_total_hexagonal_sum(n):\n    '''\n    Write a function to find the sum of the first n hexagonal numbers.\n    '''\n    return hexagonal_sum(n)\n    \n    \ndef find_hexagonal_series_sum(n):\n    '''\n    Write a function to find the sum of the first n hexagonal numbers.\n    '''\n    return sum([hexagonal_num(i) for i in range(1, n + 1)])\n    \n    \ndef find_total_hexagonal_sum(n):\n    '''\n    Write a function to find the sum of the first n hexagonal numbers.\n    '''\n    return sum([hexagonal_sum(i) for i in range(1, n + 1)])\n    \n    \ndef print_hexagonal_series_sum(n):\n    '''\n    Write a function to find the sum of the first n hexagonal numbers.\n    '''\n    for i in range(1, n + 1):\n        print hexagonal_sum(i),\n    print\n    \n    \ndef print_total_hexagonal_sum(n):\n    '''\n    Write a function to find the sum of the first n hexagonal numbers.\n    '''\n    print hexagonal_num(n),\n    for i in range(1, n + 1):\n        print hexagonal_sum(i),\n    print\n    \n    \ndef find_next_hexagonal_number(n):\n    '''\n    Write a function to find the next hexagonal number after n.\n    '''\n    if n % 2 == 0:\n        return hexagonal_num(n) + n + 1\n    else:\n        return hexagonal_num(n + 1) + n + 2\n    \n    \ndef find_next_hexagonal_sum(n):\n    '''\n    Write a function to find the sum of the first n hexagonal numbers.\n    '''\n    return hexagonal_num(n) * (1 + n) * (1 / 2)\n    \n    \ndef find_next_hexagonal_number(n):\n    '''\n    Write a function to find the next hexagonal number after n.\n    '''\n    if n % 2 == 0:\n        return hexagonal_num(n) + n + 1\n    else:\n        return hexagonal_num(n + 1) + n + 2\n    \n    \ndef print_next_hexagonal_number(n):\n    '''\n    Write a function to print the next hexagonal number after n.\n    '''\n    print hexagonal_num(n)\n    \n    \ndef print_next_hexagonal_sum(n):\n    '''\n    Write a function to print the sum of the first n hexagonal numbers.\n    '''\n    print hexagonal_num(n) * (1 + n) * (1 / 2)\n    \n    \ndef is_pentagonal_number(n):\n    '''\n    Write a function to check if a given number is pentagonal or not.\n    '''\n    if (1 + (1 + 24 * n) ** 0.5) % 6 == 0:\n        return True\n    return False\n    \n    \ndef find_pentagonal_number(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int((1 + 24 * n) ** 0.5 - 1) / 6\n    \n    \ndef find_pentagonal_sum(n):\n    '''\n    Write a function to find the sum of the first n pentagonal numbers.\n    '''\n    return (1 + (1 + 24 * n) ** 0.5) / 3\n    \n    \ndef find_pentagonal_sum_efficient(n):\n    '''\n    Write a function to find the sum of the first n pentagonal numbers.\n    '''\n    return (1 + (1 + 24 * n) ** 0.5) / 6\n    \n    \ndef print_pentagonal_sum(n):\n    '''\n    Write a function to print the sum of the first n pentagonal numbers.\n    '''\n    print find_pentagonal_sum(n)\n    \n    \ndef print_pentagonal_number(n):\n    '''\n    Write a function to print the nth pentagonal number.\n    '''\n    print find_pentagonal_number(n)\n    \n    \ndef print_pentagonal_series_sum(n):\n    '''\n    Write a function to print the sum of the first n pentagonal numbers.\n    '''\n    for i in range(1, n + 1):\n        print find_pentagonal_sum(i),\n    print\n    \n    \ndef print_pentagonal_number_sum(n):\n    '''\n    Write a function to print the sum of the first n pentagonal numbers.\n    '''\n    print find_pentagonal_sum(n)\n    for i in range(1, n + 1):\n        print find_pentagonal_number(i),\n    print\n    \n    \ndef is_pentagonal_number(n):\n    '''\n    Write a function to check if a given number is pentagonal or not.\n    '''\n    if (1 + (1 + 24 * n) ** 0.5) % 6 == 0:\n        return True\n    return False\n    \n    \ndef pentagonal_num(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(((1 + 24 * n) ** 0.5) - 1) / 6\n    \n    \ndef find_pentagonal_number(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int((1 + 24 * n) ** 0.5 - 1) / 6\n    \n    \ndef pentagonal_sum(n): \n    '''\n    Write a function to find the sum of the first n pentagonal numbers.\n    '''\n    return (1 + (1 + 24 * n) ** 0.5) / 3\n    \n    \ndef find_pentagonal_sum(n):\n    '''\n    Write a function to find the sum of the first n pentagonal numbers.\n    '''\n    return (1 + (1 + 24 * n) ** 0.5) / 6\n    \n    \ndef find_pentagonal_sum_efficient(n):\n    '''\n    Write a function to find the sum of the first n pentagonal numbers.\n    '''\n    return (1 + (1 + 24 * n) ** 0.5) / 6\n    \n    \ndef find_pentagonal_number_sum(n):\n    '''\n    Write a function to find the sum of the first n pentagonal numbers.\n    '''\n    return pentagonal_num(n) * (1 + n) * (3 / 2)\n    \n    \ndef find_pentagonal_number_sum_efficient(n):\n    '''\n    Write a function to find the sum of the first n pentagonal numbers.\n    '''\n    return (1 + (1 + 24 * n) ** 0.5) / 6 * n\n    \n    \ndef find_pentagonal_number_sum_efficient_1(n):\n    '''\n    Write a function to find the sum of the first n pentagonal numbers.\n    '''\n    return (1 + (1 + 24 * n) ** 0.5) / 6 * n\n    \n    \ndef print_pentagonal_number_sum(n):\n    '''\n    Write a function to find the sum of the first n pentagonal numbers.\n    '''\n    print find_pentagonal_number_sum(n)\n    for i in range(1, n + 1):\n        print find_pentagonal_number_sum(i),\n    print\n    \n    \ndef print_pentagonal_number_sum_efficient(n):\n    '''\n    Write a function to find the sum of the first n pentagonal numbers.\n    '''\n    print find_pentagonal_number_sum_efficient(n)\n    for i in range"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    return int((n/2)*((1+sqrt(1+8*n))/4))\n    \n    \ndef hexagonal_num_sum(n):\n    '''\n    Write a function to find the sum of the first n hexagonal numbers.\n    '''\n    \n    total = 0\n    for x in range(1,n+1):\n        total += hexagonal_num(x)\n    \n    return total\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(2*n-1))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hex_n(n):\n        if n == 1:\n            return 1\n        return n * (2*n-1)\n    return hex_n(n)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #convert array to string so that we can use \"replace\" method\n    #and then convert it back to integer\n    nums = str(nums)\n    #replace all 0's with. and 1's with #\n    nums = nums.replace(\"0\",\".\")\n    nums = nums.replace(\"1\",\"#\")\n    #count the number of # and.\n    count_0 = nums.count(\"0\")\n    count_1 = nums.count(\"1\")\n    #ratio of 0 to 1 in nums\n    ratio = count_0/(count_0 + count_1)\n    #return ratio\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    elif nums[0] == 0:\n        return 1\n    else:\n        nums = sorted(nums)\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                count += 1\n        return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count=0\n    for num in nums:\n        if num == 0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nzeros = 0\n    nzcount = 0\n    for num in nums:\n        if num == 0:\n            nzeros+=1\n        else:\n            nzcount+=1\n    return nzeros/nzcount\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # nums = list(nums)\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count_zero += 1\n    return count_zero/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_nonzero = 0\n    for i in nums:\n        if i == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    return count_zero / count_nonzero\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the sum of powers of 2 \n    sum = 0\n    while (n > 0): \n        # Check if n is a power of 2 \n        if (n % 2 == 0): \n            # Increment the sum by 1 \n            sum = sum + 1\n            # Divide the number by 2 \n            n = n // 2\n        else: \n            # Return false if the number is not a power of 2 \n            return False\n    return sum\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return sum([1 for i in range(n) if n&i==i])>1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    while n:\n        if n & 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Time complexity: O(logn) \n    # Space complexity: O(1)\n    if n == 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def isPower_Of_Two(n):\n        if n == 0:\n            return False\n        while n!= 1:\n            if n % 2!= 0:\n                return False\n            n /= 2\n        return True\n    if n < 0:\n        return False\n    if n == 0:\n        return False\n    while n:\n        if isPower_Of_Two(n):\n            return True\n        n -= 1\n    return False\n    \nprint(is_Sum_Of_Powers_Of_Two(0))\nprint(is_Sum_Of_Powers_Of_Two(5))\nprint(is_Sum_Of_Powers_Of_Two(6))\nprint(is_Sum_Of_Powers_Of_Two(7))\nprint(is_Sum_Of_Powers_Of_Two(8))\nprint(is_Sum_Of_Powers_Of_Two(9))\nprint(is_Sum_Of_Powers_Of_Two(10))\nprint(is_Sum_Of_Powers_Of_Two(12))\nprint(is_Sum_Of_Powers_Of_Two(14))\nprint(is_Sum_Of_Powers_Of_Two(16))\nprint(is_Sum_Of_Powers_Of_Two(18))\nprint(is_Sum_Of_Powers_Of_Two(20))\nprint(is_Sum_Of_Powers_Of_Two(23))\nprint(is_Sum_Of_Powers_Of_Two(25))\nprint(is_Sum_Of_Powers_Of_Two(27))\nprint(is_Sum_Of_Powers_Of_Two(30))\nprint(is_Sum_Of_Powers_Of_Two(100))\nprint(is_Sum_Of_Powers_Of_Two(126))\nprint(is_Sum_Of_Powers_Of_Two(128))\nprint(is_Sum_Of_Powers_Of_Two(130))\nprint(is_Sum_Of_Powers_Of_Two(255))\nprint(is_Sum_Of_Powers_Of_Two(256))\nprint(is_Sum_Of_Powers_Of_Two(257))\nprint(is_Sum_Of_Powers_Of_Two(1000))\nprint(is_Sum_Of_Powers_Of_Two(1024))\nprint(is_Sum_Of_Powers_Of_Two(2048))\nprint(is_Sum_Of_Powers_Of_Two(4096))\nprint(is_Sum_Of_Powers_Of_Two(8192))\nprint(is_Sum_Of_Powers_Of_Two(16384))\nprint(is_Sum_Of_Powers_Of_Two(32768))\nprint(is_Sum_Of_Powers_Of_Two(65536))\nprint(is_Sum_Of_Powers_Of_Two(131072))\nprint(is_Sum_Of_Powers_Of_Two(262144))\nprint(is_Sum_Of_Powers_Of_Two(524288))\nprint(is_Sum_Of_Powers_Of_Two(1048576))\nprint(is_Sum_Of_Powers_Of_Two(2097152))\nprint(is_Sum_Of_Powers_Of_Two(4194304))\nprint(is_Sum_Of_Powers_Of_Two(8388608))\nprint(is_Sum_Of_Powers_Of_Two(16777216))\nprint(is_Sum_Of_Powers_Of_Two(33554432))\nprint(is_Sum_Of_Powers_Of_Two(67108864))\nprint(is_Sum_Of_Powers_Of_Two(134217728))\nprint(is_Sum_Of_Powers_Of_Two(268435456))\nprint(is_Sum_Of_Powers_Of_Two(536870912))\nprint(is_Sum_Of_Powers_Of_Two(1010101010))\nprint(is_Sum_Of_Powers_Of_Two(3735897320))\nprint(is_Sum_Of_Powers_Of_Two(6764610160))\nprint(is_Sum_Of_Powers_Of_Two(13117919200))\nprint(is_Sum_Of_Powers_Of_Two(26470409664))\nprint(is_Sum_Of_Powers_Of_Two(52776558144))\nprint(is_Sum_Of_Powers_Of_Two(1099511627776))\nprint(is_Sum_Of_Powers_Of_Two(2199023255552))\nprint(is_Sum_Of_Powers_Of_Two(4398046511104))\nprint(is_Sum_Of_Powers_Of_Two(8796093022208))\nprint(is_Sum_Of_Powers_Of_Two(17592186044416))\nprint(is_Sum_Of_Powers_Of_Two(35184372088832))\nprint(is_Sum_Of_Powers_Of_Two(70368744177664))\nprint(is_Sum_Of_Powers_Of_Two(140737488355328))\nprint(is_Sum_Of_Powers_Of_Two(281474976710656))\nprint(is_Sum_Of_Powers_Of_Two(562949953421312))\nprint(is_Sum_Of_Powers_Of_Two(1125899906842624))\nprint(is_Sum_Of_Powers_Of_Two(2251799813685248))\nprint(is_Sum_Of_Powers_Of_Two(4503599627370496))\nprint(is_Sum_Of_Powers_Of_Two(9007199254740992))\nprint(is_Sum_Of_Powers_Of_Two(18014398509481984))\nprint(is_Sum_Of_Powers_Of_Two(36028797018963968))\nprint(is_Sum_Of_Powers_Of_Two(72057594037927936))\nprint(is_Sum_Of_Powers_Of_Two(144115188075855872))\nprint(is_Sum_Of_Powers_Of_Two(288230376151711744))\nprint(is_Sum_Of_Powers_Of_Two(576460752303423488))\nprint(is_Sum_Of_Powers_Of_Two(1152921504606846976))\nprint(is_Sum_Of_Powers_Of_Two(2305843009213693952))\nprint(is_Sum_Of_Powers_Of_Two(4611686018427387904))\nprint(is_Sum_Of_Powers_Of_Two(9223372036854775808))\nprint(is_Sum_Of_Powers_Of_Two(18446744073709551616))\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    flag = False\n    sqrt_n = int(math.sqrt(n))\n    for i in range(1, sqrt_n+1):\n        if (n%i == 0):\n            flag = True\n            break\n        else:\n            flag = False\n    if flag == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    t = 1\n    while t <= n:\n        if t == 2 or t == 3 or t == 5 or t == 7:\n            t *= t\n            if t <= n:\n                n -= t\n            else:\n                return False\n        else:\n            t *= t\n            if t <= n:\n                n -= t\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n:\n        if (n%2==0):\n            print(\"Yes\")\n            return True\n        else:\n            n=n//2\n    print(\"No\")\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n == 0 or (n & (n - 1)) == 0 and n!= 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0): \n        return True\n    if ((n & (n - 1)) == 0): \n        return True\n    return False\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2*math.pi*r\n    print(c)\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * r * math.pi\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            yield item\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output = []\n    for sublist in test_list:\n        for item in sublist:\n            output.append(item)\n    return output\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    final_list = []\n    for i in test_list:\n        for j in i:\n            final_list.append(j)\n    return final_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for elem in test_list:\n        if type(elem) == list:\n            result.update(extract_singly(elem))\n        else:\n            result.add(elem)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return test_list[0]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    extracted_singly = list(itertools.chain(*test_list))\n    return extracted_singly\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([j for sublist in test_list for j in sublist])\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # hint: a list can be created from an existing list using the same list() constructor\n    flat_list = []\n    for elem in test_list:\n        if isinstance(elem, list):\n            flat_list += elem\n        else:\n            flat_list.append(elem)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if test_list == []:\n        return []\n    elif not isinstance(test_list[0], list):\n        return test_list\n    else:\n        return sum(extract_singly(test_list[0]), extract_singly(test_list[1:]))\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    print(\"Testing extract singly function on: \", test_list)\n    print(\"The original list is: \", test_list)\n    for item in test_list:\n        if type(item) == list:\n            test_list.extend(item)\n    print(\"The flatten list is: \", test_list)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #keep track of the sorted list\n    sorted_list = []\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    pancake_length = len(nums)\n    while pancake_length > 0:\n        cur_max = 0\n        for i, v in enumerate(nums[:pancake_length]):\n            if v > cur_max:\n                cur_max = v\n                cur_max_index = i\n        nums = nums[:cur_max_index + 1] + nums[cur_max_index + 1:][::-1] + nums[cur_max_index + 1:]\n        pancake_length -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    # if nums[0] >= nums[-1]:\n    #     return nums\n    nums = nums[::-1]\n    for i in range(len(nums)):\n        if nums[i] == i+1:\n            continue\n        j = 0\n        while j < i:\n            if nums[j] > nums[i]:\n                nums = nums[:j] + nums[i:i+1] + nums[j:i] + nums[i+1:]\n                # nums = nums[:i] + nums[j:j+1] + nums[i:i+1] + nums[i+1:]\n            j += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for size in range(len(nums), 1, -1):\n        for i in range(size):\n            if i + size < len(nums):\n                if nums[i] < nums[i + size]:\n                    nums[i], nums[i + size] = nums[i + size], nums[i]\n                    if i > 0:\n                        for k in range(i + 1):\n                            nums[k], nums[k + 1] = nums[k + 1], nums[k]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    for i in range(len(nums)//2):\n        nums = move_top(nums, i, len(nums)-1)\n        nums = flip(nums, 0, i)\n        nums = flip(nums, i+1, len(nums)-1)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # traverse the array from the beginning\n    for i in range(n - 1):\n        # Find the minimum element in remaining unsorted array\n        min_idx = i\n        for j in range(i + 1, n):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        # swap the found minimum element with\n        # the first element\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n        # reverse the subarray for all elements\n        # from i to n-1\n        reverse(nums, i + 1, n - 1)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # corner cases:\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    i = n - 1\n    while i > 0:\n        j = 0\n        while j < i:\n            if nums[j] > nums[i]:\n                nums[j], nums[i] = nums[i], nums[j]\n            j += 1\n        i -= 1\n        for j in range(n - 1, i, -1):\n            nums[j], nums[i] = nums[i], nums[j]\n            i -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        #print(nums)\n        max_index = nums.index(max(nums[:i+1]))\n        #print(max_index)\n        if max_index!= i:\n            if max_index!= 0:\n                nums = nums[max_index::-1] + nums[max_index+1:i+1][::-1] + nums[i+1:]\n            else:\n                nums = nums[max_index::-1] + nums[max_index+1:i+1] + nums[i+1:]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, i):\n        '''\n        Flips the numbers array from the first\n        element to the i index to the last\n        element.\n        '''\n        t = nums[0:i]\n        t.reverse()\n        nums[0:i] = t\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n    \ndef count_all_same(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in all three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if list1[i]==list2[j]==list3[k]:\n                    count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    list1=list(set(list1))\n    list2=list(set(list2))\n    list3=list(set(list3))\n    for x in list1:\n        for y in list2:\n            for z in list3:\n                if x==y and x==z:\n                    count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    cnt = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    if len(list1)==len(list2) and len(list2)==len(list3):\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list2[i]==list3[i]:\n                count+=1\n        print(count)\n    else:\n        print(\"Lists are not of same size\")\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    len_list1 = len(list1)\n    len_list2 = len(list2)\n    len_list3 = len(list3)\n    if len_list1 == len_list2 == len_list3:\n        count = 0\n        for i in range(len_list1):\n            if list1[i] == list2[i] == list3[i]:\n                count += 1\n        print(count)\n    else:\n        print(\"You need to input three list with the same length.\")\n        \ncount_samepair([1,2,3,4,5], [2,4,6,8,10], [1,3,5,7,9])\ncount_samepair([1,2,3,4,5], [2,4,6,8,10], [1,3,5,7,9,10])\ncount_samepair([1,2,3,4,5], [2,4,6,8,10], [1,3,5,7,9,10,11])\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1)!= len(list2) or len(list2)!= len(list3) or len(list1)!= len(list3):\n        raise ValueError(\"ERROR: List lengths are not equal!\")\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    num_list1 = len(list1)\n    num_list2 = len(list2)\n    num_list3 = len(list3)\n    \n    if num_list1!= num_list2 or num_list1!= num_list3 or num_list2!= num_list3:\n        print(\"Error: Number of items of each list does not match!\")\n    \n    else:\n        num_same = 0\n        for i in range(num_list1):\n            if list1[i] == list2[i] == list3[i]:\n                num_same += 1\n            \n        print(num_same)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = []\n    num = 0\n    for i in Input:\n        if type(i) == list:\n            l.append(i)\n            num +=1\n    return l, num\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([n for n in Input if isinstance(n, list)])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input)!= type(()):\n        print(\"Please enter a tuple.\")\n        return None\n    elif len(Input) == 0:\n        return 0\n    else:\n        return len([i for i in Input if type(i) == type(list())])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for lists in Input:\n        if isinstance(lists,list):\n            list_count = list_count + 1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count \n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # return len([x for x in Input if type(x) == list])\n    return len([x for x in Input if isinstance(x, list)])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # return the count of lists in the tuple\n    return len(Input)"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([i for i in Input if type(i) == list])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    # Create a empty list 'lists'\n    if isinstance(Input, tuple):\n        # Check if Input is tuple\n        for list in Input: \n            # Iterate through Input and check if each element is of type tuple\n            if isinstance(list, tuple):\n                # If yes, append to list 'lists'\n                lists.append(list)\n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #Input: (1, [2,3], 4)\n    #Output: 2\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # max_Diff = arr[0] - arr[1] \n    # for i in range(0, len(arr)): \n    #     for j in range(i + 1, len(arr)): \n    #         if (arr[i] - arr[j]) > max_Diff: \n    #             max_Diff = arr[i] - arr[j] \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # arr = [1, 3, 2, 2, 4]\n    # # max(arr) - min(arr)\n    # return 4 - 1\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # In python, the abs() function can be used to find the absolute value of a number\n    # For example, abs(-20) = 20\n    arr = list(map(int, arr))\n    max_diff = 0\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            max_diff = max(max_diff, abs(arr[i]-arr[j]))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Abs_Diff = -9999999999\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!=j:\n                absolute_diff = abs(arr[i] - arr[j])\n                if absolute_diff > max_Abs_Diff:\n                    max_Abs_Diff = absolute_diff\n    return max_Abs_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return max(arr[i+1] - arr[i] for i in range(len(arr)-1))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    a = arr\n    a.sort()\n    ans = a[-1] - a[0]\n    return ans\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_val = max(arr)\n    min_val = min(arr)\n    return max_val - min_val\n    "
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(arr) - min(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # n = len(arr) \n    # arr.sort() \n    # # print (arr) \n    # return arr[n-1] - arr[0] \n    return max(abs(arr[i]-arr[i+1]) for i in range(len(arr)-1))\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n+1):\n        y = n - x\n        if y < 0:\n            break\n        if a * x + b * y == n:\n            return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % 2 == 0:\n        return (int(n/2), 0)\n    \n    x = n-b\n    y = b-a\n    return (x, y)\n    \nif __name__ == '__main__':\n    assert find_solution(1, 3, 4) == (2, 1)\n    assert find_solution(1, 2, 4) == None\n    assert find_solution(1, 5, 8) == (4, 3)\n    assert find_solution(1, 7, 8) == None\n    assert find_solution(4, 4, 8) == (4, 0)\n    assert find_solution(6, 3, 12) == (3, 3)"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    if n == 0:\n        return 0, 0\n    if a == 0:\n        return None\n    if b == 0:\n        return n//a, 0\n    return n//a, n//b\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if a * i + b * j == n:\n                return (i, j)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solution = None\n    for i in range(n):\n        if a * i + b * n == 0:\n            solution = (i, n - i)\n            break\n    return solution\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if (n - x * a) % b == 0:\n            return (x, n // b)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # if the value of a is 0, return None, since it is not possible to have a zero in the x variable\n    if a == 0:\n        return None\n    # the solution of ax+by=n is given by x = b (mod a) and y = -a (mod b), since a and b are coprimes\n    else:\n        x = b % a\n        y = -a % b\n        # return the solution as a tuple\n        return x, y\n    \ndef gcd(a, b):\n    '''\n    Write a function that takes in two integers and returns their greatest common divisor using the euclidean algorithm.\n    '''\n    # if a is equal to 0, then the gcd is b, since 0 is the gcd of any other integer\n    if a == 0:\n        return b\n    # if b is equal to 0, then the gcd is a, since 0 is the gcd of any other integer\n    if b == 0:\n        return a\n    # if a is equal to -b, then the gcd is -b, since -a is also a factor of -b\n    if a == -b:\n        return -b\n    # if a is even, then use the equation a/2 + b/2 = r and repeat the process until a is 1, since if a is even, then a/2 = 0\n    if a % 2 == 0:\n        return gcd(a//2, b)\n    # if b is even, then use the equation b/2 + a/2 = r and repeat the process until b is 1, since if b is even, then b/2 = 0\n    if b % 2 == 0:\n        return gcd(a, b//2)\n    # if neither of these conditions are met, then a and b must be odd, so continue on with the process\n    else:\n        # return the gcd of a and b, using the recursive euclidean algorithm\n        return gcd(b, a % b)\n        \ndef multiplicative_inverse(a, b):\n    '''\n    Write a function that takes in two integers and returns their multiplicative inverse using the euclidean algorithm.\n    '''\n    # if a is equal to 0, then the multiplicative inverse is None, since 0 does not have a multiplicative inverse\n    if a == 0:\n        return None\n    # if b is equal to 0, then the multiplicative inverse is 0, since 0 does not have a multiplicative inverse\n    if b == 0:\n        return 0\n    # if a is equal to -b, then the multiplicative inverse is -1, since -a is also a factor of -b\n    if a == -b:\n        return -1\n    # if a is even, then use the equation a/2 + b/2 = r and repeat the process until a is 1, since if a is even, then a/2 = 0\n    if a % 2 == 0:\n        return multiplicative_inverse(a//2, b)\n    # if b is even, then use the equation b/2 + a/2 = r and repeat the process until b is 1, since if b is even, then b/2 = 0\n    if b % 2 == 0:\n        return multiplicative_inverse(a, b//2)\n    # if neither of these conditions are met, then a and b must be odd, so continue on with the process\n    else:\n        # return the multiplicative inverse of a and b, using the recursive euclidean algorithm\n        return multiplicative_inverse(b, a % b)\n    \ndef square_and_multiply(base, exponent, modulus):\n    '''\n    Write a function that implements the squaring and modular exponentiation algorithm.\n    '''\n    # if the exponent is 0, then the exponent is 0 (mod n)\n    if exponent == 0:\n        return 1\n    # if the exponent is 1, then the result is just the base (mod n)\n    if exponent == 1:\n        return base\n    # if the base is 1, then the result is 1 (mod n)\n    if base == 1:\n        return 1\n    # if the exponent is even, then use the equation base^(exponent/2) = base^(exponent/2)^2 (mod n)\n    if exponent % 2 == 0:\n        return square_and_multiply(base, exponent//2, modulus)**2 % modulus\n    # if the exponent is odd, then use the equation base^((exponent-1)/2) = base^((exponent-1)/2) * base^2 (mod n)\n    if exponent % 2 == 1:\n        return square_and_multiply(base, exponent-1, modulus) * square_and_multiply(base, 2, modulus) % modulus\n    \ndef find_multiplicative_inverses(arr):\n    '''\n    Write a function that takes in a list of integers and returns a list of their multiplicative inverses using the euclidean algorithm.\n    '''\n    # initialize an empty array to store the multiplicative inverses of each element\n    inverses = []\n    # loop through the list of integers\n    for i in arr:\n        # initialize a variable to store the multiplicative inverse\n        inverse = 0\n        # if the integer is equal to 0, then the multiplicative inverse is None\n        if i == 0:\n            inverses.append(None)\n            continue\n        # find the multiplicative inverse of the integer\n        inverse = multiplicative_inverse(i, arr[0])\n        # if the multiplicative inverse is None, then the multiplicative inverse is -1\n        if inverse is None:\n            inverses.append(-1)\n        # if the multiplicative inverse is equal to -1, then the multiplicative inverse is -1\n        if inverse == -1:\n            inverses.append(-1)\n        # otherwise, the multiplicative inverse is the integer\n        else:\n            inverses.append(inverse)\n    # return the list of multiplicative inverses\n    return inverses\n    \ndef find_cubic_roots(a, b, c, d):\n    '''\n    Write a function that takes in a tuple of the form (a, b, c, d) and returns a list of the cubic roots as tuples, or returns None if no cubic roots exist.\n    '''\n    # if the a is equal to 0 and the b is equal to 0, then there is no cubic root\n    if a == 0 and b == 0:\n        return None\n    # if the discriminant is negative, then there are no cubic roots\n    if b**2 - 4 * a * c < 0:\n        return None\n    # if the discriminant is 0, then there is only one cubic root\n    if b**2 - 4 * a * c == 0:\n        return [(-b + (b**2 - 4 * a * c)**0.5)/(2 * a)]\n    # if the discriminant is positive, then there are 3 cubic roots\n    if b**2 - 4 * a * c >= 0:\n        return [(b - (b**2 - 4 * a * c)**0.5)/(2 * a), (b + (b**2 - 4 * a * c)**0.5)/(2 * a)]\n    \ndef find_square_roots(a, b, c):\n    '''\n    Write a function that takes in a tuple of the form (a, b, c) and returns a list of the square roots of the quadratic equation as tuples, or returns None if no square roots exist.\n    '''\n    # if the b is equal to 0, then there is no square root\n    if b == 0:\n        return None\n    # if the discriminant is negative, then there are no square roots\n    if b**2 - 4 * a * c < 0:\n        return None\n    # if the discriminant is 0, then there is only one square root\n    if b**2 - 4 * a * c == 0:\n        return [-b / (2 * a)]\n    # if the discriminant is positive, then there are two square roots\n    if b**2 - 4 * a * c >= 0:\n        return [(-b + (b**2 - 4 * a * c)**0.5) / (2 * a), (-b - (b**2 - 4 * a * c)**0.5) / (2 * a)]\n    \ndef find_k_squared_roots(a, b, c, d, e, f):\n    '''\n    Write "
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # The solution set is non-empty iff gcd(a,n) divides n.\n    if n % gcd(a, n)!= 0:\n        return None\n    # x = n/a\n    x = n // a\n    # y = a*x\n    y = a * x\n    # We know that gcd(a,n) divides n. So we know that y must be a multiple of a.\n    if y % a!= 0:\n        return None\n    # We know that gcd(a,n) divides n. So we know that x must be a multiple of a.\n    if x % a!= 0:\n        return None\n    # We know that gcd(a,n) divides n. So we know that y is a multiple of a.\n    # Therefore, y is a multiple of gcd(a,n)\n    # If we know that x is a multiple of gcd(a,n) then we can eliminate gcd(a,n) from the equation.\n    # a*x + b*y = n\n    # a*x + y = n\n    # a*x = n - b*y\n    # x = (n - b*y)/a\n    # We can solve for x using quadratic reciprocity.\n    # But to do this we must make sure that a is not divisible by b.\n    if b % a == 0:\n        return None\n    # So if we know that y is a multiple of gcd(a,n) then we can eliminate gcd(a,n) from the equation.\n    # We know that y is a multiple of gcd(a,n). So we can divide the equation by b and get an equation for x.\n    # We can then use quadratic reciprocity to get a solution for x.\n    # But to do this we must make sure that a is not divisible by b.\n    # So we have to make sure that gcd(a,n) is not a multiple of b.\n    # Now we know that gcd(a,n) is not a multiple of b.\n    # So we have to make sure that a is not divisible by b.\n    # a must be a multiple of b. So we have to make sure that a is not divisible by b.\n    if b % a == 0:\n        return None\n    # So we know that gcd(a,n) is not a multiple of b. So we have to make sure that a is not divisible by b.\n    # Since gcd(a,n) is not a multiple of b we know that gcd(a,n) is a multiple of a.\n    # So we can divide the equation by a and get an equation for y.\n    # Now we have two equations for y and x. We can use quadratic reciprocity to solve for y.\n    # x = (n - b*y)/a\n    # y = (n - a*x)/b\n    # x = (n - y)/a\n    # y = (n - a*x)/b\n    # We can factor n as n = ay + bx to get:\n    # x = (n - b*y)/a\n    # y = (n - a*x)/b\n    # x = (n/a - b*y/a)/b\n    # y = (n/a - a*x/a)/b\n    # y = (n/a - a*x/a)/b\n    # y = (n/a - a*x/a) + 0 = n/a - a*x/a\n    # y = n/a - a*x/a\n    # y = n - a*x\n    # Therefore, x must be a multiple of a and y must be a multiple of b.\n    x = (n // a) + 0\n    y = n - (a * x)\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return x, y\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #list1 = [2,3,5,6,7,8,9]\n    #list2 = [4,5,6,7,8,9,10]\n    new_list = list(set(list1) - set(list2))\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list2:\n        while x in list1:\n            list1.remove(x)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [item for item in list1 if item not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for el in list2:\n        while el in list1:\n            list1.remove(el)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    i = 0\n    while i < len(list1):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n        else:\n            i+=1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list2 = [str(i) for i in list2]\n    list1 = [str(i) for i in list1]\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    try:\n        return [item for item in list1 if item not in list2]\n    except:\n        return None\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    print(list2)\nremove_elements([1,2,3,4,5], [2,4])\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum = 0\n        for x in range(0, n//2 + 1):\n            sum += (n-2*x)\n        return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n**2)/2\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #print(n)\n    i = 0\n    somme = 0\n    while n - 2*i >= 0:\n        somme += (n - 2*i)\n        i += 1\n        #print(n, i, somme)\n    return somme\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(n//2):\n            sum += n - 2*i\n        return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n > 0:\n        return sum_series(n - 2) + n\n    else:\n        return n\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # sum = 0\n    # for i in range(0, n // 2 + 1):\n    #     sum += n - 2*i\n    # return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n-2) if n >= 2 else n\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def sum_i(n):\n        if n == 1:\n            return 1\n        return sum_i(n-1) + n\n    if n < 2:\n        return n\n    return sum_i(n-1) + n\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return round(s * l ** 2 / (4 * tan(pi / l)),2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print(\"Enter the length of each side of your polygon\")\n    s = float(input(\"Enter the length of each side of your polygon: \"))\n    l = int(input(\"Enter the number of sides of your polygon: \"))\n    a = (s**2)*(l**2)/(4*tan(pi/l))\n    print(\"The area of your polygon is\", a)\n    return\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l/2*(1/(tan(pi/n)))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l >= 2 and s >= 3:\n        a = ((s * l ** 2) / (4 * tan(pi/s))) / 100\n        return a\n    else:\n        raise ValueError('Invalid input!')\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l**2 / 4 * (1 / tan(pi / l))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if len(s) > 2 or len(s) == 0:\n        return None\n    else:\n        s.append(s[0])\n        return round((s[0] ** 2 * tan(pi / s[1])),2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2)*(tan(pi/l))/4\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s**2)/(4*tan(pi/l))\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return round(s*l*1/2, 1)\n    \ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return round(pi*r**2, 1)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # print(s, l)\n    # s=float(input(\"Enter the side:\"))\n    # l=float(input(\"Enter the number of sides:\"))\n    area = s*l/2\n    return area\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    assert n > 0, 'Enter a positive number!'\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            if n // i == i:\n                sum1 += i\n            else: \n                sum1 += i + (n // i)\n    for i in range(1, math.ceil(math.sqrt(n))):\n        if sum1 == n:\n            return True\n        else:\n            if n % i == 0:\n                if n // i == i:\n                    sum2 += i\n                else: \n                    sum2 += i + (n // i)\n    return sum1 == sum2\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # 1st solution\n    # return n/math.gcd(n, n) == n/math.gcd(n, n+1)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0 \n    for i in range(1,n//2+1): \n        if (n%i==0): \n            sum = sum + i \n    return sum \n    \ndef same_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same. \n    '''\n    for i in range(2,n//2+1): \n        if (n%i==0 and div_sum(n) == div_sum(n//i)): \n            return True \n    return False \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisors(n):\n        divisors_list = []\n        for i in range(1,n+1):\n            if n%i == 0:\n                divisors_list.append(i)\n        return divisors_list\n    def sum_divisors(n):\n        divisors_list = divisors(n)\n        return sum(divisors_list)\n    def sum_divisors_list(n):\n        divisors_list = divisors(n)\n        return sum_divisors(divisors_list)\n    def is_sum_divisors(n):\n        if sum_divisors_list(n) == sum_divisors_list(n-1):\n            return True\n        else: \n            return False\n    return is_sum_divisors(n)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total_sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            total_sum += i \n    if total_sum == n:\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1: \n        return False\n    sum1 = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            if n / i == i: \n                sum1 += i \n            else: \n                sum1 += (i + n/i) \n    return sum1 \n    \ndef diophantine(a, b, c): \n    '''\n    Find the unique positive integer solutions to the equation a*x**2 + b*y**2 = c.\n    '''\n    x = 0\n    y = 0\n    if div_sum(c) == div_sum(b): \n        x = (-b)**0.5 / (2*a) \n        y = x * x\n    elif div_sum(c) == div_sum(a): \n        y = (-a)**0.5 / (2*b)\n        x = y * y\n    else: \n        return None\n    return (x, y)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = 1 \n    sum1 = 0 \n    sum2 = 0 \n    while div <= math.sqrt(n): \n        if n % div == 0: \n            sum1 += div \n            sum2 += n / div \n        div += 1 \n    if sum1 == sum2: \n        return True \n    else: \n        return False \ndef to_digits(n):\n    '''\n    Write a function that converts a number to a list of digits. For instance, to_digits(123) should return [1, 2, 3].\n    '''\n    l = []\n    while n > 0: \n        l.append(n % 10)\n        n = n // 10\n    return l[::-1]\ndef palindrome(s): \n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    for i in range(0, len(s) // 2): \n        if s[i]!= s[len(s) - 1 - i]: \n            return False \n    return True \ndef find_triples(l): \n    '''\n    Write a function that takes a list of positive integers and returns the sum of all possible sets of three of the integers.\n    '''\n    if len(l) < 3: \n        return 0 \n    else: \n        return sum([l[i] * l[j] * l[k] for i in range(0, len(l) - 2) for j in range(i + 1, len(l) - 1) for k in range(j + 1, len(l))]) \ndef prime_factors(n): \n    '''\n    Write a function that takes a positive integer and returns all the prime factors of that number. For instance, prime_factors(12) should return 2, 2, 3.\n    '''\n    l = [] \n    for i in range(1, n + 1): \n        if n % i == 0 and n!= i: \n            l.append(i) \n    return l \ndef count_bobs(n): \n    '''\n    Write a function that takes a positive integer n and returns the number of ways to write n as the sum of three positive integers.\n    '''\n    return count_bobs_helper(n, 0, 0, 0) \ndef count_bobs_helper(n, i, j, k): \n    if n < 0: \n        return 0 \n    elif n == 0: \n        return 1 \n    elif n == i + j + k: \n        return 1 + count_bobs_helper(n - i - j - k, i, j, k) + count_bobs_helper(n, i, j, k) + count_bobs_helper(n - i - j, i, j, k) \n    else: \n        return 0 + count_bobs_helper(n - i - j, i, j, k) + count_bobs_helper(n, i, j, k) + count_bobs_helper(n - i, i, j, k) \ndef hailstone_sequence(n): \n    '''\n    Write a function that takes in a positive integer and outputs the length of the longest sequence of integers starting from 1 and ending at that number. In the sequence, each integer is the product of all the integers that appear before it in the sequence. For instance, if the input is 4, then your function should return 3 because 1, 2, 4, and 8 are all in the sequence, and so are 1, 2, 4 and 8.\n    '''\n    count = 1 \n    l = [] \n    if n == 1: \n        return 1 \n    elif n % 2 == 0: \n        l.append(n) \n        return 1 + hailstone_sequence(n // 2) \n    else: \n        l.append(n) \n        return 1 + hailstone_sequence((n * 3) + 1) \ndef reverse_number(n): \n    '''\n    Write a function to reverse a number.\n    '''\n    r = 0 \n    while n > 0: \n        r = r * 10 + n % 10 \n        n = n // 10 \n    return r \ndef is_triangle(n): \n    '''\n    Write a function to determine if a given integer n is a triangle number.\n    '''\n    if n == 0: \n        return False \n    elif n == 1: \n        return True \n    elif n == 2: \n        return True \n    elif n == 3: \n        return False \n    else: \n        return is_triangle(n - 1) + is_triangle(n - 2) \ndef is_triangle_helper(n): \n    '''\n    Write a function to determine if a given integer is a triangle number.\n    '''\n    if n < 1: \n        return False \n    elif n == 1: \n        return True \n    elif n == 2: \n        return True \n    elif n == 3: \n        return False \n    else: \n        return is_triangle_helper(n - 1) + is_triangle_helper(n - 2) \ndef binary_search(l, x): \n    '''\n    Write a binary search function. The function will take in a list and a number, and return the index of the number in the list. If the number is not in the list, return -1. \n    '''\n    if len(l) == 0: \n        return -1 \n    elif len(l) == 1: \n        if l[0] == x: \n            return 0 \n        else: \n            return -1 \n    else: \n        p = len(l) // 2\n        if l[p] == x: \n            return p \n        elif l[p] > x: \n            return binary_search(l[:p], x) \n        else: \n            return binary_search(l[p:], x) \ndef binary_search_helper(l, x, low, high): \n    '''\n    Write a binary search function. The function will take in a list and a number, and return the index of the number in the list. If the number is not in the list, return -1.\n    '''\n    if len(l) == 0: \n        return -1 \n    elif len(l) == 1: \n        if l[0] == x: \n            return 0 \n        else: \n            return -1 \n    else: \n        p = (high + low) // 2\n        if l[p] == x: \n            return p \n        elif l[p] > x: \n            return binary_search_helper(l, x, low, p - 1) \n        else: \n            return binary_search_helper(l, x, p + 1, high) \ndef binary_search_helper_ex(l, x, low, high): \n    '''\n    Write a binary search function. The function will take in a list and a number, and return the index of the number in the list. If the number is not in the list, return -1.\n    '''\n    if len(l) == 0: \n        return -1 \n    elif len(l) == 1: \n        if l[0] == x: \n            return 0 \n        else: \n            return -1 \n    else: \n        p = (high + low) // 2\n        if l[p] == x: \n            return p \n        elif l[p] > x: \n            return binary_search_helper_ex(l, x, low, p - 1) \n        else: \n            return binary_search_helper_ex(l, x, p + 1, high) \ndef lcm(a, b): \n    '''\n    Write a function that takes in two positive integers and returns their least common multiple.\n    '''\n    return a * b // gcd(a, b)\ndef gcd(a, b): \n    '''\n    Write a function that takes in two positive integers and returns their greatest common divisor.\n    '''\n    while a % b!= 0: \n        a, b = b, "
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n): \n        if n % i == 0: \n            sum1 = sum1 + i\n    for j in range(1,int(n/2)+1): \n        if sum1 == j: \n            sum2 = sum2 + j\n    return sum1 == sum2\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_1 = 0\n    sum_2 = 0\n    for i in range(1, int(n ** 0.5) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                sum_1 += i\n            else: \n                sum_1 += i + n // i \n    for j in range(1, int(n ** 0.5) + 1): \n        if (sum_1 == sum_2): \n            return True\n        elif (sum_1 < sum_2): \n            break\n        if (n % j == 0): \n            if (n / j == j): \n                sum_2 += j\n            else: \n                sum_2 += j + n // j \n    return False \n    \n    \ndef pythag(a, b): \n    '''\n    Write a function to determine whether a, b are Pythagorean.\n    '''\n    return (a ** 2 + b ** 2) == (a * a + b * b)\n    \n    \ndef diff_pythag(a, b): \n    '''\n    Write a function to determine whether a, b can be written as a difference of Pythagorean numbers.\n    '''\n    s = set() \n    for i in range(2, min(a, b) + 1): \n        if (a % i == 0 and b % i == 0): \n            s.add(i) \n            s.add(a // i) \n            s.add(b // i) \n    return len(s) == 3 \n    \n    \ndef is_prime(n): \n    '''\n    Write a function to determine whether an integer is prime.\n    '''\n    if (n <= 1): \n        return False\n    elif (n <= 3): \n        return True \n    elif (n % 2 == 0 or n % 3 == 0): \n        return False\n    else: \n        i = 5\n        while (i * i <= n): \n            if (n % i == 0 or n % (i + 2) == 0): \n                return False\n            i = i + 6\n        return True \n    \n    \ndef power_of_2(n): \n    '''\n    Write a function to determine whether a number is power of two.\n    '''\n    return ((n & (n - 1)) == 0) and n > 0 \n    \n    \ndef prime_factors(n): \n    '''\n    Write a function to determine prime factors of a number.\n    '''\n    l = [] \n    while (n % 2 == 0): \n        l.append(2) \n        n = n // 2 \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while (n % i == 0): \n            l.append(i) \n            n = n // i \n    if (n > 2): \n        l.append(n) \n    return l \n    \n    \ndef triple_sum(a, b, c): \n    '''\n    Write a function to determine whether the sum of three integers is a power of three.\n    '''\n    if (a > b + c): \n        return False \n    else: \n        return a ** 3 == b ** 3 + c ** 3 \n    \n    \ndef number_of_divisors(n): \n    '''\n    Write a function to determine the number of divisors of an integer.\n    '''\n    s = 0 \n    for i in range(1, int(n ** 0.5) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                s += 1 \n            else: \n                s += 2 \n    return s \n    \n    \ndef is_prime_sum(n): \n    '''\n    Write a function to determine whether the sum of the prime factors of an integer is equal to the integer.\n    '''\n    s = 0 \n    l = prime_factors(n) \n    for i in l: \n        s += i \n    return s == n \n    \n    \ndef perfect_square(n): \n    '''\n    Write a function to determine whether an integer is a perfect square.\n    '''\n    return int(math.sqrt(n)) == math.sqrt(n) \n    \n    \ndef triangle_numbers(n): \n    '''\n    Write a function to determine whether an integer is the sum of three consecutive triangle numbers.\n    '''\n    return (n == 1 + (1 + 8 * n) ** 0.5) \n    \n    \ndef remove_digits(n): \n    '''\n    Write a function to determine whether a number can be represented as a sum of its digits.\n    '''\n    s = str(n) \n    for i in range(len(s)): \n        n = n - int(s[i]) \n        if (n == 0): \n            return True \n    return False \n    \n    \ndef is_leap_year(n): \n    '''\n    Write a function to determine whether a year is a leap year.\n    '''\n    return n % 4 == 0 and (n % 100!= 0 or n % 400 == 0) \n    \n    \ndef sum_digits(n): \n    '''\n    Write a function to determine the sum of digits of a number.\n    '''\n    s = 0 \n    while (n > 0): \n        s += n % 10 \n        n //= 10 \n    return s \n    \n    \ndef sum_digits_using_sum(n): \n    '''\n    Write a function to determine the sum of digits of a number using sum.\n    '''\n    return sum(map(int, str(n))) \n    \n    \ndef digital_root(n): \n    '''\n    Write a function to determine the digital root of a number.\n    '''\n    while (n > 9): \n        n = sum_digits(n) \n    return n \n    \n    \ndef digital_root_sum(n): \n    '''\n    Write a function to determine the sum of the digital roots of a number.\n    '''\n    s = 0 \n    while (n > 9): \n        n = sum_digits(n) \n        s += n \n    return s \n    \n    \ndef is_strict_ratio(a, b): \n    '''\n    Write a function to determine whether the sum of digits of two numbers is the same as the product of digits of the difference of these numbers.\n    '''\n    return sum_digits(a) == sum_digits(b) and sum_digits(a * b) == sum_digits(abs(a - b)) \n    \n    \ndef sum_of_digits_prod_of_digits_diff(n): \n    '''\n    Write a function to determine whether the sum of the digits of a number is equal to the product of its digits and the sum of the digits of the difference of these numbers.\n    '''\n    return sum_digits(n) == sum_digits(n * (10 ** (len(str(n)) - 1))) - sum_digits((n * (10 ** (len(str(n)) - 1)) - n)) \n    \n    \ndef find_triangle(n): \n    '''\n    Write a function to determine whether an integer is the sum of three consecutive triangle numbers.\n    '''\n    s = 0 \n    for i in range(1, n): \n        if (i * (i + 1) / 2 == n): \n            s += i \n            return s \n            \n    \ndef is_antipalindrome(n): \n    '''\n    Write a function to determine whether an integer is an antipalindrome.\n    '''\n    s = str(n) \n    for i in range(len(s) // 2): \n        if (s[i]!= s[-(i + 1)]): \n            return False \n    return True \n    \n    \ndef is_palindrome(n): \n    '''\n    Write a function to determine whether an integer is a palindrome.\n    '''\n    return str(n) == str(n)[::-1"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if(str1[i] >= \"a\" and str1[i] <= \"z\"):\n            count += 1\n        elif(str1[i] >= \"A\" and str1[i] <= \"Z\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower() \n    char_dict = {}\n    for i in range(len(str1)): \n        if str1[i] not in char_dict: \n            char_dict[str1[i]] = 1\n        else: \n            char_dict[str1[i]] += 1\n    count = 0\n    for i in range(len(str1)): \n        if ord(str1[i]) - 96 == i: \n            count += char_dict[str1[i]]\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i-1].lower() and str1[i]!='':\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize a dictionary\n    dict = {}\n    # Initialize the counter\n    counter = 0\n    # Loop through the string\n    for i in str1:\n        # If the character is in the dictionary, add the character to the count\n        if i in dict:\n            counter += 1\n        # If the character is not in the dictionary, add the character to the dictionary with the count of 1\n        else:\n            dict[i] = 1\n    # Return the total number of characters\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n    alpha = string.ascii_lowercase\n    count = 0\n    for char in alpha:\n        if char in str1:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a')+i):\n            count += 1\n    return count\nprint(count_char_position('Aniket'))\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1=str1.lower()\n    d={}\n    for i in str1:\n        if i in d.keys():\n            d[i]+=1\n        else:\n            d[i]=1\n    print(d)\n    count=0\n    for i in d.keys():\n        if(d[i]>1):\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n    temp_str = str1.upper() \n    alphabet = list(string.ascii_uppercase)\n    ctr = 0\n    for i in range(len(temp_str)):\n        if temp_str[i] in alphabet:\n            ctr+=1\n            if ctr == temp_str.count(temp_str[i]):\n                print(ctr)\n                break\n            else:\n                continue\n    return ctr\n    \ncount_char_position('aBcde') #0\ncount_char_position('aBcdeAbcde') #1\ncount_char_position('aBcdeAbcdeBcdE') #2\ncount_char_position('12345ABCde') #5\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    dict = {}\n    for i in str1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    count = 0\n    for i in dict:\n        if dict[i] == 1:\n            count += 1\n    return count\nprint(count_char_position(\"AaBbCc\"))\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_pos = 0\n    for i in str1:\n        if i == \" \":\n            char_pos+=1\n        elif (ord(i) >= 65 and ord(i) <= 90) or (ord(i) >= 97 and ord(i) <= 122):\n            char_pos+=1\n    print(char_pos)\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def xor(x, y): return x^y\n    dic = {}\n    for x in A:\n        if x in dic:\n            dic[x] += 1\n        else:\n            dic[x] = 1\n    res = 0\n    for key in dic.keys():\n        if xor(key, key) % 2 == 0 and dic[key] >= 2:\n            res += dic[key] * (dic[key] - 1) / 2\n    return int(res)\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # xor the whole list to see if the result is even\n    # then xor the list with the value and count the number of ones\n    return len(list(filter(lambda x: (x ^ A[0] == 0) == (A[0] ^ A[1] == 0), map(lambda x: x ^ A[0], A[1:]))))\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j and A[i]^A[j]%2 == 0:\n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if xor(A[i],A[j]) % 2 == 0:\n                count += 1\n    return count\n    \ndef xor(a,b):\n    return a^b\n    \n    \ndef main():\n    # input1 = [0,1,2,3,4,5,6,7,8]\n    input1 = [1,2,3,4,5,6,7,8]\n    input2 = find_even_pair(input1)\n    print('Count of pairs in list that xor to an even number: ', input2)\n    \nif __name__ == '__main__':\n    main()\n    "
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return sum([1 for x in A if x & 1 == 0]) // 2 if A else 0\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    num_pairs = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if xor(A[i], A[j]) % 2 == 0:\n                num_pairs += 1\n    return num_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    # The initial value for the number of pairs of even xor integers is 0.\n    count = 0\n    # For each pair of even integers in the list...\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            # If the xor of the two numbers is even...\n            if (A[i] ^ A[j]) % 2 == 0:\n                # Increment the number of pairs of even xor integers.\n                count = count + 1\n    # Return the number of pairs of even xor integers.\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    d = {}\n    for i in A:\n        if (i >> 1) not in d:\n            d[i >> 1] = 1\n        else:\n            d[i >> 1] += 1\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n==0 else 2**(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while (power < n): \n        power *= 2\n    return power \n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # If n is 0 or 1, return n \n    if n <= 0:\n        return n\n    # if n is power of 2, return n\n    if (n & (n-1) == 0):\n        return n\n    # otherwise, iterate until we find the nearest power of 2 greater than n\n    while (n & (n-1)):\n        n |= n >> 1\n    return n << 1\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**ceil(log(n, 2))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 1\n    \n    i = 1\n    while (2**i < n):\n        i += 1\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if (n == 0):\n        return 1\n    elif (n < 0):\n        return -1\n    else:\n        return int(2**math.ceil(math.log(n,2)))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        print(\"Value must be a positive integer.\")\n        return\n    return 1 if n == 0 else 2**((n - 1).bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n == 0: \n        return 1\n    while n!= 2: \n        n >>= 1\n    return n \n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0, len(a)): \n        if x == a[i]: \n            count += 1\n    return count\n  \ndef unique(a):\n    '''\n    Write a function to find the unique elements of a given list.\n    '''\n    uniq_list = []\n    for x in a:\n        if x not in uniq_list:\n            uniq_list.append(x)\n    return uniq_list\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for i in a:\n        if i == x:\n            counter = counter+1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.sort() \n    x = 0\n    for i in a: \n        if i == x: \n            x = x + 1\n    return x\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    for i in range(0, len(a)):\n        if x == a[i]:\n            return a.count(x)\n    return 0\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for x in list1[m : n]:\n        sum_list = sum_list + x\n    return sum_list\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m,n+1):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == 0:\n        return sum(list1[m:n])\n    elif m > 0 and n <= len(list1):\n        return sum_range_list(list1, m-1, n) + list1[m]\n    else:\n        return None\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])                                                                                                                                                                                                                        \n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        if m <= i <= n:\n            sum_list.append(list1[i])\n    return sum(sum_list)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    if m < len(list
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0:\n        raise IndexError(\"m cannot be negative.\")\n    if n < 0:\n        raise IndexError(\"n cannot be negative.\")\n    if m > len(list1) or n > len(list1):\n        raise IndexError(\"m or n is out of range.\")\n    if m > n:\n        raise IndexError(\"m cannot be greater than n.\")\n    return sum(list1[m:n])\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(\"the perimeter of the pentagon is:\")\n    perimeter = (a*5)\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to calculate the area of a regular pentagon from the length of its sides.\n    '''\n    print(\"the area of the pentagon is:\")\n    area = ((5*(a**2))/4)\n    return area\ndef circum_circle(a):\n    '''\n    Write a function to calculate the area of a circle from the radius of its circumference.\n    '''\n    print(\"the area of the circle is:\")\n    area = (math.pi*(a**2))\n    return area\ndef area_regular_polygon(num_sides, side_length):\n    '''\n    Write a function to calculate the area of a regular polygon from the number of sides and the length of a side.\n    '''\n    print(\"the area of the polygon is:\")\n    area = (num_sides * (side_length**2))/(4*math.tan(math.pi/num_sides))\n    return area\ndef perimeter_polygon(num_sides, side_length):\n    '''\n    Write a function to calculate the perimeter of a regular polygon from the number of sides and the length of a side.\n    '''\n    print(\"the perimeter of the polygon is:\")\n    perimeter = (num_sides * side_length)\n    return perimeter\ndef area_parallelogram(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram from the length of two of its sides.\n    '''\n    print(\"the area of the parallelogram is:\")\n    area = (a*b)\n    return area\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram from the length of two of its sides.\n    '''\n    print(\"the perimeter of the parallelogram is:\")\n    perimeter = (a+b)\n    return perimeter\ndef area_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle from the length of its sides.\n    '''\n    print(\"the area of the triangle is:\")\n    area = (0.5 * b * c)\n    return area\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to calculate the perimeter of a triangle from the length of its sides.\n    '''\n    print(\"the perimeter of the triangle is:\")\n    perimeter = (a+b+c)\n    return perimeter\ndef area_trapezoid(a,b,h):\n    '''\n    Write a function to calculate the area of a trapezoid from the length of its sides.\n    '''\n    print(\"the area of the trapezoid is:\")\n    area = ((0.5*a*b) + ((0.5*b*h) + (0.5*h*a)))\n    return area\ndef perimeter_trapezoid(a,b,h):\n    '''\n    Write a function to calculate the perimeter of a trapezoid from the length of its sides.\n    '''\n    print(\"the perimeter of the trapezoid is:\")\n    perimeter = (a+b+h)\n    return perimeter\ndef area_rhombus(a,b):\n    '''\n    Write a function to calculate the area of a rhombus from the length of its diagonals.\n    '''\n    print(\"the area of the rhombus is:\")\n    area = (0.5 * a * b)\n    return area\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to calculate the perimeter of a rhombus from the length of its diagonals.\n    '''\n    print(\"the perimeter of the rhombus is:\")\n    perimeter = (a+b)\n    return perimeter\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square from the length of its sides.\n    '''\n    print(\"the area of the square is:\")\n    area = (a**2)\n    return area\ndef perimeter_square(a):\n    '''\n    Write a function to calculate the perimeter of a square from the length of its sides.\n    '''\n    print(\"the perimeter of the square is:\")\n    perimeter = (a*4)\n    return perimeter\ndef area_cube(a):\n    '''\n    Write a function to calculate the area of a cube from the length of its sides.\n    '''\n    print(\"the area of the cube is:\")\n    area = (6 * (a**2))\n    return area\ndef perimeter_cube(a):\n    '''\n    Write a function to calculate the perimeter of a cube from the length of its sides.\n    '''\n    print(\"the perimeter of the cube is:\")\n    perimeter = (a*6)\n    return perimeter\ndef area_parallelepiped(a,b,c):\n    '''\n    Write a function to calculate the area of a parallelepiped from the length of its sides.\n    '''\n    print(\"the area of the parallelepiped is:\")\n    area = (2*(a*b + a*c + b*c))\n    return area\ndef perimeter_parallelepiped(a,b,c):\n    '''\n    Write a function to calculate the perimeter of a parallelepiped from the length of its sides.\n    '''\n    print(\"the perimeter of the parallelepiped is:\")\n    perimeter = (a+b+c)\n    return perimeter\ndef area_sphere(a):\n    '''\n    Write a function to calculate the area of a sphere from the radius of its surface.\n    '''\n    print(\"the area of the sphere is:\")\n    area = (4*(math.pi)*(a**2))\n    return area\ndef volume_sphere(a):\n    '''\n    Write a function to calculate the volume of a sphere from the radius of its surface.\n    '''\n    print(\"the volume of the sphere is:\")\n    volume = ((4/3)*(math.pi)*(a**3))\n    return volume\ndef area_cylinder(a,b):\n    '''\n    Write a function to calculate the area of a cylinder from the length of its circular base and circular height.\n    '''\n    print(\"the area of the cylinder is:\")\n    area = (2*(math.pi)*(a*b))\n    return area\ndef perimeter_cylinder(a,b):\n    '''\n    Write a function to calculate the perimeter of a cylinder from the length of its circular base and circular height.\n    '''\n    print(\"the perimeter of the cylinder is:\")\n    perimeter = (2*(math.pi)*(a+b))\n    return perimeter\ndef area_cone(a,b):\n    '''\n    Write a function to calculate the area of a cone from the length of its circular base and the height of the cone.\n    '''\n    print(\"the area of the cone is:\")\n    area = ((1/3)*(math.pi)*(a**2)) + ((1/2)*(math.pi)*(a*b))\n    return area\ndef volume_cone(a,b):\n    '''\n    Write a function to calculate the volume of a cone from the length of its circular base and the height of the cone.\n    '''\n    print(\"the volume of the cone is:\")\n    volume = ((1/3)*(math.pi)*(a**3)) + ((1/3)*(math.pi)*(a*b))\n    return volume\ndef area_pyramid(a,b):\n    '''\n    Write a function to calculate the area of a pyramid from the length of its base and the height of the pyramid.\n    '''\n    print(\"the area of the pyramid is:\")\n    area = ((1/2)*(a**2)) + ((1/2)*(b**2))\n    return area\ndef perimeter_pyramid(a,b):\n    '''\n    Write a function to calculate the perimeter of a pyramid from the length of its base and the height of the pyramid.\n    '''\n    print(\"the perimeter of the pyramid is:\")\n    perimeter = (a+b)\n    return perimeter\ndef area_triangular(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle from th"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\ndef hypotenuse_pentagon(a,b):\n    '''\n    Write a function to find the length of the hypotenuse of a right triangle with sides of length a and b\n    '''\n    return math.sqrt(a**2 + b**2)\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return a**2*math.sin(math.pi/5)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle from the radius.\n    '''\n    return math.pi*(r**2)\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from the lengths of its sides.\n    '''\n    return a*b\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a regular parallelogram from the lengths of its sides.\n    '''\n    return a*b\ndef area_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid from the lengths of its sides.\n    '''\n    return (a+b)/2*h\ndef area_triangle(a,b):\n    '''\n    Write a function to find the area of a regular triangle from the lengths of its sides.\n    '''\n    return a*b/2\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its side.\n    '''\n    return a**2\ndef area_circle_sector(r,angle):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    return r**2*angle/360\ndef area_circle_sector_apart(r,angle):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    return r**2*angle/360/2\ndef area_circle_sector_apart_incremental(r,angle):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    sum = 0\n    i = 0\n    while i <= angle:\n        sum += r**2*math.pi/360/2\n        i += math.pi*r**2*(angle-i)/360\n    return sum\ndef area_circle_sector_apart_incremental_n(r,angle,n):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    sum = 0\n    i = 0\n    while i <= angle:\n        sum += r**2*math.pi/360/2\n        i += math.pi*r**2*(angle-i)/360\n    return sum/n\ndef area_circle_sector_apart_incremental_n_n(r,angle,n,n2):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    sum = 0\n    i = 0\n    while i <= angle:\n        sum += r**2*math.pi/360/2\n        i += math.pi*r**2*(angle-i)/360\n    return sum/(n*n2)\ndef area_circle_sector_apart_incremental_n_n_n(r,angle,n,n2,n3):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    sum = 0\n    i = 0\n    while i <= angle:\n        sum += r**2*math.pi/360/2\n        i += math.pi*r**2*(angle-i)/360\n    return sum/(n*n2*n3)\ndef area_circle_sector_apart_incremental_n_n_n_n(r,angle,n,n2,n3,n4):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    sum = 0\n    i = 0\n    while i <= angle:\n        sum += r**2*math.pi/360/2\n        i += math.pi*r**2*(angle-i)/360\n    return sum/(n*n2*n3*n4)\ndef area_circle_sector_apart_incremental_n_n_n_n_n(r,angle,n,n2,n3,n4,n5):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    sum = 0\n    i = 0\n    while i <= angle:\n        sum += r**2*math.pi/360/2\n        i += math.pi*r**2*(angle-i)/360\n    return sum/(n*n2*n3*n4*n5)\ndef area_circle_sector_apart_incremental_n_n_n_n_n_n(r,angle,n,n2,n3,n4,n5,n6):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    sum = 0\n    i = 0\n    while i <= angle:\n        sum += r**2*math.pi/360/2\n        i += math.pi*r**2*(angle-i)/360\n    return sum/(n*n2*n3*n4*n5*n6)\ndef area_circle_sector_apart_incremental_n_n_n_n_n_n_n(r,angle,n,n2,n3,n4,n5,n6,n7):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    sum = 0\n    i = 0\n    while i <= angle:\n        sum += r**2*math.pi/360/2\n        i += math.pi*r**2*(angle-i)/360\n    return sum/(n*n2*n3*n4*n5*n6*n7)\ndef area_circle_sector_apart_incremental_n_n_n_n_n_n_n_n_n(r,angle,n,n2,n3,n4,n5,n6,n7,n8):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    sum = 0\n    i = 0\n    while i <= angle:\n        sum += r**2*math.pi/360/2\n        i += math.pi*r**2*(angle-i)/360\n    return sum/(n*n2*n3*n4*n5*n6*n7*n8)\ndef area_circle_sector_apart_incremental_n_n_n_n_n_n_n_n_n_n_n(r,angle,n,n2,n3,n4,n5,n6,n7,n8,n9):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    sum = 0\n    i = 0\n    while i <= angle:\n        sum += r**2*math.pi/360/2\n        i += math.pi*r**2*(angle-i)/360\n    return sum/(n*n2*n3*n4*n5*n6*n7*n8*n9)\ndef area_circle_sector_apart_incremental_n_n_n_n_n_n_n_n_n_n_n_n_n(r,angle,n,n2,n3,n4,n5,n6,n7,n8,n9,n10):\n    '''\n    Write a function to find the area of a circle sector from the radius and angle of the sector.\n    '''\n    sum = 0\n    i = 0\n    while i <= angle"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(math.sqrt(5)*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (5*a**2)/(4*math.tan(math.pi/5))\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(\"Given side length is: \" + str(a))\n    perimeter = 5*a\n    print(\"Perimeter is: \" + str(perimeter))\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(0, len(s)-3):\n        if s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s ='std'\n    count = 0\n    for c in s:\n        if c == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n    \ndef count_occurance_2(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+4] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = 0\n    for i in s:\n        if i == \"std\":\n            c+=1\n    return c\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    l = len(s)\n    n = 0\n    for i in range(l):\n        if s[i:i+3] =='std':\n            n += 1\n    return n\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s =='std':\n            return 1\n        else:\n            return 0\n    return count_occurance(s[1:]) + count_occurance(s[1:])\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #Your code here\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #use regex\n    #re.findall(r'std',s)\n    #return len(re.findall(r'std',s))\n    return len(re.findall('std',s))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for i in test_tuple:\n        type_list.append(type(i))\n    print(type_list)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple) == type((0, 0)):\n        tuple_len = len(test_tuple)\n        if tuple_len == 0:\n            return False\n        else:\n            tuple_type = type(test_tuple[0])\n            for item in test_tuple:\n                if tuple_type!= type(item):\n                    return False\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    t = tuple(test_tuple)\n    return type(t[0]) == type(t[1]) == type(t[2]) == type(t[3]) == type(t[4]) == type(t[5]) == type(t[6]) == type(t[7]) == type(t[8]) == type(t[9]) == type(t[10]) == type(t[11]) == type(t[12]) == type(t[13]) == type(t[14]) == type(t[15]) == type(t[16]) == type(t[17]) == type(t[18]) == type(t[19]) == type(t[20]) == type(t[21]) == type(t[22]) == type(t[23]) == type(t[24]) == type(t[25]) == type(t[26]) == type(t[27]) == type(t[28]) == type(t[29]) == type(t[30]) == type(t[31]) == type(t[32]) == type(t[33]) == type(t[34]) == type(t[35]) == type(t[36]) == type(t[37]) == type(t[38]) == type(t[39]) == type(t[40]) == type(t[41]) == type(t[42]) == type(t[43]) == type(t[44]) == type(t[45]) == type(t[46]) == type(t[47]) == type(t[48]) == type(t[49]) == type(t[50]) == type(t[51]) == type(t[52]) == type(t[53]) == type(t[54]) == type(t[55]) == type(t[56]) == type(t[57]) == type(t[58]) == type(t[59]) == type(t[60]) == type(t[61]) == type(t[62]) == type(t[63]) == type(t[64]) == type(t[65]) == type(t[66]) == type(t[67]) == type(t[68]) == type(t[69]) == type(t[70]) == type(t[71]) == type(t[72]) == type(t[73]) == type(t[74]) == type(t[75]) == type(t[76]) == type(t[77]) == type(t[78]) == type(t[79]) == type(t[80]) == type(t[81]) == type(t[82]) == type(t[83]) == type(t[84]) == type(t[85]) == type(t[86]) == type(t[87]) == type(t[88]) == type(t[89]) == type(t[90]) == type(t[91]) == type(t[92]) == type(t[93]) == type(t[94]) == type(t[95]) == type(t[96]) == type(t[97]) == type(t[98]) == type(t[99]) == type(t[100]) == type(t[101]) == type(t[102]) == type(t[103]) == type(t[104]) == type(t[105]) == type(t[106]) == type(t[107]) == type(t[108]) == type(t[109]) == type(t[110]) == type(t[111]) == type(t[112]) == type(t[113]) == type(t[114]) == type(t[115]) == type(t[116]) == type(t[117]) == type(t[118]) == type(t[119]) == type(t[120]) == type(t[121]) == type(t[122]) == type(t[123]) == type(t[124]) == type(t[125]) == type(t[126]) == type(t[127]) == type(t[128]) == type(t[129]) == type(t[130]) == type(t[131]) == type(t[132]) == type(t[133]) == type(t[134]) == type(t[135]) == type(t[136]) == type(t[137]) == type(t[138]) == type(t[139]) == type(t[140]) == type(t[141]) == type(t[142]) == type(t[143]) == type(t[144]) == type(t[145]) == type(t[146]) == type(t[147]) == type(t[148]) == type(t[149]) == type(t[150]) == type(t[151]) == type(t[152]) == type(t[153]) == type(t[154]) == type(t[155]) == type(t[156]) == type(t[157]) == type(t[158]) == type(t[159]) == type(t[160]) == type(t[161]) == type(t[162]) == type(t[163]) == type(t[164]) == type(t[165]) == type(t[166]) == type(t[167]) == type(t[168]) == type(t[169]) == type(t[170]) == type(t[171]) == type(t[172]) == type(t[173]) == type(t[174]) == type(t[175]) == type(t[176]) == type(t[177]) == type(t[178]) == type(t[179]) == type(t[180]) == type(t[181]) == type(t[182]) == type(t[183]) == type(t[184]) == type(t[185]) == type(t[186]) == type(t[187]) == type(t[188]) == type(t[189]) == type(t[190]) == type(t[191]) == type(t[192]) == type(t[193]) == type(t[194]) == type(t[195]) == type(t[196]) == type(t[197]) == type(t[198]) == type(t[199]) == type(t[200]) == type(t[201]) == type(t[202]) == type(t[203]) == type(t[204]) == type(t[205]) == type(t[206]) == type(t[207]) == type(t[208]) == type(t[209]) == type(t[210]) == type(t[211]) == type(t[212]) == type(t[213]) == type(t[214]) == type(t[215]) == type(t[216]) == type(t[217]) == type(t[218]) == type(t[219]) == type(t[220]) == type(t[221]) == type(t[222]) == type(t[223]) == type(t[224]) == type(t[225]) == type(t[226]) == type(t[227]) == type(t[228]) == type(t[229]) == type(t[230]) == type(t[231]) == type(t[232]) == type(t[233]) == type(t[234]) == type(t[235]) == type(t[236]) == type(t[237]) == type(t[238]) == type(t[239]) == type(t[240]) == type(t[241]) == type(t[242]) == type(t[243]) == type(t[244]) == type(t[245]) == type(t[246]) == type(t[247]) == type(t[248]) == type(t[249]) == type(t[250]) == type(t[251]) == type(t[252]) == type(t[253]) == type(t[254]) == type(t[255]) == type(t[256]) == type(t[257]) == type(t[258]) == type(t[259]) == type(t[260]) == type(t[261]) == type(t[262]) == type(t[263]) == type(t[264]) == type(t[265]) == type(t[266]) == type(t[267]) == type(t[268]) == type(t[269]) == type(t[270]) == type(t[271]) == type(t[272]) == type(t[273]) == type(t[274]) == type(t[275]) == type(t[276]) == type(t[277]) == type(t[278]) == type(t[279]) == type(t[280]) == type(t[281]) == type(t[282]) == type(t[283]) == type(t[284]) == typ"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # test_tuple = (1, \"abc\", \"abc\")\n    l = len(test_tuple)\n    if l <= 1:\n        return True\n    for i in range(l-1):\n        if type(test_tuple[i])!= type(test_tuple[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    datatype = type(test_list[0])\n    for i in range(1, len(test_list)):\n        if datatype!= type(test_list[i]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return test_tuple[0].__class__ == test_tuple[1].__class__ == test_tuple[2].__class__ == test_tuple[3].__class__ == test_tuple[4].__class__\n    \n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) < 2:\n        return 'Less than 2'\n    else:\n        if test_tuple[0] == type(test_tuple[1]):\n            for i in range(1,len(test_tuple)):\n                if test_tuple[i] == type(test_tuple[i+1]):\n                    pass\n                else:\n                    return 'Different'\n            return 'All same'\n        else:\n            return 'Different'\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        if len(test_tuple) > 0:\n            first_type = type(test_tuple[0])\n        else:\n            first_type = type(test_tuple)\n        for i in test_tuple:\n            if type(i)!= first_type:\n                return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # base case\n    if not test_tuple:\n        return True\n    \n    if len(test_tuple) == 1:\n        return True\n    \n    # recursive case\n    if type(test_tuple[0]) == type(test_tuple[1]):\n        return check_type(test_tuple[1:])\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x not in arr:\n        return False\n    if arr.count(x) > n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #return (arr.count(x) > n/2)\n    return x == arr[(n-1)//2]\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    curr_val = arr[0]\n    count = 0\n    for i in range(n):\n        if curr_val == x:\n            count += 1\n        if count > n/2:\n            return True\n        if arr[i]!= x:\n            curr_val = arr[i]\n            count = 0\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    counter = 0\n    for i in arr:\n        if i == x:\n            counter += 1\n    if counter > (n / 2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return is_majority_naive(arr, n, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n < 3:\n        return False\n    if n % 2 == 1:\n        i = n/2\n    else:\n        i = n//2\n    if arr[i] == x:\n        return True\n    elif arr[i] > x:\n        return is_majority(arr, i, x)\n    else:\n        return is_majority(arr, n - i, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 0:\n        return False\n    arr_count = dict()\n    for element in arr:\n        if element not in arr_count:\n            arr_count[element] = 1\n        else:\n            arr_count[element] += 1\n    print(arr_count)\n    for key, value in arr_count.items():\n        print(key, value)\n        if value >= n / 2:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # count = 0\n    # for i in arr:\n    #     if i == x:\n    #         count += 1\n    # if count > n/2:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    while (n): \n        set_bits += n & 1\n        n >>= 1\n    return set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # for i in bin(n):\n    #     if i == '1':\n    #         return int(i)\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Initialize result \n    count = 0\n    # Traverse all bits \n    while (n): \n        count += n & 1\n        n >>= 1\n    # Return count \n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    def count_Set_Bits_rec(n): \n        '''\n        Write a recursive python function to count the number of set bits (binary digits with value 1) in a given number.\n        '''\n        if n == 0: \n            return 0\n        return (n & 1) + count_Set_Bits_rec(n >> 1) \n    \n    def count_Set_Bits_iter(n): \n        '''\n        Write a iterative python function to count the number of set bits (binary digits with value 1) in a given number.\n        '''\n        count = 0\n        while n: \n            count += n & 1\n            n >>= 1\n        return count\n    \n    return count_Set_Bits_iter(n)\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n    \n    \ndef count_Set_Bits_In_List(L): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given list.\n    '''\n    count = 0\n    for n in L:\n        count += count_Set_Bits(n)\n    return count\n    \n    \ndef count_Set_Bits_In_List_UpTo_K(L, k): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given list up to the kth element.\n    '''\n    count = 0\n    for n in L[:k]:\n        count += count_Set_Bits(n)\n    return count\n    \n    \ndef count_Set_Bits_In_List_UpTo_K_With_Bit_Operations(L, k): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given list up to the kth element.\n    '''\n    count = 0\n    i = 0\n    while i < k:\n        count += count_Set_Bits(L[i])\n        i += 1\n    return count\n    \n    \ndef binary_List_To_Decimal(L): \n    '''\n    Write a python function to convert a list of binary digits to a decimal number.\n    '''\n    n = 0\n    for i in range(len(L)): \n        n += L[i] * (2**i)\n    return n\n    \n    \ndef binary_List_To_Decimal_With_Bit_Operations(L): \n    '''\n    Write a python function to convert a list of binary digits to a decimal number.\n    '''\n    n = 0\n    for i in L: \n        n += i * (2**(len(L)-1-i))\n    return n\n    \n    \ndef convert_To_Binary_List(n): \n    '''\n    Write a python function to convert a decimal number to a list of binary digits.\n    '''\n    L = []\n    while n > 0: \n        L.append(n % 2)\n        n //= 2\n    L.reverse()\n    return L\n    \n    \ndef convert_To_Binary_List_With_Bit_Operations(n): \n    '''\n    Write a python function to convert a decimal number to a list of binary digits.\n    '''\n    if n == 0: \n        return [0]\n    L = []\n    while n > 0: \n        L.append(n % 2)\n        n //= 2\n    return L\n    \n    \ndef convert_To_Binary_String(n): \n    '''\n    Write a python function to convert a decimal number to a binary string.\n    '''\n    return ''.join([str(i) for i in convert_To_Binary_List(n)])\n    \n    \ndef convert_To_Binary_String_With_Bit_Operations(n): \n    '''\n    Write a python function to convert a decimal number to a binary string.\n    '''\n    return ''.join([str(i) for i in convert_To_Binary_List_With_Bit_Operations(n)])\n    \n    \ndef generate_Random_Integers(L, k): \n    '''\n    Write a python function to generate a list of k random integers from the range [0, N). \n    '''\n    import random\n    for i in range(k): \n        L.append(random.randint(0, N-1))\n        \n        \ndef generate_Random_Integers_With_Bit_Operations(L, k): \n    '''\n    Write a python function to generate a list of k random integers from the range [0, N). \n    '''\n    import random\n    for i in range(k): \n        L.append(random.randint(0, N-1))\n        \n        \ndef generate_Random_List_Of_Integers_From_Range(L, k): \n    '''\n    Write a python function to generate a list of k random integers from the range [0, N). \n    '''\n    import random\n    for i in range(k): \n        L.append(random.randint(0, N-1))\n        \n        \ndef generate_Random_List_Of_Integers_From_Range_With_Bit_Operations(L, k): \n    '''\n    Write a python function to generate a list of k random integers from the range [0, N). \n    '''\n    import random\n    for i in range(k): \n        L.append(random.randint(0, N-1))\n        \n        \ndef generate_Random_List_Of_Integers_With_Range(L, k, a, b): \n    '''\n    Write a python function to generate a list of k random integers from the range [a, b). \n    '''\n    import random\n    for i in range(k): \n        L.append(random.randint(a, b))\n        \n        \ndef generate_Random_List_Of_Integers_With_Range_With_Bit_Operations(L, k, a, b): \n    '''\n    Write a python function to generate a list of k random integers from the range [a, b). \n    '''\n    import random\n    for i in range(k): \n        L.append(random.randint(a, b))\n        \n        \ndef get_Kth_Bit(n, k): \n    '''\n    Write a python function to get the kth bit of a number.\n    '''\n    return ((n & (1 << (k - 1)))!= 0)\n    \n    \ndef get_Kth_Bit_With_Bit_Operations(n, k): \n    '''\n    Write a python function to get the kth bit of a number.\n    '''\n    return (n & (1 << (k - 1)))!= 0\n    \n    \ndef is_Bit_Set(n, k): \n    '''\n    Write a python function to check if a given bit is set in a number.\n    '''\n    return ((n & (1 << (k - 1)))!= 0)\n    \n    \ndef is_Bit_Set_With_Bit_Operations(n, k): \n    '''\n    Write a python function to check if a given bit is set in a number.\n    '''\n    return (n & (1 << (k - 1)))!= 0\n    \n    \ndef print_Binary_Representation(n): \n    '''\n    Write a python function to print the binary representation of a number.\n    '''\n    print(bin(n)[2:])\n    \n    \ndef print_Binary_Representation_With_Bit_Operations(n): \n    '''\n    Write a python function to print the binary representation of a number.\n    '''\n    print(bin(n)[2:])\n    \n    \ndef print_List_Of_Binary_Representation(L): \n    '''\n    Write a python function to print a list of binary representations of a list of numbers.\n    '''\n    for n in L: \n        print_Binary_Representation(n)\n        \n    \ndef print_List_Of_Binary_Representation_With_Bit_Operations(L): \n    '''\n    Write a python function to print a list of binary representations of a list of numbers.\n    '''\n    for n in L: \n        print_Binary_Representation_With_Bit_Operations(n)\n        \n        \ndef reverse_List(L): \n    '''\n    Write a python function to reverse a list of numbers.\n    '''\n    L.reverse()\n    \n    \ndef reverse_List_With_Bit_Operations(L): \n    '''\n    Write a python function to reverse a list of numbers.\n    '''\n    L[:] = L[::-1]\n    \n    \ndef swap_Bits(n, i, j): \n    '''\n    Write a python function to swap the i-th and j-th bits in a number.\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Use Brian Kernighan's Algorithm\n    # Initialize count\n    count = 0\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return [str[i] for i in range(0, len(str)) if i%2==0]\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string.append(str[i])\n    return \"\".join(new_string)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i%2==0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = str\n    for i in range(0, len(string)):\n        if i%2 == 0:\n            string = string.replace(string[i], \"\")\n    return string\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result_str += str[i]\n    return result_str\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_list = []\n    for index,value in enumerate(str):\n        if index % 2 == 0:\n            new_list.append(value)\n    return ''.join(new_list)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a if (a < b) else b\n    minimum = minimum if (minimum < c) else c\n    print(\"The minimum of three numbers is:\", minimum)\n    \ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    maximum = a if (a > b) else b\n    maximum = maximum if (maximum > c) else c\n    print(\"The maximum of three numbers is:\", maximum)\n    \ndef print_three_number(a,b,c):\n    '''\n    Write a function to print three numbers a,b,c.\n    '''\n    print(\"Numbers a,b,c are:\", a, b, c)\n    \ndef add_two_numbers(a,b):\n    '''\n    Write a function to add two numbers.\n    '''\n    print(\"Numbers a and b are:\", a, b)\n    sum = a + b\n    print(\"Sum of the numbers is:\", sum)\n    \ndef divide_two_numbers(a,b):\n    '''\n    Write a function to divide two numbers.\n    '''\n    print(\"Numbers a and b are:\", a, b)\n    quotient = a / b\n    print(\"Quotient of the numbers is:\", quotient)\n    \ndef multiply_two_numbers(a,b):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    print(\"Numbers a and b are:\", a, b)\n    product = a * b\n    print(\"Product of the numbers is:\", product)\n    \ndef subtract_two_numbers(a,b):\n    '''\n    Write a function to subtract two numbers.\n    '''\n    print(\"Numbers a and b are:\", a, b)\n    difference = a - b\n    print(\"Difference of the numbers is:\", difference)\n    \ndef exponents(a,b):\n    '''\n    Write a function to do exponentiation of two numbers.\n    '''\n    print(\"Numbers a and b are:\", a, b)\n    a = pow(a,b)\n    print(\"a^b is:\", a)\n    \ndef floor_division(a,b):\n    '''\n    Write a function to do floor division of two numbers.\n    '''\n    print(\"Numbers a and b are:\", a, b)\n    a = a // b\n    print(\"a//b is:\", a)\n    \ndef modulus(a,b):\n    '''\n    Write a function to do modulus of two numbers.\n    '''\n    print(\"Numbers a and b are:\", a, b)\n    a = a % b\n    print(\"a % b is:\", a)\n    \ndef modulus_remainder(a,b):\n    '''\n    Write a function to find remainder of two numbers.\n    '''\n    print(\"Numbers a and b are:\", a, b)\n    remainder = a % b\n    print(\"Remainder of the numbers is:\", remainder)\n    \ndef main():\n    print(\"Welcome to my functions!\")\n    print(\"Menu\")\n    print(\"1. Min of three\")\n    print(\"2. Max of three\")\n    print(\"3. Print three numbers\")\n    print(\"4. Add two numbers\")\n    print(\"5. Divide two numbers\")\n    print(\"6. Multiply two numbers\")\n    print(\"7. Subtract two numbers\")\n    print(\"8. Exponents\")\n    print(\"9. Floor Division\")\n    print(\"10. Modulus\")\n    print(\"11. Modulus Remainder\")\n    print(\"12. Exit\")\n    \n    while True:\n        choice = input(\"Enter your choice:\")\n        if choice == \"1\":\n            a = input(\"Enter first number:\")\n            b = input(\"Enter second number:\")\n            c = input(\"Enter third number:\")\n            min_of_three(a,b,c)\n        elif choice == \"2\":\n            a = input(\"Enter first number:\")\n            b = input(\"Enter second number:\")\n            c = input(\"Enter third number:\")\n            max_of_three(a,b,c)\n        elif choice == \"3\":\n            a = input(\"Enter first number:\")\n            b = input(\"Enter second number:\")\n            c = input(\"Enter third number:\")\n            print_three_number(a,b,c)\n        elif choice == \"4\":\n            a = input(\"Enter first number:\")\n            b = input(\"Enter second number:\")\n            add_two_numbers(a,b)\n        elif choice == \"5\":\n            a = input(\"Enter first number:\")\n            b = input(\"Enter second number:\")\n            divide_two_numbers(a,b)\n        elif choice == \"6\":\n            a = input(\"Enter first number:\")\n            b = input(\"Enter second number:\")\n            multiply_two_numbers(a,b)\n        elif choice == \"7\":\n            a = input(\"Enter first number:\")\n            b = input(\"Enter second number:\")\n            subtract_two_numbers(a,b)\n        elif choice == \"8\":\n            a = input(\"Enter first number:\")\n            b = input(\"Enter second number:\")\n            exponents(a,b)\n        elif choice == \"9\":\n            a = input(\"Enter first number:\")\n            b = input(\"Enter second number:\")\n            floor_division(a,b)\n        elif choice == \"10\":\n            a = input(\"Enter first number:\")\n            b = input(\"Enter second number:\")\n            modulus(a,b)\n        elif choice == \"11\":\n            a = input(\"Enter first number:\")\n            b = input(\"Enter second number:\")\n            modulus_remainder(a,b)\n        elif choice == \"12\":\n            exit()\n        else:\n            print(\"Wrong choice!\")\n            \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    elif b < a and b < c: \n        return b\n    else: \n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            print(a)\n    else:\n        if b<c:\n            print(b)\n        else:\n            print(c)\n    \n    return None\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        print(a)\n    elif b < a and b < c:\n        print(b)\n    else:\n        print(c)\n    return\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min=a if a<b else b\n    min=min if min<c else c\n    return min\ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    max=a if a>b else b\n    max=max if max>c else c\n    return max\ndef product_of_three(a,b,c): \n    '''\n    Write a function to find product of three numbers.\n    '''\n    pro=a*b if a*b>c else c\n    return pro\ndef median_of_three(a,b,c): \n    '''\n    Write a function to find median of three numbers.\n    '''\n    if a>b and a>c:\n        if b>c:\n            med=(b+c)/2\n            return med\n        else:\n            med=(a+c)/2\n            return med\n    if b>a and b>c:\n        if a>c:\n            med=(a+c)/2\n            return med\n        else:\n            med=(b+c)/2\n            return med\n    if c>a and c>b:\n        if a>b:\n            med=(a+b)/2\n            return med\n        else:\n            med=(c+b)/2\n            return med\na=int(input('Enter the value of a: '))\nb=int(input('Enter the value of b: '))\nc=int(input('Enter the value of c: '))\nprint('min: ',min_of_three(a,b,c))\nprint('max: ',max_of_three(a,b,c))\nprint('pro: ',product_of_three(a,b,c))\nprint('med: ',median_of_three(a,b,c))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = a\n    if b < min: \n        min = b\n    if c < min: \n        min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return c\n        else:\n            return b\n    else:\n        if a < c:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            print(a)\n    else:\n        if b<c:\n            print(b)\n        else:\n            print(c)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    return (2**n)-1  & ~ (((2**r)-1) ^ ((2**l)-1))\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = ((2**n)-1)\n    if (n<l) | (n>r):\n        print(\"Invalid Range\")\n    else:\n        for i in range(l,r+1):\n            if (n&i):\n                print(\"Not Set\")\n                break\n        else:\n            print(\"Set\")\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the answer\n    ans = 1\n    # Store the MSB\n    msb = 0\n    while(n):\n        msb = n & 1\n        n = n >> 1\n    if (msb == 0):\n        return(0)\n    # Store the lower and upper ranges\n    lower_range = l\n    upper_range = l + 1\n    # For each bit in the range\n    while(upper_range <= r):\n        # Update the answer\n        ans &= msb\n        # Update the range\n        upper_range = upper_range << 1\n        # Check if the next bit is set\n        if(upper_range <= r):\n            # Update the answer\n            ans &= msb\n            # Update the range\n            upper_range = upper_range << 1\n    # Check if the answer is zero\n    return(ans)\n    "
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Your code here\n    for i in range(l,r):\n        if ~(1<<i) & n:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n & (1<<i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1 << n) - 1\n    mask = ~mask\n    if r > mask:\n        return 0\n    mask = ~(1 << (r + 1))\n    mask = mask & (mask << l)\n    return mask\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s = 0\n    mask = 1\n    for i in range(0,r-l):\n        if(mask & n):\n            s = 1\n        mask = mask << 1\n        if s == 0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    check=[]\n    for i in range(n):\n        check.append(bin(i)[2:].count('1')<=r)\n        check.append(bin(i)[2:].count('1')>=l)\n    return all(check)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # check whether bits are set\n    \n    if n & (1<<l) == 0:\n        return False\n    elif n & (1<<r) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    k = r - l + 1\n    if((k&(k - 1)) == 0):\n        \n        # Number of bits required for\n        # representation of k\n        s = 0\n        while (k):\n            s += 1\n            k >>= 1\n        if (n < l):\n            return False\n        s += 1\n        # s is the total number of bits\n        # required in the range [0, n]\n        # which are present in the range\n        # [l, r]\n        k = r - l + 1\n        for i in range(1, n - l + 1):\n            k >>= 1\n            k |= (1 << (s - 1)) - 1\n        return (k & n) == k;\n    else:\n        return False\n        \ndef logical_or_of_all_bits_in_the_range(n,l,r):\n    \n    # convert the l and r to binary\n    l_bin = bin(l)\n    r_bin = bin(r)\n    \n    # make a list of the ones\n    l_bin_list = list(l_bin)\n    r_bin_list = list(r_bin)\n    \n    # get the length of the list\n    length_of_l_bin_list = len(l_bin_list)\n    length_of_r_bin_list = len(r_bin_list)\n    \n    # make a list of zeros\n    result = [0]*length_of_l_bin_list\n    \n    # for each one in l_bin_list, if its corresponding bit\n    # in r_bin_list is zero, then it will be set to 1, otherwise\n    # the bit will be 0\n    for i in range(0, length_of_l_bin_list):\n        if(l_bin_list[i] == '1'):\n            if(r_bin_list[i] == '0'):\n                result[i] = '1'\n            else:\n                result[i] = '0'\n        else:\n            result[i] = '0'\n            \n    # result is a list of ones and zeros, convert it to a number\n    result_num = 0\n    for i in range(0, length_of_l_bin_list):\n        result_num = result_num + (int(result[i]) * (2 ** (length_of_l_bin_list - i - 1)))\n            \n    return result_num\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            while arr[i] < 0:\n                arr.append(arr.pop(i))\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Write your code here\n    for i in range(n):\n        while arr[i] < 0 and i < n - 1:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        if arr[start] < 0 and arr[end] >= 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n        elif arr[start] < 0 and arr[end] < 0:\n            start += 1\n        else:\n            end -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = len(arr)-1\n    for x in range(len(arr)-1):\n        if arr[x] < 0 and arr[x+1] < 0:\n            continue\n        if arr[x] > 0 and arr[x+1] > 0:\n            continue\n        if arr[x] < 0:\n            arr[x], arr[i] = arr[i], arr[x]\n            i += 1\n        if arr[x+1] < 0:\n            arr[x+1], arr[j] = arr[j], arr[x+1]\n            j -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n <= 0 or len(arr) < n:\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i, j = 0, 0\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        else:\n            i += 1\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #brute force O(n^2)\n    for i in range(n):\n        for j in range(i,n):\n            if arr[i] < 0 and arr[j] < 0 or arr[i] >= 0 and arr[j] >= 0:\n                arr[i],arr[j] = arr[j],arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # two pointers\n    # keep track of start and end\n    # if element is negative increment start and vice versa\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    index = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[index], arr[i] = arr[i], arr[index]\n            index += 1\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    j = -1\n    for i in range(n):\n        if (arr[i] < 0):\n            j += 1\n            arr[i], arr[j] = arr[j], arr[i]\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #create new string \n    new_str = \"\"\n    #traverse string \n    for letter in str1:\n        if(letter == \" \"):\n            new_str += char\n        else:\n            new_str += letter\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\") % char\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    print(str1.replace(\" \",\"\"+char))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s')\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for x in str1:\n        if x == \" \":\n            str1 = str1.replace(x,char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n    #write your code here\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\") %char\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    while n!=0:\n        list2.append(max(list1))\n        list1.remove(max(list1))\n        n-=1\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Solution:\n    n = min(n, len(list1))\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for i in range(n)]\nprint(larg_nnum([1,5,8,4,2,9,7],3))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #create a min heap\n    min_heap = []\n    #for loop to iterate over the list\n    for item in list1:\n        #create a tuple containing the item and its index\n        tup = (item,list1.index(item))\n        #if the heap is empty then append the tuple\n        if not min_heap:\n            heapq.heappush(min_heap,tup)\n            #if the heap isn't empty, then compare the tuple with the smallest one in the heap, and only if it is larger than the smallest, then push it to the heap\n        elif tup[0] > min_heap[0][0]:\n            heapq.heappush(min_heap,tup)\n        #after appending the tuple to the heap, pop it and compare it with the next smallest element and so on\n        while min_heap and min_heap[0][0] < tup[0]:\n            heapq.heappop(min_heap)\n    #return a list containing the n largest items\n    return [item[0] for item in min_heap]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list2=list1[-n:]\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    for i in range(n):\n        print(heapq.heappop(list1))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # your code here\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    result = []\n    for i in range(n):\n        heapq.heappush(result,list1[i])\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    if n > len(list1):\n        return list1\n    else:\n        for i in range(n):\n            heapq._heappush_max(list2,list1[i])\n        return list2\ndef larg_nnum_recur(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    if n == 0:\n        return list1\n    elif n > len(list1):\n        return list1\n    else:\n        for i in range(n):\n            list2.append(list1[i])\n        heapq.heapify(list2)\n        return list2\ndef sum_evens(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all even numbers in the list.\n    '''\n    list1_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            list1_sum += i\n    return list1_sum\ndef sum_evens_recur(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all even numbers in the list.\n    '''\n    list1_sum = 0\n    if len(list1) == 0:\n        return list1_sum\n    else:\n        if list1[0] % 2 == 0:\n            list1_sum += list1[0]\n        return list1_sum + sum_evens_recur(list1[1:])\ndef sum_evens_recur_bad(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all even numbers in the list.\n    '''\n    list1_sum = 0\n    if len(list1) == 0:\n        return list1_sum\n    else:\n        list1_sum += list1[0]\n        list1 = list1[1:]\n        return list1_sum + sum_evens_recur(list1)\ndef multiply_evens(list1):\n    '''\n    Write a function that takes in a list and returns a list of the products of all even numbers in the list.\n    '''\n    list1_prod = 1\n    list1_prod_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            list1_prod *= i\n    return list1_prod\ndef multiply_evens_recur(list1):\n    '''\n    Write a function that takes in a list and returns a list of the products of all even numbers in the list.\n    '''\n    list1_prod = 1\n    if len(list1) == 0:\n        return list1_prod\n    else:\n        if list1[0] % 2 == 0:\n            list1_prod *= list1[0]\n        return list1_prod * multiply_evens_recur(list1[1:])\ndef sum_odds(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all odd numbers in the list.\n    '''\n    list1_sum = 0\n    for i in list1:\n        if i % 2!= 0:\n            list1_sum += i\n    return list1_sum\ndef sum_evens_bad(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all even numbers in the list.\n    '''\n    list1_sum = 0\n    if len(list1) == 0:\n        return list1_sum\n    else:\n        if list1[0] % 2 == 0:\n            list1_sum += list1[0]\n        list1 = list1[1:]\n        return list1_sum + sum_evens_bad(list1)\ndef multiply_odds(list1):\n    '''\n    Write a function that takes in a list and returns a list of the products of all odd numbers in the list.\n    '''\n    list1_prod = 1\n    list1_prod_sum = 0\n    for i in list1:\n        if i % 2!= 0:\n            list1_prod *= i\n    return list1_prod\ndef multiply_odds_recur(list1):\n    '''\n    Write a function that takes in a list and returns a list of the products of all odd numbers in the list.\n    '''\n    list1_prod = 1\n    if len(list1) == 0:\n        return list1_prod\n    else:\n        if list1[0] % 2!= 0:\n            list1_prod *= list1[0]\n        return list1_prod * multiply_odds_recur(list1[1:])\ndef count_evens(list1):\n    '''\n    Write a function that takes in a list and returns a list of the number of even numbers in the list.\n    '''\n    list1_count = 0\n    for i in list1:\n        if i % 2 == 0:\n            list1_count += 1\n    return list1_count\ndef count_evens_recur(list1):\n    '''\n    Write a function that takes in a list and returns a list of the number of even numbers in the list.\n    '''\n    list1_count = 0\n    if len(list1) == 0:\n        return list1_count\n    else:\n        if list1[0] % 2 == 0:\n            list1_count += 1\n        return list1_count + count_evens_recur(list1[1:])\ndef count_odds(list1):\n    '''\n    Write a function that takes in a list and returns a list of the number of odd numbers in the list.\n    '''\n    list1_count = 0\n    for i in list1:\n        if i % 2!= 0:\n            list1_count += 1\n    return list1_count\ndef count_odds_recur(list1):\n    '''\n    Write a function that takes in a list and returns a list of the number of odd numbers in the list.\n    '''\n    list1_count = 0\n    if len(list1) == 0:\n        return list1_count\n    else:\n        if list1[0] % 2!= 0:\n            list1_count += 1\n        return list1_count + count_odds_recur(list1[1:])\ndef remove_first(list1):\n    '''\n    Write a function that takes in a list and returns a list without the first item in the list.\n    '''\n    list1 = list1[1:]\n    return list1\ndef remove_first_recur(list1):\n    '''\n    Write a function that takes in a list and returns a list without the first item in the list.\n    '''\n    list1 = list1[1:]\n    return list1\ndef remove_last(list1):\n    '''\n    Write a function that takes in a list and returns a list without the last item in the list.\n    '''\n    list1 = list1[:-1]\n    return list1\ndef remove_last_recur(list1):\n    '''\n    Write a function that takes in a list and returns a list without the last item in the list.\n    '''\n    list1 = list1[:-1]\n    return list1\ndef take_every_other(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains every other item in the list.\n    '''\n    list1_even = []\n    for i in range(0,len(list1),2):\n        list1_even.append(list1[i])\n    return list1_even\ndef take_every_other_recur(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains every other item in the list.\n    '''\n    list1_even = []\n    if len(list1) == 0:\n        return list1_even\n    else:\n        list1_even.append(list1[0])\n        return list1_even + take_every_other_recur(list1[1:])\ndef sum_float"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    sorted_list = sorted(list1)\n    return sorted_list[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    for i in range(n):\n        list2.append(max(list1))\n        list1.remove(max(list1))\n    return list2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * 3.14 * r * h\n    return lateral_surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14*(r**2)*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*r*r+2*math.pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    result = 2 * math.pi * r * (r + h)\n    return result\n    #pass\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = (2*3.14159*r*h) + (2*3.14159*r**2)\n    return surface_area\n    \nr = 5\nh = 10\nprint(lateralsuface_cylinder(r,h))\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    #import math as m\n    #h = m.radians(90)\n    #r = m.radians(90)\n    #print(\"degrees\",math.pi/180*90)\n    #print(\"radians\",math.pi/180*90)\n    #h = m.pi/180*90\n    #r = m.pi/180*90\n    #print(\"degrees\",h)\n    #print(\"radians\",r)\n    surface_area = 2*math.pi*r*h+2*math.pi*r**2\n    return surface_area\n    \n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(2*np.pi*r*h)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    print(volume)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \ndef area_square(l):\n    '''\n    Write a function to find the area of a square given its side length.\n    '''\n    return l**2\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def volume(l):\n        return(l**3)\n    return volume(l)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # code here\n    def set_even_bits(n):\n        return (n & 0xaaaaaaaa) >> 1\n    return set_even_bits(n)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Solution 1\n    # O(1) time complexity\n    # O(1) space complexity\n    \n    if n == 0:\n        return 0\n    \n    n = n & 0x55555555\n    \n    n = n >> 1\n    n = n | 0xAAAAAAAA\n    n = n >> 1\n    \n    return n & 0x55555555\n    \n    # Solution 2\n    # O(1) time complexity\n    # O(1) space complexity\n    \n    # return n & 1\n    \n    # Solution 3\n    # O(1) time complexity\n    # O(1) space complexity\n    \n    # return n & 1 ^ n >> 31\n    \n    # Solution 4\n    # O(1) time complexity\n    # O(1) space complexity\n    \n    #return ((n & 0xAAAAAAAA) >> 1) | (n & 0x55555555)\n    \n    # Solution 5\n    # O(1) time complexity\n    # O(1) space complexity\n    \n    #left_bits = n & 0xAAAAAAAA\n    #right_bits = n & 0x55555555\n    \n    #return (left_bits >> 1) | (right_bits >> 31)\n    \n    # Solution 6\n    # O(1) time complexity\n    # O(1) space complexity\n    \n    #left_bits = n & 0xAAAAAAAA\n    #right_bits = n & 0x55555555\n    \n    #left_bits >>= 1\n    #right_bits >>= 31\n    \n    #return left_bits | right_bits\n    \ndef set_all_bits_for_bit_positions_greater_than_n(n, m):\n    '''\n    Write a python function to set all bits for all integers greater than N\n    that are multiple of M.\n    '''\n    # Solution 1\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    n = n | (n << 1)\n    n = n | (n << 2)\n    n = n | (n << 4)\n    \n    n = n & ~(m << 1)\n    n = n & ~(m << 2)\n    n = n & ~(m << 4)\n    \n    return n\n    \n    # Solution 2\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return (n - 1) | ~(m << 1)\n    \n    # Solution 3\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return (n - 1) & ~(m << 1)\n    \n    # Solution 4\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    #return (n & ~(m << 1)) | (n & ~(m << 2)) | (n & ~(m << 4))\n    \n    # Solution 5\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return (n & (m << 1)) | (n & (m << 2)) | (n & (m << 4))\n    \n    # Solution 6\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return n | ~((n >> m) << m)\n    \ndef right_shift_by_bit_positions(n, m):\n    '''\n    Write a python function to right shift a number by m positions.\n    '''\n    # Solution 1\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    return n >> m\n    \n    # Solution 2\n    # O(1) time complexity\n    # O(1) space complexity\n    \n    # return n >> m | ((1 << m) - 1)\n    \n    # Solution 3\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return (n >> m) | ((1 << m) - 1)\n    \n    # Solution 4\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    #return n >> m | (n & ((1 << m) - 1))\n    \n    # Solution 5\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    #return n >> m | (n & (1 << m - 1) - 1)\n    \n    # Solution 6\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return n >> m | (n & ((1 << m) - 1))\n    \ndef left_shift_by_bit_positions(n, m):\n    '''\n    Write a python function to left shift a number by m positions.\n    '''\n    # Solution 1\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    return n << m\n    \n    # Solution 2\n    # O(1) time complexity\n    # O(1) space complexity\n    \n    # return n << m | (1 << m) - 1\n    \n    # Solution 3\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return n << m | (1 << m) - 1\n    \n    # Solution 4\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    #return n << m | (1 << m) - 1\n    \n    # Solution 5\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    #return n << m | (1 << m) - 1\n    \n    # Solution 6\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return n << m | (1 << m) - 1\n    \ndef set_even_bit_for_bit_positions_greater_than_n(n, m):\n    '''\n    Write a python function to set even bits for all integers greater than N\n    that are multiple of M.\n    '''\n    # Solution 1\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    n = n | (n << m)\n    n = n & ~(m << 1)\n    n = n & ~(m << 2)\n    \n    return n\n    \n    # Solution 2\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return (n - 1) | (~(m << 1))\n    \n    # Solution 3\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return (n - 1) & (~(m << 1))\n    \n    # Solution 4\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    #return (n & ~(m << 1)) | (n & ~(m << 2)) | (n & ~(m << 4))\n    \n    # Solution 5\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return (n & (m << 1)) | (n & (m << 2)) | (n & (m << 4))\n    \n    # Solution 6\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return n | ~((n >> m) << m)\n    \ndef set_odd_bit_for_bit_positions_greater_than_n(n, m):\n    '''\n    Write a python function to set odd bits for all integers greater than N\n    that are multiple of M.\n    '''\n    # Solution 1\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    n = n | (n << m)\n    n = n | (n << (m + 1))\n    n = n & ~(m << 2)\n    n = n & ~(m << 3)\n    \n    return n\n    \n    # Solution 2\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return (n - 1) | (~(m << 2))\n    \n    # Solution 3\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    # return (n - 1) & (~(m << 2))\n    \n    # Solution 4\n    # O(m) time complexity\n    # O(1) space complexity\n    \n    #return (n & ~(m << 2)) | (n & ~(m << 3)"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Use n & (n - 1) to clear even bits.\n    # Use n & (-n) to clear odd bits.\n    # Use n & (1 << i) to check whether the bit at index 'i' is set.\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    number = n\n    while number > 0:\n        if number % 2 == 0:\n            print(\"Even bit set: \",number)\n        else:\n            print(\"Odd bit set: \",number)\n        number = number // 2\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Set the mask to the binary representation of all even numbers\n    mask = 1 << n.bit_length() - 1\n    return n & mask\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    def set_all_even_bits_in_number(n):\n        return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & ~1) | (2 ** (n.bit_length()) - 1) \n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n > 0 :\n        return n & 0x55555555\n    else:\n        n = abs(n)\n        return -(n & 0x55555555)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = dict()\n    for item in test_list:\n        if item in occurences:\n            occurences[item] += 1\n        else:\n            occurences[item] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = []\n    for i in test_list:\n        if i not in unique_tuples:\n            unique_tuples.append(i)\n    occurences = {}\n    for i in unique_tuples:\n        occurences[i] = test_list.count(i)\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list.sort()\n    test_list = [list(i) for i in test_list]\n    test_list = [tuple(i) for i in test_list]\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_list = []\n    for element in test_list:\n        if element not in occurence_list:\n            occurence_list.append(element)\n    occurence_dict = {}\n    for element in occurence_list:\n        occurence_dict[element] = test_list.count(element)\n    return occurence_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # turn test_list into a set \n    set_test_list = set(test_list)\n    # convert set back to list\n    test_list = list(set_test_list)\n    # create a dictionary of tuples\n    test_dict = {}\n    # iterate through the list\n    for tuple in test_list:\n        # if a tuple is not in the dictionary yet, set the value to 1\n        if tuple not in test_dict:\n            test_dict[tuple] = 1\n        # if the tuple is already in the dictionary, increment the value of the tuple by 1\n        else:\n            test_dict[tuple] += 1\n    # return the dictionary \n    return test_dict \n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Initialize an empty dictionary\n    dict = {}\n    # Loop through the list\n    for x in test_list:\n        # Add each unique item (x[1]) to the dictionary with a value of 0\n        if x[1] in dict:\n            dict[x[1]] += 1\n        else:\n            dict[x[1]] = 1\n    # Return the dictionary\n    return dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter()\n    for i in test_list:\n        d[i] += 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create new list to store elements\n    new_list = []\n    #loop through list\n    for element in test_list:\n        #check if element is in list\n        if element not in new_list:\n            new_list.append(element)\n    #create empty dictionary\n    dict = {}\n    #loop through elements and add to dictionary\n    for key in new_list:\n        dict[key] = test_list.count(key)\n    #return dictionary\n    return dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {k: v for k, v in Counter(test_list).items()}\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    result = 0\n    # Please add your code here\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            if str[i:j]!= '':\n                result +=1\n    return result\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # return len(str.split(\" \"))\n    return sum(1 for i in range(len(str)) if not str[i].isspace())\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def non_empty_substring(str):\n        count = 0\n        for i in range(len(str)):\n            for j in range(i+1, len(str)+1):\n                if len(str[i:j]) > 0:\n                    count += 1\n        return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if (str[i:j+1]!= ''): \n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # corner case 1\n    if str == '':\n        return 0\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    length = len(str)\n    if(length==0):\n        return 0\n    else:\n        return number_of_substrings_recursive(str,0,length)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #create a list with all the substrings and their length\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings2 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings2.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings3 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings3.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings4 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings4.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings5 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings5.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings6 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings6.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings7 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings7.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings8 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings8.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings9 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings9.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings10 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings10.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings11 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings11.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings12 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings12.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings13 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings13.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings14 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings14.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings15 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings15.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings16 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings16.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings17 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings17.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings18 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings18.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings19 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings19.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings20 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings20.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings21 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings21.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings22 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings22.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings23 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings23.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings24 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings24.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings25 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings25.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings26 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings26.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings27 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings27.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings28 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings28.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings29 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings29.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings30 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings30.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings31 = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings31.append(str[i:j])\n    #create a list with all the substrings and their length\n    substrings32 = []\n    for i i"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # step 1: create dictionary\n    # step 2: find start of each substring\n    # step 3: find end of each substring\n    # step 4: print count\n    \n    '''\n    create dictionary\n    '''\n    dictionary = {}\n    for i in range(len(str)):\n        char = str[i]\n        if char in dictionary:\n            dictionary[char] += 1\n        else:\n            dictionary[char] = 1\n    '''\n    find start of each substring\n    '''\n    count = 0\n    for key in dictionary:\n        count += dictionary[key]\n    print(count)\n    # print(dictionary)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length=len(str)\n    count=0\n    for i in range(length):\n        for j in range(i+1,length+1):\n            if str[i:j]!='':\n                count=count+1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # if m < n: \n    #     raise ValueError('m must be greater than n')\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_possible_sequences(m, n):\n        if m == 1:\n            return n + 1\n        if m == 2:\n            return m * n\n        if m > 2:\n            return get_possible_sequences(m - 1, n) + (n * (m - 1))\n    return get_possible_sequences(m, n)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m >= 0 and n >= 0: \n        #if m and n are both positive integers, then we can have the list of numbers between 1 and m. \n        return int((m**n) / ((m-n)**2)) #if m > n, then m will always be greater than n, and the resulting equation can be simplified\n    else: \n        #otherwise, there's an error and we can't make a sequence with negative integers or integers that are 0 or less\n        return -1 \n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return m\n    elif n==2:\n        return m*m\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= 0 or n <= 0: \n        raise ValueError('both values must be positive integers')\n    if n == 1: \n        return m\n    return int(get_number_of_sequences(m,n-1)*m)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # the variable current_sequence will be used to store the current sequence\n    # the first element in the sequence is 1 and the second element is 2, so we \n    # start with [1,2]\n    current_sequence = [1,2]\n    # variable total_number_of_sequences will store the total number of sequences\n    total_number_of_sequences = 0\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def n_choose_k(m,n,k): \n        '''\n        Write a function that takes in three positive integers and returns the number of possible combinations that can be formed using k of the numbers.\n        '''\n        #a) m = 3, n = 2, k = 2 \n        if k == 2: \n            return (m-2) * (n-2)\n        #b) m = 4, n = 2, k = 2 \n        if k == 2: \n            return (m-2) * (n-2)\n        #c) m = 2, n = 2, k = 1 \n        if k == 1: \n            return m * n\n        #d) m = 2, n = 2, k = 0 \n        if k == 0: \n            return 1\n        #e) m = 2, n = 2, k = 3 \n        if k == 3: \n            return (m-2) * (n-2)\n    #a) m = 3, n = 2, k = 2 \n    if n == 2 and k == 2: \n        return m * (m-1)\n    #b) m = 4, n = 2, k = 2 \n    if n == 2 and k == 2: \n        return (m * (m-1)) / 2\n    #c) m = 2, n = 2, k = 1 \n    if n == 2 and k == 1: \n        return m * (m-1)\n    #d) m = 2, n = 2, k = 0 \n    if n == 2 and k == 0: \n        return 1\n    #e) m = 2, n = 2, k = 3 \n    if n == 2 and k == 3: \n        return (m * (m-1)) / 2\n    #f) m = 3, n = 2, k = 2 \n    if n == 2 and k == 2: \n        return (m*(m-1)) / 2\n    #g) m = 3, n = 2, k = 3 \n    if n == 2 and k == 3: \n        return (m-2) * (m-1)\n    #h) m = 4, n = 2, k = 2 \n    if n == 2 and k == 2: \n        return (m-2) * (m-1) / 2\n    #i) m = 4, n = 2, k = 3 \n    if n == 2 and k == 3: \n        return (m-2) * (m-1)\n    #j) m = 5, n = 2, k = 3 \n    if n == 2 and k == 3: \n        return (m-2) * (m-1)\n    #k) m = 6, n = 2, k = 3 \n    if n == 2 and k == 3: \n        return (m-2) * (m-1)\n    #l) m = 6, n = 2, k = 4 \n    if n == 2 and k == 4: \n        return (m-2) * (m-1)\n    #m) m = 6, n = 2, k = 5 \n    if n == 2 and k == 5: \n        return (m-2) * (m-1)\n    #n) m = 6, n = 2, k = 6 \n    if n == 2 and k == 6: \n        return (m-2) * (m-1)\n    #o) m = 6, n = 2, k = 7 \n    if n == 2 and k == 7: \n        return (m-2) * (m-1)\n    #p) m = 6, n = 2, k = 8 \n    if n == 2 and k == 8: \n        return (m-2) * (m-1)\n    #q) m = 6, n = 2, k = 9 \n    if n == 2 and k == 9: \n        return (m-2) * (m-1)\n    #r) m = 6, n = 2, k = 10 \n    if n == 2 and k == 10: \n        return (m-2) * (m-1)\n    #s) m = 6, n = 2, k = 11 \n    if n == 2 and k == 11: \n        return (m-2) * (m-1)\n    #t) m = 6, n = 2, k = 12 \n    if n == 2 and k == 12: \n        return (m-2) * (m-1)\n    #u) m = 6, n = 2, k = 13 \n    if n == 2 and k == 13: \n        return (m-2) * (m-1)\n    #v) m = 6, n = 2, k = 14 \n    if n == 2 and k == 14: \n        return (m-2) * (m-1)\n    #w) m = 6, n = 2, k = 15 \n    if n == 2 and k == 15: \n        return (m-2) * (m-1)\n    #x) m = 6, n = 2, k = 16 \n    if n == 2 and k == 16: \n        return (m-2) * (m-1)\n    #y) m = 6, n = 2, k = 17 \n    if n == 2 and k == 17: \n        return (m-2) * (m-1)\n    #z) m = 6, n = 2, k = 18 \n    if n == 2 and k == 18: \n        return (m-2) * (m-1)\n    #a) m = 6, n = 3, k = 2 \n    if n == 3 and k == 2: \n        return m * m * (m-1) / 2\n    #b) m = 6, n = 3, k = 3 \n    if n == 3 and k == 3: \n        return m * m * (m-1)\n    #c) m = 6, n = 3, k = 4 \n    if n == 3 and k == 4: \n        return m * m * (m-1) / 2\n    #d) m = 6, n = 3, k = 5 \n    if n == 3 and k == 5: \n        return m * m * (m-1)\n    #e) m = 6, n = 3, k = 6 \n    if n == 3 and k == 6: \n        return m * m * (m-1) / 2\n    #f) m = 6, n = 3, k = 7 \n    if n == 3 and k == 7: \n        return m * m * (m-1)\n    #g) m = 6, n = 3, k = 8 \n    if n == 3 and k == 8: \n        return m * m * (m-1) / 2\n    #h) m = 6, n = 3, k = 9 \n    if n == 3 and k == 9: \n        return m * m * (m-1)\n    #i) m = 6, n = 3, k = 10 \n    if n == 3 and k == 10: \n        return m * m * (m-1) / 2\n    #j) m = 6, n = 3, k = 11 \n    if n == 3 and k == 11: \n        return m * m * (m-1)\n    #k) m = 6, n = 3, k = 12 \n    if n == 3 and k == 12: \n        return m * m * (m-1) / 2\n    #l) m = 6, n = 3, k = 13 \n    if n == 3 and k == 13: \n        return m * m * (m-1)\n    #m) m = 6, n = 3, k = 14 \n    if n == 3 and k == 14: \n        return m * m * (m-1) / 2\n    #n) m = 6, n = 3, k = 15 \n    if n == 3 and k == 15: \n        return m * m * (m-1)\n    #o) m = 6, n = 3, k = 16 \n    if n == 3 and k == 16: \n        return m * m * (m-1) / 2\n    #p) m = 6, n = "
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return math.factorial(m)//(math.factorial(n)*math.factorial(m-n))\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # m = 10\n    # n = 3\n    # Returns 91\n    # m = 10\n    # n = 4\n    # Returns 308\n    import math\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Function for calculating the answer\n    def factorial(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return n * factorial(n-1)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #list1[-1] = list2\n    #print(list1)\n    #list1.extend(list2)\n    #print(list1)\n    #list1.pop()\n    #list1.pop()\n    #list1.pop()\n    #list1.pop()\n    #list1.pop()\n    #list1.pop()\n    list1.append(list2)\n    list1.pop()\n    print(list1)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n    \nreplace_list([2, 3, 4], [7, 8, 9])\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list1)-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for item in list2:\n        list1.append(item)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[0:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # list1.pop()\n    # list2.append(list1)\n    # return list1\n    list1[:] = list1[:-1]\n    list2.append(list1)\n    return list2\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count=count+1\n    print(\"Total number of characters in a string are:\",count)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count +=1\n    print(count)\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    dict={}\n    for i in str1:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    print(dict)\n    print(\"\\n\")\n    print(\"Total number of characters in string : \",sum(dict.values()))\n    return\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    print('Input String:', str1)\n    count=0\n    for i in str1:\n        count += 1\n    print('Total number of characters:', count)\n    \ndef count_words(str1):\n    '''\n    Write a function to count the total number of words in a string.\n    '''\n    print('Input String:', str1)\n    count=0\n    words = str1.split()\n    for i in words:\n        count += 1\n    print('Total number of words:', count)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count=count+1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1)==0:\n        return 0\n    else:\n        return len(str1)+count_charac(str1[1:])\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for x in range(N, 1, -1):\n        if int(math.sqrt(x)) == math.sqrt(x):\n            return x\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        x = N * N\n        return (math.ceil(x**0.5))**2\n    \n    \ndef next_Perfect_Square_v2(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        i = N**0.5\n        if i.is_integer():\n            return (i+1)**2\n        else:\n            return (i+1)**2\n    \n    \ndef next_Perfect_Square_v3(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        i = N**0.5\n        if i.is_integer():\n            return (i+1)**2\n        else:\n            return ((i+1)**2) + 1\n            \ndef next_Perfect_Square_v4(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        i = N**0.5\n        if i.is_integer():\n            return (i+1)**2\n        else:\n            return (i+1)**2 + 1\n            \n            \ndef next_Perfect_Square_v5(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        i = N**0.5\n        return (2**((i+1)**2))\n            \ndef next_Perfect_Square_v6(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**((N+1)**2))\n            \ndef next_Perfect_Square_v7(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**((N**0.5)+1))\n            \ndef next_Perfect_Square_v8(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+1)**0.5)))\n            \n            \n            \n            \ndef next_Perfect_Square_v9(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+2)**0.5)))\n            \n    \ndef next_Perfect_Square_v10(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+3)**0.5)))\n            \n    \ndef next_Perfect_Square_v11(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+4)**0.5)))\n            \n    \ndef next_Perfect_Square_v12(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+5)**0.5)))\n            \n    \ndef next_Perfect_Square_v13(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+6)**0.5)))\n            \n    \ndef next_Perfect_Square_v14(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+7)**0.5)))\n            \n    \ndef next_Perfect_Square_v15(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+8)**0.5)))\n            \n    \ndef next_Perfect_Square_v16(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+9)**0.5)))\n            \n    \ndef next_Perfect_Square_v17(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+10)**0.5)))\n            \n    \ndef next_Perfect_Square_v18(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+11)**0.5)))\n            \n    \ndef next_Perfect_Square_v19(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+12)**0.5)))\n            \n    \ndef next_Perfect_Square_v20(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+13)**0.5)))\n            \n    \ndef next_Perfect_Square_v21(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+14)**0.5)))\n            \n    \ndef next_Perfect_Square_v22(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+15)**0.5)))\n            \n    \ndef next_Perfect_Square_v23(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+16)**0.5)))\n            \n    \ndef next_Perfect_Square_v24(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+17)**0.5)))\n            \n    \ndef next_Perfect_Square_v25(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    else:\n        return (2**(((N+18)**0.5)))\n            \n    \ndef next_Perfect_Square_v26(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while N>0:\n        print(N, N**2)\n        N-=1\n    return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Start with the square of the given number \n    next_perfect_square = N * N \n      \n    # Keep squaring till we reach 4. \n    # Note that we can compare directly using \"<\" operator \n    while (next_perfect_square < 4): \n        next_perfect_square *= next_perfect_square \n  \n    # Add 1 and we have our next perfect square \n    next_perfect_square += 1\n  \n    return next_perfect_square \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Base case \n    if (math.sqrt(N) - math.floor(math.sqrt(N)) == 0): \n        return (math.floor(math.sqrt(N)+1) * math.floor(math.sqrt(N)+1)) \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N < 0): \n        return -1\n    ans = 0\n    while (ans * ans <= N): \n        ans = ans + 1\n    if (ans * ans!= N): \n        return -1\n    return ans * ans \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return 1\n    else:\n        return int((math.sqrt(N)+1)**2)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    next_perfect_square = math.floor(math.sqrt(N)) + 1\n    return next_perfect_square**2\n  "
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.sqrt(N).is_integer():\n        return math.sqrt(N)\n    else:\n        return int(math.sqrt(N)+1)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0 or N == 1:\n        return N\n    else:\n        return math.floor(math.sqrt(N)) + 1\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    curr_max = 0\n    max_so_far = 0\n    for i in range(n-1):\n        curr_max = arr[i] + arr[i+1]\n        if curr_max > max_so_far:\n            max_so_far = curr_max\n    curr_max = 0\n    for j in range(n-1, 0, -1):\n        curr_max = arr[j-1] + arr[j]\n        if curr_max > max_so_far:\n            max_so_far = curr_max\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_subsequence_sum(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    length = len(arr)\n    if length <= 1:\n        return -1\n    best_sum = float('-inf')\n    for index in range(1, length):\n        prev_best = best_sum\n        curr_sum = 0\n        curr_start = 0\n        curr_end = index\n        while curr_start < curr_end:\n            curr_sum = curr_sum + arr[curr_start] + arr[curr_end]\n            curr_start += 1\n            curr_end -= 1\n            if curr_sum > prev_best:\n                best_sum = curr_sum\n    return best_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_so_far = arr[0] \n    max_ending_here = 0\n    for i in range(1, n): \n        max_ending_here = max_ending_here + arr[i] \n        if max_so_far < max_ending_here: \n            max_so_far = max_ending_here \n        if max_ending_here < 0: \n            max_ending_here = 0\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    result = 0\n    # Write your code here\n    s = []\n    for i in range(n):\n        s.append(arr[i])\n    for i in range(1, n):\n        s[i] = max(s[i], s[i - 1])\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #create a max_sum variable\n    max_sum = 0\n    #create a i variable that is the index of the array\n    i = 0\n    #create a variable that is the length of the array\n    length = len(arr)\n    #create a variable that is the sum of the first array\n    first_sum = 0\n    #create a variable that is the sum of the last array\n    last_sum = 0\n    #create a for loop that loops through the array\n    for i in range(length):\n        #create a variable that is the sum of the array\n        sum_arr = 0\n        #create a for loop that loops through the array\n        for i in range(length):\n            #create a variable that is the sum of the array\n            sum_arr = 0\n            #create a variable that is the index of the array\n            j = i\n            #create a while loop that loops while the index is less than the length of the array\n            while j < length:\n                #add the current element to the sum of the array\n                sum_arr += arr[j]\n                #add the current element to the sum of the first array\n                first_sum += arr[j]\n                #add the current element to the sum of the last array\n                last_sum += arr[j]\n                #increase the index by 1\n                j += 1\n            #if the sum of the array is greater than the max_sum\n            if sum_arr > max_sum:\n                #assign the new max_sum to the sum of the array\n                max_sum = sum_arr\n    #return the max_sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # c is the max increasing sum so far\n    # d is the max decreasing sum so far\n    # f is the overall maximum sum so far\n    # l is the current length of the longest increasing subsequence\n    # m is the current length of the longest decreasing subsequence\n    # arr[0..j] and arr[j..n-1] are increasing and decreasing respectively, so we can keep a record of the maximum increasing sum so far and the maximum decreasing sum so far\n    n = len(arr)\n    c = [0] * n\n    d = [0] * n\n    f = [0] * n\n    l = 1\n    m = 1\n    c[0] = arr[0]\n    d[0] = arr[n-1]\n    f[0] = c[0] + d[0]\n    for i in range(1, n):\n        c[i] = max(c[i-1], arr[i])\n        f[i] = max(f[i-1], c[i] + d[i-1])\n        d[i] = min(d[i-1], arr[n-i-1])\n        f[i] = max(f[i-1], c[i-1] + d[i-1])\n    print(f)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return max(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #Initialize values\n    current_sum = 0\n    max_sum = arr[0]\n    last_increase = arr[0]\n    last_decrease = arr[0]\n    decrease_index = 0\n    increase_index = 0\n    max_current_sum = 0\n    current_decrease_sum = 0\n    current_increase_sum = 0\n    max_index = 0\n    \n    #Loop through the array\n    for i in range(0,len(arr)):\n        \n        #If the current number is greater than the last decrease then this is a new increase\n        if arr[i] > last_decrease:\n            increase_index = i\n            current_increase_sum = current_sum\n            last_increase = arr[i]\n            \n        #If the current number is less than the last increase then this is a new decrease\n        elif arr[i] < last_increase:\n            decrease_index = i\n            current_decrease_sum = current_sum\n            last_decrease = arr[i]\n        \n        #Once the last increase or decrease is reached set the current sum\n        else:\n            current_sum = last_increase + last_decrease\n            \n        #If the current sum is greater than the max then set it to the current sum and set the index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n        \n    #Return the max sum\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    guess = 1\n    while guess*guess!= number:\n        guess = (guess + number/guess)/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    epsilon = 0.01\n    num_guesses = 0\n    low = 0\n    high = max(1, x)\n    ans = (high + low)/2.0\n    while abs(ans**2 - number) >= epsilon:\n        if ans**2 < number:\n            low = ans\n        else:\n            high = ans\n        ans = (high + low)/2.0\n        num_guesses += 1\n    return ans, num_guesses\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number/2.0\n    while True:\n        better = (approx + number/approx)/2.0\n        if abs(approx - better) < 0.000001:\n            return better\n        approx = better\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number # The guess.\n    while True:\n        y = (x + number/x) / 2 # Newton's method.\n        if y == x:\n            return y\n        x = y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number / 2) + 1\n    while (abs(y * y - number) > 0.00001):\n        x = y\n        y = (x + number / x) / 2\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    if number == 0 or number == 1:\n        return number\n    guess = 1\n    difference = abs(number)\n    while difference >= 0.1:\n        guess = (guess + number/guess)/2\n        difference = abs(number - guess**2)\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    assert isinstance(number, int)\n    if number < 0:\n        raise ValueError('Square root of negative numbers is not defined')\n    if number == 0:\n        return 0\n    x = number // 2\n    y = 1\n    while y * y <= number:\n        x = (x + number // x) // 2\n        y = (x + number // x) // 2\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + 1) / 2\n    while abs(x - y * y) > 0.001:\n        x = y\n        y = (x + number / x) / 2\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approximation = 0\n    difference = 1\n    while difference > 0.0000001:\n        difference = number/approximation - approximation**2/number\n        approximation += difference\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lps = [[0 for x in range(n)]for y in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n+1)]for y in range(n+1)]\n    \n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if str[i-1] == str[j-1] and i!= j:\n                dp[i][j] = dp[i-1][j-1]+1\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    \n    return dp[n][n]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    # L[i][j] is going to store the length of longest subsequence\n    # for substring str[i..j] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i + 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i][j - 1], L[i + 1][j]) \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    m = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        m[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                m[i][j] = m[i+1][j-1] + 2\n            else:\n                m[i][j] = max(m[i+1][j], m[i][j-1])\n    return m[0][n-1]\ndef lcs(str1, str2):\n    '''\n    Write a function to find the length of the longest common subsequence in the given two strings.\n    '''\n    if len(str1) == 0 or len(str2) == 0:\n        return 0\n    m = [[0 for i in range(len(str1)+1)] for i in range(len(str2)+1)]\n    for i in range(len(str2)):\n        for j in range(len(str1)):\n            if str2[i] == str1[j]:\n                m[i+1][j+1] = m[i][j] + 1\n            else:\n                m[i+1][j+1] = max(m[i+1][j], m[i][j+1])\n    return m[len(str2)][len(str1)]\ndef edit_distance(str1, str2):\n    '''\n    Write a function to compute the edit distance between two strings. The function should return the edit distance between the two strings.\n    '''\n    if len(str1) == 0 or len(str2) == 0:\n        return len(str1) + len(str2)\n    m = [[0 for i in range(len(str1)+1)] for i in range(len(str2)+1)]\n    for i in range(len(str2)):\n        m[i+1][0] = i+1\n    for j in range(len(str1)):\n        m[0][j+1] = j+1\n    for i in range(len(str2)):\n        for j in range(len(str1)):\n            if str1[j] == str2[i]:\n                m[i+1][j+1] = m[i][j]\n            else:\n                m[i+1][j+1] = min(m[i+1][j], m[i][j+1], m[i+1][j+1]) + 1\n    return m[len(str2)][len(str1)]\ndef get_distance(str1, str2):\n    '''\n    Write a function to get the edit distance between two strings. The function should return the edit distance between the two strings.\n    '''\n    return edit_distance(str1, str2)\ndef all_palindromes(str):\n    '''\n    Write a function to get all the palindromes that can be formed from the given string.\n    '''\n    if len(str) < 2:\n        return set([str])\n    result = set()\n    for i in range(len(str)):\n        result.add(str[i])\n        result.add(str[i]+str[i])\n        result.add(str[i]+str[i]+str[i])\n    return result\ndef get_all_palindromes(str):\n    '''\n    Write a function to get all the palindromes that can be formed from the given string.\n    '''\n    return all_palindromes(str)\ndef sort_by_frequency(str):\n    '''\n    Write a function to sort the characters of the given string in a frequency order. The function should return the sorted string.\n    '''\n    if len(str) == 1:\n        return str\n    counter = dict()\n    for i in range(len(str)):\n        if str[i] in counter:\n            counter[str[i]] += 1\n        else:\n            counter[str[i]] = 1\n    counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    result = []\n    for i in range(len(counter)):\n        result.append(counter[i][0])\n    return \"\".join(result)\ndef frequency_sort(str):\n    '''\n    Write a function to sort the characters of the given string in a frequency order. The function should return the sorted string.\n    '''\n    return sort_by_frequency(str)\ndef get_most_common(str):\n    '''\n    Write a function to get the most common character in a given string. If there are more than one character that is most common, then return the character which has the maximum frequency.\n    '''\n    if len(str) == 0:\n        return None\n    if len(str) == 1:\n        return str\n    counter = dict()\n    for i in range(len(str)):\n        if str[i] in counter:\n            counter[str[i]] += 1\n        else:\n            counter[str[i]] = 1\n    counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return counter[0][0]\ndef get_most_common_character(str):\n    '''\n    Write a function to get the most common character in a given string. If there are more than one character that is most common, then return the character which has the maximum frequency.\n    '''\n    return get_most_common(str)\ndef get_least_common(str):\n    '''\n    Write a function to get the least common character in a given string. If there are more than one character that is least common, then return the character which has the minimum frequency.\n    '''\n    if len(str) == 0:\n        return None\n    if len(str) == 1:\n        return str\n    counter = dict()\n    for i in range(len(str)):\n        if str[i] in counter:\n            counter[str[i]] += 1\n        else:\n            counter[str[i]] = 1\n    counter = sorted(counter.items(), key=lambda x: x[1])\n    return counter[0][0]\ndef get_least_common_character(str):\n    '''\n    Write a function to get the least common character in a given string. If there are more than one character that is least common, then return the character which has the minimum frequency.\n    '''\n    return get_least_common(str)\ndef is_unique(str):\n    '''\n    Write a function to check whether the given string has all unique characters or not. The function should return true if the string has all unique characters. Else, it should return false.\n    '''\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                return False\n    return True\ndef is_unique_character(str):\n    '''\n    Write a function to check whether the given string has all unique characters or not. The function should return true if the string has all unique characters. Else, it should return false.\n    '''\n    return is_unique(str)\ndef is_permutation(str1, str2):\n    '''\n    Write a function to check whether the given two strings are permutations of each other or not. The function should return true if the two strings are permutations of each other. Else, it should return false.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            return False\n    return True\ndef is_permutation_character(str1, str2):\n    '''\n    Write a function to check whether the given two strings are permutations of each other or not. The function should return true if the two strings are permutations of each other. Else, it should return false.\n    '''\n    return is_permutation(str1, str2)\ndef get_permutations(str, start, end):\n    '''\n    Write a function to generate all permutations of a string. The function should return the permutations of the string in a list.\n    ''"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n    # L[i][j] = true if substring str[i..j] is palindrome \n    for i in range(n): \n        L[i][i] = True\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = True\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] \n            else: \n                L[i][j] = False\n    return L[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    m = [[False for x in range(n+1)] for y in range(n+1)]\n    for i in range(n):\n        m[i][i] = True\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n+1)] for y in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1] and i!= j:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][n]\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    n = int(input(\"Enter an integer: \"))\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return(1/n * sum([1/d for d in range(1, n)]))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def my_range(n):\n        i = 0\n        while i <= n:\n            yield i\n            i += 1\n    return sum(1/k for k in my_range(n))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_numbers += 1/i\n    return sum_of_numbers\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    num = 1\n    for x in range(1,n+1):\n        num += 1/x\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # create an empty list to hold the sequence of harmonic sums\n    harmonic_sum_list = []\n    # loop through and append the sequence of harmonic sums to the list\n    for i in range(1, n+1):\n        harmonic_sum_list.append(1/i)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass # remove this line\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    intersection = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            if i > 0 and array_nums1[i] == array_nums1[i-1]:\n                i += 1\n                continue\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Store the array items in a dictionary,\n    # keeping track of how many times a given item appears in the array.\n    seen = {}\n    for item in array_nums1:\n        seen[item] = seen.get(item,0)+1\n    for item in array_nums2:\n        if item in seen:\n            seen[item] -= 1\n            if seen[item] == 0:\n                seen.pop(item)\n    return seen\n    \ndef test_1():\n    array_nums1 = [1, 2, 2, 1]\n    array_nums2 = [2, 2]\n    #answer = [2, 2]\n    print(intersection_array(array_nums1,array_nums2))\n    \ndef test_2():\n    array_nums1 = [4,9,5]\n    array_nums2 = [9,4,9,8,4]\n    #answer = [9,4]\n    print(intersection_array(array_nums1,array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_1 = set(array_nums1)\n    array_2 = set(array_nums2)\n    return list(array_1.intersection(array_2))\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1)&set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection_set = set_nums1.intersection(set_nums2)\n    return list(intersection_set)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # merge the arrays\n    array_nums1.sort()\n    array_nums2.sort()\n    i = 0\n    j = 0\n    intersection_array = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection_array.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            i += 1\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr1 = set(array_nums1)\n    arr2 = set(array_nums2)\n    arr1_arr2 = arr1.intersection(arr2)\n    return list(arr1_arr2)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # your code here\n    \n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup:\n        if t == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = ('a', 'b', 'c', 'd', 'a', 'b')\n    x = 'b'\n    x_count = 0\n    for i in tup:\n        if i == x:\n            x_count += 1\n    return x_count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for i in tup:\n        if i == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0\n    for i in tup:\n        if x == i:\n            x_count += 1\n    return x_count\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n            result.append(list[i])\n        else:\n            result.append(list[i])\n            result.append(element)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result=[]\n    for e in list:\n        result.append(element)\n        result.append(e)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index = 0\n    while index < len(list):\n        list.insert(index,element)\n        index = index + 2\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # YOUR CODE GOES HERE\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for num in range(0,len(list)):\n        result.append(element)\n        result.append(list[num])\n    return result\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import math\n    def convert_complex_to_polar(complex_number):\n        # assert isinstance(complex_number, complex)\n        return cmath.polar(complex_number)\n    polar_coordinate = convert_complex_to_polar(numbers)\n    return polar_coordinate[0], polar_coordinate[1]\ndef square_root(numbers):\n    '''\n    Write a python function to calculate the square root of a number.\n    '''\n    def square_root_function(numbers):\n        '''\n        Write a python function to calculate the square root of a number.\n        '''\n        return cmath.sqrt(numbers)\n    square_root_value = square_root_function(numbers)\n    return square_root_value\ndef integer_division(numbers):\n    '''\n    Write a python function to perform an integer division of two numbers.\n    '''\n    def integer_division_function(numbers):\n        '''\n        Write a python function to perform an integer division of two numbers.\n        '''\n        return int(numbers) / int(numbers)\n    integer_division_result = integer_division_function(numbers)\n    return integer_division_result\ndef multiplication(numbers):\n    '''\n    Write a python function to perform a multiplication of two numbers.\n    '''\n    def multiplication_function(numbers):\n        '''\n        Write a python function to perform a multiplication of two numbers.\n        '''\n        return int(numbers) * int(numbers)\n    multiplication_result = multiplication_function(numbers)\n    return multiplication_result\ndef square_root_complex(numbers):\n    '''\n    Write a python function to calculate the square root of a complex number.\n    '''\n    def square_root_complex_function(numbers):\n        '''\n        Write a python function to calculate the square root of a complex number.\n        '''\n        return cmath.sqrt(complex(numbers))\n    square_root_complex_result = square_root_complex_function(numbers)\n    return square_root_complex_result\ndef addition(numbers):\n    '''\n    Write a python function to perform a addition of two numbers.\n    '''\n    def addition_function(numbers):\n        '''\n        Write a python function to perform a addition of two numbers.\n        '''\n        return int(numbers) + int(numbers)\n    addition_result = addition_function(numbers)\n    return addition_result\ndef subtraction(numbers):\n    '''\n    Write a python function to perform a subtraction of two numbers.\n    '''\n    def subtraction_function(numbers):\n        '''\n        Write a python function to perform a subtraction of two numbers.\n        '''\n        return int(numbers) - int(numbers)\n    subtraction_result = subtraction_function(numbers)\n    return subtraction_result\ndef division(numbers):\n    '''\n    Write a python function to perform a division of two numbers.\n    '''\n    def division_function(numbers):\n        '''\n        Write a python function to perform a division of two numbers.\n        '''\n        return int(numbers) / int(numbers)\n    division_result = division_function(numbers)\n    return division_result\ndef complex_number_multiplication(numbers):\n    '''\n    Write a python function to calculate the multiplication of two complex numbers.\n    '''\n    def complex_number_multiplication_function(numbers):\n        '''\n        Write a python function to calculate the multiplication of two complex numbers.\n        '''\n        return complex(numbers) * complex(numbers)\n    complex_number_multiplication_result = complex_number_multiplication_function(numbers)\n    return complex_number_multiplication_result\ndef complex_number_division(numbers):\n    '''\n    Write a python function to calculate the division of two complex numbers.\n    '''\n    def complex_number_division_function(numbers):\n        '''\n        Write a python function to calculate the division of two complex numbers.\n        '''\n        return complex(numbers) / complex(numbers)\n    complex_number_division_result = complex_number_division_function(numbers)\n    return complex_number_division_result\ndef complex_number_addition(numbers):\n    '''\n    Write a python function to calculate the addition of two complex numbers.\n    '''\n    def complex_number_addition_function(numbers):\n        '''\n        Write a python function to calculate the addition of two complex numbers.\n        '''\n        return complex(numbers) + complex(numbers)\n    complex_number_addition_result = complex_number_addition_function(numbers)\n    return complex_number_addition_result\ndef complex_number_subtraction(numbers):\n    '''\n    Write a python function to calculate the subtraction of two complex numbers.\n    '''\n    def complex_number_subtraction_function(numbers):\n        '''\n        Write a python function to calculate the subtraction of two complex numbers.\n        '''\n        return complex(numbers) - complex(numbers)\n    complex_number_subtraction_result = complex_number_subtraction_function(numbers)\n    return complex_number_subtraction_result\ndef complex_number_abs_square_root(numbers):\n    '''\n    Write a python function to calculate the absolute value of a complex number and its square root.\n    '''\n    def complex_number_abs_square_root_function(numbers):\n        '''\n        Write a python function to calculate the absolute value of a complex number and its square root.\n        '''\n        return abs(complex(numbers)), abs(square_root_complex_function(numbers))\n    complex_number_abs_square_root_result = complex_number_abs_square_root_function(numbers)\n    return complex_number_abs_square_root_result\ndef complex_number_conjugate(numbers):\n    '''\n    Write a python function to calculate the conjugate of a complex number.\n    '''\n    def complex_number_conjugate_function(numbers):\n        '''\n        Write a python function to calculate the conjugate of a complex number.\n        '''\n        return complex(numbers).conjugate()\n    complex_number_conjugate_result = complex_number_conjugate_function(numbers)\n    return complex_number_conjugate_result\ndef complex_number_pow(numbers):\n    '''\n    Write a python function to calculate the power of a complex number.\n    '''\n    def complex_number_pow_function(numbers):\n        '''\n        Write a python function to calculate the power of a complex number.\n        '''\n        return complex(numbers) ** 2\n    complex_number_pow_result = complex_number_pow_function(numbers)\n    return complex_number_pow_result\ndef complex_number_mod(numbers):\n    '''\n    Write a python function to calculate the modulus of a complex number.\n    '''\n    def complex_number_mod_function(numbers):\n        '''\n        Write a python function to calculate the modulus of a complex number.\n        '''\n        return complex(numbers) % 2\n    complex_number_mod_result = complex_number_mod_function(numbers)\n    return complex_number_mod_result\ndef complex_number_argument(numbers):\n    '''\n    Write a python function to calculate the argument of a complex number.\n    '''\n    def complex_number_argument_function(numbers):\n        '''\n        Write a python function to calculate the argument of a complex number.\n        '''\n        return complex(numbers).phase\n    complex_number_argument_result = complex_number_argument_function(numbers)\n    return complex_number_argument_result\ndef complex_number_multiplication_addition_subtraction(numbers):\n    '''\n    Write a python function to calculate the product of three complex numbers.\n    '''\n    def complex_number_multiplication_addition_subtraction_function(numbers):\n        '''\n        Write a python function to calculate the product of three complex numbers.\n        '''\n        return complex(numbers[0]) * complex(numbers[1]) "
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num=numbers.split(' ')\n    print('({0}, {1})'.format(round(cmath.polar(complex(num[0],num[1])),2).real,round(cmath.polar(complex(num[0],num[1])),2).imag))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers)==complex:\n        return (cmath.polar(numbers))\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"Input complex number:\")\n    print(\"For example: 2 + 3j\")\n    inp=input()\n    c=inp.split()\n    a=float(c[0])\n    b=float(c[2])\n    z=complex(a,b)\n    print(\"Convert to polar:\")\n    p=cmath.polar(z)\n    print(p)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Convert to a tuple \n    # and unpack them to two separate variables\n    real, imaginary = numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real, imaginary = numbers.real, numbers.imag\n    r = (real**2 + imaginary**2)**0.5\n    theta = cmath.phase(numbers)\n    return r, theta\n    \n    \n    \ndef quad_formula(a, b, c):\n    '''\n    Write a python function to calculate the quadratic formula.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    return x1, x2\n    \n    \n    \ndef quad_roots(a, b, c):\n    '''\n    Write a python function to calculate the quadratic roots.\n    '''\n    x1, x2 = quad_formula(a, b, c)\n    return x1, x2\n    \n    \n    \ndef quadratic_eqn(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_b(a, b):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, 0)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_c(a, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, 0, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_d(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_e(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_f(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_g(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_h(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_i(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_j(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_k(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_l(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_m(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_n(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_o(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_p(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_q(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_r(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_s(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_t(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_u(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_v(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_w(a, b, c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    x1, x2 = quad_roots(a, b, c)\n    x = x1, x2\n    return x\n    \n    \n    \ndef quad_solve_x(a, "
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers=[]\n    for num in numbers:\n        a = num.real\n        b = num.imag\n        polar_numbers.append([round(cmath.polar(num)[0], 2), round(cmath.polar(num)[1], 2)])\n    return polar_numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # intializing complex number, magnitude, and phase of each number\n    n = complex(0,0)\n    m = complex(0,0)\n    p = complex(0,0)\n    \n    #converting the numbers to complex number format\n    for i in numbers:\n        n = complex(numbers[i]['Real'],numbers[i]['Imaginary'])\n        m = complex(numbers[i]['Magnitude'],0)\n        p = complex(numbers[i]['Phase'],0)\n        \n        #returns a dictionary with magnitude and phase of the complex numbers\n        return {'Magnitude':cmath.polar(m)[0],'Phase':cmath.polar(p)[1]}\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # YOUR CODE HERE\n    def phi(z):\n        '''\n        implement the phi function\n        '''\n        return ((z.real**2)+(z.imag**2))**0.5\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = list(numbers)\n    print(\"\\nInput :\\n\")\n    print(numbers)\n    polar = []\n    #polar.append(abs(numbers[0]))\n    #polar.append(abs(numbers[1]))\n    #polar.append(abs(numbers[2]))\n    polar.append(complex(numbers[0]))\n    polar.append(complex(numbers[1]))\n    polar.append(complex(numbers[2]))\n    print(\"\\nOutput:\\n\")\n    print(polar)\n    print(round(polar[0].real,2))\n    print(round(polar[0].imag,2))\n    print(round(polar[1].real,2))\n    print(round(polar[1].imag,2))\n    print(round(polar[2].real,2))\n    print(round(polar[2].imag,2))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if type(list1[i]) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    total_int = 0\n    for i in list1:\n        if isinstance(i, int):\n            total_int += 1\n    return total_int\n    \ndef count_strings(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    total_str = 0\n    for i in list1:\n        if isinstance(i, str):\n            total_str += 1\n    return total_str\n    \ndef list_avg(list1):\n    '''\n    Write a python function that returns the average of a list of numbers.\n    '''\n    avg = sum(list1)/len(list1)\n    return avg\n    \ndef list_sum(list1):\n    '''\n    Write a python function that returns the sum of a list of numbers.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n    return total\n    \ndef list_max(list1):\n    '''\n    Write a python function that returns the maximum value in a list of numbers. If the list is empty, the function returns None.\n    '''\n    if not list1:\n        return None\n    else:\n        return max(list1)\n    \ndef list_min(list1):\n    '''\n    Write a python function that returns the minimum value in a list of numbers. If the list is empty, the function returns None.\n    '''\n    if not list1:\n        return None\n    else:\n        return min(list1)\n        \ndef first_last6(list1):\n    '''\n    Write a python function that returns True if the first and last values of a list are the same. If the list is empty, the function returns None.\n    '''\n    if not list1:\n        return None\n    else:\n        return list1[0] == list1[len(list1)-1]\n        \ndef common_elements(list1, list2):\n    '''\n    Write a python function that returns a new list with only the common elements in list1 and list2.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j and i not in common_elements_list:\n                common_elements_list.append(i)\n    return common_elements_list\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element,int):\n            count +=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count+=1\n    return count\n    # Do not return anything, modify count in place instead.\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for ele in list1:\n        if isinstance(ele,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if isinstance(i,int):\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # lst = [1, 2, 3, 4]\n    # length = 2\n    comb_with_rep = combinations_with_replacement(l, n) \n    lst = list(comb_with_rep)\n    return lst\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return [l[i:i + n] for i in range(0, len(l) - n + 1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    def helper(l,n,combo=()):\n        if len(combo)==n:\n            yield combo\n            return\n        for i in range(len(l)):\n            combo += (l[i],)\n            yield from helper(l[i+1:],n,combo)\n            combo = combo[:-1]\n    return list(helper(l,n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # l = [1, 2, 3]\n    # n = 2\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    comb = [tuple(i) for i in comb]\n    return comb\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = combinations_with_replacement(l, n)\n    res = []\n    for comb in combs:\n        res.append(comb)\n    return res\n    \nl = [1,2,3,4]\nn = 4\nprint(combinations_colors(l, n)"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [ tuple(combination) for i in range(len(l)) for combination in combinations_with_replacement(l, i) if len(combination) == n]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime = [True for i in range(n+1)]\n    prime[0] = False\n    prime[1] = False\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<=0:\n        raise ValueError(\"ERROR!\\nPlease pass positive numbers to the function.\")\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    else:\n        primes=2\n        i=2\n        while i<n:\n            for j in range(2,i):\n                if i%j==0:\n                    i=i+1\n                    break\n            else:\n                primes=primes+1\n                i=i+1\n        return primes\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n < 2:\n        return 0\n    for x in range(1, n+1):\n        if x <= 1:\n            continue\n        if x == 2 or x == 3 or x == 5 or x == 7:\n            count += 1\n            continue\n        if x % 2 == 0 or x % 3 == 0 or x % 5 == 0 or x % 7 == 0:\n            continue\n        count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        primes = [2]\n        for i in range(3, n+1):\n            for p in primes:\n                if i % p == 0:\n                    break\n            else:\n                primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1:\n        return 0\n    else:\n        prime = 1\n        for i in range(2, n):\n            if i % 2 == 0:\n                prime += 1\n    return prime\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #variables\n    prime_count = 0\n    num = 0\n    #loops\n    while num < n:\n        num += 1\n        prime_count += count_Prime(num)\n    return prime_count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(2*i, n, i):\n                primes[j] = False\n    return sum(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    nums = [x for x in range(1, n+1)]\n    print(nums)\n    for num in nums:\n        if num!= 2:\n            nums[num] = False\n            if num % 2 == 0:\n                nums[num] = False\n            else:\n                for x in range(3, int(math.sqrt(num))+1, 2):\n                    if num % x == 0:\n                        nums[num] = False\n                        break\n    return nums.count(True)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if (n<=2):\n        return 0\n    if (n==3):\n        return 1\n    if (n%2==0 or n%3==0):\n        return 0\n    i=5\n    while(i*i<n):\n        if (n%i==0 or n%(i+2)==0):\n            return 0\n        i=i+6\n    return 1\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp_2(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        num_list[0]=1\n        num_list[1]=1\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp_3(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        num_list[0]=1\n        num_list[1]=1\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp_4(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        num_list[0]=1\n        num_list[1]=1\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp_5(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        num_list[0]=1\n        num_list[1]=1\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp_6(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        num_list[0]=1\n        num_list[1]=1\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp_7(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        num_list[0]=1\n        num_list[1]=1\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp_8(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        num_list[0]=1\n        num_list[1]=1\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp_9(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        num_list[0]=1\n        num_list[1]=1\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp_10(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        num_list[0]=1\n        num_list[1]=1\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp_11(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        num_list[0]=1\n        num_list[1]=1\n        count=2\n        while count<n:\n            num_list.append(count)\n            count+=1\n        return len(num_list)\n        \ndef count_Primes_nums_dp_12(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list=[]\n    num_list.append(1)\n    num_list.append(1)\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        num_list[0]=1\n        num_list"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n    \ndef take_initials(fullname):\n    '''\n    Write a function that takes in a full name and returns the first initial of the name.\n    '''\n    initial = fullname[0].upper()\n    return initial\n    \ndef count_words(string_list):\n    '''\n    Write a function that takes in a list of strings and returns the length of the longest one.\n    '''\n    string_length = 0\n    for string in string_list:\n        if len(string) > string_length:\n            string_length = len(string)\n    return string_length\n    \ndef get_letters(n):\n    '''\n    Write a function that takes in a number and returns a list of the number of letters in each word in the Fibonacci sequence up to and including that number.\n    '''\n    fib_list = [0,1]\n    for num in range(n-1):\n        fib_list.append(fib_list[-1]+fib_list[-2])\n    return [len(str(i)) for i in fib_list]\n    \ndef pig_latin(word):\n    '''\n    Write a function that takes in a word in English and returns the word in Pig Latin.\n    '''\n    vowels = ['a','e','i','o','u']\n    if word[0] in vowels:\n        return word+'way'\n    return word[1:]+word[0]+'ay'\n    \ndef remove_from_list(lst, val):\n    '''\n    Write a function that takes in a list and a number and returns a list with all of the numbers removed from the original list.\n    '''\n    return [i for i in lst if i!= val]\n    \ndef multiply_by_three(num):\n    '''\n    Write a function that takes in a number and returns a list of all the numbers that have 3 as a factor up to and including the number.\n    '''\n    return [i for i in range(num) if num%3==0]\n    \ndef add_all_even_numbers(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the even numbers in the list.\n    '''\n    return sum([i for i in numbers if i%2==0])\n    \ndef split_into_two_strings(string):\n    '''\n    Write a function that takes in a string and returns a tuple with the first half of the string and the second half of the string.\n    '''\n    return string[:len(string)/2],string[len(string)/2:]\n    \ndef get_last_four(nums_list):\n    '''\n    Write a function that takes in a list of numbers and returns only the last four elements of the list.\n    '''\n    return nums_list[-4:]\n    \ndef string_bits(string):\n    '''\n    Write a function that takes in a string and returns a list with the string split into individual characters.\n    '''\n    return [char for char in string]\n    \ndef count_upper_lower(string):\n    '''\n    Write a function that takes in a string and returns a tuple with the total number of uppercase and lowercase letters.\n    '''\n    lower_count = 0\n    upper_count = 0\n    for letter in string:\n        if letter.isupper():\n            upper_count += 1\n        elif letter.islower():\n            lower_count += 1\n        else:\n            pass\n    return (lower_count,upper_count)\n    \ndef multiply_even_numbers(lst):\n    '''\n    Write a function that takes in a list of numbers and returns the product of all the even numbers in the list.\n    '''\n    product = 1\n    for num in lst:\n        if num%2==0:\n            product *= num\n    return product\n    \ndef capitalize(string):\n    '''\n    Write a function that takes in a string and returns the same string with the first character capitalized.\n    '''\n    return string[0].upper()+string[1:]\n    \ndef concatenate(string_1, string_2):\n    '''\n    Write a function that takes in two strings and returns the second string right after the first string.\n    '''\n    return string_1+string_2\n    \ndef get_greeting(name):\n    '''\n    Write a function that takes in a name and returns a greeting.\n    '''\n    return \"Hello, \" + name + \"!\"\n    \ndef count_evens(lst):\n    '''\n    Write a function that takes in a list of numbers and returns the number of even numbers in the list.\n    '''\n    return len([i for i in lst if i%2==0])\n    \ndef is_palindrome(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    return string == string[::-1]\n    \ndef get_key_from_value(dictionary,val):\n    '''\n    Write a function that takes in a dictionary and a value and returns the corresponding key in the dictionary.\n    '''\n    for key in dictionary.keys():\n        if dictionary[key] == val:\n            return key\n        \ndef remove_from_list_by_value(lst, val):\n    '''\n    Write a function that takes in a list of numbers and a number and returns a list with all of the numbers in the list that are not equal to the number.\n    '''\n    return [i for i in lst if i!= val]\n    \ndef sum_of_two_evens(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the even numbers in the list.\n    '''\n    return sum([num for num in numbers if num%2==0])\n    \ndef sum_of_three_multiples(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the numbers in the list that are evenly divisible by 3.\n    '''\n    return sum([num for num in numbers if num%3==0])\n    \ndef sum_of_three_odds(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the numbers in the list that are evenly divisible by 3.\n    '''\n    return sum([num for num in numbers if num%2!=0])\n    \ndef get_factors(number):\n    '''\n    Write a function that takes in a number and returns a list of all the numbers that divide evenly into the number.\n    '''\n    return [num for num in range(1,number+1) if number%num==0]\n    \ndef get_next_prime(number):\n    '''\n    Write a function that takes in a number and returns the next prime after the number.\n    '''\n    while not is_prime(number):\n        number += 1\n    return number\n    \ndef get_next_prime_in_list(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns a list with the next prime number after each number in the list.\n    '''\n    return [get_next_prime(num) for num in numbers]\n    \ndef is_prime(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime and False otherwise.\n    '''\n    if number == 1:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2,number):\n            if number % i == 0:\n                return False\n        return True\n    \ndef filter_primes(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns a list of only the prime numbers in the list.\n    '''\n    return [num for num in numbers if is_prime(num)]\n    \ndef get_odd_factors(number):\n    '''\n    Write a function that takes in a number and returns a list of the odd numbers that are factors of the number.\n    '''\n    return [num for num in range(1,number+1) if number%num==0 and num%2!=0]\n    \ndef get_sum_of_digits(number):\n    ''"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x = a\n    y = b\n    return (y,x)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a < b:\n        return(b,a)\n    else:\n        return(a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = 0\n    max2 = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n        if test_tup2[i] > max2:\n            max2 = test_tup2[i]\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if(len(test_tup1)!= len(test_tup2)):\n        return False\n    # print(test_tup1)\n    # print(test_tup2)\n    # print(test_tup1)\n    # print(test_tup2)\n    return max_elem(test_tup1, test_tup2)\n    \n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elements_tuple = None\n    max_elements_tuple = test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # print(test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1])\n    return test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1]\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print('(maximize_elements): test_tup1: {}, test_tup2: {}'.format(test_tup1, test_tup2))\n    tup1_sorted = list(sorted(test_tup1, reverse=True))\n    tup2_sorted = list(sorted(test_tup2, reverse=True))\n    sum_max_1 = 0\n    for i in range(0, len(tup1_sorted)):\n        sum_max_1 += tup1_sorted[i]*tup2_sorted[i]\n    sum_max_2 = 0\n    for i in range(0, len(tup2_sorted)):\n        sum_max_2 += tup2_sorted[i]*tup1_sorted[i]\n    if sum_max_1 > sum_max_2:\n        return sum_max_1\n    else:\n        return sum_max_2\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    else:\n        max_tup = ()\n        for i in range(0, len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                max_tup += (test_tup1[i],)\n            else:\n                max_tup += (test_tup2[i],)\n        return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_val = test_tup1[i]\n        elif test_tup2[i] > test_tup1[i]:\n            max_val = test_tup2[i]\n        else:\n            max_val = max_val\n    return max_val\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # finding the number of primes to the limit \n    def eratosthenes_sieve(limit):\n        nums = []\n        for i in range(2, limit + 1):\n            nums.append(i)\n        for i in range(2, limit + 1):\n            if i in nums:\n                for j in range(i * i, limit + 1, i):\n                    if j in nums:\n                        nums.remove(j)\n        return nums\n    primes = eratosthenes_sieve(n)\n    return primes[n - 1]\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    from itertools import count\n    from functools import reduce\n    from operator import mul\n    from prime_tools import is_prime\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def newman_prime_helper(n, p):\n        if n == 0:\n            return p\n        elif n == 1:\n            return p - 1\n        else:\n            return newman_prime_helper(n - 1, (p - 1)**2)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #create a list of primes from 0 to n\n    primes = sieve_eratosthenes(n)\n    #find the index of the nth prime in the list\n    index = primes.index(n)\n    #find the next prime number after the nth prime\n    next_prime = primes[index + 1]\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a=0\n    d=1\n    while(d!=n):\n        a+=1\n        if is_prime(a):\n            d+=1\n    return a\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 0:\n        return 0\n    \n    if n < 3:\n        return 2\n    \n    n = n - 1\n    prime_num = 0\n    prime_num = nth_prime_num(n,prime_num)\n    return prime_num\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n > 0\n    assert isinstance(n, int)\n    # initialize a list of primes to evaluate\n    primes = [2]\n    for i in range(3, n+1, 2):\n        # determine whether i is prime\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n            if p > math.sqrt(i):\n                break\n        if is_prime:\n            primes.append(i)\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt, ceil\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n%2 == 0 or n%3 == 0:\n            return False\n        i = 5\n        while i*i <= n:\n            if n%i == 0 or n%(i+2) == 0:\n                return False\n            i += 6\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # base case\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    # create a list of primes\n    primes = [2, 3]\n    # initialize a counter\n    i = 4\n    # find the i-th newman\u2013shanks\u2013williams prime\n    while len(primes) < n:\n        # if i-th prime is not divisible by any i-1th prime\n        if is_prime(i):\n            # if i-th prime is divisible by any i-1th prime, add it to the list and continue\n            for j in primes:\n                if i % j == 0:\n                    break\n            else:\n                primes.append(i)\n        i += 2\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def nth_prime_number(n):\n        i=2\n        count = 0\n        while True:\n            if is_prime(i):\n                count+=1\n            if count == n:\n                return i\n            i+=1\n    \n    def is_prime(n):\n        if n==2:\n            return True\n        if n%2==0 or n==1:\n            return False\n        for i in range(3,int(sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\n    \n    def sqrt(n):\n        return int(n**(1/2))\n    \n    prime_numbers = [2,3]\n    while len(prime_numbers)<n:\n        prime_numbers.append(nth_prime_number(len(prime_numbers)+1))\n    return prime_numbers[n-1]\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]/test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        test_tup3 = ()\n        for i in range(len(test_tup1)):\n            test_tup3 = test_tup3 + ((test_tup1[i]/test_tup2[i]),)\n        return test_tup3\n    except TypeError:\n        return ('Please enter valid tuples')\n        \nprint('division_elements((), ()) =', division_elements((), ()), sep = '\\n')\nprint('division_elements((), (1, 2, 3)) =', division_elements((), (1, 2, 3)), sep = '\\n')\nprint('division_elements((1, 2, 3), ()) =', division_elements((1, 2, 3), ()), sep = '\\n')\nprint('division_elements((1, 2, 3), (1, 2, 3)) =', division_elements((1, 2, 3), (1, 2, 3)), sep = '\\n')\nprint('division_elements((1, 2, 3), (4, 5, 6)) =', division_elements((1, 2, 3), (4, 5, 6)), sep = '\\n')\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a/b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        result = tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n        return result\n    except ZeroDivisionError:\n        raise DivisionByZeroError\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        result = tuple(map(lambda i, j: i / j, test_tup1, test_tup2))\n    except ZeroDivisionError:\n        print(\"Cannot divide by 0\")\n        result = None\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] is not 0:\n            result = result + (test_tup1[i]/test_tup2[i],)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    try:\n        for i in range(len(test_tup1)):\n            result += (test_tup1[i] / test_tup2[i],)\n    except ZeroDivisionError:\n        return 'Zero division error'\n    else:\n        return result\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(i / j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(0, len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Method 1\n    # Runtime: O(n)\n    # Spacin: O(n)\n    # def split_two_parts(L,list1):\n    #     if len(list1)<L:\n    #         return None\n    #     else:\n    #         return list1[0:L],list1[L:]\n    \n    # Method 2\n    # Runtime: O(n)\n    # Spacin: O(1)\n    # def split_two_parts(L,list1):\n    #     if len(list1)<L:\n    #         return None\n    #     else:\n    #         return list1[0:L],list1[L:]\n    # Method 3\n    # Runtime: O(n)\n    # Spacin: O(1)\n    # def split_two_parts(L,list1):\n    #     if len(list1)<L:\n    #         return None\n    #     else:\n    #         return list1[:L],list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L >= len(list1):\n        return ([list1], [])\n    elif L == 0:\n        return ([], [])\n    elif L == len(list1):\n        return ([list1], [])\n    else:\n        list1_left = list1[:L]\n        list1_right = list1[L:]\n        return (list1_left, list1_right)\n    \n    \ndef index_into_list(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and returns the list sliced at index L.\n    '''\n    return list1[L:]\n    \n    \ndef get_letter(string, letter):\n    '''\n    Write a function that takes in a string and a character and returns the index of the first occurence of that character in the given string, if it exists. Return -1 otherwise.\n    '''\n    return string.index(letter) if letter in string else -1\n    \n    \ndef reverse(list1):\n    '''\n    Write a function that takes in a list and returns the reverse of the given list.\n    '''\n    list1.reverse()\n    return list1\n    \n    \ndef is_odd(num):\n    '''\n    Write a function that takes in a number and returns True if the given number is odd, and False otherwise.\n    '''\n    return num % 2 == 1\n    \n    \ndef is_even(num):\n    '''\n    Write a function that takes in a number and returns True if the given number is even, and False otherwise.\n    '''\n    return num % 2 == 0\n    \n    \ndef sum_of_integers(num):\n    '''\n    Write a function that takes in a number and returns the sum of all integers up to and including the given number.\n    '''\n    return sum(range(num + 1))\n    \n    \ndef sum_of_odds(num):\n    '''\n    Write a function that takes in a number and returns the sum of all odd integers up to and including the given number.\n    '''\n    return sum(range(1, num + 1, 2))\n    \n    \ndef sum_of_evens(num):\n    '''\n    Write a function that takes in a number and returns the sum of all even integers up to and including the given number.\n    '''\n    return sum(range(0, num + 1, 2))\n    \n    \ndef square(num):\n    '''\n    Write a function that takes in a number and returns that number squared.\n    '''\n    return num ** 2\n    \n    \ndef factorial(num):\n    '''\n    Write a function that takes in a number and returns the factorial of the number.\n    '''\n    return reduce(lambda x, y: x * y, range(1, num + 1))\n    \n    \ndef sum_of_squares(num):\n    '''\n    Write a function that takes in a number and returns the sum of the squares of all integers up to and including the given number.\n    '''\n    return sum(map(lambda x: x ** 2, range(num + 1)))\n    \n    \ndef number_of_evens(num):\n    '''\n    Write a function that takes in a number and returns the number of even integers up to and including the given number.\n    '''\n    return sum(1 for x in range(num + 1) if x % 2 == 0)\n    \n    \ndef number_of_odds(num):\n    '''\n    Write a function that takes in a number and returns the number of odd integers up to and including the given number.\n    '''\n    return sum(1 for x in range(num + 1) if x % 2 == 1)\n    \n    \ndef number_of_divisible_by(num, divisor):\n    '''\n    Write a function that takes in two numbers and returns the number of integers that are divisible by the given divisor between the two given numbers (inclusive).\n    '''\n    return sum(1 for x in range(num + 1) if x % divisor == 0)\n    \n    \ndef string_position(string, sub):\n    '''\n    Write a function that takes in two strings and returns the index of the first occurence of the second string within the first string. If there are no occurrences, then return -1.\n    '''\n    return string.find(sub)\n    \n    \ndef number_of_occurences(string, sub):\n    '''\n    Write a function that takes in two strings and returns the number of times the second string occurs within the first string.\n    '''\n    return string.count(sub)\n    \n    \ndef list_first_index(list1, target):\n    '''\n    Write a function that takes in a list and a target element and returns the index of the first occurence of the target element within the given list. Return -1 if there is no occurence of the target element.\n    '''\n    try:\n        return list1.index(target)\n    except ValueError:\n        return -1\n    \n    \ndef list_last_index(list1, target):\n    '''\n    Write a function that takes in a list and a target element and returns the index of the last occurence of the target element within the given list. Return -1 if there is no occurence of the target element.\n    '''\n    try:\n        return list1[::-1].index(target)\n    except ValueError:\n        return -1\n    \n    \ndef list_occurence(list1, target):\n    '''\n    Write a function that takes in a list and a target element and returns the number of occurences of the target element within the given list.\n    '''\n    return list1.count(target)\n    \n    \ndef list_remove_last(list1):\n    '''\n    Write a function that takes in a list and removes the last element of the list and returns it.\n    '''\n    last_element = list1[-1]\n    del list1[-1]\n    return last_element\n    \n    \ndef list_insert(list1, index, element):\n    '''\n    Write a function that takes in a list, an index, and an element and inserts the element into the list at the given index, shifting all other elements to the right.\n    '''\n    list1.insert(index, element)\n    return list1\n    \n    \ndef list_pop(list1):\n    '''\n    Write a function that takes in a list and removes the last element from the list and returns it.\n    '''\n    return list1.pop()\n    \n    \ndef list_shift(list1):\n    '''\n    Write a function that takes in a list and shifts all elements in the list right by one, shifting the last element to the first position.\n    '''\n    last_element = list1[-1]\n    del list1[-1]\n    list1.insert(0, last_element)\n    return list1\n    \n    \ndef list_mixed_sorted(list1):\n    '''\n    Write a function that takes in a list and returns a list with all elements in sorted order except for the last element.\n    '''\n    sorted_list = sorted(list1)\n    last_element = sorted_list[-1]\n    del sorted_list[-1]\n    sorted_list.insert(0, last_element)\n    return sorted_list\n    \n    \ndef list_sorted_dec(list1):\n    '''\n    Write a function that takes in a list and returns a list with all elements in sorted order from highest to lowest.\n    '''\n    sorted_list = sorted(list1, reverse = True)\n    return sorted_list\n    \n    \ndef list_sorted_inc(list1):\n    '''\n    Write a function that takes in a list and returns a list with all elements in sorted order from lowest to highest.\n    '''\n    sorted_list = sorted(list1)\n    return sorted_list\n    \n    \ndef list_concatenation(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the concatenation of the two lists.\n    '''\n    return list1 + list2\n    \n    \ndef list_map(list1, function):\n    '''"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    if len(list1) > L:\n        list2 = list1[L:]\n        list1 = list1[:L]\n    elif len(list1) == L:\n        list2 = []\n    elif len(list1) < L:\n        list2 = list1[len(list1):]\n        list1 = list1[:len(list1)]\n    return list1, list2\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1.sort()\n    first_list = []\n    second_list = []\n    for i in range(0, len(list1), L):\n        first_list.append(list1[i])\n    for i in range(L, len(list1), L):\n        second_list.append(list1[i])\n    return (first_list, second_list)\n    \ndef get_part_one(list1):\n    '''\n    Write a function that takes in a list and returns the first element of the list.\n    '''\n    list1.sort()\n    return list1[0]\n    \ndef get_part_two(list1):\n    '''\n    Write a function that takes in a list and returns the last element of the list.\n    '''\n    list1.sort()\n    return list1[-1]\n    \ndef get_part_three(list1):\n    '''\n    Write a function that takes in a list and returns all elements of the list except the first two.\n    '''\n    list1.sort()\n    return list1[2:]\n    \ndef get_part_four(list1):\n    '''\n    Write a function that takes in a list and returns all elements of the list except the last two.\n    '''\n    list1.sort()\n    return list1[:-2]\n    \ndef get_part_five(list1):\n    '''\n    Write a function that takes in a list and returns the elements of the list with even indices.\n    '''\n    list1.sort()\n    even_indices = []\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            even_indices.append(list1[i])\n    return even_indices\n    \ndef get_part_six(list1):\n    '''\n    Write a function that takes in a list and returns the elements of the list with odd indices.\n    '''\n    list1.sort()\n    odd_indices = []\n    for i in range(0, len(list1)):\n        if i % 2 == 1:\n            odd_indices.append(list1[i])\n    return odd_indices\n    \ndef get_part_seven(list1):\n    '''\n    Write a function that takes in a list and returns the product of the first and last elements.\n    '''\n    list1.sort()\n    product = 1\n    for i in list1:\n        product *= i\n    return product\n    \ndef get_part_eight(list1):\n    '''\n    Write a function that takes in a list and returns the average of all the elements of the list.\n    '''\n    list1.sort()\n    average = 0\n    for i in list1:\n        average += i\n    return average/len(list1)\n    \ndef get_part_nine(list1):\n    '''\n    Write a function that takes in a list and returns a new list where all elements are the given element removed.\n    '''\n    list1.sort()\n    list2 = []\n    for i in list1:\n        if i!= list1[0]:\n            list2.append(i)\n    return list2\n    \ndef get_part_ten(list1):\n    '''\n    Write a function that takes in a list and returns a list with all instances of the given element removed.\n    '''\n    list1.sort()\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\n    \ndef get_part_eleven(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the length of the longest sequence of numbers that appear in the list.\n    '''\n    list1.sort()\n    list2 = []\n    longest_sequence_length = 0\n    for i in range(0, len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n        else:\n            if len(list2) > longest_sequence_length:\n                longest_sequence_length = len(list2)\n            list2 = []\n            list2.append(list1[i])\n    if len(list2) > longest_sequence_length:\n        longest_sequence_length = len(list2)\n    return longest_sequence_length\n    \ndef get_part_twelve(list1):\n    '''\n    Write a function that takes in a list and returns True if the list contains an element that appears more than once. Otherwise, return False.\n    '''\n    list1.sort()\n    for i in range(0, len(list1)-1):\n        if list1[i] == list1[i+1]:\n            return True\n    return False\n    \ndef get_part_thirteen(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all elements that are greater than their index, e.g. if the list is [4,2,1,5,3] then this function returns 17 because 4 + 2 + 1 + 5 = 17 and does not include elements that appear more than once in the list.\n    '''\n    list1.sort()\n    sum = 0\n    for i in list1:\n        if i > list1.index(i):\n            sum += i\n    return sum\n    \ndef get_part_fourteen(list1):\n    '''\n    Write a function that takes in a list and returns a tuple where the first element is the sum of all elements that appear more than once in the list, and the second element is the sum of all elements that do not appear more than once in the list.\n    '''\n    list1.sort()\n    seen = []\n    sum = 0\n    duplicates_sum = 0\n    for i in list1:\n        if i not in seen:\n            seen.append(i)\n        else:\n            sum += i\n            duplicates_sum += i\n    return (sum, duplicates_sum)\n    \ndef get_part_fifteen(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all elements that appear more than once in the list.\n    '''\n    list1.sort()\n    seen = []\n    duplicates_sum = 0\n    for i in list1:\n        if i not in seen:\n            seen.append(i)\n        else:\n            duplicates_sum += i\n    return duplicates_sum\n    \ndef get_part_sixteen(list1):\n    '''\n    Write a function that takes in a list and returns a tuple where the first element is the sum of all elements that appear more than once in the list, and the second element is the sum of all elements that do not appear more than once in the list.\n    '''\n    list1.sort()\n    seen = []\n    sum = 0\n    duplicates_sum = 0\n    for i in list1:\n        if i not in seen:\n            seen.append(i)\n        else:\n            sum += i\n            duplicates_sum += i\n    return (sum, duplicates_sum)\n    \ndef get_part_seventeen(list1):\n    '''\n    Write a function that takes in a list and returns a tuple where the first element is the sum of all elements that appear more than once in the list, and the second element is the sum of all elements that appear more than once in the list.\n    '''\n    list1.sort()\n    seen = []\n    duplicates_sum = 0\n    for i in list1:\n        if i not in seen:\n            seen.append(i)\n        else:\n            duplicates_sum += i\n    return (seen, duplicates_sum)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    size = len(list1)\n    L1 = list1[0:L]\n    L2 = list1[L:]\n    \n    return (L1, L2)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # code here\n    return (list1[0:L], list1[L:len(list1)])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1)%2 == 1:\n        list1.pop()\n    first_list = []\n    second_list = []\n    for i in range(L):\n        first_list.append(list1[i])\n    for j in range(L,len(list1)):\n        second_list.append(list1[j])\n    return first_list, second_list\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    first_part = []\n    second_part = []\n    for i in list1:\n        if len(first_part) == L:\n            return first_part, second_part\n        if len(first_part) < L:\n            first_part.append(i)\n        else:\n            second_part.append(i)\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    def split(L):\n        return L[:L//2], L[L//2:]\n    \n    if len(list1) < L:\n        return None\n    else:\n        return split(list1)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return ([list1[:L]], [list1[L:]])\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # h_age = float(input('Enter dog\\'s age in human years: '))\n    d_age = float(int(((h_age-2)*7)+21))\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age) is not int or h_age < 0:\n        return -1\n    return (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return ((h_age - 2) * 4) + 21\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return f\"Please enter a number greater than 0.\"\n    else:\n        return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age) == str:\n        print(\"Input was invalid, please try again.\")\n        return None\n    else:\n        dog_age = h_age * 7\n        return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if not (isinstance(h_age, int) or isinstance(h_age, float)):\n        raise ValueError\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 2:\n        print(f\"You've got a {h_age * 10} dog's year, ain't no dog person.\")\n    else:\n        print(f\"You've got a {(h_age - 2) * 10} dog's year, good boy.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n        \n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # define empty list\n    l = []\n    # for each element in the list, add to l the list from the nth element to the end\n    for i in range(0, len(S), step):\n        l.append(S[i:i+step])\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[step * i:step * (i + 1)] for i in range(0, len(S) // step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #return [S[i:i+n] for i in range(0, len(S), n)]\n    return list(split_every(n, S))\n    \ndef split_every(n, S):\n    if len(S) % n == 0:\n        yield [S[i] for i in range(0, len(S), n)]\n    else:\n        yield [S[i] for i in range(0, len(S) - (len(S) % n) + n, n)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) <= step:\n        return [[S[0]]]\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    list_split = []\n    for i in range(0, len(S), step):\n        list_split.append(S[i:i+step])\n    return list_split\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_out = []\n    if step <= len(S):\n        list_out.append(S[0:step])\n        list_out += list_split(S[step:len(S)], step)\n    return list_out\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # your code here\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print('{:.2f}'.format(l*6))\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\ndef verticalsurface_cube(l):\n    '''\n    Write a function to find the vertical surface area of a cube given its side length.\n    '''\n    return 2*l**2\ndef verticalsurface_cube(l):\n    '''\n    Write a function to find the vertical surface area of a cube given its side length.\n    '''\n    return 2*l**2\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    return 2*r*(r+h)\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    return 2*r*(r+h)\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    return 2*r*h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    return 2*r*h\ndef verticalsurface_cylinder(r,h):\n    '''\n    Write a function to find the vertical surface area of a cylinder given its radius and height.\n    '''\n    return 2*r*2*h\ndef verticalsurface_cylinder(r,h):\n    '''\n    Write a function to find the vertical surface area of a cylinder given its radius and height.\n    '''\n    return 2*r*2*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    return 3.141592*(r**2)*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    return 3.141592*(r**2)*h\ndef surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and height.\n    '''\n    return 3.141592*(r**2)+3.141592*r*h\ndef surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and height.\n    '''\n    return 3.141592*(r**2)+3.141592*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and height.\n    '''\n    return 3.141592*(r**2)+3.141592*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and height.\n    '''\n    return 3.141592*(r**2)+3.141592*r*h\ndef verticalsurface_cone(r,h):\n    '''\n    Write a function to find the vertical surface area of a cone given its radius and height.\n    '''\n    return r*3.141592\ndef verticalsurface_cone(r,h):\n    '''\n    Write a function to find the vertical surface area of a cone given its radius and height.\n    '''\n    return r*3.141592\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    return 3.141592*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    return 3.141592*(r**2)*h\ndef surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*3.141592*r**2\ndef surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*3.141592*r**2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*3.141592*r**2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*3.141592*r**2\ndef verticalsurface_sphere(r):\n    '''\n    Write a function to find the vertical surface area of a sphere given its radius.\n    '''\n    return 4*3.141592*(r**2)\ndef verticalsurface_sphere(r):\n    '''\n    Write a function to find the vertical surface area of a sphere given its radius.\n    '''\n    return 4*3.141592*(r**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    return (4/3)*3.141592*(r**3)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    return (4/3)*3.141592*(r**3)\ndef surface_hemisphere(r):\n    '''\n    Write a function to find the lateral surface area of a hemisphere given its radius.\n    '''\n    return 4*3.141592*(r**2)\ndef surface_hemisphere(r):\n    '''\n    Write a function to find the lateral surface area of a hemisphere given its radius.\n    '''\n    return 4*3.141592*(r**2)\ndef lateralsurface_hemisphere(r):\n    '''\n    Write a function to find the lateral surface area of a hemisphere given its radius.\n    '''\n    return 4*3.141592*(r**2)\ndef lateralsurface_hemisphere(r):\n    '''\n    Write a function to find the lateral surface area of a hemisphere given its radius.\n    '''\n    return 4*3.141592*(r**2)\ndef verticalsurface_hemisphere(r):\n    '''\n    Write a function to find the vertical surface area of a hemisphere given its radius.\n    '''\n    return 4*3.141592*(r**2)\ndef verticalsurface_hemisphere(r):\n    '''\n    Write a function to find the vertical surface area of a hemisphere given its radius.\n    '''\n    return 4*3.141592*(r**2)\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere given its radius.\n    '''\n    return (4/3)*3.141592*(r**3)\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere given its radius.\n    '''\n    return (4/3)*3.141592*(r**3)\ndef surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and height.\n    '''\n    return (r**2+h**2)**0.5\ndef surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and height.\n    '''\n    return (r**2+h**2)**0.5\ndef lateralsurface_cone(r,h):\n    '''\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral_surface = (2 * l ** 2) + (6 * l ** 2)\n    print(\"The lateral surface area of a cube with side length {} is {}\".format(l, lateral_surface))\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def area(a):\n        return a**2\n    return l*l*6\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side_length = l\n    # calculate lateral surface area\n    side_surface_area = 6 * (side_length ** 2)\n    # return lateral surface area\n    return side_surface_area\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Formula for lateral surface area of cube = 6 * b * h\n    # Formula for lateral surface area of cube = 6 * a^2\n    lateral_surface_area = 6 * l**2\n    return lateral_surface_area\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    sideLength = l\n    surfaceArea = 6*sideLength**2\n    \n    return surfaceArea\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Implement your code here\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(1,n+1,2)])\n    \n    \n    \n    \n    \ndef reverse_Number(n):\n    '''\n    Write a python function that takes in an integer n and returns the reverse of n.\n    '''\n    return int(str(n)[::-1])\n    \n    \n    \n    \ndef is_Lucky(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a lucky number, False otherwise.\n    '''\n    num = n\n    sum = 0\n    while num > 0:\n        sum += (num % 10)\n        num //= 10\n    return sum == n\n    \n    \n    \n    \ndef is_Prime(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a prime number, False otherwise.\n    '''\n    if n == 2:\n        return True\n    if n % 2 == 0 or n < 2:\n        return False\n    for divisor in range(3, int(n ** 0.5) + 1, 2):\n        if n % divisor == 0:\n            return False\n    return True\n    \n    \n    \n    \ndef is_Palindrome(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a palindrome, False otherwise.\n    '''\n    return str(n) == str(n)[::-1]\n    \n    \n    \n    \ndef is_Armstrong(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is an Armstrong number, False otherwise.\n    '''\n    return sum([int(x) ** len(str(n)) for x in str(n)]) == n\n    \n    \n    \n    \ndef print_Triangular_Number(n):\n    '''\n    Write a python function that prints the first n triangular numbers.\n    '''\n    for i in range(1,n+1):\n        print(int((i*(i+1))/2))\n        \n        \n        \n        \ndef print_Consecutive_Primes(n):\n    '''\n    Write a python function that prints all the primes (up to n) that are the sum of consecutive prime numbers.\n    '''\n    p = 2\n    while p < n:\n        for i in range(2,n):\n            if is_Prime(i) and is_Prime(p + i):\n                print(p + i)\n        p += 1\n        \n        \n        \ndef print_Non_Consecutive_Primes(n):\n    '''\n    Write a python function that prints all the primes (up to n) that are not the sum of consecutive prime numbers.\n    '''\n    p = 2\n    while p < n:\n        for i in range(2,n):\n            if is_Prime(i) and not is_Prime(p + i):\n                print(p + i)\n        p += 1\n        \n        \n        \ndef print_All_Prime_Numbers(n):\n    '''\n    Write a python function that prints all the prime numbers up to n.\n    '''\n    for i in range(2,n+1):\n        if is_Prime(i):\n            print(i)\n            \n            \n            \ndef is_Perfect(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is perfect, False otherwise.\n    '''\n    sum = 1\n    for i in range(2,n):\n        if n % i == 0:\n            sum += i\n    return sum == n\n    \n    \n    \n    \ndef print_All_Perfect_Numbers(n):\n    '''\n    Write a python function that prints all the perfect numbers up to n.\n    '''\n    for i in range(1,n):\n        if is_Perfect(i):\n            print(i)\n            \n            \n            \ndef print_All_Fibonacci_Numbers(n):\n    '''\n    Write a python function that prints all the fibonacci numbers up to n.\n    '''\n    x,y = 0,1\n    while x < n:\n        print(x)\n        x,y = y,x+y\n        \n        \n        \ndef print_Fibonacci_Sequence(n):\n    '''\n    Write a python function that prints the first n fibonacci numbers.\n    '''\n    x,y = 0,1\n    for i in range(0,n):\n        print(x)\n        x,y = y,x+y\n        \n        \n        \ndef print_Factorial(n):\n    '''\n    Write a python function that prints the factorial of a number.\n    '''\n    prod = 1\n    for i in range(1,n+1):\n        prod *= i\n    print(prod)\n    \n    \n    \ndef print_Facts(n):\n    '''\n    Write a python function that prints the prime factorization of a number.\n    '''\n    num = n\n    while num > 1:\n        for i in range(2,int(num+1)):\n            if num % i == 0 and is_Prime(i):\n                num //= i\n                print(i)\n                break\n    \n    \n    \ndef print_Fibonacci_Pairs(n):\n    '''\n    Write a python function that prints all the fibonacci pairs less than n.\n    '''\n    x,y = 0,1\n    for i in range(0,n):\n        print(x)\n        x,y = y,x+y\n        \n        \n        \ndef print_Factorial_Recursive(n):\n    '''\n    Write a python function that prints the factorial of a number recursively.\n    '''\n    if n == 1:\n        print(n)\n        return\n    print(n*print_Factorial_Recursive(n-1))\n    \n    \n    \ndef print_Facts_Recursive(n):\n    '''\n    Write a python function that prints the prime factorization of a number recursively.\n    '''\n    if n == 1:\n        return\n    print_Facts_Recursive(n-1)\n    for i in range(2,int(n+1)):\n        if n % i == 0 and is_Prime(i):\n            print(i)\n            return\n            \n            \n            \ndef print_Fibonacci_Pairs_Recursive(n):\n    '''\n    Write a python function that prints all the fibonacci pairs less than n recursively.\n    '''\n    if n <= 1:\n        return\n    print_Fibonacci_Pairs_Recursive(n-1)\n    print(n)\n    \n    \n    \ndef print_Factorial_Recursive_With_Memoization(n):\n    '''\n    Write a python function that prints the factorial of a number recursively with memoization.\n    '''\n    memo = {}\n    if n == 1:\n        print(n)\n        return\n    if n not in memo:\n        memo[n] = n*print_Factorial_Recursive_With_Memoization(n-1)\n    print(memo[n])\n    \n    \n    \ndef print_Facts_Recursive_With_Memoization(n):\n    '''\n    Write a python function that prints the prime factorization of a number recursively with memoization.\n    '''\n    memo = {}\n    if n == 1:\n        return\n    if n not in memo:\n        memo[n] = print_Facts_Recursive_With_Memoization(n-1)\n    for i in memo[n]:\n        print(i)\n        return\n        \n        \n        \ndef print_Fibonacci_Pairs_Recursive_With_Memoization(n):\n    '''\n    Write a python function that prints all the fibonacci pairs less than n recursively with memoization.\n    '''\n    memo = {}\n    if n <= 1:\n        return\n    if n not in memo:\n        memo[n] = print_Fibonacci_Pairs_Recursive_With_Memoization(n-1)\n    print(memo[n])\n    \n    \n    \ndef prin"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n+1):\n        sum += x ** 2\n    return sum\nprint(square_Sum(5))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(list(range(1, n+1, 2))**2)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return (n*(n+1)//2)**2\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    assert isinstance(n,int)\n    assert n >= 1\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # n = int(input(\"enter a number: \"))\n    s = 0\n    for i in range(1,n+1,2):\n        s = s + i*i\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    if n > 0:\n        for i in range(1, n + 1):\n            total += i * i\n    return total\n    \n    \ndef polysum(n, s):\n    '''\n    Write a python function to return the sum of the area and square of the perimeter of a regular polygon.\n    '''\n    area = (0.25 * n * s * s) / (math.tan(math.pi / n))\n    perimeter = n * s\n    return area + perimeter * perimeter\n    \n    \ndef season(month):\n    '''\n    Write a python function that takes in a month number and returns the season of the year.\n    '''\n    if month in (12, 1, 2):\n        return \"Winter\"\n    elif month in (3, 4, 5):\n        return \"Spring\"\n    elif month in (6, 7, 8):\n        return \"Summer\"\n    elif month in (9, 10, 11):\n        return \"Fall\"\n    else:\n        return \"Not a valid month number\"\n    \n    \ndef slope(x1, y1, x2, y2):\n    '''\n    Write a python function to take in two x, y coordinates and return the slope of the line connecting them.\n    '''\n    return ((y2 - y1) / (x2 - x1))\n    \n    \ndef circle_area(r):\n    '''\n    Write a python function to take in a radius and return the area of a circle with that radius.\n    '''\n    area = math.pi * r * r\n    return area\n    \n    \ndef temp_converter(temp, unit):\n    '''\n    Write a python function that takes in a temperature in farenheit and returns the equivalent temperature in celsius.\n    '''\n    if unit.lower() == \"f\":\n        celsius = ((temp - 32) * 5) / 9\n    elif unit.lower() == \"c\":\n        celsius = (temp * 9) / 5 + 32\n    else:\n        print(\"Invalid unit\")\n    return celsius\n    \n    \ndef is_even(n):\n    '''\n    Write a python function to check if a number is even.\n    '''\n    if n % 2 == 0:\n        return True\n    return False\n    \n    \ndef is_odd(n):\n    '''\n    Write a python function to check if a number is odd.\n    '''\n    if n % 2!= 0:\n        return True\n    return False\n    \n    \ndef is_divisible(n, d):\n    '''\n    Write a python function to check if a number is divisible by another number.\n    '''\n    if n % d == 0:\n        return True\n    return False\n    \n    \ndef is_between(a, b, c):\n    '''\n    Write a python function to check if a number is between two other numbers.\n    '''\n    if a < b and b < c:\n        return True\n    return False\n    \n    \ndef is_leap_year(year):\n    '''\n    Write a python function to check if a year is leap year.\n    '''\n    if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n        return True\n    return False\n    \n    \ndef is_consecutive(items):\n    '''\n    Write a python function to check if an array of numbers is consecutive, meaning that they are all in order and no number is repeated.\n    '''\n    for i in range(len(items) - 1):\n        if items[i] + 1!= items[i + 1]:\n            return False\n    return True\n    \n    \ndef is_sum_even(n):\n    '''\n    Write a python function to check if the sum of a series of numbers is even.\n    '''\n    total = 0\n    for i in range(n):\n        total += i\n    if total % 2 == 0:\n        return True\n    return False\n    \n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    return s == s[::-1]\n    \n    \ndef is_pangram(s):\n    '''\n    Write a python function to check if a string is a pangram.\n    '''\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    s = set(s)\n    s = set(string.ascii_lowercase)\n    return s == s\n    \n    \ndef is_power(a, b):\n    '''\n    Write a python function to check if a number is a power of another number.\n    '''\n    if a % b == 0:\n        return True\n    return False\n    \n    \ndef is_power_of_2(n):\n    '''\n    Write a python function to check if a number is a power of two.\n    '''\n    if n!= 0 and (n & (n - 1) == 0):\n        return True\n    return False\n    \n    \ndef my_func(n):\n    '''\n    Write a python function that takes in a number n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i * i\n    return total\n    \n    \ndef my_func(n):\n    '''\n    Write a python function that takes in a number n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n    \n    \ndef my_func(n):\n    '''\n    Write a python function that takes in a number n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n    \n    \ndef my_func(n):\n    '''\n    Write a python function that takes in a number n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n    \n    \ndef my_func(n):\n    '''\n    Write a python function that takes in a number n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n    \n    \ndef my_func(n):\n    '''\n    Write a python function that takes in a number n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n    \n    \ndef my_func(n):\n    '''\n    Write a python function that takes in a number n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n    \n    \ndef my_func(n):\n    '''\n    Write a python function that takes in a number n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n    \n    \ndef my_func(n):\n    '''\n    Write a python function that takes in a number n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n    \n    \ndef my_func(n):\n    '''\n    Write a python function that takes in a number n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n    \n    \ndef my_func(n):\n    '''\n    Write a python function that takes in a number n and returns the sum of the square"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        sum+=i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**2\n    return total\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n**3\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    for _ in range(1,n):\n        star_num += star_num\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 1\n    while (count <= n):\n        if (is_star(count)):\n            n -= 1\n        count += 1\n    return count - 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # 1st star number is always 1.\n    result = 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # assume that n is between 1 and 100\n    if n >= 100:\n        return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += find_star_num(i)\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def star_num(n):\n        if n == 1:\n            return 1\n        else:\n            return 1 + 3*star_num(n-1)\n    return star_num(n)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    import numpy as np\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    else:\n        stars = 2\n        num = 0\n        while True:\n            stars = stars + 2*(num + 1)\n            num = num + 1\n            if stars >= n:\n                return num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def star_number(n):\n        if n == 0:\n            return '*'\n        return star_number(n-1) + '*'\n    return star_number(n)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += 5 * i - 3\n    return num\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isspace():\n        return 32\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == \" \":\n        return 32\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    pass\n    return k\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = str(k)\n    print(ord(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # write a function to find the ascii value of a character.\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) >= ord('A') and ord(k) <= ord('Z'):\n        return ord(k)-ord('A')\n    elif ord(k) >= ord('a') and ord(k) <= ord('z'):\n        return ord(k)-ord('a')\n    else:\n        return ord(k)-ord(' ')\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if (k>= 'a' and k<='z'):\n        return ord(k)-ord('a')\n    elif (k>= 'A' and k<='Z'):\n        return ord(k)-ord('A') + 26\n    else:\n        return -1\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0 and arr[i] % 2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            evens += arr[i]\n    return evens\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_pos_even_index=0\n    for index in range(0, len(arr)):\n        if(index%2==0 and arr[index]%2==0):\n            sum_even_pos_even_index+=arr[index]\n        \n    return sum_even_pos_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    l = []\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                l.append(arr[i])\n    return sum(l)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_evens = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum_of_evens += arr[i]\n    return sum_of_evens\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for index, num in enumerate(arr):\n        if index % 2 == 0 and num % 2 == 0:\n            sum_even_index += num\n        elif index % 2!= 0 and num % 2 == 0:\n            sum_even_index += num\n    return sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index_numbers = []\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_index_numbers.append(arr[i])\n    \n    return sum(even_index_numbers)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def sum_to_N(n):\n        return sum([i**5 for i in range(n+1)])\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def sum_to_power(n, k):\n        '''\n        Takes in two integers n and k and finds the sum of the first n integers raised to the kth power.\n        '''\n        return sum([num ** k for num in range(1, n + 1)])\n    return sum_to_power(n, 5)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def power_function(n, power):\n        return n**power\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        if (i**5)%2 == 0:\n            total += i\n    return total\n        \n    \ndef perfect_Number(n):\n    '''\n    Write a python program that takes in a positive integer n and finds the sum of all the positive integers that are less than n and have a sum of their digits that is equal to 10*n.\n    '''\n    total = 0\n    for i in range(1,n):\n        total += sumDigits(i)\n    return total\n    \ndef sumDigits(n):\n    total = 0\n    while n:\n        total += n%10\n        n //= 10\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += pow(i, 5)\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # '''\n    # Input: n = 4\n    # Output: 64\n    # Explanation: Sum of the first 4 even natural numbers that are raised to the fifth power is 1^5 + 2^5 + 3^5 + 4^5 = 64\n    # '''\n    \n    # raise n to nth power\n    \n    return sum(i**5 for i in range(1, n+1) if i%2 == 0)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def raise_to_power(number, power):\n        if power == 0:\n            return 1\n        else:\n            return number * raise_to_power(number, power - 1)\n    def sum_of_powers(n):\n        return sum([raise_to_power(2, i) for i in range(1, n+1)])\n    return sum_of_powers(n)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if (i**5)%2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def sum_of_n_power_n(n):\n        e = 0\n        for i in range(n):\n            e += pow(i, 5)\n        return e\n    print(sum_of_n_power_n(n))\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[1] for tuple in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = [test_list[i][1] for i in range(len(test_list))]\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Initialize new_list\n    new_list = []\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output_list = []\n    for item in test_list:\n        output_list.append(item[1])\n    return output_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[-1] for tuple in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # return [test_list[i][1] for i in range(len(test_list))]\n    return [element[1] for element in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tuple in test_list:\n        result_list.append(tuple[1])\n    return result_list\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i], )\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(0, len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    output_tup = ()\n    for i in range(0, len(test_tup1)):\n        output_tup += (test_tup1[i] - test_tup2[i],)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(t1-t2 for t1, t2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    try:\n        test_tup3 = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    except TypeError:\n        print(\"The values in your tuples are not integers.\")\n    else:\n        return test_tup3\n        \ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and multiplies the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    try:\n        test_tup3 = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    except TypeError:\n        print(\"The values in your tuples are not integers.\")\n    else:\n        return test_tup3\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i]-test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # iterate through each element in tuple 2\n    for x in range(len(test_tup2)):\n        # iterate through each element in tuple 1\n        for y in range(len(test_tup1)):\n            # if the elements of the tuple 2 are the same, add the elements of tuple 1 together\n            if test_tup2[x] == test_tup1[y]:\n                list1[y] = (list1[y] - list2[x])\n    return tuple(list1)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #define functions\n    def substract_tup(tup1,tup2):\n        new_tup = []\n        for i in range(len(tup1)):\n            new_tup.append(tup1[i] - tup2[i])\n        return new_tup\n    #main function\n    def main(tup1,tup2):\n        new_tup = substract_tup(tup1, tup2)\n        return new_tup\n    #return the main function\n    return main(test_tup1,test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(sub(a,b) for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Your code here\n    count=0\n    for i in range(n+1):\n        if(i%2==0):\n            count+=math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return count\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<0:\n        return \"Incorrect input\"\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i%2 == 0:\n                sum += BinomialCoeff(i,n)\n        return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0 \n    for i in range(1,n+1,2):\n        binomial_coeff = math.factorial(n)/(math.factorial(i) * math.factorial(n-i))\n        sum = sum + binomial_coeff\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Base Case\n    if n == 0:\n        return 0\n    # Recursive Case\n    else:\n        return int(((n) * (n + 1)) / 2) \ndef odd_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    # Base Case\n    if n == 0:\n        return 0\n    # Recursive Case\n    else:\n        return int((((n) * (n - 1)) / 2) + (((n) * (n + 1)) / 2))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 1 or n == 0):\n        return 0\n    else:\n        return (n*(n+1))//2\ndef odd_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return (n * (n + 1))//2\ndef even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 1 or n == 0):\n        return 0\n    else:\n        return (n*(n+1))//2\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n==0):\n        return 0\n    if(n==1):\n        return 2\n    if(n==2):\n        return 10\n    if(n==3):\n        return 44\n    if(n==4):\n        return 252\n    if(n==5):\n        return 1270\n    if(n==6):\n        return 54732\n    if(n==7):\n        return 252224\n    if(n==8):\n        return 703686\n    if(n==9):\n        return 2230945\n    if(n==10):\n        return 6183504\n    if(n==11):\n        return 25337049\n    if(n==12):\n        return 164024220\n    if(n==13):\n        return 737451224\n    if(n==14):\n        return 2546581254\n    if(n==15):\n        return 17994510430\n    if(n==16):\n        return 8290615179\n    if(n==17):\n        return 29481865149\n    if(n==18):\n        return 135331237105\n    if(n==19):\n        return 465242487165\n    if(n==20):\n        return 2415158944275\n    if(n==21):\n        return 17282225449524\n    if(n==22):\n        return 947987068113432\n    if(n==23):\n        return 32591426455291702\n    if(n==24):\n        return 2449385506284753562\n    if(n==25):\n        return 152508184725741046458\n    if(n==26):\n        return 706948573691788546529\n    if(n==27):\n        return 2993454657460223712954\n    if(n==28):\n        return 17583329772706972260069\n    if(n==29):\n        return 103467137152265603622599\n    if(n==30):\n        return 366868595597737619130068\n    if(n==31):\n        return 18041280446865318531267554\n    if(n==32):\n        return 974468349257715591374284977\n    if(n==33):\n        return 35116523761714509528661287136\n    if(n==34):\n        return 218640715251428100844662928859\n    if(n==35):\n        return 1684156415623033208762076988899\n    if(n==36):\n        return 1029989868470778622374523210042\n    if(n==37):\n        return 36566531783870089371146905752330\n    if(n==38):\n        return 248190786863146867742505969789469\n    if(n==39):\n        return 1483268417517806090222064265508468\n    if(n==40):\n        return 6944843435982619079143530109725294\n    if(n==41):\n        return 27172468853748986527052896141762162\n    if(n==42):\n        return 18170496675473364721943121044682564\n    if(n==43):\n        return 100619341513839253045790537297712984\n    if(n==44):\n        return 369247613472759063206004296765604501\n    if(n==45):\n        return 2316086228575622585379939093964661897\n    if(n==46):\n        return 160198135634282896152407891677754491\n    if(n==47):\n        return 10830742575946010751412732820959393319\n    if(n==48):\n        return 3834681114339443024559318361771263728\n    if(n==49):\n        return 25091138268870233666249799683619534750\n    if(n==50):\n        return 14487954266887685206743745226712539912\n    if(n==51):\n        return 714481823649523667850991514091919543313\n    if(n==52):\n        return 2825137067988556818674235069144498116540\n    if(n==53):\n        return 1723259399256563053147962035477576507086\n    if(n==54):\n        return 92495652296489721379406085441508115701600\n    if(n==55):\n        return 381218713531707983033587787767850561939708\n    if(n==56):\n        return 253853443647165551387115034963756657894744\n    if(n==57):\n        return 14751626881594175613133626989020534594486555\n    if(n==58):\n        return 7156946174915482243328098601990617056502989524\n    if(n==59):\n        return 286824593443616665669805852298404546505477324\n    if(n==60):\n        return 17079295227711393037503708549392702133089352817\n    if(n==61):\n        return 9407417046873706348745125538677057495331112937\n    if(n==62):\n        return 38019028942654279071260720937662371904685454495\n    if(n==63):\n        return 25668407825309321530497784381227631338659609801\n    if(n==64):\n        return 151062073803521378120563945407269416648588352759\n    if(n==65):\n        return 73392728943947203767369976183888743094448452407\n    if(n==66):\n        return 290080559276970233467658738839826580193287345035\n    if(n==67):\n        return 1777271445997505726585316490055216673985760741034\n    if(n==68):\n        return 9306985173865773744932624413387237002490278498976\n    if(n==69):\n        return 39147239898771080059118042984713702599125639541554\n    if(n==70):\n        return 2591012226023769987688915874428147970982868249036\n    if(n==71):\n        return 15668417284318099084552087835858688363512402593745407\n    if(n==72):\n        return 735954935658173049629059192458203954180558491351300\n    if(n==73):\n        return 30254544133074634154901266966972896595389382627652522\n    if(n==74):\n        return 1777732553387705887054719581475665354554682966122509648\n    if(n==75):\n        return 940369965751118796410494828120595682670547599713086875\n    if(n==76):\n        return 39425160124431954603525119410875553509372280504854570833\n    if(n==77):\n        return 259069798823268329721479519756149028797615171355853072293\n    if(n==78):\n        return 158973744954780388345665515300862414751312820963649272548\n    if(n==79):\n        return "
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int(0.5 * (n * (n + 1))) \n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def get_binomial_coeff(n, m): \n        '''\n        Write a python function that takes in a positive integer n and finds the mth binomial coefficient.\n        '''\n        def fact(n): \n            '''\n            Write a python function that takes in a positive integer n and returns the factorial of n.\n            '''\n            def fact_iter(n): \n                '''\n                Write a python function that takes in a positive integer n and returns the factorial of n.\n                '''\n                def fact_recur(n): \n                    '''\n                    Write a python function that takes in a positive integer n and returns the factorial of n.\n                    '''\n                    if n == 0:\n                        return 1\n                    else:\n                        return n * fact_recur(n-1)\n                if n == 1:\n                    return 1\n                else:\n                    return n * fact_recur(n-1)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    nums = [1, 2]\n    while True:\n        if n > 2:\n            nums.append(nums[-1] + nums[-2])\n            if n > nums[-1]:\n                nums.append(nums[-1] + nums[-2])\n            n -= 1\n        else:\n            break\n    return sum([nums[i] for i in range(len(nums)) if i % 2 == 0])\n    \nprint(even_binomial_Coeff_Sum(4))\nprint(even_binomial_Coeff_Sum(6))\nprint(even_binomial_Coeff_Sum(8))\nprint(even_binomial_Coeff_Sum(12))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coefficients_sum = 0\n    for i in range(0, n + 1):\n        binomial_coefficients_sum += math.factorial(n)/math.factorial(i)/math.factorial(n - i)\n    return binomial_coefficients_sum\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    def volume(r,h):\n        return 3.14159265359*r**2*h\n    return volume(r,h)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume\nprint(volume_cylinder(2,3))\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265358979323846264338\n    return (pi * (r**2) * h)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.14\n    return pi*r*r*h\nprint(volume_cylinder(2,3))"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return (math.pi*(r**2)*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.1415926535897932\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    # volume = pi * r * r * h\n    # volume = pi * r ** 2 * h\n    # volume = pi * r ** 2 * r\n    # volume = pi * r ** 2 * h / 3\n    volume = pi * r ** 2 * h / 3\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {k:v for k,v in dict.items() if v >= n}\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    res = {key:value for key,value in dict.items() if value >= n}\n    return res\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict = {k:v for k,v in dict.items() if v >= n}\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n    "
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    res = {}\n    for key in dict:\n        if dict[key] >= n:\n            res[key] = dict[key]\n    return res\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    list1=[]\n    for x,y in dict.items():\n        if y>=n:\n            list1.append(y)\n    return list1\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filter_dict = {}\n    for key in dict:\n        if dict[key]>=n:\n            filter_dict[key] = dict[key]\n    return filter_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k, v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    try:\n        # 1st element of the tuple\n        test_tup[0]\n        # 2nd element of the tuple\n        test_tup[1]\n        # 3rd element of the tuple\n        test_tup[2]\n        \n        counter = 0\n        \n        for i in test_tup:\n            if i == test_tup[0]:\n                break\n            else:\n                counter += 1\n        \n        return counter\n    except IndexError:\n        return -1\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    lst = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            for j in i:\n                lst.append(j)\n        else:\n            lst.append(i)\n    count = 0\n    for i in range(0, len(lst)):\n        if lst[i] == 1:\n            count += 1\n        elif lst[i] == 2:\n            count += 1\n        elif lst[i] == 3:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = (1,2,3,2,1,2,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,2,1,3,4,3,2,1,3,3,"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def count(input_tup, k):\n        print('\\nThe count of {} in {} is {}'.format(k, input_tup, input_tup.count(k)))\n    count(test_tup, 2)\n    count(test_tup, 3)\n    count(test_tup, 4)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    t = tuple(test_tup)\n    print(t)\n    print(t.index(9))\n    if 9 not in t:\n        print(f'Element {9} is not in the tuple')\n    else:\n        for i in range(len(t)):\n            if t[i] == 9:\n                print(f'Element {9} is in the {i} index.')\n                break\n    print('Dictionaries')\n    d = {'key1':'value1','key2':'value2'}\n    print(d)\n    print(d['key1'])\n    #print(d['key3']) KeyError: 'key3'\n    d['key3'] = 'value3'\n    print(d)\n    print(d.keys())\n    print(d.values())\n    print(d.items())\n    print(d.get('key3'))\n    #print(d.get('key4'))\n    print(d.get('key4', 'key4 not found'))\n    print(d.get('key4', 'key4 not found').upper())\n    print(d.get('key4', 'key4 not found')+' is my final answer')\n    print('Tuples')\n    tup = tuple('abcd')\n    print(tup)\n    # tup[0] = 'x' TypeError: 'tuple' object does not support item assignment\n    #print(tup)\n    tup = ('x',) + tup[1:]\n    print(tup)\n    print(tup[0])\n    print(tup[-1])\n    print(tup[1:3])\n    print('Functions')\n    def square(x):\n        return x*x\n    print(square(7))\n    #print(square()) TypeError: square() missing 1 required positional argument: 'x'\n    def cube(x):\n        return x*x*x\n    def square_n_times(func,n,x):\n        for i in range(n):\n            x = func(x)\n        return x\n    print(square_n_times(cube,2,7))\n    print(square_n_times(lambda x:x*x, 3, 2))\n    print('Lists')\n    l = ['a','b','c','d','e']\n    print(l)\n    print(l[1:3])\n    print(l[1:-1])\n    print(l[1:])\n    print(l[:-1])\n    l[0] = 'x'\n    print(l)\n    #print(l[1:1]) IndexError: list assignment index out of range\n    #print(l[1:-1:2]) IndexError: list assignment index out of range\n    l[1:3] = 'y'\n    print(l)\n    l[1:3] = []\n    print(l)\n    print(l[:])\n    l[:] = []\n    print(l)\n    print('List comprehensions')\n    x = [i for i in range(10)]\n    print(x)\n    y = [i+2 for i in range(10)]\n    print(y)\n    print([(x,y) for x in range(5) for y in range(5) if x!= y])\n    print('String Formatting')\n    x = '{a} is the {b} of {c}'.format(a = 'Geeks',b = 'For',c = 'Geeks')\n    print(x)\n    print('F-Strings')\n    x = f'{a} is the {b} of {c}'\n    print(x)\n    print(type(x))\n    print('Lists')\n    l = [0, 1, 2, 3, 4]\n    print(l)\n    print(type(l))\n    print(l.__class__)\n    print(l.__sizeof__())\n    print(len(l))\n    print(l[1])\n    print(l[1:3])\n    print(l[1:])\n    print(l[:-1])\n    print(l[:])\n    print('Slices')\n    print(l[1:5])\n    print(l[1:-1])\n    print(l[1:-2])\n    print(l[1::2])\n    print(l[2::2])\n    print(l[::-1])\n    print(l[5:1:-2])\n    print(l[5:1:2])\n    print('Negative Indexing')\n    print(l[-1])\n    print(l[-4:-1])\n    print(l[-1:-3])\n    print(l[-4:-1:2])\n    print(l[-1:-3:-1])\n    print(l[-4:-1:-1])\n    print('Range')\n    l = [0, 1, 2, 3, 4]\n    print(l[range(5)])\n    print(l[range(1, 5)])\n    print(l[range(0, 10, 2)])\n    print(l[range(10, 1, -2)])\n    print('List functions')\n    l = [0, 1, 2, 3, 4]\n    print(l)\n    print(len(l))\n    l.append(5)\n    print(l)\n    l.extend([6,7])\n    print(l)\n    l.insert(0,0)\n    print(l)\n    l.remove(0)\n    print(l)\n    l.pop()\n    print(l)\n    print(l.index(0))\n    l.pop(0)\n    print(l)\n    l.count(3)\n    print(l)\n    l.sort()\n    print(l)\n    l.sort(reverse = True)\n    print(l)\n    l.reverse()\n    print(l)\n    print(l.__sizeof__())\n    print('Tuples')\n    t = (0, 1, 2, 3, 4)\n    print(t)\n    print(type(t))\n    print(t.__class__)\n    print(t.__sizeof__())\n    print(len(t))\n    print(t[1])\n    print(t[1:3])\n    print(t[1:])\n    print(t[:-1])\n    print(t[:])\n    print('Slices')\n    print(t[1:5])\n    print(t[1:-1])\n    print(t[1:-2])\n    print(t[1::2])\n    print(t[2::2])\n    print(t[::-1])\n    print(t[5:1:-2])\n    print(t[5:1:2])\n    print('Negative Indexing')\n    print(t[-1])\n    print(t[-4:-1])\n    print(t[-1:-3])\n    print(t[-4:-1:2])\n    print(t[-1:-3:-1])\n    print(t[-4:-1:-1])\n    print('Range')\n    t = (0, 1, 2, 3, 4)\n    print(t[range(5)])\n    print(t[range(1, 5)])\n    print(t[range(0, 10, 2)])\n    print(t[range(10, 1, -2)])\n    print('List functions')\n    t = (0, 1, 2, 3, 4)\n    print(t)\n    print(len(t))\n    t.append(5)\n    print(t)\n    t.extend([6,7])\n    print(t)\n    t.insert(0,0)\n    print(t)\n    t.remove(0)\n    print(t)\n    t.pop()\n    print(t)\n    print(t.index(0))\n    t.pop(0)\n    print(t)\n    print(t.count(3))\n    t.sort()\n    print(t)\n    t.sort(reverse = True)\n    print(t)\n    t.reverse()\n    print(t)\n    print('Dictionaries')\n    d = {'key1':'value1','key2':'value2"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return None\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_list = list(test_tup)\n    dummy_list = test_list[0::2]\n    return len(dummy_list)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for ele in test_tup:\n        if isinstance(ele, tuple):\n            count += count_first_elements(ele)\n        else:\n            break\n    return count+1\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    print(\"Counting First Elements...\")\n    count_dict = {}\n    for i in range(0,len(test_tup)):\n        count_dict[i] = test_tup[i].count('1')\n    return count_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    new_tup = []\n    for i in range(len(test_tup)):\n        new_tup.append(test_tup[i])\n    \n    count = 0\n    \n    for i in range(len(test_tup)):\n        if new_tup[i] == test_tup[i]:\n            count += 1\n        else:\n            break\n    return count\n    \n    # return count\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(0.5*n*n-n+1))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def is_decagonal(n):\n        '''\n        Returns if n is a decagonal number\n        '''\n        return n == sum([i for i in range(1, 20)]) + 1\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int((1+sqrt(1+24*n))/6)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(9*n-19))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return 10\n    else:\n        return (n - 1) * 10 + 9\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def is_decagonal(n):\n        return sum(int(digit) for digit in str(n)) == n\n    return is_decagonal(n)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # define the function\n    def dec(n): \n        return n*(10*n - 9)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(10*n-9)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    nth_num = 0\n    for i in range(1,n+1):\n        nth_num += i*(i+8)\n    return nth_num\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n - 1\n    return int(str(n)+\"0\"*(9-len(str(n)))+\"1\")\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return (True, index)\n    return (False, -1)\n    \nprint(sequential_search(['Alex', 'Brian', 'Candace', 'David'], 'Candace'))\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #TODO: you fill in here.\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    print(f'Searching for {item}')\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    \n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index = index + 1\n    return (found, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return found, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    return sequential_search_recursive(dlist, item)\n    \ndef sequential_search_recursive(dlist, item):\n    if len(dlist) == 0:\n        return (False, -1)\n    if dlist[0] == item:\n        return (True, 0)\n    else:\n        return sequential_search_recursive(dlist[1:], item)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    result = 0\n    for i in test_list:\n        if test_list.count(i) == 1:\n            result = result + 1\n    if result == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return (len(set(test_list)) == len(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_set = set(test_list)\n    if len(temp_set) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = [2,5,8,9,10,4,8,5,7,6,2,3,7,4,5,9,9,8,1,2,3,4,5]\n    print(test_list)\n    test_list = list(set(test_list))\n    print(test_list)\n    return (len(test_list) == len(set(test_list)))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # l = []\n    # for i in test_list:\n    #     if i in l:\n    #         return False\n    #     else:\n    #         l.append(i)\n    # return True\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    #method 1: use inbuilt list function\n    #return [a-b for a,b in zip(nums1,nums2)]\n    \n    #method 2: using a temp list and add corresponding index element\n    l = []\n    for i in range(len(nums1)):\n        l.append(nums1[i]-nums2[i])\n    return l\n        \n    #method 3: using a temp list and append zeros\n    #j = len(nums1) - len(nums2)\n    #for i in range(j,len(nums1)):\n        #l.append(0)\n    #return l\n    \n    #method 4: using a for loop and list slicing\n    #l = []\n    #for i in range(len(nums1)):\n        #l.append(nums1[i]-nums2[i])\n    #return l\n    \n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums2)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) >= len(nums2):\n        short = nums1\n        long = nums2\n    else:\n        short = nums2\n        long = nums1\n    ans = []\n    for i in range(len(short)):\n        ans.append(short[i] - long[i])\n    return ans\nprint(sub_list([4,1,2],[1,7,3]))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i] - nums2[i])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    s1=list(nums1)\n    s2=list(nums2)\n    for i in range(len(s1)):\n        s1[i]=s1[i]-s2[i]\n    return s1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for num in nums1:\n        if num in nums2:\n            nums2.remove(num)\n    return nums2\n    \ndef remove_elements(nums,val):\n    '''\n    Write a function to remove all instances of an element from a list.\n    '''\n    for i in range(len(nums)-1,-1,-1):\n        if nums[i] == val:\n            nums.pop(i)\n    return nums\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    res_list = []\n    for i in range(0, len(nums1)):\n        res_list.append(nums1[i]-nums2[i])\n    return res_list\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len([c for c in str(n) if n.count(c) > c]) <= 1\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    d = {}\n    for i in n:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return all(x <= 1 for x in d.values())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit = [0]*10\n    while n > 0:\n        digit[n % 10] += 1\n        n //= 10\n    for i in range(10):\n        if digit[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    d = {0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0} \n    \n    while(n): \n        d[n % 10] += 1\n        n = int(n/10)\n    print(d)\n    for i in d: \n        if(d[i] > i): \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in range(0, 10):\n        count = 0\n        while(n): \n            r = n % 10\n            n = n // 10\n            if (r == i):\n                count += 1\n        if(count > i):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    lst = [int(i) for i in str(n)] \n    freq = [0] * 10\n    \n    for i in lst:\n        freq[i] += 1\n    \n    for i in range(0, 10):\n        if freq[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    a=str(n)\n    for i in a:\n        if(int(a.count(i))>int(i)):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    while n:\n        digit = n%10\n        freq[digit] += 1\n        n = n//10\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(n)!= len(set(n)):\n        return False\n    l = [int(i) for i in list(n)]\n    for i in l:\n        if l.count(i) > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #Initializing a dict object to count each digit\n    d = {'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0}\n    s = str(n)\n    for c in s:\n        d[c]+=1\n    for i in range(0,10):\n        if(d[str(i)]>i):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    return False\n    \n    \n    \n    \n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 0:\n        if list[0] == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return len([i for i in list if i!= element]) == 0\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2}|ab{3}',text):\n        return True\n    else:\n        return False\nprint(text_match_two_three('aabb'))\nprint(text_match_two_three('aab'))\nprint(text_match_two_three('aabbaab'))\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.compile(r'ab{2,3}?')\n    return text.search(text)\n    # return re.search(r'ab{2,3}?', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.findall(r'ab{2,3}a', text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.search('a(b){2,3}',text)\n    if x:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Match'\n    else:\n        return 'No match'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(a.)b{2,3}'\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match(r'.*?(ab).{2,3}?ab', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.findall('ab{2,3}', text)\n    print(match)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = '(ab{2,3})'\n    result = re.search(pattern, text)\n    if result:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*bb{2,3}$'\n    result = re.match(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    maxSum = 0\n    for i in range(n): \n        sum = sum + a[i] \n        if (sum == 0): \n            sum = 0\n        elif (sum > maxSum): \n            maxSum = sum\n    return maxSum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    b = []\n    c = []\n    for i in range(k):\n        b.append(a)\n    for i in range(k):\n        c.append(0)\n    for i in range(len(b)):\n        for j in range(n):\n            c[i]+=b[i][j]\n    return c\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum, cur_sum = 0, 0\n    for i in range(n): \n        cur_sum = cur_sum + a[i] \n        if cur_sum == k: \n            cur_sum = 0\n            k = k+1\n        elif cur_sum > max_sum: \n            max_sum = cur_sum\n    return max_sum\n \ndef max_sum_sub_array(a, n): \n    '''\n    Write a function to find the maximum sum of any contiguous subarray of the given array.\n    '''\n    max_sum = a[0] \n    cur_sum = a[0] \n    for i in range(1, n): \n        cur_sum = max(a[i], cur_sum + a[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum\n \ndef max_sum_sub_array_non_decreasing(a, n): \n    '''\n    Write a function to find the maximum sum of a contiguous subarray in the given array.\n    '''\n    max_sum = a[0] \n    cur_sum = a[0] \n    for i in range(1, n): \n        if a[i-1] < a[i]: \n            cur_sum = cur_sum + a[i] \n        else: \n            cur_sum = a[i] \n        max_sum = max(max_sum, cur_sum)\n    return max_sum\n \ndef max_sum_sub_array_of_size_k(a, n, k): \n    '''\n    Write a function to find the maximum sum of a contiguous subarray of size \u2018K\u2019 in the given array.\n    '''\n    max_sum = 0\n    cur_sum = 0\n    for i in range(k): \n        cur_sum = cur_sum + a[i] \n    max_sum = cur_sum \n    for i in range(k, n): \n        cur_sum = cur_sum + a[i] - a[i-k] \n        max_sum = max(max_sum, cur_sum)\n    return max_sum\n \ndef min_max_sub_array_sum(a, n): \n    '''\n    Write a function to find the minimum and maximum sum of a contiguous subarray in the given array.\n    '''\n    min_sum, max_sum = 0, 0\n    cur_sum = 0\n    for i in range(0, n): \n        cur_sum = cur_sum + a[i] \n        if cur_sum < min_sum: \n            min_sum = cur_sum \n        if cur_sum > max_sum: \n            max_sum = cur_sum\n    return min_sum, max_sum\n \ndef max_sub_array_sum_with_one_deletion(a, n): \n    '''\n    Write a function to find the maximum sum of a contiguous subarray by deleting at most one element from the subarray.\n    '''\n    max_sum, cur_sum = a[0], 0\n    for i in range(n): \n        if cur_sum < 0: \n            cur_sum = a[i]\n        else: \n            cur_sum += a[i]\n        max_sum = max(max_sum, cur_sum)\n    return max_sum\n \ndef max_sub_array_sum_with_one_deletion_space_optimised(a, n): \n    '''\n    Write a function to find the maximum sum of a contiguous subarray by deleting at most one element from the subarray.\n    '''\n    max_sum, cur_sum = a[0], 0\n    max_sum_array = [0]*n\n    for i in range(n): \n        if cur_sum < 0: \n            cur_sum = a[i]\n        else: \n            cur_sum += a[i]\n        max_sum = max(max_sum, cur_sum)\n        max_sum_array[i] = max_sum\n    return max_sum, max_sum_array\n \ndef max_sub_array_sum_with_k_deletions(a, n, k): \n    '''\n    Write a function to find the maximum sum of a contiguous subarray after deleting at most \u2018k\u2019 elements from the subarray.\n    '''\n    max_sum = 0\n    cur_sum = 0\n    for i in range(n): \n        cur_sum = cur_sum + a[i] \n        if cur_sum < 0: \n            cur_sum = 0\n        elif cur_sum == 0: \n            max_sum = max(max_sum, cur_sum)\n        else: \n            max_sum = max(max_sum, cur_sum)\n    return max_sum\n \ndef max_sum_sub_array_using_k_deletions(a, n, k): \n    '''\n    Write a function to find the maximum sum of a contiguous subarray using the fact that you can delete any number of elements from the subarray.\n    '''\n    max_sum = 0\n    cur_sum = 0\n    for i in range(n): \n        if cur_sum < 0: \n            cur_sum = 0\n        elif cur_sum == 0: \n            max_sum = max(max_sum, cur_sum)\n        cur_sum = cur_sum + a[i] \n    return max_sum\n \ndef min_max_sub_array_sum_with_one_deletion(a, n): \n    '''\n    Write a function to find the minimum and maximum sum of a contiguous subarray after deleting at most one element from the subarray.\n    '''\n    min_sum, max_sum = a[0], 0\n    cur_sum = 0\n    for i in range(n): \n        if cur_sum > 0: \n            cur_sum = cur_sum + a[i]\n        else: \n            cur_sum = a[i]\n        min_sum = min(min_sum, cur_sum)\n        max_sum = max(max_sum, cur_sum)\n    return min_sum, max_sum\n \ndef max_sum_sub_array_with_adjacent_diff_k(a, n, k): \n    '''\n    Write a function to find the maximum sum of a contiguous subarray with adjacent elements which differ by k.\n    '''\n    max_sum = 0\n    cur_sum = 0\n    diff = 0\n    for i in range(n): \n        cur_sum = cur_sum + a[i] \n        if a[i] > diff + k: \n            diff = a[i] - k\n        else: \n            diff = 0\n        max_sum = max(max_sum, cur_sum - diff)\n    return max_sum\n \ndef max_sum_sub_array_with_adjacent_diff_k_2(a, n, k): \n    '''\n    Write a function to find the maximum sum of a contiguous subarray with adjacent elements which differ by k.\n    '''\n    cur_sum = 0\n    diff = 0\n    max_sum = 0\n    for i in range(n): \n        cur_sum = cur_sum + a[i] \n        if a[i] - k > diff: \n            diff = a[i] - k\n        if cur_sum - diff < 0: \n            diff = 0\n        max_sum = max(max_sum, cur_sum - diff)\n    return max_sum\n \ndef max_sum_sub_array_with_adjacent_diff_k_3(a, n, k): \n    '''\n    Write a function to find the maximum sum of a contiguous subarray with adjacent elements which differ by k.\n    '''\n    max_sum = 0\n    cur_sum = 0\n    diff = 0\n    for i in range(n): \n        cur_sum = cur_sum + a[i] \n        if a[i] - k > diff: \n            diff = a[i] - k\n        if cur_sum - diff < 0: \n            diff = 0\n        max_sum = max(max_sum, cur"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    start_index = 0\n    end_index = 0\n    i = 0\n    while(i < n):\n        if(a[i] < 0):\n            sum = max(sum, sum + a[i])\n            i += 1\n        elif(a[i] == 0):\n            i += 1\n        elif(a[i] > 0):\n            if((i - start_index + 1) < k):\n                sum = max(sum, sum + a[i])\n                i += 1\n            else:\n                sum = max(sum, sum + a[i])\n                start_index = i + 1\n                i += 1\n    if(i - start_index + 1 < k):\n        sum = max(sum, sum + sum(a[start_index:i]))\n    else:\n        sum = max(sum, sum + sum(a[start_index:i]))\n        sum = max(sum, sum + sum(a[i:i+k]))\n        if(i + k < n):\n            sum = max(sum, sum + sum(a[i:i+k]))\n    return sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # first, check k value, we want k to be positive integer\n    if n < 1:\n        return 0\n    if k < 1:\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(0, n+1):\n        current_sum = 0\n        for j in range(i, i + k*n, k):\n            current_sum += a[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return sum(a)\n    \n    # Initialize the maximum element of the array\n    max_subarray_sum = float(\"-inf\")\n    # Initialize the sum of the array\n    array_sum = 0\n    # Initialize the index of the current sum to 0\n    start = 0\n    # Initialize the index of the previous sum to -1\n    end = -1\n    \n    for i in range(n):\n        # Add the current element to the current sum\n        array_sum += a[i]\n        # Set the current sum as the maximum element of the array\n        max_subarray_sum = max(max_subarray_sum, array_sum)\n        # If the current sum is greater than k times the maximum sum of the array\n        if array_sum > k * max_subarray_sum:\n            # If the length of the subarray is greater than 1\n            if end - start > 1:\n                # Set the sum of the previous subarray as the maximum of the current and the previous subarray\n                max_subarray_sum = max(array_sum - k * max_subarray_sum, max_subarray_sum)\n                # Set the start of the current subarray as the end of the previous subarray\n                start = end\n            # Set the end of the current subarray as the current index\n            end = i\n        \n    # Check if the current subarray is greater than the maximum subarray\n    if end - start > 1:\n        # If the length of the current subarray is greater than 1\n        max_subarray_sum = max(array_sum - k * max_subarray_sum, max_subarray_sum)\n    \n    # Return the maximum subarray sum\n    return max_subarray_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def maxSubArraySum(arr, n, k):\n        m = max(arr)\n        if m < 0:\n            return m\n        curr_sum = 0\n        for i in range(n):\n            curr_sum += arr[i]\n            arr[i] = curr_sum\n        curr_max = max(arr[0], arr[1])\n        for i in range(2, n):\n            curr_max = max(curr_max, curr_sum)\n            curr_sum = curr_sum + arr[i] - (k * arr[i - 1])\n        return curr_max\n    return maxSubArraySum(a, n, k)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if(n == 0):\n        return 0\n    if(k == 1):\n        return sum(a)\n    cur_sum = 0\n    max_sum = 0\n    for i in range(0, n*k):\n        if(i % k == 0):\n            cur_sum = 0\n        cur_sum += a[i % n]\n        max_sum = max(cur_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the variables\n    sub_sum = sum(a)\n    max_sum = sub_sum\n    max_ending_here = sub_sum\n    max_ending_here_sum = max_ending_here\n    k_sum = 0\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(0, n+1, 2):\n        total += i**2\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2==0):\n            sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(i * i for i in range(n) if i % 2 == 0)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    count = 0\n    if(n<=0):\n        return 0\n    for i in range(1, n+1):\n        if(i % 2 == 0):\n            count += i**2\n    return count\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0;\n    for i in range(0, n, 2):\n        sum = sum + i**2\n    return sum\n    \ndef main():\n    n = int(input(\"Enter the value of n: \"))\n    print(square_Sum(n))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for x in range(0, n):\n        if x % 2 == 0:\n            sum += x*x\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return(sum([i**2 for i in range(0,n,2)]))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sumsq = 0\n    for x in range(2,n+1,2):\n        sumsq += x*x\n    return sumsq\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    return sum([x*x for x in range(0, n+1, 2)])\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(len(i) for i in list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    for i in list1:\n        if len(i) >= len(result):\n            result = i\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1 = []\n    return list1\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = len(list1[0])\n    for i in range(0, len(list1)):\n        if max_length < len(list1[i]):\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n    return max_length\n    \ndef check_grade(score):\n    '''\n    Write a function to return a string representing the grade of the given score\n    '''\n    if 90 <= score <= 100:\n        return 'A'\n    elif 80 <= score <= 89:\n        return 'B'\n    elif 70 <= score <= 79:\n        return 'C'\n    elif 60 <= score <= 69:\n        return 'D'\n    elif 0 <= score <= 59:\n        return 'F'\n    else:\n        return 'Error: Score out of range'\n    \ndef calculate_total(list1):\n    '''\n    Write a function to calculate the total of a list of numbers\n    '''\n    sum = 0\n    for elem in list1:\n        sum += elem\n    return sum\n    \ndef calculate_avg(list1):\n    '''\n    Write a function to calculate the average of a list of numbers\n    '''\n    return calculate_total(list1) / len(list1)\n    \ndef calculate_median(list1):\n    '''\n    Write a function to calculate the median of a list of numbers\n    '''\n    list1.sort()\n    n = len(list1)\n    if n % 2 == 1:\n        return list1[n//2]\n    else:\n        return (list1[n//2] + list1[n//2 - 1])/2\n    \ndef is_member(list1, member):\n    '''\n    Write a function to return True if a member appears in a list, False otherwise\n    '''\n    return member in list1\n    \ndef calculate_mean(list1):\n    '''\n    Write a function to calculate the mean of a list of numbers\n    '''\n    return calculate_avg(list1)\n    \ndef get_max_score(list1):\n    '''\n    Write a function to return the maximum score in a list of lists\n    '''\n    return max(list1, key = lambda lst: lst[-1])\n    \ndef get_min_score(list1):\n    '''\n    Write a function to return the minimum score in a list of lists\n    '''\n    return min(list1, key = lambda lst: lst[-1])\n    \ndef calculate_std(list1):\n    '''\n    Write a function to calculate the standard deviation of a list of numbers\n    '''\n    avg = calculate_mean(list1)\n    tot = 0\n    for elem in list1:\n        tot += (elem - avg)**2\n    return sqrt(tot/len(list1))\n    \ndef list_to_dict(list1):\n    '''\n    Write a function to convert a list of lists into a dictionary\n    '''\n    return dict(zip(list1[0], list1[1]))\n    \ndef remove_key(dict1, key):\n    '''\n    Write a function to remove a key from a dictionary\n    '''\n    if key in dict1:\n        del dict1[key]\n    \ndef dict_to_list(dict1):\n    '''\n    Write a function to convert a dictionary to a list\n    '''\n    return [list(dict1.keys()), list(dict1.values())]\n    \ndef read_file(f_name):\n    '''\n    Write a function to read a file and return a list of strings\n    '''\n    file = open(f_name, 'r')\n    content = file.read()\n    file.close()\n    return content.split('\\n')\n    \ndef add_key(dict1, key, value):\n    '''\n    Write a function to add a key to a dictionary\n    '''\n    if key not in dict1:\n        dict1[key] = []\n    dict1[key].append(value)\n    \ndef delete_key(dict1, key):\n    '''\n    Write a function to delete a key from a dictionary\n    '''\n    if key in dict1:\n        del dict1[key]\n    \ndef write_file(f_name, list1):\n    '''\n    Write a function to write a list of strings to a file\n    '''\n    file = open(f_name, 'w')\n    file.write('\\n'.join(list1))\n    file.close()\n    \ndef get_keys(dict1):\n    '''\n    Write a function to return the keys of a dictionary\n    '''\n    return list(dict1.keys())\n    \ndef get_values(dict1):\n    '''\n    Write a function to return the values of a dictionary\n    '''\n    return list(dict1.values())\n    \ndef get_items(dict1):\n    '''\n    Write a function to return the key and values of a dictionary\n    '''\n    return list(dict1.items())\n    \ndef load_dictionary(f_name):\n    '''\n    Write a function to load a dictionary from a file\n    '''\n    dict1 = {}\n    for pair in read_file(f_name):\n        key, value = pair.split(':')\n        add_key(dict1, key, value)\n    return dict1\n    \ndef write_dictionary(f_name, dict1):\n    '''\n    Write a function to write a dictionary to a file\n    '''\n    write_file(f_name, dict_to_list(dict1))\n    \ndef get_keys_by_value(dict1, value):\n    '''\n    Write a function to return the keys of a dictionary whose value equals a given value\n    '''\n    return list(filter(lambda key: value == dict1[key], get_keys(dict1)))\n    \ndef count_keys(dict1):\n    '''\n    Write a function to count the number of keys in a dictionary\n    '''\n    return len(get_keys(dict1))\n    \ndef get_n_longest_keys(dict1, n):\n    '''\n    Write a function to return the n longest keys of a dictionary\n    '''\n    return sorted(get_keys(dict1), key = lambda key: len(key), reverse = True)[:n]\n    \ndef search_dict(dict1, key):\n    '''\n    Write a function to return the value of a key in a dictionary\n    '''\n    return dict1[key] if key in dict1 else None\n    \ndef in_list(list1, item):\n    '''\n    Write a function to return True if an item appears in a list, False otherwise\n    '''\n    return item in list1\n    \ndef get_n_longest_values(dict1, n):\n    '''\n    Write a function to return the n longest values of a dictionary\n    '''\n    return sorted(get_values(dict1), key = lambda value: len(value), reverse = True)[:n]\n    \ndef get_n_longest_items(dict1, n):\n    '''\n    Write a function to return the n longest keys and values of a dictionary\n    '''\n    return sorted(get_items(dict1), key = lambda item: len(item[0]), reverse = True)[:n]\n    \ndef get_value_given_key(dict1, key):\n    '''\n    Write a function to return the value of a key in a dictionary\n    '''\n    return dict1[key] if key in dict1 else None\n    \ndef get_all_keys_that_match_value(dict1, value):\n    '''\n    Write a function to return a list of all keys that match a given value\n    '''\n    return list(filter(lambda key: value == dict1[key], get_keys(dict1)))\n    \ndef get_all_values_that_match_key(dict1, key):\n    '''\n    Write a function to return a list of all values that match a given key\n    '''\n    return list(filter(lambda value: key == dict1[value], get_values(dict1)))\n    \ndef get_all_items_that_match_key(dict1, key):\n    '''\n    Write a function to return a list of all (key, value) pairs that match a given key\n    '''\n    return list(filter(lambda item: item"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list_len = 0\n    for i in list1:\n        if len(i) > max_list_len:\n            max_list_len = len(i)\n    return max_list_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_length=[]\n    for sub_list in list1:\n        list_length.append(len(sub_list))\n    return list_length.index(max(list_length))\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for i in list1:\n        lengths.append(len(i))\n    lengths.sort()\n    return lengths[-1]\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    count = 0\n    for l in list1:\n        if(len(l) > count):\n            count = len(l)\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n == 0):\n        return 0\n    if (k == 1):\n        return 1\n    elif (k == 2):\n        if (n == 1):\n            return 1\n        else:\n            return 0\n    else:\n        res = count_no_of_ways(n-1, k)\n        if (k % 2!= 0):\n            res += count_no_of_ways(n-1, k-1)\n        return res\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or n == 0:\n        return 1\n    if k == 1:\n        return 1\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if(k==1):\n        return n\n    if(n==1):\n        return 1\n    if(n==2):\n        return k\n    if(n==3):\n        return k*(k-1)\n    # m=k*(k-1)/2\n    return (k*(k-1)*(k-2))//6\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # A 2D table where table[j] will hold the number of ways for painting\n    # the fence with 'j' posts. We need n+1 rows as the table is constructed\n    # in bottom up manner using the base case (n = 0)  \n    table = [[0 for x in range(k)] for y in range(n+1)] \n  \n    # There is only one way to paint a fence with '0' posts \n    for i in range(k): \n        table[0][i] = 1\n  \n    # Fill the table using the bottom-up method \n    for i in range(1, n+1): \n        for j in range(k): \n  \n            # Count the number of ways to paint using \n            # 'n' posts and 'j' colors \n            x = table[i - 1][j] \n  \n            # Count the number of ways to paint using \n            # 'n-1' posts and 'j-1' colors \n            y = table[i - 1][j - 1] \n  \n            # Count the number of ways to paint using \n            # 'n-1' posts and 'j' colors \n            z = table[i - 1][j + 1] \n  \n            table[i][j] = x + y + z\n  \n    return table[n][k-1] \n  "
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    arr = [0] * (n+1)\n    for i in range(n+1):\n        if i == 0 or i == 1:\n            arr[i] = 1\n        else:\n            arr[i] = arr[i-1] + arr[i-2]\n    return arr[n] - arr[k-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Handle base cases\n    if (n == 0 or k == 0):\n        return 0\n    if (n == 1):\n        return k\n    if (k == 1):\n        return n\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0: \n        return 0\n    if n == 1: \n        return k \n    if n == 2: \n        return k * k \n    return (k * (k + 1)) * (count_no_of_ways(n - 2, k) + count_no_of_ways(n - 1, k)) \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = {}\n    def find_ways(n, k): \n        # base cases\n        if n == 1: \n            return k\n        if k == 0: \n            return 0\n        if (n, k) in memo: \n            return memo[(n, k)]\n        ans = 0\n        for color in range(k): \n            ans += find_ways(n - 1, k)\n        memo[(n, k)] = ans\n        return ans\n    return find_ways(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if(n == 1):\n        return k\n    if(n == 2):\n        if(k > 2):\n            return 0\n        if(k == 2):\n            return 4\n        if(k == 1):\n            return k*k\n    if(n == 3):\n        if(k > 6):\n            return 0\n        if(k == 6):\n            return k*k*k\n        if(k == 5):\n            return k*(k*k-k)\n        if(k == 4):\n            return k*(k*(k-1)-(k-1))\n        if(k == 3):\n            return k*(k*(k-1)-(k-1)*(k-2))\n        if(k == 2):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3))\n        if(k == 1):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4))\n    if(n == 4):\n        if(k > 15):\n            return 0\n        if(k == 15):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5))\n        if(k == 14):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6))\n        if(k == 13):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7))\n        if(k == 12):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8))\n        if(k == 11):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9))\n        if(k == 10):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10))\n        if(k == 9):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11))\n        if(k == 8):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12))\n        if(k == 7):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12)*(k-13))\n        if(k == 6):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12)*(k-13)*(k-14))\n        if(k == 5):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12)*(k-13)*(k-14)*(k-15))\n        if(k == 4):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12)*(k-13)*(k-14)*(k-15)*(k-16))\n        if(k == 3):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12)*(k-13)*(k-14)*(k-15)*(k-16)*(k-17))\n        if(k == 2):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12)*(k-13)*(k-14)*(k-15)*(k-16)*(k-17)*(k-18))\n        if(k == 1):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12)*(k-13)*(k-14)*(k-15)*(k-16)*(k-17)*(k-18)*(k-19))\n    if(n == 5):\n        if(k > 45):\n            return 0\n        if(k == 45):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12)*(k-13)*(k-14)*(k-15)*(k-16)*(k-17)*(k-18)*(k-19)*(k-20))\n        if(k == 44):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12)*(k-13)*(k-14)*(k-15)*(k-16)*(k-17)*(k-18)*(k-19)*(k-20)*(k-21))\n        if(k == 43):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12)*(k-13)*(k-14)*(k-15)*(k-16)*(k-17)*(k-18)*(k-19)*(k-20)*(k-21)*(k-22))\n        if(k == 42):\n            return k*(k*(k-1)-(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)*(k-12)*(k-13)*(k-14)*(k-15)*(k-16)*(k-17)*"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i==1:\n                dp[i][j] = j\n                continue\n            elif i==2:\n                dp[i][j] = dp[i-1][j-1] if j>1 else dp[i-1][j] + j\n                continue\n            dp[i][j] = dp[i-1][j-1] + dp[i-2][j-1]\n    return dp[n][k]\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        n,m=m,n\n    while n%m!= 0:\n        n,m=m,n%m\n    return n\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = int(n/m)\n    print(q)\n    return q\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n < m):\n        return n//m\n    return (n//m)+1\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m<n:\n        return 0\n    else:\n        return n/m\n        \n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m:\n        greater = n\n    else:\n        greater = m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    # return n//m\n    \n    return math.floor(n/m)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return int(math.sqrt((w**2)+(h**2)))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w*w+h*h)\n    if c%2 == 0:\n        a = (w+h)/2\n    else:\n        a = (w-h)/2\n    return a\nprint(otherside_rightangle(8,12))\nprint(otherside_rightangle(5,12))\nprint(otherside_rightangle(2,12))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print((math.sqrt(w**2 + h**2)) - h)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    otherside = ((math.pow(w,2) + math.pow(h,2)) - math.pow((w*h),2))**(1/2)\n    return(otherside)\ndef otherside_rectangle(l,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    otherside = ((math.pow(l,2) + math.pow(b,2)) - math.pow((l*b),2))**(1/2)\n    return(otherside)\ndef otherside_rightangle2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    otherside = ((math.pow(w,2) + math.pow(h,2)) - math.pow((w*h),2))**(1/2)\n    return(otherside)\ndef otherside_rectangle2(l,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    otherside = ((math.pow(l,2) + math.pow(b,2)) - math.pow((l*b),2))**(1/2)\n    return(otherside)\ndef area_rectangle(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return(area)\ndef area_rectangle2(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return(area)\ndef area_rectangle3(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return(area)\ndef area_rectangle4(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return(area)\ndef area_rectangle5(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return(area)\ndef area_triangle(l,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (l*b)/2*h\n    return(area)\ndef area_triangle2(l,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (l*b)/2*h\n    return(area)\ndef area_triangle3(l,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (l*b)/2*h\n    return(area)\ndef area_triangle4(l,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (l*b)/2*h\n    return(area)\ndef area_triangle5(l,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (l*b)/2*h\n    return(area)\ndef area_square(l,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = l*b\n    return(area)\ndef area_square2(l,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = l*b\n    return(area)\ndef area_square3(l,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = l*b\n    return(area)\ndef area_square4(l,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = l*b\n    return(area)\ndef area_square5(l,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = l*b\n    return(area)\ndef area_square6(l,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = l*b\n    return(area)\ndef area_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_rightangle2(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_rightangle3(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_rightangle4(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_rightangle5(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_rightangle6(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_rightangled(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_rightangled2(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_rightangled3(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_rightangled4(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_rightangled5(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_rightangled6(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = w*h/2\n    return(area)\ndef area_parallelogram(l,b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = l*b*h\n    return(area)\ndef area_parallelogram2(l,b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = l*b*h\n    return(area)\ndef area_parallelogram3(l,b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = l*b*h\n    return(area)\ndef area_parallelogram4(l,b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = l*b*h\n    return(area)\ndef area_parallelogram5(l,b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = l*b*h\n    return(area)\ndef area_parallelogram6(l,b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = l*b*h\n    return(area)\ndef area_trapezoid(l,b,h):\n    '''\n    Write a functio"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2+w**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\n    \ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to compute the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=math.sqrt((a**2)+(b**2))\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    pass\n    if w==h:\n        print(w,h)\n    elif w!=h:\n        print('Invalid Input')\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w**2 + h**2\n    b = w**2 - h**2\n    print(a,b)\n    c = math.sqrt(a)\n    c = c/2\n    print(c)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if(i>max):\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if len(listval) == 0:\n        return 'Empty list'\n    maxval = listval[0]\n    for i in listval:\n        if i > maxval:\n            maxval = i\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for element in listval:\n        if element > max_val:\n            max_val = element\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_v = listval[0]\n    for i in listval:\n        if i > max_v:\n            max_v = i\n    return max_v\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value=listval[0]\n    for i in range(1,len(listval)):\n        if max_value<listval[i]:\n            max_value=listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval = [2, 2, 5, 7, 0]\n    if len(listval) == 0:\n        return None\n    else:\n        maximum = listval[0]\n        for i in range(len(listval)):\n            if listval[i] > maximum:\n                maximum = listval[i]\n        return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        # first value is the maximum, compare it with the rest of the values\n        max_value = listval[0]\n        for x in listval:\n            if x > max_value:\n                max_value = x\n        return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1,len(listval)):\n        if max < listval[i]:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 0:\n        return 'Must be positive.'\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    #Create empty list\n    divisors = []\n    #Create for loop that goes through 1 to number\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    print(divisors)\n    print(sum(divisors))\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = [1]\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            divs.extend([i, number // i])\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1,number+1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = [1, number]\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            divs.append(i)\n            if i!= number / i:\n                divs.append(int(number / i))\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 1\n    total = 1\n    while(div <= number):\n        if(number % div == 0):\n            total += div\n        div += 1\n    return total\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inversions = 0\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            if(arr[i] > arr[j]): \n                Inversions = Inversions + 1\n    return Inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr_len = len(arr)\n    #print(arr)\n    if arr_len < 2: \n        return 0 \n    return mergesort(arr)\n    \ndef mergesort(arr):\n    arr_len = len(arr)\n    if arr_len < 2: \n        return 0 \n    mid = int(arr_len / 2)\n    arr_1 = arr[:mid]\n    arr_2 = arr[mid:]\n    return (mergesort(arr_1) + mergesort(arr_2) + merge(arr_1,arr_2))\n    \ndef merge(arr_1, arr_2): \n    '''\n    Write a python function to merge 2 arrays.\n    '''\n    arr_len_1 = len(arr_1)\n    arr_len_2 = len(arr_2)\n    arr_3 = []\n    i = 0 \n    j = 0 \n    k = 0 \n    while i < arr_len_1 and j < arr_len_2: \n        if arr_1[i] <= arr_2[j]: \n            arr_3.append(arr_1[i])\n            i += 1\n        else: \n            arr_3.append(arr_2[j])\n            j += 1\n    while i < arr_len_1: \n        arr_3.append(arr_1[i])\n        i += 1\n    while j < arr_len_2: \n        arr_3.append(arr_2[j])\n        j += 1\n    return arr_3\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                Inv_count += 1\n    return Inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    temp = [0]*len(arr)\n    return mergeSort(arr, temp, 0, len(arr)-1)\n    \n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Inversion Count in input array =\n    # number of elements minus the max value\n    # that are smaller than it. \n    # no. of inversions = inversion_count + (n-1 - inversion_count)\n    inversion_count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] > arr[j]):\n                inversion_count += 1\n    return inversion_count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    temp = [0] * (len(arr))\n    return _mergeSort(arr, temp, 0, len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Function to use divide and conquer\n    # to count inversions\n    def mergeSort(arr, n):\n        # A temp_arr is created to store\n        # sorted array in merge function\n        temp_arr = [0]*n\n        return _mergeSort(arr, temp_arr, 0, n-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    global ans\n    def merge_Sort(arr, size): \n        global ans\n        if size > 1: \n            mid = size//2\n            L = arr[0:mid] \n            R = arr[mid:size]\n            merge_Sort(L, len(L))\n            merge_Sort(R, len(R))\n            i = j = k = 0\n            while i < len(L) and j < len(R): \n                if L[i] < R[j]: \n                    arr[k] = L[i] \n                    i+=1\n                else: \n                    ans += len(L) - i\n                    arr[k] = R[j] \n                    j+=1\n                k+=1\n            while i < len(L): \n                arr[k] = L[i] \n                i+=1\n                k+=1\n            while j < len(R): \n                arr[k] = R[j] \n                j+=1\n                k+=1\n    def countInversions(arr, size): \n        global ans\n        ans = 0\n        merge_Sort(arr, size)\n        return ans\n    return countInversions(arr, len(arr))\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\ndef get_Inv_Count_Optmized(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\ndef get_Inv_Count_Optmized_Util(arr, start, end): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if start >= end:\n        return 0\n    mid = (start + end) // 2\n    inv_count = get_Inv_Count_Optmized(arr, start, mid)\n    inv_count += get_Inv_Count_Optmized(arr, mid + 1, end)\n    inv_count += merge_two_sorted_arrays(arr, start, mid, end)\n    return inv_count\ndef merge_two_sorted_arrays(arr1, start1, end1, arr2, start2, end2):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr = []\n    i = start1\n    j = start2\n    inv_count = 0\n    while i <= end1 and j <= end2:\n        if arr1[i] <= arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n            inv_count += (end1 - i)\n    while i <= end1:\n        arr.append(arr1[i])\n        i += 1\n    while j <= end2:\n        arr.append(arr2[j])\n        j += 1\n    for i in range(len(arr)):\n        arr[i] = arr[i]\n    return inv_count\nif __name__ == '__main__':\n    arr = [1, 20, 6, 4, 5]\n    print(get_Inv_Count(arr))\n    arr = [2, 4, 1, 3, 5]\n    print(get_Inv_Count(arr))\n    arr = [2, 4, 1, 3, 5]\n    print(get_Inv_Count_Optmized(arr))\n    arr = [2, 4, 1, 3, 5]\n    print(get_Inv_Count_Optmized_Util(arr, 0, len(arr) - 1)"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    def flatten_list_recursive(nested_list):\n        for item in nested_list:\n            if isinstance(item, list):\n                flatten_list_recursive(item)\n            else:\n                result.append(item)\n    flatten_list_recursive(list1)\n    return result\n    # for element in nested_list:\n    #     if isinstance(element, list):\n    #         flatten_list(element)\n    #     else:\n    #         result.append(element)\n    # return result\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    if isinstance(list1, list) and len(list1) > 0:\n        for item in list1:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n    return result\n    \n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten = []\n    for i in list1:\n        if type(i) is list:\n            flatten += flatten_list(i)\n        else:\n            flatten.append(i)\n    return flatten\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if type(i) is list:\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    def flat_list_recursive(lst):\n        for i in lst:\n            if type(i) == list:\n                flat_list_recursive(i)\n            else:\n                flat_list.append(i)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten(sublist):\n        return [item for sublist in sublist for item in sublist]\n    return flatten(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # create a blank list to store all values of list1\n    flat_list = []\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1,list) and list1:\n        if isinstance(list1[0],list):\n            return flatten_list(list1[0]) + flatten_list(list1[1:])\n        return list1[:1] + flatten_list(list1[1:])\n    return []\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            flat_list.append(sublist)\n    return flat_list\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Write your code here\n    aggregate = []\n    for key, values in stdata:\n        aggregate.append(values)\n    return max(aggregate)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # looping through each student data dictionary\n    for i in range(len(stdata)):\n        total = 0\n        # looping through each key (exam, assignment, quiz) and adding them up to total\n        for k in stdata[i].keys():\n            total = total + int(k)\n        print(total)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(list)\n    for id, element in enumerate(stdata):\n        data[element[0]].append(element[1])\n    return max([sum(i) for i in data.values()])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(float)\n    for tup in stdata:\n        for k,v in tup.items():\n            max_dict[k] = max(v,max_dict[k])\n    return max_dict\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max([sum(x) for x in stdata])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_ = 0\n    for i in stdata:\n        if i[0] > i[1] and i[0] > i[2]:\n            max_ = i[0]\n    return max_\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #stdata = [('b', 10), ('a', 5), ('c', 10)]\n    #stdata = [('a', 20), ('b', 6), ('c', 12)]\n    d = defaultdict(list)\n    stdata = sorted(stdata, key=lambda x: x[0])\n    #print(stdata)\n    for item in stdata:\n        d[item[0]].append(item[1])\n    #print(d)\n    for key in d:\n        print('maximum aggregate of {} is {}'.format(key, max(d[key])))\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for tpl in stdata:\n        if tpl[2] > max_aggregate:\n            max_aggregate = tpl[2]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    st_data_list = [item for t in stdata for item in t]\n    return max(st_data_list)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Base Case: n = 0, 2 ** 0 = 1, so for 0th term, we have one way, i.e., empty set of bits. \n    if (n == 0): \n        return 1\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def print_binary_seq(n, i, s): \n        if i == 0: \n            print(' '*(2*n) + str(s))\n        else: \n            print_binary_seq(n, i-1, s + 2**i) \n            print_binary_seq(n, i-1, s) \n    def same_last_first(n, i, s): \n        if 2*n < i: \n            return\n        elif 2*n == i: \n            if s == 0: \n                return\n            else: \n                print(str(s))\n        else: \n            same_last_first(n, i-1, s) \n            same_last_first(n, i-1, s + 2**i) \n    print_binary_seq(n, n, 0) \n    same_last_first(n, n, 0) \n    print('\\n') \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # n = int(input(\"Enter length of binary sequence: \"))\n    count = 0\n    for i in range(0, (2 ** n)): \n        s = str(bin(i))[2:] \n        if len(s) == n: \n            if int(s[:n], 2) == int(s[n:], 2): \n                count += 1\n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if (n == 0): \n        return 1; \n    return 2 * count_binary_seq(n - 1); \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**(2*n)):\n        a = i\n        b = i^(i>>1)\n        c = a>>n\n        d = b>>n\n        if a == b and c==d:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    table = [0]*(2**(2*n))\n    table[0] = 1\n    for i in range(2**(2*n)-1):\n        j = i+1\n        while j < 2**(2*n):\n            table[j] += table[i]\n            j += 1\n    return table[-1]\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    arr = [[0] * 2**n for i in range(n)]\n    for i in range(n):\n        for j in range(2**n):\n            arr[i][j] = 1\n    for i in range(2, n):\n        for j in range(2**n):\n            for k in range(j+1):\n                arr[i][j] += arr[i-1][k]\n    for i in range(n):\n        for j in range(2**n):\n            if (j >> i) & 1 == 0 and j >> (i+1) & 1 == 0:\n                arr[n][j] = arr[n-1][j]\n    for i in range(2, n):\n        for j in range(2**n):\n            for k in range(j+1):\n                arr[n][j] += arr[n-i][k]\n    return arr[n][2**n-1]\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n):\n        if n < 1:\n            return 0\n        else:\n            return (2 ** n) * count(n-1) + count(n-1)\n    return count(n)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    elif not d:\n        return 1\n    return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = dict_depth(v)\n        else:\n            depth = 0\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    else:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    return 1 + max(dict_depth(d[k]) for k in d)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print(arr)\n    print(ranges)\n    print(rotations)\n    print(index)\n    a = []\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index <= ranges[i][1] :\n            a.append(rotations[i])\n    print(a)\n    print(a[0])\n    return a[0]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    l = len(arr)\n    if index>=l :\n        index = index % l\n    elif index < 0 :\n        index = l + index\n    while rotations > 0 :\n        index = (index+ranges) % l\n        rotations -= 1\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    for i in range(0,ranges,rotations) : \n        index+=1\n    \n    return arr[index]\n    \ndef find_Index(arr,ranges,rotations,element) : \n    '''\n    Write a python function to find index of a given element after number of rotations.\n    '''\n    for i in range(0,ranges,rotations) : \n        if element == arr[i] : \n            return i\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    global maxi\n    if index >= len(arr) :\n        return\n    # print(arr[index],ranges,rotations)\n    if ranges > maxi :\n        maxi = ranges\n    # print(maxi)\n    if ranges in rotations[arr[index]] :\n        # print(arr[index],ranges,rotations[arr[index]])\n        find_Element(arr,ranges+1,rotations,index+1)\n    find_Element(arr,ranges,rotations,index+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #arr = [4,3,5,6,7,7,8,9]\n    #ranges = [0,1,2,3,4,5,6,7]\n    #rotations = [1,1,0,2,0,3,1,0]\n    #index = 4\n    #element = 8\n    for i in range(0,len(arr)) :\n        if index < rotations[i] + ranges[i] :\n            element = arr[i]\n    return element\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    num_rotations = index % len(rotations)\n    num_rotations = num_rotations % len(ranges)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    first = (ranges[0][1] - ranges[0][0] + 1)%ranges[0][2] \n    last = (ranges[-1][1] - ranges[-1][0] + 1)%ranges[-1][2] \n    if index<first : \n        return arr[ranges[0][0] + index%ranges[0][2]]\n    elif index>last : \n        return arr[ranges[-1][0] + (index%ranges[-1][2]) - last%ranges[-1][2] - 1]\n    else : \n        for i in range(1,len(ranges)) :\n            if ranges[i-1][1] <= index and index <= ranges[i][0] : \n                return arr[ranges[i-1][0] + (index%ranges[i-1][2]) - (ranges[i-1][1]%ranges[i-1][2])]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    x = index\n    for i in range(0,rotations) : \n        x = r_arr[x]\n    return x\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    new_arr = []\n    for i in range(ranges[0],ranges[1]) :\n        new_arr.append(arr[i])\n    \n    new_arr = new_arr[rotations:] + new_arr[:rotations]\n    print(new_arr[index])\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index > len(arr) : \n        print(\"Index should be less than length of array\")\n    elif len(arr) == 0 : \n        print(\"Array is empty\")\n    elif len(arr) == 1 and index == 0 : \n        print(arr[0])\n    else : \n        if (index + rotations) >= len(arr) : \n            print(arr[(index + rotations) % len(arr)])\n        else : \n            print(arr[(index + rotations)])\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # new_list = []\n    # for word in words:\n    #     if word[0] == 'p':\n    #         new_list.append(word)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words == [] or words == None:\n        return \"No Match\"\n    else:\n        counter = 0\n        words_counter = 0\n        p_words = []\n        for i in words:\n            if i[0] == \"p\":\n                counter += 1\n                p_words.append(i)\n        if counter == 0:\n            return \"No Match\"\n        else:\n            return p_words[0],p_words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_list = words.split()\n    result_list = []\n    for i in words_list:\n        if i.startswith('p'):\n            result_list.append(i)\n    return result_list\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    lst = []\n    for word in words:\n        if word[0] == 'p':\n            lst.append(word)\n    return lst\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # starting with 'p'\n    word_list = words\n    first_word = None\n    second_word = None\n    for word in word_list:\n        if word.startswith('p'):\n            first_word = word\n            break\n    for word in word_list:\n        if word.startswith('p'):\n            second_word = word\n            break\n    print(f'First word is {first_word} and Second word is {second_word}')\n    return first_word,second_word\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    print(\"\\nStart with P\")\n    word_list = words.split(\" \")\n    p_word = []\n    for i in word_list:\n        if i[0] == 'p':\n            p_word.append(i)\n    print(p_word)\n    return p_word\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    final=[]\n    for word in words:\n        if word.startswith('p'):\n            final.append(word)\n    return final\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return list(filter(lambda word: word.startswith('p'),words))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    x=[]\n    for i in words:\n        if i.startswith(\"p\"):\n            x.append(i)\n    print(x)\ndef print_reversed(words):\n    '''\n    Write a function to reverse a string. \n    '''\n    for i in words[::-1]:\n        print(i)\ndef num_vowels(words):\n    '''\n    Write a function to count the number of vowels in a string. \n    '''\n    x=0\n    for i in words:\n        if i in \"aeiouAEIOU\":\n            x+=1\n    print(x)\ndef find_all(words,char):\n    '''\n    Write a function to print all occurrences of a character in a string. \n    '''\n    for i in words:\n        if i == char:\n            print(i)\ndef end_withp(words):\n    '''\n    Write a function to remove and print the last three characters in a string.\n    '''\n    x=words[-3:]\n    print(x)\ndef palindrome(words):\n    '''\n    Write a function to check if a string is palindrome or not. \n    '''\n    if words == words[::-1]:\n        print(\"Palindrome\")\n    else:\n        print(\"Not Palindrome\")\ndef reverse_and_join(words):\n    '''\n    Write a function to reverse and join a string\n    '''\n    print(\"\".join(reversed(words)))\ndef split_and_join(words):\n    '''\n    Write a function to split a string into a list of characters and join them using a separator.\n    '''\n    x = words.split(\" \")\n    print(\" \".join(x))\ndef is_palindrome(words):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    y = [i for i in words.split() if i.isalnum()]\n    z = \"\".join(y)\n    if z == z[::-1]:\n        print(\"Palindrome\")\n    else:\n        print(\"Not Palindrome\")\ndef is_pangram(sentence,alphabet):\n    '''\n    Write a function to check whether a string is pangram or not. \n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in alphabet:\n        if char not in sentence.lower():\n            return False\n    return True\ndef rotate_string(sentence):\n    '''\n    Write a function to rotate a string by a given amount of places. \n    '''\n    x = sentence[1:]+sentence[0]\n    print(x)\ndef reverse_words(sentence):\n    '''\n    Write a function to reverse words in a given string. \n    '''\n    a = sentence.split(\" \")\n    a.reverse()\n    print(\" \".join(a))\ndef remove_vowels(sentence):\n    '''\n    Write a function to remove all vowels in a given string. \n    '''\n    v = \"aeiouAEIOU\"\n    for i in sentence:\n        if i in v:\n            sentence = sentence.replace(i,\"\")\n    print(sentence)\ndef check_pangram(sentence):\n    '''\n    Write a function to check whether a string is a pangram or not. \n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in alphabet:\n        if char not in sentence.lower():\n            return False\n    return True\ndef is_isogram(words):\n    '''\n    Write a function to check whether a string is an isogram or not. \n    '''\n    words = words.lower()\n    if len(set(words))==len(words):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef is_isogram(words):\n    '''\n    Write a function to check whether a string is an isogram or not. \n    '''\n    words = words.lower()\n    for i in words:\n        if words.count(i) > 1:\n            return False\n    return True\ndef remove_duplicates(sentence):\n    '''\n    Write a function to remove duplicate characters in a string. \n    '''\n    x = sentence.split(\" \")\n    y = list(set(x))\n    z = \" \".join(y)\n    print(z)\ndef count_substring(words,char):\n    '''\n    Write a function to count the number of times a substring occurs in a given string. \n    '''\n    count=0\n    for i in words:\n        if i == char:\n            count+=1\n    print(count)\ndef string_rotation(s1, s2):\n    '''\n    Write a function to check if two strings are rotation of each other or not. \n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.lower()\n        s2 = s2.lower()\n        s1 = s1.replace(\" \",\"\")\n        s2 = s2.replace(\" \",\"\")\n        if len(s1)!= len(s2):\n            return False\n        for i in range(len(s1)):\n            if s1[i:]+s1[:i] == s2:\n                return True\n        return False\ndef find_substring(words,num):\n    '''\n    Write a function to count the number of times a substring occurs in a given string. \n    '''\n    count=0\n    for i in range(len(words)-1):\n        if words[i] == words[i+1]:\n            count+=1\n        if count==num:\n            print(words[i])\ndef text_justification(words,k):\n    '''\n    Write a function to print a text justified according to the given width. \n    '''\n    x = []\n    count = 0\n    for i in words:\n        count+=len(i)\n    x.append(words[0])\n    for i in range(1,len(words)):\n        if count+len(words[i])>k:\n            x.append(\"\\n\")\n            x.append(words[i])\n            count = len(words[i])\n        else:\n            x.append(words[i])\n            count+=len(words[i])\n    print(\" \".join(x))\ndef string_splosion(words):\n    '''\n    Write a function to print a given string multiple times. \n    '''\n    print(words[:2])\n    print(words[:3])\n    for i in range(len(words)):\n        print(words)\ndef caesar_cipher(words):\n    '''\n    Write a function to encrypt a string with caesar cipher. \n    '''\n    k = int(input(\"Enter key: \"))\n    for i in words:\n        print(chr(ord(i)+k),end=\"\")\ndef mirror_image(sentence):\n    '''\n    Write a function to print a mirrored version of a given string. \n    '''\n    for i in sentence[::-1]:\n        print(i)\ndef find_substring(words,num):\n    '''\n    Write a function to count the number of times a substring occurs in a given string. \n    '''\n    count=0\n    for i in range(len(words)-1):\n        if words[i] == words[i+1]:\n            count+=1\n        if count==num:\n            print(words[i])\ndef string_match(words):\n    '''\n    Write a function to check if two given strings are rotations of each other or not. \n    '''\n    words = words.lower()\n    for i in range(len(words)):\n        if words[i:]+words[:i] in words:\n            print(\"Yes\")\n        else:\n            print(\"No\")\ndef count_substring(words,char):\n    '''\n    Write a function to count the number of times a substring occurs in a given string. \n    '''\n    count=0\n    for i in range(len(words))"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [i for i in words if i[0]=='p']\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == k:\n        return 0\n    if index < k:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k),\n            max_sum_increasing_subseq(a, n, index + 1, k))\n    if index == k:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if index == n:\n    #     return 0\n    #\n    # if k > index:\n    #     return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n    # else:\n    #     return max_sum_increasing_subseq(a, n, index + 1, k)\n    #\n    # # max_sum = max_sum_increasing_subseq(a, n, index + 1, k)\n    #\n    # # for i in range(index, n):\n    # #     max_sum = max(a[i] + max_sum_increasing_subseq(a, n, i + 1, k), max_sum)\n    # #\n    # # return max_sum\n    #\n    # # # Approach 2 : 2D Dynamic Programming\n    # #\n    # # if dp[i][k] == -1:\n    # #     max_sum = max_sum_increasing_subseq(a, n, index + 1, k)\n    # #     for i in range(index + 1, n):\n    # #         max_sum = max(a[i] + max_sum_increasing_subseq(a, n, i + 1, k), max_sum)\n    # #\n    # #     dp[index][k] = max_sum\n    # #\n    # # return dp[index][k]\n    #\n    # # Approach 3 : 1D Dynamic Programming\n    #\n    # if dp[index] == -1:\n    #     dp[index] = max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n    #\n    # return dp[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return 0\n    elif index == 1:\n        return a[index-1]\n    elif k > index:\n        return max(a[index-1], max_sum_increasing_subseq(a, n, index-1, k))\n    else:\n        # greedy\n        return max(a[index-1] + max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index-1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    max_sum = -10000000\n    for i in range(0, n):\n        if i < k and i < index:\n            max_sum = max(max_sum, max_sum_subseq(a, n, index, i) + a[i])\n        else:\n            max_sum = max(max_sum, max_sum_subseq(a, n, index, i) + a[i], max_sum_increasing_subseq(a, n, index, k))\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return 0\n    max_sum = 0\n    for i in range(index - 1, -1, -1):\n        if a[i] < a[index] and k - i > index - i:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[i])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == n:\n        return 0\n    if k == 0:\n        return 0\n    if index == k:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # If k is smaller than i, then we have to find the max sum of increasing subsequence from i to k.\n    # This means we have to calculate for the previous increasing subsequence (including i) and prefix sum till k-1 index.\n    # Then we can find the current sum of increasing subsequence (including k) and prefix sum till k index.\n    # The max sum of subsequence is maximum of 2 choices.\n    if k < index:\n        return max_sum_increasing_subseq(a, n, index, k+1)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0 or index >= n:\n        return -1e20\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return max(a[0], a[1])\n    if index == 0:\n        return a[0]\n    if index == 1:\n        return max(a[0], a[1])\n    return max(a[index] + max_sum_increasing_subseq(a, n-1, index-2, k),\n        max_sum_increasing_subseq(a, n-1, index-1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0 or index >= n or k < 0 or k >= n:\n        return 0\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    t = ()\n    for i in range(m):\n        tuplex[i] = tuplex[i][:n]\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    listx=list(tuplex)\n    for i in range(m):\n        listx.append(':')\n    listx.append(tuplex[-1])\n    for i in range(m+1,n):\n        listx.append(':')\n    return tuple(listx)\n    \ndef colon_listx(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    for i in range(m):\n        listx.append(':')\n    listx.append(listx[-1])\n    for i in range(m+1,n):\n        listx.append(':')\n    return listx\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n+1]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(map(lambda x: x[m:m+n], tuplex))\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    if m!= n:\n        tuplex = tuplex[0:m] + (tuplex[m:n] + (0,) * (n - m)) + tuplex[n:]\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x=tuplex[m:n]\n    return x\ndef print_tuple_v2(tuplex):\n    for i in range(len(tuplex)):\n        print(tuplex[i])\ndef search_n_count(tuplex,value):\n    '''\n    Write a function to count the number of n in a tuple.\n    '''\n    count=0\n    for i in tuplex:\n        if i==value:\n            count+=1\n    return count\ndef search_n_count2(tuplex,value):\n    '''\n    Write a function to count the number of n in a tuple.\n    '''\n    count=0\n    for i in tuplex:\n        if i==value:\n            count+=1\n    return count\ndef search_n_index(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]==value:\n            return i\n    return -1\ndef search_n_index2(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]==value:\n            return i\n    return -1\ndef search_n_index3(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i in tuplex:\n        if i==value:\n            return tuplex.index(i)\n    return -1\ndef search_n_index4(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index5(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index6(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index7(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return tuplex.index(j)\n    return -1\ndef search_n_index8(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return tuplex.index(j)\n    return -1\ndef search_n_index9(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index10(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index11(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index12(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index13(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return tuplex.index(j)\n    return -1\ndef search_n_index14(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return tuplex.index(j)\n    return -1\ndef search_n_index15(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return tuplex.index(j)\n    return -1\ndef search_n_index16(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index17(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index18(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index19(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index20(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index21(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index22(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index23(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index24(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index25(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef search_n_index26(tuplex,value):\n    '''\n    Write a function to get the index of n in a tuple.\n    '''\n    for i,j in enumerate(tuplex):\n        if j==value:\n            return i\n    return -1\ndef searc"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex=[]\n    for i in range(m):\n        new_tuplex.append(tuplex[i][n])\n    return tuple(new_tuplex)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l = []\n    for i in range(m):\n        if i >= n:\n            l.append(tuplex[i][i-n:i+1])\n        else:\n            l.append(tuplex[i][:i+1])\n    return tuple(l)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_list=list(tuplex)\n    for i in range(len(tuplex_list)):\n        tuplex_list[i]=list(tuplex_list[i])\n        for j in range(len(tuplex_list[i])):\n            tuplex_list[i][j]=list(tuplex_list[i][j])\n    tuplex_list=list(zip(*tuplex_list))\n    for i in range(len(tuplex_list)):\n        tuplex_list[i]=tuple(tuplex_list[i])\n    tuplex_list=list(zip(*tuplex_list))\n    tuplex_list=list(zip(*tuplex_list))\n    for i in range(len(tuplex_list)):\n        tuplex_list[i]=list(tuplex_list[i])\n    tuplex_list=list(zip(*tuplex_list))\n    tuplex_list=list(zip(*tuplex_list))\n    for i in range(len(tuplex_list)):\n        tuplex_list[i]=list(tuplex_list[i])\n    tuplex_list=list(zip(*tuplex_list))\n    tuplex_list=list(zip(*tuplex_list))\n    tuplex_list=list(zip(*tuplex_list))\n    for i in range(len(tuplex_list)):\n        tuplex_list[i]=tuple(tuplex_list[i])\n    tuplex_list=tuple(tuplex_list)\n    return tuplex_list\n    \n    \ndef sort_colon(tuplex,m,n):\n    '''\n    Write a function to sort a tuple according to the mth,nth column.\n    '''\n    tuplex=list(tuplex)\n    for i in range(len(tuplex)):\n        tuplex[i]=list(tuplex[i])\n    tuplex_list=list(zip(*tuplex))\n    for i in range(len(tuplex_list)):\n        tuplex_list[i]=list(tuplex_list[i])\n    tuplex_list=tuple(tuplex_list)\n    for i in range(len(tuplex)):\n        tuplex[i]=tuple(tuplex[i])\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_list=[]\n    for i in range(len(tuplex)):\n        colon_list.append(tuplex[i][m:n])\n    return colon_list\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Populate nums1 with product of factors from nums2\n    for i in range(N):\n        nums1[i] = nums2[i] * nums2[i]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = {}\n    for i in nums1:\n        for j in nums2:\n            products[i*j] = [i,j]\n    return sorted(products, reverse = True)[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) + len(nums2):\n        return None\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1, reverse = True)\n    nums2 = sorted(nums2, reverse = True)\n    \n    largest_numbers = []\n    for i in range(N):\n        largest_numbers.append(nums1[i]*nums2[i])\n    return largest_numbers\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_prod = -float(\"inf\")\n    for i in range(N):\n        for j in range(N):\n            prod = nums1[i] * nums2[j]\n            if prod > largest_prod:\n                largest_prod = prod\n    return largest_prod\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    global_max = 0\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            if product > global_max:\n                global_max = product\n    return global_max\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        result.append(nums1[i] * nums2[i])\n    \n    return sorted(result, reverse=True)[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    count = N\n    if count > len(nums1) or count > len(nums2):\n        return 0\n    \n    nums1.sort()\n    nums2.sort()\n    \n    if count == 1:\n        return max(nums1[-1] * nums2[-1], nums1[-2] * nums2[-2], nums1[-3] * nums2[-3], nums1[-4] * nums2[-4])\n    else:\n        return max(nums1[-count] * nums2[-count], large_product(nums1[:-count], nums2[:-count], count - 1))\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import itertools\n    list_prod = []\n    for i,j in itertools.product(nums1, nums2):\n        list_prod.append(i*j)\n    list_prod.sort(reverse = True)\n    return(list_prod[:N])\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    idx1 = N//2\n    idx2 = N//2\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef power_a_b(a,b):\n    '''\n    Write a python function to compute a to the power b.\n    '''\n    power=1\n    for i in range(b):\n        power=power*a\n    return power\ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number n.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef factorial_iterative(n):\n    '''\n    Write a python function to compute the factorial of a given number n.\n    '''\n    fact=1\n    for i in range(1,n+1):\n        fact=fact*i\n    return fact\ndef sum_of_digits(n):\n    '''\n    Write a python function to compute the sum of the digits of a given number n.\n    '''\n    sum=0\n    while(n):\n        r=n%10\n        sum=sum+r\n        n=n//10\n    return sum\ndef sum_of_digits_iterative(n):\n    '''\n    Write a python function to compute the sum of the digits of a given number n.\n    '''\n    sum=0\n    while(n):\n        sum+=n%10\n        n=n//10\n    return sum\ndef decimal_to_binary(n):\n    '''\n    Write a python function to convert the decimal number to its binary equivalent.\n    '''\n    binary=[]\n    while(n):\n        rem=n%2\n        binary.append(rem)\n        n=n//2\n    binary.reverse()\n    return binary\ndef decimal_to_binary_iterative(n):\n    '''\n    Write a python function to convert the decimal number to its binary equivalent.\n    '''\n    binary=[]\n    while(n):\n        rem=n%2\n        n=n//2\n        binary.append(rem)\n    binary.reverse()\n    return binary\ndef sum_of_digits_recursive(n):\n    '''\n    Write a python function to compute the sum of the digits of a given number n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10+sum_of_digits_recursive(n//10)\ndef sum_of_digits_recursive_iterative(n):\n    '''\n    Write a python function to compute the sum of the digits of a given number n.\n    '''\n    sum=0\n    while(n):\n        sum+=n%10\n        n=n//10\n    return sum\ndef check_palindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if(string==string[::-1]):\n        return True\n    else:\n        return False\ndef check_palindrome_iterative(string):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    rev=string[::-1]\n    if(string==rev):\n        return True\n    else:\n        return False\ndef reverse_a_string(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return string[::-1]\ndef reverse_a_string_iterative(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    rev=\"\"\n    for i in range(len(string)):\n        rev=string[i]+rev\n    return rev\ndef check_if_prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef check_if_prime_iterative(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Write a python function to compute the prime factors of a given number n.\n    '''\n    primes=[]\n    while(n%2==0):\n        primes.append(2)\n        n=n//2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while(n%i==0):\n            primes.append(i)\n            n=n//i\n    if n>2:\n        primes.append(n)\n    return primes\ndef prime_factors_iterative(n):\n    '''\n    Write a python function to compute the prime factors of a given number n.\n    '''\n    primes=[]\n    while(n%2==0):\n        primes.append(2)\n        n=n//2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while(n%i==0):\n            primes.append(i)\n            n=n//i\n    if n>2:\n        primes.append(n)\n    return primes\ndef rotate_a_string(string,n):\n    '''\n    Write a python function to rotate a string by n characters.\n    '''\n    return string[n:]+string[:n]\ndef rotate_a_string_iterative(string,n):\n    '''\n    Write a python function to rotate a string by n characters.\n    '''\n    return string[n:]+string[:n]\ndef rotate_a_string_recursive(string,n):\n    '''\n    Write a python function to rotate a string by n characters.\n    '''\n    if len(string)==1:\n        return string\n    else:\n        return rotate_a_string_recursive(string[1:],n)+string[0]\ndef rotate_a_string_recursive_iterative(string,n):\n    '''\n    Write a python function to rotate a string by n characters.\n    '''\n    if len(string)==1:\n        return string\n    else:\n        return string[1:]+string[0]\ndef armstrong_number(n):\n    '''\n    Write a python function to check whether a given number is an armstrong number or not.\n    '''\n    num=n\n    sum=0\n    while(n>0):\n        rem=n%10\n        sum=sum+rem**3\n        n=n//10\n    if(sum==num):\n        return True\n    else:\n        return False\ndef armstrong_number_iterative(n):\n    '''\n    Write a python function to check whether a given number is an armstrong number or not.\n    '''\n    sum=0\n    temp=n\n    while(temp>0):\n        rem=temp%10\n        sum=sum+rem**3\n        temp=temp//10\n    if(sum==n):\n        return True\n    else:\n        return False\ndef check_pallindrome_number(n):\n    '''\n    Write a python function to check whether a given number is a pallindrome number or not.\n    '''\n    num=n\n    rev=0\n    while(n>0):\n        rem=n%10\n        rev=rev*10+rem\n        n=n//10\n    if(num==rev):\n        return True\n    else:\n        return False\ndef check_pallindrome_number_iterative(n):\n    '''\n    Write a python function to check whether a given number is a pallindrome number or not.\n    '''\n    num=n\n    rev=0\n    while(n>0):\n        rem=n%10\n        rev=rev*10+rem\n        n=n//10\n    if(num==rev):\n        return True\n    else:\n        return False\ndef factorial"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        print(\"The maximum is: \",a)\n    else:\n        print(\"The maximum is: \",b)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\nprint(maximum(2,3))\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \nprint(maximum(10,20))\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef prime(num):\n    '''\n    Write a Python program to check a number is prime or not.\n    '''\n    count=0\n    for i in range(1,num+1):\n        if num%i==0:\n            count+=1\n    if count==2:\n        print('The number is prime')\n    else:\n        print('The number is not prime')\ndef palindrome(num):\n    '''\n    Write a Python program to check whether a number is palindrome or not.\n    '''\n    temp=num\n    rev=0\n    while(num>0):\n        dig=num%10\n        rev=rev*10+dig\n        num=num//10\n    if(temp==rev):\n        print('The number is palindrome')\n    else:\n        print('The number is not palindrome')\ndef factorial(num):\n    '''\n    Write a Python program to compute the factorial of a number (a non-negative integer).\n    The function accepts the number as an argument.\n    '''\n    if num==0:\n        return 1\n    else:\n        return num*factorial(num-1)\ndef power(num,p):\n    '''\n    Write a Python program to compute the power of a number.\n    '''\n    return num**p\ndef sumofdigits(num):\n    '''\n    Write a Python program to sum all the digits of a number.\n    '''\n    temp=num\n    sum=0\n    while(num>0):\n        dig=num%10\n        sum+=dig\n        num=num//10\n    print('The sum of digits is ',sum)\ndef sumofodd(num):\n    '''\n    Write a Python program to get the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    '''\n    temp=0\n    sum=0\n    num1=num\n    while(num>=0):\n        temp=num\n        sum=sum+temp\n        num=num-2\n    print('The sum of positive integers is ',sum)\ndef reverse(num):\n    '''\n    Write a Python program to get the reversed string of a number.\n    '''\n    temp=0\n    reversestr=''\n    while(num>0):\n        temp=num%10\n        reversestr=reversestr+str(temp)\n        num=num//10\n    print('The string of a number is ',reversestr)\ndef armstrong(num):\n    '''\n    Write a Python program to check whether a number is an Armstrong number or not.\n    '''\n    temp=num\n    sum=0\n    while(num>0):\n        dig=num%10\n        sum+=dig**3\n        num=num//10\n    if(temp==sum):\n        print('The number is an Armstrong number')\n    else:\n        print('The number is not an Armstrong number')\ndef fibonacci(num):\n    '''\n    Write a Python program to generate the next 10 Fibonacci numbers.\n    '''\n    num1=0\n    num2=1\n    count=0\n    if(num<=0):\n        print('Enter a positive integer')\n    elif(num==1):\n        print('The Fibonacci series of a number is 0, 1')\n    else:\n        while(count<num):\n            print(num1)\n            num3=num1+num2\n            num1=num2\n            num2=num3\n            count=count+1\nnum=int(input('Enter a number'))\nfibonacci(num)\ndef harmonic(num):\n    '''\n    Write a Python program to compute the harmonic value of a number.\n    '''\n    temp=1\n    sum=0\n    for i in range(1,num):\n        temp=temp*(1/i)\n    sum=1/temp\n    print('The harmonic value of the number is',sum)\ndef fact_dig(num):\n    '''\n    Write a Python program to compute the product of the first n positive integers.\n    '''\n    prod=1\n    for i in range(1,num+1):\n        prod=prod*i\n    print('The product of first',num,'numbers is ',prod)\ndef armstrong_dig(num):\n    '''\n    Write a Python program to compute the sum of the digits of the number (modulo 10).\n    '''\n    temp=num\n    sum=0\n    while(num>0):\n        dig=num%10\n        sum=sum+dig\n        num=num//10\n    print('The sum of digits of the number is ',sum)\ndef armstrong_num(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not.\n    '''\n    temp=num\n    sum=0\n    while(num>0):\n        dig=num%10\n        sum=sum+dig**3\n        num=num//10\n    if(temp==sum):\n        print('The number is an Armstrong number')\n    else:\n        print('The number is not an Armstrong number')\ndef pal_num(num):\n    '''\n    Write a Python program to check whether a number is palindrome or not.\n    '''\n    temp=num\n    rev=0\n    while(num>0):\n        dig=num%10\n        rev=rev*10+dig\n        num=num//10\n    if(temp==rev):\n        print('The number is palindrome')\n    else:\n        print('The number is not palindrome')\ndef prime_num(num):\n    '''\n    Write a Python program to check whether a number is prime or not.\n    '''\n    for i in range(2,num):\n        if num%i==0:\n            print('The number is not prime')\n            break\n    else:\n        print('The number is prime')\ndef prime_range(num):\n    '''\n    Write a Python program to generate all the prime numbers within a range.\n    '''\n    for num in range(1,num+1):\n        for i in range(2,num):\n            if num%i==0:\n                break\n        else:\n            print(num)\nnum=int(input('Enter a range'))\nprime_range(num)\ndef sum_prime(num):\n    '''\n    Write a Python program to find the sum of all prime numbers below two million.\n    '''\n    count=0\n    for num in range(2,num+1):\n        for i in range(2,num):\n            if num%i==0:\n                break\n        else:\n            count+=num\n    print('The sum of all prime numbers is ',count)\nnum=int(input('Enter a range'))\nsum_prime(num)"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        lst.append(str1[i])\n    return tuple(lst)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # create list of tuple pairs for each letter in str\n    # compare each pair to each other, if same then\n    # replace with a tuple with the two letters\n    # if not same then retain the original tuple\n    # return final list of tuples\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_to_list = list(str1)\n    str_to_tuple = tuple(str_to_list)\n    return str_to_tuple\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str(str1)\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n > 0, \"n should be greater than 0\"\n    count = n\n    while count % 2 == 0:\n        count = count // 2\n    return count\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & (n-1) == 0:\n        return n\n    else:\n        while n & (n-1)!= 0:\n            n ^= n-1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    temp = n & ~(n - 1) # flip right most bit\n    return temp\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = ~n & n + 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    k = int(n, 2) \n    while (k & 1 == 0 and k!= 0): \n        k = k >> 1\n    return k\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(n)\n    mask = 1<<(len(bin(n))-1)\n    print(mask)\n    return n | mask\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    result = n & (-n)\n    return result\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # One way is to shift the n right till the right most unset bit is set\n    # The bit count is given by bin(~n & n).count('1')\n    # and the shift is bin(~n & n).count('1') << 1\n    # This is same as the following bitwise operation\n    # 1) First we calculate the rightmost set bit, n & -n\n    # 2) Then shift the answer left by 1 to get the leftmost set bit\n    # 3) Now we AND n with n and get a number that has a 1 in the leftmost set bit\n    # 4) Now we shift that number to the right by 1 and get the original number\n    # 5) Finally we OR with n\n    return n ^ (n & -n)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n > 0\n    if n % 2 == 0:\n        return n\n    # n = 2 * n + 1\n    # n = (2n + 1) - 1\n    # (2n+1) = n+1\n    # 2n = n+1 - 1\n    # n = (n+1) // 2\n    return (n+1) // 2\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return 2**(n.bit_length()) - 1 - n\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r == 0:\n        return 0\n    else:\n        volume = math.pi * (r * r) * (h / 3)\n        return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r == 0:\n        print(\"Error! Zero radius\")\n        return None\n    if h == 0:\n        print(\"Error! Zero height\")\n        return None\n    return (math.pi*(r**2)*(h/3))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef volume_cone_3d(r,h,s):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r**2*h+math.pi*r*h*s\ndef volume_cylinder_3d(r,h,s):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h+math.pi*r*h*s\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef volume_right_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a right pyramid.\n    '''\n    return 1/3*a*b*h\ndef volume_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return a*b*c\ndef volume_square_prism(a):\n    '''\n    Write a function to find the volume of a square prism.\n    '''\n    return a**2\ndef volume_rectangular_prism_3d(a,b,c,s):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return a*b*c+a*b*s\ndef volume_square_prism_3d(a,s):\n    '''\n    Write a function to find the volume of a square prism.\n    '''\n    return a**3+a**2*s\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return 4/3*math.pi*a*b*c\ndef volume_triangular_prism(a,b,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    return 1/2*a*b*h\ndef volume_triangular_prism_3d(a,b,h,s):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    return 1/2*a*b*h+a*b*s\ndef volume_circular_cylinder(r,h):\n    '''\n    Write a function to find the volume of a circular cylinder.\n    '''\n    return math.pi*r*h\ndef volume_circular_cylinder_3d(r,h,s):\n    '''\n    Write a function to find the volume of a circular cylinder.\n    '''\n    return math.pi*r*h+math.pi*r*s\ndef volume_rectangular_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a rectangular pyramid.\n    '''\n    return 1/3*a*b*h\ndef volume_rectangular_pyramid_3d(a,b,h,s):\n    '''\n    Write a function to find the volume of a rectangular pyramid.\n    '''\n    return 1/3*a*b*h+a*b*s\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef volume_cuboid_3d(a,b,c,s):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c+a*b*s\ndef volume_cone_from_surface_area(r,s):\n    '''\n    Write a function to find the volume of a cone from the surface area of a curved surface.\n    '''\n    return 1/3*math.pi*r**2*(math.pi*r*s+4)\ndef volume_cone_from_surface_area_3d(r,s,t):\n    '''\n    Write a function to find the volume of a cone from the surface area of a curved surface.\n    '''\n    return 1/3*math.pi*r**2*(math.pi*r*s+4)+1/3*math.pi*r*t\ndef volume_cone_from_surface_area_2d(r,s):\n    '''\n    Write a function to find the volume of a cone from the surface area of a curved surface.\n    '''\n    return 1/3*math.pi*r**2*(math.pi*r*s+4)\ndef volume_cone_from_surface_area_3d_2d(r,s,t):\n    '''\n    Write a function to find the volume of a cone from the surface area of a curved surface.\n    '''\n    return 1/3*math.pi*r**2*(math.pi*r*s+4)+1/3*math.pi*r*t\ndef volume_cone_from_surface_area_4d(r,s,t,u):\n    '''\n    Write a function to find the volume of a cone from the surface area of a curved surface.\n    '''\n    return 1/3*math.pi*r**2*(math.pi*r*s+4)+1/3*math.pi*r*t+1/3*math.pi*r**2*u\ndef volume_cylinder_from_surface_area(r,s):\n    '''\n    Write a function to find the volume of a cylinder from the surface area of a curved surface.\n    '''\n    return math.pi*r**2*(math.pi*r*s+4)\ndef volume_cylinder_from_surface_area_2d(r,s):\n    '''\n    Write a function to find the volume of a cylinder from the surface area of a curved surface.\n    '''\n    return math.pi*r**2*(math.pi*r*s+4)\ndef volume_cylinder_from_surface_area_3d(r,s,t):\n    '''\n    Write a function to find the volume of a cylinder from the surface area of a curved surface.\n    '''\n    return math.pi*r**2*(math.pi*r*s+4)+math.pi*r*t\ndef volume_cylinder_from_surface_area_3d_2d(r,s,t):\n    '''\n    Write a function to find the volume of a cylinder from the surface area of a curved surface.\n    '''\n    return math.pi*r**2*(math.pi*r*s+4)+math.pi*r*t\ndef volume_cylinder_from_surface_area_4d(r,s,t,u):\n    '''\n    Write a function to find the volume of a cylinder from the surface area of a curved surface.\n    '''\n    return math.pi*r**2*(math.pi*r*s+4)+math.pi*r*t+math.pi*r**2*u\ndef volume_sphere_from_surface_area(r):\n    '''\n    Write a function to find the volume of a sphere from the surface area of a curved surface.\n    '''\n    return 4/3*math.pi*r**3\ndef volume_sphere_from_surface_area_2d(r):\n    '''\n    Write a function to find the volume of a sphere from the surface area of a curved surface.\n    '''\n    return 4/3*math.pi*r**3\ndef volume_sphere_from_surface_area_3d(r,s):\n    '''\n    Write a function to find the volume of a sphere from the surface area of a curved surface.\n    '''\n    return 4/3*math.pi*r**3+4/3*math.pi*r*s\ndef volume_sphere_from_surface_area_3d_2d(r,s):\n    '''\n    Write a function to find the volume of a sphere from the surface area of a curved surface.\n    '''\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = 1/3 * math.pi * r**2 * h\n    return volume_cone\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    def volume(r,h):\n        return(3/4)*(math.pi)*r**2*h\n    return volume(r,h)\nprint(volume_cone(3,5))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=3.14\n    return (1/3)*pi*(r**2)*h\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi=3.14\n    return 2*pi*r*(r+math.sqrt(h**2+r**2))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi=3.14\n    return 4/3*pi*(r**3)\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi=3.14\n    return 4*pi*(r**2)\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return s**3\ndef surface_area_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*s**2\ndef volume_right_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a right pyramid.\n    '''\n    return 1/3*(a*b*h)\ndef surface_area_right_pyramid(a,b,h):\n    '''\n    Write a function to find the surface area of a right pyramid.\n    '''\n    return 1/2*(a+b)*h+a**2\ndef volume_parallelepiped(a,b,c,d,e,f):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return a*b*c*d+e*f*a*c+e*f*b*d\ndef surface_area_parallelepiped(a,b,c,d,e,f):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return 2*(a*b+b*c+c*d+d*e+e*f+f*a)\ndef volume_ellipsoid(a,b,c,d,e,f):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return (4/3)*pi*(a*b*c+b*c*d+c*d*e+d*e*f+e*f*a)\ndef surface_area_ellipsoid(a,b,c,d,e,f):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4*pi*(a*b*c+b*c*d+c*d*e+d*e*f+e*f*a)\ndef volume_hemisphere(a):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    return (1/3)*pi*a**3\ndef surface_area_hemisphere(a):\n    '''\n    Write a function to find the surface area of a hemisphere.\n    '''\n    return (2*pi*a**2)\ndef volume_cone_capped(a,b,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*pi*(a**2)*(b+math.sqrt(h**2+b**2))\ndef surface_area_cone_capped(a,b,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 2*pi*a*(a+math.sqrt(h**2+a**2))+pi*(a**2)*(b+math.sqrt(h**2+b**2))\ndef volume_kite(b,d,f):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    return (1/3)*pi*(b*d**2+b*f**2+d*f**2)\ndef surface_area_kite(b,d,f):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return 2*pi*b*(f+d)\ndef volume_dodecahedron(a):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return (1/12)*pi*a**3\ndef surface_area_dodecahedron(a):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return 12*pi*a**2\ndef volume_icosahedron(a):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    return (1/12)*pi*a**3\ndef surface_area_icosahedron(a):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return 20*pi*a**2\ndef volume_tetrahedron(a):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return (1/6)*pi*a**3\ndef surface_area_tetrahedron(a):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return 6*pi*a**2\ndef volume_triangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    return (1/2)*a*b*c\ndef surface_area_triangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    return 2*(a*b+a*c+b*c)\ndef volume_rectangular_prism(a,b):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return a*b\ndef surface_area_rectangular_prism(a,b):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2*(a+b)\ndef volume_cuboid(a,b):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b\ndef surface_area_cuboid(a,b):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 2*(a+b)\ndef volume_rhombus(b,d):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return (1/3)*b*d\ndef surface_area_rhombus(b,d):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return 2*b+(2*math.sqrt(b**2+d**2))\ndef volume_ellipsoid_to_sphere(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid to a sphere.\n    '''\n    return (4/3)*pi*(a*b*c)\ndef surface_area_ellipsoid_to_sphere(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid to a sphere.\n    '''\n    return 4*pi*(a*b*c)\ndef volume_conical_frustum(r,h):\n    '''\n    Write a function to find the volume of a conical frustum.\n    '''\n    return (1/3)*pi*r**2*h\ndef surface_area_conical_frustum(r,h):\n    '''\n    Write a function to find the surface area of a conical frustum.\n    '''\n    return (1/3)*pi*(r**2+r*math.sqrt(r**2+h**2))*2\ndef volume_cuboid_prism(a,b,c):"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3 * math.pi * r * r * h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*(r**2)*h)/3\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*(r**2)*(h/3)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*(r**2)*h\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    assert n >= 0, \"n must be a positive number\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    maxPower = 0\n    i = 1\n    while i <= n:\n        i = i << 1\n    if i > maxPower:\n        maxPower = i\n    return maxPower \n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 0\n    while(2**x <= n):\n        x += 1\n    return x-1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max = 0\n    i = 0\n    while(1):\n        if (2 ** i <= n):\n            if (2 ** i > max):\n                max = 2 ** i\n        else:\n            break\n        i += 1\n    return max\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Return 2^(k-1) if 2^k is not less than n.\n    if (n==0):\n        return 1\n    else:\n        k = 0\n        while (n>0):\n            k += 1\n            n = n>>1\n        return 1<<(k-1)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while(2 ** power <= n): \n        power += 1\n    return power - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # convert n to binary, and extract the 2s.\n    n_bin = '{:08b}'.format(n)\n    n_2s = [ int(i) for i in n_bin[::-1] if i == '1']\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 0\n    while n & 1 == 0: # n & 1 means if n is 2 or more then n will be 0.\n        n = n // 2\n        p += 1\n    return p\n    \n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n & n-1: n &= n-1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<=0:\n        return None\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_seq = [2,1]\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return lucas_seq[n-1]\n    else:\n        for i in range(n-2):\n            lucas_seq.append(lucas_seq[i] + lucas_seq[i+1])\n        return lucas_seq[-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return int(((1 + 5**0.5) / 2) ** n)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = [2, 1]\n    for i in range(2, n):\n        lucas_numbers.append(lucas_numbers[i-1] + lucas_numbers[i-2])\n    return lucas_numbers[n-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    if n < 0:\n        return None\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n        \n        \ndef find_sum_of_series(n, base, diff):\n    '''\n    Write a function to find the sum of the first n terms in an Arithmetic Series\n    with a given common difference. The common difference must be an integer.\n    The base can be any number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return base\n    else:\n        return find_sum_of_series(n-1, base, diff) + diff\n        \n        \ndef is_prime(n):\n    '''\n    Write a function that takes a single integer as argument and returns\n    True if the argument is prime, otherwise return False.\n    '''\n    if n < 0:\n        return None\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for d in range(3, 1+max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n    \n    \ndef nth_prime(n):\n    '''\n    Write a function that returns then'th prime number.\n    '''\n    \n    if n < 1:\n        return None\n    if n == 1:\n        return 2\n    count = 1\n    current_prime = 3\n    while count < n:\n        current_prime += 2\n        if is_prime(current_prime):\n            count += 1\n    return current_prime\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Base cases \n    if n == 0: \n        return 2\n    if n == 1: \n        return 1\n    \n    # Return lucas series for n\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Base case\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for i in list_:\n        new_list.append(string.format(i))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(map(lambda x : x + string, list_))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [f'{i}: {string}' for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # A sample format string is \"%s %s\".\n    list_ = [string] * len(list_)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    res = []\n    for s in list_:\n        res.append(string.format(s))\n    return res\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string_list = []\n    for element in list_:\n        string_list.append(string.format(element))\n    return string_list\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(list_)\n    return string.format(*list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted = []\n    for element in list_:\n        formatted.append(string.format(element))\n    return formatted\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_string = string.format(*list_)\n    return formatted_string\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(i, string) for i in list_]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst = []\n    dict_lst = {}\n    lst = [l1, l2, l3]\n    dict_lst = {k: v for d in lst for k, v in d.items()}\n    print(dict_lst)\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[i]:{l2[j]:l3[k] for k in range(len(l3))} for j in range(len(l2))} for i in range(len(l1))]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict = {}\n    for i in range(len(l1)):\n        dict[l1[i]] = [l2[i], l3[i]]\n    return dict\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {l2[i]: l3[i]}\n    return dictionary\n    \nl1 = ['a', 'b', 'c']\nl2 = [1, 2, 3]\nl3 = [11, 22, 33]\nprint(convert_list_dictionary(l1, l2, l3)"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1_dict = {}\n    for x, y, z in zip(l1, l2, l3):\n        l1_dict[x] = [y, z]\n    return l1_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    def dict_list_converter(l1, l2, l3):\n        for i in range(len(l1)):\n            if i >= len(l2):\n                return\n            d = {}\n            d[l2[i]] = l3[i]\n            l1.append(d)\n        return l1\n    l = dict_list_converter(l1, l2, l3)\n    return l\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = [1,2,3]\n    l2 = ['a','b','c']\n    l3 = [4,5,6]\n    return dict(zip(l1, zip(l2,l3)))\nprint(convert_list_dictionary(l1, l2, l3))\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    ans = []\n    for i in range(len(l1)):\n        ans.append({'Employee': l1[i], 'Role': l2[i], 'Fees': l3[i]})\n    return ans\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[i]:{l2[j]:l3[k]}} for i in range(len(l1)) for j in range(len(l2)) for k in range(len(l3))]\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    return max (n,get_max_sum(n/2),get_max_sum(n/3),get_max_sum(n/4),get_max_sum(n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    global f\n    f = [0]*(n+1)\n    return max_sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max = 0\n    while n>0:\n        x = int(n/5)\n        y = int(n/3)\n        z = int(n/2)\n        w = int(n)\n        add = max(x, y, z, w)\n        max = max + add\n        n = n - 5\n    return max\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    memo = {}\n    return get_max_sum_helper(n, memo)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    result = 0\n    def f(n):\n        global result\n        if n == 1:\n            result = 1\n            return result\n        if n == 2:\n            result = 2\n            return result\n        if n == 3:\n            result = 3\n            return result\n        else:\n            return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n + 1\n    elif n == 3:\n        return n + 2\n    elif n == 4:\n        return n + 3\n    else:\n        return n + max(get_max_sum(n-1), get_max_sum(n-2), get_max_sum(n-3), get_max_sum(n-4), get_max_sum(n-5))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==0:\n        return 0\n    return max( (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    try:\n        n = int(n)\n        if n < 0:\n            print(\"Invalid input\")\n            return None\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            return max((get_max_sum(int(n/2)) + get_max_sum(int(n/3)) + get_max_sum(int(n/4)) + get_max_sum(int(n/5))), n)\n    except:\n        print(\"Invalid input\")\n        return None\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for l in input_list:\n        if len(l) > max_len:\n            max_len = len(l)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    for i in input_list:\n        if len(i) > maximum:\n            maximum = len(i)\n    return maximum\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for item in input_list:\n        length_list.append(len(item))\n    return(length_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length=0\n    for input_list_item in input_list:\n        if len(input_list_item)>max_length:\n            max_length=len(input_list_item)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if type(item) is list:\n            max_length = max(max_length,max_length_list(item))\n        else:\n            max_length = max(max_length,len(item))\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    print(\"\\nReturn the list with maximum length: \")\n    \n    list_of_max_length = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) == len(max(input_list, key = len)):\n            list_of_max_length.append(input_list[i])\n    return list_of_max_length\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    t = test_tup\n    return len(set(t)) == len(t)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct_tup = ()\n    for i in test_tup:\n        if i not in distinct_tup:\n            distinct_tup += (i,)\n    return len(distinct_tup) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #return len(test_tup) == len(set(test_tup))\n    return len(test_tup) == len(set(frozenset(sub) for sub in test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)== len(set(test_tup)):\n        return True\n    else:\n        return False\n        \n        \n        \ndef tuple_to_string(test_tup):\n    '''\n    Write a function to convert tuple to string.\n    '''\n    string = ''\n    for i in test_tup:\n        string += str(i)\n    return string\n        \n        \n        \n        \n        "
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(sorted(test_tup))\n    if test_tup == test_tup[::-1]:\n        return False\n    return True\n    \n    \n    \n    \n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in range(0,len(str1)):\n        if str1[i] not in dict:\n            dict[str1[i]]=0\n        else:\n            dict[str1[i]]+=1\n    for i in range(0,len(str1)):\n        if dict[str1[i]]==1:\n            return str1[i]\n    return None\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_dict = {}\n    for i in str1:\n        if i not in str_dict:\n            str_dict[i] = 1\n        else:\n            str_dict[i] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_dict = {}\n    for char in str1:\n        if char in str_dict:\n            str_dict[char] += 1\n        else:\n            str_dict[char] = 1\n    \n    for char in str1:\n        if str_dict[char] == 1:\n            return char\n    \n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Mark each character with a flag\n    mapped_str = [0] * 256\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return None\n    else:\n        chars = {}\n        for c in str1:\n            if c in chars:\n                chars[c] += 1\n            else:\n                chars[c] = 1\n        for c in str1:\n            if chars[c] == 1:\n                return c\n        return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return \"Not a single non-repeating character is present in this string!\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    first_non_repeated = \"\"\n    str_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in str_dict:\n            str_dict[str1[i]] += 1\n        else:\n            str_dict[str1[i]] = 1\n    print(str_dict)\n    for i in range(len(str1)):\n        if str_dict[str1[i]] == 1:\n            first_non_repeated = str1[i]\n            break\n    return first_non_repeated\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #code here\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            char_set.remove(char)\n        else:\n            char_set.add(char)\n    for i in range(len(str1)):\n        if str1[i] in char_set:\n            return str1[i]\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Please add your code here\n    unique_chars = set()\n    for i in str1:\n        if i not in unique_chars:\n            unique_chars.add(i)\n    for i in str1:\n        if i not in unique_chars:\n            return i\n    return '_'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\nprint(check_char('aaa'))\nprint(check_char('aaaa'))\nprint(check_char('aAaa'))\nprint(check_char('baab'))\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(len(string) < 2):\n        return False\n    return re.match(regex, string[0] + string[1:len(string) - 1] + string[0] )!= None\n    # return string[0] == string[-1]\n    # if (len(string) < 2):\n    #     return False\n    # for char in string[1:-1]:\n    #     if char!= string[0]:\n    #         return False\n    # return True\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    if (len(string)<1):\n        return False\n    \n    if (re.search(regex,string)):\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 1: \n        return False\n    \n    return True if string[0] == string[-1] else False\n    \n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # pass # Remove pass and write the logic here\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if string[0] == string[-1] else False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.search(regex, string)):\n        print(\"Regex Matched\")\n    else:\n        print(\"Regex not matched\")\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1])\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return \"YES\"\n    else:\n        return \"NO\"\n    \nprint(check_char(input()))\n    \n    \n    \n    \n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            if b>c:\n                return c\n            else:\n                return b\n        else:\n            return a\n    else:\n        if b>c:\n            if a>c:\n                return c\n            else:\n                return a\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    elif c<a and c<b:\n        return c\n    elif a==b and a<c:\n        return a\n    elif b==a and b<c:\n        return b\n    elif c==a and c<b:\n        return c\n    elif a==c and a<b:\n        return a\n    elif b==c and b<a:\n        return b\n    elif c==b and c<a:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)/3\n    \nprint(median_numbers(5,10,20))\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[int(len(numbers)/2)] + numbers[int(len(numbers)/2) - 1]) / 2\n        return median\n    else:\n        median = numbers[int(len(numbers)/2)]\n        return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b:\n        median = a\n    else:\n        median = b\n    if c >= median:\n        return c\n    else:\n        return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a < c:\n            return a\n        if b > c:\n            return b\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return a\n        else:\n            return c\n    elif b < a:\n        if a < c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n    else:\n        if a < c:\n            return c\n        elif b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a >= b):\n        if (a >= c):\n            median = a\n        elif (c >= a):\n            median = c\n    elif (b >= c):\n        median = b\n    elif (c >= b):\n        median = c\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif c > a:\n            return a\n        else:\n            return c\n    elif a > c:\n        return a\n    elif b > c:\n        return c\n    else:\n        return b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b:\n        if a >= c:\n            if b >= c:\n                return b\n            elif b < c:\n                return c\n        elif a < c:\n            return a\n    elif b >= c:\n        if a >= c:\n            return a\n        elif a < c:\n            return c\n    elif a < c:\n        return b\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits_list\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(num) for num in str(nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(map(int, list(str(num))))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_digits(n):\n        if n < 10:\n            return n\n        return n%10 + sum_digits(n//10)\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    #...\n    # raise NotImplemented\n    return sum([int(i) for i in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if nums:\n        return sum([sum(map(int, list(str(n)))) for n in nums])\n    else:\n        return 0\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s = s + sum_of_digits_helper(num)\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(num) for num in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_of_digits_recursive(nums, index=0):\n        if index >= len(nums):\n            return 0\n        return nums[index] + sum_of_digits_recursive(nums, index+1)\n    return sum_of_digits_recursive(nums)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return test_tup1 ^ test_tup2\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    # Begin code\n    tup1, tup2 = tuple(test_tup1), tuple(test_tup2)\n    xor_value = []\n    for i, j in zip(tup1, tup2):\n        xor_value.append(i ^ j)\n    return tuple(xor_value)\n    # End code\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # make sure we are using tuples\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        # create an empty tuple to contain the xor results\n        xor_tup = ()\n        # iterate through each element in the tuple and perform the xor operation\n        for i in range(len(test_tup1)):\n            xor_tup = xor_tup + (test_tup1[i] ^ test_tup2[i],)\n        # return the xor tuple\n        return xor_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    output = ()\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Given tuples are not of equal length')\n    for i in range(len(test_tup1)):\n        output += (test_tup1[i] ^ test_tup2[i], )\n    return output\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    print(f'{test_tup1} xor {test_tup2} =', end=' ')\n    if type(test_tup1) == tuple and type(test_tup2) == tuple:\n        if len(test_tup1) == len(test_tup2):\n            for i in range(len(test_tup1)):\n                print(f'{test_tup1[i]} xor {test_tup2[i]} = {(test_tup1[i]^test_tup2[i])}', end=' ')\n        else:\n            print('Tuples are not of the same length!')\n    else:\n        print('Invalid type(s)!')\n    print()\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    my_set = set()\n    \n    for tup in test_list:\n        my_set.add(tup)\n    \n    return my_set\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tuple in test_list:\n        if tuple in freq.keys():\n            freq[tuple] += 1\n        else:\n            freq[tuple] = 1\n    print(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    print(test_list)\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    print('List:', test_list)\n    unique_tuples = set()\n    for x in test_list:\n        unique_tuples.add(tuple(x))\n    print('Unique tuples:', unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return set(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    if len(test_list) == 1:\n        freq_list.append((test_list[0], 1))\n    else:\n        for i in range(len(test_list)-1):\n            freq_list.append((test_list[i], test_list[i+1]))\n        freq_list.append((test_list[-1], test_list[0]))\n    return freq_list\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # print(len(set(test_list)))\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #create a new list to store the tuples\n    tuples = []\n    #create a new set to store the unique tuples\n    unique_tuples = set()\n    #create a new set to store the unique count\n    unique_count = set()\n    for i in test_list:\n        #create a list of tuples\n        count = len(i)\n        #add the new list of tuples to the unique tuples set\n        unique_tuples.add(tuple(sorted(i)))\n        #add the new count to the unique count set\n        unique_count.add(count)\n    #print the number of unique tuples in the test list\n    print(len(unique_tuples))\n    #print the number of unique count in the test list\n    print(len(unique_count))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup = ()\n    for i in range(len(test_tup1)):\n        tup = tup + (test_tup1[i] + test_tup2[i],)\n    return tup\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i]+test_tup2[i],)\n    return result_tuple\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Approach 1: list comprehension\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple((x+y) for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    try:\n        index = 0\n        nested_tuple_sum = []\n        for i in test_tup1:\n            temp_tuple = []\n            for j in i:\n                temp_tuple.append(test_tup1[index] + test_tup2[index])\n                index += 1\n            nested_tuple_sum.append(tuple(temp_tuple))\n        return tuple(nested_tuple_sum)\n    except TypeError:\n        print('Please enter nested tuples only')\n    except:\n        print('Please enter two valid nested tuples')\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return [t1 + t2 for t1, t2 in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += tuple(i + j for i, j in zip(test_tup1[i], test_tup2[i]))\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return sum(test_tup1[i] + test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(0, len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i], )\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuple(tup1, tup2):\n        tup_sum = []\n        for i in range(len(tup1)):\n            tup_sum.append(tup1[i] + tup2[i])\n        return tuple(tup_sum)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<=b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef smallest(a,b,c):\n    '''\n    Write a python function to find the smallest of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\ndef largest(a,b,c):\n    '''\n    Write a python function to find the largest of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        else:\n            return c\ndef is_even(number):\n    '''\n    Write a python function to check if a number is even.\n    '''\n    if number % 2 == 0:\n        return True\n    else:\n        return False\ndef is_odd(number):\n    '''\n    Write a python function to check if a number is odd.\n    '''\n    if number % 2 == 1:\n        return True\n    else:\n        return False\ndef is_negative(number):\n    '''\n    Write a python function to check if a number is negative.\n    '''\n    if number < 0:\n        return True\n    else:\n        return False\ndef is_positive(number):\n    '''\n    Write a python function to check if a number is positive.\n    '''\n    if number > 0:\n        return True\n    else:\n        return False\ndef is_divisible_by(number, divisor):\n    '''\n    Write a python function to check if a number is divisible by a specific number.\n    '''\n    if number % divisor == 0:\n        return True\n    else:\n        return False\ndef is_divisible_by_any_of(number, divisors):\n    '''\n    Write a python function to check if a number is divisible by a specific list of numbers.\n    '''\n    for divisor in divisors:\n        if number % divisor == 0:\n            return True\n        else:\n            return False\ndef is_within(number, a, b):\n    '''\n    Write a python function to check if a number is within a range of two specific numbers.\n    '''\n    if number >= a and number <= b:\n        return True\n    else:\n        return False\ndef triangle_type(a,b,c):\n    '''\n    Write a python function to find the type of triangle a,b,c is.\n    '''\n    if (a == b) and (a == c) and (b == c):\n        return \"equilateral\"\n    elif (a == b) or (a == c) or (b == c):\n        return \"isosceles\"\n    else:\n        return \"scalene\"\ndef run_example():\n    print(\"-\"*40)\n    print(\"Finding Minimum\")\n    print(minimum(2,4))\n    print(minimum(1,5))\n    print(minimum(4,-3))\n    print(\"Finding Maximum\")\n    print(maximum(2,4))\n    print(maximum(1,5))\n    print(maximum(4,-3))\n    print(\"Finding the Smallest\")\n    print(smallest(2,4,6))\n    print(smallest(1,5,6))\n    print(smallest(4,-3,6))\n    print(\"Finding the Largest\")\n    print(largest(2,4,6))\n    print(largest(1,5,6))\n    print(largest(4,-3,6))\n    print(\"Checking if Even or Odd\")\n    print(is_even(6))\n    print(is_even(7))\n    print(is_odd(6))\n    print(is_odd(7))\n    print(\"Checking if Negative or Positive\")\n    print(is_negative(-2))\n    print(is_negative(4))\n    print(is_positive(2))\n    print(is_positive(3))\n    print(\"Checking if Divisible by\")\n    print(is_divisible_by(1,3))\n    print(is_divisible_by(2,3))\n    print(is_divisible_by(4,3))\n    print(is_divisible_by(5,3))\n    print(\"Checking if Divisible by Any of\")\n    print(is_divisible_by_any_of(3,[2,4,6]))\n    print(is_divisible_by_any_of(12,[2,4,6]))\n    print(is_divisible_by_any_of(12,[2,4]))\n    print(is_divisible_by_any_of(12,[4,6]))\n    print(\"Checking if Within Range\")\n    print(is_within(3,2,5))\n    print(is_within(2,2,5))\n    print(is_within(6,2,5))\n    print(\"Checking Triangle Type\")\n    print(triangle_type(1,2,2))\n    print(triangle_type(1,3,2))\n    print(triangle_type(2,3,3))\n    print(triangle_type(3,4,3))\n    print(triangle_type(3,3,3))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef lesser_of_two_evens(a,b):\n    '''\n    Write a python function to find the lesser of two even numbers.\n    '''\n    if a%2 == 0 and b%2 == 0:\n        return minimum(a,b)\n    else:\n        return maximum(a,b)\n    \ndef animal_crackers(text):\n    '''\n    Write a python function to check if the words in the two strings are \n    the same. The function should return true if the string are the same.\n    '''\n    words = text.split()\n    return words[0][0] == words[1][0]\n    \ndef makes_twenty(a,b):\n    '''\n    Write a python function to check if the two numbers are the sum of 20.\n    '''\n    return (a+b) == 20\n    \ndef old_macdonald(name):\n    '''\n    Write a function that capitalizes the first and fourth letters of a name.\n    '''\n    return name[0].upper()+name[1:3]+name[3].upper()+name[4:]\n    \ndef master_yoda(text):\n    '''\n    Write a function that takes a string as input and returns the string in reverse.\n    '''\n    return text[::-1]\n    \ndef almost_there(n):\n    '''\n    Write a function that takes a number as input and returns True if it is \n    within 10 of either 100 or 200.\n    '''\n    return ((abs(n-100) <=10) or (abs(n-200) <=10))\n    \ndef has_33(nums):\n    '''\n    Write a function to determine if a list contains a 3 next to a 3 somewhere.\n    '''\n    for i in range(0,len(nums)-1):\n        if nums[i] == 3 and nums[i+1] == 3:\n            return True\n    return False\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #print(\"minimum is\",min(a,b))\n    if a<b:\n        print(\"minimum is\",a)\n    else:\n        print(\"minimum is\",b)\n    return\nminimum(10,5)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \ndef is_positive(a):\n    '''\n    Write a python function to check if the number is positive or not.\n    '''\n    if a>0:\n        return True\n    else:\n        return False\n    \ndef is_greater(a,b):\n    '''\n    Write a python function to check if the number is greater or not.\n    '''\n    if a>b:\n        return True\n    else:\n        return False\n        \ndef sum_of_numbers(a,b):\n    '''\n    Write a python function to sum of all the numbers from 1 to n.\n    '''\n    sum=0\n    for i in range(a,b+1):\n        sum+=i\n    return sum\n    \ndef is_perfect(a):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    sum=0\n    for i in range(1,a):\n        if a%i==0:\n            sum+=i\n    if sum==a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0]==tuplex[0] and tuple1[1]==tuplex[1] and tuple1[2]==tuplex[2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == len(tuple1):\n        for i in range(len(tuplex)):\n            if tuplex[i] not in tuple1:\n                return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex:\n        for i in tuplex:\n            if i == tuple1:\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if any(tuplex == tuple1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #print(tuple1)\n    if any(x in tuplex for x in tuple1): \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n    \n    \n    \n    "
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    list1=list(tuplex)\n    if tuple1 in list1:\n        print(\"yes, tuple\",tuple1,\"is in\",tuplex)\n    else:\n        print(\"no, tuple\",tuple1,\"is not in\",tuplex)\n    return\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuplex in tuple1: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Initialize a variable\n    result = 0\n    # Your code goes here\n    result = (bin(x)).count('1') % 2\n    # Use a return statement to return the result\n    return result\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    result = False\n    if(x % 2 == 0): \n        result = False\n    else: \n        result = True\n    return result\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = int(x) \n    if(x % 2 == 0):\n        print(\"Given number is Even.\") \n    else: \n        print(\"Given number is Odd.\") \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    num = 0\n    for i in str(x):\n        num += int(i)\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n    "
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x%2)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2 == 0):\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    print(\"Rearranging to next bigger number.\")\n    arr = list(str(n))\n    n_arr = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            n_arr.append(arr[j])\n        if i!= 0:\n            for k in range(len(arr) - i):\n                n_arr.append(arr[k])\n    print(''.join(n_arr))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a list\n    n_list = [int(d) for d in str(n)]\n    # get the length of the number\n    n_len = len(n_list)\n    # check if the number is single digit\n    if n_len == 1:\n        return n\n    # sort the list in ascending order\n    n_list.sort()\n    # check if the list is in descending order\n    if n_list[0] < n_list[-1]:\n        # get the index of the last item\n        i = n_list.index(n_list[-1])\n        # get the index of the item next to the last item\n        j = n_list.index(n_list[i+1])\n        # swap the items\n        n_list[i], n_list[j] = n_list[j], n_list[i]\n        # reverse the rest of the items\n        n_list = n_list[:i+1] + n_list[i+1:][::-1]\n    # return the number in the list\n    return int(\"\".join(str(i) for i in n_list))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) <= 1:\n        return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    digits = []\n    while n:\n        digits.append(n % 10)\n        n //= 10\n    digits = digits[::-1]\n    n = 0\n    for i in range(len(digits)):\n        n += digits[i] * 10 ** i\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    i = len(n_str) - 2\n    while i >= 0 and n_str[i] >= n_str[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(n_str) - 1\n    while n_str[j] <= n_str[i]:\n        j -= 1\n    n_str = n_str[:i] + n_str[j] + n_str[i + 1:j] + n_str[i] + n_str[j + 1:]\n    n_str = n_str[:i + 1] + n_str[i + 2:]\n    return int(n_str)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert to a list\n    n = list(str(n))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # loop through the list backwards to get the last element\n    for i in range(len(n) - 1, 0, -1):\n        # if the last element is greater than the next element\n        if n[i] > n[i - 1]:\n            # get the index of the element in the list that is greater than the element in the list\n            smaller = i - 1\n            # loop through the list backwards to get the last element\n            for j in range(len(n) - 1, i - 1, -1):\n                # if the element in the list is greater than the element in the list before\n                if n[j] > n[smaller]:\n                    # get the index of the element in the list that is greater than the element in the list\n                    greater = j\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    assert isinstance(n, int) and n>0, 'n is not an integer or n is a negative integer.'\n    n = str(n)\n    n_ = []\n    for i in range(len(n)-1, -1, -1):\n        n_.append(n[i])\n    n_ = list(map(int, n_))\n    l = [i for i in n_ if i>n_[0]]\n    i = 0\n    while i<len(l) and n_[0]==0:\n        n_ = [0] + n_\n        i+=1\n    for j in range(len(n_)-1, -1, -1):\n        if n_[j]==9:\n            n_[j]=0\n            n_[j-1]=n_[j-1]+1\n        else:\n            break\n    n_ = [str(i) for i in n_]\n    n_ = ''.join(n_)\n    return int(n_)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def convert(s):\n        li = list(map(str, s))\n        li = [i for i in li if i!='0']\n        return int(''.join(li))\n    if n<10:\n        return n\n    else:\n        li = list(map(int, str(n)))\n        i = len(li)-1\n        while i>0 and li[i-1] >= li[i]:\n            i-=1\n        j = len(li)-1\n        while li[j] <= li[i-1]:\n            j-=1\n        li[j],li[i-1] = li[i-1],li[j]\n        li[i:] = sorted(li[i:])\n        return convert(li)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    bigger = []\n    num = str(n)\n    bigger.append(num)\n    for i in range(len(num)):\n        for j in range(i+1, len(num)):\n            if int(num[i]) < int(num[j]):\n                temp = num[i]\n                num = num.replace(num[i], num[j])\n                num = num.replace(num[j], temp)\n                bigger.append(num)\n    return max(bigger)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append([num1, num2])\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def small_pairs(nums1, nums2):\n        if not nums1 or not nums2:\n            return []\n        # Merge two arrays and sort it.\n        merged = heapq.merge(nums1, nums2)\n        merged.sort()\n        # Pop out the kth element.\n        return merged[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return []\n    pairs = []\n    minHeap = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        heapq.heappush(minHeap, (nums1[i] + nums2[j], i, j))\n        i += 1\n        j += 1\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    max_heap = []\n    min_heap = []\n    heapq.heappush(max_heap, (-nums1[0] + nums2[0], 0, 0))\n    heapq.heappush(min_heap, (nums1[0] + nums2[0], 0, 0))\n    ans = []\n    for i in range(k):\n        max_val, index1, index2 = heapq.heappop(max_heap)\n        min_val, index1, index2 = heapq.heappop(min_heap)\n        if index1 < len(nums1) and index2 < len(nums2):\n            heapq.heappush(max_heap, (-nums1[index1] + nums2[index2], index1, index2))\n            heapq.heappush(min_heap, (nums1[index1] + nums2[index2], index1, index2))\n        elif index1 < len(nums1):\n            heapq.heappush(max_heap, (-nums1[index1], index1, index2))\n        elif index2 < len(nums2):\n            heapq.heappush(min_heap, (nums1[index1] + nums2[index2], index1, index2))\n        else:\n            break\n        ans.append([max_val, min_val])\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    import heapq\n    smallest_pair_heap = []\n    visited = set()\n    result_map = {}\n    # Construct a heap of pairs of (first_num, second_num)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            first_num, second_num = nums1[i], nums2[j]\n            pair = (nums1[i], nums2[j])\n            heapq.heappush(smallest_pair_heap, (first_num, second_num))\n    result = []\n    for i in range(k):\n        # If the heap is empty, return []\n        if len(smallest_pair_heap) == 0:\n            return result\n        first_num, second_num = heapq.heappop(smallest_pair_heap)\n        if (first_num, second_num) not in visited:\n            # Add to result\n            result.append([first_num, second_num])\n            # Add to result map\n            result_map[(first_num, second_num)] = 1\n            # Mark as visited\n            visited.add((first_num, second_num))\n            visited.add((second_num, first_num))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    pq = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(pq) < k:\n                heapq.heappush(pq, [nums1[i] + nums2[j], i, j])\n            else:\n                if nums1[i] + nums2[j] < pq[0][0]:\n                    heapq.heappop(pq)\n                    heapq.heappush(pq, [nums1[i] + nums2[j], i, j])\n    return [heapq.heappop(pq)[1:] for _ in range(k)]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or not k or k > len(nums1) * len(nums2):\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 == [] or nums2 == []:\n        return []\n    minHeap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(minHeap) < k:\n                heapq.heappush(minHeap, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n            elif nums1[i] + nums2[j] < minHeap[0][0]:\n                heapq.heappop(minHeap)\n                heapq.heappush(minHeap, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n    result = []\n    while minHeap:\n        result.append(heapq.heappop(minHeap)[1])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k < 1:\n        return None\n    heap = []\n    heapq.heapify(heap)\n    result = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        x = nums1[i]\n        y = nums2[j]\n        if len(heap) < k:\n            heapq.heappush(heap, (-(x+y), (i, j)))\n        else:\n            heapq.heappushpop(heap, (-(x+y), (i, j)))\n        i += 1\n        j += 1\n    while heap and k > 0:\n        _, (x, y) = heapq.heappop(heap)\n        result.append([nums1[x], nums2[y]])\n        k -= 1\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    def partition(nums, left, right, pivot_index):\n        # get the pivot element\n        pivot = nums[pivot_index]\n        # move the pivot to the end\n        nums[pivot_index], nums[right] = nums[right], nums[pivot_index]\n        # move all the smaller elements to the left\n        store_index = left\n        for i in range(left, right):\n            if nums[i] < pivot:\n                nums[store_index], nums[i] = nums[i], nums[store_index]\n                store_index += 1\n        # move the pivot to its final place\n        nums[right], nums[store_index] = nums[store_index], nums[right]\n        return store_index\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    list3 = []\n    for index in range(len(list1)):\n        list2.append(list1[index][0])\n        list3.append(list1[index][1])\n    min_prod = min(list2) * min(list3)\n    print('\\nMinimum product of pairs of tuples in the list is: ', min_prod)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 0\n    else:\n        #min_tuple = []\n        min_tuple = list1[0][0] * list1[0][1] * list1[1][0] * list1[1][1]\n        for i in range(len(list1) - 1):\n            if min_tuple > list1[i][0] * list1[i][1] * list1[i+1][0] * list1[i+1][1]:\n                min_tuple = list1[i][0] * list1[i][1] * list1[i+1][0] * list1[i+1][1]\n        return min_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(product(list1))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    temp = []\n    if len(list1) % 2!= 0:\n        temp.append(min(list1[0][0]*list1[0][1], list1[1][0]*list1[1][1]))\n        return temp\n    else:\n        temp.append(min(list1[0][0]*list1[0][1], list1[1][0]*list1[1][1]))\n        for i in range(2, len(list1)):\n            temp.append(min(list1[i][0]*list1[i][1], list1[i-2][0]*list1[i-2][1]))\n        return temp\n    \nprint(min_product_tuple([(2, 4), (1, 2), (3, 6)]))\nprint(min_product_tuple([(2, 4), (1, 2), (3, 6), (5, 3)]))\nprint(min_product_tuple([(2, 4), (1, 2)]))\nprint(min_product_tuple([(2, 4), (1, 2), (3, 6), (5, 3), (7, 8)]))\nprint(min_product_tuple([(1, 2, 3, 4), (2, 3, 4, 5)]))\nprint(min_product_tuple([(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]))\nprint(min_product_tuple([(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6), (4, 5, 6, 7)]))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list_of_min = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][1] * list1[j][1] <= list1[i][0] * list1[j][0]:\n                list_of_min.append(list1[i] + list1[j])\n    return list_of_min\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[j][0]*list1[i][1]<list1[i][0]*list1[j][1]:\n                list1[i],list1[j]=list1[j],list1[i]\n    return list1[0]\n    # return min([list1[i][0]*list1[j][1] for i in range(len(list1)) for j in range(i+1,len(list1))])\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_list = []\n    for i in list1:\n        min_list.append(i[0]*i[1])\n    return min(min_list)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = None\n    for i in list1:\n        if minimum is None:\n            minimum = i\n        elif minimum[1] * i[1] < minimum[1] * i[1]:\n            minimum = i\n    return minimum\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = None\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if min_prod is None or product < min_prod:\n                min_prod = product\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    s=[]\n    for i in list1:\n        s.append(i[0]*i[1])\n    return min(s)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    mini = listval[0]\n    for i in listval:\n        if mini>i:\n            mini = i\n    return mini\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val=listval[0]\n    for i in range(len(listval)):\n        if listval[i]<min_val:\n            min_val=listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for item in listval:\n        if item < min_value:\n            min_value = item\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    smallest = listval[0]\n    for x in listval:\n        if smallest > x:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for v in listval[1:]:\n        if v < val:\n            val = v\n    return val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    mini = listval[0]\n    for i in listval:\n        if i < mini:\n            mini = i\n    return mini\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for x in listval:\n        if x < min_val:\n            min_val = x\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split(\"_\")\n    for i in range(len(word)):\n        word[i] = word[i].capitalize()\n    return \"\".join(word)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_string = ''\n    flag = False\n    for i in word:\n        if i == '_':\n            flag = True\n        elif flag:\n            flag = False\n            new_string += i.upper()\n        else:\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    cap_word = ''\n    if word!= None:\n        for i in range(0,len(word)):\n            if word[i] == '_':\n                cap_word += word[i+1].upper()\n            elif i > 0:\n                cap_word += word[i]\n            else:\n                cap_word += word[i]\n        return cap_word\n    return None\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case_string = ''\n    prev_char_was_upper = False\n    for char in word:\n        if char.isupper():\n            camel_case_string += '_' + char.lower() if prev_char_was_upper else char.lower()\n        else:\n            camel_case_string += char\n        prev_char_was_upper = char.isupper()\n    return camel_case_string\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    snake_case_string = ''\n    prev_char_was_upper = False\n    for char in word:\n        if char.isupper():\n            snake_case_string += '_' + char.lower() if prev_char_was_upper else char.lower()\n        else:\n            snake_case_string += char\n        prev_char_was_upper = char.isupper()\n    return snake_case_string\ndef camel_case_string(string):\n    '''\n    Write a function to convert the given string to camel case string.\n    '''\n    camel_case_string = ''\n    prev_char_was_upper = False\n    for char in string:\n        if char.isupper():\n            camel_case_string += '_' + char.lower() if prev_char_was_upper else char.lower()\n        else:\n            camel_case_string += char\n        prev_char_was_upper = char.isupper()\n    return camel_case_string\ndef snake_case_string(string):\n    '''\n    Write a function to convert the given string to snake case string.\n    '''\n    snake_case_string = ''\n    prev_char_was_upper = False\n    for char in string:\n        if char.isupper():\n            snake_case_string += '_' + char.lower() if prev_char_was_upper else char.lower()\n        else:\n            snake_case_string += char\n        prev_char_was_upper = char.isupper()\n    return snake_case_string\ndef camel_case_string_2(string):\n    '''\n    Write a function to convert the given string to camel case string.\n    '''\n    #string = re.sub(r'_([a-zA-Z])',lambda mo: mo.group(1).upper(),string)\n    string = re.sub(r'(_[a-zA-Z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef snake_case_string_2(string):\n    '''\n    Write a function to convert the given string to snake case string.\n    '''\n    string = re.sub(r'([a-zA-Z])([0-9])',lambda mo: mo.group(1)+'_'+mo.group(2),string)\n    return string\ndef camel_case_string_3(string):\n    '''\n    Write a function to convert the given string to camel case string.\n    '''\n    string = re.sub(r'(?<=[a-z0-9])_([a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef snake_case_string_3(string):\n    '''\n    Write a function to convert the given string to snake case string.\n    '''\n    string = re.sub(r'(_[a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef camel_case_string_4(string):\n    '''\n    Write a function to convert the given string to camel case string.\n    '''\n    string = re.sub(r'(?<=[A-Z])_([a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef snake_case_string_4(string):\n    '''\n    Write a function to convert the given string to snake case string.\n    '''\n    string = re.sub(r'(_[a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef camel_case_string_5(string):\n    '''\n    Write a function to convert the given string to camel case string.\n    '''\n    string = re.sub(r'(?<=[A-Z])_([a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef snake_case_string_5(string):\n    '''\n    Write a function to convert the given string to snake case string.\n    '''\n    string = re.sub(r'(_[a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef camel_case_string_6(string):\n    '''\n    Write a function to convert the given string to camel case string.\n    '''\n    string = re.sub(r'(?<=[A-Z])_([a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef snake_case_string_6(string):\n    '''\n    Write a function to convert the given string to snake case string.\n    '''\n    string = re.sub(r'(_[a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef camel_case_string_7(string):\n    '''\n    Write a function to convert the given string to camel case string.\n    '''\n    string = re.sub(r'(?<=[a-z])_([a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef snake_case_string_7(string):\n    '''\n    Write a function to convert the given string to snake case string.\n    '''\n    string = re.sub(r'(_[a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef camel_case_string_8(string):\n    '''\n    Write a function to convert the given string to camel case string.\n    '''\n    string = re.sub(r'(?<=[A-Z])_([a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef snake_case_string_8(string):\n    '''\n    Write a function to convert the given string to snake case string.\n    '''\n    string = re.sub(r'(_[a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef camel_case_string_9(string):\n    '''\n    Write a function to convert the given string to camel case string.\n    '''\n    string = re.sub(r'(?<=[a-z])_([a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef snake_case_string_9(string):\n    '''\n    Write a function to convert the given string to snake case string.\n    '''\n    string = re.sub(r'(_[a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef camel_case_string_10(string):\n    '''\n    Write a function to convert the given string to camel case string.\n    '''\n    string = re.sub(r'(?<=[A-Z])_([a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef snake_case_string_10(string):\n    '''\n    Write a function to convert the given string to snake case string.\n    '''\n    string = re.sub(r'(_[a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef camel_case_string_11(string):\n    '''\n    Write a function to convert the given string to camel case string.\n    '''\n    string = re.sub(r'(?<=[A-Z])_([a-z])',lambda mo: mo.group(1).upper(),string)\n    return string\ndef snake_case_string_11(string):\n    '''\n    Write a function to convert the given string to snake case string.\n    '''\n    string = re.sub(r'(_[a-z])',lambda mo: mo"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s1 = re.sub('(.)_(.)', r'\\1 \\2', word)\n    return re.sub('(_)','', s1).title().replace(' ', '')\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n    elif len(word) == 1:\n        return word[0].upper()\n    else:\n        return word[0].upper() + word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    temp_list = word.split('_')\n    res = ''\n    for x in temp_list:\n        res = res + x.capitalize()\n    return res\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    string1 = re.sub('(.)_',lambda x:x.group(1).upper(),word)\n    return string1\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word is None or type(word)!= str:\n        return None\n    else:\n        word = word.lower()\n        word = re.sub(r'_','', word)\n        word = re.sub(r'[\\-\\s]', '', word)\n        word = re.sub(r'\\s{2,}','', word)\n        if len(word) > 1:\n            return word[0].upper() + word[1:]\n        else:\n            return word.upper()\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([i.title() for i in word.split('_')])\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for x in l:\n        if x%2 == 0:\n            new_list.append(x)\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for x in l:\n        if x%2 == 0:\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n    \n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = [i for i in l if i%2==0]\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [i for i in l if i%2 == 0]\n    print(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \ndef remove_odd_while(l):\n    '''\n    Write a python function to remove odd numbers from a given list using while loop.\n    '''\n    return [x for x in l if x % 2 == 0]\n    \ndef list_comprehension(l):\n    '''\n    Write a python function to convert a given list of characters into a list of integers.\n    '''\n    return list(map(int, l))\n    \ndef list_comprehension_while(l):\n    '''\n    Write a python function to convert a given list of characters into a list of integers using while loop.\n    '''\n    return list(map(int, l))\n    \nif __name__ == \"__main__\":\n    l = ['a','b','c','d','e','f']\n    #l = [1,2,3,4,5,6,7,8,9]\n    \n    print('List : ', l)\n    print('Remove_odd: ', remove_odd(l))\n    print('Remove_odd_while: ', remove_odd_while(l))\n    print('List Comprehension: ', list_comprehension(l))\n    print('List Comprehension_while: ', list_comprehension_while(l)"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if isinstance(l, list):\n        return [i for i in l if i % 2 == 0]\n    else:\n        return \"Input is not a list\"\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [n for n in l if n % 2 == 0]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i[n])\n    return list2\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(list(zip(*list1))[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    print(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [element[n] for element in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    return list1[n]\n    \ndef extract_nth_element_v2(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    This version is more efficient.\n    '''\n    \n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    list1.extend(list2)\n    list1.sort()\n    print(list1)\n    if (list1.count(list1[0]) == 1 and list1.count(list1[-1]) == 1):\n        print(\"No overlapping\")\n    else:\n        print(\"Overlapping\")\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #take input from the user\n    list1 = input(\"Enter the list 1: \")\n    list2 = input(\"Enter the list 2: \")\n    #spliting the sequence using split()\n    list1 = list1.split(',')\n    list2 = list2.split(',')\n    #convert list to set\n    set1 = set(list1)\n    set2 = set(list2)\n    #check whether set1 is subset of set2 or not\n    if set1.issubset(set2):\n        return \"List 1 is subset of List 2\"\n    else:\n        return \"List 1 is not a subset of List 2\"\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            return False\n    \ndef maximal_subarray(A):\n    '''\n    Write a python function to get the largest sum subarray in a given array.\n    '''\n    max_so_far = A[0]\n    max_ending_here = A[0]\n    sum = 0\n    for i in range(len(A)):\n        max_ending_here = max(max_ending_here + A[i], A[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n    \ndef subarray_sum(A,S):\n    '''\n    Write a python function to check whether a given array contains a subarray with a given sum or not.\n    '''\n    sum = 0\n    for i in range(len(A)):\n        for j in range(i,len(A)):\n            for k in range(i,j):\n                sum+=A[k]\n                if sum == S:\n                    return True\n            sum=0\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    x = set(list1)\n    y = set(list2)\n    z = x.intersection(y)\n    return True if len(z) > 0 else False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(value in list2 for value in list1)\n    \n    \n    \ndef find_overlap(list1,list2):\n    '''\n    Write a python function to find the union of two sets\n    '''\n    return set(list1).union(list2)\n    \n    \n    \ndef find_difference(list1,list2):\n    '''\n    Write a python function to find the set difference of two sets\n    '''\n    return set(list1).difference(list2)\n    \n    \n    \ndef get_list_from_file(filename):\n    '''\n    Write a python function to read a list of integers from a text file\n    '''\n    with open(filename) as f:\n        return list(map(int, f.readline().split()))\n    \n    \n    \ndef get_list_from_file_row_wise(filename):\n    '''\n    Write a python function to read a list of integers from a text file\n    '''\n    with open(filename) as f:\n        return [list(map(int, row.split())) for row in f.readlines()]\n        \n    \n    \ndef count_elements(list1,list2):\n    '''\n    Write a python function to count the number of elements that are common between two sets\n    '''\n    return len(set(list1).intersection(list2))\n    \n    \n    \ndef check_for_sublist(list1,list2):\n    '''\n    Write a python function to check whether any sublist in a list exists in a list\n    '''\n    return any(sublist in list2 for sublist in list1)\n    \n    \n    \ndef remove_vowels(string):\n    '''\n    Write a python function to remove all vowels from a string\n    '''\n    vowels = 'aeiou'\n    return ''.join(filter(lambda x: x.lower() not in vowels, string))\n    \n    \n    \ndef get_last_element(list1):\n    '''\n    Write a python function to return the last element of a list\n    '''\n    return list1[-1]\n    \n    \n    \ndef get_nth_element(list1,n):\n    '''\n    Write a python function to get the nth element of a list\n    '''\n    return list1[n]\n    \n    \n    \ndef get_element_at_index(list1,index):\n    '''\n    Write a python function to get the nth element of a list\n    '''\n    return list1[index]\n    \n    \n    \ndef get_index_of_element(list1,element):\n    '''\n    Write a python function to get the index of a given element in a list\n    '''\n    return list1.index(element)\n    \n    \n    \ndef remove_element_at_index(list1,index):\n    '''\n    Write a python function to remove a given element from a list at the given index\n    '''\n    return list1.pop(index)\n    \n    \n    \ndef remove_all_occurrences_of_element_from_list(list1,element):\n    '''\n    Write a python function to remove all occurrences of a given element from a list\n    '''\n    while element in list1:\n        list1.remove(element)\n    return list1\n    \n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from a list\n    '''\n    return list(set(list1))\n    \n    \n    \ndef sort_list_in_ascending_order(list1):\n    '''\n    Write a python function to sort a list in ascending order\n    '''\n    return sorted(list1)\n    \n    \n    \ndef sort_list_in_descending_order(list1):\n    '''\n    Write a python function to sort a list in descending order\n    '''\n    return sorted(list1,reverse=True)\n    \n    \n    \ndef sort_list_in_descending_order_without_using_sort(list1):\n    '''\n    Write a python function to sort a list in descending order using a for loop\n    '''\n    list1_copy = list1.copy()\n    n = len(list1_copy)\n    for i in range(0,n):\n        for j in range(0,n-i-1):\n            if list1_copy[j] < list1_copy[j+1]:\n                list1_copy[j], list1_copy[j+1] = list1_copy[j+1], list1_copy[j]\n    return list1_copy\n    \n    \n    \ndef swap_first_and_last(list1):\n    '''\n    Write a python function to swap the first and last elements of a list\n    '''\n    first_element = list1[0]\n    last_element = list1[-1]\n    list1[0] = last_element\n    list1[-1] = first_element\n    return list1\n    \n    \n    \ndef rotate_list_left(list1):\n    '''\n    Write a python function to rotate a list left by one\n    '''\n    last_element = list1.pop(-1)\n    list1.insert(0,last_element)\n    return list1\n    \n    \n    \ndef rotate_list_right(list1):\n    '''\n    Write a python function to rotate a list right by one\n    '''\n    first_element = list1.pop(0)\n    list1.append(first_element)\n    return list1\n    \n    \n    \ndef is_palindrome(string1):\n    '''\n    Write a python function to check whether a string is a palindrome or not\n    '''\n    return string1[::-1] == string1\n    \n    \n    \ndef get_all_sublists(list1):\n    '''\n    Write a python function to get all sublists of a list\n    '''\n    sublists = []\n    for i in range(len(list1)+1):\n        for j in range(i,len(list1)+1):\n            sublists.append(list1[i:j])\n    return sublists\n    \n    \n    \ndef get_all_sublists_alternate_way(list1):\n    '''\n    Write a python function to get all sublists of a list\n    '''\n    return [[list1[i:j] for j in range(i, len(list1)+1)] for i in range(len(list1))]\n    \n    \n    \ndef count_occurrences_of_element(list1,element):\n    '''\n    Write a python function to get the number of occurrences of a given element in a list\n    '''\n    return list1.count(element)\n    \n    \n    \ndef count_occurrences_of_element_using_for_loop(list1,element):\n    '''\n    Write a python function to get the number of occurrences of a given element in a list\n    '''\n    n = 0\n    for i in list1:\n        if i == element:\n            n+=1\n    return n\n    \n    \n    \ndef count_occurrences_of_element_using_while_loop(list1,element):\n    '''\n    Write a python function to get the number of occurrences of a given element in a list\n    '''\n    n = 0\n    i = 0\n    while i < len(list1):\n        if list1[i] == element:\n            n+=1\n        i+=1\n    return n\n    \n    \n    \ndef index_of_first_element(list1,element):\n    '''\n    Write a python function to get the index of the first occurrence of a given element in a list\n    '''\n    return list1.index(element)\n    \n    \n    \ndef index_of_first_element_using_for_loop(list1,element):\n    '''\n    Write a python function to get the index of the first occurrence of a given element in a list\n    '''\n    for i in list1:\n        if i == element:\n            return list1.index(i)\n            \n            \n            \ndef index_of_first_element_using_while_loop(list1,element):\n    '''"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if(list1 == None or list2 == None):\n        print(\"Error: Invalid parameters\")\n        return\n    if(len(list1) == 0 or len(list2) == 0):\n        print(\"Error: Invalid length of the lists\")\n        return\n    \n    result = False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count = count + 1\n    if count == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list3 = []\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    if len(list3)==0:\n        print(False)\n    else:\n        print(True)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return -1\n    if len(arr)==2:\n        return arr[0]*arr[1]\n    #sort the array to get max and min element first\n    arr.sort()\n    # print(arr)\n    max1 = arr[len(arr)-1]\n    max2 = arr[len(arr)-2]\n    min1 = arr[0]\n    min2 = arr[1]\n    return max1*max2 if max1*max2>min1*min2 else min1*min2\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    arr.sort()\n    print(arr)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_1 = arr[0]\n    max_2 = arr[0]\n    min_1 = arr[0]\n    min_2 = arr[0]\n    max_prod = arr[0]\n    min_prod = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n        \n        if arr[i] < min_1:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif arr[i] < min_2:\n            min_2 = arr[i]\n        \n        max_prod = max(max_prod, max_1*max_2)\n        min_prod = min(min_prod, min_1*min_2)\n    \n    print (max_prod, min_prod)\n    "
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    maxProduct = -9999999999999\n    for i in range(n): \n        for j in range(i+1, n): \n            prod = arr[i] * arr[j]\n            if prod > maxProduct: \n                maxProduct = prod\n                iProduct = i\n                jProduct = j\n    print(\"The pair is:\")\n    print(arr[iProduct], arr[jProduct])\n    print(\"Their product is:\")\n    print(maxProduct)\n    return \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # print(arr)\n    if arr == []:\n        return -1\n    max_element = arr[0]\n    for i in range(0, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n    \n    arr.remove(max_element)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n=len(arr)\n    if n<2:\n        print(\"Array size should be atleast 2\")\n        return -1\n    if n==2:\n        return arr[0]*arr[1]\n    max_prod=arr[0]*arr[1]\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]*arr[j]>max_prod:\n                max_prod=arr[i]*arr[j]\n    return max_prod\ndef max_Product_NoDiv(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n=len(arr)\n    if n<2:\n        print(\"Array size should be atleast 2\")\n        return -1\n    if n==2:\n        return arr[0]*arr[1]\n    max_prod=arr[0]*arr[1]\n    s=max_prod\n    for i in range(n):\n        s=s+arr[i]\n    return s\nif __name__=='__main__':\n    arr=[2,4,7,6,3,8]\n    print(\"Maximum pair product is:\",max_Product(arr))\n    print(\"Maximum pair product is:\",max_Product_NoDiv(arr))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[-1] * arr[-2]\n    \nprint(max_Product([-2, -3, -4])) # return (-2,-3)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    size = len(arr) \n    max_product = 0\n    for i in range(size): \n        for j in range(i + 1, size): \n            max_product = max(max_product, \n            arr[i] * arr[j]) \n    return max_product \n    \nif __name__ == '__main__': \n    arr = [10, 3, 5, 6, 20] \n    print(\"Maximum pairwise product is \", max_Product(arr)) \n    "
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = 0\n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] * arr[j] > max: \n                max = arr[i] * arr[j] \n                i_max = i \n                j_max = j \n    print (\"Maximum product pair is\", \n        arr[i_max], \"and\", arr[j_max]) \n    print (\"Maximum product pair is\", \n        max) \narr = [3, 4, 5, 6, 1, 3, 2] \nmax_Product(arr) "
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    arr = sorted(arr)\n    \n    return arr[-1] * arr[-2]\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Declaring a list variable to store the common elements\n    common_ele = []\n    #Iterating the loop to check for common elements \n    for i in Input: \n        for j in Input:\n            if(i[0] == j[0]):\n                common_ele.append(i)\n    return common_ele\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [Input[0][0],Input[1][0],Input[2][0]]\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    res = set()\n    for i in range(len(Input)):\n        res.add(Input[i][0])\n    return list(res)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Return empty list if input is empty\n    if Input == []: \n        return []\n    # Create new list with unique elements of first element of input list of tuples\n    Output = list(set([i[0] for i in Input])) \n    # Return common elements of first element of input list of tuples\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)): \n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Output.append(Input[i])\n    return Output \n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [i[0] for i in Input]\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = {}\n    if len(Input) == 0:\n        return Output\n    for i in Input:\n        if i[0] not in Output.keys():\n            Output[i[0]] = [i]\n        else:\n            Output[i[0]].append(i)\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import collections\n    a = collections.Counter(Input)\n    print (a)\n    for key,value in a.items():\n        if value == max(a.values()):\n            print (key,value)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(i,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Output.append(Input[i])\n                Output.append(Input[j])\n    print(Output)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) <= 1:\n        return Input\n    else:\n        Input.sort()\n        result = []\n        for i in range(len(Input)):\n            if Input[i] == Input[i+1][0]:\n                result.append(Input[i])\n        return result\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    len_list = [len(str(i)) for i in lst]\n    return lst[len_list.index(max(len_list))]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_str = lst[0]\n    for i in lst[1:]:\n        if max_len < len(i):\n            max_len = len(i)\n            max_str = i\n    return max_str\n    \ndef Next_String(s):\n    '''\n    Write a python function to find the next string in lexicographical order.\n    '''\n    return chr(ord(s[-1])+1) + s[:-1]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len) \n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for i in range(len(lst)):\n        if len(lst[i]) > len(lst[i + 1]):\n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max1 = len(lst[0])\n    for i in range(len(lst)):\n        if(len(lst[i]) > max1):\n            max1 = len(lst[i])\n    for i in range(len(lst)):\n        if(len(lst[i]) == max1):\n            return lst[i]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == max_len:\n            return lst[i]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in range(0,len(lst)):\n        if len(lst[i])>max:\n            max=len(lst[i])\n            index=i\n    return lst[index]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for i in lst: \n        if len(i) > max_length: \n            max_length = len(i) \n    for i in lst: \n        if len(i) == max_length: \n            return i \n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort(reverse=True)\n    return lst[0]"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return 'Empty list'\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total += x\n    return total*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += math.ceil(i)\n    print(total*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length = len(list1)\n    round_list = []\n    for num in list1:\n        round_list.append(round(num))\n    total = sum(round_list)\n    print(total*length)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for item in list1:\n        item = round(item)\n        sum += item\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list = 0\n    for num in list1:\n        sum_list += round(num)\n    print(len(list1)*sum_list)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(x) for x in list1]\n    return sum(rounded_list) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(round(sum(list1), 0))\n    print(len(list1) * round(sum(list1), 0))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        total += round(number)\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list = sum(list1)\n    length = len(list1)\n    return length * sum_list\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [round(i) for i in list1]\n    return sum(list1)*len(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #Cube sum = sum of first n even natural numbers\n    sum = 0 \n    for i in range(1, n + 1):\n        sum += i ** 3 \n    return sum \n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return(\"Please Enter positive integers only\")\n    sum=0\n    for i in range(n):\n        if i%2==0:\n            sum+=i*i*i\n    return(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube = lambda x : x*x*x\n    \n    sum = 0\n    for i in range(2,n+1,2):\n        sum+=cube(i)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i ** 3 for i in range(0, n + 1, 2)])\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    summ = 0\n    for i in range(0,n):\n        if(i%2==0):\n            summ = summ + i*i*i\n    return summ\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    if n>=0:\n        for i in range(1,n+1):\n            if i%2==0:\n                sum=sum+i**3\n    else:\n        print(\"Please enter a valid number\")\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    print(sum([i**3 for i in range(n)]))\ncube_Sum(2)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize sum and counter\n    sum = 0\n    i = 1\n    # if input number is valid \n    if n > 0:\n        while i < n+1:\n            if i % 2 == 0:\n                sum += i*i*i\n            i += 1\n        return sum\n    # if input number is not valid \n    else:\n        return 'Invalid Input!!'\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # cube_sum = 0\n    # for i in range(0, n + 1): \n    #     if i % 2 == 0: \n    #         cube_sum += i ** 3\n    # return cube_sum \n    return sum(i ** 3 for i in range(0, n + 1) if i % 2 == 0)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    sum = 0\n    for x in range(1,n+1):\n        if x%2==0:\n            sum+=x**3\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '#'\n    result_str = delimiter.join(test_tup)\n    print(result_str)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res_tup=()\n    for i in test_tup:\n        res_tup+=i,\n    return res_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '_'\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #return ''.join(test_tup)\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print(test_tup)\n    result = ''\n    for i in test_tup:\n        result += str(i) + '!'\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n > 0:\n        average = n * (n + 1) * (n + 2) * (n + 3) / 24\n        return average\n    elif n < 0:\n        return \"Input a positive integer\"\n    else:\n        return \"Input a natural number\"\n    \n    \n    \n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for x in range(1,n+1):\n        result += x**3\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    print(sum)\n    avg = (sum/n)**(1/3)\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    if n<=0:\n        return print(\"Enter a positive Number\")\n    else:\n        sum = 0\n        for i in range(1,n+1):\n            sum = sum + i**3\n        return sum/n\n        \ndef find_Average_Of_Square(n):\n    '''\n    Write a python function to find the average of squares of first n natural numbers.\n    '''\n    \n    if n<=0:\n        return print(\"Enter a positive Number\")\n    else:\n        sum = 0\n        for i in range(1,n+1):\n            sum = sum + i**2\n        return sum/n\n        \ndef find_Average_Of_Natural_Number(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    \n    if n<=0:\n        return print(\"Enter a positive Number\")\n    else:\n        sum = 0\n        for i in range(1,n+1):\n            sum = sum + i\n        return sum/n\n        \ndef find_Factorial_of_Given_Number(n):\n    '''\n    Write a python function to find the factorial of first n natural numbers.\n    '''\n    if n<=0:\n        return print(\"Enter a positive Number\")\n    else:\n        factorial = 1\n        for i in range(1,n+1):\n            factorial = factorial * i\n        return factorial\n        \ndef find_Count_of_Digit(n,d):\n    '''\n    Write a python function to count the total number of digits in a given number.\n    '''\n    if n<=0:\n        return print(\"Enter a positive Number\")\n    else:\n        count=0\n        while n:\n            count+=1\n            n//=10\n        return count\n        \ndef find_Fibonacci_Sequence(n):\n    '''\n    Write a python function to print the Fibonacci sequence up to a given index.\n    '''\n    \n    if n<=0:\n        return print(\"Enter a positive Number\")\n    else:\n        a,b=0,1\n        count=0\n        while count<n:\n            print(a,end=\" \")\n            a,b=b,a+b\n            count+=1\n        return\n        \ndef find_Largest_Number_in_List(list):\n    '''\n    Write a python function to find the largest number in a given list.\n    '''\n    \n    if len(list)==0:\n        return print(\"Empty List\")\n    else:\n        max=list[0]\n        for i in list:\n            if i>max:\n                max=i\n        return max\n        \ndef find_Smallest_Number_in_List(list):\n    '''\n    Write a python function to find the smallest number in a given list.\n    '''\n    \n    if len(list)==0:\n        return print(\"Empty List\")\n    else:\n        min=list[0]\n        for i in list:\n            if i<min:\n                min=i\n        return min\n        \ndef find_Even_Number_in_List(list):\n    '''\n    Write a python function to find the even numbers in a given list.\n    '''\n    \n    if len(list)==0:\n        return print(\"Empty List\")\n    else:\n        even=[]\n        for i in list:\n            if i%2==0:\n                even.append(i)\n        return even\n        \ndef find_Odd_Number_in_List(list):\n    '''\n    Write a python function to find the odd numbers in a given list.\n    '''\n    \n    if len(list)==0:\n        return print(\"Empty List\")\n    else:\n        odd=[]\n        for i in list:\n            if i%2!=0:\n                odd.append(i)\n        return odd\n        \ndef find_Prime_Number_in_List(list):\n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    \n    if len(list)==0:\n        return print(\"Empty List\")\n    else:\n        prime=[]\n        for i in list:\n            if i>1:\n                for j in range(2,i):\n                    if i%j==0:\n                        break\n                else:\n                    prime.append(i)\n        return prime\n        \ndef find_Palindrome_Number_in_List(list):\n    '''\n    Write a python function to find the palindrome numbers in a given list.\n    '''\n    \n    if len(list)==0:\n        return print(\"Empty List\")\n    else:\n        palindrome=[]\n        for i in list:\n            temp=i\n            rev=0\n            while(i!=0):\n                rem=i%10\n                rev=rev*10+rem\n                i=i//10\n            if(temp==rev):\n                palindrome.append(temp)\n        return palindrome\n        \ndef find_Sorted_List_of_Even_Number_in_List(list):\n    '''\n    Write a python function to find the sorted list of even numbers in a given list.\n    '''\n    \n    if len(list)==0:\n        return print(\"Empty List\")\n    else:\n        even=find_Even_Number_in_List(list)\n        even.sort()\n        return even\n        \ndef find_Sorted_List_of_Odd_Number_in_List(list):\n    '''\n    Write a python function to find the sorted list of odd numbers in a given list.\n    '''\n    \n    if len(list)==0:\n        return print(\"Empty List\")\n    else:\n        odd=find_Odd_Number_in_List(list)\n        odd.sort()\n        return odd\n        \ndef find_Sorted_List_of_Prime_Number_in_List(list):\n    '''\n    Write a python function to find the sorted list of prime numbers in a given list.\n    '''\n    \n    if len(list)==0:\n        return print(\"Empty List\")\n    else:\n        prime=find_Prime_Number_in_List(list)\n        prime.sort()\n        return prime\n        \ndef find_Sorted_List_of_Palindrome_Number_in_List(list):\n    '''\n    Write a python function to find the sorted list of palindrome numbers in a given list.\n    '''\n    \n    if len(list)==0:\n        return print(\"Empty List\")\n    else:\n        palindrome=find_Palindrome_Number_in_List(list)\n        palindrome.sort()\n        return palindrome\n        \ndef main():\n    '''\n    The main function which is the starting point of program.\n    '''\n    \n    print(\"------------------MENU------------------\")\n    print(\"1. To Find Average of Cubes\")\n    print(\"2. To Find Average of Square\")\n    print(\"3. To Find Average of Natural Numbers\")\n    print(\"4. To Find Factorial of Given Number\")\n    print(\"5. To Find Count of Digit in a Number\")\n    print(\"6. To Find Fibonacci Sequence up to a given Index\")\n    print(\"7. To Find Largest Number in a List\")\n    print(\"8. To Find Smallest Number in a List\")\n    print(\"9. To Find Even Number in a List\")\n    print(\"10. To Find Odd Number in a List\")\n    print(\"11. To Find Prime Number in a List\")\n    print(\"12. To Find Palindrome Number in a List\")\n    print(\"13. To Find Sorted List of Even Number in a List\")\n    print(\"14. To Find Sorted List of Odd Number in a List\")\n    print(\"15. To Find Sorted List of Prime Number in a List\")\n    print(\"16. To Find Sorted List of Palindrome Number in a List\")\n    print(\"17. To Find the largest number in a list\")\n    print(\"18. To Find the smallest number in a list\")\n    print(\"19. To Find the factorial of a number\")\n    print(\"20. To Find the count of digits in a number\")\n    print(\"21. To Find the average of cubes of first n natural numbers\")\n    print(\"22. To Find the average of squares of first n natura"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 1:\n        print(\"Please enter a natural number greater than 1.\")\n        return\n    \n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    \n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i*i*i)\n    print(sum)\n    average = (sum/n)\n    return(average)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i**3\n    return s/n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return round(sum([i ** 3 for i in range(1, n + 1)]) / n, 2)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0  \n    for i in range(1,n+1):  \n        result = result + (i * i * i)  \n    return result  \n    result /= (n * (n * n * n))  \n    return result  \n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    if not test_tuple:\n        raise Exception(\"Invalid input argument. Must pass a non-empty tuple\")\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1: \n        if x in i: \n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            if x in list1[i]:\n                count += 1\n        elif list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count = count + 1\n    return(count)\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(x in list1[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if(x in list1[i]): \n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        sub = list1[i]\n        if isinstance(sub, list): \n            if len(sub) > 0: \n                if x in sub: \n                    count += 1\n        else: \n            if x == sub: \n                count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2 == 0:\n            odds.append(num)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # return filter(lambda num: num%2 == 1, nums)\n    return filter(lambda num: num%2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = list(filter(lambda x : x % 2!= 0, nums))\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnums = []\n    for num in nums:\n        if num % 2 == 0:\n            oddnums.append(num)\n    return oddnums\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates in list.\n    '''\n    oddnums = []\n    for num in nums:\n        if num not in oddnums:\n            oddnums.append(num)\n    return oddnums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for x in nums:\n        if x % 2!= 0:\n            oddnumbers.append(x)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = filter(lambda x: x % 2 == 1, nums)\n    return list(result)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = [int(i) for i in dt]\n    return f\"{dt[2]}-{dt[1]}-{dt[0]}\"\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.match(r'(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)',dt)\n    if m:\n        dt = f\"{m.group(3)}-{m.group(2)}-{m.group(1)}\"\n        return dt\n    else:\n        print(\"Please enter a valid date in yyyy-mm-dd format.\")\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '-'.join(dt.split('-')[::-1])\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\2\\3\\1\", dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #dt = \"2015-08-08\"\n    dt_split = dt.split('-')\n    date = [i for i in dt_split if i!= ''][::-1]\n    date_str = \"-\".join(date)\n    date_str = re.sub(r\"^0+\", \"\", date_str)\n    print(date_str)\n    \nchange_date_format(\"2015-08-08\")\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = str(dt)\n    newdt = dt[8:10]+'-'+dt[5:7]+'-'+dt[:4]\n    return newdt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:10]+'-'+dt[5:7]+'-'+dt[:4]\n    \ndef string_formatting(st):\n    '''\n    Write a function to remove all leading and trailing whitespace from a string.\n    '''\n    return st.strip()\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        #print('Date format in dd-mm-yyyy format')\n        return '{0}-{1}-{2}'.format(*match.groups())\n    else:\n        return None\n    \ndef change_format(dt):\n    '''\n    Write a function to change the format of date from dd/mm/yyyy to yyyy-mm-dd.\n    '''\n    match = re.search(r'(\\d{2})\\D(\\d{2})\\D(\\d{4})', dt)\n    if match:\n        #print('Date format in yyyy-mm-dd format')\n        return '{0}-{1}-{2}'.format(*match.groups())\n    else:\n        return None\n        \ndef remove_dash(dt):\n    '''\n    Write a function to remove the dash character from the date.\n    '''\n    match = re.search(r'(\\d{2})-(\\d{2})-(\\d{4})', dt)\n    if match:\n        #print('Date format in yyyy-mm-dd format')\n        return '{0}-{1}-{2}'.format(*match.groups())\n    else:\n        return None\n        \ndef check_leap_year(dt):\n    '''\n    Write a function to check if the date is leap year or not.\n    '''\n    match = re.search(r'(\\d{4})\\D(\\d{2})\\D(\\d{2})', dt)\n    if match:\n        if (int(match.group(1)) % 4) == 0:\n            if (int(match.group(2)) == 2):\n                if (int(match.group(3)) % 4) == 0:\n                    #print('Date is a leap year')\n                    return True\n                else:\n                    #print('Date is not a leap year')\n                    return False\n            else:\n                #print('Date is a leap year')\n                return True\n        else:\n            #print('Date is not a leap year')\n            return False\n    else:\n        return None\n    \ndef check_format(dt):\n    '''\n    Write a function to check if the date format is dd/mm/yyyy or yyyy-mm-dd.\n    '''\n    match = re.search(r'(\\d{2})\\D(\\d{2})\\D(\\d{4})', dt)\n    if match:\n        if match.group(3) < '1900':\n            #print('Date format is dd/mm/yyyy')\n            return True\n        else:\n            #print('Date format is yyyy-mm-dd')\n            return False\n    else:\n        return None\n        \ndef print_month_with_leap_year(dt):\n    '''\n    Write a function to print the month with leap year in the same format as the date.\n    '''\n    match = re.search(r'(\\d{4})\\D(\\d{2})\\D(\\d{2})', dt)\n    if match:\n        if match.group(1) % 4 == 0:\n            if match.group(2) == 1:\n                if match.group(3) == 1:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n                elif match.group(3) == 2:\n                    #print('31/12/2019')\n                    return '{0}/12/{1}'.format(31, 2019)\n                else:\n                    #print('31/12/2018')\n                    return '{0}/12/{1}'.format(31, 2018)\n            elif match.group(2) == 2:\n                if match.group(3) == 1:\n                    #print('30/12/2020')\n                    return '{0}/12/{1}'.format(30, 2020)\n                elif match.group(3) == 2:\n                    #print('29/12/2020')\n                    return '{0}/12/{1}'.format(29, 2020)\n                else:\n                    #print('28/12/2020')\n                    return '{0}/12/{1}'.format(28, 2020)\n            elif match.group(2) == 3:\n                if match.group(3) == 1:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n                elif match.group(3) == 2:\n                    #print('30/12/2020')\n                    return '{0}/12/{1}'.format(30, 2020)\n                else:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n            elif match.group(2) == 4:\n                if match.group(3) == 1:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n                elif match.group(3) == 2:\n                    #print('30/12/2020')\n                    return '{0}/12/{1}'.format(30, 2020)\n                else:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n            elif match.group(2) == 5:\n                if match.group(3) == 1:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n                elif match.group(3) == 2:\n                    #print('30/12/2020')\n                    return '{0}/12/{1}'.format(30, 2020)\n                else:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n            elif match.group(2) == 6:\n                if match.group(3) == 1:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n                elif match.group(3) == 2:\n                    #print('30/12/2020')\n                    return '{0}/12/{1}'.format(30, 2020)\n                else:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n            elif match.group(2) == 7:\n                if match.group(3) == 1:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n                elif match.group(3) == 2:\n                    #print('30/12/2020')\n                    return '{0}/12/{1}'.format(30, 2020)\n                else:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n            elif match.group(2) == 8:\n                if match.group(3) == 1:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n                elif match.group(3) == 2:\n                    #print('30/12/2020')\n                    return '{0}/12/{1}'.format(30, 2020)\n                else:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n            elif match.group(2) == 9:\n                if match.group(3) == 1:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n                elif match.group(3) == 2:\n                    #print('30/12/2020')\n                    return '{0}/12/{1}'.format(30, 2020)\n                else:\n                    #print('31/12/2020')\n                    return '{0}/12/{1}'.format(31, 2020)\n            elif match.group"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt = dt.strip()\n        dt = dt.split(\"-\")\n        date_list = []\n        for i in dt:\n            date_list.append(str(int(i)))\n        return(\":\".join(date_list))\n    except:\n        return(\"Invalid Input\")\ndef change_date_format2(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt = dt.strip()\n        dt = dt.split(\"-\")\n        date_list = []\n        for i in dt:\n            date_list.append(i[-2:])\n        return(\":\".join(date_list))\n    except:\n        return(\"Invalid Input\")\ndef check_triple_double(st):\n    '''\n    Write a function that will return true if the given string has any of the following:\n    - Exactly three vowels.\n    - Exactly two vowels and a consonant.\n    - Exactly two consonants and a vowel.\n    - It contains a consonant cluster (at least two consonants next to each other).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    flag = False\n    count = 0\n    v_count = 0\n    c_count = 0\n    for i in st:\n        if i in vowels:\n            v_count += 1\n        else:\n            c_count += 1\n        if (i == \".\"):\n            count += 1\n    if (count == 3):\n        return True\n    elif (count == 2) and (c_count == 1) and (v_count == 1):\n        return True\n    elif (count == 2) and (c_count == 2) and (v_count == 1):\n        return True\n    elif (count == 1) and (c_count == 2) and (v_count == 2):\n        return True\n    elif c_count >= 2:\n        flag = True\n    return flag\ndef remove_vowels(st):\n    '''\n    Write a function to remove all the vowels from a given string and return the new string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    new_str = \"\"\n    for i in st:\n        if i not in vowels:\n            new_str += i\n    return(new_str)\ndef triple_vowel(st):\n    '''\n    Write a function that takes a string as input and reverse only the vowels of a string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    new_str = \"\"\n    for i in st:\n        if i in vowels:\n            new_str += i\n    return(new_str)\ndef count_substring(st, sub):\n    '''\n    Write a function to count how many times a substring occurs in a string.\n    '''\n    return(st.count(sub))\ndef generate_dict(keys, values):\n    '''\n    Write a function that can generate a dictionary from two lists without using a \u201cdict\u201d method.\n    '''\n    my_dict = {}\n    for i in range(len(keys)):\n        my_dict[keys[i]] = values[i]\n    return(my_dict)\ndef reverse_string(st):\n    '''\n    Write a function to reverse a string.\n    '''\n    st = st[::-1]\n    return(st)\ndef palindrome(st):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    st = st.replace(\" \",\"\")\n    st = st.lower()\n    if st == st[::-1]:\n        return True\n    else:\n        return False\ndef palindrome_sentence(st):\n    '''\n    Write a function to check whether the given sentence is a palindrome or not.\n    '''\n    st = st.replace(\" \",\"\")\n    st = st.lower()\n    flag = True\n    for i in range(len(st)//2):\n        if st[i]!= st[len(st)-1-i]:\n            flag = False\n            break\n    return flag\ndef count_substring2(st, sub):\n    '''\n    Write a function to count the number of occurrences of a substring in a string.\n    '''\n    count = 0\n    for i in range(len(st)):\n        if st.startswith(sub,i):\n            count += 1\n    return(count)\ndef find_parenthesis(st):\n    '''\n    Write a function to find the position of the closing parenthesis if the position of the opening parenthesis is known.\n    '''\n    stack = []\n    flag = True\n    for i in st:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            stack.pop()\n            if len(stack) == 0:\n                flag = False\n                break\n    return flag\ndef solve(st):\n    '''\n    Write a function to solve a mathematical equation where the first number is the value of x.\n    '''\n    x = 1\n    st = st.replace(\" \",\"\")\n    st = st.split(\"=\")\n    st1 = st[0].split(\"+\")\n    st2 = st[1].split(\"+\")\n    y = int(st1[0]) + int(st2[0])\n    return y\ndef solve2(st):\n    '''\n    Write a function to solve a mathematical equation where the first number is the value of x.\n    '''\n    x = 1\n    st = st.replace(\" \",\"\")\n    st = st.split(\"=\")\n    st1 = st[0].split(\"+\")\n    st2 = st[1].split(\"+\")\n    y = int(st1[0]) * int(st2[0])\n    return y\ndef pig_it(st):\n    '''\n    Write a Python function to change a word into pig latin.\n    Pig latin is where the first consonant of a word is moved to the end of the word and then add \u2018ay\u2019 to the end of the word.\n    '''\n    if len(st) == 0:\n        return None\n    if len(st) == 1:\n        return st\n    if not re.search(\"[a-zA-Z]\",st):\n        return st\n    if re.search(\"[0-9]\",st):\n        return st\n    my_list = list(st)\n    flag = False\n    for i in range(len(my_list)):\n        if my_list[i] == \" \":\n            flag = True\n            break\n    if flag:\n        return \" \".join(my_list)\n    else:\n        if my_list[0].isalpha():\n            my_list.append(my_list[0])\n            my_list[0] = \"\"\n            st = \"\".join(my_list)\n            return st + \"ay\"\n        else:\n            return \" \".join(my_list) + \"ay\"\ndef pig_it2(st):\n    '''\n    Write a Python function to change a word into pig latin.\n    Pig latin is where the first consonant of a word is moved to the end of the word and then add \u2018ay\u2019 to the end of the word.\n    '''\n    st = st.split()\n    pig_latin = []\n    for i in st:\n        if not re.search(\"[a-zA-Z]\",i):\n            pig_latin.append(i)\n            continue\n        if re.search(\"[0-9]\",i):\n            pig_latin.append(i)\n            continue\n        if not i[0].isalpha():\n            pig_latin.append(i[1:]+i[0]+\"ay\")\n            continue\n        pig_latin.append(i[1:]+i[0]+\"ay\")\n    return \" \".join(pig_latin)\ndef odd_even(st):\n    '''"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.strip()\n    dt_list = dt.split('-')\n    print(dt_list)\n    dt_list.reverse()\n    dt = '-'.join(dt_list)\n    return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length//2\n    while gap > 0:\n        for index in range(gap,length):\n            current_element = my_list[index]\n            current_position = index\n            while current_position >= gap and my_list[current_position - gap] > current_element:\n                my_list[current_position] = my_list[current_position - gap]\n                current_position = current_position - gap\n            my_list[current_position] = current_element\n        gap = gap//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # The following function is necessary for us to create the sort\n    def insertion_sort(list_to_sort):\n        # We want to iterate through our list\n        for index in range(len(list_to_sort)):\n            # We want to assign our \"current\" index to a variable\n            # and call it the value we're currently looking at\n            current_value = list_to_sort[index]\n            # We want to initialize the variable holding the index we're\n            # looking to swap with\n            swap_index = index\n            # We want to do a binary search for where we should\n            # put the current value\n            while swap_index > 0 and list_to_sort[swap_index - 1] > current_value:\n                # Swap the index we're looking at with the index\n                # to the left of the current value\n                list_to_sort[swap_index] = list_to_sort[swap_index - 1]\n                # The index we're looking to swap with is now the current index\n                swap_index -= 1\n            # At the end of the loop, swap the index we're looking at\n            # with the value we want to insert\n            list_to_sort[swap_index] = current_value\n        return list_to_sort\n    \n    # We want to start the recursive step\n    list_to_sort = insertion_sort(my_list)\n    # If we want to print out the list to see how it's doing,\n    # uncomment the following line\n    # print(list_to_sort)\n    \n    # We want to iterate through our list, but we don't want to\n    # create an index variable each time, so we can just set\n    # the \"low_bound\" variable to 0\n    low_bound = 0\n    # We want to iterate through our list, but we don't want to\n    # create an index variable each time, so we can just set\n    # the \"high_bound\" variable to the length of our list\n    high_bound = len(list_to_sort) - 1\n    # We want to create a while loop to iterate through our list\n    while low_bound < high_bound:\n        # We want to iterate through the list between the indices\n        # \"low_bound\" and \"high_bound\"\n        for index in range(low_bound, high_bound):\n            # We want to assign our \"current\" index to a variable\n            # and call it the value we're currently looking at\n            current_value = list_to_sort[index]\n            # We want to assign our \"current_value_index\" variable\n            # to be the index we're currently looking at\n            current_value_index = index\n            # We want to create a variable to hold the value to the left\n            # of the current value\n            value_to_the_left = list_to_sort[current_value_index - 1]\n            # We want to create a variable to hold the value to the right\n            # of the current value\n            value_to_the_right = list_to_sort[current_value_index + 1]\n            # We want to do a binary search for where we should put the current value\n            # We'll use the \"value_to_the_left\" variable to compare against the\n            # \"value_to_the_right\" variable\n            while value_to_the_left > current_value and value_to_the_right > current_value:\n                # The value to the left is greater than the current value,\n                # so we swap with the value to the right\n                list_to_sort[current_value_index] = value_to_the_right\n                # The value to the right is now greater than the current value,\n                # so we'll swap with the current value\n                list_to_sort[current_value_index + 1] = current_value\n                # The current value is now greater than the value to the left,\n                # so we'll swap with the value to the left\n                list_to_sort[current_value_index - 1] = value_to_the_left\n                # The value to the left is now greater than the current value,\n                # so we'll swap with the current value\n                list_to_sort[current_value_index + 1] = current_value\n                # The current value is now equal to the value to the left\n                # so we'll swap with the current value\n                list_to_sort[current_value_index] = current_value\n                # The value to the right is now less than the current value,\n                # so we'll set the value to the right to the current value\n                value_to_the_right = current_value\n                # The current value is now equal to the value to the right\n                # so we'll set the value to the right to the current value\n                list_to_sort[current_value_index + 1] = current_value\n                # The value to the left is now less than the current value,\n                # so we'll set the value to the left to the current value\n                value_to_the_left = current_value\n                # The current value is now less than the value to the left,\n                # so we'll set the value to the left to the current value\n                list_to_sort[current_value_index - 1] = current_value\n                # The current value is now equal to the value to the left\n                # so we'll set the value to the left to the current value\n                list_to_sort[current_value_index] = current_value\n            # At the end of the loop, swap the index we're looking at\n            # with the value we want to insert\n            list_to_sort[current_value_index] = current_value\n        # At the end of the loop, set the \"low_bound\" variable to\n        # the current value we're looking at\n        low_bound = high_bound\n        # We want to set the \"high_bound\" variable to the current\n        # value plus one, but we need to add one because the\n        # high_bound doesn't include the current value\n        high_bound = high_bound + 1\n    # We want to return the result, so we can call the function\n    # \"insertion_sort\" with the parameter \"my_list\"\n    return insertion_sort(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Determine how far to advance\n    gap = len(my_list) // 2\n    \n    # While the gap is more than 0\n    while gap > 0:\n        # for each item in the list\n        for i in range(gap, len(my_list)):\n            # Select the item\n            selected_item = my_list[i]\n            \n            # Find the position that the selected item belongs\n            j = i\n            # Move the item to the position while j is greater than 0\n            while j >= gap and my_list[j - gap] > selected_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            # Put the selected item into the empty slot\n            my_list[j] = selected_item\n        \n        # Decrease the gap to the half\n        gap = gap // 2\n        \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Initialize variables\n    gap = len(my_list) // 2\n    while gap > 0:\n        # Do the insertion sort\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            # Insert the current element into the already sorted array\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    if n == 1:\n        return my_list\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n    \n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tuple(x and y for x, y in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # my solution\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(min(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(max(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\n    \ndef xor_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tup1 ^ tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n    "
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i]==test_tup2[i]:\n            new_tup = new_tup + (test_tup1[i],)\n    return new_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1 and test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = ()\n    for x,y in zip(test_tup1, test_tup2):\n        if x == y:\n            new_tup = new_tup + (x,)\n    return new_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(element for element in test_tup1 if element in test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(i) & set(j) for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 1 and test_tup2[i] == 1:\n            result += (1, )\n        else:\n            result += (0, )\n    return result\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if ((a * a * c) - (4 * b * c) == 0):\n        x = (-(a * a) + (4 * b)) / (2 * c)\n        y = (2 * a * c) / (4 * c)\n        return (x, y)\n    elif ((a * a * c) - (4 * b * c) < 0):\n        return (None)\n    else:\n        x1 = (-(a * a) + (4 * b)) / (2 * c)\n        y1 = (2 * a * c) / (4 * c)\n        x2 = (-(a * a) - (4 * b)) / (2 * c)\n        y2 = (-(2 * a * c) / (4 * c))\n        return (x1, y1, x2, y2)\n        \nparabola_directrix(2, 1, 1)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n    x = Symbol('x')\n    return [(-b / (2 * a) * x) - ((b * b - 4 * a * c) ** 0.5) / (2 * a), (-b / (2 * a) * x) + ((b * b - 4 * a * c) ** 0.5) / (2 * a)]\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b*b == 4*a*c:\n        if b < 0:\n            return 2*c/(-b+math.sqrt(b*b-4*a*c))\n        else:\n            return 2*c/(b+math.sqrt(b*b-4*a*c))\n    else:\n        return None\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b ** 2 - 4 * a * c < 0:\n        return None\n    return (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        if b!= 0 and c!= 0:\n            return [0, -b / c]\n        elif b == 0 and c == 0:\n            return [0, 0]\n        elif b == 0:\n            return []\n    return [0, -b / (2 * a)]\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if c==0:\n        return None\n    x0=-b/(2*a)\n    return x0\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    import numpy as np\n    import sympy as sp\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (4*a**2 + b**2)/(4*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # ax^2 + bx + c = 0 \n    # d = b^2 - 4ac\n    # t = (-b + sqrt(d)) / 2a\n    # s = (-b - sqrt(d)) / 2a\n    # if d >= 0: \n        # s < t\n    # else: \n        # t < s\n    d = b**2 - 4*a*c\n    if d >= 0: \n        t = (-b + math.sqrt(d)) / (2*a)\n        s = (-b - math.sqrt(d)) / (2*a)\n        return min(s, t)\n    else: \n        return None\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not len(list1) and not len(list2):\n        return False\n    \n    for element in list1:\n        if element in list2:\n            return True\n    \n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    flag = False\n    for item in list1:\n        if item in list2:\n            flag = True\n            break\n    return flag\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    for x in list1:\n        if x in list2:\n            return True\n    \n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    result = False\n    for i in list1:\n        if i in list2:\n            result = True\n    return result\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height / 2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2) * height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 < 0 or base2 < 0 or height < 0:\n        return 0\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # SOLUTION\n    return ((base1+base2)*height) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)*height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr > number\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > max(arr)\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    print(\"Array:\",arr)\n    print(\"Number:\",number)\n    greater_than_list = list(filter(lambda x:x>number, arr))\n    if(len(greater_than_list)>0):\n        print(\"Greater than:\",greater_than_list)\n        return True\n    else:\n        print(\"No greater than element\")\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # print(number)\n    if number > max(arr):\n        return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[0] and number > arr[1]\n    \n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr.sort()\n    greater_arr = []\n    for i in arr:\n        if i > number:\n            greater_arr.append(i)\n    return greater_arr\nprint(check_greater([1, 2, 3, 4, 5], 1))\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    print('The elements of the array are:', arr)\n    if number > max(arr):\n        print('The entered number is greater than the elements of the array')\n    else:\n        print('The entered number is not greater than the elements of the array')\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    length = len(arr)\n    for i in range(length):\n        if arr[i] > number:\n            return True\n        elif arr[i] == number:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    print(\"\\n[+]check_greater:\")\n    arr = [1, 2, 3]\n    number = 4\n    result = [ i for i in arr if i > number]\n    print(result)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # p = re.compile(r'.*[a]\\s*[b]*', re.IGNORECASE) # include spaces, don't include a-z\n    # m = p.match(text)\n    # if m!= None:\n    #     return m.group()\n    # else:\n    #     return \"Does not match!\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"^a.*b+$\"\n    result = re.search(regex, text)\n    return result!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab*?'\n    result = re.findall(pattern,text)\n    print(result)\n    print(type(result))\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a\\bb*')\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = \"ab*?\"\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r\"\\ba.+\\b\", text)\n    if result:\n        return result.group(0)\n    else:\n        return \"No match!\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'[ab]+')\n    if pattern.search(text):\n        return 'found match!'\n    else:\n        return('no match!')\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    import re\n    return bool(re.search(r'ab*', text))\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab*\"\n    re.findall(expression, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat = re.compile(r'a(.*)b')\n    if pat.match(text):\n        return 'YES'\n    else:\n        return 'NO'\nprint(text_match_one('aaabbb'))\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n=int(n)\n    while n>=10:\n        n=n//10\n    return n\n    "
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = list(str(n))\n    n.pop()\n    return int(n[0])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    if n < 10 :\n        return n\n    last_digit = n%10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    def FindLastDigit(n) :\n        if n == 0 :\n            return 0\n        else :\n            return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    if n == 0 :\n        return 0\n    if n > 0 :\n        n = str(n)\n        return int(n[len(n)-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    return int(n[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #Input : n = 512\n    #Output : 2\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n // 10)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = [12, -7, 5, 64, -14]\n    neg_nos_list = []\n    for num in list1:\n        if num < 0:\n            neg_nos_list.append(num)\n    return neg_nos_list\nprint(neg_nos([12, -7, 5, 64, -14]))\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums=[]\n    for i in list1:\n        if i<0:\n            neg_nums.append(i)\n    print(neg_nums)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = [i for i in list1 if i < 0]\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i <0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = [x for x in list1 if x < 0]\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x:x<0, list1))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i = 0\n    while i < len(str1):\n        if str1[i] % 2 == 0:\n            str1 = str1.replace(str1[i], \"\", 1)\n            i -= 1\n        i += 1\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    n=len(str1)\n    new_str=''\n    for i in range(n):\n        if str1[i] not in new_str:\n            new_str+=str1[i]\n    return new_str\nprint(remove_odd('hfdfjhfjeh'))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # \"aabccccdddee\" -> \"aabbccddde\"\n    # \"aabbccddde\" -> \"aabbccddde\"\n    return \"\".join([str1[i] for i in range(len(str1)) if i % 2 == 0])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for char in str1:\n        if char not in string.ascii_lowercase:\n            str1 = str1.replace(char,\"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if not i % 2])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if str1.count(i)%2!= 0:\n            str1 = str1.replace(i, \"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result_str = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result_str += str1[i]\n    return result_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    string = list(str1)\n    string_remove = [x for x in string if x % 2 == 0]\n    return \"\".join(string_remove)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for letter in str1:\n        if str1.count(letter) % 2!= 0:\n            str1 = str1.replace(letter, \"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('o', '')\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum(1 for x in test_list if x[0] == x[1])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # 3 Different ways:\n    # 1.\n    # bidirectional_pairs = sum(\n    #     len(test_list) - i - 1\n    #     for i in range(len(test_list))\n    #     if test_list[i] == test_list[-(i + 1)]\n    # )\n    # 2.\n    # bidirectional_pairs = sum(\n    #     len(test_list) - i - 1\n    #     for i in range(len(test_list))\n    #     if test_list[i] == test_list[-(i + 1)]\n    # )\n    # 3.\n    bidirectional_pairs = sum(\n        1\n        for i in range(len(test_list))\n        if test_list[i] == test_list[-(i + 1)]\n    )\n    return bidirectional_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if isinstance(test_list, list):\n        if len(test_list) <= 0:\n            return 0\n        else:\n            x = 0\n            for i in range(len(test_list)):\n                for j in range(i + 1, len(test_list)):\n                    if (test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]):\n                        x += 1\n            return x\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for index, val in enumerate(test_list):\n        if index > 0 and test_list[index - 1] == val:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) == 0:\n        return 0\n    else:\n        x = len(test_list)\n        count = 0\n        for i in range(x):\n            for j in range(i+1, x):\n                if test_list[i][1] == test_list[j][0]:\n                    count += 1\n        return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward = {}\n    backward = {}\n    for item in test_list:\n        forward[item[0]] = forward.get(item[0], 0) + 1\n        backward[item[1]] = backward.get(item[1], 0) + 1\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    unique = set(test_list)\n    # iterate over a set\n    for i in unique:\n        if (i[::-1] in unique):\n            return True\n    return False"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    print(\"Testing count_bidirectional()...\", end=\"\")\n    assert count_bidirectional([(1, 2), (2, 1)]) == 1\n    assert count_bidirectional([(1, 2), (2, 3), (3, 1)]) == 2\n    assert count_bidirectional([(1, 2), (2, 3), (3, 1), (3, 2), (2, 1)]) == 3\n    assert count_bidirectional([(1, 2), (2, 1), (3, 2), (3, 1), (2, 1)]) == 3\n    assert count_bidirectional([(1, 2), (2, 1), (2, 3), (3, 1), (2, 1)]) == 2\n    assert count_bidirectional([(1, 2), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3)]) == 6\n    assert count_bidirectional([(1, 2), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (3, 2)]) == 6\n    assert count_bidirectional([(1, 2), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (2, 3), (1, 2), (2, 3), (3, 2), (2, 3), (3, 2), (3, 2), (3, 1), (2, 1), (3, 1), (2, 1), (2, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3)]) == 12\n    assert count_bidirectional([(1, 2), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 1), (2, 1), (3, 1), (2, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (2, 3), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 1), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3)]) == 12\n    assert count_bidirectional([(1, 2), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 1), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 1), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 1), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2)]) == 24\n    assert count_bidirectional([(1, 2), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 1), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 1), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 1), (2, 1), (3, 1), (2, 1), (2, 1), (1, 2), (2, 1), (3, 1), (2, 1), (3, 1), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 2), (2, 3), (3, 2), (3, 2), (3, 1), (2, 1), (3, 1), (2, 1), "
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    list_tuple_set = set()\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            list_tuple_set.add(frozenset((test_list[i], test_list[j])))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    n = 0\n    for i in L:\n        n = n * 10 + i\n    return n\n    \n    \ndef multiple_to_single_v2(L):\n    return int(''.join(str(i) for i in L))\n    \n    \ndef multiple_to_single_v3(L):\n    return int(''.join(map(str, L)))\n    \n    \ndef test_multiple_to_single():\n    print(multiple_to_single([0, 0, 0]))\n    print(multiple_to_single([0, 1, 2, 3, 4]))\n    print(multiple_to_single([1, 2, 3, 4, 5]))\n    print(multiple_to_single([0, 1, 2, 3, 4, 5]))\n    print(multiple_to_single([2, 4, 6, 8]))\n    print(multiple_to_single_v2([0, 0, 0]))\n    print(multiple_to_single_v2([0, 1, 2, 3, 4]))\n    print(multiple_to_single_v2([1, 2, 3, 4, 5]))\n    print(multiple_to_single_v2([0, 1, 2, 3, 4, 5]))\n    print(multiple_to_single_v2([2, 4, 6, 8]))\n    print(multiple_to_single_v3([0, 0, 0]))\n    print(multiple_to_single_v3([0, 1, 2, 3, 4]))\n    print(multiple_to_single_v3([1, 2, 3, 4, 5]))\n    print(multiple_to_single_v3([0, 1, 2, 3, 4, 5]))\n    print(multiple_to_single_v3([2, 4, 6, 8]))\n    print(multiple_to_single_v3([]))\n    \n    \ntest_multiple_to_single()"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ans = 0\n    for i in L:\n        ans *= 10\n        ans += i\n    return ans\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result = result * 10 + L[i]\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # iterate over L and add them together\n    # iterate over L from the end and multiply them together\n    new = L[0]\n    for i in range(1, len(L)):\n        new *= L[i]\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = list(map(str, L))\n    return int(\"\".join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple = 1\n    for n in L:\n        multiple *= n\n    return multiple\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Your code here\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = {}\n    matches = re.finditer(r'((\\w+)\\s(?:by|about|on|through|after|above|against|along|alongside|along with|along the) (\\w+|\\d+))', text)\n    for matchNum, match in enumerate(matches):\n        positions[match.group(3)] = match.start()\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    sentence = text\n    #regex pattern to find all adverbs\n    regex = r'\\b(?:(?:(?:[Aa]d)|(?:[Aa]t)|[Bb]ad|[Cc]om|[Dd]id|[Dd]oes|[Dd]o)\\s+((?:\\b\\w+(?:\\s+\\w+)*\\b)))(?:\\s|$)'\n    \n    #regex to find if it is the first word in the text\n    regex_first = r'^\\b\\w+'\n    \n    #all the adverbs in the text\n    adverbs = re.finditer(regex, sentence)\n    \n    #if there are no adverbs return []\n    if not adverbs:\n        return []\n    \n    #if there is only one adverb it will return [adverb]\n    if len(adverbs) == 1:\n        return [adverbs[0].group()]\n    \n    #if there are more than one adverb it will return all of them as a list\n    else:\n        all_adverbs = []\n        for adverb in adverbs:\n            all_adverbs.append(adverb.group())\n        return all_adverbs\n    \ndef find_closest_noun(text):\n    '''\n    Write a function to find the closest noun to an adjective.\n    '''\n    \n    sentence = text\n    #regex pattern to find all nouns\n    regex = r'\\b(?:(?:[Aa]d)|(?:[Aa]t)|[Bb]ad|[Cc]om|[Dd]id|[Dd]oes|[Dd]o)\\s+(?:\\b\\w+(?:\\s+\\w+)*\\b)(?:\\s|$)'\n    \n    #regex to find if it is the first word in the text\n    regex_first = r'^\\b\\w+'\n    \n    #all the nouns in the text\n    nouns = re.finditer(regex, sentence)\n    \n    #if there are no nouns return []\n    if not nouns:\n        return []\n    \n    #if there is only one noun it will return [noun]\n    if len(nouns) == 1:\n        return [nouns[0].group()]\n    \n    #if there are more than one noun it will return all of them as a list\n    else:\n        all_nouns = []\n        for noun in nouns:\n            all_nouns.append(noun.group())\n        return all_nouns\n    \n    \ndef find_adj_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    \n    sentence = text\n    #regex pattern to find all adjectives\n    regex = r'\\b(?:(?:[Aa]d)|(?:[Aa]t)|[Bb]ad|[Cc]om|[Dd]id|[Dd]oes|[Dd]o)\\s+((?:\\b\\w+(?:\\s+\\w+)*\\b))(?:\\s|$)'\n    \n    #regex to find if it is the first word in the text\n    regex_first = r'^\\b\\w+'\n    \n    #all the adjectives in the text\n    adjectives = re.finditer(regex, sentence)\n    \n    #if there are no adjectives return []\n    if not adjectives:\n        return []\n    \n    #if there is only one adjective it will return [adjective]\n    if len(adjectives) == 1:\n        return [adjectives[0].group()]\n    \n    #if there are more than one adjective it will return all of them as a list\n    else:\n        all_adjectives = []\n        for adjective in adjectives:\n            all_adjectives.append(adjective.group())\n        return all_adjectives\n    \ndef find_adj_closest_noun(text):\n    '''\n    Write a function to find the closest noun to an adjective.\n    '''\n    \n    sentence = text\n    #regex pattern to find all nouns\n    regex = r'\\b(?:(?:[Aa]d)|(?:[Aa]t)|[Bb]ad|[Cc]om|[Dd]id|[Dd]oes|[Dd]o)\\s+(?:\\b\\w+(?:\\s+\\w+)*\\b)(?:\\s|$)'\n    \n    #regex to find if it is the first word in the text\n    regex_first = r'^\\b\\w+'\n    \n    #all the nouns in the text\n    nouns = re.finditer(regex, sentence)\n    \n    #if there are no nouns return []\n    if not nouns:\n        return []\n    \n    #if there is only one noun it will return [noun]\n    if len(nouns) == 1:\n        return [nouns[0].group()]\n    \n    #if there are more than one noun it will return all of them as a list\n    else:\n        all_nouns = []\n        for noun in nouns:\n            all_nouns.append(noun.group())\n        return all_nouns\n    \ndef find_pre_position(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    \n    sentence = text\n    #regex pattern to find all prepositions\n    regex = r'\\b(?:(?:[Aa]d)|(?:[Aa]t)|[Bb]ad|[Cc]om|[Dd]id|[Dd]oes|[Dd]o)\\s+(?:\\b\\w+(?:\\s+\\w+)*\\b)\\s+(?:\\b\\w+(?:\\s+\\w+)*\\b)(?:\\s|$)'\n    \n    #regex to find if it is the first word in the text\n    regex_first = r'^\\b\\w+'\n    \n    #all the prepositions in the text\n    prepositions = re.finditer(regex, sentence)\n    \n    #if there are no prepositions return []\n    if not prepositions:\n        return []\n    \n    #if there is only one preposition it will return [preposition]\n    if len(prepositions) == 1:\n        return [prepositions[0].group()]\n    \n    #if there are more than one preposition it will return all of them as a list\n    else:\n        all_prepositions = []\n        for preposition in prepositions:\n            all_prepositions.append(preposition.group())\n        return all_prepositions\n    \ndef find_pre_closest_noun(text):\n    '''\n    Write a function to find the closest noun to a preposition.\n    '''\n    \n    sentence = text\n    #regex pattern to find all nouns\n    regex = r'\\b(?:(?:[Aa]d)|(?:[Aa]t)|[Bb]ad|[Cc]om|[Dd]id|[Dd]oes|[Dd]o)\\s+(?:\\b\\w+(?:\\s+\\w+)*\\b)\\s+(?:\\b\\w+(?:\\s+\\w+)*\\b)(?:\\s|$)'\n    \n    #regex to find if it is the first word in the text\n    regex_first = r'^\\b\\w+'\n    \n    #all the nouns in the text\n    nouns = re.finditer(regex, sentence)\n    \n    #if there are no nouns return []\n    if not nouns:\n        return []\n    \n    #if there is only one noun it will return [noun]\n    if len(nouns) == 1:\n        return [nouns[0].group()]\n    \n    #if there are more than one noun it will return all of them as a list\n    else:\n        all_nouns = []\n        for noun in nouns:\n            all_nouns.append(noun.group()"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r\"(\\w+ly)\"\n    adverbs = re.findall(adverb_pattern, text, re.I)\n    positions = []\n    for adverb in adverbs:\n        #position = text.find(adverb)\n        position = text.index(adverb)\n        positions.append(position)\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b[a-zA-z]*ly'\n    re.findall(pattern,text)\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = \"\"\n    result = []\n    for i in range(0, len(text)):\n        if text[i] == '.':\n            if i + 1 < len(text) and text[i+1] == ',':\n                continue\n        if text[i] == ',':\n            if text[i+1] =='' or text[i+1] == '.':\n                continue\n            if text[i+1] == ',':\n                continue\n            if text[i+1] == ',':\n                continue\n        if text[i] == '?':\n            if i+1 < len(text) and text[i+1] =='':\n                continue\n        if text[i] == '!' or text[i] == '.':\n            result.append([i,text[i]])\n            continue\n        if text[i] == ',':\n            if i+1 < len(text) and text[i+1] == '.':\n                result.append([i,text[i]])\n                continue\n            if i+1 < len(text) and text[i+1] =='':\n                continue\n        if text[i] =='':\n            continue\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n            continue\n        if i+1 < len(text) and text[i+1] =='':\n            continue\n        if text[i] == '.':\n            result.append([i,text[i]])\n        if text[i] == '!':\n            result.append([i,text[i]])\n        if text[i] == '?':\n            result.append([i,text[i]])\n        if text[i] == ',':\n            result.append([i,text[i]])\n        if text[i] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == ',':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,text[i]])\n        if i+1 < len(text) and text[i+1] == '.':\n            result.append([i,tex"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = {}\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = []\n    for i, text in enumerate(text):\n        for pattern in [r'(\\w+)(\\s+)(am|is|are|were|was|were|be|being|been|will|shall|should|can|could|would)(\\s+)(\\w+)',\n                    r'(\\w+)(\\s+)(am|is|are|were|was|were|be|being|been|will|shall|should|can|could|would)(\\s+)',\n                    r'(\\w+)(\\s+)(are|were|is|am|was|were|be|being|been|can|could|shall|will|would)(\\s+)(\\w+)',\n                    r'(\\w+)(\\s+)(are|were|is|am|was|were|be|being|been|can|could|shall|will|would)(\\s+)',\n                    r'(\\w+)(\\s+)(\\w+)(\\s+)(am|is|are|were|was|were|be|being|been|can|could|shall|will|would)(\\s+)',\n                    r'(\\w+)(\\s+)(\\w+)(\\s+)(am|is|are|were|was|were|be|being|been|can|could|shall|will|would)(\\s+)',\n                    r'(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(am|is|are|were|was|were|be|being|been|can|could|shall|will|would)(\\s+)',\n                    r'(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(am|is|are|were|was|were|be|being|been|can|could|shall|will|would)(\\s+)',\n                    r'(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(am|is|are|were|was|were|be|being|been|can|could|shall|will|would)(\\s+)',\n                    r'(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)(\\s+)(\\w+)']:\n        match = re.search(pattern, text)\n        if match:\n            adverb_position.append((i, match.start(0)))\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #your code here\n    lst = text.split()\n    i = 0\n    count = 0\n    while i < len(lst):\n        if lst[i] == 'the':\n            count += 1\n        if lst[i] == 'is':\n            count += 1\n        if lst[i] == 'as':\n            count += 1\n        if lst[i] == 'a':\n            count += 1\n        if lst[i] == 'an':\n            count += 1\n        if lst[i] == 'for':\n            count += 1\n        if lst[i] == 'and':\n            count += 1\n        if lst[i] == 'of':\n            count += 1\n        if lst[i] == 'the':\n            count += 1\n        if count == 5:\n            return i\n        i += 1\n    return -1\n    \ndef last_position(text):\n    '''\n    Write a function to find the last position of a character in the text.\n    '''\n    #your code here\n    last_position = len(text) - 1\n    for i in range(last_position, -1, -1):\n        if text[i] == '.':\n            return i\n    return -1\n    \ndef find_position_of_first_character(text, char):\n    '''\n    Write a function to find the position of the first character.\n    '''\n    #your code here\n    for i in range(len(text)):\n        if text[i] == char:\n            return i\n    return -1\n    \ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuation.\n    '''\n    #your code here\n    result = \"\"\n    for i in text:\n        if i == '.' or i == ',':\n            continue\n        else:\n            result += i\n    return result\n    \ndef remove_all_whitespace(text):\n    '''\n    Write a function to remove all whitespace.\n    '''\n    #your code here\n    result = \"\"\n    for i in text:\n        if i =='' or i == '\\t' or i == '\\n' or i == '\\r':\n            continue\n        else:\n            result += i\n    return result\n    \ndef remove_all_capitals(text):\n    '''\n    Write a function to remove all capital letters.\n    '''\n    #your code here\n    result = \"\"\n    for i in text:\n        if i!= i.upper():\n            result += i\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\s(adverb)\\s'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    all_adverbs = []\n    all_adverbs_position = []\n    for m in re.finditer('[Aa]dver[bB]', text):\n        adverb = m.group()\n        all_adverbs.append(adverb)\n        all_adverbs_position.append(m.span())\n    if len(all_adverbs) == 0:\n        return all_adverbs, all_adverbs_position\n    else:\n        return all_adverbs, all_adverbs_position\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # function name: surfacearea_cube\n    # input: l, a positive integer representing the length of the sides\n    # output: the surface area of the cube.\n    # \n    # example usage: \n    # l=2\n    # >>> surfacearea_cube(l)\n    # 12\n    # >>> l=1\n    # >>> surfacearea_cube(l)\n    # 6\n    # >>> l=0\n    # >>> surfacearea_cube(l)\n    # 0\n    # Hint: use 3.1415926\n    #\n    # The volume of a cube with length l is l**3, and the surface area is 6*l**2.\n    # \n    ############################################################################\n    # BEGIN YOUR CODE\n    if l<=0:\n        print(\"Please enter positive number\")\n    else:\n        return 6*l**2\n    # END YOUR CODE\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6*l**2\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l*l)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6 * l ** 2\n    print(f'Surface area of the cube of size {l} is: {surfacearea}')\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area=6*(l*l)\n    return area\nl=int(input('Enter the length of cube:'))\nprint('The Surface Area of the cube is',surfacearea_cube(l))\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l*l*l\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    return 6 * math.pow(l, 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l ** 2 * 6\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len(list(filter(lambda x: x > 0, nums))) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for num in nums:\n        if num>0:\n            count+=1\n    return count/len(nums)\ndef find_product(nums):\n    '''\n    Find the product of all the numbers in the array except the number at index \"i\".\n    '''\n    product=1\n    for i in range(0,len(nums)):\n        product=product*nums[i]\n    for i in range(0,len(nums)):\n        product=product/nums[i]\n    return product\ndef find_pow_of_2(nums):\n    '''\n    Given an array of integers, find the first non-consecutive number.\n    '''\n    previous=nums[0]\n    for i in range(1,len(nums)):\n        if nums[i]!=previous+1:\n            return nums[i-1]\n        previous=nums[i]\ndef print_arr(nums):\n    '''\n    Print a 2D array of integers.\n    '''\n    for row in nums:\n        print(row)\ndef get_missing_no(nums):\n    '''\n    Find the first missing number from an array of non-negative integers.\n    '''\n    sum=0\n    for i in range(0,len(nums)):\n        sum+=nums[i]\n    n=len(nums)+1\n    return int((n*(n+1)/2)-sum)\ndef get_missing_no_hash(nums):\n    '''\n    Find the first missing number from an array of non-negative integers.\n    '''\n    hash_table={}\n    for num in nums:\n        if num in hash_table:\n            hash_table[num]+=1\n        else:\n            hash_table[num]=1\n    for i in range(1,len(nums)+1):\n        if i not in hash_table:\n            return i\ndef get_missing_no_arr(nums):\n    '''\n    Find the first missing number from an array of non-negative integers.\n    '''\n    arr=array('i',nums)\n    arr.append(len(nums))\n    arr.append(0)\n    for i in range(0,len(nums)):\n        if arr[nums[i]]!=nums[i]:\n            arr[nums[i]]=nums[i]\n    for i in range(1,len(arr)):\n        if arr[i]!=i:\n            return i\ndef get_missing_no_xor(nums):\n    '''\n    Find the first missing number from an array of non-negative integers.\n    '''\n    prev=0\n    for i in range(0,len(nums)):\n        prev=prev^nums[i]\n        prev=prev^(i+1)\n    prev=prev^(len(nums)+1)\n    return prev\ndef find_duplicates(nums):\n    '''\n    Find the duplicates in an array of integers.\n    '''\n    hash_table={}\n    duplicates=[]\n    for num in nums:\n        if num in hash_table:\n            hash_table[num]+=1\n        else:\n            hash_table[num]=1\n    for key in hash_table:\n        if hash_table[key]>1:\n            duplicates.append(key)\n    return duplicates\ndef reverse_words(sentence):\n    '''\n    Reverse each word in a sentence.\n    '''\n    words=sentence.split(' ')\n    words.reverse()\n    return''.join(words)\ndef reverse_words_stack(sentence):\n    '''\n    Reverse each word in a sentence.\n    '''\n    words=[]\n    for word in sentence.split(' '):\n        words.append(word)\n    words.reverse()\n    return''.join(words)\ndef is_palindrome(s):\n    '''\n    Check if the string is a palindrome.\n    '''\n    return s==s[::-1]\ndef is_palindrome_stack(s):\n    '''\n    Check if the string is a palindrome.\n    '''\n    words=s.split(' ')\n    words.reverse()\n    return''.join(words)==s\ndef longest_word(words):\n    '''\n    Return the longest word in the list of words.\n    '''\n    longest=0\n    for word in words:\n        if len(word)>longest:\n            longest=len(word)\n    return longest\ndef longest_word_arr(words):\n    '''\n    Return the longest word in the list of words.\n    '''\n    longest=0\n    index=0\n    for i in range(0,len(words)):\n        if len(words[i])>longest:\n            longest=len(words[i])\n            index=i\n    return words[index]\ndef get_longest_word(words):\n    '''\n    Return the longest word in the list of words.\n    '''\n    longest=0\n    index=0\n    for i in range(0,len(words)):\n        if len(words[i])>longest:\n            longest=len(words[i])\n            index=i\n    return words[index]\ndef get_longest_word_arr(words):\n    '''\n    Return the longest word in the list of words.\n    '''\n    longest=0\n    index=0\n    for i in range(0,len(words)):\n        if len(words[i])>longest:\n            longest=len(words[i])\n            index=i\n    return words[index]\ndef is_reverse_str(s1,s2):\n    '''\n    Check if the first string is the reverse of the second string.\n    '''\n    return s1==s2[::-1]\ndef is_reverse_str_arr(s1,s2):\n    '''\n    Check if the first string is the reverse of the second string.\n    '''\n    return s1.split(' ')[::-1]==s2.split(' ')\ndef is_prefix(s1,s2):\n    '''\n    Check if s1 is a prefix of s2.\n    '''\n    return s1 in s2\ndef is_prefix_arr(s1,s2):\n    '''\n    Check if s1 is a prefix of s2.\n    '''\n    return s1 in s2.split(' ')\ndef is_substring(s1,s2):\n    '''\n    Check if s1 is a substring of s2.\n    '''\n    return s1 in s2\ndef is_substring_arr(s1,s2):\n    '''\n    Check if s1 is a substring of s2.\n    '''\n    return s1 in s2\ndef get_substring(s1,s2):\n    '''\n    Return the first substring of s2 that is a substring of s1.\n    '''\n    return s2[:s1.index(s1)]\ndef get_substring_arr(s1,s2):\n    '''\n    Return the first substring of s2 that is a substring of s1.\n    '''\n    return s2[:s1.index(s1)]\ndef get_suffix(s1,s2):\n    '''\n    Return the suffix of s1 that is a suffix of s2.\n    '''\n    return s1[s2.index(s1):]\ndef get_suffix_arr(s1,s2):\n    '''\n    Return the suffix of s1 that is a suffix of s2.\n    '''\n    return s1[s2.index(s1):]\ndef find_intersection(s1,s2):\n    '''\n    Return the intersection of s1 and s2.\n    '''\n    s1=s1.split(' ')\n    s2=s2.split(' ')\n    common=[]\n    for word in s1:\n        if word in s2:\n            common.append(word)\n    return''.join(common)\ndef fin"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0.0\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num = 0\n    for i in nums:\n        if i>0:\n            positive_num += 1\n    return positive_num\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for n in nums:\n        if n > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>=0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # the sum of all the numbers in the array\n    total_sum = sum(nums)\n    # the number of positives in the array\n    positive_sum = sum(n[0] for n in nums if n[0] > 0)\n    # return the ration of positive numbers in the array\n    return positive_sum/total_sum\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num>0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(i for i in list1 if i < 0)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [3, -2, -1, 4, -2, -5, -2, -7]\n    max = list1[0]\n    for i in list1:\n        if i < 0 and i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = None\n    for elem in list1: \n        if largest_neg is None: \n            largest_neg = elem\n        elif elem < largest_neg:\n            largest_neg = elem\n    return largest_neg\n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove all duplicates in a list.\n    '''\n    result = []\n    for elem in list1: \n        if elem not in result: \n            result.append(elem)\n    return result\n    \ndef sum_of_squares(list1):\n    '''\n    Write a python function to find the sum of squares of all numbers in a given list.\n    '''\n    sum = 0\n    for elem in list1: \n        sum += elem**2\n    return sum\n    \ndef check_for_missing_elem(list1,list2):\n    '''\n    Write a python function to check whether the list1 contains all elements of list2.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for elem in list2: \n            if elem not in list1: \n                return False\n        return True\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    lst=[]\n    for i in list1:\n        if i < 0:\n            lst.append(i)\n    if len(lst) > 0:\n        lst.sort()\n        return lst[-1]\n    else:\n        return 0\n        \n    \ndef equal_to_5(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    lst=[]\n    for i in list1:\n        if i == 5:\n            lst.append(i)\n    if len(lst) > 0:\n        return True\n    else:\n        return False\n        \n        \ndef multiple_of_3(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    lst=[]\n    for i in list1:\n        if i % 3 == 0:\n            lst.append(i)\n    if len(lst) > 0:\n        return True\n    else:\n        return False\n        \n        \ndef remove_duplicates(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    lst=[]\n    for i in list1:\n        if i not in lst:\n            lst.append(i)\n    return lst\n        \n        \ndef remove_duplicates(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return list(set(list1))\n        \n        \ndef num_freq(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    sorted_d = sorted(d.items(), key = lambda x: x[1], reverse=True)\n    return sorted_d[0][0]\n        \n        \ndef common_elements(list1, list2):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list3 = list(set(list1) & set(list2))\n    return list3\n        \n        \ndef common_elements(list1, list2):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return list(set(list1) & set(list2))\n        \n        \ndef reverse(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    lst1 = list1.copy()\n    lst1.reverse()\n    return lst1\n        \n        \ndef palindrome(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    lst1 = list1.copy()\n    lst1.reverse()\n    if lst1 == list1:\n        return True\n    else:\n        return False\n        \n        \ndef num_freq(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    sorted_d = sorted(d.items(), key = lambda x: x[1], reverse=True)\n    return sorted_d[0][0]\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sum(list1)\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the largest negative number from the given lis"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #start writing your code here\n    l=[]\n    for i in list1:\n        if i<0:\n            l.append(i)\n    return(max(l))\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            l.append(list1[i])\n    print(max(l))\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    else:\n        list_neg = [num for num in list1 if num < 0]\n        if len(list_neg) == 0:\n            return -1\n        else:\n            return max(list_neg)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_num:\n                max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    negative = []\n    for x in list1:\n        if x < 0:\n            negative.append(x)\n    if len(negative) > 0:\n        return max(negative)\n    else:\n        return \"No negative number in the list\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_max = max(list1)\n    list_min = min(list1)\n    max_neg = list_min*(-1)\n    return max_neg\n    \nprint(largest_neg([-5, 3, -7, 8]))\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple([x for x in test_list if x[0] < K])\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(x[:-K] if K>0 else x[-K:] for x in test_list)]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    while len(test_list) > K:\n        test_list.pop()\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: tuple(x[:K]), test_list))\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # return [tuple(list(element)[:K]) for element in test_list]\n    # return [tuple(element[:K]) for element in test_list]\n    return [tuple(element[:K]) if len(element) > K else element for element in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trim_tuple_list = []\n    for i in test_list:\n        if len(i) >= K:\n            trim_tuple_list.append(i[:K])\n        else:\n            trim_tuple_list.append(i)\n    return trim_tuple_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        #we have to keep the length of the list equal or greater than k\n        if len(test_list[i]) < K:\n            test_list[i] += (None,) * (K - len(test_list[i]))\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tup[K:] for tup in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for item in test_list:\n        if len(item) > K:\n            result_list.append(tuple(item[:K]))\n        else:\n            result_list.append(item)\n    return result_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return trim_list([t[0:K] for t in test_list], K)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i]),\n    return result_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #return tuple(tup1[i]*tup2[i] for i in range(len(tup1)))\n    return tuple(int(i) for i in test_tup1) * tuple(int(j) for j in test_tup2)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    new_lst = []\n    for i in range(len(lst1)):\n        new_lst.append(lst1[i] * lst2[i])\n    return tuple(new_lst)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple(i * j for i, j in zip(test_tup1, test_tup2))\n    return result\n    \n    \nprint(index_multiplication((2, 3, 4), (5, 6, 7)))\n    \n    \n    "
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mul = lambda x, y: x * y\n    return [mul(i, j) for i, j in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_result = ()\n    for i in range(0, len(test_tup1)):\n        index_result = index_result + (test_tup1[i] * test_tup2[i],)\n    return index_result\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for idx in range(len(test_tup1)):\n        result += (test_tup1[idx] * test_tup2[idx],)\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_mul_list = []\n    for index in range(len(test_tup1)):\n        element_1 = test_tup1[index]\n        element_2 = test_tup2[index]\n        index_mul_list.append(element_1*element_2)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(x*y for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for index in range(0, len(test_tup1)):\n        result.append(test_tup1[index] * test_tup2[index])\n    return tuple(result)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = Counter(tup) \n    res = res + Counter(lst) \n    for key, val in res.items(): \n        print('Count of {} is {}'.format(key,val)) \nlst = [1, 2, 3, 4, 5, 6, 7, 8] \ntup = (1, 2, 3, 4, 5, 6, 7, 8) \ncount_Occurrence(tup, lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Iterate over the elements in tuple and count each element\n    for x in tup: \n        count = 0\n        for y in lst:\n            if x == y:\n                count += 1\n        print(count)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst1=list(tup)\n    occurrence={}\n    for i in range(0, len(lst1)): \n        if lst1[i] in occurrence: \n            occurrence[lst1[i]] += 1\n        else: \n            occurrence[lst1[i]] = 1\n    return occurrence\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = {} \n    for ele in lst: \n        if (ele in tup): \n            res[ele] = tup.count(ele) \n    return res \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict = {} \n    for ele in lst: \n        if ele in tup: \n            dict[ele] = tup.count(ele) \n    return dict \nprint(count_Occurrence((11,12,13,14,15,11,12,13,15), [11,12,13,15]))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [i for i in lst if i in tup] "
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = list(tup)\n    tup = tuple(lst)\n    occurrence = {}\n    for i in tup:\n        occurrence[i] = tup.count(i)\n    print(occurrence)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst) \n    # returns a dictionary with elements of list as key and their count as value \n    lst = list(tup) \n    # converting tuple into list \n    # printing result \n    for i in lst: \n        if i in c: \n            print(i, \"=\", c[i], end = \" \") \n    return\ntup = (1,2,3,4,5,6,7,2,2,2,2,3,4,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) \n    lst_Occ = {key: value for key, value in count_dict.items() if key in tup} \n    return lst_Occ \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # return [lst.count(i) for i in tup] \n    for i in tup: \n        print(lst.count(i), end = \" \") \n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x ** 3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**3)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num ** 3)\n    return results\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i**3)\n    return new_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print([x**3 for x in nums])\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i**3)\n    return new_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Calculate the sum of perrin numbers from 1 to n, where n is positive\n    # integer and n<=2000.\n    # 1+2+3+...+n=n(n+1)/2\n    # so the sum of perrin numbers is equal to the expression above\n    return n*(n+1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    \n    return n*(2*n-1)\n    \n    \n    \ndef cal_numbers_under_sum(sum_number):\n    '''\n    Write a function to calculate the number of perrin numbers up to the sum_number.\n    '''\n    \n    return (sum_number//2)*(sum_number//2-1)//2\n    \n    \n    \ndef p(n):\n    '''\n    Write a function to calculate the nth perrin number.\n    '''\n    \n    \n    return n*(2*n-1)\n    \n    \n    \ndef nth_perrin_number(n):\n    '''\n    Write a function to calculate the nth perrin number.\n    '''\n    \n    return (2*n-1)\n    \n    \n    \ndef nth_perrin_number_opt(n):\n    '''\n    Write an optimized function to calculate the nth perrin number.\n    '''\n    \n    return (n*(2*n-1))//2\n    \n    \n    \ndef nth_perrin_number_opt2(n):\n    '''\n    Write an optimized function to calculate the nth perrin number.\n    '''\n    \n    return n*((2*n-1)//2)\n    \n    \n    \ndef sum_of_perrin_number(n):\n    '''\n    Write a function to calculate the sum of first n perrin numbers.\n    '''\n    \n    return (2*n-1)*(n+1)*(2*n)//6\n    \n    \n    \ndef sum_of_perrin_number_opt(n):\n    '''\n    Write an optimized function to calculate the sum of first n perrin numbers.\n    '''\n    \n    return ((n-1)*n*(2*n))//6\n    \n    \n    \ndef nth_perrin_number_sum(n):\n    '''\n    Write a function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    \n    return (n*(2*n-1)*(n+1))//6\n    \n    \n    \ndef nth_perrin_number_sum_opt(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n+1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum(n):\n    '''\n    Write a function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    \n    return ((n*(2*n-1))//2)*(n+1)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n+1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt2(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n-1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt3(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n+1))//2)*(n//2)\n    \n    \n    \ndef nth_perrin_number_sum_opt(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return (n*(2*n-1))//6\n    \n    \n    \ndef nth_perrin_number_sum_opt2(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n-1)*n*(2*n))//6\n    \n    \n    \ndef nth_perrin_number_sum_opt3(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n+1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    \n    return ((n-1)*n*(2*n))//6\n    \n    \n    \ndef sum_of_perrin_number_sum_opt4(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n+1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt5(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n-1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt6(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n+1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt7(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n-1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt8(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n+1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt9(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n+1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt10(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n-1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt11(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n-1))//2)*(n//2)\n    \n    \n    \ndef nth_perrin_number_sum_opt(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return (n*(2*n-1))//6\n    \n    \n    \ndef sum_of_perrin_number_sum_opt12(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n+1))//2)*(n//2)\n    \n    \n    \ndef nth_perrin_number_sum_opt13(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return (n*(2*n-1))//6\n    \n    \n    \ndef sum_of_perrin_number_sum_opt14(n):\n    '''\n    Write an optimized function to calculate the sum of the first n perrin numbers.\n    '''\n    \n    return ((n*(n+1))//2)*(n//2)\n    \n    \n    \ndef sum_of_perrin_number_sum_opt15(n):\n    '''\n    Write an optimized function to calculate the sum of th"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (2 * n + 1) / 2\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(3*n+2)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += 2*i + 1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(2, n + 1):\n        sum += 2/i + 1/(i+1) - 1/(i-1)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (2 * i - 1) / (3 * i * (2 * i - 1))\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total = total + perrin(i)\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n        \ndef collatz(n):\n    '''\n    Write a function to compute the sequence collatz with input n.\n    '''\n    if n == 1:\n        return [n]\n    else:\n        if n % 2 == 0:\n            return collatz(n/2) + [n]\n        else:\n            return collatz(3*n + 1) + [n]\n        \ndef palindrome(s):\n    '''\n    Write a function to compute whether the given string is a palindrome.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i + l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l is not None and str is not None:\n        for i in range(len(l)):\n            if len(l[i]) < l:\n                l[i] = l[i][0:l]\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    \n    # Your code goes here\n    length = l\n    for i in range(0,len(str)):\n        if len(str[i])==length:\n            result.append(str[i])\n    return result\n    \ndef extract_string_re(str,l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    regex = '^\\w{'+str(l)+'}'\n    # Your code goes here\n    for i in range(0,len(str)):\n        if re.search(regex,str[i]):\n            result.append(str[i])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    i = 0\n    while i < len(l):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n        i += 1\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print('extract_string:'+ str)\n    print('extract_string:'+ l)\n    \n    \n    return\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > l:\n        return str[:l]\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[l[0]:l[1]]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[l:] for i in str]\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace('\\n', '')\n    text3 = text2.replace(' ', '')\n    return text3\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if len(text1) == 0:\n        return text1\n    if text1[0] == \" \":\n        return remove_whitespaces(text1[1:])\n    if text1[-1] == \" \":\n        return remove_whitespaces(text1[:len(text1) - 1])\n    return text1\ndef is_palindrome(text1):\n    '''\n    Write a function to determine if the given string is a palindrome.\n    '''\n    return text1 == text1[::-1]\ndef check_anagram(text1, text2):\n    '''\n    Write a function to check if the two given strings are anagrams of each other.\n    '''\n    if len(text1)!= len(text2):\n        return False\n    str1 = sorted(text1)\n    str2 = sorted(text2)\n    return str1 == str2\ndef remove_vowels(text1):\n    '''\n    Write a function to remove all vowels from the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    for char in vowels:\n        text1 = text1.replace(char, '')\n    return text1\ndef is_pangram(text1, alphabet = 'abcdefghijklmnopqrstuvwxyz'):\n    '''\n    Write a function to check if the given string is a pangram.\n    '''\n    return set(alphabet) - set(text1.lower()) == set()\ndef longest_substring_without_repeating_characters(text1):\n    '''\n    Write a function to find the longest substring without repeating characters.\n    '''\n    l = 0\n    substr = []\n    for i in range(len(text1)):\n        for j in range(i + 1, len(text1) + 1):\n            if len(set(text1[i:j])) == len(text1[i:j]):\n                if j - i > l:\n                    l = j - i\n                    substr = text1[i:j]\n    return substr\ndef reverse_string(text1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    if len(text1) == 1:\n        return text1\n    return text1[len(text1) - 1] + reverse_string(text1[:len(text1) - 1])\ndef find_first_k_missing_positive(nums, k):\n    '''\n    Write a function to find the first K missing positive integers in the given array.\n    '''\n    if not nums:\n        return nums\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            nums[i] = len(nums) + 1\n    for i in range(len(nums)):\n        val = abs(nums[i])\n        if val - 1 < len(nums):\n            nums[val - 1] = -abs(nums[val - 1])\n    missing_nums = []\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            missing_nums.append(i + 1)\n    for i in range(k):\n        current = i + 1\n        if current not in missing_nums:\n            return current\n    return current\ndef find_first_k_missing_positive(nums, k):\n    '''\n    Write a function to find the first K missing positive integers in the given array.\n    '''\n    if not nums:\n        return nums\n    i = 0\n    while i < len(nums):\n        j = nums[i] - 1\n        if nums[i] > 0 and nums[i] <= len(nums) and nums[i]!= nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n        else:\n            i += 1\n    missing_nums = []\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            missing_nums.append(i + 1)\n    for i in range(k):\n        current = i + 1\n        if current not in missing_nums:\n            return current\n    return current\ndef find_first_k_missing_positive(nums, k):\n    '''\n    Write a function to find the first K missing positive integers in the given array.\n    '''\n    if not nums:\n        return nums\n    i = 0\n    while i < len(nums):\n        j = nums[i] - 1\n        if nums[i] > 0 and nums[i] <= len(nums) and nums[i]!= nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n        else:\n            i += 1\n    missing_nums = []\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            missing_nums.append(i + 1)\n    for i in range(k):\n        current = i + 1\n        if current not in missing_nums:\n            return current\n    return current\ndef find_first_k_missing_positive(nums, k):\n    '''\n    Write a function to find the first K missing positive integers in the given array.\n    '''\n    if not nums:\n        return nums\n    i = 0\n    while i < len(nums):\n        j = nums[i] - 1\n        if nums[i] > 0 and nums[i] <= len(nums) and nums[i]!= nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n        else:\n            i += 1\n    missing_nums = []\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            missing_nums.append(i + 1)\n    for i in range(k):\n        current = i + 1\n        if current not in missing_nums:\n            return current\n    return current\ndef find_first_k_missing_positive(nums, k):\n    '''\n    Write a function to find the first K missing positive integers in the given array.\n    '''\n    if not nums:\n        return nums\n    i = 0\n    while i < len(nums):\n        j = nums[i] - 1\n        if nums[i] > 0 and nums[i] <= len(nums) and nums[i]!= nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n        else:\n            i += 1\n    missing_nums = []\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            missing_nums.append(i + 1)\n    for i in range(k):\n        current = i + 1\n        if current not in missing_nums:\n            return current\n    return current\ndef find_first_k_missing_positive(nums, k):\n    '''\n    Write a function to find the first K missing positive integers in the given array.\n    '''\n    if not nums:\n        return nums\n    i = 0\n    while i < len(nums):\n        j = nums[i] - 1\n        if nums[i] > 0 and nums[i] <= len(nums) and nums[i]!= nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n        else:\n            i += 1\n    missing_nums = []\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            missing_nums.append(i + 1)\n    for i in range(k):\n        current = i + 1\n        if current not in missing_nums:\n            return current\n    return current\ndef find_first_k_missing_positive(nums, k):\n    '''\n    Write a function to find the first K missing positive integers in the given array.\n    '''\n    if not nums:\n        retur"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = text1.split(' ')\n    result = ''.join(result)\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # strip() method removes all whitespaces from the beginning or the end of the string\n    text1 = text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace(' ','')\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # return''.join(text1.split())\n    return re.sub('\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if not isinstance(text1, str):\n        return -1\n    return text1.replace(\" \", \"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'[\\s+]', '', text1)\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\ndef gain_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives gain amount on a sale if the given amount has gain else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\ndef sale_profit_report(sale_list):\n    '''\n    Write a function that takes a list of sales tuples and returns a dictionary of sales amount and profit amount.\n    '''\n    sale_profit={}\n    for sale in sale_list:\n        sale_profit[sale[0]]=gain_amount(sale[1],sale[2])\n    return sale_profit\ndef loss_sale_report(sale_list):\n    '''\n    Write a function that takes a list of sales tuples and returns a dictionary of sales amount and loss amount.\n    '''\n    sale_loss={}\n    for sale in sale_list:\n        sale_loss[sale[0]]=loss_amount(sale[1],sale[2])\n    return sale_loss\ndef sale_profit_report(sale_list):\n    '''\n    Write a function that takes a list of sales tuples and returns a dictionary of sales amount and profit amount.\n    '''\n    sale_profit={}\n    for sale in sale_list:\n        sale_profit[sale[0]]=gain_amount(sale[1],sale[2])\n    return sale_profit\ndef sale_loss_report(sale_list):\n    '''\n    Write a function that takes a list of sales tuples and returns a dictionary of sales amount and loss amount.\n    '''\n    sale_loss={}\n    for sale in sale_list:\n        sale_loss[sale[0]]=loss_amount(sale[1],sale[2])\n    return sale_loss\ndef profit_list(sale_profit,sale_loss):\n    '''\n    Write a function that takes a dictionary of sale profit amount and a dictionary of sale loss amount and returns a list of tuples of sale amount and profit amount.\n    '''\n    sale_amount_profit_list=[]\n    for sale in sale_profit.keys():\n        if sale in sale_loss.keys():\n            sale_amount_profit_list.append((sale,sale_profit[sale],sale_loss[sale]))\n    return sale_amount_profit_list\ndef loss_list(sale_profit,sale_loss):\n    '''\n    Write a function that takes a dictionary of sale profit amount and a dictionary of sale loss amount and returns a list of tuples of sale amount and loss amount.\n    '''\n    sale_amount_loss_list=[]\n    for sale in sale_loss.keys():\n        if sale in sale_profit.keys():\n            sale_amount_loss_list.append((sale,sale_profit[sale],sale_loss[sale]))\n    return sale_amount_loss_list\ndef report(sale_amount_profit_list,sale_amount_loss_list):\n    '''\n    Write a function that takes a list of tuples of sale amount and profit amount and a list of tuples of sale amount and loss amount and returns a dictionary of lists of sale amounts, profit amounts and loss amounts.\n    '''\n    report_dict={}\n    report_dict[\"sale_amount\"]=[]\n    report_dict[\"profit\"]=[]\n    report_dict[\"loss\"]=[]\n    for sale_amount_profit in sale_amount_profit_list:\n        report_dict[\"sale_amount\"].append(sale_amount_profit[0])\n        report_dict[\"profit\"].append(sale_amount_profit[1])\n    for sale_amount_loss in sale_amount_loss_list:\n        report_dict[\"sale_amount\"].append(sale_amount_loss[0])\n        report_dict[\"loss\"].append(sale_amount_loss[2])\n    return report_dict\ndef main():\n    '''\n    Write a main function that takes a list of tuples of sale amount and sale price and returns a dictionary of lists of sale amounts, profit amounts and loss amounts.\n    '''\n    sale_list=[]\n    try:\n        no_of_sales=int(input(\"Enter the number of sales: \"))\n        for i in range(no_of_sales):\n            sale_amount=int(input(\"Enter the sale amount: \"))\n            sale_price=int(input(\"Enter the sale price: \"))\n            sale_list.append((sale_amount,sale_price))\n    except ValueError as e:\n        print(\"ValueError occured\",e)\n    print(sale_list)\n    sale_profit=sale_profit_report(sale_list)\n    sale_loss=sale_loss_report(sale_list)\n    sale_amount_profit_list=profit_list(sale_profit,sale_loss)\n    sale_amount_loss_list=loss_list(sale_profit,sale_loss)\n    report_dict=report(sale_amount_profit_list,sale_amount_loss_list)\n    print(report_dict)\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    amount = actual_cost - sale_amount\n    if amount < 0:\n        return amount * -1\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost:\n        loss_amount=sale_amount-actual_cost\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = 0\n    if actual_cost < sale_amount:\n        loss = sale_amount - actual_cost\n    return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost:\n        loss_amount = sale_amount-actual_cost\n    else:\n        loss_amount=0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if (sale_amount > actual_cost):\n        amount_lost = sale_amount - actual_cost\n        print(f\"You lost {amount_lost} on the sale.\")\n    else:\n        print(\"You lost nothing on the sale.\")\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(sale_amount < actual_cost):\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss < 0:\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,(n//2 + 1)):\n        if(n % i == 0):\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2, n+1) : \n        if (n % i == 0 and (i % 2 == 0)) : \n            s += i \n    return s \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if(n % i == 0):\n            if(i % 2 == 0):\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n//2 + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0:\n        return -1\n    elif n == 1 or n == 2:\n        return 0\n    else:\n        sum = 0\n        while n > 1:\n            for i in range(2, int(math.sqrt(n))+1):\n                if n%i == 0:\n                    sum += i\n                    if i!= n//i:\n                        sum += n//i\n                    break\n            else:\n                sum += n\n            n -= 1\n        return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while n % 2 == 0:\n        sum += 2\n        n = n // 2\n    return sum\n    \ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(set(filter(lambda x : n % x == 0, range(1, int(n/2) + 1)))) \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # [2, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25]\n    # 4 + 6 + 10 + 15 + 21 = 43\n    if n < 1:\n        return n\n    return sumofFactorsHelper(n, 2)\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i for i in range(1, n) if n % i == 0 and i % 2 == 0])\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if (n % i == 0):\n            if(i % 2 == 0):\n                sum = sum + i\n    return sum\n    \ndef computeGCD(x, y):\n    '''\n    Write a python function to find the gcd of two numbers.\n    '''\n    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1,small+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i\n    return gcd\n    \ndef sumofDivisors(n):\n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum = sum + i\n    return sum\n    \ndef findLCM(x, y):\n    '''\n    Write a python function to find the lcm of two numbers.\n    '''\n    lcm = (x*y)/computeGCD(x, y)\n    return lcm\n    \ndef isPrime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if (n % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    p= re.compile('[A-Za-z]*z[A-Za-z]*')\n    return p.match(text)\n    # return True\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\w*z\\w*', text)\ndef text_match_wordz2(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\w*[z,Z]\\w*', text)\ndef text_match_pattern(text, pattern):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\b[a-zA-Z]*z[a-zA-Z]*\\b\"\n    return bool(re.search(pattern, text, re.IGNORECASE))\nprint(text_match_wordz(\"The quick brown fox jumps over the lazy dog.\"))"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    m = re.search('z', text)\n    if m:\n        return m\n    else:\n        return None\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[\\w]+z\\b')\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]*z[a-zA-Z]*\\b')\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = '\\w*z.\\w*'\n    matches = re.findall(regex, text, re.IGNORECASE)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    r = re.compile(\"[\\w]+[\\w]+z[\\w]+\")\n    matches = r.findall(text)\n    return len(matches)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # pass\n    # result = re.findall(r'\\b\\w*z\\w*\\b', text)\n    # return result\n    return re.findall('\\\\b\\w*z\\\\w*\\\\b', text)\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"month number is \",monthnum2,\"and it has 31 days\")\n    else:\n        print(\"month number is \",monthnum2,\"and it has 30 days\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        print(f\"Month {monthnum2} has 31 days.\")\n    else:\n        print(\"Invalid month number\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1:\n        print(\"31 days\")\n    elif monthnum2==2:\n        print(\"28 or 29 days\")\n    elif monthnum2==3:\n        print(\"31 days\")\n    elif monthnum2==4:\n        print(\"30 days\")\n    elif monthnum2==5:\n        print(\"31 days\")\n    elif monthnum2==6:\n        print(\"30 days\")\n    elif monthnum2==7:\n        print(\"31 days\")\n    elif monthnum2==8:\n        print(\"31 days\")\n    elif monthnum2==9:\n        print(\"30 days\")\n    elif monthnum2==10:\n        print(\"31 days\")\n    elif monthnum2==11:\n        print(\"30 days\")\n    elif monthnum2==12:\n        print(\"31 days\")\n    else:\n        print(\"Wrong month number\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # This month number is stored in monthnum2\n    if monthnum2 <= 0 or monthnum2 >= 13:\n        return False\n    elif monthnum2 == 2:\n        return 31\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif monthnum2 in [4, 6, 9, 11]:\n        return 30\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 1:\n        month_31days = [1,3,5,7,8,10,12]\n    elif monthnum2 % 2 == 0:\n        month_31days = [4,6,9,11]\n    else:\n        month_31days = 'Not a month'\n    return month_31days\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"It has 31 days.\")\n    elif monthnum2 == 2:\n        print(\"It has 28 days.\")\n    else:\n        print(\"It has 30 days.\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb2 = int(monthnum2)\n    if monthnumb2 % 4 == 0 and monthnumb2 % 100!= 0 or monthnumb2 % 400 == 0:\n        if monthnumb2 >= 1 and monthnumb2 <= 12:\n            if monthnumb2 == 1 or monthnumb2 == 3 or monthnumb2 == 5 or monthnumb2 == 7 or monthnumb2 == 8 or monthnumb2 == 10 or monthnumb2 == 12:\n                return print(\"31 Days\")\n            elif monthnumb2 == 4 or monthnumb2 == 6 or monthnumb2 == 9 or monthnumb2 == 11:\n                return print(\"30 Days\")\n    elif monthnumb2 >= 1 and monthnumb2 <= 12:\n        if monthnumb2 == 1 or monthnumb2 == 3 or monthnumb2 == 5 or monthnumb2 == 7 or monthnumb2 == 8 or monthnumb2 == 10 or monthnumb2 == 12:\n            return print(\"31 Days\")\n        elif monthnumb2 == 4 or monthnumb2 == 6 or monthnumb2 == 9 or monthnumb2 == 11:\n            return print(\"30 Days\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        if monthnum2 in (1, 3, 5, 7, 8, 10, 12):\n            print(\"31 days in {}\".format(monthnum2))\n        elif monthnum2 == 2:\n            print(\"28 or 29 days in {}\".format(monthnum2))\n        else:\n            print(\"30 days in {}\".format(monthnum2))\n    else:\n        print(\"Please enter number between 1 and 12\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    import calendar\n    month_days = calendar.monthrange(2000,int(monthnum2))\n    if month_days[1] == 31:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    while monthnum2 <= 0:\n        monthnum2 = int(input(\"Invalid input, please enter month number again: \"))\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if not isinstance(stringlist, list):\n        raise ValueError\n    for s in stringlist:\n        if not isinstance(s, str):\n            raise ValueError\n    newlist = []\n    for s in stringlist:\n        newlist.append(s[::-1])\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for s in stringlist:\n        new_list.append(s[::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    listlen = len(stringlist)\n    reversedlist = []\n    for i in range(listlen):\n        reversedlist.append(stringlist[i][::-1])\n    return reversedlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0, len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    return [i[::-1] for i in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string_list = []\n    for string in stringlist:\n        reverse_string_list.append(string[::-1])\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i:j])<len(lst[i:j+1]):\n                sublist = lst[i:j]\n    return sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum_length = min(map(len, lst))\n    return minimum_length\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort(key = len)\n    return lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = len(lst)\n    min_len = l\n    for i in range(0, l): \n        for j in range(0, l): \n            if (j + lst[i] == lst[j]): \n                if (min_len > j - i + 1): \n                    min_len = j - i + 1\n                    start = i \n                    end = j \n    return min_len \n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst1=sorted(lst)\n    lst2=sorted(lst)\n    lst2.reverse()\n    \n    lst3=[]\n    i=0\n    j=0\n    while i<len(lst1) and j<len(lst2):\n        if lst1[i]<lst2[j]:\n            lst3.append(lst1[i])\n            i+=1\n        elif lst1[i]>lst2[j]:\n            lst3.append(lst2[j])\n            j+=1\n        else:\n            lst3.append(lst1[i])\n            i+=1\n            j+=1\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n            min_lst = l\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #find the minimum length sublist\n    min = len(lst[0])\n    for i in range(0,len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n    return min"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = len(lst)\n    if l == 0:\n        return lst\n    if l == 1:\n        return lst[0]\n    sublist = []\n    for i in range(l):\n        for j in range(i + 1, l + 1):\n            sublist.append(lst[i:j])\n    minlen = len(sublist[0])\n    for i in range(l):\n        if len(sublist[i]) < minlen:\n            minlen = len(sublist[i])\n    for i in range(l):\n        if len(sublist[i]) == minlen:\n            return sublist[i]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_idx = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_idx = i\n    return min_idx\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n            min_lst = lst[i]\n    return min_lst\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(area)\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return(area)\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str(str1)\n    while True:\n        if str1.count('T'):\n            str1 = str1.replace('T', 't')\n        elif str1.count('S'):\n            str1 = str1.replace('S','s')\n        elif str1.count('D'):\n            str1 = str1.replace('D', 'd')\n        elif str1.count('S'):\n            str1 = str1.replace('S','s')\n        elif str1.count('P'):\n            str1 = str1.replace('P', 'p')\n        elif str1.count('Y'):\n            str1 = str1.replace('Y', 'y')\n        elif str1.count('R'):\n            str1 = str1.replace('R', 'r')\n        elif str1.count('W'):\n            str1 = str1.replace('W', 'w')\n        elif str1.count('F'):\n            str1 = str1.replace('F', 'f')\n        elif str1.count('G'):\n            str1 = str1.replace('G', 'g')\n        elif str1.count('C'):\n            str1 = str1.replace('C', 'c')\n        elif str1.count('M'):\n            str1 = str1.replace('M','m')\n        elif str1.count('B'):\n            str1 = str1.replace('B', 'b')\n        elif str1.count('V'):\n            str1 = str1.replace('V', 'v')\n        elif str1.count('L'):\n            str1 = str1.replace('L', 'l')\n        elif str1.count('K'):\n            str1 = str1.replace('K', 'k')\n        elif str1.count('H'):\n            str1 = str1.replace('H', 'h')\n        elif str1.count('J'):\n            str1 = str1.replace('J', 'j')\n        elif str1.count('Z'):\n            str1 = str1.replace('Z', 'z')\n        elif str1.count('Q'):\n            str1 = str1.replace('Q', 'q')\n        elif str1.count('X'):\n            str1 = str1.replace('X', 'x')\n        elif str1.count('C'):\n            str1 = str1.replace('C', 'c')\n        elif str1.count('N'):\n            str1 = str1.replace('N', 'n')\n        elif str1.count('A'):\n            str1 = str1.replace('A', 'a')\n        elif str1.count('O'):\n            str1 = str1.replace('O', 'o')\n        elif str1.count('E'):\n            str1 = str1.replace('E', 'e')\n        elif str1.count('U'):\n            str1 = str1.replace('U', 'u')\n        elif str1.count('R'):\n            str1 = str1.replace('R', 'r')\n        elif str1.count('I'):\n            str1 = str1.replace('I', 'i')\n        elif str1.count('J'):\n            str1 = str1.replace('J', 'j')\n        elif str1.count('Z'):\n            str1 = str1.replace('Z', 'z')\n        elif str1.count('Q'):\n            str1 = str1.replace('Q', 'q')\n        elif str1.count('X'):\n            str1 = str1.replace('X', 'x')\n        elif str1.count('C'):\n            str1 = str1.replace('C', 'c')\n        elif str1.count('N'):\n            str1 = str1.replace('N', 'n')\n        elif str1.count('A'):\n            str1 = str1.replace('A', 'a')\n        elif str1.count('O'):\n            str1 = str1.replace('O', 'o')\n        elif str1.count('E'):\n            str1 = str1.replace('E', 'e')\n        elif str1.count('U'):\n            str1 = str1.replace('U', 'u')\n        elif str1.count('R'):\n            str1 = str1.replace('R', 'r')\n        elif str1.count('I'):\n            str1 = str1.replace('I', 'i')\n        elif str1.count('J'):\n            str1 = str1.replace('J', 'j')\n        elif str1.count('Z'):\n            str1 = str1.replace('Z', 'z')\n        elif str1.count('Q'):\n            str1 = str1.replace('Q', 'q')\n        elif str1.count('X'):\n            str1 = str1.replace('X', 'x')\n        elif str1.count('C'):\n            str1 = str1.replace('C', 'c')\n        elif str1.count('N'):\n            str1 = str1.replace('N', 'n')\n        elif str1.count('A'):\n            str1 = str1.replace('A', 'a')\n        elif str1.count('O'):\n            str1 = str1.replace('O', 'o')\n        elif str1.count('E'):\n            str1 = str1.replace('E', 'e')\n        elif str1.count('U'):\n            str1 = str1.replace('U', 'u')\n        elif str1.count('R'):\n            str1 = str1.replace('R', 'r')\n        elif str1.count('I'):\n            str1 = str1.replace('I', 'i')\n        elif str1.count('J'):\n            str1 = str1.replace('J', 'j')\n        elif str1.count('Z'):\n            str1 = str1.replace('Z', 'z')\n        elif str1.count('Q'):\n            str1 = str1.replace('Q', 'q')\n        elif str1.count('X'):\n            str1 = str1.replace('X', 'x')\n        elif str1.count('C'):\n            str1 = str1.replace('C', 'c')\n        elif str1.count('N'):\n            str1 = str1.replace('N', 'n')\n        elif str1.count('A'):\n            str1 = str1.replace('A', 'a')\n        elif str1.count('O'):\n            str1 = str1.replace('O', 'o')\n        elif str1.count('E'):\n            str1 = str1.replace('E', 'e')\n        elif str1.count('U'):\n            str1 = str1.replace('U', 'u')\n        elif str1.count('R'):\n            str1 = str1.replace('R', 'r')\n        elif str1.count('I'):\n            str1 = str1.replace('I', 'i')\n        elif str1.count('J'):\n            str1 = str1.replace('J', 'j')\n        elif str1.count('Z'):\n            str1 = str1.replace('Z', 'z')\n        elif str1.count('Q'):\n            str1 = str1.replace('Q', 'q')\n        elif str1.count('X'):\n            str1 = str1.replace('X', 'x')\n        elif str1.count('C'):\n            str1 = str1.replace('C', 'c')\n        elif str1.count('N'):\n            str1 = str1.replace('N', 'n')\n        elif str1.count('A'):\n            str1 = str1.replace('A', 'a')\n        elif str1.count('O'):\n            str1 = str1.replace('O', 'o')\n        elif str1.count('E'):\n            str1 = str1.replace('E', "
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str1 = str1.replace(str1[i],'')\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str(str1)\n    str_upper = ''.join([i for i in str1 if i.islower()])\n    str_lower = ''.join([i for i in str1 if i.isupper()])\n    str_upper = str_upper.replace(str_lower, '')\n    return str_upper\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('[A-Z]', '', str1)\n    print(str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = []\n    for word in str1:\n        if word.islower():\n            new_str.append(word)\n    return ''.join(new_str)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    s = str1.lower()\n    res = re.findall(r'[a-z]+', s)\n    return res\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub('[A-Z]', '', str1)\n    return str2\n    # todo\n    \ndef count_char(str1):\n    '''\n    Write a function to count the number of uppercase characters in a given string.\n    '''\n    count = 0\n    for char in str1:\n        if char.isupper():\n            count += 1\n    return count\n    # todo\n    \ndef get_index(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not. \n    If it is a palindrome return the index of first non-repeating character. \n    Otherwise return -1.\n    '''\n    str2 = remove_uppercase(str1)\n    if str1 == str2:\n        return 0\n    count = {}\n    for i in range(len(str2)):\n        if str2[i] in count:\n            count[str2[i]] += 1\n        else:\n            count[str2[i]] = 1\n    for i in range(len(str2)):\n        if count[str2[i]] == 1:\n            return i\n    return -1\n    # todo\n    \ndef convert_base(str1, base):\n    '''\n    Write a function to convert a base-10 number to a different base.\n    '''\n    n = len(str1)\n    if n == 0:\n        return 0\n    i = 0\n    base = base\n    decimal_number = 0\n    while n > 0:\n        decimal_number += int(str1[n-1]) * base ** i\n        i += 1\n        n -= 1\n    return decimal_number\n    # todo\n    \ndef remove_spaces(str1):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    str2 = re.sub(' ', '', str1)\n    return str2\n    # todo\n    \ndef reverse_word(str1):\n    '''\n    Write a function to reverse a string word by word.\n    '''\n    str2 = ''\n    words = str1.split(' ')\n    for word in words:\n        str2 = word +'' + str2\n    return str2\n    # todo\n    \ndef is_unique(str1):\n    '''\n    Write a function to check whether a given string contains any duplicate characters.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for item in count:\n        if count[item] > 1:\n            return False\n    return True\n    # todo\n    \ndef is_permutation(str1, str2):\n    '''\n    Write a function to check whether two given strings are permutations of each other or not.\n    '''\n    count = {}\n    str1 = str1.replace(' ', '').lower()\n    str2 = str2.replace(' ', '').lower()\n    if len(str1)!= len(str2):\n        return False\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str2:\n        if char in count:\n            count[char] -= 1\n        else:\n            return False\n    for item in count:\n        if count[item]!= 0:\n            return False\n    return True\n    # todo\n    \ndef longest_common_prefix(str1, str2):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings.\n    '''\n    max_length = min(len(str1), len(str2))\n    i = 0\n    while i < max_length and str1[i] == str2[i]:\n        i += 1\n    return str1[:i]\n    # todo\n    \ndef rotate_array(nums, k):\n    '''\n    Write a function to rotate an array of n integers k times.\n    '''\n    nums = nums[-k%len(nums):] + nums[:-k%len(nums)]\n    return nums\n    # todo\n    \ndef reverse_sentence(sentence):\n    '''\n    Write a function to reverse a given sentence.\n    '''\n    words = sentence.split(' ')\n    words = words[::-1]\n    return''.join(words)\n    # todo\n    \ndef get_vowel_count(str1):\n    '''\n    Write a function to count the total number of vowels in a given string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in str1:\n        if char in vowels:\n            count += 1\n    return count\n    # todo\n    \ndef get_max_count(str1):\n    '''\n    Write a function to get the maximum occurring character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = 0\n    for item in count:\n        if count[item] > max_count:\n            max_count = count[item]\n            max_char = item\n    return max_char\n    # todo\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether two given strings are anagrams or not.\n    '''\n    count1 = {}\n    count2 = {}\n    for char in str1:\n        if char in count1:\n            count1[char] += 1\n        else:\n            count1[char] = 1\n    for char in str2:\n        if char in count2:\n            count2[char] += 1\n        else:\n            count2[char] = 1\n    for item in count1:\n        if item not in count2 or count1[item]!= count2[item]:\n            return False\n    return True\n    # todo\n    \ndef longest_palindrome(str1):\n    '''\n    Write a function to get the longest palindromic substring in a given string.\n    '''\n    def is_palindrome(str1, low, high):\n        while low < high:\n            if str1[low]!= str1[high]:\n                return False\n            low += 1\n            high -= 1\n        return True\n    low = 0\n    high = len(str1) - 1\n    max_length = 0\n    while low < high:\n        if str1[low] == str1[high]:\n            low += 1\n            high -= 1\n        else:\n            is_palindrome = is_palindrome(str1, low+1, high) or is_palindrome(str1, low, high-1)\n            if is_palindrome:\n                low += 1\n                high -= 1\n            else:\n                low += 1\n                high -= 1\n    return str1[low:high+1]\n    # todo\n    \ndef longest_non_repeat_substring(str1):\n    '''\n    Write a function to get the longest non-repeating character substring in a given string.\n    '''\n    count = {}\n    max_length = 0\n    left = 0\n    right = 0\n    for i in range(len(str1)):\n        if str1[i] not in count:\n            count[str1[i]] = 1\n        else:\n            count[str1[i]] += 1\n        if count[str1[i]] == 1:\n            right += 1\n            max_length = max(max_length, right-left)\n        else:\n            while count[str1[i]] > 1:\n                count[str1[i]] -= 1\n                left += 1\n    return max_length\n    # todo\n    \ndef minimum_window_substring(str1, str2):\n    '''\n    Write a function to find the minimum window in a given string, containing all the characters of another given string.\n    '''\n    count1 = {}\n    count2 = {}\n    start = 0\n    min_length = len(str1) + 1"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = re.compile(r'([A-Z]){2,}')\n    result = regex.sub('',str1)\n    return result\ndef find_uppercase(str1):\n    '''\n    Write a function to find all uppercase substrings of a given string.\n    '''\n    regex = re.compile(r'([A-Z]){2,}')\n    result = regex.findall(str1)\n    return result\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a given string.\n    '''\n    str1 = str1[::-1]\n    return str1\ndef string_rotation(s1,s2):\n    '''\n    Write a function that checks if a string is a rotation of another string.\n    '''\n    if len(s1) == len(s2) and s2 in s1*2:\n        return True\n    else:\n        return False\ndef remove_numbers(str1):\n    '''\n    Write a function that removes all numbers from a given string.\n    '''\n    regex = re.compile(r'\\d+')\n    result = regex.sub('',str1)\n    return result\ndef find_numbers(str1):\n    '''\n    Write a function that finds all the numbers in a given string.\n    '''\n    regex = re.compile(r'\\d+')\n    result = regex.findall(str1)\n    return result\ndef replace_spaces(str1):\n    '''\n    Write a function that replaces all spaces in a string with \"%20\".\n    '''\n    str1 = str1.replace(\" \",\"%20\")\n    return str1\ndef remove_spaces(str1):\n    '''\n    Write a function that removes all spaces from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1\ndef word_counter(str1):\n    '''\n    Write a function that counts the number of times each word appears in the string.\n    '''\n    str1 = str1.split(\" \")\n    dict = {}\n    for i in str1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\ndef string_alternation(s1,s2):\n    '''\n    Write a function that changes a string by alternating upper and lowercase letters.\n    '''\n    str1 = \"\"\n    for i in range(len(s1)):\n        if i % 2 == 0:\n            str1 += s1[i].lower()\n        else:\n            str1 += s1[i].upper()\n    return str1\ndef count_substring(str1,s):\n    '''\n    Write a function that finds the number of times a substring occurs in a given string.\n    '''\n    str1 = str1.split(\" \")\n    count = 0\n    for i in str1:\n        if i.find(s)!= -1:\n            count += 1\n    return count\ndef find_substring(str1,s):\n    '''\n    Write a function that finds the first index of a given substring in a string.\n    '''\n    str1 = str1.split(\" \")\n    for i in str1:\n        if i.find(s)!= -1:\n            return str1.index(i)\ndef count_substring(str1,s):\n    '''\n    Write a function that finds the number of times a substring occurs in a given string.\n    '''\n    str1 = str1.split(\" \")\n    count = 0\n    for i in str1:\n        if i.find(s)!= -1:\n            count += 1\n    return count\ndef remove_string(str1,s):\n    '''\n    Write a function that removes all occurrences of a given substring from a given string.\n    '''\n    str1 = str1.split(\" \")\n    for i in str1:\n        if i.find(s)!= -1:\n            str1.remove(i)\n    str1 = \" \".join(str1)\n    return str1\ndef is_alternate(str1):\n    '''\n    Write a function that determines if a string is an alternate of another string.\n    '''\n    regex = re.compile(r'[A-Z][a-z]*|[a-z][A-Z]*')\n    result = regex.findall(str1)\n    if len(result) > 0:\n        return True\n    else:\n        return False\ndef alternating_case(str1):\n    '''\n    Write a function that changes the case of each character in a given string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str1[i] = str1[i].lower()\n        else:\n            str1[i] = str1[i].upper()\n    str1 = \"\".join(str1)\n    return str1\ndef find_anagrams(str1, s):\n    '''\n    Write a function that finds all anagrams of a string in a given list.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str1[i] = str1[i].lower()\n        else:\n            str1[i] = str1[i].upper()\n    str1 = \"\".join(str1)\n    result = []\n    for i in s:\n        if str1 == \"\".join(sorted(i)):\n            result.append(i)\n    return result\ndef is_palindrome(str1):\n    '''\n    Write a function that checks if a given string is a palindrome.\n    '''\n    regex = re.compile(r'[^a-zA-Z0-9]')\n    str1 = regex.sub('',str1)\n    str1 = str1.lower()\n    str1 = str1[::-1]\n    if str1 == str1.lower():\n        return True\n    else:\n        return False\ndef find_vowels(str1):\n    '''\n    Write a function that finds all vowels in a given string.\n    '''\n    vowels = \"aeiou\"\n    result = []\n    for i in str1:\n        if i in vowels:\n            result.append(i)\n    return result\ndef remove_punctuation(str1):\n    '''\n    Write a function that removes all punctuation characters from a given string.\n    '''\n    regex = re.compile(r'[^a-zA-Z0-9]')\n    result = regex.sub('',str1)\n    return result\ndef check_parenthesis(str1):\n    '''\n    Write a function that checks if the parenthesis in a given string is balanced.\n    '''\n    str1 = str1.split(\" \")\n    open_parenthesis = [\"(\",\"{\",\"[\",\"<\"]\n    close_parenthesis = [\")\",\"}\",\"]\",\">\"]\n    for i in str1:\n        if i in open_parenthesis:\n            open_parenthesis.remove(i)\n        elif i in close_parenthesis:\n            close_parenthesis.remove(i)\n    if open_parenthesis!= [] or close_parenthesis!= []:\n        return False\n    else:\n        return True\ndef find_even_index(str1):\n    '''\n    Write a function that finds the index of the character that has the longest consecutive repetition.\n    '''\n    regex = re.compile(r'\\w+')\n    str1 = regex.findall(str1)\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            return i\ndef delete_chars(str1,s):\n    '''\n    Write a function that removes all occurrences of a given character in a string.\n    '''\n    regex = re.compile(r'[^'+s+']')\n    result = regex.sub('',str1)\n    return result\ndef has_no_e(str1):\n    '''\n    Write "
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str=re.sub('[A-Z]+','',str1)\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = \" \".join(str1.split(\" \"))\n    lst = []\n    for word in str1.split(\" \"):\n        if word == word.upper():\n            lst.append(word.lower())\n        else:\n            lst.append(word)\n    lst = \" \".join(lst)\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(map(lambda x: x[0], lst))\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n    \ndef Reverse(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[::-1] for i in lst]\n    \ndef CtoF(c):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [(9/5)*i+32 for i in c]\n    \ndef CtoF(c):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [(9/5)*i+32 for i in c]\n    \ndef CtoF(c):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [(9/5)*i+32 for i in c]\n    \ndef Multiply(a):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i*5 for i in a]\n    \ndef Multiply(a):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i*5 for i in a]\n    \ndef Multiply(a):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i*5 for i in a]\n    \ndef Multiply(a):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i*5 for i in a]\n    \ndef Reverse(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[::-1] for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sorted(i) for i in lst]\n    \ndef Sort(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\ndef IsIn(element, lst):\n    '''\n    Write a function to check whether an element exists in a list or not. \n    '''\n    return element in lst\ndef Replace(element, list_1, list_2):\n    '''\n    Write a python function to replace all instances of the first element with the second element.\n    '''\n    list_1[:] = [(i if i!= element else list_2.pop(0)) for i in list_1]\ndef Remove(element, list_1):\n    '''\n    Write a python function to remove all instances of an element in a list.\n    '''\n    while element in list_1:\n        list_1.remove(element)\ndef Create_List(n):\n    '''\n    Write a python function to create a list of n number of zero elements.\n    '''\n    return [0]*n\ndef Filter(func, list_1):\n    '''\n    Write a python function to filter out all the elements of a list, which do not satisfy the function. \n    '''\n    return [i for i in list_1 if func(i)]\ndef Filter_More(func, list_1, list_2):\n    '''\n    Write a python function to filter out all the elements of a list, which satisfy one of the functions in a list.\n    '''\n    return [i for i in list_1 if func(i) in list_2]\ndef Map(func, list_1):\n    '''\n    Write a python function to map a function to all the elements of a list.\n    '''\n    return [func(i) for i in list_1]\ndef Map_More(func, list_1, list_2):\n    '''\n    Write a python function to map a function to all the elements of a list, where the function is to be applied only to the elements which satisfies one of the functions in the list.\n    '''\n    return [func(i) for i in list_1 if func(i) in list_2]\ndef Reduce(func, list_1, initial_value=None):\n    '''\n    Write a python function to reduce a list to a single value using a specified function.\n    '''\n    if initial_value == None:\n        return functools.reduce(func, list_1)\n    else:\n        return functools.reduce(func, list_1, initial_value)\ndef Reduce_More(func, list_1, list_2, initial_value=None):\n    '''\n    Write a python function to reduce a list to a single value using a specified function, where the function is to be applied only to the elements which satisfy one of the functions in the list.\n    '''\n    if initial_value == None:\n        return functools.reduce(func, [i for i in list_1 if i in list_2])\n    else:\n        return functools.reduce(func, [i for i in list_1 if i in list_2], initial_value)\ndef Power(n, x):\n    '''\n    Write a python function to raise a number to a power.\n    '''\n    return n**x\ndef Power_More(n, x, list_2):\n    '''\n    Write a python function to raise a number to a power, where the power is to be applied only to the elements which satisfy one of the functions in the list.\n    '''\n    return n**Power_Element(x, list_2)\ndef Power_Element(n, x):\n    '''\n    Write a python function to raise a number to a power, where the power is specified by the user.\n    '''\n    return n**x\ndef Sorted(lst):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    return sorted(lst)\ndef Sorted_Descending(lst):\n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    return sorted(lst, reverse=True)\ndef Sum(lst):\n    '''\n    Write a python function to sum up all the elements of a list.\n    '''\n    return sum(lst)\ndef Sum_More(lst, list_2):\n    '''\n    Write a python function to sum up all the elements of a list, where the sum is to be applied only to the elements which satisfy one of the functions in the list.\n    '''\n    return sum([i for i in lst if i in list_2])\ndef Print(message):\n    '''\n    Write a python function to print a specified message.\n    '''\n    print(message)\ndef Print_More(message, list_2):\n    '''\n    Write a python function to print a specified message, where the message is to be printed only to the elements which satisfy one of the functions in the list.\n    '''\n    print(message, [i for i in list_2 if i])\ndef Print_Element(element):\n    '''\n    Write a python function to print a specified message.\n    '''\n    print(element)\ndef Print_Element_More(element, list_2):\n    '''\n    Write a python function to print a specified message, where the message is to be printed only to the elements which satisfy one of the functions in the list.\n    '''\n    print(element, [i for i in list_2 if i])\ndef Any(list_1):\n    '''\n    Write a python function to check whether any of the elements of the list is true.\n    '''\n    return any(list_1)\ndef Any_More(list_1, list_2):\n    '''\n    Write a python function to check whether any of the elements of the list is true, where the check is to be applied only to the elements which satisfy one of the functions in the list.\n    '''\n    return any([i for i in list_1 if i in list_2])\ndef All(list_1):\n    '''\n    Write a python function to check whether all of the elements of the list is true.\n    '''\n    return all(list_1)\ndef All_More(list_1, list_2):\n    '''\n    Write a python function to check whether all of the elements of the list is true, where the check is to be applied only to the elements which satisfy one of the functions in the list.\n    '''\n    return all([i for i in list_1 if i in list_2])\ndef Odd(number):\n    '''\n    Write a python function to check whether a number is odd or not.\n    '''\n    return number % 2!= 0\ndef Odd_More(number, list_2):\n    '''\n    Write a python function to check whether a number is odd or not, where the check is to be applied only to the numbers which satisfy one of the functions in the list.\n    '''\n    return number % 2!= 0 and Odd_Element(number, list_2)\ndef Odd_Element(number, list_2):\n    '''\n    Write a python function to check whether a number is odd or not, where the check is specified by the user.\n    '''\n    return number % 2!= 0\ndef Even(number):\n    '''\n    Write a python function to check whether a number is even or not.\n    '''\n    return number % 2 == 0\ndef Even_More(number, list_2):\n    '''\n    Write a python function to check whether a number is even or not, where the check is to be applied only to the numbers which satisfy one of the functions in the list.\n    '''\n    return number % 2 == 0 and Even_Element(number, list_2)\ndef Even_Element(number, list_2):\n    '''\n    Write a python function to check whether a number is even or not, where the check is specified by the user.\n    '''\n    return number % 2 == 0\ndef Positive(number):\n    '''\n    Write a python function to check whether a number is positive or not.\n    '''\n    return number > 0\ndef Positive_More(number, list_2):\n    '''\n    Write a python function to check whether a number is positive or not, where the check is to be applied only to the numbers which satisfy one of the functions in the list.\n    '''\n    return number > 0 and Positive_Element(number, list_2)\ndef Positive_Element(number, list_2):\n    '''\n    Write a python function to check whether a number is positive or not, where the check is specified by th"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for lst in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\ndef is_sorted(lst): \n    '''\n    Write a python function to check whether the given list is sorted or not.\n    '''\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) \ndef Add(lst):\n    '''\n    Write a python function to get the sum of all elements in the list.\n    '''\n    return sum(lst)\ndef Map(lst, func):\n    '''\n    Write a python function to apply a function to all elements of the list.\n    '''\n    return [func(i) for i in lst]\ndef Filter(lst, func):\n    '''\n    Write a python function to filter the list using the function provided.\n    '''\n    return [i for i in lst if func(i)]\ndef main():\n    '''\n    Write a python program to test the above functions.\n    '''\n    lst = [1,2,3,4,5]\n    print(\"The first element of all sublists is\", Extract(lst))\n    print(\"Is the list sorted?\", is_sorted(lst))\n    print(\"The sum of all elements in the list is\", Add(lst))\n    print(\"Apply 'func' to all elements of the list:\", Map(lst, lambda x: x**2))\n    print(\"Filter the list to get only even numbers:\", Filter(lst, lambda x: x%2==0))\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n    "
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([s for s in str if s.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for x in str:\n        if x.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(c.isupper() for c in str)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count(str)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    list_combinations = []\n    for i in range(0, len(list1)):\n        list1[i] = [list1[i]]\n        comb = combinations_list(list1[i+1:])\n        for c in comb:\n            list_combinations.append(list1[i] + c)\n    return list_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return chain.from_iterable(combinations(list1, r) for r in range(len(list1) + 1))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    list_combinations = []\n    for i in range(len(list1)):\n        list_combinations.extend(combinations_list(list1[:i] + list1[i + 1:]))\n    return list_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    combo = combinations(list1, 2)\n    for i in list(combo):\n        print(i)\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        lst.append(list1[i])\n        for j in range(i+1, len(list1)):\n            temp = lst[:]\n            temp.append(list1[j])\n            lst.append(temp)\n    return lst\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #Your code goes here\n    \n    import itertools\n    print(list(itertools.combinations(list1, 3)))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return [list1]\n    else:\n        list2 = []\n        for i in range(len(list1)):\n            for j in combinations_list(list1[i+1:]):\n                list2.append([list1[i]] + j)\n        return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combs = []\n    if len(list1) == 0:\n        return combs\n    elif len(list1) == 1:\n        combs.append(list1)\n        return combs\n    else:\n        combs.extend(combinations_list(list1[1:]))\n        new_combs = []\n        for comb in combs:\n            for i in range(0, len(comb) + 1):\n                new_combs.append(comb[:i] + list1[0:1] + comb[i:])\n        combs.extend(new_combs)\n    return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # init a list\n    result_list = []\n    # length of list1\n    length = len(list1)\n    # number of all possible combinations\n    number = 1\n    # set an empty list to contain all possible combinations\n    for i in range(0, length):\n        # if the combination of list1[i] in list1[i+1:] has been done before, it will not be computed again\n        if number > len(result_list):\n            result_list.append([list1[i]])\n        for j in range(0, number):\n            if j < len(result_list):\n                if not list1[i] in result_list[j]:\n                    # append the combination of list1[i] in list1[i+1:]\n                    result_list[j].append(list1[i])\n                    number += 1\n    return result_list\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    dp = arr[:]\n    dp2 = arr[:]\n    for i in range(1,len(arr)):\n        dp[i] = max(arr[i], dp[i-1]*arr[i])\n    for j in range(len(arr)-2, -1, -1):\n        dp2[j] = max(arr[j], dp2[j+1]*arr[j])\n    print(dp)\n    print(dp2)\n    return max(dp)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max_prod = -float('inf')\n    current_prod = 1\n    start = 0\n    end = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return False\n    \n    curr_max = arr[0]\n    max_so_far = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n        if max_so_far < curr_max:\n            max_so_far = curr_max\n        if arr[i] < 0:\n            curr_max = arr[i]\n            max_so_far = curr_max\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    dp = [0]*len(arr)\n    dp[0] = arr[0]\n    max = dp[0]\n    for i in range(1,len(arr)):\n        dp[i] = max(arr[i],arr[i]*dp[i-1])\n        max = max(dp[i],max)\n    return max\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    \n    max_product = float('-inf')\n    min_product = float('inf')\n    global_max_product = 1\n    \n    for num in arr:\n        global_max_product *= num\n        max_product = max(max_product, global_max_product)\n        min_product = min(min_product, num)\n    \n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # O(N)\n    # O(1)\n    if not arr:\n        return\n    \n    max_so_far, min_so_far, max_prod, min_prod = arr[0], arr[0], arr[0], arr[0]\n    for i in range(1, len(arr)):\n        max_so_far = max(arr[i], max_so_far * arr[i])\n        min_so_far = min(arr[i], min_so_far * arr[i])\n        max_prod = max(max_prod, max_so_far)\n        min_prod = min(min_prod, min_so_far)\n    \n    return max_prod, min_prod\n    \n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_prod = arr[0]\n    for i in range(1, n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    min_product = float('inf')\n    res = [arr[0]] * len(arr)\n    for i in range(len(arr)):\n        if res[i - 1] < 0:\n            res[i] = arr[i]\n        else:\n            res[i] = res[i - 1] * arr[i]\n        max_product = max(max_product, res[i])\n        min_product = min(min_product, res[i])\n        if res[i] == 0:\n            return 0\n        if min_product == 0:\n            return max_product\n    max_prod_prod = 1\n    for i in range(len(arr)):\n        max_prod_prod *= arr[i]\n    return max(max_prod_prod, max_product)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = float('-inf')\n    local_max = 1\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here = 1\n    max_so_far = 1\n    min_ending_here = 1\n    min_so_far = 1\n    product_max = 0\n    for num in arr:\n        max_ending_here = max(1, max_ending_here * num)\n        min_ending_here = min(1, min_ending_here * num)\n        product_max = max(product_max, max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n    return product_max\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(x == n for x in dict.values())\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n    # if len(set(dict.values())) == 1:\n    #     print(\"value check is true\")\n    # else:\n    #     print(\"value check is false\")\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict.get(k) == dict[n] for k in dict)\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = dict.values()\n    return len(set(val)) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(f\"All values are {set(dict.values())[0]}.\")\n    else:\n        print(f\"All values are not {set(dict.values())[0]}.\")\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = dict.values()\n    if n == len(val):\n        print(\"all values are same\")\n    else:\n        print(\"all values are not same\")\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        print(\"All values in the dictionary are same\")\n        return\n    \n    # Initialize max_val, min_val with the first value of dict\n    min_val = max_val = dict[n[0]]\n    \n    for i in n[1:]:\n        if dict[i] < min_val:\n            min_val = dict[i]\n        if dict[i] > max_val:\n            max_val = dict[i]\n    \n    if min_val == max_val:\n        print(\"All values in the dictionary are same\")\n    else:\n        print(\"No values in the dictionary are same\")\n        \nn = int(input(\"Enter number of values in dictionary: \"))\ndict = {}\nfor i in range(n):\n    k = input(\"Enter key: \")\n    v = int(input(\"Enter value: \"))\n    dict[k] = v\n    \ncheck_value(dict, n)"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(dict.values()):\n        print(\"All values are same\")\n    else:\n        print(\"All values are not same\")\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i == dict.get(list(dict)[0]):\n            pass\n        else:\n            return n+1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return { key:val for key, val in dict1.items() if val!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v!= \"\"}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict([(k, v) for k, v in dict1.items() if v])\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.pop(\"\", None)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key, value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key, value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    keys_to_drop = []\n    for key in dict1.keys():\n        if len(dict1[key]) == 0:\n            keys_to_drop.append(key)\n    for key in keys_to_drop:\n        dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # curr_prod = 1\n    # max_prod = 1\n    # for i in range(len(arr)):\n    #     curr_prod *= arr[i]\n    #     max_prod = max(max_prod, curr_prod)\n    #     if curr_prod == 0:\n    #         curr_prod = 1\n    # return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = 0\n    max_ending_here = 1\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    import numpy as np\n    arr_len = len(arr)\n    \n    max_prod = 0\n    max_prod_index = 0\n    \n    for i in range(arr_len):\n        for j in range(i+1, arr_len):\n            prod = np.prod(arr[i:j+1])\n            if prod > max_prod:\n                max_prod = prod\n                max_prod_index = i\n                \n    return max_prod, max_prod_index\n    \ndef max_product_memoization(arr, memo = {}):\n    import numpy as np\n    arr_len = len(arr)\n    \n    def recur(i):\n        if i >= arr_len:\n            return 0\n        if i in memo:\n            return memo[i]\n        max_prod = np.prod(arr[i:])\n        for j in range(i+1, arr_len):\n            max_prod = np.prod(arr[i:j+1])\n            if max_prod > max_prod:\n                break\n        memo[i] = max_prod\n        return max_prod\n        \n    max_prod = np.prod(arr)\n    max_prod_index = 0\n    \n    for i in range(arr_len):\n        max_prod = np.prod(arr[i:])\n        if max_prod > max_prod:\n            max_prod = max_prod\n            max_prod_index = i\n            break\n    \n    return max_prod, max_prod_index\n    \ndef max_product_tabulation(arr):\n    import numpy as np\n    arr_len = len(arr)\n    \n    tabulation = np.zeros(arr_len)\n    tabulation[0] = arr[0]\n    \n    for i in range(arr_len):\n        max_prod = tabulation[i]\n        for j in range(i, arr_len):\n            if tabulation[j] > max_prod:\n                max_prod = tabulation[j]\n        tabulation[i] = max_prod * arr[i]\n        \n    return tabulation\n    \nif __name__ == '__main__':\n    arr = [1,2,3,4,5]\n    arr2 = [1,2,3,4,5,6]\n    print('Max product of arr =',max_product(arr))\n    print('Max product of arr =',max_product(arr2))\n    \n    print('Max product of arr (memoization) =',max_product_memoization(arr))\n    print('Max product of arr (memoization) =',max_product_memoization(arr2))\n    \n    print('Max product of arr (tabulation) =',max_product_tabulation(arr))\n    print('Max product of arr (tabulation) =',max_product_tabulation(arr2))\n    \n    '''\n    Sample I/O:\n    Max product of arr = (90, 4)\n    Max product of arr = (90, 4)\n    \n    Max product of arr (memoization) = (90, 4)\n    Max product of arr (memoization) = (90, 4)\n    \n    Max product of arr (tabulation) = [0 5 10 15 20 25 30 45]\n    Max product of arr (tabulation) = [0 6 12 18 24 30 36 42]\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_mult = 1\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            mult = arr[i]*arr[j]\n            if mult > max_mult:\n                max_mult = mult\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    return (arr[0]-1)*(arr[len(arr)-1]-1)\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #Time complexity: O(n^2) | Space complexity: O(n)\n    arr_size = len(arr)\n    if arr_size == 0:\n        return 0\n    if arr_size == 1:\n        return arr[0]\n    max_prod = [0]*arr_size\n    max_prod[0] = arr[0]\n    max_prod[1] = max(arr[0], arr[1])\n    for i in range(2, arr_size):\n        max_prod[i] = max(max_prod[i-1], max_prod[i-2]*arr[i])\n    return max_prod[arr_size-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # arr = [2,3,7,8,9,10]\n    # res = []\n    # for i in range(len(arr)):\n    #     for j in range(i, len(arr)):\n    #         res.append(arr[i] * arr[j])\n    # print(max(res))\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    length = len(arr)\n    max_val = 1\n    for i in range(0,length):\n        for j in range(i+1,length):\n            temp = arr[i] * arr[j]\n            if temp > max_val:\n                max_val = temp\n    print(max_val)\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # DP[i][j] represents the maximum product formed by multiplying numbers of the increasing subsequence from arr[i] to arr[j]\n    DP = [[0 for _ in range(n)] for _ in range(n)]\n    DP[0][0] = 1\n    for i in range(1, n):\n        DP[i][0] = 1\n        for j in range(1, i + 1):\n            if arr[i] > arr[j - 1]:\n                DP[i][j] = max(DP[i][j - 1], arr[i] * DP[i - 1][j - 1])\n            else:\n                DP[i][j] = DP[i - 1][j - 1]\n    # The maximum product formed by multiplying numbers of the increasing subsequence is stored in the last element in the DP table\n    return DP[n - 1][n - 1]\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_prod = arr[0]*arr[1]\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                max_prod = max(max_prod,arr[i]*arr[j])\n        return max_prod\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return ((test_tup[0] + test_tup[1]), test_tup[2])\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result\nprint(add_pairwise((2,4,5,6)))\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            total += test_tup[i]\n        elif i == len(test_tup)-1:\n            total += test_tup[i]\n        else:\n            total += test_tup[i-1] + test_tup[i+1]\n    return total\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    add = []\n    length = len(test_tup)\n    for i in range(0, length):\n        for j in range(i+1, length):\n            add.append((test_tup[i] + test_tup[j]))\n    return add\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(test_tup[i] + test_tup[i+1] for i in range(0, len(test_tup)-1))\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    add = 0\n    for i in range(0,len(test_tup)):\n        if i == 0:\n            add = test_tup[i]\n            next_add = test_tup[i+1]\n            print(str(add)+\" + \"+str(next_add)+\" = \"+str(add+next_add))\n        elif i == len(test_tup)-1:\n            add = add+test_tup[i]\n            next_add = 0\n            print(str(add)+\" + \"+str(next_add)+\" = \"+str(add+next_add))\n        else:\n            add = add+test_tup[i]\n            next_add = test_tup[i+1]\n            print(str(add)+\" + \"+str(next_add)+\" = \"+str(add+next_add))\n    return\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = 0\n    for i in range(len(test_tup) - 1):\n        res += test_tup[i] + test_tup[i + 1]\n    return res\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1;\n    for i in range(0, n): \n        mul = (mul * arr[i]) % n; \n    return mul; \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for x in arr:\n        result = (result * x) % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for ele in arr:\n        res = res * ele % n\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product = product % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum_arr = 1\n    prod_arr = 1\n    for elem in arr:\n        sum_arr = (sum_arr * elem)%n\n    for elem in arr:\n        prod_arr = (prod_arr * elem)%n\n    return (prod_arr - sum_arr)%n\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for x in arr: \n        result = result * x \n    result = result % n \n    return result \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    \n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mult = 1\n    for i in range(0,n):\n        mult = mult*arr[i] % n\n    return mult\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)): \n        if i > 0 and (l[i]!= l[i - 1] + 1): \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(0, len(l) - 1):\n        if l[i] + 1 == l[i + 1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            return 1\n        else:\n            return 0\n    return 1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    # print(l)\n    if len(l) < 2:\n        return False\n    if l[0]+1 == l[1]:\n        return True\n    if l[len(l)-1] - l[0] == len(l)-1:\n        return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)<2:\n        return False\n    else:\n        if all(l[i]==l[i+1]-1 for i in range(len(l)-1)):\n            return True\n        else:\n            return False\n    \n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return l==sorted(l)\n    \ndef check_consecutive(l):\n    return l==sorted(l)\ndef check_consecutive(l):\n    return sorted(l)==l\ndef check_consecutive(l):\n    return sorted(l)==l\ndef check_consecutive(l):\n    return sorted(l)==l\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (max(l)-min(l)) == (len(l)-1) \nprint(check_Consecutive([1,2,3,4,6,7,8,9]))\nprint(check_Consecutive([1,2,4,5,6,7,8,9]))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if(len(l)<=1):\n        return True\n    else:\n        for i in range(len(l)-1):\n            if l[i]+1!= l[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l=sorted(l)\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l) + 1))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    \n    intersect = []\n    i = j = 0\n    \n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            intersect.append(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] > test_list2[j]:\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n    return intersect\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # return set(test_list1).intersection(test_list2)\n    return set(tuple(sorted(set(test_list1) & set(test_list2))))\n    # test_list2 = tuple(test_list2)\n    # test_list1 = tuple(test_list1)\n    # if set(test_list1).issubset(test_list2):\n    #     return tuple(test_list1)\n    # elif set(test_list2).issubset(test_list1):\n    #     return tuple(test_list2)\n    # else:\n    #     return tuple(sorted(set(test_list1) & set(test_list2)))\n    # return set(test_list1).intersection(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set to keep the result\n    result = set()\n    # loop through the first tuple list\n    for i in test_list1:\n        # loop through the second tuple list\n        for j in test_list2:\n            # if i and j are equal\n            if i == j:\n                # add i to the set\n                result.add(i)\n                # break the loop\n                break\n    # return the set\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n    return list(set_list1.intersection(set_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # approach: first convert tuple lists into a set, then convert it into a list to remove duplicates\n    # time: O(n)\n    # space: O(n)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(*test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    inter = set(test_list1) & set(test_list2)\n    return list(inter)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == len(test_list2):\n        result = []\n        for i in range(len(test_list1)):\n            if test_list1[i] == test_list2[i]:\n                result.append(test_list1[i])\n        return result\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_intersection_list = list(set(test_list1) & set(test_list2))\n    return tuple_intersection_list\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    print(str1.replace(ch,newch))\n    \nreplace_char('abab','a','A')\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for chr in str1:\n        if chr == ch:\n            new_str += newch\n        else:\n            new_str += chr\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #Method 1\n    index = 0\n    str2 = ''\n    while index < len(str1):\n        if str1[index] == ch:\n            str2 += newch\n        else:\n            str2 += str1[index]\n        index += 1\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for index in range(len(str1)):\n        if(str1[index] == ch):\n            str1 = str1[0:index] + newch + str1[index+1:]\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    l = list(str1)\n    for i in range(len(l)):\n        if l[i] == ch:\n            l[i] = newch\n    return ''.join(l)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if ch==str1[i]:\n            str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    result = Counter(dict1)\n    result = sorted(result.items(), key = lambda x: x[1], reverse = True)\n    return result\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1],reverse=True))\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # dict1 = Counter(dict1)\n    # dict1 = sorted(dict1,key=dict1.get,reverse=True)\n    dict1 = sorted(dict1.items(),key=lambda kv:kv[1],reverse=True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #print(sorted(dict1.items(),key=lambda i:i[1],reverse=True))\n    print(dict(sorted(dict1.items(),key=lambda i:i[1],reverse=True)))\n    return dict(sorted(dict1.items(),key=lambda i:i[1],reverse=True))\n    #dict(sorted(dict1.items(),key=lambda i:i[1],reverse=True))\n    \n    #res = sorted(dict1.items(), key=lambda i: i[1],reverse=True)\n    #print(res)\n    #return res\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = sorted(dict1.items(), key=lambda item:item[1], reverse=True)\n    return list1\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict1 = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sort_dict1)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1],reverse=True))\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(max(nums)+min(nums))\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - min(nums) - max(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_sum = 0\n    for num in nums:\n        if num > big_sum:\n            big_sum = num\n    return big_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_value = nums[0]\n    min_value = nums[0]\n    for num in nums:\n        if max_value < num:\n            max_value = num\n        if min_value > num:\n            min_value = num\n    return max_value + min_value\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # code here\n    nums = sorted(nums)\n    return (nums[0] + nums[len(nums)-1])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::2])"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = sorted(nums)\n    return nums[-1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = list(nums)\n    largest = 0\n    smallest = 0\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest+smallest\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # code here\n    if string.isupper():\n        return string.lower()\n    else:\n        return string\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #return string.lower()\n    return string.casefold()\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1_l = list(str1)\n    i = 0\n    while i < len(str1_l):\n        if str1_l[i].islower():\n            j = i\n            while j < len(str1_l) and str1_l[j].islower():\n                j += 1\n            str1_l = str1_l[:i] + str1_l[j:]\n        else:\n            i += 1\n    return ''.join(str1_l)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = r\"\\b[a-z]\"\n    for i in re.findall(regex,str1):\n        str1 = re.sub(i, \"\",str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str_to_list = list(str1)\n    for index in range(len(str_to_list)):\n        if index + 1 < len(str_to_list) and str_to_list[index] == str_to_list[index+1]:\n            del str_to_list[index:index+2]\n            index = 0\n    str1 = ''.join(str_to_list)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]','',str1,0,re.IGNORECASE)\n    # return re.sub('[a-z]','',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    ans = str1.replace(\"a\",\"\").replace(\"e\",\"\").replace(\"i\",\"\").replace(\"o\",\"\").replace(\"u\",\"\")\n    return ans\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    remove = re.sub(r'\\b[a-z]\\b', '', str1)\n    return remove\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pat = re.compile(r'\\b[a-z]\\b')\n    result = pat.sub('',str1)\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.upper()\n    print(str1)\n    return re.sub('[a-z]','',str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in range(0,len(str(n))) :\n        return int(str(n)[i])\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10 :\n        n = n / 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10**(len(str(n))-1)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 : \n        return first_Digit(abs(n))\n    else :\n        return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n)\n    \ndef first_Two_Digits(n) :\n    '''\n    Write a python function to find the first two digits of a given number.\n    '''\n    return int(n[0:2])\n    \ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n[-1])\n    \ndef last_Two_Digits(n) :\n    '''\n    Write a python function to find the last two digits of a given number.\n    '''\n    return int(n[-2:])\n    \ndef first_and_last_Digits(n) :\n    '''\n    Write a python function to find the first and last digits of a given number.\n    '''\n    return (first_Digit(n), last_Digit(n))\n    \ndef first_and_last_Two_Digits(n) :\n    '''\n    Write a python function to find the first and last two digits of a given number.\n    '''\n    return (first_Two_Digits(n), last_Two_Digits(n))\n    \ndef sum_of_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)))\n    \ndef sum_of_Two_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:2]))\n    \ndef sum_of_Three_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:3]))\n    \ndef sum_of_Four_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:4]))\n    \ndef sum_of_Five_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:5]))\n    \ndef sum_of_Six_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:6]))\n    \ndef sum_of_Seven_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:7]))\n    \ndef sum_of_Eight_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:8]))\n    \ndef sum_of_Nine_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:9]))\n    \ndef sum_of_All_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)))\n    \ndef sum_of_First_and_Last_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0])) + sum(map(int, str(n)[-1:]))\n    \ndef sum_of_First_Two_and_Last_Two_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:2])) + sum(map(int, str(n)[-2:]))\n    \ndef sum_of_First_Three_and_Last_Three_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:3])) + sum(map(int, str(n)[-3:]))\n    \ndef sum_of_First_Four_and_Last_Four_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:4])) + sum(map(int, str(n)[-4:]))\n    \ndef sum_of_First_Five_and_Last_Five_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:5])) + sum(map(int, str(n)[-5:]))\n    \ndef sum_of_First_Six_and_Last_Six_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:6])) + sum(map(int, str(n)[-6:]))\n    \ndef sum_of_First_Seven_and_Last_Seven_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:7])) + sum(map(int, str(n)[-7:]))\n    \ndef sum_of_First_Eight_and_Last_Eight_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:8])) + sum(map(int, str(n)[-8:]))\n    \ndef sum_of_First_Nine_and_Last_Nine_Digits(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[0:9])) + sum(map(int, str(n)[-9:]))\n    \ndef sum_of_All_Digits_Except_First_and_Last_Two(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[1:-2]))\n    \ndef sum_of_All_Digits_Except_First_and_Last_Three(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[1:-3]))\n    \ndef sum_of_All_Digits_Except_First_and_Last_Four(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[1:-4]))\n    \ndef sum_of_All_Digits_Except_First_and_Last_Five(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[1:-5]))\n    \ndef sum_of_All_Digits_Except_First_and_Last_Six(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[1:-6]))\n    \ndef sum_of_All_Digits_Except_First_and_Last_Seven(n) :\n    '''\n    Write a python function to sum up the digits of a given number.\n    '''\n    return sum(map(int, str(n)[1:-7]))\n    \ndef sum_of_All_Digits_Except_First_and_Last_Eight(n) :\n    '''\n    Write a pytho"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    if len(n) == 1 :\n        return n\n    else :\n        return n[0]\n        \n        \n        \ndef check_Palindrome(n) :\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    n = str(n)\n    if n[0] == n[-1] :\n        return True\n    else :\n        return False\n        \n        \n        \ndef palindrome_number(n) :\n    '''\n    Write a python function to find the nearest palindrome number of a given number.\n    '''\n    n = str(n)\n    # Find the first digit.\n    p = first_Digit(n)\n    # Find the nearest palindrome number of n.\n    if check_Palindrome(n) :\n        return n\n    else :\n        i = p\n        j = p\n        while True :\n            i -= 1\n            j += 1\n            if i < 0 :\n                i = 0\n            if j > 9 :\n                j = 9\n            if check_Palindrome(i*j) :\n                return i*j\n                \n                \n                \ndef replace_char(s, char, index) :\n    '''\n    Write a python function to replace the character at a given index.\n    '''\n    # A list is used to store the string in different format.\n    l = list(s)\n    l[index] = char\n    return \"\".join(l)\n    \n    \n    \ndef replace_Digits(n) :\n    '''\n    Write a python function to replace all the digits in a number.\n    '''\n    # Store the digits in a list.\n    l = [first_Digit(n), second_Digit(n), third_Digit(n), fourth_Digit(n)]\n    # Replace all the digits by their sum.\n    for i in range(4) :\n        if l[i]!= 0 :\n            n = replace_char(n, str(l[i]), i)\n    return n\n        \n        \n        \ndef next_Palindrome(n) :\n    '''\n    Write a python function to find the next palindrome number.\n    '''\n    # Find the nearest palindrome number of n.\n    p = palindrome_number(n)\n    # Replace the digits in the palindrome number.\n    n = replace_Digits(p)\n    # If n is palindrome then return it, else return the next palindrome number.\n    if check_Palindrome(n) :\n        return n\n    else :\n        return next_Palindrome(n)\n        \n        \n        \ndef is_Disarium(n) :\n    '''\n    Write a python function to find whether a given number is disarium or not.\n    '''\n    l = list(str(n))\n    sum1 = 0\n    for i in range(len(l)) :\n        sum1 += int(l[i])**len(l)\n    if sum1 == n :\n        return True\n    else :\n        return False\n        \n        \n        \ndef replace_Digits2(n) :\n    '''\n    Write a python function to replace all the digits in a number.\n    '''\n    # A list is used to store the digits in different format.\n    l = [first_Digit(n), second_Digit(n), third_Digit(n), fourth_Digit(n)]\n    sum1 = 0\n    for i in range(4) :\n        if l[i]!= 0 :\n            # Replace the digits by their sum.\n            l[i] = int(str(l[i]) + str(l[i]))\n            sum1 += l[i]\n    if sum1 == n :\n        # Return the sum if it is equal to original number.\n        return sum1\n    else :\n        # Return the sum if it is not equal to original number.\n        return replace_Digits2(sum1)\n        \n        \n        \ndef next_Disarium(n) :\n    '''\n    Write a python function to find the next disarium number.\n    '''\n    # Find the nearest disarium number of n.\n    d = is_Disarium(n)\n    # If n is disarium then return it, else return the next disarium number.\n    if d :\n        return n\n    else :\n        return next_Disarium(n)\n        \n        \n        \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    n = str(n)\n    sum1 = 0\n    for i in range(len(n)) :\n        sum1 += int(n[i])\n    return sum1\n        \n        \n        \ndef convert_to_Roman(n) :\n    '''\n    Write a python function to convert a number to its roman equivalent.\n    '''\n    l = list(str(n))\n    if len(l) == 1 :\n        if l[0] == \"0\" :\n            return \"\"\n        else :\n            return l[0] + \"I\"\n    if l[0] == \"0\" :\n        return convert_to_Roman(n[1:])\n    if l[0] == \"4\" or l[0] == \"9\" :\n        if l[1] == \"0\" :\n            return l[0] + \"IV\"\n        else :\n            return l[0] + \"IX\"\n    if l[0] == \"5\" or l[0] == \"8\" :\n        return l[0] + convert_to_Roman(l[1:])\n    if l[0] == \"1\" :\n        if l[1] == \"0\" :\n            return \"X\" + convert_to_Roman(l[2:])\n        else :\n            return \"XL\" + convert_to_Roman(l[1:])\n    if l[0] == \"2\" :\n        if l[1] == \"0\" :\n            return \"L\" + convert_to_Roman(l[2:])\n        else :\n            return \"XC\" + convert_to_Roman(l[1:])\n    if l[0] == \"3\" :\n        if l[1] == \"0\" :\n            return \"C\" + convert_to_Roman(l[2:])\n        else :\n            return \"CD\" + convert_to_Roman(l[1:])\n        \n        \n        \ndef convert_to_Arabic(s) :\n    '''\n    Write a python function to convert a string to its equivalent number in a given base.\n    '''\n    sum1 = 0\n    l = list(s)\n    if l[0] == \"-\" :\n        l.pop(0)\n        sum1 = -1\n    for i in range(len(l)) :\n        sum1 += int(l[i]) * (base**(len(l)-i-1))\n    return sum1\n        \n        \n        \ndef create_Roman(n) :\n    '''\n    Write a python function to create a string of roman equivalent of a given number.\n    '''\n    if n >= 4000 :\n        return \"Error!\"\n    if n <= 0 :\n        return \"Error!\"\n    else :\n        return convert_to_Roman(convert_to_Roman(convert_to_Roman(convert_to_Roman(n))))\n        \n        \n        \ndef find_Prime(n) :\n    '''\n    Write a python function to find the prime numbers up to a given number.\n    '''\n    l = list(range(2,n+1))\n    for i in range(len(l)) :\n        # Find the prime numbers less than n and store them in a list.\n        for j in range(2,i) :\n            if l[i] % j == 0 :\n                l[i] = 0\n                break\n    return list(set(l))\n        \n        \n        \ndef sum_Prime(n) :\n    '''\n    Write a python function to find the sum of prime numbers up to a given number.\n    '''\n    l = find_Prime(n)\n    sum1 = 0\n    for i in range(len(l)) :\n        sum1 += l[i]\n    return sum1\n        \n        \n        \ndef find_Odd"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10 \n    \n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10 \n    \n    \ndef count_Digits(n) :  \n    '''\n    Write a python function to find the number of digits of a given number.\n    '''\n    return int(math.log10(n)) + 1 \n    \n    \ndef sum_Digits(n) :  \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    sum = 0\n    while(n!= 0):  \n        sum = sum + int(n % 10)  \n        n = int(n / 10)  \n    return sum  \n    \n    \ndef is_Prime(n) :  \n    '''\n    Write a python function to check whether a given number is Prime or not.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):  \n        if n % i == 0:  \n            return False\n    return True\n    \n    \ndef get_Prime_Factors(n) :  \n    '''\n    Write a python function to find the Prime Factors of a given number.\n    '''\n    li = []  \n    while(n % 2 == 0):  \n        li.append(2)  \n        n = int(n / 2)  \n    for i in range(3, int(math.sqrt(n)) + 1, 2):  \n        while(n % i == 0):  \n            li.append(i)  \n            n = int(n / i)  \n    if(n > 2):  \n        li.append(n)  \n    return li \n    \n    \ndef is_Perfect(n) :  \n    '''\n    Write a python function to check whether a given number is Perfect or not.\n    '''\n    sum = 0\n    for i in range(1, n) :  \n        if(n % i == 0) :  \n            sum += i  \n    return sum == n  \n    \n    \ndef is_Strong(n) :  \n    '''\n    Write a python function to check whether a given number is Strong or not.\n    '''\n    sum = 0\n    temp = n \n    while(temp!= 0) : \n        i = 1\n        f = 1\n        r = int(temp % 10) \n        while(i <= r) : \n            f = f * i \n            i = i + 1\n        sum = sum + f \n        temp = int(temp / 10) \n    return sum == n  \n    \n    \ndef is_Palindrome(n) :  \n    '''\n    Write a python function to check whether a given number is Palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while(n!= 0) : \n        r = n % 10\n        rev = rev * 10 + r \n        n = int(n / 10) \n    return temp == rev  \n    \n    \ndef is_Armstrong(n) :  \n    '''\n    Write a python function to check whether a given number is Armstrong or not.\n    '''\n    sum = 0\n    temp = n\n    while(temp!= 0) :  \n        r = int(temp % 10) \n        sum = sum + (r ** count_Digits(n)) \n        temp = int(temp / 10)  \n    return n == sum \n    \n    \ndef GCD(a, b) :  \n    '''\n    Write a python function to find the GCD of two given numbers.\n    '''\n    if(b == 0) : \n        return a \n    else : \n        return GCD(b, a % b) \n    \n    \ndef LCM(a, b) :  \n    '''\n    Write a python function to find the LCM of two given numbers.\n    '''\n    return int((a * b) / GCD(a, b)) \n    \n    \ndef get_Factors(n) :  \n    '''\n    Write a python function to find the factors of a given number.\n    '''\n    i = 2\n    l = []\n    while(i * i <= n) : \n        if(n % i == 0) : \n            l.append(i)\n            n = int(n / i)\n        else : \n            i = i + 1\n    l.append(n)\n    return l \n    \n    \ndef is_Amicable(n) :  \n    '''\n    Write a python function to check whether a given number is Amicable or not.\n    '''\n    s1 = 0\n    for i in range(1, n) : \n        if(n % i == 0) : \n            s1 = s1 + i \n    if(s1 == n) : \n        s2 = 0\n        for i in range(1, s1) : \n            if(s1 % i == 0) : \n                s2 = s2 + i \n        return s2 == n \n    else : \n        return False\n    \n    \ndef is_Perfect_Square(n) :  \n    '''\n    Write a python function to check whether a given number is Perfect Square or not.\n    '''\n    i = 1\n    while(i * i <= n) : \n        if(i * i == n) : \n            return True\n        i = i + 1\n    return False \n    \n    \ndef is_Fibonacci(n) :  \n    '''\n    Write a python function to check whether a given number is Fibonacci or not.\n    '''\n    return is_Perfect_Square(5 * n * n + 4) or is_Perfect_Square(5 * n * n - 4) \n    \n    \ndef is_Sum_Perfect(n) :  \n    '''\n    Write a python function to check whether a given number is Sum-Perfect or not.\n    '''\n    sum = 0\n    while(n!= 0) : \n        r = n % 10\n        sum = sum + r \n        n = int(n / 10) \n    return is_Perfect(sum) \n    \n    \ndef is_Sum_Fibonacci(n) :  \n    '''\n    Write a python function to check whether a given number is Sum-Fibonacci or not.\n    '''\n    sum = 0\n    while(n!= 0) : \n        r = n % 10\n        sum = sum + r \n        n = int(n / 10) \n    if(is_Fibonacci(sum)) : \n        return True\n    else : \n        return False\n    \n    \ndef get_Pallindrome_Factors(n) :  \n    '''\n    Write a python function to find the Pallindrome factors of a given number.\n    '''\n    l = get_Factors(n) \n    l1 = [] \n    for i in l : \n        if(is_Pallindrome(i)) : \n            l1.append(i) \n    return l1 \n    \n    \ndef is_Disarium(n) :  \n    '''\n    Write a python function to check whether a given number is Disarium or not.\n    '''\n    sum = 0\n    temp = n\n    while(temp!= 0) :  \n        r = temp % 10\n        sum = sum + r ** count_Digits(n) \n        temp = int(temp / 10) \n    return n == sum \n    \n    \ndef get_Disarium_Factors(n) :  \n    '''\n    Write a python function to find the Disarium factors of a given number.\n    '''\n    l = get_Factors(n) \n    l1 = [] \n    for i in l : \n        if(is_Disarium(i)) : \n            l1.append(i) \n    return l1 \n    \n    \ndef get_Strong_Num(n) :  \n    '''\n    Write a python function to find the Strong Number from a given number.\n    '''\n    sum = 0\n    temp = n\n    while(temp!= 0) : \n        r = temp % 10\n        sum = sum + get_Prime_Factors(r)\n        temp = int(temp / 10"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n = n // 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 9 :\n        return n % 10\n    else :\n        return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        return first_Digit(abs(n))\n    else :\n        return n % 10\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = [] \n    for i in list:\n        if i%2 == 1:\n            odd.append(i)\n    return odd\n    \ndef remove_punctuation(text):\n    '''\n    Write a python function which takes a text and only returns the text without the punctuation.\n    '''\n    return text.translate(str.maketrans('', '', string.punctuation))\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = [] \n    for i in list: \n        if i % 2 == 1: \n            result.append(i) \n    return result \n    \ndef Sort(list): \n    '''\n    Write a python function to sort a list of integers.\n    '''\n    return sorted(list)\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    listodd = []\n    for x in list:\n        if x % 2 == 0:\n            continue\n        else:\n            listodd.append(x)\n    return listodd\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for num in list:\n        if num % 2 == 1:\n            odd.append(num)\n    return odd\n    \ndef Split_Sum(list):\n    '''\n    Write a python function which takes a list of integers and returns the sum of the odd numbers.\n    '''\n    odd = []\n    for num in list:\n        if num % 2 == 1:\n            odd.append(num)\n    sum_odd = sum(odd)\n    return sum_odd\n    \ndef Split_Count(list):\n    '''\n    Write a python function which takes a list of integers and returns the number of odd numbers.\n    '''\n    odd = []\n    for num in list:\n        if num % 2 == 1:\n            odd.append(num)\n    return len(odd)\n    \ndef Split_Max(list):\n    '''\n    Write a python function which takes a list of integers and returns the maximum value.\n    '''\n    max_num = 0\n    for num in list:\n        if num > max_num:\n            max_num = num\n    return max_num\n    \ndef Split_Min(list):\n    '''\n    Write a python function which takes a list of integers and returns the minimum value.\n    '''\n    min_num = list[0]\n    for num in list:\n        if num < min_num:\n            min_num = num\n    return min_num\n    \ndef Split_Even_Sum(list):\n    '''\n    Write a python function which takes a list of integers and returns the sum of the even numbers.\n    '''\n    even = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n    sum_even = sum(even)\n    return sum_even\n    \ndef Split_Even_Count(list):\n    '''\n    Write a python function which takes a list of integers and returns the number of even numbers.\n    '''\n    even = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n    return len(even)\n    \ndef Split_Even_Max(list):\n    '''\n    Write a python function which takes a list of integers and returns the maximum value.\n    '''\n    even = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n    max_num = 0\n    for num in even:\n        if num > max_num:\n            max_num = num\n    return max_num\n    \ndef Split_Even_Min(list):\n    '''\n    Write a python function which takes a list of integers and returns the minimum value.\n    '''\n    even = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n    min_num = even[0]\n    for num in even:\n        if num < min_num:\n            min_num = num\n    return min_num\n    \ndef Split_3Sum(list):\n    '''\n    Write a python function which takes a list of integers and returns a list of lists containing the triplets that sum to 0.\n    '''\n    list_sum = []\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if list[i] + list[j] < 0 and i!= j:\n                for k in range(len(list)):\n                    if list[i] + list[j] + list[k] == 0 and [list[i], list[j], list[k]] not in list_sum:\n                        list_sum.append([list[i], list[j], list[k]])\n    return list_sum\n    \ndef Split_3Sum_Count(list):\n    '''\n    Write a python function which takes a list of integers and returns the number of triplets that sum to 0.\n    '''\n    list_sum = []\n    count = 0\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if list[i] + list[j] < 0 and i!= j:\n                for k in range(len(list)):\n                    if list[i] + list[j] + list[k] == 0 and [list[i], list[j], list[k]] not in list_sum:\n                        list_sum.append([list[i], list[j], list[k]])\n                        count += 1\n    return count\n    \ndef Split_3Sum_Max(list):\n    '''\n    Write a python function which takes a list of integers and returns the maximum value.\n    '''\n    max_sum = 0\n    for num in list:\n        if num > max_sum:\n            max_sum = num\n    return max_sum\n    \ndef Split_3Sum_Min(list):\n    '''\n    Write a python function which takes a list of integers and returns the minimum value.\n    '''\n    min_sum = list[0]\n    for num in list:\n        if num < min_sum:\n            min_sum = num\n    return min_sum\n    \ndef Split_4Sum(list):\n    '''\n    Write a python function which takes a list of integers and returns a list of lists containing the quadruplets that sum to 0.\n    '''\n    list_sum = []\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if list[i] + list[j] < 0 and i!= j:\n                for k in range(len(list)):\n                    if list[i] + list[j] + list[k] < 0 and i!= k:\n                        for m in range(len(list)):\n                            if list[i] + list[j] + list[k] + list[m] == 0 and [list[i], list[j], list[k], list[m]] not in list_sum:\n                                list_sum.append([list[i], list[j], list[k], list[m]])\n    return list_sum\n    \ndef Split_4Sum_Count(list):\n    '''\n    Write a python function which takes a list of integers and returns the number of quadruplets that sum to 0.\n    '''\n    list_sum = []\n    count = 0\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if list[i] + list[j] < 0 and i!= j:\n                for k in range(len(list)):\n                    if list[i] + list[j] + list[k] < 0 and i!= k:\n                        for m in range(len(list)):\n                            if list[i] + list[j] + list[k] + list[m] == 0 and [list[i], list[j], list[k], list[m]] not in list_sum:\n                                list_sum.append([list[i], list[j], list[k], list[m]])\n                                count += 1\n    return count\n    \ndef Split_4Sum_Max(list):\n    '''\n    Write a python function which takes a list of integers and returns the maximum value.\n    '''\n    max_sum = 0\n    for num in list:\n        if num > max_sum:\n            max_sum = num\n    return max_sum\n    \ndef Split_4Sum_Min(list):\n    '''\n    Write a python function which takes a list of integers and returns the minimum value.\n    '''\n    min_sum = list[0]\n    for num in list:\n        if num < min_sum:\n            min_sum = num\n    return min_sum\n    \ndef Split_Count_Unique(list):\n    '''\n    Write a python function which takes a list of integers and returns the count of the number of unique values in the list.\n    '''\n    count = 0\n    for num in list:\n        if num not in list[:num]:\n            count += 1\n    return count\n    \ndef Split_Replace_Value(list, value):\n    '''\n    Write a python function which takes a list of integers and a value and returns a list with the value replaced with the next largest value not present in the list.\n    '''\n    new_list = []\n    if value not in list:\n        new_list = list\n    else:\n        while value in list:\n            list.remove(value)\n        max_value = max(list)\n        new_list "
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0] \n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    listOdds = []\n    for i in list:\n        if i % 2!= 0:\n            listOdds.append(i)\n    return listOdds\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1=[]\n    for i in list:\n        if i%2!=0:\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) :\n        return (n**3 + n**2 + n + 1)\n    def sum_of_natural(n) :\n        return n*(n+1)/2\n    return sum_of_cubes(n) - sum_of_natural(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube_sum(n) :\n        cube_sum = 0\n        for i in range(n+1) :\n            cube_sum = cube_sum + (i*i*i)\n        return cube_sum\n    #print(cube_sum(n))\n    difference = cube_sum(n) - (n*(n+1)*(n+2)/6)\n    print(\"difference : \",difference)\n    return difference\ndifference(n)"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n + 1) :\n        sum_cubes += i ** 3\n        sum_numbers += i\n    return sum_cubes - sum_numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sumofcubes(n) :\n        sum_of_numbers = 0\n        for i in range(n+1) :\n            sum_of_numbers = sum_of_numbers + i**3\n        return sum_of_numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    num = n\n    total = 0\n    for i in range(1, num+1):\n        total += i**3\n    return total\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = sum(i**3 for i in range(1,n+1))\n    b = sum(i for i in range(1,n+1))\n    return (a-b)**2\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # n = int(input())\n    sum_of_n = 0\n    for i in range(1, n+1) :\n        sum_of_n += i**3\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) :\n        return n*(n+1)*(n+2)*(n+3)/24\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (sum_of_cubes(n) - sum_of_n(n)) \n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_numbers = n*(n+1)*(2*n+1)/6\n    sum_cubes = n*(n+1)*(2*n+1)*(n+2)*(n+1)/36\n    return abs(sum_cubes-sum_numbers)\n    \n    \ndef sum_of_digits(n) : \n    '''\n    Write a python function to return the sum of the digits of a given number n.\n    '''\n    sum = 0\n    while n : \n        sum = sum+n%10\n        n = n//10\n    return sum\n    \n    \ndef kaprekarNumbers(p, q) :\n    '''\n    Write a python function to find and return the list of all distinct kaprekar numbers in the given range (p, q).\n    \n    Kaprekar Numbers are the numbers having the form:\n    4 ^k (8 ^n + 7 ^n)\n    \n    where, \n    k = 1, 2, 3...\n    n = 0, 1, 2, 3,...\n    '''\n    kaprekar_numbers = []\n    for i in range(p, q+1) : \n        temp = str(i**4)\n        left = int(temp[:len(temp)//2])\n        right = int(temp[len(temp)//2:])\n        if left + right == i : \n            kaprekar_numbers.append(i)\n    return kaprekar_numbers\n    \n    \ndef check_armstrong_number(n) :\n    '''\n    Write a python function to check if the given number n is an Armstrong number or not.\n    \n    An Armstrong number is an n-digit number that is equal to the sum of the nth powers of its digits.\n    '''\n    sum = 0\n    temp = n\n    while temp : \n        sum = sum + pow(temp%10,3)\n        temp = temp//10\n    if n == sum : \n        return True\n    return False\n    \n    \ndef sum_of_proper_divisors(n) : \n    '''\n    Write a python function to return the sum of the proper divisors of a given number n.\n    A proper divisor is a positive integer that divides n with no remainder.\n    '''\n    sum = 0\n    for i in range(1,n) : \n        if n%i == 0 : \n            sum = sum+i\n    return sum\n    \n    \ndef sum_of_divisors(n) : \n    '''\n    Write a python function to return the sum of all divisors of a given number n.\n    '''\n    sum = 0\n    for i in range(1,n) : \n        if n%i == 0 : \n            sum = sum+i\n    return sum\n    \n    \ndef amicable_numbers(n) : \n    '''\n    Write a python function to return a list of all amicable numbers in range 1 to n.\n    Amicable numbers are two different numbers such that their sum of proper divisors is equal to the other number.\n    '''\n    amicable_numbers = []\n    for i in range(1,n+1) : \n        sum_i = sum_of_proper_divisors(i)\n        sum_sum_i = sum_of_proper_divisors(sum_i)\n        if sum_sum_i == i and i!= sum_i : \n            amicable_numbers.append(i)\n    return amicable_numbers\n    \n    \ndef list_of_stars(n) : \n    '''\n    Write a python function to generate and print a list of length n, containing n different asterisks (\u2018*\u2019).\n    '''\n    list_of_stars = ['*']*n\n    print(list_of_stars)\n    \n    \ndef list_of_stars_v2(n) : \n    '''\n    Write a python function to generate and print a list of length n, containing n different asterisks (\u2018*\u2019).\n    '''\n    list_of_stars = []\n    for i in range(n) : \n        list_of_stars.append('*')\n    print(list_of_stars)\n    \n    \ndef list_of_stars_v3(n) : \n    '''\n    Write a python function to generate and print a list of length n, containing n different asterisks (\u2018*\u2019).\n    '''\n    list_of_stars = ['*' for i in range(n)]\n    print(list_of_stars)\n    \n    \ndef list_of_stars_v4(n) : \n    '''\n    Write a python function to generate and print a list of length n, containing n different asterisks (\u2018*\u2019).\n    '''\n    list_of_stars = []\n    for i in range(n) : \n        list_of_stars.append('*')\n    print(list_of_stars)\n    \n    \ndef sum_of_digits_in_base_k(n, k) : \n    '''\n    Write a python function to find and return the sum of the digits of a given number n in the given base k.\n    '''\n    sum = 0\n    while n : \n        sum = sum+n%k\n        n = n//k\n    return sum\n    \n    \ndef sum_of_digits_in_base_k_v2(n, k) : \n    '''\n    Write a python function to find and return the sum of the digits of a given number n in the given base k.\n    '''\n    sum = 0\n    while n : \n        sum = sum+n%10\n        n = n//10\n    return sum\n    \n    \ndef digit_sum_in_base_k(n, k) : \n    '''\n    Write a python function to find and return the sum of digits of a given number n in the given base k.\n    '''\n    sum = 0\n    while n : \n        sum = sum+n%k\n        n = n//k\n    return sum\n    \n    \ndef is_palindrome(n) : \n    '''\n    Write a python function to check if a number is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while n : \n        rev = rev*10 + n%10\n        n = n//10\n    if temp == rev : \n        return True\n    return False\n    \n    \ndef is_palindrome_v2(n) : \n    '''\n    Write a python function to check if a number is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while n : \n        rev = (rev*10) + n%10\n        n = n//10\n    if temp == rev : \n        return True\n    return False\n    \n    \ndef nearest_palindrome(n) : \n    '''\n    Write a python function to check and return the nearest palindrome greater than n.\n    '''\n    if is_palindrome(n) : \n        return n\n    temp = n\n    while True : \n        if is_palindrome(temp) : \n            return temp\n        else : \n            temp = temp+1\n            \ndef nearest_palindrome_v2(n) : \n    '''\n    Write a python function to check and return the nearest palindrome greater than n.\n    '''\n    if is_palindrome_v2(n) : \n        return n\n    temp = n\n    while True : \n        if is_palindrome_v2(temp) : \n            return temp\n        else : \n            temp = temp+1\n            \ndef kaprekar_numbers_v2(p, q) : \n    '''\n    Write a python function to find and return the list of all distinct kaprekar numbers in the given range (p, q).\n    \n    Kaprekar Numbers are the numbers having the form:\n    4 ^k (8 ^n + 7 ^n)\n    \n    where, \n    k = 1, 2, 3...\n    n = 0, 1, 2, 3,...\n    '''\n    kaprekar_numbers = []"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            count+=1 if ((A[i] ^ A[j]) & 1) else 0\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) & 1 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N): \n        for j in range(i + 1, N): \n            if (A[i] ^ A[j]) & 1: \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N <= 1 : \n        return 0\n    else : \n        A.sort()\n        count = 0\n        for i in range(0,N-1) :\n            if A[i] ^ A[i+1] % 2!= 0 :\n                count += 1\n        return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N==1 : \n        return 0\n    else : \n        return (A[0]^A[1]) + find_Odd_Pair(A[2:],N-1)\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # First Method\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if((A[i]^A[j]) & 1): \n                count = count + 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    x = []\n    for i in range(N) :\n        x.append(i)\n    print(x)\n    for i in range(N) :\n        for j in range(i+1,N) :\n            a = x[i]^x[j]\n            if(a%2==1) : \n                print(\"{} ^ {} = {}\".format(x[i],x[j],a))\n            else : \n                continue\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if((A[i] ^ A[j]) & 1) : \n                count = count + 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = N - 1\n    i = 0\n    j = 1\n    count = 0\n    while (i <= n): \n        if (A[i] ^ A[j] == 1): \n            count = count + 1\n        i = i + 1\n        j = j + 2\n        if (j > n): \n            j = j - n  \n    return count \n    \ndef find_Odd_Pair_v2(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N - 1) : \n        for j in range(i + 1, N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count = count + 1\n    return count \n    \ndef find_Odd_Pair_v3(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N - 1) : \n        for j in range(i + 1, N) : \n            if ((A[i] ^ A[j]) & 1): \n                count = count + 1\n    return count \n    "
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # return string.swapcase()\n    return string.swapcase() if case == 'upper' else string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    lower = string.lower()\n    upper = string.upper()\n    return upper if lower == upper else lower\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = []\n    for char in string:\n        if char.isupper():\n            new_string.append(char.lower())\n        else:\n            new_string.append(char.upper())\n    return ''.join(new_string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result_string = ''\n    for letter in string:\n        if letter.isupper():\n            result_string += letter.lower()\n        else:\n            result_string += letter.upper()\n    return result_string\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join([i.lower() if i.isupper() else i.upper() for i in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # return string.swapcase()\n    return ''.join([i.upper() if i.islower() else i.lower() for i in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join([c.swapcase() for c in string])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(d1)-int(d2)) for d1, d2 in zip(str(n1),str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    a = n1\n    b = n2\n    sum = 0\n    while a > 0 or b > 0:\n        sum += abs(a%10 - b%10)\n        a = a//10\n        b = b//10\n    return sum\n    \nprint(digit_distance_nums(1234, 2345))\nprint(digit_distance_nums(1234, 1234))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    for i in str(abs(n1)):\n        s += abs(int(i) - int(str(n2)[i]))\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(n1[i]) - int(n2[i])) for i in range(0, len(n1))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_len = len(str(n1))\n    n2_len = len(str(n2))\n    n1 = str(n1)\n    n2 = str(n2)\n    diff = 0\n    for i in range(n1_len):\n        diff += abs(int(n1[i])-int(n2[i]))\n    if n1_len == n2_len:\n        return diff\n    elif n1_len > n2_len:\n        diff += n1_len - n2_len\n    elif n1_len < n2_len:\n        diff += n2_len - n1_len\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # TODO: Define the function here\n    def diff(n1, n2):\n        sum = 0\n        for i in str(abs(n1 - n2)):\n            sum += int(i)\n        return sum\n    return diff(n1, n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_distance = 0\n    while n1 > 0 or n2 > 0:\n        d1 = n1 % 10\n        d2 = n2 % 10\n        n1 = n1 // 10\n        n2 = n2 // 10\n        digit_distance += abs(d1 - d2)\n    return digit_distance\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(d1)-int(d2)) for d1, d2 in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    digit_diff = 0\n    for i in range(len(n1_str)):\n        digit_diff += abs(int(n1_str[i]) - int(n2_str[i]))\n    return digit_diff\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    temp_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # var max_sum = 0;\n    max_sum = a[0]\n    sum = a[0]\n    for i in range(0, size-1):\n        sum = sum + a[i+1]\n        if sum < 0:\n            sum = 0\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # size = len(a)\n    max_sum = 0\n    curr_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n            start_index = i + 1\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            end_index = i + 1\n    return max_sum, start_index, end_index\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) == 0:\n        return 0\n    max_sum = 0\n    max_sum_arr = []\n    for i in range(0, len(a)):\n        max_sum = max_sum + a[i]\n        if max_sum < 0:\n            max_sum = 0\n            continue\n        if i == 0:\n            max_sum_arr.append(max_sum)\n            continue\n        if max_sum_arr[i-1] < max_sum:\n            max_sum_arr.append(max_sum)\n            continue\n        max_sum_arr.append(max_sum_arr[i-1])\n    print(max_sum_arr)\n    return max(max_sum_arr)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_sum_start = 0\n    max_sum_end = 0\n    sub_sum = 0\n    for start in range(0, size):\n        sub_sum = 0\n        for end in range(start, size):\n            sub_sum += a[end]\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n                max_sum_start = start\n                max_sum_end = end\n    return (max_sum, max_sum_start, max_sum_end)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = max_so_far = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = a[0]\n    max_sum = a[0]\n    for i in range(1, size):\n        max_sum = max(a[i], max_sum + a[i])\n        max_sub = max(max_sum, max_sub)\n    return max_sub\n    \n    \n    \ndef can_reach_end(a):\n    '''\n    Given a non-empty array of non-negative integers. The array represents \n    the histogram of a water-bottle. Write a function to determine if you can \n    reach the bottom of the bottle using the water. You can only move directly \n    up, not down. The water-bottle has infinite volume, so you can fill it in \n    any place you want.\n    '''\n    n = len(a)\n    max_reachable = a[0]\n    for i in range(1, n):\n        max_reachable = max(max_reachable, i + a[i])\n        if max_reachable >= n - 1:\n            return True\n    return False\n    \ndef find_duplicate(a, size):\n    '''\n    Write a function that takes in an array of integers and returns the \n    duplicate with a list of its duplicates.\n    '''\n    n = len(a)\n    i = 0\n    dup = []\n    while i < n:\n        j = a[i] - 1\n        if a[j]!= a[i]:\n            a[i] = a[j]\n            i += 1\n        else:\n            dup.append(a[i])\n            i += 1\n    return dup\n    \ndef is_unique_and_sorted(a, size):\n    '''\n    Given an array of integers, determine whether the array is a sorted \n    in non-decreasing order.\n    '''\n    for i in range(size - 1):\n        if a[i] > a[i + 1]:\n            return False\n    return True\n    \ndef find_minimum_equal_difference(a):\n    '''\n    Given a list of positive numbers, determine the minimum length of a \n    contiguous sublist such that the absolute difference between any two \n    elements of this sublist is the same.\n    '''\n    n = len(a)\n    min_diff = abs(a[0] - a[1])\n    for i in range(1, n - 1):\n        diff = abs(a[i] - a[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n    \n    \ndef find_triplets(arr, n):\n    '''\n    Given an array, find all the triplets of indices that sum to 0.\n    '''\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == 0:\n                    temp = [arr[i], arr[j], arr[k]]\n                    temp.sort()\n                    if not res:\n                        res.append(temp)\n                    else:\n                        if res[-1]!= temp:\n                            res.append(temp)\n    return res\n    \n    \ndef count_subarrays_greater_than_average(a, size):\n    '''\n    Given an array of integers, count the number of subarrays that have a \n    greater average than the average of the entire array.\n    '''\n    sum = 0\n    count = 0\n    for i in range(size):\n        sum += a[i]\n    avg = sum / size\n    for i in range(size):\n        if a[i] > avg:\n            count += 1\n    return count\n    \n    \ndef find_the_missing_letter(s, t):\n    '''\n    Given two strings s and t, return the missing letter in string t.\n    '''\n    res = ''\n    for i in range(len(s)):\n        if ord(s[i]) - ord(t[i])!= 32:\n            res = t[i]\n            break\n    return chr(ord(res) + 32)\n    \ndef find_median_sorted_arrays(a, b):\n    '''\n    Given two sorted arrays, find the median of the two arrays.\n    '''\n    n = len(a) + len(b)\n    if n % 2 == 0:\n        return (a[int(n / 2) - 1] + b[int(n / 2) - 1]) / 2\n    else:\n        return a[int(n / 2)]\n        \ndef count_triplets(arr, n):\n    '''\n    Given an array of integers and a number x, count the number of triplets \n    in the array that sum to exactly x.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == 0:\n                    count += 1\n    return count\n    \n    \ndef count_substrings(a, n):\n    '''\n    Given a string, return the number of substrings that contain exactly two \n    distinct characters.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            flag = True\n            for k in range(i, j):\n                if a[k] == a[j]:\n                    flag = False\n                    break\n            if flag == True:\n                count += 1\n    return count\n    \n    \ndef find_substrings(a, n):\n    '''\n    Given a string, return all possible substrings that are formed by \n    removing exactly one character.\n    '''\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            temp = a[i:j]\n            if len(temp) >= 2:\n                if temp not in res:\n                    res.append(temp)\n    return res\n    \n    \ndef reverse_substrings(a, n):\n    '''\n    Given a string, return the substrings of the string that are in \n    reverse order.\n    '''\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            temp = a[i:j][::-1]\n            if temp not in res:\n                res.append(temp)\n    return res\n    \ndef unique_number_of_substrings(a, n):\n    '''\n    Given a string, count the number of substrings of that string that do not \n    contain a repeating character.\n    '''\n    flag = False\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if a[i:j] == a[i:j][::-1]:\n                flag = True\n        if flag == False:\n            count += 1\n    return count\n    \ndef change_characters(a, n):\n    '''\n    Given a string, find the longest substrings in the string that can be \n    formed by changing the first character to another character.\n    '''\n    sub = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if a[i:j] == a[i:j][::-1]:\n                sub.append(a[i:j])\n    return sub\n    \ndef longest_palindromic_substrings(a, n):\n    '''\n    Given a string, find the longest palindromic substring.\n    '''\n    res = ''\n    for i in range(n):\n        for j in range(i + 1, n):\n            temp = a[i:j]\n            if temp == temp[::-1]:\n                if len(temp) > len(res):\n                    res = temp\n    return res\n    \ndef check_permutation(s1, s2):\n    '''\n    Given two strings, check if they are permutations of each other.\n    '''\n    s1 = s1.replace(\" \", \"\")\n    s2 = s2.replace("
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return tuple(sorted(set(test_tup1) | set(test_tup2)))\n    else:\n        return tuple(sorted(set(test_tup2) | set(test_tup1)))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1).union(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(set(test_tup2))))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = list(set(test_tup1).union(set(test_tup2)))\n    union_tup.sort()\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup_union = ()\n    tup_union = sorted(set().union(test_tup1, test_tup2))\n    return tup_union\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(test_tup1) + list(test_tup2)\n    union_list = sorted(list(set(union_list)))\n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result_tup = ()\n    for element in test_tup1:\n        if not(element in result_tup):\n            result_tup += (element,)\n    for element in test_tup2:\n        if not(element in result_tup):\n            result_tup += (element,)\n    result_tup = sorted(result_tup)\n    return result_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    lst_union = []\n    lst_union = test_tup1 + test_tup2\n    lst_union.sort()\n    return tuple(lst_union)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    mx = 0\n    for i in lst:\n        if len(i) > mx:\n            mx = len(i)\n    return mx\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    temp = []\n    max_l = 0\n    if len(lst) == 0:\n        return 0\n    for i in lst:\n        temp.append(len(i))\n        if len(temp) == len(lst):\n            max_l = max(temp)\n    return max_l\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst)):\n            if lst[i] == lst[j]:\n                count += 1\n        if max_length < count:\n            max_length = count\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # your code goes here\n    max_len = 0\n    for i in range(0,len(lst)):\n        j = i\n        cnt = 0\n        while j < len(lst):\n            if lst[i] == lst[j]:\n                cnt += 1\n            j += 1\n        if max_len < cnt:\n            max_len = cnt\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return len(max(lst, key=len))\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lengths = []\n    for i in range(len(lst)):\n        lengths.append(len(lst[i]))\n    return max(lengths)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) <= 1:\n        return 0\n    else:\n        lst.sort()\n        max_length = 0\n        sublist = []\n        for i in range(len(lst)):\n            if i == len(lst)-1:\n                break\n            elif lst[i+1] - lst[i] == 1:\n                sublist.append(lst[i])\n                if len(sublist) > max_length:\n                    max_length = len(sublist)\n            else:\n                sublist = []\n        return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n    \ndef Search_Max(lst):\n    '''\n    Write a python function to search for the index of the longest sublist.\n    '''\n    l = Find_Max_Length(lst)\n    index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) == l:\n            index = i\n    return index\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    if len(lst)==1:\n        return 1\n    max_len=0\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst)-i):\n            if lst[i+j]!=None:\n                if len(lst[i+j])>max_len:\n                    max_len=len(lst[i+j])\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len=0\n    for i in lst:\n        if len(i)>max_len:\n            max_len=len(i)\n    return max_len\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #Sample function calls\n    # print(extract_values(\"It's raining cats and dogs\"))\n    # print(extract_values(\"Do you know the muffin recipe?\"))\n    # print(extract_values(\"What kind of bread do you like?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Would you like to try our new ice cream recipe?\"))\n    # print(extract_values(\"Why do you ask if I can dance?\"))\n    # print(extract_values(\"Would you like to try our new coffee recipe?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Why do you ask if I can dance?\"))\n    # print(extract_values(\"What's the muffin recipe?\"))\n    # print(extract_values(\"What's the muffin recipe?\"))\n    # print(extract_values(\"What is the muffin recipe?\"))\n    # print(extract_values(\"What is the muffin recipe?\"))\n    # print(extract_values(\"Why do you ask if I can dance?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Would you like to try our new ice cream recipe?\"))\n    # print(extract_values(\"Would you like to try our new ice cream recipe?\"))\n    # print(extract_values(\"Why do you ask if I can dance?\"))\n    # print(extract_values(\"What's the muffin recipe?\"))\n    # print(extract_values(\"What's the muffin recipe?\"))\n    # print(extract_values(\"What is the muffin recipe?\"))\n    # print(extract_values(\"What is the muffin recipe?\"))\n    # print(extract_values(\"Why do you ask if I can dance?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Would you like to try our new ice cream recipe?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Would you like to try our new ice cream recipe?\"))\n    # print(extract_values(\"Would you like to try our new ice cream recipe?\"))\n    # print(extract_values(\"Why do you ask if I can dance?\"))\n    # print(extract_values(\"What's the muffin recipe?\"))\n    # print(extract_values(\"What's the muffin recipe?\"))\n    # print(extract_values(\"What is the muffin recipe?\"))\n    # print(extract_values(\"What is the muffin recipe?\"))\n    # print(extract_values(\"Why do you ask if I can dance?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))\n    # print(extract_values(\"Are you going to the movies tonight?\"))"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall('\".*?\"', text)\n    return result\n    \n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #text = '\"The dormouse is asleep\" said the mouse'\n    #return re.findall('\"([^\"]*)\"', text)\n    return re.findall(r'\"([^\"]*)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = \"Tom's a great guy. He's a great guy. He's a great guy. He's a great guy. He's a great guy. He's a great guy. He's a great guy. He's a great guy. He's a great guy.\"\n    #result = re.findall(r'\"[A-Za-z0-9 ]+\"', text)\n    result = re.findall(r'[A-Za-z0-9 ]+\"', text)\n    print(result)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"(.*?)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Write your code here\n    return re.findall('\"([^\"]*)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    import re\n    \n    values = re.findall('\"([^\"]*)\"', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search(r'\"(.*?)\"', text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.strip()\n    a = re.findall(r'\"([\\d\\s\\.\\-\\:\\*\\@\\#\\,\\%\\$]*)\"',text)\n    return a\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    arr.sort()\n    count=0\n    for i in range(len(arr)-1):\n        \n        for j in range(i+1,len(arr)):\n            \n            if arr[i]!=arr[j]:\n                count+=1\n                \n    return count\n    \n    \n    "
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #arr = list(set(arr))\n    arr = sorted(arr)\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if(arr[i]!=arr[j]):\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # making a copy of the array\n    arr = arr[::] \n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if(arr[i]!= arr[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # A Pair is made up of a pair of elements such that the first element is smaller than the second element.\n    # A pair is said to be a subset of the list of integers if the first element of a pair is less than or equal to the second element of that pair.\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    sum = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \ndef is_vowel(letter):\n    '''\n    Write a python function which returns true if the passed letter is a vowel.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return letter in vowels\ndef encrypt(text,shift):\n    '''\n    Write a python function which returns an encrypted version of the passed plain text using a Caesar cipher.\n    '''\n    encrypted_message = []\n    for letter in text:\n        if is_vowel(letter):\n            encrypted_message.append(letter)\n        else:\n            encrypted_message.append(shift_letter(letter,shift))\n    return \"\".join(encrypted_message)\ndef shift_letter(letter, shift):\n    '''\n    Write a python function which returns the letter shifted n places to the right.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    letter_index = alphabet.index(letter)\n    new_letter_index = (letter_index+shift)%26\n    new_letter = alphabet[new_letter_index]\n    return new_letter\ndef decrypt(text,shift):\n    '''\n    Write a python function which returns a decrypted version of the passed cipher text using a Caesar cipher.\n    '''\n    decrypted_message = []\n    for letter in text:\n        if is_vowel(letter):\n            decrypted_message.append(letter)\n        else:\n            decrypted_message.append(shift_letter(letter,26-shift))\n    return \"\".join(decrypted_message)\ndef is_list_permutation(lst1,lst2):\n    '''\n    Write a python function which returns True if the lists are permutations of one another (ie they contain the same elements in the same quantity, but not necessarily in the same order).\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    s1 = set(lst1)\n    s2 = set(lst2)\n    if s1 == s2:\n        return True\n    return False\ndef is_anagram(str1,str2):\n    '''\n    Write a python function to check if two strings are anagrams of each other.\n    '''\n    return sorted(str1) == sorted(str2)\ndef is_palindrome(word):\n    '''\n    Write a python function to check if a word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0] == word[-1]:\n        return is_palindrome(word[1:-1])\n    return False\ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef factorial(n):\n    '''\n    Write a python function to calculate n!\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return factorial(n-1)*n\ndef reverse(s):\n    '''\n    Write a python function which reverses the characters in a string.\n    '''\n    return s[::-1]\ndef is_member(collection,item):\n    '''\n    Write a python function which checks if an item is a member of a collection.\n    '''\n    return item in collection\ndef main():\n    print(split('welcome'))\n    print(is_vowel('u'))\n    print(encrypt('welcome',2))\n    print(decrypt('wlecome',2))\n    print(is_list_permutation([1,2,3], [3,2,1]))\n    print(is_anagram('stop','pots'))\n    print(is_anagram('pots','stop'))\n    print(is_palindrome('mom'))\n    print(is_palindrome('sassas'))\n    print(fibonacci(6))\n    print(factorial(5))\n    print(reverse('welcome'))\n    print(is_member([1,2,3],2))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        # Extract the last digit using % operator\n        return (n % 10 + sum_digits(n//10))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n if n < 10 else sum_digits(n//10) + n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n    \ndef get_digit(n, d):\n    '''\n    Write a function that takes in an integer and returns the d-th digit of the integer.\n    '''\n    return n // (10 ** (d - 1)) % 10\n    \ndef find_largest_palindrome(n):\n    '''\n    Write a function that takes in a positive integer and returns the largest palindrome that is less than or equal to the integer.\n    '''\n    palindrome = 0\n    while n > 0:\n        left_digit = get_digit(n, n.bit_length() - 1)\n        n -= left_digit * (10 ** (n.bit_length() - 1))\n        right_digit = get_digit(n, 1)\n        n -= right_digit * (10 ** (1 - n.bit_length()))\n        palindrome = palindrome * 10 + left_digit\n        palindrome = palindrome * 10 + right_digit\n    return palindrome\n    \ndef is_prime(n):\n    '''\n    Write a function that takes in a positive integer and returns True if the integer is prime and False otherwise.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef get_nth_prime(n):\n    '''\n    Write a function that takes in a positive integer and returns the n-th prime number.\n    '''\n    index = 0\n    while True:\n        if is_prime(index):\n            if index == n:\n                return index\n        index += 1\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(int(n/10))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(c) for c in str(n)])\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        return list1[0] < list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = 0\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            flag = 1\n            break\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for index in range(0,len(list1)-1):\n        if list1[index] > list1[index+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1 = [1, 3, 2, 4, 5]\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if i == len(list1) - 1:\n            return True\n        if list1[i] >= list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif len(list1) == 1:\n        return True\n    else:\n        i = 0\n        while i < len(list1):\n            if list1[i] > list1[i + 1]:\n                return False\n            i += 1\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if(i+1 < len(list1) and list1[i]>list1[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    #Iterate through the range of length, and append empty dict() to the list.\n    #Return the list\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length == 0:\n        return []\n    else:\n        return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    dict_list = []\n    for i in range(length):\n        dict_list.append({})\n    return dict_list\n    \ndef dict_comparison(d1, d2):\n    '''\n    Write a function to compare two dictionaries. \n    Return True if they have the same keys and values, otherwise False.\n    '''\n    if d1.keys()!= d2.keys():\n        return False\n    for key in d1.keys():\n        if d1[key]!= d2[key]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    new_list = []\n    for i in range(length):\n        new_dict = {}\n        new_list.append(new_dict)\n    return new_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_sorted = []\n    for l in list1:\n        sorted_list = sorted(l)\n        sublist_sorted.append(sorted_list)\n    return sublist_sorted\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(f\"Unsorted:\\n{list1}\")\n    for sublist in list1:\n        sublist.sort()\n    print(f\"Sorted:\\n{list1}\")\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort each sublist of strings\n    for sublist in list1:\n        sublist.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # base case\n    if list1 == []:\n        return []\n    # recursive step\n    if isinstance(list1[0],list):\n        return sort_sublists(list1[1:])+sorted(list1[0])\n    # base case\n    if isinstance(list1[0],str):\n        return sorted(list1[0])\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # add code here\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        new_list.append(sorted(sublist))\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sublist) for sublist in list1]\n    \n    \ndef sort_sublists_in_place(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists\n    in place.\n    '''\n    for sublist in list1:\n        sublist.sort()\n        \n        \ndef sort_tuple_list(tuples):\n    '''\n    Write a function to sort a list of tuples in ascending order by their\n    second element.\n    '''\n    return sorted(tuples)\n    \n    \ndef sort_tuple_list_in_place(tuples):\n    '''\n    Write a function to sort a list of tuples in ascending order by their\n    second element in place.\n    '''\n    tuples.sort(key=lambda x: x[1])\n    \n    \ndef sort_tuple_list_by_second_and_third(tuples):\n    '''\n    Write a function to sort a list of tuples in ascending order by their\n    second and third elements, in that order.\n    '''\n    return sorted(tuples, key=lambda x: (x[1], x[2]))\n    \n    \ndef sort_tuple_list_in_place_by_second_and_third(tuples):\n    '''\n    Write a function to sort a list of tuples in ascending order by their\n    second and third elements, in that order, in place.\n    '''\n    tuples.sort(key=lambda x: (x[1], x[2]))\n    \n    \ndef sort_nested_tuples(tuples):\n    '''\n    Write a function to sort a list of nested tuples by their second element\n    in ascending order.\n    '''\n    return sorted(tuples, key=lambda x: x[0])\n    \n    \ndef sort_nested_tuples_in_place(tuples):\n    '''\n    Write a function to sort a list of nested tuples by their second element\n    in ascending order in place.\n    '''\n    tuples.sort(key=lambda x: x[0])\n    \n    \ndef sort_nested_tuples_by_second(tuples):\n    '''\n    Write a function to sort a list of nested tuples by their second element\n    in ascending order.\n    '''\n    return sorted(tuples, key=lambda x: x[1])\n    \n    \ndef sort_nested_tuples_by_second_in_place(tuples):\n    '''\n    Write a function to sort a list of nested tuples by their second element\n    in ascending order in place.\n    '''\n    tuples.sort(key=lambda x: x[1])\n    \n    \ndef sort_nested_tuples_by_third(tuples):\n    '''\n    Write a function to sort a list of nested tuples by their third element\n    in ascending order.\n    '''\n    return sorted(tuples, key=lambda x: x[2])\n    \n    \ndef sort_nested_tuples_by_third_in_place(tuples):\n    '''\n    Write a function to sort a list of nested tuples by their third element\n    in ascending order in place.\n    '''\n    tuples.sort(key=lambda x: x[2])\n    \n    \ndef sort_strings_in_place(list1):\n    '''\n    Write a function to sort a list of strings in place.\n    '''\n    list1.sort()\n    \n    \ndef sort_strings_in_place_case_insensitive(list1):\n    '''\n    Write a function to sort a list of strings in place case insensitively.\n    '''\n    list1.sort(key=lambda x: x.lower())\n    \n    \ndef sort_strings_in_place_numeric(list1):\n    '''\n    Write a function to sort a list of strings in place in numerical order.\n    '''\n    list1.sort(key=lambda x: int(x) if x.isdigit() else x)\n    \n    \ndef sort_strings_in_place_with_key(list1):\n    '''\n    Write a function to sort a list of strings in place using the given key.\n    '''\n    list1.sort(key=lambda x: x[:5])\n    \n    \ndef sort_strings_in_place_with_key_with_default(list1):\n    '''\n    Write a function to sort a list of strings in place using the given key.\n    '''\n    list1.sort(key=lambda x: x[:5], reverse=True)\n    \n    \ndef sort_strings_in_place_with_key_lambda(list1):\n    '''\n    Write a function to sort a list of strings in place using the given key.\n    '''\n    list1.sort(key=lambda x: x[:5])\n    \n    \ndef sort_strings_in_place_numeric_with_default(list1):\n    '''\n    Write a function to sort a list of strings in place in numerical order.\n    '''\n    list1.sort(key=lambda x: int(x) if x.isdigit() else x)\n    \n    \ndef sort_strings_in_place_case_insensitive_with_default(list1):\n    '''\n    Write a function to sort a list of strings in place case insensitively.\n    '''\n    list1.sort(key=lambda x: x.lower() if x.lower() else x)\n    \n    \ndef sort_strings_with_default(list1):\n    '''\n    Write a function to sort a list of strings by converting them to lower case\n    first, then by default first 5 characters.\n    '''\n    return sorted(list1, key=lambda x: (x.lower(), x[:5]))\n    \n    \ndef sort_strings_with_default_in_place(list1):\n    '''\n    Write a function to sort a list of strings by converting them to lower case\n    first, then by default first 5 characters, in place.\n    '''\n    list1.sort(key=lambda x: (x.lower(), x[:5]))\n    \n    \ndef sort_strings_with_default_and_key(list1):\n    '''\n    Write a function to sort a list of strings by converting them to lower case\n    first, then by default first 5 characters, then by the given key.\n    '''\n    return sorted(list1, key=lambda x: (x.lower(), x[:5]))\n    \n    \ndef sort_strings_with_default_and_key_in_place(list1):\n    '''\n    Write a function to sort a list of strings by converting them to lower case\n    first, then by default first 5 characters, then by the given key, in place.\n    '''\n    list1.sort(key=lambda x: (x.lower(), x[:5]))\n    \n    \ndef sort_strings_with_default_and_key_lambda(list1):\n    '''\n    Write a function to sort a list of strings by converting them to lower case\n    first, then by default first 5 characters, then by the given key, in place.\n    '''\n    list1.sort(key=lambda x: (x.lower(), x[:5]))\n    \n    \ndef sort_strings_with_default_and_key_lambda_in_place(list1):\n    '''\n    Write a function to sort a list of strings by converting them to lower case\n    first, then by default first 5 characters, then by the given key, in place.\n    '''\n    list1.sort(key=lambda x: (x.lower(), x[:5]))\n    \n    \ndef sort_strings_with_key(list1):\n    '''\n    Write a function to sort a list of strings by converting them to lower case\n    first, then by the given key.\n    '''\n    return sorted(list1, key=lambda x: (x.lower(), x))\n    \n    \ndef sort_strings_with_key_in_place(list1):\n    '''\n    Write a function to sort a list of strings by converting them to lower case\n    first, then by the given key, in place.\n    '''\n    list1.sort(key=lambda x: (x.lower(), x))\n    \n    \ndef sor"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = set()\n    for num in nums:\n        unique.add(num)\n    print(unique)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = list(set(nums))\n    return unique\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_set = set()\n    for num in nums:\n        num_set.add(num)\n    return num_set\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    d = {}\n    for i in nums:\n        if i not in d:\n            d[i] = 0\n    print(d)\n    return list(d.keys())\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return [list(set(nums[i])) for i in range(len(nums))]\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in nums:\n        for j in nums:\n            if i==j:\n                nums.remove(i)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(dict.fromkeys(nums))\n    \n    \ndef palindromes(s):\n    '''\n    Write a Python function to check whether a given string is palindrome or not.\n    '''\n    return s[::-1] == s\n    \n    \ndef reverse_number(n):\n    '''\n    Write a Python function to get the reverse of a number (Integer) without using any in-built functions.\n    '''\n    reverse = 0\n    while n>0:\n        digit = n%10\n        reverse = reverse*10 + digit\n        n = n//10\n    return reverse\n    \n    \ndef is_prime(n):\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef prime_factors(n):\n    '''\n    Write a Python function to get the prime factors of a number.\n    '''\n    res = []\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            res.append(i)\n    return res\n    \n    \ndef smallest_multiple(n):\n    '''\n    Write a Python function to find the smallest number which is divisible by all numbers from 1 to n.\n    '''\n    ans = 1\n    for i in range(2, n+1):\n        ans *= i\n    for i in range(2, ans):\n        if ans % i!= 0:\n            return ans\n    return ans\n    \n    \ndef remove_duplicates(nums):\n    '''\n    Write a Python function to remove duplicates from a given list of numbers.\n    '''\n    nums = list(dict.fromkeys(nums))\n    return nums\n    \n    \ndef missing_element(nums):\n    '''\n    Write a Python function to find the missing element in a given list of numbers.\n    '''\n    return sum(nums) - sum(set(nums))\n    \n    \ndef rotate_matrix(matrix):\n    '''\n    Write a Python function to rotate a given matrix by 90 degrees in counter-clockwise direction.\n    '''\n    row_size = len(matrix)\n    col_size = len(matrix[0])\n    for i in range(row_size):\n        for j in range(i, col_size):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    for i in range(row_size):\n        matrix[i] = matrix[i][::-1]\n    return matrix\n    \n    \ndef three_multiple_sum(nums):\n    '''\n    Write a Python function to get the sum of the three highest multiples of a given number.\n    '''\n    return sum(sorted(set(i*nums[0] for i in nums))[-3:])\n    \n    \ndef print_matrix(matrix):\n    '''\n    Write a Python function to print a given matrix in an aesthetically pleasing manner.\n    '''\n    for row in matrix:\n        print(*row)\n    \n    \ndef matrix_addition(matrix_a, matrix_b):\n    '''\n    Write a Python function to add two given matrices and return the sum.\n    '''\n    if len(matrix_a)!= len(matrix_b) or len(matrix_a[0])!= len(matrix_b[0]):\n        return None\n    return [[matrix_a[i][j] + matrix_b[i][j] for j in range(len(matrix_a[0]))] for i in range(len(matrix_a))]\n    \n    \ndef print_matrix_in_spiral_form(matrix):\n    '''\n    Write a Python function to print a given matrix in spiral form.\n    '''\n    row = 0\n    col = 0\n    max_row = len(matrix) - 1\n    max_col = len(matrix[0]) - 1\n    while(row <= max_row and col <= max_col):\n        # first row\n        if col >= row and col <= max_col:\n            for i in range(col, max_col+1):\n                print(matrix[row][i])\n            row += 1\n        # last column\n        if row <= max_row and row <= max_col:\n            for i in range(row, max_row+1):\n                print(matrix[i][max_col])\n            max_col -= 1\n        # last row\n        if col <= max_col and col >= row:\n            for i in range(max_col, col, -1):\n                print(matrix[max_row][i])\n            max_row -= 1\n        # first column\n        if row <= max_row and row >= col:\n            for i in range(max_row, row, -1):\n                print(matrix[i][col])\n            col += 1\n    return matrix\n    \n    \ndef print_matrix_in_spiral_form_2(matrix):\n    '''\n    Write a Python function to print a given matrix in spiral form using only traversal methods.\n    '''\n    matrix.insert(0, [0]*len(matrix[0]))\n    matrix.append([0]*len(matrix[0]))\n    for i in range(len(matrix)):\n        matrix[i].insert(0, 0)\n        matrix[i].append(0)\n    row = 0\n    col = 0\n    max_row = len(matrix) - 1\n    max_col = len(matrix[0]) - 1\n    while(row <= max_row and col <= max_col):\n        # first row\n        if col >= row and col <= max_col:\n            for i in range(col, max_col+1):\n                print(matrix[row][i])\n            row += 1\n        # last column\n        if row <= max_row and row <= max_col:\n            for i in range(row, max_row+1):\n                print(matrix[i][max_col])\n            max_col -= 1\n        # last row\n        if col <= max_col and col >= row:\n            for i in range(max_col, col, -1):\n                print(matrix[max_row][i])\n            max_row -= 1\n        # first column\n        if row <= max_row and row >= col:\n            for i in range(max_row, row, -1):\n                print(matrix[i][col])\n            col += 1\n    return matrix\n    \n    \ndef print_matrix_in_spiral_form_3(matrix):\n    '''\n    Write a Python function to print a given matrix in spiral form using only traversal methods.\n    '''\n    # left, right, top, bottom\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    direction_i = 0\n    direction = directions[direction_i]\n    row = 0\n    col = 0\n    max_row = len(matrix) - 1\n    max_col = len(matrix[0]) - 1\n    while(row <= max_row and col <= max_col):\n        # first row\n        if col >= row and col <= max_col:\n            for i in range(col, max_col+1):\n                print(matrix[row][i])\n            row += 1\n        # last column\n        if row <= max_row and row <= max_col:\n            for i in range(row, max_row+1):\n                print(matrix[i][max_col])\n            max_col -= 1\n        # last row\n        if col <= max_col and col >= row:\n            for i in range(max_col, col, -1):\n                print(matrix[max_row][i])\n            max_row -= 1\n        # first column\n        if row <= max_row and row >= col:\n            for i in range(max_row, row, -1):\n                print(matrix[i][col])\n            col += 1\n        direction_i = (direction_i + 1) % 4"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1,2,1,2,3,4]\n    list_data = set(list_data)\n    result = 1\n    for item in list_data:\n        result *= item\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique = set(list_data)\n    product = 1\n    for num in unique:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = set(list_data)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_num = set(list_data)\n    product = 1\n    for num in unique_num:\n        product = product*num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for data in list_data:\n        if data not in unique_list:\n            unique_list.append(data)\n    product_of_unique = 1\n    for data in unique_list:\n        product_of_unique *= data\n    return product_of_unique\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for element in list_data:\n        if product == 1:\n            product = element\n        else:\n            product = product * element\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for item in list_data:\n        result = result * item\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(operator.mul, list(set(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_of_unique_numbers = set(list_data)\n    list_of_unique_numbers = list(list_of_unique_numbers)\n    product_of_unique_numbers = 1\n    for i in list_of_unique_numbers:\n        product_of_unique_numbers = product_of_unique_numbers * i\n    print(product_of_unique_numbers)\n    return product_of_unique_numbers\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data)==0:\n        return -1\n    else:\n        product = 1\n        for i in list_data:\n            product *= i\n        return product\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r * r + 2 * math.pi * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = (2 * pi * r**2) + (2 * pi * r * h)\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi*(r**2) + (2*math.pi*r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    #Write your code here\n    return (2*pi*r*h)+(2*pi*r**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.1415\n    sa = 2*pi*r*h\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    a = pi*r*r\n    b = 2*pi*r*h\n    s_area = a+b\n    return(s_area)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    return (2*pi*r*h) + (2*pi*r**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.1415926535\n    return 2*pi*r*h+2*pi*r*r\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    SA = 2*pi*r*(r+h)\n    return SA\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.142*r*(r+h)\n    return area\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                continue\n            else:\n                return False\n        return True\n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len("
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #function to check whether a list is sublist of another or not.\n    for i in range(0,len(A)):\n        for j in range(0,len(B)):\n            if A[i] == B[j]:\n                flag = 1\n            else:\n                flag = 0\n                break\n        if flag == 1:\n            return 1\n    return 0\ndef is_Permutation(A,B):\n    '''\n    Write a python function to check whether a list is permutation of another or not.\n    '''\n    #function to check whether a list is permutation of another or not.\n    if(len(A)!=len(B)):\n        return 0\n    else:\n        for i in range(0,len(A)):\n            if A[i] in B:\n                count = 1\n            else:\n                count = 0\n                break\n        if count == 1:\n            return 1\n        else:\n            return 0\ndef is_subString(A,B):\n    '''\n    Write a python function to check whether a string is substring of another or not.\n    '''\n    #function to check whether a string is substring of another or not.\n    if len(A)>len(B):\n        return 0\n    else:\n        for i in range(0,len(B)):\n            for j in range(0,len(A)):\n                if B[i] == A[j]:\n                    flag = 1\n                else:\n                    flag = 0\n                    break\n            if flag == 1:\n                return 1\n        return 0\ndef convert_decimal(A):\n    '''\n    Write a python function to convert a decimal number to binary number.\n    '''\n    #function to convert a decimal number to binary number.\n    count = 0\n    while A>0:\n        rem = A%2\n        A = A//2\n        count+=1\n    return count\ndef check_validity(A):\n    '''\n    Write a python function to check whether a number is valid or not.\n    '''\n    #function to check whether a number is valid or not.\n    while True:\n        if A.isdigit():\n            return 1\n        else:\n            return 0\ndef rotate_list(A):\n    '''\n    Write a python function to rotate a list.\n    '''\n    #function to rotate a list.\n    length = len(A)\n    temp = A[0]\n    for i in range(1,length):\n        A[i-1] = A[i]\n    A[length-1] = temp\ndef reverse_list(A):\n    '''\n    Write a python function to reverse a list.\n    '''\n    #function to reverse a list.\n    length = len(A)\n    for i in range(length//2):\n        temp = A[i]\n        A[i] = A[length-1-i]\n        A[length-1-i] = temp\ndef binary_to_decimal(A):\n    '''\n    Write a python function to convert a binary number to decimal number.\n    '''\n    #function to convert a binary number to decimal number.\n    count = len(A)\n    result = 0\n    for i in range(count):\n        result = result + int(A[i])*(2**(count-i-1))\n    return result\ndef merge_list(A,B):\n    '''\n    Write a python function to merge two sorted list A and B.\n    '''\n    #function to merge two sorted list A and B.\n    C = []\n    for i in range(len(A)):\n        C.append(A[i])\n    for i in range(len(B)):\n        C.append(B[i])\n    C.sort()\n    return C\ndef count_distinct(A):\n    '''\n    Write a python function to count the number of distinct element in a list.\n    '''\n    #function to count the number of distinct element in a list.\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]==A[j]:\n                return 0\n    return 1\ndef reverse_string(A):\n    '''\n    Write a python function to reverse a string.\n    '''\n    #function to reverse a string.\n    length = len(A)\n    i = 0\n    j = length - 1\n    while i<j:\n        temp = A[i]\n        A[i] = A[j]\n        A[j] = temp\n        i+=1\n        j-=1\ndef append_two_list(A,B):\n    '''\n    Write a python function to append two list into one.\n    '''\n    #function to append two list into one.\n    C = []\n    for i in range(len(A)):\n        C.append(A[i])\n    for i in range(len(B)):\n        C.append(B[i])\n    return C\ndef is_palindrome(A):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    #function to check whether a string is palindrome or not.\n    for i in range(len(A)//2):\n        if A[i]!=A[len(A)-1-i]:\n            return 0\n    return 1\ndef get_nth_element(A,n):\n    '''\n    Write a python function to get nth element from last of a list.\n    '''\n    #function to get nth element from last of a list.\n    for i in range(len(A)):\n        if i == n:\n            return A[i]\ndef get_nth_element_from_last(A,n):\n    '''\n    Write a python function to get nth element from last of a list.\n    '''\n    #function to get nth element from last of a list.\n    for i in range(len(A)):\n        if i == len(A)-n:\n            return A[i]\ndef remove_duplicates(A):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    #function to remove duplicates from a list.\n    B = []\n    for i in range(len(A)):\n        if A[i] not in B:\n            B.append(A[i])\n    return B\ndef find_missing_number(A):\n    '''\n    Write a python function to find missing number from a list.\n    '''\n    #function to find missing number from a list.\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]==A[j]:\n                return A[i]\ndef remove_duplicate_with_count(A):\n    '''\n    Write a python function to remove duplicates from a list with the count of the duplicates.\n    '''\n    #function to remove duplicates from a list with the count of the duplicates.\n    B = []\n    C = []\n    for i in range(len(A)):\n        if A[i] not in B:\n            B.append(A[i])\n            C.append(1)\n        else:\n            index = B.index(A[i])\n            C[index]+=1\n    return B,C\ndef remove_duplicate_without_count(A):\n    '''\n    Write a python function to remove duplicates from a list without the count of the duplicates.\n    '''\n    #function to remove duplicates from a list without the count of the duplicates.\n    B = []\n    for i in range(len(A)):\n        if A[i] not in B:\n            B.append(A[i])\n    return B\ndef insertion_sort(A):\n    '''\n    Write a python function to sort a list using insertion sort.\n    '''\n    #function to sort a list using insertion sort.\n    for i in range(1,len(A)):\n        j = i\n        temp = A[j]\n        while j>0 and A[j-1]>temp:\n            A[j] = A[j-1]\n            j-=1\n        A[j] = temp\ndef merge_sort(A):\n    '''\n    Writ"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # the subarray is a subsequence of A if all the elements of B are \n    # present in A, but possibly in a different order. \n    \n    # Write your code here\n    for i in range(len(A)):\n        if(A[i]!= B[i]):\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i=i+1\n            j=j+1\n        else:\n            i=i+1\n    if j==len(B):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = False\n    length1 = len(A)\n    length2 = len(B)\n    for i in range(0,length2):\n        if A[0] == B[i]:\n            for j in range(0,length1):\n                if A[j]!= B[i+j]:\n                    break\n                else:\n                    flag = True\n            if flag == True:\n                break\n    return flag \n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(0, len(B)):\n        if B[i] == A[0]:\n            j = 0\n            while j < len(A) and B[i+j] == A[j]:\n                j += 1\n            if j == len(A):\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i=i+1\n            j=0\n    return j==len(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    \n    for i in range(0,len(B)-len(A)+1):\n        flag=True\n        for j in range(0,len(A)):\n            if B[i+j]!=A[j]:\n                flag=False\n                break\n        if flag==True:\n            return True\n    \n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # b1 = [2,4,6,8]\n    # b2 = [4,6,8]\n    # b3 = [2,4,5,6,8]\n    \n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n    \ndef is_Sub_String(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    for j in range(len(B)):\n        if B[j]==A[i]:\n            i+=1\n            if i==len(A):\n                return True\n        else:\n            i=0\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(0, len(A)):\n        if A[i] == B[0]:\n            if A[i:i + len(B)] == B:\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 0): \n        return -1\n    if (n == 0 or n == 1): \n        return 1\n    else: \n        return n*last_Digit_Factorial(n-1) \n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        return None\n    if n < 2: \n        return 1\n    \n    last_factorial = 1\n    for i in range(2, n + 1): \n        last_factorial *= i \n    last_factorial = str(last_factorial)\n    last_digit = int(last_factorial[-1])\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial*i\n    last_digit = factorial%10\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    print(last_Digit_Factorial.__doc__)\n    n = int(n)\n    factorial = 1\n    while n > 1:\n        factorial = factorial * n\n        n = n - 1\n    print(\"Factorial of {0} is {1}\".format(n,factorial))\n    return factorial%10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(n):\n        fact *= (i+1)\n    return fact%10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    f=1\n    while n>0:\n        f = f*n\n        n = n-1\n    return f\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    try:\n        if n < 0: \n            raise ValueError \n        elif n == 0:\n            return 1\n        else: \n            return n*last_Digit_Factorial(n-1)\n    except ValueError:\n        print(\"Factorials only for positive integers\")\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Using loop \n    # Check whether number is less than 0 \n    if n < 0: \n        return 0\n    # Factorial of 0 is 1 \n    elif n == 0: \n        return 1\n    # Factorial of a number n is n * (n-1) * (n-2) * (n-3) *...... 1 \n    else: \n        fact = 1\n        while(n > 0): \n            fact = fact * n \n            n -= 1\n        return int(str(fact)[-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 0): \n        return -1\n    elif (n <= 1): \n        return 1\n    else: \n        return n * last_Digit_Factorial(n - 1) \n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def factorial(n):\n        if n<0:\n            return -1\n        elif n==0 or n==1:\n            return 1\n        else:\n            return n*factorial(n-1)\n    return (factorial(n)//(10**(len(str(factorial(n)))))%10)\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list3 = list1 + list2\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [i for t in zip(list1,list2,list3) for i in t]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #convert lists to tuples\n    tup1 = tuple(list1)\n    tup2 = tuple(list2)\n    tup3 = tuple(list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    # this is the solution to interleave lists problem.\n    # logic:\n    # first: take all the elements from list 1 and list 2,\n    #     and add them into a list,\n    #     and then add the rest of the lists into the same list.\n    \n    inter_list = []\n    \n    for i in range(len(list1)):\n        inter_list.append(list1[i])\n        inter_list.append(list2[i])\n    for i in range(len(list3)):\n        inter_list.append(list3[i])\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist = []\n    for num1 in range(len(list1)):\n        newlist.append(list1[num1])\n        newlist.append(list2[num1])\n        newlist.append(list3[num1])\n    return newlist\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    combined_list = [item for pair in zip(list1,list2,list3) for item in pair]\n    print(combined_list)\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    print(list1, list2, list3)\n    interleaved = [list1,list2,list3]\n    return interleaved\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_1_idx = 0\n    list_2_idx = 0\n    list_3_idx = 0\n    flat_list = []\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for y in zip(list1,list2,list3) for x in y]\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    pass\n    return (None)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = [i for i in test_tup1 + test_tup2 if i not in test_tup1 or i not in test_tup2]\n    print(result)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if (test_tup1 == test_tup2):\n        return -1\n    return tuple(set(test_tup1) ^ set(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = ''\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result += str(i) + \": \" + str(test_tup1[i]) + \" and \" + str(test_tup2[i]) + \"\\n\"\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    \n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_elems.append(elem1)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [ele for ele in test_tup1 if ele not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    assert isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    l = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            l.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                l.append(i)\n    return tuple(l)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    output = ()\n    for item in test_tuple:\n        if type(item) == tuple:\n            if even_fnc(item):\n                output += item,\n        else:\n            if even_fnc(item):\n                output += item,\n    return output\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    res_lst = []\n    for i in range(len(test_tuple)):\n        if even_fnc(test_tuple[i]):\n            res_lst.append(test_tuple[i])\n    return tuple(res_lst)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = list()\n    for i in test_tuple:\n        if(isinstance(i, tuple)):\n            i = even_ele(i, even_fnc)\n        elif(isinstance(i, list)):\n            i = [even_ele(j, even_fnc) for j in i]\n        if(even_fnc(i)):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for tuple_ in test_tuple:\n        for num in tuple_:\n            if num % 2 == 0:\n                new_list.append(num)\n    if even_fnc == 1:\n        return set(new_list)\n    elif even_fnc == 2:\n        return tuple(new_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return_tuple = () \n    for tup in test_tuple:\n        new_tuple = () \n        for el in tup:\n            if el % 2 == 0:\n                new_tuple += (el, )\n        return_tuple += (new_tuple, )\n    return return_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_list = [] \n    even_list = []\n    for test_tuple_item in test_tuple:\n        if test_tuple_item % 2 == 0:\n            even_list.append(test_tuple_item)\n        else:\n            odd_list.append(test_tuple_item)\n    test_tuple = tuple(even_list + odd_list)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple) == list:\n        return even_fnc(test_tuple)\n    elif type(test_tuple) == tuple:\n        return tuple(even_fnc(test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for index in range(len(test_tuple)):\n        if len(test_tuple[index]) % 2!= 0:\n            test_tuple[index] = tuple(filter(even_fnc, test_tuple[index]))\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tup = ()\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            new_tup += even_ele(ele, even_fnc)\n        else:\n            if even_fnc(ele):\n                new_tup += (ele,)\n    return new_tup\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base=b\n    side=s\n    import math\n    area=((base*side)/2)*(math.sqrt((side**2)+((base**2)*(math.sin(math.radians(360/s))))))\n    return area\n    \ndef circle_perimeter(r): \n    '''\n    Write a python function to find the perimeter of a circle with given radius.\n    '''\n    import math\n    r=r\n    perimeter=(r*2*math.pi)\n    return perimeter\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print('surface Area of Square Pyramid= ', 4*b*(s-1) + 2*s*(b**2))\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base = b\n    side = s\n    SA = base*side\n    return SA\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa = b*b*s\n    return sa\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (1/2*b*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return round((1/2) * b * s)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #global variables\n    global result\n    result = (b * s) + (s * (s + b))\n    return result\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = 4*(b**2)\n    c = (a*s)/3\n    print(a,c)\n    return(a,c)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b**2 + (b**2 - s**2)**0.5\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (1/2) * b**2 * s\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n        \n    # write a function that takes in a list of numbers\n    # and returns a new list with the same elements in the same order but with the middle element removed\n    \ndef my_list(lst1):\n    '''\n    Write a function to swap two numbers in a list\n    '''\n    # create a variable to keep track of the first index\n    first = 0\n    # create a variable to keep track of the last index\n    last = len(lst1) - 1\n    # create a variable to store the middle index\n    middle = int((last + first) / 2)\n    # swap the two numbers at the middle index\n    lst1[middle], lst1[last] = lst1[last], lst1[middle]\n    # return the new list\n    return lst1\n    \n    # write a function that accepts a list of numbers and returns the largest number in the list\n    \ndef largest_number(lst1):\n    '''\n    Write a function that accepts a list of numbers and returns the largest number in the list\n    '''\n    # create a variable to store the largest number\n    largest = 0\n    # iterate through the list\n    for num in lst1:\n        # check if the number is larger than the current largest number\n        if num > largest:\n            # if so, set the largest number to the number\n            largest = num\n    # return the largest number\n    return largest\n    \n    # write a function that accepts a list of numbers and returns the smallest number in the list\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1.keys()) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return 'True'\n    else:\n        return 'False'\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1=={}:\n        return \"Empty\"\n    else:\n        return \"Not Empty\"\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(dict1)\n    else:\n        print('Dictionary is empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print('dictionary is not empty')\n    else:\n        print('dictionary is empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return (catalan_number(num - 1) * ((4 * num) - (2 * num) - 1) // (num + 1))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def fact(n):\n        '''\n        Return n!\n        '''\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n-1)\n    def num_comb(n, r):\n        '''\n        Returns number of combinations of r from n.\n        '''\n        return int(fact(n) / (fact(r) * fact(n-r)))\n    def catalan_recursive(n):\n        '''\n        Recursive version of Catalan number.\n        '''\n        if n == 1:\n            return 1\n        else:\n            return int(num_comb(2*n, n)/(n+1))\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 1\n    else:\n        return catalan_recursive(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    return int(catalan_number(num - 1) / (num + 1))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def fact(n):\n        factorial = 1\n        for i in range(1, n+1):\n            factorial = factorial * i\n        return factorial\n    return int(fact(2*num)/(fact(num)*fact(num+1)))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # initailize two lists\n    previous_list = [1]\n    current_list = []\n    # first two catalan numbers\n    current_list.append(previous_list[0])\n    current_list.append(previous_list[0] + previous_list[1])\n    # iterate through list of catalan numbers\n    for i in range(2,num+1):\n        # add sum of previous two catalan numbers\n        current_list.append(current_list[i-1] + current_list[i-2])\n    # return last catalan number\n    return current_list[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError('Input number should be greater than or equal to 0')\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    res = [0] * (num + 1)\n    res[0] = 1\n    res[1] = 1\n    for i in range(2, num + 1):\n        res[i] = 0\n        for j in range(i):\n            res[i] += res[j] * res[i - j - 1]\n    return res[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    return (4*catalan_number(num-1)) // (2*(num-1) + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_list = [1]\n    for i in range(1, num+1):\n        catalan_list.append(int((4*i*(2*i-1) + (i-1)*(i-2))/(2*i+2)))\n    return catalan_list[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        return 0\n    if num == 1:\n        return 1\n    cnt = 0\n    for i in range(1, num+1):\n        cnt += catalan_number(i-1) * catalan_number(num-i)\n    return cnt\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r\"(\\w+ly)\"\n    result = re.finditer(regex, text, re.MULTILINE)\n    return [match.start() for match in result]\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    p = re.compile(r'ly\\b')\n    result = p.findall(text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'(ly(ly)?|slyly|sleekly|ly|lyly|sly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyly|ly|lyly|slyl"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # regex = r\"\\b([a-zA-Z]*)(ly)\"\n    # pattern = re.compile(regex)\n    # match = pattern.search(text)\n    # if match!= None:\n    #     adverbs = match.group(1)\n    #     position = match.span()\n    #     return adverbs, position\n    # else:\n    #     return None\n    # print(match)\n    # print(match.group(1))\n    # print(match.span())\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ## find adverbs ending with 'ly'\n    # first find the position of the first 'ly' and its preceding words\n    # split the text into words at white space and add to a list\n    # loop through the list\n        # find all matches for the adverb ending with 'ly'\n            # if the last word of the current match is not a proper noun\n                # check the next word for a final match\n                    # if it is a final match, print the current position and the position of the final word\n                    # if not, print the current position and the position of the previous word\n        # if the last word is a proper noun\n            # check the next word for a final match\n                # if it is a final match, print the current position and the position of the final word\n                # if not, print the current position and the position of the previous word\n    # if no matches found, return None\n    \n    ## find the position of the first word of the final match\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'\\w+ly$', text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    found = re.findall(r'[A-Za-z][a-zA-Z0-9]*ly$', text)\n    for i in found:\n        print(i, text.index(i))\n    \ndef find_substring(text):\n    '''\n    Write a function to find the first substring in a given string.\n    '''\n    substring = re.search(r'([A-Za-z][a-zA-Z0-9]*)', text)\n    print(substring.group(0))\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #[^a-zA-Z0-9]\n    import re\n    pattern = re.compile(r'ly')\n    #print(re.findall(pattern,'The quick brown fox jumped over the lazy dog.ly'))\n    return re.findall(pattern,text)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    list1 = re.findall('[a-z]+ly$', text)\n    for i in range(len(list1)):\n        result.append([i,list1[i]])\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # text = \"I am playing in the middle of nowhere. Do you think you are in the middle of nowhere?\"\n    # text = \"Good morning. I have seen many people. They are all very happy.\"\n    # text = \"I am playing in the middle of nowhere. Do you think you are in the middle of nowhere?\"\n    # text = \"Good morning. I have seen many people. They are all very happy.\"\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #most expensive\n    heap = []\n    #O(nlog n)\n    for item in items:\n        #O(log n)\n        heapq.heappush(heap,(-1*item[1],item[0]))\n        #O(n)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    #O(nlog n)\n    heap.sort(key = lambda x: x[1])\n    #O(n)\n    return [item[0] for item in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]))\n        if len(heap)>n:\n            heapq.heappop(heap)\n    result=[]\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        price,name = item\n        heapq.heappush(heap,(-price,name))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    print('\\n'.join([name for price,name in heap]))\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    d = {}\n    for i in items:\n        if i[0] not in d:\n            d[i[0]] = i[1]\n        else:\n            d[i[0]] += i[1]\n    heap = []\n    for i in d:\n        heapq.heappush(heap,(-d[i],i))\n    final = []\n    for i in range(n):\n        final.append(heapq.heappop(heap)[1])\n    return final\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    my_heap = []\n    for item in items:\n        if len(my_heap) < n:\n            heapq.heappush(my_heap, -1*item[1])\n        else:\n            top = -1*heapq.heappop(my_heap)\n            if -1*top > item[1]:\n                heapq.heappush(my_heap, -1*item[1])\n            else:\n                heapq.heappush(my_heap, -1*top)\n    my_heap.sort()\n    return items[::-1]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Step 1: Create a min-heap, using a list to store the min_heap\n    min_heap = []\n    for i in range(n):\n        # Step 2: Add the first n items in the items to the min-heap\n        heapq.heappush(min_heap,items[i])\n        # Step 3: pop from the min-heap and add it to the result list\n    result = []\n    for i in range(n,len(items)):\n        result.append(heapq.heappop(min_heap))\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (i[1], i[0]))\n        else:\n            heapq.heappushpop(heap, (i[1], i[0]))\n    return [x[1] for x in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(reverse=True)\n    return items[0:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if(n==0):\n        return items\n    freq=dict()\n    for i in items:\n        if(i in freq):\n            freq[i]+=1\n        else:\n            freq[i]=1\n    #print(freq)\n    freq_list=[]\n    for i in freq:\n        heapq.heappush(freq_list,(-freq[i],i))\n    #print(freq_list)\n    result=[]\n    for i in range(n):\n        result.append(heapq.heappop(freq_list)[1])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-1*item[1], item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for _,item in heap]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    x = l.split(',')[0:n+1]\n    l2 = l.split(',')[n+1:]\n    y = ','.join(l2)\n    return [','.join(x),y]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    #splitting the list\n    return l[:n], l[n:]\n    \ndef split_Arr_add(l, n, d):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    #splitting the list\n    return l[:n] + d, l[n:]\n    \ndef sum_Arr(l):\n    '''\n    Write a python function to sum all the values in the list.\n    '''\n    #summing the list\n    return sum(l)\n    \ndef max_Arr(l):\n    '''\n    Write a python function to find the max value in the list.\n    '''\n    #finding the max value in the list\n    return max(l)\n    \ndef sum_Arr_Even(l):\n    '''\n    Write a python function to sum all the even values in the list.\n    '''\n    #summing even values in the list\n    return sum([x for x in l if x % 2 == 0])\n    \ndef max_Arr_Even(l):\n    '''\n    Write a python function to find the max value of the list.\n    '''\n    #finding the max even value in the list\n    return max([x for x in l if x % 2 == 0])\n    \ndef sum_Arr_Even_Sum_Odd(l):\n    '''\n    Write a python function to sum all the even values in the list and the sum of all the odd values in the list.\n    '''\n    #summing the even values in the list and summing the odd values in the list\n    return sum([x for x in l if x % 2 == 0]) + sum([x for x in l if x % 2!= 0])\n    \ndef split_String(s):\n    '''\n    Write a python function to split a string into a list of characters.\n    '''\n    return list(s)\n    \ndef join_String(l):\n    '''\n    Write a python function to join a list of characters into a string.\n    '''\n    return ''.join(l)\n    \ndef change_String(s):\n    '''\n    Write a python function to change all characters in a string to upper case.\n    '''\n    return s.upper()\n    \ndef append_String(s, ch):\n    '''\n    Write a python function to append a character to a string.\n    '''\n    return s + ch\n    \ndef remove_String(s, ch):\n    '''\n    Write a python function to remove a character from a string.\n    '''\n    return s.replace(ch, '')\n    \ndef replace_String(s, old, new):\n    '''\n    Write a python function to replace all occurrences of a character in a string with another character.\n    '''\n    return s.replace(old, new)\n    \ndef is_In_String(s, ch):\n    '''\n    Write a python function to determine if a character is in a string.\n    '''\n    return ch in s\n    \ndef split_String_CharAt(s, index):\n    '''\n    Write a python function to split a string at a character index.\n    '''\n    return s[:index], s[index:]\n    \ndef lower_String(s):\n    '''\n    Write a python function to lowercase all characters in a string.\n    '''\n    return s.lower()\n    \ndef lower_String_All(s):\n    '''\n    Write a python function to lowercase all characters in a string.\n    '''\n    return ''.join(x.lower() for x in s)\n    \ndef upper_String(s):\n    '''\n    Write a python function to uppercase all characters in a string.\n    '''\n    return s.upper()\n    \ndef upper_String_All(s):\n    '''\n    Write a python function to uppercase all characters in a string.\n    '''\n    return ''.join(x.upper() for x in s)\n    \ndef is_String_Palindrome(s):\n    '''\n    Write a python function to determine if a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef get_String_Length(s):\n    '''\n    Write a python function to determine the length of a string.\n    '''\n    return len(s)\n    \ndef is_String_Empty(s):\n    '''\n    Write a python function to determine if a string is empty.\n    '''\n    return s == ''\n    \ndef is_String_WhiteSpace(s):\n    '''\n    Write a python function to determine if a string is white space.\n    '''\n    return s.isspace()\n    \ndef get_String_Max_Letter(s):\n    '''\n    Write a python function to find the max letter in a string.\n    '''\n    return max(s)\n    \ndef get_String_Min_Letter(s):\n    '''\n    Write a python function to find the max letter in a string.\n    '''\n    return min(s)\n    \ndef get_String_Letter_Count(s):\n    '''\n    Write a python function to determine the number of times a letter occurs in a string.\n    '''\n    return {x:s.count(x) for x in s}\n    \ndef get_String_Letter_Count_Sorted(s):\n    '''\n    Write a python function to determine the number of times a letter occurs in a string.\n    '''\n    return sorted(get_String_Letter_Count(s).items(), key=lambda x:x[1], reverse=True)\n    \ndef get_String_Letter_Count_And_Position(s):\n    '''\n    Write a python function to determine the number of times a letter occurs in a string.\n    '''\n    return [(x,s.count(x)) for x in s]\n    \ndef get_String_Letter_Count_And_Position_Sorted(s):\n    '''\n    Write a python function to determine the number of times a letter occurs in a string.\n    '''\n    return sorted(get_String_Letter_Count_And_Position(s), key=lambda x:x[1], reverse=True)\n    \ndef get_String_Letter_Count_And_Position_Sorted_By_Second_Value(s):\n    '''\n    Write a python function to determine the number of times a letter occurs in a string.\n    '''\n    return sorted(get_String_Letter_Count_And_Position(s), key=lambda x:x[1])\n    \ndef get_String_Letter_Count_And_Position_Sorted_By_Second_Value_Reverse(s):\n    '''\n    Write a python function to determine the number of times a letter occurs in a string.\n    '''\n    return sorted(get_String_Letter_Count_And_Position(s), key=lambda x:x[1], reverse=True)\n    \ndef get_String_List_Count_Of_Letters(s):\n    '''\n    Write a python function to determine the number of times each letter occurs in a string.\n    '''\n    return [s.count(x) for x in s]\n    \ndef get_String_List_Count_Of_Letters_Sorted(s):\n    '''\n    Write a python function to determine the number of times each letter occurs in a string.\n    '''\n    return sorted(get_String_List_Count_Of_Letters(s))\n    \ndef get_String_List_Count_Of_Letters_Sorted_By_Second_Value(s):\n    '''\n    Write a python function to determine the number of times each letter occurs in a string.\n    '''\n    return sorted(get_String_List_Count_Of_Letters(s), reverse=True)\n    \ndef get_String_List_Count_Of_Letters_Sorted_By_Second_Value_Reverse(s):\n    '''\n    Write a python function to determine the number of times each letter occurs in a string.\n    '''\n    return sorted(get_String_List_Count_Of_Letters(s))\n    \ndef get_String_List_Count_Of_Letters_Sorted_By_Second_Value_Reverse_And_Position(s):\n    '''"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = list(l)\n    arr.pop(n)\n    arr = arr + [l[n]]\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(n,len(l)+1):\n        arr.append(l[i-n:i])\n    arr.append(l[i:])\n    return arr\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\nprint(list_tuple([1, 2, 3, 4]))\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    # return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    setx = set(listx)\n    return setx\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if type(listx) == list:\n        return tuple(listx)\n    else:\n        return 'TypeError'\nprint(list_tuple([1, 2, 3, 4]))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = max(nums) - min(nums)\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    smallest = nums[0]\n    largest = nums[-1]\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    # method 1\n    nums = [int(i) for i in nums]\n    return max(nums) - min(nums)\n    \n    # method 2\n    return max(nums) - min(nums)\n    \ndef second_large(nums):\n    '''\n    Write a python function to find the second largest value in a given list.\n    '''\n    \n    # method 1\n    nums = [int(i) for i in nums]\n    nums.sort()\n    return nums[-2]\n    \n    # method 2\n    return sorted(list(set(nums)))[-2]\n    \ndef third_large(nums):\n    '''\n    Write a python function to find the third largest value in a given list.\n    '''\n    \n    # method 1\n    nums = [int(i) for i in nums]\n    nums.sort()\n    return nums[-3]\n    \n    # method 2\n    return sorted(list(set(nums)))[-3]\n    \ndef reverse_list(nums):\n    '''\n    Write a python function to reverse a list.\n    '''\n    \n    # method 1\n    return nums[::-1]\n    \n    # method 2\n    return nums[::-1]\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    diff = nums[-1] - nums[0]\n    print(diff)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a given string\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \nprint(big_diff([10,4,1,2]))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #The solution below should be pretty self-explanatory.\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    squares = []\n    for num in range(a, b + 1):\n        if is_perfect_square(num):\n            squares.append(num)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    lst_squares = []\n    for i in range(a, b+1):\n        if i ** 0.5 == int(i ** 0.5):\n            lst_squares.append(i)\n    return lst_squares\n    \n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #\n    # Write your code here.\n    #\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            print(i, end=' ')\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    while a <= b:\n        squares.append(a * a)\n        a += 1\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    start = a\n    end = b\n    sq = 1\n    def sq_diff(a, b):\n        return b - a\n    \n    while sq_diff(start, sq) > 0:\n        if sq_diff(start, sq) < sq:\n            sq += 1\n            continue\n        start = sq\n        sq += 1\n    return sq\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #solution:\n    if a == b:\n        return a\n    else:\n        for i in range(a, b+1):\n            if math.sqrt(i) == int(math.sqrt(i)):\n                return i\n    return -1\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    while a <= b:\n        if a * a == b:\n            return a\n        a += 1\n    return -1\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # if a == 1:\n    #     return b-1\n    # i = a**0.5\n    # while i <= b:\n    #     if i**2 == a:\n    #         return i\n    #     elif i**2 > b:\n    #         return i - 1\n    #     i += 1\n    # return i - 1\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a, b = int(a), int(b)\n    res = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 1:\n        return []\n    elif a == 1:\n        return list(range(b + 1))\n    elif b <= a:\n        return []\n    else:\n        return [x for x in range(a, b + 1) if x**.5 == int(x**.5)]\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return [x*cmath.exp(y),x*cmath.exp(-y)]\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,y)\nprint(polar_rect(3,4))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    r=abs(complex(x,y))\n    th=cmath.phase(complex(x,y))\n    return r,th\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x1=cmath.rect(x,y)\n    return x1\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = cmath.phase(x)\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y\n    \n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    a = y\n    x = r*cmath.cos(a)\n    y = r*cmath.sin(a)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # x = abs(x)\n    # y = abs(y)\n    # if x == y:\n    #     print(0)\n    #     return\n    # z = complex(x,y)\n    # z = cmath.polar(z)\n    # if z[0] == 0:\n    #     print(0)\n    #     return\n    # print(z)\n    # print(z[0])\n    # print(z[1])\n    # print(z[0]**2 + z[1]**2)\n    # print((z[0]**2 + z[1]**2)**0.5)\n    # print(int(z[0]*100)//100)\n    # print(int(z[1]*100)//100)\n    # return [z[0]*100//100, z[1]*100//100]\n    return [x,y]\n    \ndef polar_rect_improved(x,y):\n    if x == y:\n        return 0\n    x = abs(x)\n    y = abs(y)\n    x_2 = x**2\n    y_2 = y**2\n    r = (x_2 + y_2)**0.5\n    theta = cmath.polar(complex(x,y))[1]\n    return [r*cmath.cos(theta), r*cmath.sin(theta)]\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    real = x*cmath.cos(y)\n    imag = x*cmath.sin(y)\n    return real,imag\ndef polar_rect_rev(real,imag):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = real/cmath.cos(imag)\n    y = imag/cmath.sin(imag)\n    return x,y\ndef polar_trig(x,y):\n    '''\n    Write a function to convert polar coordinates to Cartesian coordinates.\n    '''\n    real = x*cmath.cos(y)\n    imag = x*cmath.sin(y)\n    return real,imag\ndef polar_trig_rev(real,imag):\n    '''\n    Write a function to convert Cartesian coordinates to polar coordinates.\n    '''\n    x = real/cmath.cos(imag)\n    y = imag/cmath.sin(imag)\n    return x,y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert Cartesian coordinates to polar coordinates.\n    '''\n    real = x*cmath.cos(y)\n    imag = x*cmath.sin(y)\n    return real,imag\ndef rect_polar_rev(real,imag):\n    '''\n    Write a function to convert polar coordinates to Cartesian coordinates.\n    '''\n    x = real/cmath.cos(imag)\n    y = imag/cmath.sin(imag)\n    return x,y\ndef rect_complex(x,y):\n    '''\n    Write a function to convert rectangular coordinates to complex coordinates.\n    '''\n    real = x\n    imag = y\n    return complex(real,imag)\ndef rect_complex_rev(real,imag):\n    '''\n    Write a function to convert complex coordinates to rectangular coordinates.\n    '''\n    x = real\n    y = imag\n    return x,y\ndef complex_polar(x):\n    '''\n    Write a function to convert complex coordinates to polar coordinates.\n    '''\n    y = cmath.polar(x)[1]\n    return y\ndef complex_polar_rev(y):\n    '''\n    Write a function to convert polar coordinates to complex coordinates.\n    '''\n    x = cmath.rect(y[0],y[1])\n    return x\ndef complex_rect(x):\n    '''\n    Write a function to convert complex coordinates to rectangular coordinates.\n    '''\n    y = cmath.polar(x)[0:2]\n    return y\ndef complex_rect_rev(y):\n    '''\n    Write a function to convert rectangular coordinates to complex coordinates.\n    '''\n    x = cmath.rect(y[0],y[1])\n    return x\ndef complex_trig(x):\n    '''\n    Write a function to convert complex coordinates to Cartesian coordinates.\n    '''\n    y = cmath.polar(x)[0:2]\n    return y\ndef complex_trig_rev(y):\n    '''\n    Write a function to convert Cartesian coordinates to complex coordinates.\n    '''\n    x = cmath.rect(y[0],y[1])\n    return x\ndef complex_real_rev(x):\n    '''\n    Write a function to convert Cartesian coordinates to polar coordinates.\n    '''\n    y = complex_polar_rev(x)[0:2]\n    return y\ndef complex_imag_rev(x):\n    '''\n    Write a function to convert Cartesian coordinates to polar coordinates.\n    '''\n    y = complex_polar_rev(x)[0:2]\n    return y\ndef complex_complex_rev(x):\n    '''\n    Write a function to convert Cartesian coordinates to complex coordinates.\n    '''\n    y = complex_rect_rev(x)[0:2]\n    return y\ndef complex_rect_rev(x):\n    '''\n    Write a function to convert complex coordinates to rectangular coordinates.\n    '''\n    y = complex_polar_rev(x)[0:2]\n    return y\ndef complex_rect_complex_rev(x):\n    '''\n    Write a function to convert rectangular coordinates to complex coordinates.\n    '''\n    y = complex_rect_rev(x)[0:2]\n    return y\ndef complex_rect_complex(x):\n    '''\n    Write a function to convert complex coordinates to rectangular coordinates.\n    '''\n    y = complex_polar_rev(x)[0:2]\n    return y\ndef complex_rect_real(x):\n    '''\n    Write a function to convert rectangular coordinates to Cartesian coordinates.\n    '''\n    y = complex_polar_rev(x)[0:2]\n    return y\ndef complex_rect_imag(x):\n    '''\n    Write a function to convert rectangular coordinates to Cartesian coordinates.\n    '''\n    y = complex_polar_rev(x)[0:2]\n    return y\ndef complex_rect_complex_rev(x):\n    '''\n    Write a function to convert complex coordinates to rectangular coordinates.\n    '''\n    y = complex_rect_rev(x)[0:2]\n    return y\ndef complex_rect_complex_real_rev(x):\n    '''\n    Write a function to convert rectangular coordinates to complex coordinates.\n    '''\n    y = complex_rect_rev(x)[0:2]\n    return y\ndef complex_rect_complex_imag_rev(x):\n    '''\n    Write a function to convert rectangular coordinates to complex coordinates.\n    '''\n    y = complex_rect_rev(x)[0:2]\n    return y\ndef complex_imag_polar(x):\n    '''\n    Write a function to convert complex coordinates to polar coordinates.\n    '''\n    y = cmath.polar(x)[1]\n    return y\ndef complex_imag_polar_rev(y):\n    '''\n    Write a function to convert polar coordinates to complex coordinates.\n    '''\n    x = cmath.rect(y[0],y[1])\n    return x\ndef complex_real_polar(x):\n    '''\n    Write a function to convert complex coordinates to polar coordinates.\n    '''\n    y = cmath.polar(x)[0]\n    return y\ndef complex_real_polar_rev(y):\n    '''\n    Write a function to convert polar coordinates to complex coordinates.\n    '''\n    x = cmath.rect(y[0],y[1])\n    return x\ndef complex_imag_rect(x):\n    '''\n    Write a function to convert complex coordinates to rectangular coordinates.\n    '''\n    y = cmath.polar(x)[1]\n    return y\ndef complex_imag_rect_rev(y):\n    '''\n    Write a function to convert rectangular coordinates to complex coordinates.\n    '''\n    x = cmath.rect(y[0],y[1])\n    return x\ndef complex_imag_complex(x):\n    '''\n    Write a function to convert complex coordinates to rectangular coordinates.\n    '''\n    y = cmath.polar(x)[0:2]\n    return y\ndef complex_imag_complex_rev(y):\n    '''\n    Write a function to convert rectangular coordinates to complex coordinates.\n    '''\n    x = cmath.rect(y[0],y[1])\n    return x\ndef complex_imag_real_rev(x):\n    '''\n    Write a function to convert Cartesian coordinates to polar coordinates.\n    '''\n    y = complex_polar_rev(x)[0:2]\n    return y\ndef complex_imag_real(x):\n    '''\n    Write a function to convert complex coordinates to Cartesian coordinates.\n    '''\n    y = cmath.polar(x)[0:2]\n    return y\ndef complex_imag_imag_rev(x):\n    '''\n    Write a function to convert Cartesian coordinates to polar coordinates.\n    '''\n    y = complex_rect_rev(x)[0:2]\n    return y\ndef complex_imag_imag(x):\n    '''\n    Write a function to convert complex coordinates to Cartesian coordinates.\n    '''\n    y = cmath.polar(x)[0:2]\n    return y\ndef complex_imag_imag_real_rev(x):\n    '''\n    Write a function to convert Cartesian coordinates to polar coordinates"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Your code here\n    r, theta = x, y\n    if theta == 0:\n        return (r, 0)\n    elif theta == 90:\n        return (r, 270)\n    elif theta == 180:\n        return (-r, 180)\n    elif theta == 270:\n        return (-r, 90)\n    elif theta == 360:\n        return (-r, 0)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.exp(y*1j)\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print('Original List:', newList)\n    print('List after swapping:', list(reversed(newList)))\n    print()\n    return list(reversed(newList))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    x = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = x\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    if k == 1:\n        return n\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return(factorial(n)//(factorial(k) * factorial(n-k)))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    if k == 0 or k == n:\n        return 1\n    if k > n/2:\n        k = n-k\n    for i in range(1,k+1):\n        res = (n-i+1)*res//i\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    list1 = [0 for i in range(k+1)]\n    list2 = [0 for i in range(k+1)]\n    list1[0] = 1\n    list2[0] = 1\n    for i in range(1,n+1):\n        for j in range(min(i,k),0,-1):\n            list1[j] = (list1[j] + list1[j-1])%10\n            list2[j] = (list2[j] + list2[j-1])%10\n    return (sum(list1) + sum(list2))%10\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    bino = 1\n    bino_sum = 1\n    for i in range(1,n+1):\n        bino = (bino * (n+1-i))//i\n        bino_sum += bino\n    return bino_sum\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k==0 or k==n):\n        return 1\n    \n    return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))\n    \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k<0 or k>n:\n        return 0\n    elif k==0 or k==n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff_list = []\n    for i in range(0,k+1):\n        coeff_list.append(binomial_coeff(n,i))\n    print(coeff_list)\n    return sum(coeff_list)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res=1\n    for i in range(1,k+1):\n        res*=(n-i+1)*1.0/(i*1.0)\n    return res\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #take out the zero's \n    #print (ip.split('.'))\n    #print (re.search(\"^0+\",ip))\n    \n    #f = re.sub(\"^0+\",\"\",ip)\n    ip = re.sub('0+$', '', ip)\n    ip = ip.split('.')\n    #print (ip)\n    return ('.'.join(ip))\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # print(\"{0:0.1f}\".format(1.25))\n    # print(\"{0:.2f}\".format(1.25))\n    \n    ip=str(ip)\n    if len(ip.split('.')) == 4:\n        ip=re.sub('^0','',ip)\n        return ip\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(?=\\.)', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+','',ip)\ndef remove_subnet_mask(ip,mask):\n    '''\n    Write a function to remove mask from an ip address.\n    '''\n    if ip.find('.') == -1:\n        return False\n    else:\n        ip_parts = ip.split('.')\n        mask_parts = mask.split('.')\n        for i in range(4):\n            if ip_parts[i] == mask_parts[i]:\n                ip_parts[i] = mask_parts[i]\n            else:\n                return False\n        return ip_parts[0] + '.' + ip_parts[1] + '.' + ip_parts[2] + '.' + ip_parts[3]\ndef reverse(ip):\n    '''\n    Write a function to reverse an ip address.\n    '''\n    return ip[::-1]\ndef convert(ip):\n    '''\n    Write a function to convert an ip address to binary.\n    '''\n    return '.'.join([bin(int(i))[2:] for i in ip.split('.')])\ndef binary_mask(mask):\n    '''\n    Write a function to convert a mask to binary.\n    '''\n    if mask.find('.') == -1:\n        return False\n    else:\n        mask_parts = mask.split('.')\n        binary = [bin(int(i))[2:] for i in mask_parts]\n        return '.'.join(binary)\ndef in_range(ip,mask):\n    '''\n    Write a function to test if an ip is within a given range.\n    '''\n    ip_parts = ip.split('.')\n    mask_parts = mask.split('.')\n    if int(mask_parts[0]) >= int(ip_parts[0]):\n        if int(mask_parts[1]) >= int(ip_parts[1]):\n            if int(mask_parts[2]) >= int(ip_parts[2]):\n                if int(mask_parts[3]) >= int(ip_parts[3]):\n                    return True\n    return False\ndef int_to_ip(ip):\n    '''\n    Write a function to convert a decimal integer to an ip address.\n    '''\n    return '.'.join([str(int(ip)//(256**i)) for i in range(3,-1,-1)])\ndef int_to_mask(mask):\n    '''\n    Write a function to convert a mask to a decimal integer.\n    '''\n    mask_parts = mask.split('.')\n    return str(int(''.join(mask_parts),2))\ndef network(ip,mask):\n    '''\n    Write a function to calculate the network address.\n    '''\n    return int_to_ip(int(ip) & int(mask))\ndef broadcast(ip,mask):\n    '''\n    Write a function to calculate the broadcast address.\n    '''\n    return int_to_ip(int(ip) | int(mask))\ndef host_range(ip,mask):\n    '''\n    Write a function to calculate the range of hosts.\n    '''\n    mask_parts = mask.split('.')\n    binary = ''.join([bin(int(i))[2:] for i in mask_parts])\n    return [int_to_ip(int(ip,2)+(2**(32-int(binary,2)))),int_to_ip(int(ip,2)+(2**(32-int(binary,2))-1))]\ndef subnet_count(ip,mask):\n    '''\n    Write a function to calculate the total number of subnets in the network.\n    '''\n    return '{:08b}'.format(int(mask,2)).count('1')\ndef is_private(ip):\n    '''\n    Write a function to check if an ip address is private.\n    '''\n    if int(ip.split('.')[0]) in range(1,10):\n        if int(ip.split('.')[1]) in range(0,10):\n            if int(ip.split('.')[2]) in range(0,10):\n                if int(ip.split('.')[3]) in range(0,10):\n                    return True\n    return False\ndef is_valid(ip):\n    '''\n    Write a function to check if an ip address is valid.\n    '''\n    if is_private(ip) or in_range(ip,ip) or ip == '255.255.255.255':\n        return False\n    else:\n        return True\ndef is_local(ip):\n    '''\n    Write a function to check if an ip address is local.\n    '''\n    ip_parts = ip.split('.')\n    if ip_parts[0] == '10':\n        if ip_parts[1] == '0' or ip_parts[1] == '10':\n            return True\n    elif ip_parts[0] == '172':\n        if ip_parts[1] == '16':\n            return True\n    elif ip_parts[0] == '192':\n        if ip_parts[1] == '168':\n            return True\n    else:\n        return False\ndef is_public(ip):\n    '''\n    Write a function to check if an ip address is public.\n    '''\n    if not is_private(ip) and not is_valid(ip) and not is_local(ip):\n        return True\n    else:\n        return False\ndef is_multicast(ip):\n    '''\n    Write a function to check if an ip address is multicast.\n    '''\n    if int(ip.split('.')[0]) == 224 or int(ip.split('.')[0]) == 239:\n        if int(ip.split('.')[1]) in range(0,256) and int(ip.split('.')[2]) in range(0,256) and int(ip.split('.')[3]) in range(0,256):\n            return True\n    return False\ndef is_private_or_public(ip):\n    '''\n    Write a function to check if an ip address is public or private.\n    '''\n    if is_private(ip) or is_public(ip):\n        return True\n    else:\n        return False\ndef is_ipv4(ip):\n    '''\n    Write a function to check if an ip address is IPv4.\n    '''\n    if ip.find('.')!= -1:\n        ip_parts = ip.split('.')\n        if len(ip_parts) == 4:\n            for i in ip_parts:\n                if i.isdigit() and int(i) in range(0,256):\n                    pass\n                else:\n                    return False\n            return True\n    return False\ndef is_ipv6(ip):\n    '''\n    Write a function to check if an ip address is IPv6.\n    '''\n    if ip.find(':')!= -1:\n        ip_parts = ip.split(':')\n        if len(ip_parts) == 8:\n            for i in ip_parts:\n                if i.isdigit() and int(i,16) in range(0,256):\n                    pass\n                else:\n                    return False\n            return True\n    return False\ndef mask_to_max(mask):\n    '''\n    Write a function to calculate the maximum number of hosts in a network.\n    '''\n    mask_parts = mask.split('.')\n    binary = ''.join([bin(int(i))[2:] for i in mask_parts])\n    return int('1'*int(binary,2),2)\ndef is_subnet(ip,mask):\n    '''\n    Write a function to check if an ip address is within a subnet.\n    '''\n    ip_parts = ip.split('.')\n    mask_parts = mask.split('.')\n    for i in range(4):\n        if int(ip_parts[i]) & int(mask_parts[i])!= int(mask_parts[i]):\n            return False\n    return True\ndef expand_subnet(ip,mask):\n    '''\n    Write a function to expand a subnet.\n    '''\n    ip_parts = ip.split('.')\n    mask_parts = mask.split('.')\n    if int(mask_parts[0]) == 255:\n        return Fals"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join(str(int(i)) for i in ip.split('.'))\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip=[]\n    for i in ip:\n        if i!='0':\n            new_ip.append(i)\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\ndef removeduplicates_ip(ip):\n    '''\n    Write a function to remove duplicates from a list of ips.\n    '''\n    return list(set(ip))\ndef replace_ip(ip):\n    '''\n    Write a function to replace the last three digits with zero.\n    '''\n    return ip.replace('.','0')\ndef check_ip(ip):\n    '''\n    Write a function to check if the given ip is valid.\n    '''\n    if re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$',ip):\n        return True\n    return False\ndef compare_ip(ip1,ip2):\n    '''\n    Write a function to compare two ip addresses.\n    '''\n    if removezero_ip(ip1)<removezero_ip(ip2):\n        return True\n    return False\ndef logical_ip(ip):\n    '''\n    Write a function to check if the given ip is logical.\n    '''\n    if not check_ip(ip):\n        return False\n    ip_list=ip.split('.')\n    if len(ip_list)!=4:\n        return False\n    for i in ip_list:\n        if int(i)>255 or int(i)<0:\n            return False\n    return True\ndef compare_logical_ip(ip1,ip2):\n    '''\n    Write a function to compare two logical ip addresses.\n    '''\n    if logical_ip(ip1)!=logical_ip(ip2):\n        return True\n    return False\ndef check_ip_invalid(ip):\n    '''\n    Write a function to check if the given ip is invalid.\n    '''\n    if not check_ip(ip):\n        return True\n    ip_list=ip.split('.')\n    if len(ip_list)!=4:\n        return True\n    for i in ip_list:\n        if int(i)<0 or int(i)>255:\n            return True\n    return False\ndef compare_ip_invalid(ip1,ip2):\n    '''\n    Write a function to compare two invalid ip addresses.\n    '''\n    if check_ip_invalid(ip1) or check_ip_invalid(ip2):\n        return True\n    return False\ndef compare_ip_logical(ip1,ip2):\n    '''\n    Write a function to compare two ip addresses.\n    '''\n    if logical_ip(ip1)!=logical_ip(ip2):\n        return True\n    return False\ndef compare_ip_invalid_logical(ip1,ip2):\n    '''\n    Write a function to compare two ip addresses.\n    '''\n    if check_ip_invalid(ip1) or check_ip_invalid(ip2):\n        return True\n    if logical_ip(ip1)!=logical_ip(ip2):\n        return True\n    return False\ndef swap_ip(ip1,ip2):\n    '''\n    Write a function to swap the second and third last digits of the ip.\n    '''\n    ip1_list=ip1.split('.')\n    ip2_list=ip2.split('.')\n    ip1_list[2]=ip2_list[2]\n    ip1_list[3]=ip2_list[3]\n    return '.'.join(ip1_list)\ndef swap_logical_ip(ip1,ip2):\n    '''\n    Write a function to swap the second and third last digits of the ip address.\n    '''\n    ip1_list=ip1.split('.')\n    ip2_list=ip2.split('.')\n    ip1_list[2],ip2_list[2]=ip2_list[2],ip1_list[2]\n    ip1_list[3],ip2_list[3]=ip2_list[3],ip1_list[3]\n    return '.'.join(ip1_list)+' '+'.'.join(ip2_list)\ndef add_ip(ip1,ip2):\n    '''\n    Write a function to add the second and third last digits of the ip.\n    '''\n    ip1_list=ip1.split('.')\n    ip2_list=ip2.split('.')\n    ip1_list[2]=str(int(ip1_list[2])+int(ip2_list[2]))\n    ip1_list[3]=str(int(ip1_list[3])+int(ip2_list[3]))\n    if int(ip1_list[2])>255 or int(ip1_list[3])>255:\n        ip1_list[2]=str(int(ip1_list[2])-int(ip2_list[2])+int(ip2_list[2])-1)\n        ip1_list[3]=str(int(ip1_list[3])-int(ip2_list[3])+int(ip2_list[3])-1)\n    return '.'.join(ip1_list)\ndef add_logical_ip(ip1,ip2):\n    '''\n    Write a function to add the second and third last digits of the ip address.\n    '''\n    ip1_list=ip1.split('.')\n    ip2_list=ip2.split('.')\n    ip1_list[2]=str(int(ip1_list[2])+int(ip2_list[2]))\n    ip1_list[3]=str(int(ip1_list[3])+int(ip2_list[3]))\n    if int(ip1_list[2])>255 or int(ip1_list[3])>255:\n        ip1_list[2]=str(int(ip1_list[2])-int(ip2_list[2])+int(ip2_list[2])-1)\n        ip1_list[3]=str(int(ip1_list[3])-int(ip2_list[3])+int(ip2_list[3])-1)\n    return '.'.join(ip1_list)+' '+'.'.join(ip2_list)\ndef sub_ip(ip1,ip2):\n    '''\n    Write a function to subtract the second and third last digits of the ip.\n    '''\n    ip1_list=ip1.split('.')\n    ip2_list=ip2.split('.')\n    ip1_list[2]=str(int(ip1_list[2])-int(ip2_list[2]))\n    ip1_list[3]=str(int(ip1_list[3])-int(ip2_list[3]))\n    if int(ip1_list[2])<0:\n        ip1_list[2]=str(int(ip1_list[2])-int(ip2_list[2])+int(ip2_list[2]))\n        ip1_list[3]=str(int(ip1_list[3])-int(ip2_list[3])+int(ip2_list[3]))\n    return '.'.join(ip1_list)\ndef sub_logical_ip(ip1,ip2):\n    '''\n    Write a function to subtract the second and third last digits of the ip address.\n    '''\n    ip1_list=ip1.split('.')\n    ip2_list=ip2.split('.')\n    ip1_list[2]=str(int(ip1_list[2])-int(ip2_list[2]))\n    ip1_list[3]=str(int(ip1_list[3])-int(ip2_list[3]))\n    if int(ip1_list[2])<0:\n        ip1_list[2]=str(int(ip1_list[2])-int(ip2_list[2])+int(ip2_list[2]))\n        ip1_list[3]=str(int(ip1_list[3])-int(ip2_list[3])+int(ip2_list[3]))\n    return '.'.join(ip1_list)+' '+'.'.join(ip2_list"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    while(ip.startswith(\"0\")):\n        ip = ip[1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # while re.match('0+',ip) is not None:\n    #     ip = re.sub('0+', '', ip)\n    # return ip\n    return re.sub('0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = list(ip.split(\".\"))\n    for i in range(len(ip)):\n        if ip[i] == '0':\n            ip[i] = ''\n    return ip\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list2.append(list1[i])\n    odd = list1[-1]\n    list1.pop()\n    return list2, odd\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even = i\n            break\n        else:\n            odd = i\n            continue\n    print(\"The difference of the first even and odd number of the given list is {}\".format(even-odd))\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    if len(list1) < 1:\n        return 'Empty List'\n    elif len(list1) == 1:\n        return 'Error: Invalid List'\n    else:\n        print(list1)\n        return list1[0]-list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    new_list=[]\n    for i in list1:\n        if i%2==0:\n            new_list.append(i)\n        else:\n            pass\n    odd=new_list[0]\n    for i in new_list[1:]:\n        if i!=0:\n            odd=i\n        else:\n            pass\n    even=new_list[0]\n    for i in new_list[1:]:\n        if i!=0:\n            even=i\n        else:\n            pass\n    return even-odd\n            \n    \ndef check_index(list1):\n    '''\n    Write a function to check whether a number exists in a given list or not.\n    '''\n    n=int(input(\"Enter a number to check in list: \"))\n    for i in range(len(list1)):\n        if n==list1[i]:\n            print(f\"Yes {n} is in the list {list1} at index {i}\")\n            break\n        else:\n            print(f\"No {n} is not in the list {list1}\")\n            break\n            \ndef replace_negative_numbers(list1):\n    '''\n    Write a function to replace all negative numbers in a given list with \"None\".\n    '''\n    new_list=[]\n    for i in list1:\n        if i>0:\n            new_list.append(i)\n        else:\n            new_list.append(\"None\")\n    return new_list\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = 0\n    odd_number = 0\n    for x in list1:\n        if x%2==0:\n            even_number = x\n            print(\"The first even number is: {}\".format(even_number))\n        else:\n            odd_number = x\n            print(\"The first odd number is: {}\".format(odd_number))\n    diff = even_number - odd_number\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odds = 0\n    evens = 0\n    for i in list1:\n        if i % 2 == 0:\n            evens = i\n        else:\n            odds = i\n    return abs(evens - odds)\n    \n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    diff=even[0]-odd[0]\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            even_list = list1[i]\n            print(f\"even: {even_list}\")\n        else:\n            odd_list = list1[i]\n            print(f\"odd: {odd_list}\")\n        i = i + 1\n    return(abs(even_list - odd_list))\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    first_even = list1[0]\n    first_odd = list1[1]\n    print(first_odd - first_even)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    try:\n        # checking if the list is empty\n        if list1==[]:\n            print('The list is empty')\n        else:\n            even_list=[]\n            odd_list=[]\n            for i in list1:\n                if i%2==0:\n                    even_list.append(i)\n                else:\n                    odd_list.append(i)\n            print('The first even number is: ',min(even_list))\n            print('The first odd number is: ',min(odd_list))\n            print('The difference is: ',abs(min(even_list)-min(odd_list)))\n    except Exception as e:\n        print('Error:',e)\ndiff_even_odd([5, 2, 8, 9, 7])\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if(str1[i]!= str2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    count = 0\n    i = 0\n    while(i<len(str1)):\n        if(str1[i]!=str2[i]):\n            if(str1[i]=='x' and str2[i]!='0'):\n                if(str1[i+1]==str2[i]):\n                    count+=1\n                    i+=2\n                else:\n                    count+=1\n                    i+=1\n            elif(str2[i]=='x' and str1[i]!='0'):\n                if(str1[i+1]==str2[i]):\n                    count+=1\n                    i+=2\n                else:\n                    count+=1\n                    i+=1\n            else:\n                count+=1\n                i+=1\n        else:\n            i+=1\n    return count\nprint(min_Swaps('1011010','1011011'))\nprint(min_Swaps('101010','101101'))\nprint(min_Swaps('1011010','101011'))\nprint(min_Swaps('101010','101101'))\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def get_str_from_int(num) :\n        '''\n        Method to obtain binary representation of a given integer.\n        '''\n        return format(num,'b')\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # Consider all the remaining as characters to swap\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # print('str1', str1)\n    # print('str2', str2)\n    def max_element(array) : \n        return max(array)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = str1\n    s2 = str2\n    count = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1) \n    m = len(str2) \n    if(n!=m): \n        return -1\n    str1 = str1.replace('1','#')\n    str2 = str2.replace('1','#')\n    str1 = str1.replace('0','1')\n    str2 = str2.replace('0','1')\n    count = 0\n    for i in range(0,n): \n        if(str1[i]!=str2[i]): \n            count+=1\n    return count \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m = len(str1)\n    n = len(str2)\n    dp = [[0 for i in range(n+1)] for j in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],dp[i-1][j],dp[i-1][j-1]) \n    return dp[m][n] \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1 = len(str1) \n    l2 = len(str2) \n    if (l1 > l2) : \n        l = l1 \n    else : \n        l = l2 \n    \n    for i in range(0, l) : \n        if (str1[i]!= str2[i]) : \n            min += 1\n        return min\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #Make both string binary\n    n1=int(str1,2)\n    n2=int(str2,2)\n    print(n1,n2)\n    #Convert both numbers to binary\n    n1=bin(n1)\n    n2=bin(n2)\n    print(n1,n2)\n    #Convert the string to binary\n    n1=n1.replace('0b','')\n    n2=n2.replace('0b','')\n    print(n1,n2)\n    #Convert binary to decimal\n    n1=int(n1,2)\n    n2=int(n2,2)\n    print(n1,n2)\n    #Convert decimal to binary and swap them\n    n1=bin(n1)\n    n1=n1.replace('0b','')\n    n2=bin(n2)\n    n2=n2.replace('0b','')\n    print(n1,n2)\n    #Convert binary to decimal\n    n1=int(n1,2)\n    n2=int(n2,2)\n    print(n1,n2)\n    return n2-n1\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        if type(i) == type([]):\n            size = size + tuple_size(i)\n        elif type(i) == type(()):\n            size = size + tuple_size(i)\n        elif type(i) == type(0):\n            size = size + 1\n        else:\n            size = size + sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total = 0 \n    for item in tuple_list:\n        if type(item) == tuple:\n            total += tuple_size(item)\n        else:\n            total += sys.getsizeof(item)\n    return total\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print('Tuple size:', sys.getsizeof(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (sys.getsizeof(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_tuple = sys.getsizeof(tuple_list)\n    print(\"Tuple size in bytes: \", size_tuple)\n    return size_tuple\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if(len(tuple_list) == 0):\n        return 0\n    tuple_type = type(tuple_list[0])\n    byte_size = sys.getsizeof(tuple_type(0)) * len(tuple_list)\n    return byte_size\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum(sys.getsizeof(i) for i in tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > (len(arr1) + len(arr2)):\n        raise ValueError('K cannot be greater than (len(arr1) + len(arr2))')\n    if len(arr1) == 0 and len(arr2) == 0:\n        raise ValueError('Empty array not supported')\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2):\n        return max(arr1[-1], arr2[-1])\n    i = k // 2 - 1\n    j = k // 2\n    if arr1[i] < arr2[j]:\n        return find_kth(arr1[i+1:], arr2, k - i - 1)\n    else:\n        return find_kth(arr1, arr2[j+1:], k - j - 1)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1) + len(arr2)\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        a = arr1[mid // len(arr1)] if mid < len(arr1) else float('inf')\n        b = arr2[mid - len(arr1)] if mid - len(arr1) >= 0 else float('inf')\n        if a < b:\n            start = mid + 1\n        elif a > b:\n            end = mid - 1\n        else:\n            return arr1[mid // len(arr1)], arr2[mid - len(arr1) // len(arr2)]\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1 = 0\n    p2 = 0\n    count = 0\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n            continue\n        if arr1[i] > arr2[j]:\n            j += 1\n            continue\n        # found common element\n        if i+j == k-1:\n            return arr1[i]\n        elif i+j < k-1:\n            i += 1\n        else:\n            j += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    left = 0\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid > 0 and (arr1[mid - 1] < arr2[0] < arr1[mid] or arr1[mid - 1] < arr2[m - 1] < arr1[mid]) and (arr1[mid] < arr2[0] < arr1[mid + 1] or arr1[mid] < arr2[m - 1] < arr1[mid + 1]):\n            left = mid + 1\n        elif mid < n and (arr1[mid] < arr2[0] < arr1[mid + 1] or arr1[mid] < arr2[m - 1] < arr1[mid + 1]):\n            right = mid - 1\n        elif arr1[mid] < arr2[0] < arr1[mid + 1]:\n            left = mid + 1\n        elif arr1[mid] < arr2[m - 1] < arr1[mid + 1]:\n            right = mid - 1\n    right = max(0, right)\n    left = min(n, left)\n    for i in range(left, right + 1):\n        if arr1[i] == arr2[k - 1]:\n            return arr1[i]\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k <= 0 or k > len(arr1) + len(arr2):\n        return 'k is invalid!'\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = min(k // 2, len(arr1))\n    mid2 = min(k // 2, len(arr2))\n    if arr1[mid1 - 1] < arr2[mid2 - 1]:\n        return find_kth(arr1[mid1:], arr2, k - mid1)\n    else:\n        return find_kth(arr1, arr2[mid2:], k - mid2)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return find_kth_util(arr1, arr2, k, 0, 0, 0)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    power = len(str(number))\n    temp = number\n    while temp > 0:\n        remainder = temp % 10\n        sum += remainder ** power\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp!= 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit ** 3\n        n = n // 10\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Formula to calculate armstrong number: n(n + 1)(n + 2) = 1^3 + 5^3 + 3^3 = 153\n    number_to_str = str(number)\n    length = len(number_to_str)\n    sum_of_digit = 0\n    for digit in number_to_str:\n        sum_of_digit += int(digit) ** length\n    return sum_of_digit == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = int(number)\n    rem = sum = 0\n    lenght = len(number)\n    while num > 0:\n        rem = num%10\n        sum = sum + (rem**lenght)\n        num = num//10\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Function to calculate x raised to the nth power\n    def pow_num(x,n):\n        # check if n is 0\n        if n==0:\n            return 1\n        # else n is not 0\n        else:\n            # call pow_num recursively\n            return x*pow_num(x,n-1)\n    # check if number raised to the 3rd power is equal to the given number\n    if pow_num(number,3) == number:\n        # print the number is armstrong number\n        print(number, \" is an Armstrong number\")\n    # else number is not armstrong number\n    else:\n        # print the number is not an armstrong number\n        print(number, \" is not an Armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    original_num = number\n    sum = 0\n    while number > 0:\n        remainder = number % 10\n        sum += remainder ** 3\n        number = int(number / 10)\n    return sum == original_num\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #Take input from user\n    number_input=int(input(\"Enter a number:\"))\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_length = len(str(number))\n    temp = number\n    sum = 0\n    while(temp!= 0):\n        rem = temp % 10\n        sum = sum + (rem ** num_length)\n        temp = temp // 10\n    if sum == number:\n        print('number is armstrong')\n    else:\n        print('number is not armstrong')\n    return sum\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #Converting the number into string\n    #Why convert it into string? When we check the number is armstrong or not. We have to convert it into string and then it will be easy to check whether it is armstrong or not.\n    number_as_string = str(number)\n    \n    #Converting the number into an array\n    #Why use an array? To check the number is armstrong or not. We have to use an array and then check the number is armstrong or not. If we use string it will not be easy to check the number is armstrong or not.\n    number_as_array = list(number_as_string)\n    \n    #Converting the number into an integer\n    #Why use an integer? We have to check the number is armstrong or not. If we use an integer we have to check the number is armstrong or not.\n    number_as_integer = int(number)\n    \n    #Calculating the sum of the cube of each number\n    #We have to calculate the sum of the cube of each number and then we have to check whether it is equal to the given number or not.\n    sum_of_cubes = 0\n    for i in number_as_array:\n        sum_of_cubes = sum_of_cubes + (int(i)**3)\n    \n    #Checking the number is armstrong or not\n    if sum_of_cubes == number_as_integer:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    n = number\n    \n    for num in range(1,n+1):\n        sum = sum + num\n        average = sum / n\n    \n    print(sum)\n    print(average)\n    return None\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    average = 0\n    for i in range(number + 1):\n        total += i\n        average = total/number\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = (number * (number + 1)) / 2\n    avg_n = sum_n / number\n    return sum_n, avg_n\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    #sum\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    \n    #average\n    avg = sum/number\n    \n    return sum, avg\n    \ndef sum_avg_gen(number):\n    '''\n    Write a function to find sum and average of first n natural numbers,\n    where the average is returned as a generator expression.\n    '''\n    \n    #sum\n    sum = (i for i in range(1,number+1))\n    \n    #average\n    avg = sum/number\n    \n    return sum, avg\n    \ndef sum_avg_comp(number):\n    '''\n    Write a function to find sum and average of first n natural numbers,\n    where the average is returned as a comprehension expression.\n    '''\n    \n    #sum\n    sum = sum(i for i in range(1,number+1))\n    \n    #average\n    avg = sum/number\n    \n    return sum, avg\n    \ndef sum_avg_list(number):\n    '''\n    Write a function to find sum and average of first n natural numbers,\n    where the average is returned as a list comprehension.\n    '''\n    \n    #sum\n    sum = [i for i in range(1,number+1)]\n    \n    #average\n    avg = [sum[i]/number for i in range(len(sum))]\n    \n    return sum, avg\n    \ndef sum_avg_map(number):\n    '''\n    Write a function to find sum and average of first n natural numbers,\n    where the average is returned as a map comprehension.\n    '''\n    \n    #sum\n    sum = map(i for i in range(1,number+1))\n    \n    #average\n    avg = map(sum[i]/number for i in range(len(sum)))\n    \n    return sum, avg\n    \ndef sum_avg_nested_gen(number):\n    '''\n    Write a function to find sum and average of first n natural numbers,\n    where the average is returned as a nested generator expression.\n    '''\n    \n    #sum\n    sum = (i for i in range(1,number+1))\n    \n    #average\n    avg = (sum[i]/number for i in range(len(sum)))\n    \n    return sum, avg\n    \ndef sum_avg_nested_comp(number):\n    '''\n    Write a function to find sum and average of first n natural numbers,\n    where the average is returned as a nested comprehension expression.\n    '''\n    \n    #sum\n    sum = [i for i in range(1,number+1)]\n    \n    #average\n    avg = [(sum[i]/number for i in range(len(sum)))]\n    \n    return sum, avg\n    \ndef sum_avg_nested_list(number):\n    '''\n    Write a function to find sum and average of first n natural numbers,\n    where the average is returned as a nested list comprehension.\n    '''\n    \n    #sum\n    sum = [i for i in range(1,number+1)]\n    \n    #average\n    avg = [sum[i]/number for i in range(len(sum))]\n    \n    return sum, avg\n    \ndef sum_avg_nested_map(number):\n    '''\n    Write a function to find sum and average of first n natural numbers,\n    where the average is returned as a nested map comprehension.\n    '''\n    \n    #sum\n    sum = map(i for i in range(1,number+1))\n    \n    #average\n    avg = map(sum[i]/number for i in range(len(sum)))\n    \n    return sum, avg\n    \ndef main():\n    '''\n    Call the various functions to find sum and average of first n natural\n    numbers, where n is determined by the user.\n    '''\n    \n    #take input\n    while True:\n        try:\n            n = int(input(\"Enter n: \"))\n        except ValueError:\n            print(\"Invalid input.\")\n            continue\n        break\n    \n    #print statements\n    print(\"sum:\", end = \" \")\n    for fn in [sum_average, sum_avg_gen, sum_avg_comp, sum_avg_list,\n                sum_avg_map, sum_avg_nested_gen, sum_avg_nested_comp,\n                sum_avg_nested_list, sum_avg_nested_map]:\n        print(fn.__name__, end = \" \")\n        fn(n)\n    \n    print()\n    print(\"average:\", end = \" \")\n    for fn in [sum_average, sum_avg_gen, sum_avg_comp, sum_avg_list,\n                sum_avg_map, sum_avg_nested_gen, sum_avg_nested_comp,\n                sum_avg_nested_list, sum_avg_nested_map]:\n        print(fn.__name__, end = \" \")\n        fn(n)\n    \n    print()\n    \nmain()"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    for i in range(1,number+1):\n        sum_n = sum_n + i\n    average_n = sum_n/number\n    print(f\"Sum of first {number} numbers is {sum_n}\")\n    print(f\"Average of first {number} numbers is {average_n}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(number):\n        sum = sum + i\n        avg = sum / number\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum = sum + i\n    average = sum / number\n    return (sum, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 1:\n        return \"Enter a valid input\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number+1):\n        count += 1\n        sum += i\n    print(sum)\n    print(sum/count)\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print('Even')\n    else : \n        print('Odd')\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        print (\"Given number is even.\")\n    else : \n        print (\"Given number is odd.\")\n    return None\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return True if n % 2 == 0 else False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2) == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        print(\"{} is Even\".format(n))\n    else : \n        print(\"{} is Odd\".format(n))\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\nprint(is_Even(4))\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = set()\n    for i in range(0, len(str1)):\n        if str1[i] in s:\n            return str1[i]\n        s.add(str1[i])\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = dict()\n    for i in range(len(str1)):\n        if d.get(str1[i]) == None:\n            d[str1[i]] = 1\n        else:\n            return str1[i]\n    return \"No repeated characters\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str(str1)\n    for i in range(0,len(str1)):\n        for j in range(0,len(str1)):\n            if i == j:\n                if str1[i] == str1[j]:\n                    print(str1[i])\n                    return\n    return\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in set(str1):\n        if str1.count(i)>1:\n            print(i)\n            break\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    string = str1\n    for i in range(len(string)):\n        if string.count(string[i]) >= 2:\n            return string[i]\n    return '-'\n    \nprint(first_repeated_char('abcdef'))\nprint(first_repeated_char('abcde'))\nprint(first_repeated_char('abcdea'))\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) >= 2:\n            return char\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    hash_table = dict()\n    for i in range(0, len(str1)):\n        if str1[i] not in hash_table:\n            hash_table[str1[i]] = 1\n        else:\n            hash_table[str1[i]] += 1\n    for key, value in hash_table.items():\n        if value > 1:\n            return key\n    return 'None'\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) >= 2:\n            print('The first repeated character in a given string is : {}'.format(i))\n            break\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # print(\"\\nGiven Number: %s\" % n)\n    # print(\"Min - Max Ludic\")\n    for minval in range(1, n):\n        # print(\"%s - %s\" % (minval, minval+1))\n        for maxval in range(minval+1, n):\n            # print(\"\\t%s - %s\" % (maxval, maxval+1))\n            for midval in range(minval+1, maxval):\n                # print(\"\\t\\t%s - %s\" % (midval, midval+1))\n                ludic = [minval, maxval, midval]\n                if sum(ludic) == n and ludic[0] < ludic[1] < ludic[2]:\n                    print(\"Ludic = %s\" % ludic)\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(1, n):\n        divisors = []\n        for div in range(1, num):\n            if num % div == 0:\n                divisors.append(div)\n        if sum(divisors) == num:\n            ludic.append(num)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2,n):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    def search(num,ludic):\n        if num>=n:\n            return\n        ludic.append(num)\n        if is_ludic(num) == True:\n            return\n        for i in range(10):\n            search(num*10+i,ludic)\n    search(0,ludic)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1]\n    for i in range(1, n):\n        ludic.append(ludic[i - 1] + i * i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n):\n        ludic.append(i)\n        n = str(i)\n        for j in range(1,len(n)):\n            n = str(i)\n            ludic.append(int(n))\n            for k in range(1,len(n)):\n                n = str(i)\n                ludic.append(int(n[0:j]+n[j+1:]))\n                for l in range(1,len(n)):\n                    n = str(i)\n                    ludic.append(int(n[0:j]+n[j+1:k]+n[k+1:]))\n                    for m in range(1,len(n)):\n                        n = str(i)\n                        ludic.append(int(n[0:j]+n[j+1:k]+n[k+1:l]+n[l+1:]))\n                        for n in range(1,len(n)):\n                            n = str(i)\n                            ludic.append(int(n[0:j]+n[j+1:k]+n[k+1:l]+n[l+1:m]+n[m+1:]))\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [x for x in range(1, n+1) if not are_digits_the_same(str(x))]\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(n):\n        if i > 1:\n            for j in range(i):\n                if i % j == 0:\n                    break\n            else:\n                ludic_list.append(i)\n    return ludic_list\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_word(s):\n        return s[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split()[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return ''\n    else:\n        words = s.split(' ')\n        return''.join(reversed(words))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # this method reverses the words in a given string\n    # so we are using a list to store the string\n    # we are splitting the string into individual words\n    # then reversing the order of the words\n    # and joining the list\n    listOfWords = list(s)\n    listOfWords.reverse()\n    revWord = \"\"\n    for c in listOfWords:\n        revWord = revWord + c\n    return revWord\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = []\n    start_word = 0\n    for i, char in enumerate(s):\n        if char =='':\n            words.append(s[start_word:i])\n            start_word = i + 1\n    words.append(s[start_word:])\n    words.reverse()\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split()\n    s_list.reverse()\n    result = \" \".join(s_list)\n    return result\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return''.join(s)"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split(' ')[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the words by space\n    words = s.split(\" \")\n    # reverse the list\n    reversed_words = words[::-1]\n    # Join all the words\n    return \" \".join(reversed_words)\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # if num == 1:\n    #     return False\n    # if num == 2:\n    #     return True\n    # else:\n    #     for i in range(2,num):\n    #         if num % i == 0:\n    #             return False\n    # return True\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        # check for factors\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                print(i, \"times\", num//i, \"is\", num)\n                break\n        else:\n            print(num, \"is a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    else:\n        for x in range(2,num):\n            if num % x == 0:\n                return False\n        return True\ndef even_num(num):\n    '''\n    Write a function to check if the given integer is an even number.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\ndef odd_num(num):\n    '''\n    Write a function to check if the given integer is an odd number.\n    '''\n    if num % 2!= 0:\n        return True\n    else:\n        return False\ndef positive_num(num):\n    '''\n    Write a function to check if the given integer is a positive number.\n    '''\n    if num > 0:\n        return True\n    else:\n        return False\ndef negative_num(num):\n    '''\n    Write a function to check if the given integer is a negative number.\n    '''\n    if num < 0:\n        return True\n    else:\n        return False\ndef divisibility_check(num,divisor):\n    '''\n    Write a function to check if the given integer is divisible by the given divisor.\n    '''\n    if num % divisor == 0:\n        return True\n    else:\n        return False\ndef factorial(num):\n    '''\n    Write a function to find the factorial of the given integer.\n    '''\n    if num == 1:\n        return num\n    else:\n        return num * factorial(num - 1)\ndef fibonacci(num):\n    '''\n    Write a function to find the nth Fibonacci term.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return fibonacci(num - 1) + fibonacci(num - 2)\ndef palindrome(num):\n    '''\n    Write a function to check if the given integer is a palindrome.\n    '''\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False\ndef armstrong_num(num):\n    '''\n    Write a function to check if the given integer is an Armstrong number.\n    '''\n    arm_sum = 0\n    for i in range(0,len(str(num))):\n        arm_sum += pow(int(str(num)[i]),len(str(num)))\n    if arm_sum == num:\n        return True\n    else:\n        return False\ndef num_length(num):\n    '''\n    Write a function to return the length of the given integer.\n    '''\n    return len(str(num))\ndef num_to_word(num):\n    '''\n    Write a function to convert the given integer to words.\n    '''\n    if num == 0:\n        return 'zero'\n    elif num < 10:\n        return num_list[num]\n    elif num < 20:\n        return unit_tens[num - 10]\n    else:\n        ones = int(num % 10)\n        tens = int((num % 100) / 10)\n        hundreds = int(num / 100)\n        if num == 100:\n            return num_list[hundreds] +'hundred'\n        elif num == 200:\n            return num_list[hundreds] +'hundred and'+ num_list[tens] +'' + unit_tens[ones]\n        else:\n            return num_list[hundreds] +'hundred and'+ num_to_word(tens) +'' + num_list[ones]\ndef base_converter(num,base):\n    '''\n    Write a function to convert a decimal number to the given base.\n    '''\n    if num == 0:\n        return 0\n    elif num < base:\n        return num_list[num]\n    else:\n        return base_converter(int(num / base),base) + num_list[int(num % base)]\ndef harmonic_num(num):\n    '''\n    Write a function to return the harmonic sum of the given integer.\n    '''\n    sum = 0\n    for i in range(1,num + 1):\n        sum += 1/i\n    return sum\ndef cesar_shift(num,shift):\n    '''\n    Write a function to encrypt the given text with Caesar shift.\n    '''\n    shift_list = list(string.ascii_lowercase)\n    shift_list[0] = 'z'\n    shift_list[25] = 'a'\n    shift_list[26] = 'b'\n    shift_list[27] = 'c'\n    shift_list[28] = 'd'\n    shift_list[29] = 'e'\n    shift_list[30] = 'f'\n    shift_list[31] = 'g'\n    shift_list[32] = 'h'\n    shift_list[33] = 'i'\n    shift_list[34] = 'j'\n    shift_list[35] = 'k'\n    shift_list[36] = 'l'\n    shift_list[37] ='m'\n    shift_list[38] = 'n'\n    shift_list[39] = 'o'\n    shift_list[40] = 'p'\n    shift_list[41] = 'q'\n    shift_list[42] = 'r'\n    shift_list[43] ='s'\n    shift_list[44] = 't'\n    shift_list[45] = 'u'\n    shift_list[46] = 'v'\n    shift_list[47] = 'w'\n    shift_list[48] = 'x'\n    shift_list[49] = 'y'\n    shift_list[50] = 'z'\n    shift_list[51] = 'a'\n    shift_list[52] = 'b'\n    shift_list[53] = 'c'\n    shift_list[54] = 'd'\n    shift_list[55] = 'e'\n    shift_list[56] = 'f'\n    shift_list[57] = 'g'\n    shift_list[58] = 'h'\n    shift_list[59] = 'i'\n    shift_list[60] = 'j'\n    shift_list[61] = 'k'\n    shift_list[62] = 'l'\n    shift_list[63] ='m'\n    shift_list[64] = 'n'\n    shift_list[65] = 'o'\n    shift_list[66] = 'p'\n    shift_list[67] = 'q'\n    shift_list[68] = 'r'\n    shift_list[69] ='s'\n    shift_list[70] = 't'\n    shift_list[71] = 'u'\n    shift_list[72] = 'v'\n    shift_list[73] = 'w'\n    shift_list[74] = 'x'\n    shift_list[75] = 'y'\n    shift_list[76] = 'z'\n    num_list = list(str(num))\n    for i in range(len(num_list)):\n        if num_list[i] in shift_list:\n            if shift_list.index(num_list[i]) + shift > len(shift_list):\n                num_list[i] = shift_list[shift_list.index(num_list[i]) + shift - len(shift_list)]\n            else:\n                num_list[i] = shift_list[shift_list.index(num_list[i]) + shift]\n    return ''.join(num_list)\ndef num_from_text(text):\n    '''\n    Write a function to convert the given text to a number.\n    '''\n    text_list = list(text)\n    num = 0\n    for i in range(len(text_list)):\n        if text_list[i].isnumeric() == True:\n            num += int(text_list[i]) * 10 ** (len(text_list) - i - 1)\n        elif text_list[i].isalpha() == True:\n            num += shift_list.index(text_list[i]) * 10 ** (len(text_list) - i - 1)\n    return num\ndef encrypt_word(wor"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num==1:\n        return False\n    if num==2:\n        return True\n    elif num%2==0:\n        return False\n    for i in range(3,int(num**0.5)+1,2):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(\"{} is not a prime number\".format(num))\n                break\n        else:\n            print(\"{} is a prime number\".format(num))\n    else:\n        print(\"{} is not a prime number\".format(num))\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree*math.pi)/180\ndef cosine_law(c1,c2,c3):\n    '''\n    Write a function to solve a triangle given the lengths of its sides in\n       Circles (c1,c2,c3). The function should return the length of the third side of the\n       triangle and the area of the triangle (both in Circles).\n    '''\n    c1=c1/2\n    c2=c2/2\n    c3=c3/2\n    a=c2*c2+c3*c3-c1*c1\n    b=2*c3*c2\n    c=2*c1*c2\n    d=b*b-4*a*c\n    if d>=0:\n        d=d**0.5\n        x=0.5*(-b+d)/a\n        y=0.5*(-b-d)/a\n        if y>=0 and y<=1 and x>=0 and x<=1:\n            return (c1+c2+c3+x*(c2-c1)+y*(c3-c1),c1*c1+c2*c2+x*x*(c1-c2)+y*y*(c2-c3))\n    else:\n        return 0\ndef arctan_law(y,x):\n    '''\n    Write a function to solve a triangle given the coordinate of a vertex and the\n       two angles (in radians) of the triangle. The function should return the length of the third side of the\n       triangle and the area of the triangle (both in Circles).\n    '''\n    a=y/x\n    if a>1:\n        a=1/a\n    b=(y*y+x*x)/(2*y*x)\n    if b>1:\n        b=1/b\n    if b==1:\n        return (a*a*math.pi*2,0)\n    elif b==0:\n        return (0,0)\n    else:\n        return (a*a*(1-b*b)/(2*b),a*a*(1-b*b)*math.pi/2)\ndef circle_intersection_area(c1,c2,c3):\n    '''\n    Write a function to solve a triangle given the lengths of its sides in\n       Circles (c1,c2,c3). The function should return the length of the third side of the\n       triangle and the area of the triangle (both in Circles).\n    '''\n    c1=c1/2\n    c2=c2/2\n    c3=c3/2\n    a=c2*c2+c3*c3-c1*c1\n    b=2*c3*c2\n    c=2*c1*c2\n    d=b*b-4*a*c\n    if d>=0:\n        d=d**0.5\n        x=0.5*(-b+d)/a\n        y=0.5*(-b-d)/a\n        if y>=0 and y<=1 and x>=0 and x<=1:\n            return (c1+c2+c3+x*(c2-c1)+y*(c3-c1),c1*c1+c2*c2+x*x*(c1-c2)+y*y*(c2-c3))\n    else:\n        return 0\ndef circle_intersection_area_2(c1,c2,c3):\n    '''\n    Write a function to solve a triangle given the lengths of its sides in\n       Circles (c1,c2,c3). The function should return the length of the third side of the\n       triangle and the area of the triangle (both in Circles).\n    '''\n    c1=c1/2\n    c2=c2/2\n    c3=c3/2\n    a=c2*c2+c3*c3-c1*c1\n    b=2*c3*c2\n    c=2*c1*c2\n    d=b*b-4*a*c\n    if d>=0:\n        d=d**0.5\n        x=0.5*(-b+d)/a\n        y=0.5*(-b-d)/a\n        if y>=0 and y<=1 and x>=0 and x<=1:\n            return (c1+c2+c3+x*(c2-c1)+y*(c3-c1),c1*c1+c2*c2+x*x*(c1-c2)+y*y*(c2-c3))\n    else:\n        return 0\ndef circle_intersection_area_3(c1,c2,c3):\n    '''\n    Write a function to solve a triangle given the lengths of its sides in\n       Circles (c1,c2,c3). The function should return the length of the third side of the\n       triangle and the area of the triangle (both in Circles).\n    '''\n    c1=c1/2\n    c2=c2/2\n    c3=c3/2\n    a=c2*c2+c3*c3-c1*c1\n    b=2*c3*c2\n    c=2*c1*c2\n    d=b*b-4*a*c\n    if d>=0:\n        d=d**0.5\n        x=0.5*(-b+d)/a\n        y=0.5*(-b-d)/a\n        if y>=0 and y<=1 and x>=0 and x<=1:\n            return (c1+c2+c3+x*(c2-c1)+y*(c3-c1),c1*c1+c2*c2+x*x*(c1-c2)+y*y*(c2-c3))\n    else:\n        return 0\ndef circle_intersection_area_4(c1,c2,c3):\n    '''\n    Write a function to solve a triangle given the lengths of its sides in\n       Circles (c1,c2,c3). The function should return the length of the third side of the\n       triangle and the area of the triangle (both in Circles).\n    '''\n    c1=c1/2\n    c2=c2/2\n    c3=c3/2\n    a=c2*c2+c3*c3-c1*c1\n    b=2*c3*c2\n    c=2*c1*c2\n    d=b*b-4*a*c\n    if d>=0:\n        d=d**0.5\n        x=0.5*(-b+d)/a\n        y=0.5*(-b-d)/a\n        if y>=0 and y<=1 and x>=0 and x<=1:\n            return (c1+c2+c3+x*(c2-c1)+y*(c3-c1),c1*c1+c2*c2+x*x*(c1-c2)+y*y*(c2-c3))\n    else:\n        return 0\ndef circle_intersection_area_5(c1,c2,c3):\n    '''\n    Write a function to solve a triangle given the lengths of its sides in\n       Circles (c1,c2,c3). The function should return the length of the third side of the\n       triangle and the area of the triangle (both in Circles).\n    '''\n    c1=c1/2\n    c2=c2/2\n    c3=c3/2\n    a=c2*c2+c3*c3-c1*c1\n    b=2*c3*c2\n    c=2*c1*c2\n    d=b*b-4*a*c\n    if d>=0:\n        d=d**0.5\n        x=0.5*(-b+d)/a\n        y=0.5*(-b-d)/a\n        if y>=0 and y<=1 and x>"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef sin(radian):\n    '''\n    Write a function to compute sine of an angle.\n    '''\n    return math.sin(radian)\ndef cos(radian):\n    '''\n    Write a function to compute cosine of an angle.\n    '''\n    return math.cos(radian)\ndef tan(radian):\n    '''\n    Write a function to compute tangent of an angle.\n    '''\n    return math.tan(radian)\ndef sqrt(x):\n    '''\n    Write a function to compute square root of a number.\n    '''\n    return math.sqrt(x)\ndef floor(number):\n    '''\n    Write a function to compute floor of a number.\n    '''\n    return math.floor(number)\ndef ceil(number):\n    '''\n    Write a function to compute ceiling of a number.\n    '''\n    return math.ceil(number)\ndef degrees_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef decimal_degree(degree):\n    '''\n    Write a function to convert degrees to decimal degree.\n    '''\n    return degree/math.pi*180\ndef distance(x,y):\n    '''\n    Write a function to compute distance between two points.\n    '''\n    return math.sqrt(x*x+y*y)\ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    for i in range(2,int(math.sqrt(num))):\n        if num%i==0:\n            return False\n    return True\ndef factorial(n):\n    '''\n    Write a function to compute factorial of a number.\n    '''\n    return math.factorial(n)\ndef is_perfect_square(number):\n    '''\n    Write a function to check if a number is a perfect square or not.\n    '''\n    temp = int(math.sqrt(number))\n    if number==temp*temp:\n        return True\n    return False\ndef leap_year(year):\n    '''\n    Write a function to check if a year is a leap year or not.\n    '''\n    return year%4==0\ndef is_perfect_cube(number):\n    '''\n    Write a function to check if a number is a perfect cube or not.\n    '''\n    if number==int(math.pow(number,1/3)):\n        return True\n    return False\ndef is_square(number):\n    '''\n    Write a function to check if a number is a square or not.\n    '''\n    temp = int(math.sqrt(number))\n    if number==temp*temp:\n        return True\n    return False\ndef is_cube(number):\n    '''\n    Write a function to check if a number is a cube or not.\n    '''\n    if number==int(math.pow(number,1/3)):\n        return True\n    return False\ndef is_cube_square(number):\n    '''\n    Write a function to check if a number is cube and square of same number or not.\n    '''\n    if is_cube(number) and is_square(number):\n        return True\n    return False\ndef is_square_cube(number):\n    '''\n    Write a function to check if a number is square and cube of same number or not.\n    '''\n    if is_square(number) and is_cube(number):\n        return True\n    return False\ndef is_power_of(number,power):\n    '''\n    Write a function to check if a number is a power of a given power or not.\n    '''\n    if number==int(math.pow(number,1/power)):\n        return True\n    return False\ndef is_power_of_three(number):\n    '''\n    Write a function to check if a number is a power of three or not.\n    '''\n    if is_power_of(number,3):\n        return True\n    return False\ndef is_power_of_two(number):\n    '''\n    Write a function to check if a number is a power of two or not.\n    '''\n    if is_power_of(number,2):\n        return True\n    return False\ndef is_power_of_five(number):\n    '''\n    Write a function to check if a number is a power of five or not.\n    '''\n    if is_power_of(number,5):\n        return True\n    return False\ndef is_power_of_seven(number):\n    '''\n    Write a function to check if a number is a power of seven or not.\n    '''\n    if is_power_of(number,7):\n        return True\n    return False\ndef is_power_of_two_five(number):\n    '''\n    Write a function to check if a number is a power of two and five or not.\n    '''\n    if is_power_of(number,2) and is_power_of(number,5):\n        return True\n    return False\ndef is_power_of_two_seven(number):\n    '''\n    Write a function to check if a number is a power of two and seven or not.\n    '''\n    if is_power_of(number,2) and is_power_of(number,7):\n        return True\n    return False\ndef is_power_of_three_five(number):\n    '''\n    Write a function to check if a number is a power of three and five or not.\n    '''\n    if is_power_of(number,3) and is_power_of(number,5):\n        return True\n    return False\ndef is_power_of_three_seven(number):\n    '''\n    Write a function to check if a number is a power of three and seven or not.\n    '''\n    if is_power_of(number,3) and is_power_of(number,7):\n        return True\n    return False\ndef is_power_of_five_seven(number):\n    '''\n    Write a function to check if a number is a power of five and seven or not.\n    '''\n    if is_power_of(number,5) and is_power_of(number,7):\n        return True\n    return False\ndef is_power_of_two_three_five(number):\n    '''\n    Write a function to check if a number is a power of two, three and five or not.\n    '''\n    if is_power_of(number,2) and is_power_of(number,3) and is_power_of(number,5):\n        return True\n    return False\ndef is_power_of_two_three_seven(number):\n    '''\n    Write a function to check if a number is a power of two, three and seven or not.\n    '''\n    if is_power_of(number,2) and is_power_of(number,3) and is_power_of(number,7):\n        return True\n    return False\ndef is_power_of_two_five_seven(number):\n    '''\n    Write a function to check if a number is a power of two, five and seven or not.\n    '''\n    if is_power_of(number,2) and is_power_of(number,5) and is_power_of(number,7):\n        return True\n    return False\ndef is_power_of_three_five_seven(number):\n    '''\n    Write a function to check if a number is a power of three, five and seven or not.\n    '''\n    if is_power_of(number,3) and is_power_of(number,5) and is_power_of(number,7):\n        return True\n    return False\ndef is_power_of_two_three_five_seven(number):\n    '''\n    Write a function to check if a number is a power of two, three, five and seven or not.\n    '''\n    if is_power_of(number,2) and is_power_of(number,3) and is_power_of(number,5) and is_power_of(number,7):\n        return True\n    return False\ndef is_power_of_tw"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi*degree/180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return(math.pi*degree/180)\n    \ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return(180*radian/math.pi)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef get_distance(x1, y1, x2, y2):\n    '''\n    Write a function to get the distance between two points.\n    '''\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\ndef get_intersection_points(x1, y1, x2, y2, x3, y3, x4, y4):\n    '''\n    Write a function to get the intersection point between two lines.\n    '''\n    a1 = y2-y1\n    b1 = x1-x2\n    c1 = x2*y1 - x1*y2\n    a2 = y4-y3\n    b2 = x3-x4\n    c2 = x4*y3 - x3*y4\n    if b1*a2 - b2*a1 == 0:\n        return 'Not Found'\n    x = (c1*a2 - c2*a1) / (b1*a2 - b2*a1)\n    y = (c2*b1 - c1*b2) / (b1*a2 - b2*a1)\n    return x, y\ndef get_slope(x1, y1, x2, y2):\n    '''\n    Write a function to get the slope of a line.\n    '''\n    return (y2-y1) / (x2-x1) if x2-x1!= 0 else 0\ndef get_x_y_from_slope_and_point(slope, x, y):\n    '''\n    Write a function to get the x and y from a slope and a point.\n    '''\n    if slope!= 0:\n        y = (slope * x) + y\n    return x, y\ndef get_perpendicular_bisector(x1, y1, x2, y2, x_intersection, y_intersection):\n    '''\n    Write a function to get the perpendicular bisector of a line.\n    '''\n    dx = x2-x1\n    dy = y2-y1\n    x_length = abs(dx)\n    y_length = abs(dy)\n    if x_length > y_length:\n        slope = get_slope(x1, y1, x2, y2)\n        x_new, y_new = get_x_y_from_slope_and_point(slope, x_intersection, y_intersection)\n        if x1 > x2:\n            x1, x2 = x2, x1\n        slope = get_slope(x1, y1, x_new, y_new)\n        x1, x2 = x_new, x1\n        y1, y2 = y_new, y1\n    else:\n        slope = get_slope(y1, x1, y2, x2)\n        x_new, y_new = get_x_y_from_slope_and_point(slope, x_intersection, y_intersection)\n        if y1 > y2:\n            y1, y2 = y2, y1\n        slope = get_slope(y1, x1, y_new, x_new)\n        x1, x2 = x_new, x1\n        y1, y2 = y_new, y1\n    return x1, y1, x2, y2, slope\ndef get_perpendicular_bisector_point_on_line(x1, y1, x2, y2, x_intersection, y_intersection):\n    '''\n    Write a function to get the perpendicular bisector point on a line.\n    '''\n    x1, y1, x2, y2, slope = get_perpendicular_bisector(x1, y1, x2, y2, x_intersection, y_intersection)\n    return x1, y1, x2, y2\ndef get_distance_between_points(x1, y1, x2, y2):\n    '''\n    Write a function to get the distance between two points.\n    '''\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\ndef get_intersection_point_of_two_lines(x1, y1, x2, y2, x3, y3, x4, y4):\n    '''\n    Write a function to get the intersection point between two lines.\n    '''\n    a1 = y2-y1\n    b1 = x1-x2\n    c1 = x2*y1 - x1*y2\n    a2 = y4-y3\n    b2 = x3-x4\n    c2 = x4*y3 - x3*y4\n    if b1*a2 - b2*a1 == 0:\n        return 'Not Found'\n    x = (c1*a2 - c2*a1) / (b1*a2 - b2*a1)\n    y = (c2*b1 - c1*b2) / (b1*a2 - b2*a1)\n    return x, y\ndef get_distance_between_two_points(x1, y1, x2, y2):\n    '''\n    Write a function to get the distance between two points.\n    '''\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\ndef get_intersection_point_of_two_lines(x1, y1, x2, y2, x3, y3, x4, y4):\n    '''\n    Write a function to get the intersection point between two lines.\n    '''\n    a1 = y2-y1\n    b1 = x1-x2\n    c1 = x2*y1 - x1*y2\n    a2 = y4-y3\n    b2 = x3-x4\n    c2 = x4*y3 - x3*y4\n    if b1*a2 - b2*a1 == 0:\n        return 'Not Found'\n    x = (c1*a2 - c2*a1) / (b1*a2 - b2*a1)\n    y = (c2*b1 - c1*b2) / (b1*a2 - b2*a1)\n    return x, y\ndef get_slope_two_points(x1, y1, x2, y2):\n    '''\n    Write a function to get the slope between two points.\n    '''\n    return (y2-y1) / (x2-x1) if x2-x1!= 0 else 0\ndef get_slope_between_two_lines(x1, y1, x2, y2, x3, y3, x4, y4):\n    '''\n    Write a function to get the slope between two lines.\n    '''\n    a1 = y2-y1\n    b1 = x1-x2\n    c1 = x2*y1 - x1*y2\n    a2 = y4-y3\n    b2 = x3-x4\n    c2 = x4*y3 - x3*y4\n    if b1*a2 - b2*a1 == 0:\n        return 'Not Found'\n    slope = (c1*a2 - c2*a1) / (b1*a2 - b2*a1)\n    return slope\ndef get_intersection_point_of_two_lines(x1, y1, x2, y2, x3, y3, x4, y4):\n    '''\n    Write a function to get the intersection point between two lines.\n    '''\n    a1 = y2-y1\n    b1 = x1-x2\n    c1 = x2*y1 - x1*y2\n    a2 = y4-y3\n    b2 = x3-x4\n    c2 = x4*y3 - x3*y4\n    if b1*a2 - b2*a1 == 0:\n        return 'Not Found'\n    x = (c1*a2 - c"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text).group(0), re.search(pattern, text).start(), re.search(pattern, text).end()\n    # return re.search(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    def find_index(text, pattern):\n        matches = [i for i in re.finditer(pattern, text)]\n        if matches:\n            return matches[0]\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = pattern.lower()\n    pattern = re.escape(pattern)\n    pattern = re.compile(pattern)\n    results = pattern.finditer(text)\n    match = None\n    start_index = None\n    end_index = None\n    for result in results:\n        if match:\n            continue\n        match = result.group()\n        start_index = result.start()\n        end_index = result.end()\n    return match, start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = pattern\n    compiled_pattern = re.compile(pattern)\n    match = compiled_pattern.search(text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #Regex pattern for finding numbers\n    number_pattern = '[0-9]+'\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    '''\n    INPUT:\n    text = \"Today is a beautiful day\"\n    pattern = \"beautiful\"\n    \n    OUTPUT:\n    substring = \"beautiful\"\n    start = 3\n    end = 9\n    '''\n    \n    # Split the string into words\n    word_list = text.split()\n    \n    # If the pattern is in the string\n    if pattern in word_list:\n        \n        # Find the first index of the pattern\n        first_index = word_list.index(pattern)\n        \n        # Find the last index of the pattern\n        last_index = word_list.index(pattern) + word_list[word_list.index(pattern)+1:].index(pattern) + 1\n        \n        # Split the substring\n        substring = text[first_index:last_index]\n        \n        # Find the index of the substring\n        start = text.index(substring)\n        \n        # Find the index of the substring\n        end = start + len(substring)\n        \n        # Display the substring\n        print(\"Substring: \" + substring)\n        \n        # Display the start index\n        print(\"Start index: \" + str(start))\n        \n        # Display the end index\n        print(\"End index: \" + str(end))\n        \n    # If the pattern is not in the string\n    else:\n        print(\"The pattern is not in the string\")\n    \n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # write your code here\n    return pattern.findall(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #return re.search(pattern, text)\n    #return re.search(r'foo','spam foo ham').group()\n    #return re.search(r'(.+)','spam  foo  ham  ')\n    #return re.search(r'(.+?)','spam  foo  ham  ')\n    #return re.search(r'(.+?)','spam spam foo spam')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+?', 'one two three')\n    #return re.search(r'\\w+"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return match.group(0), start, end\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    p = re.compile(pattern)\n    for m in p.finditer(text):\n        print(m)\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1] \n    for i in range(n): \n        bell.append(bell[i] * (n - i) // (i + 1)) \n    return bell[n] \n    \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_number = [[1 for i in range(n+1)] for j in range(n+1)]\n    \n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            bell_number[i][j] = bell_number[i-1][j] + bell_number[i][j-1]\n    return bell_number[n][n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    b_0 = 1\n    b_1 = 1\n    b_2 = 2\n    if n == 0:\n        return b_0\n    elif n == 1:\n        return b_1\n    elif n == 2:\n        return b_2\n    else:\n        for i in range(3, n+1):\n            b_0, b_1, b_2 = b_2, b_1+b_2, b_0+b_2\n        return b_2\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=0\n    bell1=0\n    bell2=1\n    for i in range(1,n+1):\n        bell=bell1+bell2\n        bell1=bell2\n        bell2=bell\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_nums = [0, 1, 2]\n    for i in range(3, n): \n        bell_nums.append(bell_nums[i-1] + bell_nums[i-2])\n    return bell_nums[n - 1] \n    \ndef main(): \n    n = int(input(\"Enter a number for nth Bell number: \"))\n    print(f\"{n}th Bell number is {bell_Number(n)}.\")\n    \nif __name__ == '__main__': \n    main() "
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1, 1]\n    for i in range(3, n+1): \n        bell.append(bell[i-1] + bell[i-2]) \n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = bell[1] = 1\n    for i in range(2,n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0: \n        return None\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n - 1) + bell_Number(n - 2) \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    removed_item = list1[L]\n    list1.pop(L)\n    return [removed_item, list1]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # return list1[0:L] + list1[L+1:]\n    del list1[L]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L <= 1:\n        return list1\n    else:\n        return remove_kth_element(list1[:-1], L-1) + list1[-1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Write your code here\n    list_1 = []\n    list_2 = []\n    list_3 = []\n    list_1 = list1[0:L]\n    list_2 = list1[L:]\n    for i in range(0,len(list_1)):\n        list_3.append(list_1[i])\n    for j in range(0,len(list_2)):\n        list_3.append(list_2[j])\n    return list_3\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print(\"List:\", list1)\n    L = int(input(\"Enter the kth element: \"))\n    list1.remove(L)\n    print(\"Updated List:\", list1)\n    return(list1)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = L-1\n    list1.pop(n)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del list1[L]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Your code here\n    # Don't remove the space below, it's for a reason.\n    return\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L = L\n    new_list = []\n    for item in list1:\n        if item!= list1[L]:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in list1:\n        if i!= L:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth = []\n    for i in range(len(test_list)):\n        max_of_nth.append(max(test_list[i]))\n    return max_of_nth[N - 1]\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # for row in test_list:\n    #     print(row)\n    # print(len(test_list))\n    # print(len(test_list[0]))\n    # print(\"###########\")\n    list_of_lists_of_nth = []\n    # print(len(test_list[0]))\n    # for row in test_list:\n    #     list_of_lists_of_nth.append([row[n] for n in range(len(test_list[0]))])\n    # print(list_of_lists_of_nth)\n    # print(test_list[0][0])\n    # print(test_list[0][1])\n    # print(test_list[1][0])\n    # print(test_list[1][1])\n    # print(test_list[2][0])\n    # print(test_list[2][1])\n    for row in test_list:\n        list_of_lists_of_nth.append([row[n] for n in range(N)])\n    # print(list_of_lists_of_nth)\n    return max(list_of_lists_of_nth)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list:\n        return None\n    \n    col = [j[N] for j in test_list]\n    \n    return max(col)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    col = 0\n    max_val = 0\n    while col < len(test_list[0]):\n        for row in test_list:\n            if row[col] > max_val:\n                max_val = row[col]\n        col += 1\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = []\n    for elem in test_list:\n        result.append(elem[N])\n    return max(result)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) < N:\n        return 0\n    return max([el[N-1] for el in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N >= len(test_list):\n        return 0\n    else:\n        return max([row[N] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if type(test_list) == type([]):\n        return max_of_nth(test_list[0], N)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    return [lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merge_lst = []\n    for list in lst:\n        merge_lst.append([list[0], list[1]])\n    return merge_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    output = []\n    for each in lst:\n        output.append([each[0], each[1]])\n    return output\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0],i[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0][0], lst[1][1]]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0::2],lst[1::2]]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lista1=[]\n    for i in range(len(lst)):\n        lista1.append(lst[i][0])\n    lista2=[]\n    for i in range(len(lst)):\n        lista2.append(lst[i][1])\n    return list(zip(lista1,lista2))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst.sort(key=lambda x:x[0])\n    return [[i[0] for i in lst],[i[1] for i in lst]]\n    \ndef remove_digits(string):  \n    '''\n    Write a python function which takes a string as a parameter, and removes all the digits from the string and returns the resulting string.\n    '''\n    return ''.join([i for i in string if not i.isdigit()])\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(sum(test_list[0:i+1]))\n    return return_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum_list=[]\n    sum_num=0\n    for i in range(len(test_list)):\n        sum_num=sum_num+test_list[i]\n        cum_sum_list.append(sum_num)\n    return cum_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for x in test_list:\n        cum_sum += x\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    sum_list.append(test_list[0])\n    for i in range(1,len(test_list)):\n        sum_list.append(sum_list[i-1]+test_list[i])\n    return sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    x = 0\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n        x += 1\n        print('{} : {}'.format(x, cum_sum))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Iterate over the list and add each element to the result.\n    # For each element in the list\n    # add the element to the total.\n    result = []\n    total = 0\n    for element in test_list:\n        total = total + element\n        result.append(total)\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list_of_tuples = []\n    for i in range(len(test_list)):\n        list_of_tuples.append(tuple(test_list[:i+1]))\n    result = []\n    for i in list_of_tuples:\n        result.append(sum(i))\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    count = 0\n    total = 0\n    for i in test_list:\n        if count == 0:\n            count += 1\n            total += i\n        else:\n            total += i\n    print(total)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    count = 0\n    for item in nums:\n        sum += item[0]\n        count += 1\n    return [round((sum/count), 2)]\n    "
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(tup[0] for tup in nums)/len(nums)), (sum(tup[1] for tup in nums)/len(nums))]\n    # nums_list = []\n    # for tup in nums:\n    #     nums_list.append(tup[0])\n    #     nums_list.append(tup[1])\n    # return [sum(nums_list)/len(nums), sum(nums_list)/len(nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    print(nums[1])\n    for i in range(len(nums)):\n        print(i, sum(nums[i])/len(nums[i]))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # print(sum(t[0] for t in nums))\n    return [sum(t[0] for t in nums) / len(nums) for t in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x) / len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #create list to store average values\n    average_list = []\n    #iterate through each tuple of numbers\n    for num in nums:\n        #calculate average for each tuple\n        average = sum(num) / len(num)\n        #add the average to the list\n        average_list.append(average)\n    #return the list of averages\n    return average_list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize a list to store the averages of each column\n    average_list = []\n    # For each column in the tuple\n    for column in nums:\n        # Calculate the average of each column\n        average = sum(column)/len(column)\n        # Append the average of each column to the list\n        average_list.append(average)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return_list = []\n    for num in nums:\n        add_total = 0\n        for i in num:\n            add_total += i\n        return_list.append(add_total / len(num))\n    return return_list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    s = []\n    for i in nums:\n        s.append(sum(i)/len(i))\n    return tuple(s)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # TODO: Write your code here\n    return tuple(i % j for i,j in zip(test_tup1,test_tup2))\n    \n    \n    \ndef tuple_expansion(tup):\n    '''\n    Write a function which expands a given tuple n times\n    '''\n    # TODO: Write your code here\n    return ()\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x%y for x,y in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x%y for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert(len(test_tup1) == len(test_tup2))\n    return tuple([(a % b) for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_tup = ()\n    for tup_el in range(len(test_tup1)):\n        mod_tup += (test_tup1[tup_el] % test_tup2[tup_el],)\n    return mod_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"The tuples are not of equal length\"\n    return tuple(tup1 % tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([test_tup1[i] % test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(tup1 % tup2 for tup1,tup2 in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    elif steps < 0:\n        return -1\n    elif d == 0:\n        return 1\n    else:\n        return min(min_Jumps(steps - 1, d - 1), min_Jumps(steps - 1, d)) + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    import math\n    if d <= 0:\n        return 0\n    if d == 1 or d == steps:\n        return 1\n    \n    if (steps - d)%2:\n        return (steps - d)//2 + 1\n    else:\n        return (steps - d)//2\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d < 0:\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    pos = [0, 0]\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # if d = 0 we dont have to jump\n    if d == 0: \n        return 0\n    # we have to check for every number between 1 and steps\n    for step in range(1, steps+1):\n        # if we can reach (d, 0) from current position then we will just check for (d, 0) from d-step to d and d+step to d\n        if step % d == 0 or step == d:\n            print(step)\n            return 1\n    return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 0\n    if d == 1: return steps + 1\n    return min(min_Jumps(steps, d-1) + 1, min_Jumps(steps, d-2) + 2)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize current position as (0, 0) and store the first position in the array\n    current_pos = [0, 0]\n    steps_required = 0\n    # initialize steps_required as 0 and also store the first position in the array\n    \n    # if the first position has a x value greater than or equal to the value of d\n    if current_pos[0] >= d:\n        # return 0 as the number of jumps required is 0\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d == 0 or steps == 1):\n        return 0\n    if (steps == 0):\n        return -1\n    else:\n        return min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d)) + 1\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l=[]\n    for i in range(len(nums1)):\n        l.append(nums1[i]/nums2[i])\n    return l\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i]/=nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list=[]\n    for i in nums1:\n        if i in nums2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]/nums2[i])\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert(len(nums1) == len(nums2))\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not nums1:\n        return []\n    if not nums2:\n        return []\n    return [int(nums1[i]) / int(nums2[i]) for i in range(len(nums1))]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    num1,num2=0,0\n    for i in range(len(nums1)):\n        num1+=nums1[i]\n        num2+=nums2[i]\n    return num1/num2\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    ans=[]\n    for i in range(len(nums1)):\n        ans.append(nums1[i]/nums2[i])\n    return ans\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not isinstance(test_str, str):\n        return None\n    lst = []\n    for i in test_str:\n        if i.isdigit():\n            lst.append(i)\n    nums = ''.join(lst)\n    return test_str.replace(nums, '')\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return \"\".join([i for i in test_str if i.isdigit()]) + \"\".join([i for i in test_str if not i.isdigit()])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    num_list = [str for str in test_str if str.isdigit()]\n    for i in num_list:\n        test_str.remove(i)\n        test_str.append(i)\n    return''.join(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isnumeric()]) + ''.join([i for i in test_str if i.isnumeric()])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    parsed_string = []\n    nums = []\n    for x in test_str:\n        if x.isdigit():\n            nums.append(x)\n        else:\n            parsed_string.append(x)\n    for y in nums:\n        parsed_string.append(y)\n    print(parsed_string)\n    return parsed_string\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if i.isdigit()]) + ''.join([i for i in test_str if not i.isdigit()])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = ''\n    for i in test_str:\n        if i.isdigit():\n            s += i\n    return s + test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return \" \".join(re.findall(\"\\D+\", test_str)) + \" \" + \" \".join(re.findall(\"\\d+\", test_str))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = []\n    num_found = False\n    for i in test_str:\n        if i.isdigit():\n            num_found = True\n            s.append(i)\n        elif num_found:\n            s.append(i)\n    res = ''.join(s)\n    return res\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    c = []\n    for i in range(len(a)):\n        if i == 0:\n            if a[i] % 2 == 0:\n                c.append(a[i])\n        else:\n            if a[i] % 2 == 0:\n                c.append(a[i])\n            if a[i] % c[-1] == 0:\n                c.append(a[i])\n    return len(c)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    largest_subset = a[0]\n    largest_subset_size = 1\n    i = 0\n    a.sort()\n    while i < len(a) - 1:\n        if a[i] % a[i+1] == 0:\n            i += 1\n        else:\n            if largest_subset_size > i - i:\n                largest_subset_size = i - i\n                largest_subset = a[i]\n                i += 1\n            else:\n                i += 1\n    return largest_subset_size\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def dfs(index, s, a):\n        if index == len(a):\n            return s\n        if (s + a[index]%2)%2!= 0:\n            return dfs(index+1, s, a)\n        return max(dfs(index+1, s + a[index], a), dfs(index+1, s, a))\n    return dfs(0,0,a)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def divisible_subsets(a):\n        def partition(a):\n            sorted_a = sorted(a, reverse=True)\n            total = sum(a)\n            if total % 2 == 0:\n                return set([total//2])\n            else:\n                # This is a list of all the sets of divisors for any given value of a\n                divisors = [set([i for i in range(1, int(total/2)+1) if total % i == 0])]\n                for value in sorted_a:\n                    new_divisors = []\n                    for divisor in divisors:\n                        if value % divisor == 0:\n                            new_divisors.append(divisor)\n                        else:\n                            new_divisors.append(divisor.copy())\n                            new_divisors[-1].add(value)\n                    divisors = new_divisors\n                return set([value for divisors in divisors for value in divisors])\n        def divisible_subsets_helper(a):\n            if len(a) == 0:\n                return {0}\n            a_minus_one = a[:-1]\n            possible_sets = [{a_minus_one[0]}, partition(a_minus_one)]\n            for i in range(1, len(a_minus_one)):\n                possible_sets.append({a_minus_one[i]})\n                for j in range(i):\n                    new_set = {a_minus_one[i]}\n                    for value in possible_sets[j]:\n                        new_set.add(value+a_minus_one[i])\n                    possible_sets.append(new_set)\n            possible_sets = {value for possible_set in possible_sets for value in possible_set}\n            return possible_sets\n        return len(divisible_subsets_helper(a))\n    return divisible_subsets(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    l = [2,4,8,4,6,7,2,3]\n    s = list(set(l))\n    print(s)\n    m = [[0 for x in range(len(s))] for y in range(len(l))]\n    for i in range(len(l)):\n        for j in range(len(s)):\n            if l[i] % s[j] == 0:\n                m[i][j] = 1\n            else:\n                m[i][j] = 0\n    print(m)\n    print(l)\n    for i in range(len(l)):\n        print('current', i)\n        for j in range(len(s)):\n            if m[i][j] == 1:\n                m[i][j] = m[i-1][j] + 1\n            else:\n                m[i][j] = m[i-1][j]\n    print(m)\n    for i in range(len(m)):\n        print('current', i)\n        for j in range(len(m[0])):\n            if m[i][j] == 1:\n                print(s[j])\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] % a[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return _largest_subset(a, 0, len(a)-1)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    median_1 = 0\n    median_2 = 0\n    cnt = 0\n    median = 0\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # l = (n - 1)//2\n    # # print(l)\n    # m1 = (n + 1)//2\n    # m2 = n//2\n    # if (n % 2 == 0):\n    #     return (arr1[m1] + arr2[m2])//2\n    # else:\n    #     return arr2[m2]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l = arr1+arr2\n    l.sort()\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n    elif n == 2:\n        return max(arr1[0], arr2[0])\n    else:\n        m1 = median(arr1, n)\n        m2 = median(arr2, n)\n        if m1 == m2:\n            return m1\n        else:\n            if m1 > m2:\n                if n % 2 == 0:\n                    return get_median(arr1, arr2[:(n//2)], n//2)\n                else:\n                    return get_median(arr1, arr2[:(n//2)], n//2)\n            else:\n                if n % 2 == 0:\n                    return get_median(arr1[(n//2):], arr2, n//2)\n                else:\n                    return get_median(arr1[(n//2):], arr2, n//2)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    m1 = 0\n    m2 = 0\n    if (n % 2 == 0):\n        m1 = n // 2\n        m2 = n // 2\n    else:\n        m1 = n // 2\n        m2 = n // 2 + 1\n    while (i < m1 and j < m2):\n        if (arr1[i] < arr2[j]):\n            i += 1\n        else:\n            j += 1\n    if (i < m1):\n        return arr1[i]\n    return arr2[j]\n    \n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return get_kth(arr1, arr2, (n // 2) + 1)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    if l1 == l2:\n        return (get_median_helper(arr1, arr2, n))\n    elif l1 > l2:\n        return (get_median_helper(arr1, arr2 + arr1, n))\n    elif l1 < l2:\n        return (get_median_helper(arr2, arr1 + arr2, n))\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = k = 0\n    arr1.sort()\n    arr2.sort()\n    # print(arr1, arr2)\n    while(i < n and j < n):\n        if arr1[i] < arr2[j]:\n            arr1[k] = arr1[i]\n            i += 1\n            k += 1\n        else:\n            arr1[k] = arr2[j]\n            j += 1\n            k += 1\n    while(i < n):\n        arr1[k] = arr1[i]\n        i += 1\n        k += 1\n    while(j < n):\n        arr1[k] = arr2[j]\n        j += 1\n        k += 1\n    if n % 2!= 0:\n        return arr1[int(n/2)]\n    else:\n        return (arr1[int(n/2)] + arr1[int(n/2) - 1])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    while True:\n        if (i >= n):\n            break\n        if (j >= n):\n            break\n        if (arr1[i] < arr2[j]):\n            arr1[k] = arr1[i]\n            i = i + 1\n        else:\n            arr1[k] = arr2[j]\n            j = j + 1\n        k = k + 1\n    if (n % 2 == 0):\n        if (i < n):\n            arr1[k] = arr1[i]\n            i = i + 1\n        else:\n            arr1[k] = arr2[j]\n            j = j + 1\n        k = k + 1\n    if (j < n):\n        return arr2[j]\n    else:\n        return arr1[i]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            arr1[k] = arr1[i]\n            i += 1\n            j += 1\n            k += 1\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in nums:\n        print(i**n)\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [number**n for number in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_pow = []\n    for num in nums:\n        nums_pow.append(num ** n)\n    return nums_pow\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return list(map(lambda x: x**n,nums))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # iterate over the list\n    # append n ** i to the list\n    return [i ** n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    p=[]\n    for i in nums:\n        p.append(i**n)\n    return p\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    print('\\nIs Upper Case:')\n    result = string.isupper()\n    if result:\n        print('\\nThe string is in upper case.')\n    else:\n        print('\\nThe string is not in upper case.')\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase_string = \"\"\n    for i in string:\n        if i.isupper():\n            uppercase_string += i\n    return uppercase_string\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList \n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList[0]\n    b = newList[-1]\n    newList[0] = b\n    newList[-1] = a\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return ((3.14*r*r)/2)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi*(r**2)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    PI = 3.14\n    return PI*r*r*((r+r)/2)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    #The area of a triangle is given as \u00bd * base * height / 2\n    base = 2 * r * pi\n    #Since we are working on a semicircle, the height is the radius of the semicircle\n    height = r\n    #A triangle with a given base and height is called a right triangle\n    return base * height / 2\nprint(triangle_area(1))\nprint(triangle_area(2))\nprint(triangle_area(3))\nprint(triangle_area(4))\nprint(triangle_area(5))\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle with semi-circle radius r\n    triangle_area = (r**2) * (3**(1/2)) / 2\n    return triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r1 = r/2\n    print(r1)\n    return (math.pi/2)*(r1)**2\n    \n    "
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    \n    def area(r) : \n        a = 2*pi*r*(r+1)\n        return a\n    \n    def is_semicircle(r) :\n        s = pi*r*r\n        return s\n    \n    a = area(r)\n    s = is_semicircle(r)\n    if s < a :\n        print('Area of the largest triangle that can be inscribed in a semicircle with a given radius is {}'.format(a))\n    else :\n        print('Area of the largest triangle that can be inscribed in a semicircle with a given radius is {}'.format(s))\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return ((r**2)*(math.pi**2))/3\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # you can define a function to calculate the area of a triangle with three known side lengths\n    def area_of_triangle(s1, s2, s3) :\n        # you need to return the area of the triangle\n        return (s1 + s2 + s3) / 2\n    # you need to use the function to find the area of the largest possible triangle\n    # you can access the radius of the semicircle by calling the function radius()\n    # you can access the function to calculate the area of a triangle by calling the function area_of_triangle()\n    # you can access the function to find the area of a circle by calling the function area_of_circle()\n    \n    area = area_of_triangle(area_of_triangle(area_of_circle(r), area_of_triangle(r, r, r), area_of_circle(r)), area_of_triangle(area_of_circle(r), area_of_triangle(r, r, r), area_of_circle(r)), area_of_triangle(area_of_circle(r), area_of_triangle(r, r, r), area_of_circle(r)))\n    return area\n    \nprint(triangle_area(5)"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Let r be the radius of a circle.\n    # Area of a triangle with the radius r is 0.25 * pi * r^2.\n    # Area of a triangle with the radius 2r is 0.75 * pi * r^2.\n    # Area of a triangle with the radius 3r is 1.5 * pi * r^2.\n    # Area of a triangle with the radius 4r is 2 * pi * r^2.\n    # Area of a triangle with the radius 5r is 3.75 * pi * r^2.\n    # Area of a triangle with the radius 6r is 5.25 * pi * r^2.\n    # Area of a triangle with the radius 7r is 6.75 * pi * r^2.\n    # Area of a triangle with the radius 8r is 7.8125 * pi * r^2.\n    # Area of a triangle with the radius 9r is 8.90625 * pi * r^2.\n    # Area of a triangle with the radius 10r is 9.73536 * pi * r^2.\n    # Area of a triangle with the radius 11r is 10.62955 * pi * r^2.\n    # Area of a triangle with the radius 12r is 11.5625 * pi * r^2.\n    # Area of a triangle with the radius 13r is 12.5 * pi * r^2.\n    # Area of a triangle with the radius 14r is 13.4175 * pi * r^2.\n    # Area of a triangle with the radius 15r is 14.3125 * pi * r^2.\n    # Area of a triangle with the radius 16r is 15.195 * pi * r^2.\n    # Area of a triangle with the radius 17r is 16.1676 * pi * r^2.\n    # Area of a triangle with the radius 18r is 17.1425 * pi * r^2.\n    # Area of a triangle with the radius 19r is 18.1156 * pi * r^2.\n    # Area of a triangle with the radius 20r is 19.101 * pi * r^2.\n    # Area of a triangle with the radius 21r is 20.09375 * pi * r^2.\n    # Area of a triangle with the radius 22r is 21.0875 * pi * r^2.\n    # Area of a triangle with the radius 23r is 22.078125 * pi * r^2.\n    # Area of a triangle with the radius 24r is 23.0625 * pi * r^2.\n    # Area of a triangle with the radius 25r is 24.055625 * pi * r^2.\n    # Area of a triangle with the radius 26r is 25.046875 * pi * r^2.\n    # Area of a triangle with the radius 27r is 26.0390625 * pi * r^2.\n    # Area of a triangle with the radius 28r is 27.03125 * pi * r^2.\n    # Area of a triangle with the radius 29r is 28.021779 * pi * r^2.\n    # Area of a triangle with the radius 30r is 29.015625 * pi * r^2.\n    # Area of a triangle with the radius 31r is 30.0078125 * pi * r^2.\n    # Area of a triangle with the radius 32r is 30.001953125 * pi * r^2.\n    # Area of a triangle with the radius 33r is 31.9996875 * pi * r^2.\n    # Area of a triangle with the radius 34r is 32.9990234375 * pi * r^2.\n    # Area of a triangle with the radius 35r is 33.9968359375 * pi * r^2.\n    # Area of a triangle with the radius 36r is 34.99267578125 * pi * r^2.\n    # Area of a triangle with the radius 37r is 35.991455078125 * pi * r^2.\n    # Area of a triangle with the radius 38r is 36.9892578125 * pi * r^2.\n    # Area of a triangle with the radius 39r is 37.98773193359375 * pi * r^2.\n    # Area of a triangle with the radius 40r is 38.9835693359375 * pi * r^2.\n    # Area of a triangle with the radius 41r is 39.978656005859375 * pi * r^2.\n    # Area of a triangle with the radius 42r is 41.9720458984375 * pi * r^2.\n    # Area of a triangle with the radius 43r is 42.966117919922 * pi * r^2.\n    # Area of a triangle with the radius 44r is 43.96142578125 * pi * r^2.\n    # Area of a triangle with the radius 45r is 44.959228515625 * pi * r^2.\n    # Area of a triangle with the radius 46r is 45.9564208984375 * pi * r^2.\n    # Area of a triangle with the radius 47r is 46.95517578125 * pi * r^2.\n    # Area of a triangle with the radius 48r is 47.948974609375 * pi * r^2.\n    # Area of a triangle with the radius 49r is 48.943458557129 * pi * r^2.\n    # Area of a triangle with the radius 50r is 49.9386474609375 * pi * r^2.\n    # Area of a triangle with the radius 51r is 50.9316650390625 * pi * r^2.\n    # Area of a triangle with the radius 52r is 51.92657470703125 * pi * r^2.\n    # Area of a triangle with the radius 53r is 52.918247436 * pi * r^2.\n    # Area of a triangle with the radius 54r is 53.913832903 * pi * r^2.\n    # Area of a triangle with the radius 55r is 54.906103515625 * pi * r^2.\n    # Area of a triangle with the radius 56r is 55.906982421875 * pi * r^2.\n    # Area of a triangle with the radius 57r is 56.90667724609375 * pi * r^2.\n    # Area of a triangle with the radius 58r is 57.9068603515625 * pi * r^2.\n    # Area of a triangle with the radius 59r is 58.905928955078125 * pi * r^2.\n    # Area of a triangle with the radius 60r is 59.9072197265625 * pi * r^2.\n    # Area of a triangle with the radius 61r is 60.908203125 * pi * r^2.\n    # Area of a triangle with the radius 62r is 61.9084353125 * pi * r^2.\n    # Area of a triangle with the radius 63r is 62.9089599609375 * pi * r^2.\n    # Area of a triangle with the radius 64r is 63.909343065186 * pi * r^2.\n    # Area of a triangle with the radius 65r is 64.9094915254 * pi * r^2.\n    # Area of a triangle with the radius 66r is 65.9100311375 * pi * r^2.\n    # Area of a triangle with the radius 67r is 66.9112090625 * pi * r^2.\n    # Area of a triangle with the radius 68r is 67.911492756 * pi * r^2.\n    # Area of a triangle with the radius 69r is 68.911907958 * pi * r^2.\n    # Area of a triangle with the radius 70r is 69.9123840332 * pi * r^2.\n    # Area of a triangle with the radius 71r is 70.91259765625 * pi * r^2.\n    # Area of a triangle with the radius 72r is 71.9134216308 * pi * r^2.\n    # Area of a triangle with the radius 73r is 72.914306640625 * pi * r^2.\n    # Area of a triangle with the radius 74r is 73.9147674560 * pi * r^2.\n    # Area of a triangle with the radius 75r is 74.91553881835 * pi * r^2.\n    # Area of a triangle with the radius 76r is 75.9161535546875 * pi * r^2.\n    # Area of a triangle with the radius 77r is 76.916"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return i+2\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    elif not start < end:\n        return 1\n    if end is None:\n        end = len(array)\n    for i,number in enumerate(array[start:end]):\n        if array[i] == i+start+1:\n            continue\n        elif array[i] == i+start:\n            return i+start+1\n        else:\n            return i+start\n    return end+start+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end=len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(\"START\",array)\n    if(start == len(array)-1):\n        return array[start]+1\n    if(end is None):\n        end = len(array)-1\n    mid = (start+end)//2\n    #print(mid,start,end)\n    #print(\"Array\",array)\n    #print(\"Array[mid]\",array[mid])\n    if(mid == len(array)-1):\n        if(array[mid]!= mid+1):\n            return array[mid]+1\n        else:\n            return array[mid]+1\n    if(array[mid] == mid+1):\n        #print(\"In\",array[mid],mid+1)\n        #print(\"Returning\",array[mid])\n        return array[mid]\n    if(array[mid] > mid+1):\n        return find_First_Missing(array,start,mid)\n    return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #Check if the input array is empty\n    if len(array)==0:\n        print(\"The array is empty!\")\n        return -1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #we know that we have to return the number that is missing from the array\n    #so we can get the length of the array and use that as a point to start\n    #so in the end we can loop through the array and compare it to the point\n    #at which we started and then return that point\n    #we can then use the point to set the start of the new array to 1\n    #then we can set the end of the array to the length of the array\n    #then we will loop through the array until the end point is reached\n    #we will then check if the current number is less than the point\n    #then we will return that number plus the point\n    #else we will add the current number to the point and then return the point\n    #we can keep doing this untill the end point is reached\n    #at which point we will return the point\n    if end == None:\n        end = len(array)\n    point = start + 1\n    while point < end:\n        if array[point-1]!= point:\n            return point\n        point += 1\n    return point\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start > end:\n        return None\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    if end is None:\n        end = len(array)\n    #first element is always missing.\n    missing_num = array[0] + 1\n    for i in range(1,end):\n        if array[i] - array[i-1]!= 1:\n            missing_num = array[i-1] + 1\n    return missing_num\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(\" \",\"%20\")\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string_list = list(string)\n    for i in range(len(string_list)):\n        if string_list[i] =='':\n            string_list[i] = '%20'\n    return ''.join(string_list)\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Make a list with the spaces\n    spaces = [' ']\n    \n    # Make a list with the characters in the string\n    chars = list(string)\n    \n    # Loop through each character in the string\n    for i in range(len(chars)):\n        # If a character is in the list of spaces\n        if chars[i] in spaces:\n            # Replace the character with %20\n            chars[i] = '%20'\n    # Return the list with the replaced characters\n    return chars\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i%2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # even_numbers = []\n    # for number in list:\n    #     if number % 2 == 0:\n    #         even_numbers.append(number)\n    # return even_numbers\n    return [number for number in list if number % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    list_of_even = []\n    while i < len(list):\n        if list[i] % 2 == 0:\n            list_of_even.append(list[i])\n        i = i + 1\n    return list_of_even\n    \n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for num in list:\n        if (num % 2) == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    print(\"Even numbers from the list: \",even)\n    print(\"Odd numbers from the list: \",odd)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    # return even numbers \n    even_number = []\n    for num in list:\n        if num % 2 == 0:\n            even_number.append(num)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = [] \n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list2=[]\n    for i in list:\n        if i%2==0:\n            list2.append(i)\n    print(list2)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    x = len(list)\n    even_list = []\n    for i in range(x):\n        if (list[i] % 2 == 0):\n            even_list.append(list[i])\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd = [] \n    even = [] \n    for i in list: \n        if (i % 2) == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    print(\"Odd list: \", odd) \n    print(\"Even list: \", even) \n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        for i in range(len(sub)):\n            x = sub[i][0]\n            y = sub[i][1]\n            if y + 1 < len(ele[1]):\n                sub.append([x, y+1])\n            if y - 1 >= 0:\n                sub.append([x, y-1])\n            if x + 1 < len(ele[0]):\n                sub.append([x+1, y])\n            if x - 1 >= 0:\n                sub.append([x-1, y])\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    ele = tuple(ele)\n    adj = [ele + (i,j) for i in range(-1,2) for j in range(-1,2) if (i!= 0 or j!= 0) and ele[0] + i >= 0 and ele[1] + j >= 0]\n    adj = [x for x in adj if x not in sub]\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if ele[0] + 1 < 8: \n        if (ele[0] + 1, ele[1]) not in sub:\n            adjac((ele[0] + 1, ele[1]), sub)\n    if ele[0] - 1 >= 0:\n        if (ele[0] - 1, ele[1]) not in sub:\n            adjac((ele[0] - 1, ele[1]), sub)\n    if ele[1] + 1 < 8: \n        if (ele[0], ele[1] + 1) not in sub:\n            adjac((ele[0], ele[1] + 1), sub)\n    if ele[1] - 1 >= 0:\n        if (ele[0], ele[1] - 1) not in sub:\n            adjac((ele[0], ele[1] - 1), sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    coord = []\n    coord.append((x,y+1))\n    coord.append((x,y-1))\n    coord.append((x+1,y))\n    coord.append((x-1,y))\n    coord.append((x+1,y+1))\n    coord.append((x+1,y-1))\n    coord.append((x-1,y+1))\n    coord.append((x-1,y-1))\n    if sub:\n        return [x for x in coord if x not in sub]\n    else:\n        return coord\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    if sub == []:\n        sub.extend([(x-1,y-1),(x-1,y+1),(x,y-1),(x,y+1),(x+1,y-1),(x+1,y+1)])\n    else:\n        sub.extend([(x-1,y-1),(x-1,y+1),(x,y-1),(x,y+1),(x+1,y-1),(x+1,y+1)])\n        adjac(ele, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #n = len(ele)\n    #return [(i+1,j+1) for i in range(n) for j in range(n) if (i,j)!= ele and not(i == ele[0] and j == ele[1])]\n    return list(sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)):\n        if ele[i] == 1:\n            sub.append(i)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return list(filter(lambda x: x not in sub, ele))\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)): \n        sub.append((ele[i][0]-1, ele[i][1]-1))\n        sub.append((ele[i][0]-1, ele[i][1]))\n        sub.append((ele[i][0]-1, ele[i][1]+1))\n        sub.append((ele[i][0], ele[i][1]-1))\n        sub.append((ele[i][0], ele[i][1]+1))\n        sub.append((ele[i][0]+1, ele[i][1]-1))\n        sub.append((ele[i][0]+1, ele[i][1]))\n        sub.append((ele[i][0]+1, ele[i][1]+1))\n    return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(0, len(ele)):\n        for j in range(0, len(sub)):\n            if (abs(ele[i][0] - sub[j][0]) <= 1 and abs(ele[i][1] - sub[j][1]) <= 1):\n                sub.append(ele[i])\n                sub.append(ele[i])\n                break\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace('-', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == '':\n        return text\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # return re.sub(r'\\s', '_', text)\n    # return text.replace(' ', '_').replace('_','')\n    return text.strip().replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n    \n    \ndef main():\n    print(\"Testing replace_spaces\")\n    print(replace_spaces(\"Hello World\"))\n    print(replace_spaces(\"Hello_World\"))\n    print(replace_spaces(\"Hello World\"))\n    print(replace_spaces(\"Hello World \"))\n    print(replace_spaces(\"Hello World  \"))\n    print(replace_spaces(\"Hello World   \"))\n    print(replace_spaces(\"       Hello World   \"))\n    print(replace_spaces(\"  Hello World   \"))\n    print(replace_spaces(\"HelloWorld   \"))\n    print(replace_spaces(\"HelloWorld   \"))\n    print(replace_spaces(\"\"))\n    print(replace_spaces(\"  \"))\n    print(replace_spaces(\"   \"))\n    print(replace_spaces(\"    \"))\n    print(replace_spaces(\"      \"))\n    print(replace_spaces(\"       \"))\n    print(replace_spaces(\"        \"))\n    print(replace_spaces(\"         \"))\n    print(replace_spaces(\"          \"))\n    print(replace_spaces(\"           \"))\n    print(replace_spaces(\"            \"))\n    print(replace_spaces(\"             \"))\n    print(replace_spaces(\"              \"))\n    print(replace_spaces(\"               \"))\n    print(replace_spaces(\"                \"))\n    print(replace_spaces(\"                 \"))\n    print(replace_spaces(\"                  \"))\n    print(replace_spaces(\"                       \"))\n    print(replace_spaces(\"                             \"))\n    print(replace_spaces(\"                                \"))\n    print(\"All tests passed.\")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text.isspace():\n        return '_'\n    elif text.isalpha():\n        return text.replace(' ', '_').replace('_','')\n    else:\n        return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # s = text.replace(' ', '_')\n    # return s.replace('_','')\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            del num_list[i]\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            count += 1\n        else:\n            new_list.append(i)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            j += 1\n        i += 1\n    while j < len(num_list):\n        num_list[j] = num_list[j]\n        j += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in num_list:\n        if i == 0:\n            count += 1\n    for i in range(count):\n        num_list.remove(0)\n    num_list.extend([0]*count)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.sort()\n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            num_list.pop(index)\n            num_list.append(0)\n    print(num_list)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            i -= 1\n        i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.sort(key = lambda x : x == 0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list[i])\n            num_list[i] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j] == 0:\n            del num_list[j]\n            num_list.append(0)\n            i += 1\n        else:\n            j += 1\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    output = []\n    for i in range(0,n-1) :\n        for j in range(i+1,n) :\n            if arr[i]!= arr[j] :\n                output.append(arr[i] ^ arr[j])\n    return sum(output)\n    \nif __name__ == \"__main__\" :\n    arr = [5, 6, 8, 4, 2, 1]\n    n = len(arr)\n    print(pair_xor_Sum(arr,n))\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    m = n\n    sum = 0\n    \n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < 2 :\n        print('Array length must be atleast 2')\n        return\n    sum = 0\n    for i in range(len(arr)) :\n        for j in range(i+1,len(arr)) :\n            sum += arr[i] ^ arr[j]\n    print(sum)\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) :\n        for j in range(i + 1, n) :\n            s ^= arr[i] ^ arr[j]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(0,n):\n        for j in range(0,i+1):\n            total += arr[i]^arr[j]\n    return total\n    \ndef pair_xor_Product(arr,n) : \n    '''\n    Write a python function to find the product of xor of all pairs of numbers in the given list.\n    '''\n    total = 1\n    for i in range(0,n):\n        for j in range(0,i+1):\n            total *= arr[i]^arr[j]\n    return total\n    \ndef pair_xor_Sum_Count(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list and also the sum of \n    all elements of the list.\n    '''\n    total = 0\n    count = 0\n    for i in range(0,n):\n        for j in range(0,i+1):\n            total += arr[i]^arr[j]\n        count += arr[i]\n    return total,count\n    \ndef pair_xor_Product_Count(arr,n) : \n    '''\n    Write a python function to find the product of xor of all pairs of numbers in the given list and also the product of \n    all elements of the list.\n    '''\n    total = 1\n    count = 0\n    for i in range(0,n):\n        for j in range(0,i+1):\n            total *= arr[i]^arr[j]\n        count += arr[i]\n    return total,count\n    \ndef product(arr,n):\n    '''\n    Write a python function to find the product of all elements of the list.\n    '''\n    total = 1\n    for i in range(0,n):\n        total *= arr[i]\n    return total\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(n) :\n        for j in range(i + 1, n) :\n            ans += (arr[i] ^ arr[j])\n    return ans\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum(map(lambda x: x[0]^x[1], itertools.combinations(arr, 2)))\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # code here\n    # using set to avoid duplicates\n    res = 0\n    arr = list(set(arr))\n    for i in range(0,len(arr)-1) :\n        for j in range(i+1,len(arr)) :\n            res = res^(arr[i]^arr[j])\n    return res\n    \nprint(pair_xor_Sum([1,3,5,6,7,9]))\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n) : \n        for j in range(n) : \n            if i < j : \n                result = result ^ arr[i] ^ arr[j]\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #Approach: Create a hash table and calculate xor of all pairs\n    '''\n    We iterate through the array. \n    We create a hash table with the numbers in the array as keys and their XOR value as values.\n    Then we iterate through the array again, calculating the XOR for every pair of numbers.\n    '''\n    #Time Complexity : O(n)\n    #Space Complexity : O(n)\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # to create a new list to store sorted list\n    sorted_list = []\n    # to create a new list to store current unsorted list\n    list_to_sort = iterable.copy()\n    # create a heap with original list\n    hq.heapify(list_to_sort)\n    # pop the smallest element from the heap and store it\n    while list_to_sort:\n        sorted_list.append(hq.heappop(list_to_sort))\n    # return sorted list\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h, val)\n    return [hq.heappop(h) for _ in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    lst = list(iterable)\n    #print(lst)\n    if len(lst) <= 1:\n        return lst\n    hq.heapify(lst)\n    while len(lst) >= 2:\n        temp = hq.heappop(lst)\n        hq.heappush(lst, hq.heappop(lst))\n        hq.heappush(lst, temp)\n    return lst\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    l = []\n    for x in iterable:\n        h.append(x)\n        hq.heapify(h)\n    for _ in range(len(iterable)):\n        l.append(hq.heappop(h))\n    return l\ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return insertion_sort_helper(iterable,0,len(iterable))\ndef insertion_sort_helper(iterable,start,end):\n    l = []\n    if end > start:\n        #Sort the first item\n        l.append(iterable[start])\n        for i in range(start+1,end):\n            #Insert the item to its correct position\n            key = iterable[i]\n            j = i -1\n            while j >= start and key < l[j]:\n                iterable[j+1] = iterable[j]\n                j -= 1\n            l[j+1] = key\n        return insertion_sort_helper(iterable,start,end-1) + l\n    else:\n        return iterable\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return merge_sort_helper(iterable,0,len(iterable))\ndef merge_sort_helper(iterable,start,end):\n    #Divide\n    if end > start:\n        mid = (start+end)//2\n        return merge_sort_helper(iterable,start,mid) + merge_sort_helper(iterable,mid+1,end)\n    else:\n        #Conquer\n        return [iterable[start]]\ndef selection_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = []\n    for _ in range(len(iterable)):\n        min_index = iterable.index(min(iterable))\n        l.append(iterable[min_index])\n        iterable.pop(min_index)\n    return l\ndef counting_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Ensure its the correct datatype\n    if isinstance(iterable[0],str):\n        #Convert to int\n        iterable = [ord(x) for x in iterable]\n    return counting_sort_helper(iterable,max(iterable))\ndef counting_sort_helper(iterable,k):\n    #Init the list\n    l = []\n    #Create a hashtable\n    ht = [0 for _ in range(k+1)]\n    #Count each value\n    for x in iterable:\n        ht[x] += 1\n    #Add the counts to the list\n    for i in range(len(ht)):\n        l += [i]*ht[i]\n    return l\ndef radix_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Figure out the datatype of the iterable\n    if isinstance(iterable[0],str):\n        #Convert to int\n        iterable = [ord(x) for x in iterable]\n    return radix_sort_helper(iterable,0,len(iterable))\ndef radix_sort_helper(iterable,start,end):\n    #Count the number of digits\n    num_digits = 0\n    for x in iterable:\n        #Check the number of digits\n        if x > 10**num_digits:\n            num_digits += 1\n    #Now figure out which number of digits is the maximum\n    #If its zero then its already sorted\n    if num_digits == 0:\n        return iterable\n    #Init the list\n    l = []\n    #Init the hashtable\n    ht = [[] for _ in range(10)]\n    #Create the hashtable\n    for x in iterable:\n        ht[x//(10**num_digits)%10].append(x)\n    #Add the values to the list\n    for i in range(len(ht)):\n        l += ht[i]\n    return radix_sort_helper(l,start,end)\ndef bucket_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return bucket_sort_helper(iterable)\ndef bucket_sort_helper(iterable):\n    #Get the max value\n    max_val = max(iterable)\n    #Find the number of buckets\n    num_buckets = max_val+1\n    #Init the list\n    l = []\n    #Create the buckets\n    for _ in range(num_buckets):\n        l.append([])\n    #Add the values\n    for x in iterable:\n        l[x].append(x)\n    #Conquer\n    return bucket_sort_helper_helper(l)\ndef bucket_sort_helper_helper(buckets):\n    l = []\n    for i in range(len(buckets)):\n        l += buckets[i]\n    return l\ndef counting_sort_3way(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Ensure its the correct datatype\n    if isinstance(iterable[0],str):\n        #Convert to int\n        iterable = [ord(x) for x in iterable]\n    return counting_sort_3way_helper(iterable)\ndef counting_sort_3way_helper(iterable):\n    #Get the max value\n    max_val = max(iterable)\n    #Find the number of buckets\n    num_buckets = max_val+1\n    #Init the list\n    l = []\n    #Create the buckets\n    for _ in range(num_buckets):\n        l.append([])\n    #Add the values\n    for x in iterable:\n        l[x].append(x)\n    #Conquer\n    return counting_sort_3way_helper_helper(l)\ndef counting_sort_3way_helper_helper(buckets):\n    l = []\n    for i in range(len(buckets)):\n        #Count each value\n        bucket = buckets[i]\n        if len(bucket) == 0:\n            continue\n        #Find the 3 min values\n        hq = []\n        for _ in range(3):\n            #Add the first value\n            hq.append(bucket[0])\n            bucket.pop(0)\n        #Get the min\n        v = [hq[0],hq[1],hq[2]]\n        v.sort()\n        #Add the min\n        l += v\n    return l\ndef heap_sort_3way(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Ensure its the correct datatype\n    if isinstance(iterable[0],str):\n        #Convert to int\n        iterable = [ord(x) for x in iterable]\n    return heap_sort_3way_helper(iterable)\ndef heap_sort_3way_helper(iterable):\n    #Init the list\n    l = []\n    #Create the heap\n    h = []\n    for x in iterable:\n        hq.heappush(h,x)\n    #Conquer\n    return heap_sort_3way_helper_helper(h)\ndef heap_sort_3way_helper_helper(h):\n    l = []\n    #Get the first three values\n    v = [hq.heappop(h) for _ in range(3)]\n    v.sort()\n    #Add the three values\n    l += v\n    while len(h) > 0:\n        #Pop the next three values\n        v = [hq.heappop(h) for _ in range(3)]\n        v.sort()\n        #Add them\n        l += v\n    return l\ndef quick_sort(iterable,start=0,end=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    return quick_sort_helper(iterable,start,end)\ndef quick_sort_helper(iterable,start=0,end=None):\n    #Set the en"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = iterable[:]\n    hq.heapify(l)\n    return [hq.heappop(l) for _ in range(len(l))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n    for value in iterable:\n        hq.heappush(h, value)\n    for i in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    return [hq.heappop(h) for _ in range(len(h))]\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        print(\"Profit is %.2f\" %(sale_amount-actual_cost))\n    else:\n        print(\"Loss is %.2f\" %(actual_cost-sale_amount))\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = actual_cost - sale_amount\n    if profit_loss == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    assert sale_amount>0\n    if actual_cost>sale_amount:\n        print(\"NO PROFIT\")\n    elif actual_cost<sale_amount:\n        print(\"NO LOSS\")\n    else:\n        print(\"PROFIT AND NO LOSS\")\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"The cost is equal to sale_amount\")\n    else:\n        print(\"The sale_amount is greater than the cost\")\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    print(\"no profit no loss\")\n    print(actual_cost == sale_amount)\n    if actual_cost == sale_amount:\n        print(\"No profit and no loss\")\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #convert temperature to kelvin\n    t_k = t + 273.15\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    temp=t\n    v=v\n    wind_chill_temp=(35.74+(0.6215*temp)+(0.4275*temp*math.pow(v,0.16))-(0.3575*math.pow(v,0.16)))\n    return int(wind_chill_temp)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # v = float(input())\n    # t = float(input())\n    if -20<t<60:\n        v = v*0.621\n        t = t*(9/5) + 32\n        chill = (math.floor((v**(0.16))*((t**0.16) - 35.75)))\n        return chill\n    else:\n        return \"Wrong input.\"\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    \n    if v < 3:\n        wci = 0.\n    else:\n        wci = 13.12 + (0.6215*t) - (11.37*v**0.16) + (0.3965*t*v**0.16)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v>3 or v<0 or t<-40 or t>40:\n        return 'Error!'\n    else:\n        return int(round(35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16)))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215 * t) - (11.37 * (v ** 0.16)) + (0.3965 * t * (v ** 0.16))\n    return int(round(wci))\n    \n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = 13.12 + (0.6215*t) - (11.37*math.pow(v,0.16)) + (0.3965*t*math.pow(v,0.16))\n    return round(chill)\nprint(wind_chill(20,100))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    return int(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    WC=13.12 + (0.6215 * t) - (11.37 * v ** 0.16) + (0.3965 * t * v ** 0.16)\n    return round(WC)\n    \ndef fat_burning_heart_rate(age):\n    '''\n    Write a function to calculate the fat burning heart rate for a person of a given age rounded to the next integer.\n    '''\n    heart_rate=220 - (age * 0.7)\n    return round(heart_rate)\n    \ndef ideal_weight(height, age, sex):\n    '''\n    Write a function to calculate the ideal weight of a person of a given height, age and sex (male or female).\n    '''\n    if sex==\"male\":\n        ideal_weight=72.7 * (height) - 58 * (age) + 88.9\n    else:\n        ideal_weight=62.1 * (height) - 44.7 * (age) + 88.8\n    return round(ideal_weight)\n    \ndef bmi_calculator(weight,height):\n    '''\n    Write a function to calculate the BMI of a person given their weight and height. The function should return a float.\n    '''\n    bmi=weight/(height ** 2)\n    return round(bmi,1)\n    \ndef ntss_calculator(age, weight, height, gender, sport_level):\n    '''\n    Write a function to calculate the Nutsritional Trans Set Score (NTSS) given a person's age, weight, height, gender, and sport level.\n    '''\n    if sport_level==\"sport\":\n        ntss=0.7 * weight + (0.7 * height) - (age * 0.8)\n    elif sport_level==\"nonsport\":\n        ntss=1.2 * weight + (1.7 * height) - (age * 0.7)\n    else:\n        ntss=0\n    return round(ntss)\n    \ndef basal_metabolic_rate(gender, weight, height, age, activity_level):\n    '''\n    Write a function to calculate the basal metabolic rate of a person given their gender, weight, height, age, and activity level.\n    '''\n    if activity_level==\"sedentary\":\n        bmr=4.0 * weight + (4.8 * height) - (5.0 * age)\n    elif activity_level==\"moderate\":\n        bmr=4.0 * weight + (4.7 * height) - (4.7 * age)\n    elif activity_level==\"active\":\n        bmr=4.0 * weight + (4.7 * height) - (4.7 * age)\n    else:\n        bmr=0\n    return round(bmr)\n    \ndef body_mass_index(weight, height):\n    '''\n    Write a function to calculate the BMI of a person given their weight and height. The function should return a float.\n    '''\n    bmi=weight/(height ** 2)\n    return round(bmi,1)\n    \ndef heart_rate_to_bpm(heart_rate, round_to=None):\n    '''\n    Write a function to convert a heart rate in beats per minute to a heart rate in beats per second. The function should accept a heart rate as an argument in BPM and should return the BPS version of the heart rate.\n    '''\n    if round_to==None:\n        return round((heart_rate / 60) * 2.236936, 1)\n    else:\n        return round((heart_rate / 60) * 2.236936, round_to)\n    \ndef bpm_to_heart_rate(bpm, round_to=None):\n    '''\n    Write a function to convert a heart rate in beats per second to a heart rate in beats per minute. The function should accept a heart rate in BPM and should return the BPM version of the heart rate.\n    '''\n    if round_to==None:\n        return round(bpm / 2.236936 * 60)\n    else:\n        return round(bpm / 2.236936 * 60, round_to)\n    \ndef body_mass_index_bmi_category(bmi):\n    '''\n    Write a function to convert a BMI to a category.\n    '''\n    if bmi < 18.5:\n        return \"Underweight\"\n    elif bmi < 25:\n        return \"Normal weight\"\n    elif bmi < 30:\n        return \"Overweight\"\n    else:\n        return \"Obese\"\n    \ndef body_mass_index_bmi_category(bmi):\n    '''\n    Write a function to convert a BMI to a category.\n    '''\n    if bmi < 18.5:\n        return \"Underweight\"\n    elif bmi < 25:\n        return \"Normal weight\"\n    elif bmi < 30:\n        return \"Overweight\"\n    else:\n        return \"Obese\"\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 3 or t < -10 or t > 50:\n        return None\n    return round((13.12 + (0.6215*t) - (11.37 * (v**0.16)) + (0.3965 * t * (v**0.16)))*(t< -10 and t>= -50))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [i for i in sample_names if not i[0].islower()]\n    names.sort(key=len)\n    print(sum([len(i) for i in names]))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_not_lowercase = []\n    for name in sample_names:\n        if name[0].islower():\n            sample_names_not_lowercase.append(name)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Input list of names\n    # Output list of names that start with uppercase\n    \n    # Set lowercase letter to 'a'\n    # Remove names that start with lowercase letter\n    # Iterate through remaining list\n    # If name is a single letter, append to new list\n    # Else if name is not a single letter, remove letter from name\n    # Return list of names\n    \n    \n    # Add each name to a list\n    sample_names = [\"ben\", \"John\", \"JILL\", \"chris\", \"dave\", \"FRANK\"]\n    \n    # Create list for names that start with uppercase\n    uppercase_names = []\n    \n    # Iterate through list of names\n    for name in sample_names:\n        # If name starts with uppercase, add to list\n        if name[0].isupper():\n            uppercase_names.append(name)\n            \n    # Print list of uppercase names\n    print(uppercase_names)\n    \n    # Create a new list that removes the names that start with a lowercase\n    lowercase_names = []\n    \n    # Iterate through uppercase names list\n    for name in uppercase_names:\n        # Remove names that start with a lowercase letter\n        if name[0].islower():\n            lowercase_names.append(name)\n        \n    # Print list of names that don't start with a lowercase\n    print(lowercase_names)\n    \n    "
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_sum = 0\n    for i in sample_names:\n        if i[0].islower():\n            pass\n        else:\n            name_sum += len(i)\n    return name_sum\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return [i for i in sample_names if i[0].islower()]\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sum_nam(sample_names):\n    \n    \n    nam_len = list(map(lambda x: len(x), sample_names))\n    \n    \n    \n    def sum_len(nam_len):\n    \n    \n    nam_len_no_lower = [i for i in nam_len if not i.islower()]\n    \n    \n    \n    nam_len_no_lower_sum = sum(nam_len_no_lower)\n    \n    \n    print(nam_len_no_lower_sum)\n    return nam_len_no_lower_sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #names = ['Alan', 'Sophie', 'Sally', 'Mike', 'Susie', 'Ben', 'Anne', 'Irene', 'Miles']\n    sample_names = ['Alan', 'Sophie', 'Sally', 'Mike', 'Susie', 'Ben', 'Anne', 'Irene', 'Miles']\n    # Write your code here.\n    #for x in sample_names:\n    #    if x[0].islower():\n    #        sample_names.remove(x)\n    #print(sample_names)\n    for i in sample_names:\n        if i[0].islower():\n            sample_names.remove(i)\n    print(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Sample data\n    sample_names = [\"Jon\", \"Alexus\", \"Kai\", \"Zach\", \"Sam\", \"Gio\", \"Michel\"]\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    l = []\n    for i in sample_names:\n        if i[0].isupper():\n            l.append(len(i))\n    print(sum(l))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for i in range(len(sample_names)):\n        if sample_names[i][0].islower():\n            sample_names.pop(i)\n    return sum(map(len, sample_names))\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for x in items:\n        if x.startswith('(') and x.endswith(')'):\n            items = items.replace(x, '')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in items:\n        if i == '(':\n            items = items[0:items.index(i)]\n        elif i == ')':\n            items = items[items.index(i)+1:len(items)]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    p = re.compile(r'[\\(|\\[|\\{|\\]|\\}]')\n    m = p.findall(items)\n    for i in m:\n        items = items.replace(i, '')\n    return items\n    \n    \ndef compare_ends(items):\n    '''\n    Write a function to compare the first and last letters of each word in a string.\n    '''\n    str_list = items.split(\" \")\n    return_list = []\n    for i in range(0, len(str_list)):\n        if len(str_list[i]) >= 2:\n            if str_list[i][0] == str_list[i][-1]:\n                return_list.append(str_list[i])\n    return return_list\n    \n    \ndef first_and_last(items):\n    '''\n    Write a function to return the first and last letter of each word in a string.\n    '''\n    return_list = []\n    for i in items.split(\" \"):\n        return_list.append(i[0])\n        return_list.append(i[-1])\n    return return_list\n    \n    \ndef middle(items):\n    '''\n    Write a function to return a list of the middle letters in a string.\n    '''\n    return_list = []\n    for i in items.split(\" \"):\n        return_list.append(i[1:-1])\n    return return_list\n    \n    \ndef make_spoonerisms(items):\n    '''\n    Write a function to create a list of all possible first letters of each word in a string,\n    followed by all possible middle letters and ending with all possible last letters.\n    '''\n    return_list = []\n    for i in items.split(\" \"):\n        if len(i) >= 2:\n            str_list = []\n            str_list.append(i[0])\n            str_list.append(i[1:-1])\n            str_list.append(i[-1])\n            for j in range(0, len(str_list)):\n                return_list.append(str_list[j])\n    return return_list\n    \n    \ndef add_exclamation(items):\n    '''\n    Write a function to add an exclamation mark to the end of each word in a string.\n    '''\n    return_list = []\n    for i in items.split(\" \"):\n        return_list.append(i + '!')\n    return return_list\n    \n    \ndef reverse(items):\n    '''\n    Write a function to reverse each word in a string.\n    '''\n    return_list = []\n    for i in items.split(\" \"):\n        return_list.append(i[::-1])\n    return return_list\n    \n    \ndef palindrome(items):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    if items == items[::-1]:\n        return True\n    return False\n    \n    \ndef frequency(items):\n    '''\n    Write a function to count the frequency of each item in a list.\n    '''\n    return_dict = {}\n    for i in items:\n        if i not in return_dict:\n            return_dict[i] = items.count(i)\n    return return_dict\n    \n    \ndef remove_duplicates(items):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return_list = []\n    for i in items:\n        if i not in return_list:\n            return_list.append(i)\n    return return_list\n    \n    \ndef match_ends(items):\n    '''\n    Write a function to count the number of strings where the string length is 2 or more\n    and the first and last character are the same.\n    '''\n    return_list = []\n    for i in items:\n        if len(i) >= 2:\n            if i[0] == i[-1]:\n                return_list.append(i)\n    return return_list\n    \n    \ndef front_x(items):\n    '''\n    Write a function to return a list with strings in sorted order, except\n    place all the strings that begin with 'x' first.\n    '''\n    return_list = []\n    for i in items:\n        if i.startswith('x'):\n            return_list.append(i)\n    for i in items:\n        if i.startswith('z') or i.startswith('a') or i.startswith('b'):\n            return_list.append(i)\n    return return_list\n    \n    \ndef even_count(items):\n    '''\n    Write a function to return the number of strings in a list where the string length is even.\n    '''\n    return_list = []\n    for i in items:\n        if len(i) % 2 == 0:\n            return_list.append(i)\n    return return_list\n    \n    \ndef plus_minus(items):\n    '''\n    Write a function to return a list with the plus and minus signs removed.\n    '''\n    return_list = []\n    for i in items:\n        if i.count('+') == 0 and i.count('-') == 0:\n            return_list.append(i)\n    return return_list\n    \n    \ndef compress(items):\n    '''\n    Write a function to return a list with all of the strings compressed.\n    '''\n    return_list = []\n    for i in items:\n        return_list.append(i.strip('\\n'))\n    return return_list\n    \n    \ndef mix_up(items):\n    '''\n    Write a function to return a list with the first two and the last two items switched,\n    followed by the rest of the list.\n    '''\n    return_list = []\n    for i in items:\n        if len(i) >= 2:\n            return_list.append(i[-2:] + i[1:-1] + i[:1])\n        else:\n            return_list.append(i)\n    return return_list\n    \n    \ndef is_anagram(items):\n    '''\n    Write a function to return True if the one word is an anagram of the other.\n    '''\n    str_list = []\n    for i in items:\n        str_list.append(sorted(i))\n    return_list = []\n    for i in range(0, len(str_list)):\n        for j in range(i + 1, len(str_list)):\n            if str_list[i] == str_list[j]:\n                return_list.append(True)\n    return all(return_list)\n    \n    \ndef has_duplicates(items):\n    '''\n    Write a function to return True if there is any object that appears more than once in a list.\n    '''\n    return_list = []\n    for i in items:\n        if items.count(i) >= 2:\n            return_list.append(True)\n    return all(return_list)\n    \n    \ndef main():\n    '''\n    Write a function to return the sum of the numbers in the string. \n    Only add numbers.\n    '''\n    input_string = 'Hello 12345 world'\n    new_string = remove_parenthesis(input_string)\n    print(new_string)\n    print(compare_ends(new_string))\n    print(first_and_last(new_string))\n    print(middle(new_string))\n    print(make_spoonerisms(new_string))\n    print(add_exclamation(new_string))\n    print(reverse(new_string))\n    print(palindrome(new_string))\n    print(frequency(new_string))\n    print(remove_duplicates(new_string))\n    print(match_ends(new_string))\n    print(front_x(new_string))\n    print(even_count(new_string))\n    print(plus_minus(new_string))\n    print(compress(new_string))\n    print(mix_up(new_string))\n    print(is_anagram(new_string))\n    print(has_duplicates(new_string))\n    "
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('[\\(\\)]', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('[\\(\\)\\[\\]\\{\\}]', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r'\\([^)]+\\)'\n    for i in range(len(items)):\n        items[i] = re.sub(regex, '', items[i])\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        item = re.sub(r'\\([^)]*\\)', '', item)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def remove_parenthesis_helper(items):\n        '''\n        Returns a list of the items without parenthesis and the rest of the string\n        '''\n        result = []\n        count = 0\n        for item in items:\n            if item == '(':\n                count += 1\n            elif item == ')':\n                count -= 1\n            else:\n                if count == 0:\n                    result.append(item)\n        return result\n    \n    def remove_parenthesis_helper_helper(items):\n        '''\n        Returns a string of the items without parenthesis and the rest of the string\n        '''\n        result = ''\n        count = 0\n        for item in items:\n            if item == '(':\n                count += 1\n            elif item == ')':\n                count -= 1\n            else:\n                if count == 0:\n                    result += item\n        return result\n    \n    return remove_parenthesis_helper(items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        new_item = re.sub(r\"\\([^)]*\\)\", \"\", item)\n        new_items.append(new_item)\n    return new_items\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Convert the parameter to a string.\n    n = str(n)\n    # Initialize the output.\n    output = \"\"\n    # Iterate over the digits in the parameter.\n    for d in n:\n        # If the current digit is even, append '0'.\n        if int(d) % 2 == 0:\n            output += \"0\"\n        # Otherwise, append '1'.\n        else:\n            output += \"1\"\n    # Initialize the count of the digits we have appended to the output.\n    count = 1\n    # Iterate over the digits we appended.\n    for d in output:\n        # If we have appended two digits to the output, append a new digit.\n        if count == 2:\n            count = 1\n            output += d\n        # Increment the count of digits appended to the output.\n        else:\n            count += 1\n    # Print the output, stripping the last digit (because we appended to the output before).\n    print(output[:-1])\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def count(n):\n        count = 1\n        n += 1\n        while n % 2 == 0:\n            count += 1\n            n /= 2\n        return count\n    return n ** 2 + 1 if count(n) % 2 == 1 else n ** 2 - 1\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n*(3*n - 1)/2)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n+1): \n        non_i = i * (i + 1) // 2\n        if non_i == n: \n            return True\n    return False\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return 1 if n%2==1 else 2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    sum = 0\n    for i in range(n+1):\n        sum += i*((n+1)-i)\n    return sum\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = 0\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(n):\n        if i % 3 == 2:\n            n -= 1\n    return n\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    assert(n > 0)\n    return n*(n+1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # https://regex101.com/r/zr4DR2/1\n    # input: text = 'rz'\n    # output: false\n    # input: text = 'zebra'\n    # output: true\n    # input: text = 'zebraz'\n    # output: false\n    # input: text = 'azza'\n    # output: true\n    # input: text = 'zzzaz'\n    # output: false\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # if text.find('z') == -1 or text.find('z') == len(text)-1:\n    #     return False\n    # else:\n    #     return True\n    return re.search(r'z.+?z|z.+?$|z.+?^',text)!= None\n    # OR\n    # return 'z' in text[1:-1]\n    # OR\n    # return text[1:-1].find('z')!= -1\n    # OR\n    # return text.find('z') == text.find('z', 1, -1)\n    # return re.search(r'z.+?z', text)!= None\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'[^z]+z[^z]+$', text):\n        return True\n    elif re.search(r'^[^z]+z[^z]+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.match(r'^[^z]*z[^z]*$', text)\n    # return text.strip().startswith('z') and text.strip().endswith('z')\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    l = []\n    string = text\n    regex = r'^z(.*)z$'\n    match = re.search(regex, string, re.I)\n    if match:\n        l.append(match.groups()[0])\n    if len(l) == 0:\n        return False\n    else:\n        return l\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    start_regex = re.compile(r'^\\Wz')\n    end_regex = re.compile(r'\\Wz$')\n    middle_regex = re.compile(r'z\\W')\n    if start_regex.search(text):\n        return False\n    elif end_regex.search(text):\n        return False\n    elif middle_regex.search(text):\n        return False\n    else:\n        return True\nprint(text_match_wordz_middle('the quick brown fox zjdfj nfjkdghjklj'))\nprint(text_match_wordz_middle('the quick brown fox zjdfj nfjkdghjkljz'))\nprint(text_match_wordz_middle('the quick brown fox zjdfj nfjkdghjklj z'))\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.findall(r'z\\w+z', text)\n    return match\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if not text:\n        return False\n    words = text.split()\n    regex = re.compile(r'\\b[^\\W\\d_]+[z|Z]\\b', flags=re.IGNORECASE)\n    for word in words:\n        if regex.search(word):\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # if text[0] == 'z':\n    #     return False\n    # if text[-1] == 'z':\n    #     return False\n    # else:\n    #     return True\n    return bool(re.search('z(?=[a-zA-Z]*\\s[a-zA-Z]*)',text))\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r\"z(?!\\w)\")\n    return pattern.search(text)!= None\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Iterate in reverse for every k elements in array\n    for i in range(k, 0, -1):\n        # Last element in array\n        last_element_index = len(input)-1\n        # iterate till the last element\n        for j in range(last_element_index, last_element_index-i, -1):\n            # Swap the last element with its previous element\n            input[j], input[j-1] = input[j-1], input[j]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #handle empty array\n    if len(input) <= 1:\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array till k\n    input[0:k+1] = input[:k+1]\n    input[k+1:] = input[k+1:][::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        print(\"Please check your input.\\n\")\n        return\n    # if not input:\n    #     print(\"please enter input\")\n    #     return\n    for i in range(len(input)-k, len(input)):\n        input.insert(0, input.pop(i))\n    # print(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:][::-1]\n    \ndef reverse_Array_Upto_K_By_Recursion(input, k): \n    '''\n    Write a python function to reverse an array upto a given position by using recursion.\n    '''\n    if k <= 0:\n        return input\n    elif k == 1:\n        return input[::-1]\n    else:\n        return reverse_Array_Upto_K_By_Recursion(input[0:k][::-1] + input[k:][::-1], k-1)\n    \ndef reverse_Array_Upto_K_By_Slicing(input, k): \n    '''\n    Write a python function to reverse an array upto a given position by using slicing.\n    '''\n    if k <= 0:\n        return input\n    elif k == 1:\n        return input[::-1]\n    else:\n        return input[0:k][::-1] + input[k:]\n    \ndef reverse_Array_Upto_K_By_Recursion_and_Slicing(input, k): \n    '''\n    Write a python function to reverse an array upto a given position by using recursion and slicing.\n    '''\n    if k <= 0:\n        return input\n    elif k == 1:\n        return input[::-1]\n    else:\n        return input[0:k][::-1] + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) < k:\n        return input\n    else:\n        return input[:k][::-1] + input[k:]\n    \ndef reverse_Array_Upto_K_Recursive(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) < k:\n        return input\n    else:\n        return input[:k][::-1] + input[k:]\n    \n    "
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input)<= k:\n        return input[::-1]\n    else:\n        return input[:k][::-1]+input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    \n    def reverse(arr, start, end): \n        while start < end: \n            temp = arr[start] \n            arr[start] = arr[end] \n            arr[end] = temp \n            start += 1\n            end = end-1\n    \n    reverse(input, 0, len(input)-1)\n    reverse(input, 0, k-1)\n    reverse(input, k, len(input)-1)\n    return \"\".join(input)\n        \nprint(reverse_Array_Upto_K(\"ABCDEFG\", 2))\nprint(reverse_Array_Upto_K(\"ABCDEFGHIJK\", 2))\nprint(reverse_Array_Upto_K(\"ABCDEFGHIJK\", 3))\nprint(reverse_Array_Upto_K(\"ABCDEFGHIJK\", 4))\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input)\n    if k > input_length:\n        return 'Invalid Input'\n    else:\n        # iterate over given array\n        for i in range(k):\n            # temp is used to store the next element\n            temp = input[i]\n            # element at the current index is saved into temp\n            input[i] = input[input_length - i - 1]\n            # next element of array is saved into element at the index\n            input[input_length - i - 1] = temp\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = [i for i in input]\n    output = []\n    i = 0\n    while input:\n        output.append(input.pop(i))\n        if len(output) == k:\n            break\n    return output\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    print('----')\n    print('Expected: ({}, {})'.format(('a', 'b'), {'c': 'd'}))\n    print('Actual:   {}'.format(add_dict_to_tuple(('a', 'b'), {'c': 'd'})))\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    print('Tuple Before:', test_tup)\n    test_tup = (test_tup[0], test_tup[1], test_dict)\n    print('Tuple After:', test_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # your code here\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #test_tup = tuple(test_tup)\n    #test_dict = dict(test_dict)\n    #return test_tup + (test_dict, )\n    \n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxAveragePath(cost):\n        '''\n        Approach: Dynamic Programming \n        Time Complexity: O(n^2)\n        Space Complexity: O(n)\n        '''\n        n = len(cost)\n        avg = [0]*(n+1)\n        max_avg = -math.inf\n        for i in range(n):\n            avg[i+1] = avg[i]\n            for j in range(n):\n                avg[i+1] += cost[i][j]\n                if avg[i+1] > max_avg:\n                    max_avg = avg[i+1]\n                    path = [i, j]\n        return path\n    \n    def maxAveragePath(cost):\n        '''\n        Approach: DP Bottom-Up \n        Time Complexity: O(n^2)\n        Space Complexity: O(n^2)\n        '''\n        n = len(cost)\n        dp = [[0]*n for i in range(n)]\n        for i in range(n):\n            dp[i][i] = cost[i][i]\n        \n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + cost[i][j]\n        \n        max_avg = dp[0][-1]\n        path = [0, 0]\n        for i in range(n):\n            if dp[0][i] > max_avg:\n                max_avg = dp[0][i]\n                path = [0, i]\n        return path\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    if not rows:\n        return []\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_avg = -1\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # For every cell, we create a list of possible routes to get to it. If the current cell is the first in the route, we get the total cost and number of cells visited. We use the list to store information about routes.\n            if (i == 0 and j == 0):\n                paths_list = []\n                total_cost = 0\n                count = 0\n                paths_list.append([cost[0][0], 0])\n            if (i == 0):\n                paths_list = paths_list[0:0]\n                total_cost = paths_list[0][0]\n                count = 1\n                paths_list.append([cost[0][0], 0])\n            if (j == 0):\n                paths_list = paths_list[0:0]\n                total_cost = paths_list[0][0]\n                count = 1\n                paths_list.append([cost[0][0], 0])\n            # Once we are in the last row or column, we check if the total cost divided by the number of cells visited is higher than the current maximum. If it is, then we update the maximum.\n            if (i == len(cost) - 1 and j == len(cost[i]) - 1):\n                if (count == 0):\n                    total_cost = 0\n                avg = total_cost / count\n                if (avg > max_avg):\n                    max_avg = avg\n            # For every cell, we create a list of possible routes to get to it. If the current cell is the first in the route, we get the total cost and number of cells visited. We use the list to store information about routes.\n            if (j < len(cost[i]) - 1):\n                if (i == len(cost) - 1):\n                    if (j == len(cost[i]) - 2):\n                        paths_list = paths_list[0:0]\n                        total_cost = paths_list[0][0]\n                        count = 1\n                        paths_list.append([cost[0][0], 0])\n                    paths_list = paths_list[0:0]\n                    total_cost = paths_list[0][0]\n                    count = 1\n                    paths_list.append([cost[0][0], 0])\n                if (i < len(cost) - 2):\n                    paths_list = paths_list[0:0]\n                    total_cost = paths_list[0][0]\n                    count = 1\n                    paths_list.append([cost[0][0], 0])\n                paths_list.append([cost[i][j] + paths_list[-1][0], paths_list[-1][1] + 1])\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    print(len(cost))\n    print(len(cost[0]))\n    m = len(cost)\n    n = len(cost[0])\n    #print(m,n)\n    ans = -sys.maxsize - 1\n    dp = [[0]*n for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[0][0]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n            ans = max(ans, dp[i][j])\n    print(dp)\n    return ans\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def helper(matrix, i, j, n):\n        if i >= n or j >= n:\n            return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    d = [[0 for j in range(n)] for i in range(m)]\n    # Base case\n    for i in range(m):\n        for j in range(n):\n            d[i][j] = cost[i][j]\n    \n    # Calculate values in table dp\n    for j in range(1,n):\n        d[0][j] = d[0][j-1] + cost[0][j]\n    \n    for i in range(1,m):\n        d[i][0] = d[i-1][0] + cost[i][0]\n    \n    for i in range(1,m):\n        for j in range(1,n):\n            d[i][j] = min(d[i-1][j],d[i][j-1]) + cost[i][j]\n    \n    total_cost = d[m-1][n-1]\n    num_of_cells = (m-1)*(n-1)\n    average = total_cost/num_of_cells\n    return [average, total_cost]\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    memo = [[-1 for _ in range(len(cost[0]))] for _ in range(len(cost))]\n    return maxAverageOfPathHelper(0,0, len(cost)-1, len(cost[0])-1, cost, memo)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Implement Your Code Here\n    # First convert the input matrix to a dictionary to have keys as cells and values as costs\n    # Then make a visited list to keep track of visited cells\n    # Define a function which returns the path with the maximum average given the visited list and the matrix\n    # Then return the maximum average path\n    \n    cell_to_cost = {}\n    for i in range(len(cost)):\n        for j in range(len(cost)):\n            cell_to_cost[(i,j)] = cost[i][j]\n    visited = [False] * len(cost)**2\n    \n    def max_avg(cell_to_cost, visited):\n        max_avg_path = []\n        max_avg = 0\n        \n        def avg_path(i, j, cell_to_cost, visited):\n            nonlocal max_avg_path, max_avg\n            if visited[i * len(cost) + j]:\n                return\n            visited[i * len(cost) + j] = True\n            avg = cell_to_cost[(i,j)] / sum(visited)\n            if avg > max_avg:\n                max_avg_path = [(i,j)]\n                max_avg = avg\n            elif avg == max_avg:\n                max_avg_path.append((i,j))\n            if i+1 < len(cost):\n                avg_path(i+1, j, cell_to_cost, visited)\n            if j+1 < len(cost):\n                avg_path(i, j+1, cell_to_cost, visited)\n        \n        for i in range(len(cost)):\n            for j in range(len(cost)):\n                avg_path(i, j, cell_to_cost, visited)\n        \n        max_avg_path.append((len(cost)-1,len(cost)-1))\n        return max_avg_path, max_avg\n    \n    return max_avg(cell_to_cost, visited)[1]\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i+1<n:\n                dp[i+1][j] = max(dp[i+1][j], dp[i][j]+cost[i+1][j])\n            if j+1<n:\n                dp[i][j+1] = max(dp[i][j+1], dp[i][j]+cost[i][j+1])\n    return dp[-1][-1]/((n*n)//2)\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print(\"\\nThe following students have height and weight above the minimum:\\n\")\n    for student in students:\n        if(students[student][0]>=h and students[student][1]>=w):\n            print(student)\n    return\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students=[]\n    for student in students:\n        if (students[student][0]>=h and students[student][1]>=w):\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for i in students:\n        if students[i][0] >= h and students[i][1] >= w:\n            filtered_students[i] = students[i]\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0]>h and v[1]>w}\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {student:students[student] for student in students if students[student][0] >= h and students[student][1] >= w}\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student_name, (student_height, student_weight) in students.items():\n        if student_height > h and student_weight > w:\n            filtered_students[student_name] = (student_height, student_weight)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # write your code here\n    return {student: data for student, data in students.items() if data[0]>=h and data[1]>=w}\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0] > h and v[1] > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = []\n    for student_name in students.keys():\n        if students[student_name][0] > h and students[student_name][1] > w:\n            filtered_data.append(student_name)\n    return filtered_data\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [k for k in students if students[k][0]>=h and students[k][1]>=w]\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j] and i == j:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize the list of indices\n    same = []\n    # Check each index in the list\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            same.append(index)\n    return same\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if nums1 == [] or nums2 == []:\n        return 0\n    same_pairs = []\n    for index, i in enumerate(nums1):\n        for indexj, j in enumerate(nums2):\n            if i == j:\n                same_pairs.append(index)\n                same_pairs.append(indexj)\n    return len(set(same_pairs))\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pair = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_pair += 1\n    return same_pair\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n    \ndef same_chars(string1, string2):\n    '''\n    Given two strings, write a method to decide if one is a permutation of the other.\n    '''\n    count = {}\n    string1 = list(string1)\n    string2 = list(string2)\n    for i in string1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in string2:\n        if i not in count:\n            return False\n        else:\n            count[i] -= 1\n    return True\n    \ndef is_anagram(string1, string2):\n    '''\n    Given two strings, write a method to decide if one is an anagram of the other.\n    '''\n    count = {}\n    string1 = list(string1)\n    string2 = list(string2)\n    for i in string1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in string2:\n        if i in count:\n            count[i] -= 1\n        else:\n            return False\n    for i in count:\n        if count[i]!= 0:\n            return False\n    return True\n    \ndef replace_spaces(string):\n    '''\n    Given a string, write a method to replace all spaces in the string with '%20'.\n    '''\n    newString = string.split()\n    newString = '%20'.join(newString)\n    return newString\n    \ndef valid_parentheses(string):\n    '''\n    Given a string, write a method to determine if it is a valid parenthesis.\n    '''\n    stack = []\n    for i in string:\n        if i == '(':\n            stack.append(')')\n        elif i == '[':\n            stack.append(']')\n        elif i == '{':\n            stack.append('}')\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[len(stack)-1]!= i:\n                return False\n            else:\n                stack.pop(len(stack)-1)\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        \ndef longest_substring(string):\n    '''\n    Given a string, write a method to find the longest substring without repeating characters.\n    '''\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            if len(substring) == len(set(substring)):\n                substrings.append(substring)\n    return sorted(substrings, key = len, reverse = True)[0]\n    \ndef flatten(matrix):\n    '''\n    Given a matrix, write a method to flatten it into a single list.\n    '''\n    array = []\n    for row in matrix:\n        array += row\n    return array\n    \ndef change_char(string, char, index):\n    '''\n    Given a string, write a method to replace a character in the string at a given index with another character.\n    '''\n    newString = list(string)\n    newString[index] = char\n    return ''.join(newString)\n    \ndef remove_chars(string, chars):\n    '''\n    Given a string, write a method to remove all occurrences of a given character in the string.\n    '''\n    newString = list(string)\n    for i in range(len(string)):\n        if string[i] in chars:\n            newString.pop(i)\n    return ''.join(newString)\n    \ndef num_of_same_chars(string, char):\n    '''\n    Given a string, write a method to find the number of times a given character appears in the string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count += 1\n    return count\n    \ndef rotate_array(array, num):\n    '''\n    Given a list of integers and an integer, write a method to rotate the array to the right by a given value.\n    '''\n    newArray = []\n    for i in range(num, len(array)):\n        newArray.append(array[i])\n    for i in range(num):\n        newArray.append(array[i])\n    return newArray\n    \ndef reverse_array(array):\n    '''\n    Given an array of integers, write a method to reverse the array.\n    '''\n    return array[::-1]\n    \ndef move_zeros(array):\n    '''\n    Given an array of integers, write a method to move all instances of the value 0 to the end of the array.\n    '''\n    newArray = []\n    for i in range(len(array)):\n        if array[i]!= 0:\n            newArray.append(array[i])\n    newArray += [0]*(len(array)-len(newArray))\n    return newArray\n    \ndef find_missing_int(array):\n    '''\n    Given an array of integers, write a method to find the first missing positive integer in the array.\n    '''\n    array.sort()\n    for i in range(len(array)):\n        if array[i] == i+1:\n            continue\n        if array[i] == array[i-1]+1:\n            continue\n        else:\n            return array[i-1]+1\n    return array[-1]+1\n    \ndef has_duplicates(array):\n    '''\n    Given an array of integers, write a method to find if the array has duplicate values.\n    '''\n    count = {}\n    for i in array:\n        if i in count:\n            return True\n        else:\n            count[i] = 1\n    return False\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pairs = []\n    for index, num in enumerate(nums1):\n        if nums1[index] == nums2[index]:\n            pairs.append(index)\n    return pairs\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # return len([i for i in range(len(nums1)) if eq(nums1[i], nums2[i])])\n    return sum([1 if eq(nums1[i], nums2[i]) else 0 for i in range(len(nums1))])\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    length = len(nums1)\n    \n    same_pair_list = []\n    \n    for i in range(length):\n        for j in range(length):\n            if nums1[i] == nums2[j] and not eq(same_pair_list, i):\n                same_pair_list.append(i)\n                same_pair_list.append(j)\n    return same_pair_list\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(x) for x in str(base**power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_int = int(base)\n    power_int = int(power)\n    res_sum = 0\n    for i in str(base_int):\n        res_sum += int(i) ** power_int\n    return res_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(base):\n        result += base ** power\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = sum(int(digit) ** power for digit in str(base))\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    while base:\n        power_sum += base % 10\n        base = int(base / 10)\n    power_sum *= power\n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    elif power == 1:\n        return base % 10\n    elif power == 2:\n        return (base % 10)**2 + power_base_sum(base//10, 1)\n    else:\n        return (base % 10)**power + power_base_sum(base//10, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(0, power + 1):\n        sum += base**i\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    #return sum([int(i) for i in str(base ** power)])\n    return sum(map(int,str(base**power)))\n    # return sum([int(i) for i in str(base ** power)])\nprint(power_base_sum(10,10))\nprint(power_base_sum(10,100))\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += base\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(x) for x in str(base ** power)])\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # import re\n    regex = re.compile(r'[\\'\\\"].*?[\\'\\\"]')\n    regex.findall(text1)\n    print(regex.findall(text1))\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\\"(.+?)\\\"',text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.strip()\n    #print(text1)\n    #text = text1.replace('\"','')\n    text1 = re.sub(r'[^A-Za-z0-9-\\s]','',text1)\n    #print(text1)\n    #text2 = re.sub(r'[^A-Za-z0-9\\s]','',text1)\n    #print(text2)\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.split(\" \")\n    res = []\n    for x in text:\n        if x.startswith('\"') or x.endswith('\"'):\n            res.append(x)\n    return res\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quo = re.findall(\"[\\\"][^\\\"]*[\\\"]\", text1)\n    quo2 = re.findall(\"[\\'][^\\']*[\\']\", text1)\n    quo = list(set(quo))\n    quo2 = list(set(quo2))\n    quo.extend(quo2)\n    for i in range(len(quo)):\n        quo[i] = re.sub('[\\n\\r]','',quo[i])\n    return(quo)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text=text1\n    #text=\"\"\"If, in your philosophy, you are against the use of conventional morality and abstruse sense, you must be on the right.\n    #This is because we are all a product of our times, and the times we choose are best suited to us.\n    #And the result of our actions, whatever they be, is determined by us.\n    #The world is what it is, and nothing can change it.\n    #And the beauty of the world is in the chance.\n    #The chance is, in the end, always.\"\"\"\n    a=re.findall(\"\\\"(.*)\\\"\",text)\n    print(a)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #First Method\n    #text1 = 'Hello world \"this is a string\"  and many others'\n    #text1 = text1.replace(\"'\",'')\n    #text1 = text1.replace('\"',\"\")\n    #text1 = text1.replace(' ',\"\")\n    #text1 = text1.replace('.','')\n    #text1 = text1.replace(',','')\n    #text1 = text1.replace(';','')\n    #text1 = text1.replace('?','')\n    #text1 = text1.replace('!','')\n    #text1 = text1.replace('-','')\n    #text1 = text1.replace('(','')\n    #text1 = text1.replace(')','')\n    #text1 = text1.replace('/','')\n    #text1 = text1.replace('#','')\n    #text1 = text1.replace(':','')\n    #text1 = text1.replace('&','')\n    #text1 = text1.replace('.','')\n    #text1 = text1.replace('@','')\n    #text1 = text1.replace('$','')\n    #text1 = text1.replace('=','')\n    #text1 = text1.replace('%','')\n    #text1 = text1.replace('^','')\n    #text1 = text1.replace('~','')\n    #text1 = text1.replace('*','')\n    #text1 = text1.replace('+','')\n    #text1 = text1.replace('{','')\n    #text1 = text1.replace('}','')\n    #text1 = text1.replace('\\\\','')\n    #text1 = text1.replace('|','')\n    #text1 = text1.replace('0','')\n    #text1 = text1.replace('1','')\n    #text1 = text1.replace('2','')\n    #text1 = text1.replace('3','')\n    #text1 = text1.replace('4','')\n    #text1 = text1.replace('5','')\n    #text1 = text1.replace('6','')\n    #text1 = text1.replace('7','')\n    #text1 = text1.replace('8','')\n    #text1 = text1.replace('9','')\n    #text1 = text1.replace('_','')\n    #text1 = text1.replace('[','')\n    #text1 = text1.replace(']','')\n    #text1 = text1.replace('.','')\n    #text1 = text1.replace(',','')\n    #text1 = text1.replace('?','')\n    #text1 = text1.replace('!','')\n    #text1 = text1.replace('-','')\n    #text1 = text1.replace('(','')\n    #text1 = text1.replace(')','')\n    #text1 = text1.replace('/','')\n    #text1 = text1.replace('#','')\n    #text1 = text1.replace(':','')\n    #text1 = text1.replace('&','')\n    #text1 = text1.replace('.','')\n    #text1 = text1.replace('@','')\n    #text1 = text1.replace('$','')\n    #text1 = text1.replace('=','')\n    #text1 = text1.replace('%','')\n    #text1 = text1.replace('^','')\n    #text1 = text1.replace('~','')\n    #text1 = text1.replace('*','')\n    #text1 = text1.replace('+','')\n    #text1 = text1.replace('{','')\n    #text1 = text1.replace('}','')\n    #text1 = text1.replace('\\\\','')\n    #text1 = text1.replace('|','')\n    #text1 = text1.replace('0','')\n    #text1 = text1.replace('1','')\n    #text1 = text1.replace('2','')\n    #text1 = text1.replace('3','')\n    #text1 = text1.replace('4','')\n    #text1 = text1.replace('5','')\n    #text1 = text1.replace('6','')\n    #text1 = text1.replace('7','')\n    #text1 = text1.replace('8','')\n    #text1 = text1.replace('9','')\n    #text1 = text1.replace('_','')\n    #text1 = text1.replace('[','')\n    #text1 = text1.replace(']','')\n    #text1 = text1.replace('.','')\n    #text1 = text1.replace(',','')\n    #text1 = text1.replace('?','')\n    #text1 = text1.replace('!','')\n    #text1 = text1.replace('-','')\n    #text1 = text1.replace('(','')\n    #text1 = text1.replace(')','')\n    #text1 = text1.replace('/','')\n    #text1 = text1.replace('#','')\n    #text1 = text1.replace(':','')\n    #text1 = text1.replace('&','')\n    #text1 = text1.replace('.','')\n    #text1 = text1.replace('@','')\n    #text1 = text1.replace('$','')\n    #text1 = text1.replace('=','')\n    #text1 = text1.replace('%','')\n    #text1 = text1.replace('^','')\n    #text1 = text1.replace('~','')\n    #text1 = text1.replace('*','')\n    #text1 = text1.replace('+','')\n    #text1 = text1.replace('{','')\n    #text1 = text1.replace('}','')\n    #text1 = text1.replace('\\\\','')\n    #text1 = text1.replace('|','')\n    #text1 = text1.replace('0','')\n    #text1 = text1.replace('1','')\n    #text1 = text1.replace('2','')\n    #text1 = text1.replace('3','')\n    #text1 = text1.replace('4','')\n    #text1 = text1.replace('5','')\n    #text1 = text1.replace('6','')\n    #text1 = text1.replace('7','')\n    #text1 = text1.replace('8','')\n    #text1 = text1.replace('9','')\n    #text1 = text1.replace('_','')\n    #text1 = text1.replace('[','')\n    #text1 = text1.replace(']','')\n    #text1 = text1.replace('.','')\n    #text1 = text1.replace(',','')\n    #text1 = text1.replace('?','')\n    #text1 = text1.replace('!','')\n    #text1 = text1.replace('-','')\n    #text1 = text1.replace('(','')\n    #text1 = text1.replace(')','')\n    #text1 = text1.replace('/','')\n    #text1 = text1.replace('#','')\n    #text1 = text1.replace(':','')\n    #text1 = text1.replace('&','')\n    #text1 = text1.replace('.','')\n    #text1 = text1.replace('@','')\n    #text1 = text1.replace('$','')\n    #text1 = text1.replace('=','')\n    #text1 = text1.replace('%','')\n    #text1 = text1.replace('^','')\n    #text1 = text1.replace('~',''"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    start = text1.index(\"\\\"\") + 1\n    end = text1.index(\"\\\"\", start)\n    return text1[start:end]\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    m = re.findall(r'\".*?\"', text1)\n    return m\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # my_string = '\"Python is great\"'\n    # print(my_string)\n    # my_string = '\"Python is awesome\"'\n    # print(my_string)\n    # my_string = '\"Python is fun\" is awesome'\n    # print(my_string)\n    # my_string = \"Python is fun\" is awesome\n    # print(my_string)\n    # my_string = 'Python is fun\" is awesome'\n    # print(my_string)\n    # my_string = 'Python is fun\" is \"awesome\"'\n    # print(my_string)\n    # my_string = 'Python is \"fun\" is \"awesome\"'\n    # print(my_string)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    list = []\n    for i in range(len(test_tup)-1):\n        list.append(test_tup[i]*test_tup[i+1])\n    return tuple(list)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return ()\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(el * el2 for el, el2 in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # define a tuple\n    tup = test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tup) - 1):\n        new_tuple += (test_tup[i] * test_tup[i+1],)\n    return new_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert len(test_tup) > 1\n    multiply_list = []\n    for i in range(len(test_tup)-1):\n        multiply_list.append(test_tup[i] * test_tup[i+1])\n    return tuple(multiply_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_list = []\n    for x in range(len(test_tup) - 1):\n        test_list.append(test_tup[x] * test_tup[x + 1])\n    return tuple(test_list)\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if lst1==[]:\n        return lst2\n    elif lst2==[]:\n        return lst1\n    else:\n        return lst1[:1]+lst2[:1]+sum_list(lst1[1:],lst2[1:])\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #create an empty list\n    list = []\n    #iterate over the list\n    for i in range(len(lst1)):\n        #add the sum of two numbers in the same index of the two lists\n        list.append(lst1[i]+lst2[i])\n    #return the list\n    return list\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    # Initialize an empty list\n    \n    output = []\n    \n    # Add the corresponding elements of lists together and append it to the output list\n    \n    for x in range(len(lst1)):\n        output.append(lst1[x] + lst2[x])\n    \n    return output\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #return map(lambda x: x[0]+x[1], zip(lst1,lst2))\n    return [x[0]+x[1] for x in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return \"Error: Lists are of different lengths.\"\n    else:\n        return [i + j for i, j in zip(lst1, lst2)]\n        # return [sum(x) for x in zip(lst1, lst2)]\n    "
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n    \nprint(sum_list([1,2,3],[4,5,6]))\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    lst = []\n    for k, v in groupby(nums):\n        lst.append(int(k))\n    return lst\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # result = []\n    # for k, g in groupby(nums):\n    #     result.append(int(k))\n    #     result.append(len(list(g)))\n    # result = [len(list(g)) for k, g in groupby(nums)]\n    return [len(list(g)) for k, g in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # This solution is O(n^2) in time and O(1) in space\n    # nums = list(set(nums))\n    # for i in range(len(nums) - 1):\n    #     if nums[i] == nums[i + 1]:\n    #         nums.pop(i)\n    # return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def consec_dups_remover(nums):\n        consec_dups = [len(list(group)) for key, group in groupby(nums)]\n        consec_dups_greater_than_two = [num for num in consec_dups if num >= 2]\n        if consec_dups_greater_than_two:\n            i = 0\n            while i < len(nums) - 1:\n                if consec_dups_greater_than_two[0] == consec_dups[i]:\n                    nums.pop(i)\n                    nums.pop(i)\n                    i = 0\n                    consec_dups = [len(list(group)) for key, group in groupby(nums)]\n                    consec_dups_greater_than_two = [num for num in consec_dups if num >= 2]\n                else:\n                    i += 1\n        else:\n            pass\n        return nums\n    return consec_dups_remover(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #Use groupby\n    return [list(v) for _, v in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # print(groupby(nums))\n    # print(len(nums) - len(list(groupby(nums))))\n    # print(list(groupby(nums)))\n    # print(list(groupby(nums))[1])\n    print(len(nums) - len(list(groupby(nums))))\n    \ndef sum_of_intervals(intervals):\n    '''\n    Given a list of intervals, merge all the overlapping intervals to produce a list that has only mutually exclusive intervals.\n    '''\n    # print(intervals)\n    # print(sorted(intervals, key=lambda i:i[0]))\n    sorted_intervals = sorted(intervals, key=lambda i: i[0])\n    # print(sorted_intervals)\n    merged_intervals = [sorted_intervals[0]]\n    for interval in sorted_intervals[1:]:\n        last_merged_interval = merged_intervals.pop()\n        if interval[0] <= last_merged_interval[1]:\n            merged_intervals.append([last_merged_interval[0], interval[1] if interval[1] > last_merged_interval[1] else last_merged_interval[1]])\n        else:\n            merged_intervals.append(last_merged_interval)\n            merged_intervals.append(interval)\n    # print(merged_intervals)\n    return merged_intervals\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return 0\n    nums.sort()\n    length = 1\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[i-1]:\n            length += 1\n    return length\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for x in nums:\n        if nums.count(x) > 1:\n            nums.remove(x)\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    new_list = list(groupby(nums))\n    for i in new_list:\n        if i[0] == i[1][0]:\n            new_list.remove(i)\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi * r**2 * h)/3\n    return s\ndef lateral_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    s = 2 * math.pi * r * (r + h)\n    return s\ndef lateral_cuboid(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a cuboid given the dimensions a, b, and c.\n    '''\n    s = 2 * (a*b + b*c + c*a)\n    return s\ndef lateral_pyramid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given the dimensions a, b, and h.\n    '''\n    s = (a*b)/3 + a*h + b*h\n    return s\ndef lateral_prism(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a prism given the dimensions a, b, and c.\n    '''\n    s = a*b + a*c + b*c\n    return s\ndef lateral_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the dimensions a, b, and h.\n    '''\n    s = ((a+b)*h)/2\n    return s\ndef lateral_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the dimensions a and b.\n    '''\n    s = 2*a*b\n    return s\ndef lateral_parallelogram(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the dimensions a, b, and h.\n    '''\n    s = 2*(a*b) + h*b\n    return s\ndef lateral_triangle(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given the dimensions a, b, and h.\n    '''\n    s = (a*b)/2 + h*b\n    return s\ndef lateral_square(a):\n    '''\n    Write a function to find the lateral surface area of a square given the dimensions a.\n    '''\n    s = 4*a**2\n    return s\ndef lateral_parallelogram(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the dimensions a, b, and h.\n    '''\n    s = 2*(a*b) + h*b\n    return s\ndef lateral_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the dimensions a, b, and h.\n    '''\n    s = ((a+b)*h)/2\n    return s\ndef lateral_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the dimensions a and b.\n    '''\n    s = 2*a*b\n    return s\ndef lateral_rectangle_alt(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the dimensions a and b.\n    '''\n    s = a*b\n    return s\ndef lateral_triangle(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given the dimensions a, b, and h.\n    '''\n    s = (a*b)/2 + h*b\n    return s\ndef lateral_parallelogram(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the dimensions a, b, and h.\n    '''\n    s = 2*(a*b) + h*b\n    return s\ndef lateral_square(a):\n    '''\n    Write a function to find the lateral surface area of a square given the dimensions a.\n    '''\n    s = 4*a**2\n    return s\ndef lateral_parallelogram_alt(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the dimensions a, b, and h.\n    '''\n    s = a*b + h*b\n    return s\ndef lateral_square_alt(a):\n    '''\n    Write a function to find the lateral surface area of a square given the dimensions a.\n    '''\n    s = a**2\n    return s\ndef lateral_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given the radius r.\n    '''\n    s = math.pi * r**2\n    return s\ndef lateral_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    s = 4 * math.pi * r**2\n    return s\ndef lateral_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius r and the height h.\n    '''\n    s = 2 * math.pi * r * (r + h)\n    return s\ndef lateral_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    s = math.pi * r**2 * h / 3\n    return s\ndef lateral_cube(a):\n    '''\n    Write a function to find the lateral surface area of a cube given the dimensions a.\n    '''\n    s = 6*a**2\n    return s\ndef lateral_pyramid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given the dimensions a, b, and h.\n    '''\n    s = (a*b)/3 + a*h + b*h\n    return s\ndef lateral_prism(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a prism given the dimensions a, b, and c.\n    '''\n    s = a*b + a*c + b*c\n    return s\ndef lateral_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the dimensions a, b, and h.\n    '''\n    s = ((a+b)*h)/2\n    return s\ndef lateral_square(a):\n    '''\n    Write a function to find the lateral surface area of a square given the dimensions a.\n    '''\n    s = 4*a**2\n    return s\ndef lateral_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the dimensions a and b.\n    '''\n    s = 2*a*b\n    return s\ndef lateral_rectangle_alt(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the dimensions a and b.\n    '''\n    s = a*b\n    return s\ndef lateral_triangle(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given the dimensions a, b, and h.\n    '''\n    s = (a*b)/2 + h*b\n    return s\ndef lateral_triangle_alt(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given the dimensions a, b, and h.\n    '''\n    s = (a*b)/2 + h*b\n    return s\ndef lateral_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given the radius r.\n    '''\n    s = math.pi * r**2\n    return s\ndef lateral_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    s = 4 * math.pi * r**2\n    return s\ndef lateral_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius r and the height h.\n    '''"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2*math.pi*(r**2) + 2*math.pi*r*(r+h)\n    return s\ndef convert_to_cylinder(r,h):\n    '''\n    Write a function to convert an icosahedral sphere to a cylinder.\n    '''\n    c = (math.pi/12)*(3*(r**2) + (h**2))\n    return c\ndef perimeter(x):\n    '''\n    Write a function to find the perimeter of an object\n    '''\n    p = x*2\n    return p\ndef surface_area(x):\n    '''\n    Write a function to find the surface area of an object\n    '''\n    a = 2*x\n    return a\ndef volume(x):\n    '''\n    Write a function to find the volume of an object\n    '''\n    v = x/3\n    return v\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given a radius\n    '''\n    s = 4*math.pi*(r**2)\n    return s\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given a radius\n    '''\n    v = (4/3)*math.pi*(r**3)\n    return v\ndef area_triangle(a,b):\n    '''\n    Write a function to find the area of a triangle given the length of the sides\n    '''\n    s = (a*b)/2\n    return s\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle given the length of the sides\n    '''\n    v = (a*b*c)/3\n    return v\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium given the length of the sides and the height\n    '''\n    s = ((a+b)*h)/2\n    return s\ndef volume_trapezium(a,b,h):\n    '''\n    Write a function to find the volume of a trapezium given the length of the sides and the height\n    '''\n    v = ((a+b)*h)/3\n    return v\ndef area_square(a):\n    '''\n    Write a function to find the surface area of a square given the length of the sides\n    '''\n    s = a**2\n    return s\ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square given the length of the sides\n    '''\n    v = a**3\n    return v\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle given the length of the sides\n    '''\n    s = a*b\n    return s\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle given the length of the sides\n    '''\n    v = a*b\n    return v\ndef surface_area_cuboid(l,w,h):\n    '''\n    Write a function to find the surface area of a cuboid given the length, width and height\n    '''\n    s = 2*(l*w) + 2*(w*h) + 2*(h*l)\n    return s\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid given the length, width and height\n    '''\n    v = l*w*h\n    return v\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi*(r**2) + math.pi*(r**2)*(h/2)\n    return s\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    v = (1/3)*math.pi*(r**2)*(h/3)\n    return v\ndef surface_area_ellipsoid(r1,r2,r3):\n    '''\n    Write a function to find the surface area of an ellipsoid given the radii of the semi-axes.\n    '''\n    s = (4*math.pi*(r1**2)*(r2**2)*(r3**2))**(1/2)\n    return s\ndef volume_ellipsoid(r1,r2,r3):\n    '''\n    Write a function to find the volume of an ellipsoid given the radii of the semi-axes.\n    '''\n    v = (1/3)*(math.pi)*(r1**3)*(r2**3)*(r3**3)\n    return v\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given radius r and the height h.\n    '''\n    s = 2*math.pi*(r**2) + 2*math.pi*r*h\n    return s\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    v = math.pi*(r**2)*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    v = (4/3)*(math.pi)*(r**3)\n    return v\ndef surface_area_cube(l):\n    '''\n    Write a function to find the surface area of a cube given the length of one of its sides.\n    '''\n    s = l**2\n    return s\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given the length of one of its sides.\n    '''\n    v = l**3\n    return v\ndef volume_rectangular_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism given its length, width and height.\n    '''\n    v = l*w*h\n    return v\ndef surface_area_rectangular_prism(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism given its length, width and height.\n    '''\n    s = 2*(l*w) + 2*(w*h) + 2*(h*l)\n    return s\ndef surface_area_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram given the lengths of its sides.\n    '''\n    s = a*b\n    return s\ndef volume_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram given the lengths of its sides.\n    '''\n    v = a*b\n    return v\ndef area_square_pyramid(a,h):\n    '''\n    Write a function to find the surface area of a square pyramid given the base and height.\n    '''\n    s = 2*(a**2) + 2*(a*h)\n    return s\ndef volume_square_pyramid(a,h):\n    '''\n    Write a function to find the volume of a square pyramid given the base and height.\n    '''\n    v = a**3 + (a*h*h)/3\n    return v\ndef surface_area_triangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular prism given the lengths of its sides.\n    '''\n    s = a*b + b*c + a*c\n    return s\ndef volume_triangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a triangular prism given the lengths of its sides.\n    '''\n    v = (a*b*c)/3\n    return v\ndef volume_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid given the base and height.\n    '''\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r + 3.14159*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Your code goes here\n    #r: radius of the base of the cone\n    #h: height of the cone\n    #returns: lateral surface area of the cone\n    #ex: lateralsurface_cone(0.5,2)\n    return (math.pi*r*r) + ((2*math.pi*r*h) / 3)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface = ((math.pi)*(r**2)*h)/3\n    print(\"The lateral surface area of the cone is\",surface)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        return 2*math.pi*r*(r+h)\n    else:\n        return \"Invalid input\"\ndef latera"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S = 1/3 * math.pi * r * r * h\n    return S\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return round(math.pi*(r**2),2) + round(math.pi*r*h,2)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r + math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #type your solution here\n    area = math.pi*r**2 + math.pi*r*h\n    return area\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in text:\n        if i =='':\n            text = text.replace(' ', ':')\n        if i == '.':\n            text = text.replace('.', ':')\n        if i == ',':\n            text = text.replace(',', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[.,\\s]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    replacedText = re.sub(r'[. ]', \":\", text)\n    replacedText = re.sub(r'[, ]', \":\", replacedText)\n    return replacedText\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s', ':', text)\n    text = re.sub(r'\\,', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[.,\\s]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('\\s', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            high = mid - 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    first_occurrence = -1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if x == A[mid]:\n            first_occurrence = mid\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first_occurrence\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] > x:\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            if (mid == 0) or (x!= A[mid - 1]):\n                return mid\n            else:\n                right = mid - 1\n        elif x > A[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if x == A[mid]:\n            if mid == 0 or x!= A[mid - 1]:\n                return mid\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo, hi = 0, len(A) - 1\n    while lo <= hi:\n        mid = (hi + lo) // 2\n        if A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    if lo < len(A) and A[lo] == x:\n        return lo\n    else:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A):\n        if A[i] == x:\n            return i\n        i += 1\n    return -1\n    \ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return find_first_occurrence_helper(A, x, 0, len(A)-1)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Approach 1 : Naive\n    # Time : O(N^3)\n    # Space : O(1)\n    \n    # Approach 2 : 1-D Dynamic Programming\n    # Time : O(N^2)\n    # Space : O(N)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    N = len(arr)\n    start = 0\n    finish = 0\n    prefix = [0] * N\n    suffix = [0] * N\n    result = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #arr = [10, 30, 20]\n    result = 0\n    for i in range(len(arr)):\n        result += product(arr, i, len(arr))\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    \n    # We have to find sum of products of all possible subarrays\n    # this can be done in two ways\n    # using dynamic programming\n    # sum of products of subarrays from 0 to i\n    # dp[i] = sum of products of subarray from 0 to i\n    # take example of [1, 2, 3, 4, 5]\n    # dp[0] = 1\n    # dp[1] = 1 * 2 = 2\n    # dp[2] = 2 * 3 = 6\n    # dp[3] = 6 * 4 = 24\n    # dp[4] = 24 * 5 = 120\n    # so dp[4] + dp[3] + dp[2] + dp[1] + dp[0] = 120 + 24 + 6 + 2 + 1 = 178\n    # 1, 2, 3, 4, 5\n    # 1, 1, 2, 6, 24\n    # 1, 1, 1, 2, 6\n    # 1, 1, 1, 1, 2\n    # 1, 1, 1, 1, 1\n    # 1, 1, 1, 1, 1\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    s = 0\n    prod = 1\n    for i in range(n):\n        s += arr[i]\n        prod *= s\n    s = 0\n    prod = 1\n    for i in range(n - 1, -1, -1):\n        s += arr[i]\n        prod *= s\n    return prod\n    \ndef max_Subarray_Sum(arr):\n    '''\n    Write a python function to find maximum sum of contiguous subarray in a given array\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    maxSum = arr[0]\n    currSum = arr[0]\n    for i in range(1, n):\n        if currSum < 0:\n            currSum = arr[i]\n        else:\n            currSum += arr[i]\n        maxSum = max(maxSum, currSum)\n    return maxSum\n    \ndef get_Max_Len_Substr_With_K_Distinct_Chars(str, k):\n    '''\n    Write a python function to get the maximum length of a substring in a string where the substring has k distinct characters\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    maxLen = 0\n    start = 0\n    end = 0\n    d = {}\n    for i in range(n):\n        d[str[i]] = d.get(str[i], 0) + 1\n        if d[str[i]] == 1:\n            k -= 1\n        while k < 0:\n            d[str[start]] -= 1\n            if d[str[start]] == 0:\n                k += 1\n            start += 1\n        maxLen = max(maxLen, i - start + 1)\n    return maxLen\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    max_val = 1e9 + 7\n    min_val = -(max_val)\n    left = [0] * n\n    right = [0] * n\n    left[0] = right[n - 1] = 1\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # arr = [1, 2, 3, 4, 5]\n    # o/p = 55\n    n = len(arr)\n    prod = 1\n    sum_prod = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        total_sum += arr[i]*(arr[i]+arr[i+1])*(arr[i]+arr[i+1]+arr[i+2])\n    return total_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # print('sum of sub array:',arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i,n):\n            sum+=math.prod(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum_of_product_of_subarray(arr)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & ~1) >> 1) | ((n & 1) << 1)\n    \ndef set_middle_bits_sol_2(n):  \n    return ((n & ~1) >> 1) | ((n & 1) << 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b11111111\n    return n & mask\n    \n    \ndef set_first_bit(n):  \n    '''\n    Write a python function to toggle the first bit of a number. https://www.geeksforgeeks.org/toggle-first-bit-number/\n    '''\n    return n ^ 0b1\n    \n    \ndef set_last_bit(n):  \n    '''\n    Write a python function to toggle the last bit of a number. https://www.geeksforgeeks.org/toggle-last-bit-number/\n    '''\n    return n ^ 0b1\n    \n    \ndef set_first_and_last_bits(n):  \n    '''\n    Write a python function to toggle the first and the last bit of a number. https://www.geeksforgeeks.org/toggle-first-and-last-bit-number/\n    '''\n    return n ^ 0b11111111\n    \n    \ndef set_first_and_last_bits(n):  \n    '''\n    Write a python function to toggle the first and the last bit of a number. https://www.geeksforgeeks.org/toggle-first-and-last-bit-number/\n    '''\n    return n ^ 0b11111111\n    \n    \ndef set_odd_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b11111111\n    return n & mask\n    \n    \ndef set_even_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b11100000\n    return n & mask\n    \n    \ndef set_odd_even_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b111011111\n    return n & mask\n    \n    \ndef set_random_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b11111111111111111111111111111111\n    return n & mask\n    \n    \ndef set_right_most_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b1110011111111111111111111111111\n    return n & mask\n    \n    \ndef set_right_most_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b1110111111111111111111111111111\n    return n & mask\n    \n    \ndef set_left_most_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b1111111111111111111111111111111\n    return n & mask\n    \n    \ndef set_left_most_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b111111111111111111111111111111\n    return n & mask\n    \n    \ndef clear_right_most_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b1110011111111111111111111111111\n    return n & mask\n    \n    \ndef clear_right_most_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b1110111111111111111111111111111\n    return n & mask\n    \n    \ndef clear_left_most_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b1111111111111111111111111111111\n    return n & mask\n    \n    \ndef clear_left_most_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b111111111111111111111111111111\n    return n & mask\n    \n    \ndef clear_all_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b111111111111111111111111111111\n    return n & mask\n    \n    \ndef clear_all_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b111111111111111111111111111111\n    return n & mask\n    \n    \ndef clear_middle_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b111111111111111111111111111111\n    return n & mask\n    \n    \ndef clear_middle_bits(n):  \n    '''\n    Write a python function to toggle all bits of a number except the first and the last bit. https://www.geeksforgeeks.org/toggle-odd-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b111111111111111111111111111111\n    return n & mask\n    \n    \ndef clear_first_bit(n):  \n    '''\n    Write a python function to toggle the first bit of a number. https://www.geeksforgeeks.org/toggle-first-bit-number/\n    '''\n    mask = 0b1000000000000000\n    return n & mask\n    \n    \ndef clear_first_bit(n):  \n    '''\n    Write a python function to toggle the first bit of a number. https://www.geeksforgeeks.org/toggle-first-bit-number/\n    '''\n    mask = 0b1000000000000000\n    return n & mask\n    \n    \ndef clear_last_bit(n):  \n    '''\n    Write a python function to toggle the last bit of a number. https://www.geeksforgeeks.org/toggle-last-bit-number/\n    '''\n    mask = 0b111"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #Your code here\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    l = list(bin(n)[2:])\n    for i in range(len(l)-2):\n        if l[i] == '0':\n            l[i] = '1'\n        else:\n            l[i] = '0'\n    l[0] = '1'\n    l[len(l)-1] = '0'\n    return int(\"\".join(l),2)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return int('1'+'0'*n+'1', 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Number of bits in the given number \n    import math\n    import os\n    import random\n    import re\n    import sys\n    \n    # Returns true if x is a power of 2\n    def isPowerOfTwo(n): \n      \n        if (n == 1): \n            return True\n        elif (n == 0 or n == 3): \n            return False\n        else: \n            while (n): \n                if (n % 2): \n                    return False\n                n = n / 2\n            return True\n      \n    # Returns index of rightmost set bit in the number \n    def findIndex(number): \n      \n        if (number == 0): \n            return 0\n        i = 0\n        while (number): \n            number = number & (number - 1) \n            i += 1\n        return i \n      \n    # Utility function to get a \n    # set bit in a number \n    def setBit(n, index): \n      \n        # Set the bit at index in n \n        n = n | (1 << index) \n      \n        # Return modified n \n        return n \n      \n    # Utility function to clear \n    # a bit in a number \n    def clearBit(n, index): \n      \n        # Clear the bit at index in n \n        n = n & ~(1 << index) \n      \n        # Return modified n \n        return n \n      \n    # Function to toggle bits of the number \n    # except the first and the last bit \n    def toggleBits(n): \n      \n        # If number is even, make it odd \n        if ((n & 1) == 0): \n            n = n + 1\n      \n        # Remove the rightmost bit of the number \n        n = n - (n & 1) \n      \n        # Keep on doing this until n becomes \n        # odd. At this point, n contains rightmost \n        # set bit \n        while (n): \n            # Toggle the rightmost bit \n            n = toggleBit(n) \n            # If n is even then make it odd \n            if ((n & 1) == 0): \n                n = n + 1\n      \n        # Return the rightmost set bit \n        return n \n      \n    # Function to toggle a bit \n    def toggleBit(n, i): \n      \n        # Clear the ith bit if the number \n        # at index contains it \n        if ((n & (1 << i))): \n            n = clearBit(n, i) \n      \n        # Else set the ith bit of n \n        else: \n            n = setBit(n, i) \n      \n        # Return modified n \n        return n \n      \n    # Driver program to test above functions \n    n = int(input())\n    i = int(input())\n    if(isPowerOfTwo(n)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    print(toggleBits(n))\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = ~(~n)\n    n = n & 0x5555555555555555;\n    return ~(~n)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    t = n\n    while n: \n        n >>= 1\n        t ^= 1\n    return t\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    res = 1\n    i = 1\n    while i <= n:\n        res = res << 1\n        res = res | 1\n        i = i << 1\n    return res ^ 1\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # toggle bits of the number except the first and the last bit\n    n &= 0x5555555555555555;\n    n |= (n >> 1) & 0x3333333333333333;\n    n |= (n >> 2) & 0x0f0f0f0f0f0f0f0f;\n    n |= (n >> 4) & 0x00FF00FF00FF00FF;\n    n |= (n >> 8) & 0x0000FFFF0000FFFF;\n    n |= (n >> 16) & 0x00000000FFFFFFFF;\n    return n;\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    bisect.insort(a, x)\n    print(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    i = len(a) - 1\n    while i > 0 and a[i] < a[i - 1]:\n        a[i], a[i - 1] = a[i - 1], a[i]\n        i -= 1\n    return a\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Initialize start and end indexes \n    start, end = 0, len(a)\n    # Find index where a[i] <= x\n    while (start < end):\n        mid = (start + end)//2\n        # If x is greater than mid, ignore left half\n        if (x > a[mid]):\n            start = mid + 1\n        # If x is smaller than mid, ignore right half\n        elif (x < a[mid]):\n            end = mid\n        # If x is equal to mid, return mid\n        else:\n            return mid\n    # If no value falls in range, return start\n    return start\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    i = bisect.bisect_left(a, x, 0, len(a))\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Initialize 'i' at the beginning of the array\n    i = 0\n    while i < len(a) and x > a[i]:\n        i += 1\n    return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Initialize 'i' at the end of the array\n    i = len(a) - 1\n    while i >= 0 and x < a[i]:\n        i -= 1\n    return i\ndef binary_search(a, x):\n    '''\n    Write a function to locate the leftmost insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Initialize the 'left' pointer at the beginning of the array and 'right' pointer at the end of the array\n    left = 0\n    right = len(a) - 1\n    # If the 'right' pointer is less than or equal to the 'left' pointer, return -1\n    while left <= right:\n        # Calculate the midpoint of the array\n        midpoint = (left + right) // 2\n        # If the specified value is less than the value in the midpoint of the array, return the left insertion point\n        if x < a[midpoint]:\n            return midpoint\n        # If the specified value is greater than the value in the midpoint of the array, return the right insertion point\n        elif x > a[midpoint]:\n            left = midpoint + 1\n        # If the specified value is equal to the value in the midpoint of the array, return the midpoint of the array\n        else:\n            return midpoint\n        # If the specified value is less than the smallest value in the array, return -1\n        if x < a[left]:\n            return -1\n        # If the specified value is greater than the greatest value in the array, return the length of the array\n        if x > a[right]:\n            return right + 1\n        # If the specified value is equal to the smallest value in the array, return the leftmost position\n        if x == a[left]:\n            return left\n        # If the specified value is equal to the greatest value in the array, return the rightmost position\n        if x == a[right]:\n            return right + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # left_insertion([1, 3, 4, 5, 7], 6)\n    #\n    # Example 1:\n    #\n    # Input: nums = [1, 3, 5, 6], target = 5\n    # Output: 2\n    # Example 2:\n    #\n    # Input: nums = [1, 3, 5, 6], target = 2\n    # Output: 1\n    # Example 3:\n    #\n    # Input: nums = [1, 3, 5, 6], target = 7\n    # Output: 4\n    # Example 4:\n    #\n    # Input: nums = [1, 3, 5, 6], target = 0\n    # Output: 0\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\nprint(check_str('a'))\nprint(check_str('A'))\nprint(check_str('a_a'))\nprint(check_str('A_a'))\nprint(check_str('#a'))\nprint(check_str('a#'))\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string) is None: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string=re.sub(\"[!@#$&*()]\",'',string)\n    if re.search(regex,string): \n        return True \n    else: \n        return False\ndef check_str2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(r'^[A-Za-z0-9_]*',string):\n        return True \n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex,string)\n    if match:\n        return match.group(0)\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)):\n        print(\"String starts with a vowel\") \n    else:\n        print(\"String doesn't start with a vowel\") \ndef main():\n    '''\n    Receive input from the user and check whether the string starts with a vowel or not.\n    '''\n    string = input(\"Enter the string to check: \")\n    check_str(string)\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    return False\n    \nif __name__ == '__main__': \n    string = input()\n    print(check_str(string)) \n    "
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matcher = re.findall(regex,string) \n    return matcher\n    # return bool(re.match(r'^[a-zA-Z]*',string))\n    # return len(re.findall(regex,string))!=0\nstring = 'This Is Python'\nprint(check_str(string))\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    if(re.search(regex,string)):\n        return 'The given string is starting with a vowel'\n    else:\n        return 'The given string is not starting with a vowel'\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        print(\"String starts with a vowel\")\n    else:\n        print(\"String doesn't start with a vowel\")\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 / 2 ** (n - 1) + geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum_helper(n,s):\n        if n == 1:\n            return s\n        else:\n            return geometric_sum_helper(n-1,s*3)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return n*(1-pow(1-0.2, n-1))\n    \n    \nif __name__ == \"__main__\":\n    print(geometric_sum(3))\n    print(geometric_sum(4))\n    print(geometric_sum(5))\n    print(geometric_sum(6))\n    print(geometric_sum(7))\n    print(geometric_sum(8)"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return 2 * geometric_sum(n-1)\n    "
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n + geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n==0:\n        return 1\n    else:\n        return (1/2)*((2*(n-1))+(1-1/2))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    # define base case\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n > 1:\n        return n * geometric_sum(n - 1)\n    else:\n        return 1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return math.ceil(n/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def fact(n):\n        if n==0:\n            return 1\n        return n*fact(n-1)\n    def is_tribonacci(n):\n        if n==0:\n            return 1\n        a=0\n        b=1\n        c=0\n        for i in range(n-2):\n            d=a+b+c\n            c=a\n            a=b\n            b=d\n        if d==n:\n            return 1\n        return 0\n    return (n-1)*n + 2*(n-1) - is_tribonacci(n)\n    \n    \ndef fibonacci_sum_squares(n):\n    '''\n    Write a python function to find sum of squares of first n fibonacci numbers. https://www.geeksforgeeks.org/sum-of-squares-of-first-n-natural-numbers-using-n-squared-formula/\n    '''\n    def fibonacci_sequence(n):\n        if n==0:\n            return 0\n        if n==1:\n            return 1\n        f1=1\n        f2=1\n        f3=2\n        for i in range(n-3):\n            f3=f1+f2\n            f1=f2\n            f2=f3\n        return f3\n    return fibonacci_sequence(n)**2\n    \ndef fibonacci_sum(n):\n    '''\n    Write a python function to find sum of first n fibonacci numbers. https://www.geeksforgeeks.org/sum-of-first-n-natural-numbers-using-n-squared-formula/\n    '''\n    def fibonacci_sequence(n):\n        if n==0:\n            return 0\n        if n==1:\n            return 1\n        f1=1\n        f2=1\n        f3=2\n        for i in range(n-3):\n            f3=f1+f2\n            f1=f2\n            f2=f3\n        return f3\n    return fibonacci_sequence(n)\n    \ndef fibonacci_sum_squares_v2(n):\n    '''\n    Write a python function to find sum of squares of first n fibonacci numbers. https://www.geeksforgeeks.org/sum-of-squares-of-first-n-natural-numbers-using-n-squared-formula/\n    '''\n    def fibonacci_sequence(n):\n        if n==0:\n            return 0\n        if n==1:\n            return 1\n        f1=1\n        f2=1\n        f3=2\n        for i in range(n-3):\n            f3=f1+f2\n            f1=f2\n            f2=f3\n        return f3\n    return fibonacci_sequence(n)**2\n    \n    \ndef longest_collatz_sequence(n):\n    '''\n    Write a python function to find longest collatz sequence. https://www.geeksforgeeks.org/longest-collatz-sequence/\n    '''\n    max_len = 0\n    start = 1\n    for i in range(1, n):\n        temp = 1\n        while i!= 1:\n            if i % 2 == 0:\n                i = i / 2\n                temp = temp + 1\n            else:\n                i = (3 * i) + 1\n                temp = temp + 1\n        if temp > max_len:\n            max_len = temp\n            start = i\n    return [start, max_len]\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 0: \n        return\n    k = (n * (n + 1))//2\n    return k \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while(True): \n        a = int(i * (i + 1) / 2)\n        b = int(n * (n + 1) / 2)\n        if a < b: \n            return i \n        i = i + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    sum=0\n    n=int(n)\n    for i in range(1,n):\n        sum+=i\n    print(sum)\n    return int(math.floor(math.sqrt(sum)))\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0; \n    for i in range(1, n): \n        index += i; \n        if((index * (index + 1)) // 2 < n): \n            return index; \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    i = 1\n    while True: \n        count = count + i \n        if len(str(count)) == n: \n            return i \n        i = i + 1\ndef gen_Triangular_Num(n): \n    '''\n    Write a python function to generate the nth triangular number. https://www.geeksforgeeks.org/python-program-for-generating-next-triangular-number/\n    '''\n    return int((n*(n+1))/2)\ndef find_Max_Max_Digit(number): \n    '''\n    Write a python function to find the maximum digit of a number. https://www.geeksforgeeks.org/python-find-maximum-digit-number/\n    '''\n    return int(max(str(number)))\ndef convert_Decimal_to_Binary(number): \n    '''\n    Write a python function to convert a decimal to binary. https://www.geeksforgeeks.org/python-program-to-convert-decimal-to-binary/\n    '''\n    return format(number, 'b')\ndef convert_Binary_to_Decimal(number): \n    '''\n    Write a python function to convert a binary to decimal. https://www.geeksforgeeks.org/python-program-to-convert-binary-to-decimal/\n    '''\n    return int(number, 2)\ndef find_Num_of_Odd_digits(number): \n    '''\n    Write a python function to find the number of odd digits in a number. https://www.geeksforgeeks.org/python-count-number-of-odd-digits-in-a-given-number/\n    '''\n    return int(len([x for x in str(number) if int(x)%2 == 1]))\ndef find_Num_of_Even_digits(number): \n    '''\n    Write a python function to find the number of even digits in a number. https://www.geeksforgeeks.org/python-count-number-of-even-digits-in-a-given-number/\n    '''\n    return int(len([x for x in str(number) if int(x)%2 == 0]))\ndef get_Digit_In_Number(number, nth_digit): \n    '''\n    Write a python function to get the nth digit of a number. https://www.geeksforgeeks.org/python-get-nth-digit-of-a-number/\n    '''\n    return int(str(number)[nth_digit])\ndef find_Sum_Of_Digits(number): \n    '''\n    Write a python function to find the sum of digits of a number. https://www.geeksforgeeks.org/python-sum-of-digits-of-a-number/\n    '''\n    return int(sum(map(int, str(number))))\ndef find_Sum_Of_Factors(number): \n    '''\n    Write a python function to find the sum of factors of a number. https://www.geeksforgeeks.org/python-sum-of-factors-of-a-number/\n    '''\n    return int(sum([x for x in range(1, number) if number % x == 0]))\ndef find_Sum_Of_Factors_In_Range(number): \n    '''\n    Write a python function to find the sum of factors in a given range. https://www.geeksforgeeks.org/python-sum-of-factors-in-a-given-range/\n    '''\n    return int(sum([x for x in range(1, number) if number % x == 0]))\ndef find_Sum_Of_Digits_In_Range(number): \n    '''\n    Write a python function to find the sum of digits in a given range. https://www.geeksforgeeks.org/python-sum-of-digits-in-a-given-range/\n    '''\n    return int(sum([int(x) for x in str(number)]))\ndef find_Sum_Of_Digits_In_Range_With_Given_Digits(number, num1, num2): \n    '''\n    Write a python function to find the sum of digits in a given range with a given set of digits. https://www.geeksforgeeks.org/python-sum-of-digits-in-a-given-range-with-a-given-set-of-digits/\n    '''\n    return int(sum([int(x) for x in str(number) if int(x) in range(num1, num2 + 1)]))\ndef find_Sum_Of_Digits_In_Range_With_Given_Digits_With_Odd_Sum(number, num1, num2): \n    '''\n    Write a python function to find the sum of digits in a given range with a given set of digits with odd sum. https://www.geeksforgeeks.org/python-sum-of-digits-in-a-given-range-with-a-given-set-of-digits-with-odd-sum/\n    '''\n    return int(sum([int(x) for x in str(number) if int(x) in range(num1, num2 + 1) and int(x)%2 == 1]))\ndef find_Number_of_Even_Digits_In_Range_With_Given_Digits_With_Odd_Sum(number, num1, num2): \n    '''\n    Write a python function to find the number of even digits in a given range with a given set of digits with odd sum. https://www.geeksforgeeks.org/python-number-of-even-digits-in-a-given-range-with-a-given-set-of-digits-with-odd-sum/\n    '''\n    return int(len([x for x in str(number) if int(x) in range(num1, num2 + 1) and int(x)%2 == 1]))\ndef find_Number_of_Even_Digits_In_Range_With_Given_Digits_With_Odd_Sum_Of_Factors(number, num1, num2): \n    '''\n    Write a python function to find the number of even digits in a given range with a given set of digits with odd sum of factors. https://www.geeksforgeeks.org/python-number-of-even-digits-in-a-given-range-with-a-given-set-of-digits-with-odd-sum-of-factors/\n    '''\n    return int(len([x for x in str(number) if int(x) in range(num1, num2 + 1) and int(x)%2 == 1 and int(x) in [y for y in range(1, number) if number % y == 0]]))\ndef get_Digit_In_Number_With_Index(number, nth_digit): \n    '''\n    Write a python function to get the nth digit of a number with index of a digit. https://www.geeksforgeeks.org/python-get-nth-digit-of-a-number-with-index-of-a-digit/\n    '''\n    return int(str(number)[nth_digit])\ndef find_Index_of_Max_And_Min_Digit_Number_In_Range(number, num1, num2): \n    '''\n    Write a python function to find the index of maximum and minimum digits in a range. https://www.geeksforgeeks.org/python-find-index-of-maximum-and-minimum-digits-in-a-range/\n    '''\n    return int(str(number).index(max(str(number)) + min(str(number))))\ndef find_Number_Of_Even_Digits_In_Range(number, num1, num2): \n    '''\n    Write a python function to find the number of even digits in a given range. https://www.geeksforgeeks.org/python-find-number-of-even-digits-in-a-given-range/\n    '''\n    return int(len([x for x in str(number) if int(x) in range(num1, num2 + 1) and in"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l = []\n    for i in range(1,int(math.sqrt(n*8))):\n        l.append(i*(i+1)/2)\n    # print(l)\n    ans = -1\n    for i in range(len(l)):\n        j = n - l[i]\n        if j in l:\n            ans = l.index(j)\n            break\n    return ans + 1\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]:test_tup[i+1] for i in range(0,len(test_tup)-1,2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    # for i in range(len(test_tup)):\n    #     result[test_tup[i]] = test_tup[i + 1]\n    # return result\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i + 1]\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup)):\n        if i % 2 == 0:\n            d[test_tup[i]] = test_tup[i+1]\n    print(d)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # If test_tup is a tuple with even number of elements\n    if len(test_tup) % 2 == 0:\n        # converting tuple to dictionary\n        test_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n        return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup_dict = {}\n    i=0\n    while(i<len(test_tup)):\n        tup_dict[test_tup[i]] = test_tup[i+1]\n        i+=2\n    return tup_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Convert the tuple to dictionary using zip()\n    test_dict = dict(zip(test_tup,test_tup[1:]))\n    # return test_dict\n    # print(test_dict)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(type(test_tup))\n    for i in test_tup:\n        print(i)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = dict()\n    for i, j in zip(test_tup[::2], test_tup[1::2]):\n        dictionary[i] = j\n    return dictionary\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2],test_tup[1::2]))\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    return s[0] == s[-1]\n    \ndef all_Strings_Same(L) :\n    '''\n    Write a python function to check whether all the strings are same or not.\n    '''\n    \n    return len(set(L)) == 1\n    \ndef remove_Last_Element(L) :\n    '''\n    Write a python function to remove last element from a list.\n    '''\n    \n    L.pop()\n    \ndef remove_Last_Element_By_Function(L) :\n    '''\n    Write a python function to remove last element from a list using function.\n    '''\n    \n    del L[-1]\n    \ndef remove_Last_Element_By_Conversion(L) :\n    '''\n    Write a python function to remove last element from a list using conversion.\n    '''\n    \n    L = L[:-1]\n    \ndef remove_Last_Element_By_Indexing(L) :\n    '''\n    Write a python function to remove last element from a list using indexing.\n    '''\n    \n    del L[len(L) - 1]\n    \ndef remove_Last_Element_By_While(L) :\n    '''\n    Write a python function to remove last element from a list using while loop.\n    '''\n    \n    index = len(L) - 1\n    while index >= 0 :\n        L.pop()\n        index -= 1\n        \ndef remove_Last_Element_By_For_Loop(L) :\n    '''\n    Write a python function to remove last element from a list using for loop.\n    '''\n    \n    for _ in range(len(L) - 1) :\n        L.pop()\n        \ndef remove_Last_Element_By_For_Loop_And_Range(L) :\n    '''\n    Write a python function to remove last element from a list using for loop and range.\n    '''\n    \n    for _ in range(len(L) - 1) :\n        del L[-1]\n        \ndef remove_Last_Element_By_For_Loop_And_Range_Reversed(L) :\n    '''\n    Write a python function to remove last element from a list using for loop and range and reversed.\n    '''\n    \n    for _ in range(len(L) - 1) :\n        del L[0]\n        \ndef remove_Last_Element_By_While_Loop(L) :\n    '''\n    Write a python function to remove last element from a list using while loop.\n    '''\n    \n    index = len(L) - 1\n    while index >= 0 :\n        L.pop()\n        index -= 1\n        \ndef remove_Last_Element_By_While_Loop_And_Range(L) :\n    '''\n    Write a python function to remove last element from a list using while loop and range.\n    '''\n    \n    index = len(L) - 1\n    while index >= 0 :\n        del L[index]\n        index -= 1\n        \ndef remove_Last_Element_By_While_Loop_And_Range_Reversed(L) :\n    '''\n    Write a python function to remove last element from a list using while loop and range and reversed.\n    '''\n    \n    index = len(L) - 1\n    while index >= 0 :\n        del L[0]\n        index -= 1\n        \ndef remove_Last_Element_By_Function_And_Range(L) :\n    '''\n    Write a python function to remove last element from a list using function and range.\n    '''\n    \n    del L[-1:len(L)]\n    \ndef remove_Last_Element_By_Function_And_Range_Reversed(L) :\n    '''\n    Write a python function to remove last element from a list using function and range and reversed.\n    '''\n    \n    del L[0:len(L)]\n    \ndef remove_All_Characters_By_Function(s) :\n    '''\n    Write a python function to remove all the characters from a string using function.\n    '''\n    \n    s = ''\n    \ndef remove_All_Characters_By_Function_And_Range(L) :\n    '''\n    Write a python function to remove all the characters from a list using function and range.\n    '''\n    \n    del L[0:len(L)]\n    \ndef remove_All_Characters_By_Function_And_Range_Reversed(L) :\n    '''\n    Write a python function to remove all the characters from a list using function and range and reversed.\n    '''\n    \n    del L[len(L) - 1:0:-1]\n    \ndef replace_Last_Element_By_Function(s) :\n    '''\n    Write a python function to replace last character from a string using function.\n    '''\n    \n    s = ''\n    \ndef replace_Last_Element_By_Function_And_Range(L) :\n    '''\n    Write a python function to replace last character from a list using function and range.\n    '''\n    \n    L[len(L) - 1] = ''\n    \ndef replace_Last_Element_By_Function_And_Range_Reversed(L) :\n    '''\n    Write a python function to replace last character from a list using function and range and reversed.\n    '''\n    \n    L[0] = ''\n    \ndef replace_Last_Element_By_Function_And_While(s) :\n    '''\n    Write a python function to replace last character from a string using function and while.\n    '''\n    \n    index = len(s) - 1\n    while index >= 0 :\n        s = ''\n        index -= 1\n        \ndef replace_Last_Element_By_Function_And_While_And_Range(L) :\n    '''\n    Write a python function to replace last character from a list using function, while and range.\n    '''\n    \n    L[len(L) - 1] = ''\n    \ndef replace_Last_Element_By_Function_And_While_And_Range_Reversed(L) :\n    '''\n    Write a python function to replace last character from a list using function, while and range and reversed.\n    '''\n    \n    L[0] = ''\n    \ndef replace_Last_Element_By_Function_And_For_Loop(s) :\n    '''\n    Write a python function to replace last character from a string using function and for loop.\n    '''\n    \n    index = len(s) - 1\n    for _ in range(index) :\n        s = ''\n        \ndef replace_Last_Element_By_Function_And_For_Loop_And_Range(L) :\n    '''\n    Write a python function to replace last character from a list using function, for loop and range.\n    '''\n    \n    L[len(L) - 1] = ''\n    \ndef replace_Last_Element_By_Function_And_For_Loop_And_Range_Reversed(L) :\n    '''\n    Write a python function to replace last character from a list using function, for loop and range and reversed.\n    '''\n    \n    L[0] = ''\n    \ndef replace_First_Character(s) :\n    '''\n    Write a python function to replace first character from a string.\n    '''\n    \n    s = ''\n    \ndef replace_First_Character_By_Function(s) :\n    '''\n    Write a python function to replace first character from a string using function.\n    '''\n    \n    s = ''\n    \ndef replace_First_Character_By_Function_And_Range(L) :\n    '''\n    Write a python function to replace first character from a list using function and range.\n    '''\n    \n    L[0] = ''\n    \ndef replace_First_Character_By_Function_And_Range_Reversed(L) :\n    '''\n    Write a python function to replace first character from a list using function and range and reversed.\n    '''\n    \n    L[len(L) - 1] = ''\n    \ndef replace_Last_Character(s) :\n    '''\n    Write a python function to replace last character from a string.\n    '''\n    \n    s = ''\n    \ndef replace_Last_Character_By_Function(s) :\n    '''\n    Write a python function to replace last character from a strin"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s=sorted(s)\n    if(len(s)==1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0,len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # code here\n    s=list(s)\n    if(len(set(s))==1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1 :\n        return True\n    elif len(s) == 2 :\n        if s[0] == s[1] :\n            return True\n        else :\n            return False\n    else :\n        return all_Characters_Same(s[1:len(s)])\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return not s or s.count(s[0]) == len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) > 0:\n        return all(char == s[0] for char in s)\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    ch = s[0]\n    for i in range(1,len(s)) :\n        if ch!= s[i] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for c in s :\n        if c!= s[0] :\n            return False\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(2)*side**2)/4\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2/4 * math.sqrt(6)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*side**2/3\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(2/5)*side**2)\ndef area_parallelogram(base, height):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return base*height\ndef area_trapezoid(side1, side2):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    return (side1+side2)*1/2\ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return side*side\ndef area_rectangle(length, width):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return length*width\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi*radius**2\ndef area_ellipse(major_radius, minor_radius):\n    '''\n    Write a function to calculate the area of an ellipse.\n    '''\n    return math.pi*major_radius*minor_radius\ndef area_rhombus(diag_a, diag_b):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return 1/2*diag_a*diag_b\ndef area_kite(diag_a, diag_b):\n    '''\n    Write a function to calculate the area of a kite.\n    '''\n    return 1/2*diag_a*diag_b\ndef area_hexagon(side):\n    '''\n    Write a function to calculate the area of a hexagon.\n    '''\n    return (3*math.sqrt(3)/2)*side**2\ndef area_octagon(side):\n    '''\n    Write a function to calculate the area of an octagon.\n    '''\n    return (2*side**2)\ndef area_hypercube(side):\n    '''\n    Write a function to calculate the area of a hypercube.\n    '''\n    return side**3\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (4*math.pi*radius**2)\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return 6*side**2\ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    return (1/4)*math.sqrt(2/5)*side**3\ndef volume_parallelogram(base, height):\n    '''\n    Write a function to calculate the volume of a parallelogram.\n    '''\n    return base*height\ndef volume_trapezoid(side1, side2):\n    '''\n    Write a function to calculate the volume of a trapezoid.\n    '''\n    return (side1+side2)*1/2\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    return side**3\ndef volume_rectangle(length, width):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    return length*width\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return (4/3)*math.pi*radius**3\ndef volume_ellipse(major_radius, minor_radius):\n    '''\n    Write a function to calculate the volume of an ellipse.\n    '''\n    return (math.pi*major_radius*minor_radius**2)/3\ndef volume_rhombus(diag_a, diag_b):\n    '''\n    Write a function to calculate the volume of a rhombus.\n    '''\n    return 1/3*diag_a*diag_b\ndef volume_kite(diag_a, diag_b):\n    '''\n    Write a function to calculate the volume of a kite.\n    '''\n    return (1/6)*diag_a*diag_b\ndef volume_hexagon(side):\n    '''\n    Write a function to calculate the volume of a hexagon.\n    '''\n    return (1/4)*math.sqrt(3)*side**3\ndef volume_octagon(side):\n    '''\n    Write a function to calculate the volume of an octagon.\n    '''\n    return (1/3)*2*side**3\ndef volume_hypercube(side):\n    '''\n    Write a function to calculate the volume of a hypercube.\n    '''\n    return side**3\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*radius**3\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return side**3\ndef cm_to_inch(cm):\n    '''\n    Write a function to convert centimetres to inches.\n    '''\n    return cm/2.54\ndef cm_to_inch_list(cm_list):\n    '''\n    Write a function to convert a list of centimetres to inches.\n    '''\n    inch_list = []\n    for i in range(0, len(cm_list)):\n        inch_list.append(cm_to_inch(cm_list[i]))\n    return inch_list\ndef cm_to_inch_string(cm_string):\n    '''\n    Write a function to convert a string of centimetres to inches.\n    '''\n    list_1 = cm_string.split(\" \")\n    cm_list = []\n    for i in range(0, len(list_1)):\n        cm_list.append(int(list_1[i]))\n    inch_string = \"\"\n    for i in range(0, len(cm_list)):\n        inch_string += str(cm_to_inch(cm_list[i]))\n        inch_string += \" \"\n    return inch_string\ndef inch_to_cm(inch):\n    '''\n    Write a function to convert inches to centimetres.\n    '''\n    return inch*2.54\ndef inch_to_cm_list(inch_list):\n    '''\n    Write a function to convert a list of inches to centimetres.\n    '''\n    cm_list = []\n    for i in range(0, len(inch_list)):\n        cm_list.append(inch_to_cm(inch_list[i]))\n    return cm_list\ndef inch_to_cm_string(inch_string):\n    '''\n    Write a function to convert a string of inches to centimetres.\n    '''\n    list_1 = inch_string.split(\" \")\n    inch_list = []\n    for i in range(0, len(list_1)):\n        inch_list.append(int(list_1[i]))\n    cm_string = \"\"\n    for i in range(0, len(inch_list)):\n        cm_string += str(inch_to_cm(inch_list[i]))\n        cm_string += \" \"\n    return cm_string\ndef fahrenheit_to_celsius(fahrenheit):\n    '''\n    Write a function to convert Fahrenheit to Celsius.\n    '''\n    return (fahrenheit - 32)*5/9\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Write a function to convert Celsius to Fahrenheit.\n    '''\n    return (celsius*9/5) + 32\ndef kelvin_to_fahrenheit(kelvin):\n    '''\n    Write a function to convert Kelvin to Fahrenheit.\n    '''\n    return celsius_to_fahrenheit(kelvin_to_celsius(kelvin))\ndef fahrenheit_to_kelvin(fahrenheit):\n    '''\n    Write a function to convert Fahrenheit to Kelvin.\n    '''\n    return celsius_to_kelvin(fahrenheit_to_celsius"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return pow(side,2) * math.sqrt(3) / 4\ndef volume_cone(height,radius):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return math.pi * pow(radius,2) * (height/3)\ndef volume_cylinder(height,radius):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi * pow(radius,2) * height\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return pow(side,3)\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return 4/3 * math.pi * pow(radius,3)\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return 6 * pow(side,2)\ndef area_parallelogram(base,height):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return base * height\ndef area_triangle(base,height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base * height / 2\ndef area_trapezoid(side1,side2):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    return (side1 + side2) / 2\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * pow(radius,2)\ndef area_rhombus(diagonal1,diagonal2):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return (diagonal1 * diagonal2) / 2\ndef area_kite(diagonal1,diagonal2):\n    '''\n    Write a function to calculate the area of a kite.\n    '''\n    return diagonal1 * diagonal2\ndef area_parallelipiped(base,height,side):\n    '''\n    Write a function to calculate the area of a paralleipiped.\n    '''\n    return base * height * side\ndef area_pyramid(base,height):\n    '''\n    Write a function to calculate the area of a pyramid.\n    '''\n    return (base * height) / 3\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to calculate the area of a ellipsoid.\n    '''\n    return 4 * math.pi * pow(a,2) * b * c\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return 4 * math.pi * pow(radius,2)\ndef volume_cone(height,radius):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return math.pi * pow(radius,2) * (height/3)\ndef volume_cylinder(height,radius):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi * pow(radius,2) * height\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return pow(side,3)\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4/3) * math.pi * pow(radius,3)\ndef volume_parallelogram(base,height):\n    '''\n    Write a function to calculate the volume of a parallelogram.\n    '''\n    return base * height\ndef volume_triangle(base,height):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    return base * height / 2\ndef volume_trapezoid(side1,side2):\n    '''\n    Write a function to calculate the volume of a trapezoid.\n    '''\n    return (side1 + side2) / 2\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return math.pi * pow(radius,2)\ndef volume_rhombus(diagonal1,diagonal2):\n    '''\n    Write a function to calculate the volume of a rhombus.\n    '''\n    return (diagonal1 * diagonal2) / 2\ndef volume_kite(diagonal1,diagonal2):\n    '''\n    Write a function to calculate the volume of a kite.\n    '''\n    return diagonal1 * diagonal2\ndef volume_parallelipiped(base,height,side):\n    '''\n    Write a function to calculate the volume of a paralleipiped.\n    '''\n    return base * height * side\ndef volume_pyramid(base,height):\n    '''\n    Write a function to calculate the volume of a pyramid.\n    '''\n    return (base * height) / 3\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to calculate the volume of a ellipsoid.\n    '''\n    return (4/3) * math.pi * pow(a,3) * b * c\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4/3) * math.pi * pow(radius,3)\ndef volume_cone(height,radius):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return math.pi * pow(radius,2) * (height/3)\ndef volume_cylinder(height,radius):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi * pow(radius,2) * height\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return pow(side,3)\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4/3) * math.pi * pow(radius,3)\ndef volume_parallelogram(base,height):\n    '''\n    Write a function to calculate the volume of a parallelogram.\n    '''\n    return base * height\ndef volume_triangle(base,height):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    return base * height / 2\ndef volume_trapezoid(side1,side2):\n    '''\n    Write a function to calculate the volume of a trapezoid.\n    '''\n    return (side1 + side2) / 2\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return math.pi * pow(radius,2)\ndef volume_rhombus(diagonal1,diagonal2):\n    '''\n    Write a function to calculate the volume of a rhombus.\n    '''\n    return (diagonal1 * diagonal2) / 2\ndef volume_kite(diagonal1,diagonal2):\n    '''\n    Write a function to calculate the volume of a kite.\n    '''\n    return diagonal1 * diagonal2\ndef volume_parallelipiped(base,height,side):\n    '''\n    Write a function to calculate the volume of a paralleipiped.\n    '''\n    return base * height * side\ndef volume_pyramid(base,height):\n    '''\n    Write a function to calculate the volume of a pyramid.\n    '''\n    return (base * height) / 3\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to calculate the volume of a ellipsoid.\n    '''\n    return (4/3) * math.pi * pow(a,3) * b * c\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4/3) * math.pi * pow(radius,3)\ndef volum"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2 * math.sqrt(3)) / 4\n    \ndef is_triangle(a, b, c):\n    '''\n    Write a function to check if the input three numbers can form a triangle.\n    '''\n    return a + b > c and a + c > b and b + c > a\n    \ndef is_triangle_area(a, b, c):\n    '''\n    Write a function to check if the input three numbers can form a triangle.\n    '''\n    return a + b > c and a + c > b and b + c > a\n    \ndef is_square(a, b, c, d):\n    '''\n    Write a function to check if the input four numbers can form a square.\n    '''\n    return is_triangle_area(a, b, c) and is_triangle_area(a, c, d) and is_triangle_area(b, c, d)\n    \ndef perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    return a + b + c\n    \ndef is_right(a, b, c):\n    '''\n    Write a function to check if the input three numbers can form a right triangle.\n    '''\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n    \ndef is_right_angle(a, b, c):\n    '''\n    Write a function to check if the input three numbers can form a right triangle.\n    '''\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n    \ndef sum_of_list(a, b):\n    '''\n    Write a function to sum up all the items in a given list.\n    '''\n    return sum(a)\n    \ndef sum_of_list_without_for_loop(a):\n    '''\n    Write a function to sum up all the items in a given list.\n    '''\n    s = 0\n    for n in a:\n        s += n\n    return s\n    \ndef sum_of_list_without_while_loop(a):\n    '''\n    Write a function to sum up all the items in a given list.\n    '''\n    s = 0\n    i = 0\n    while i < len(a):\n        s += a[i]\n        i += 1\n    return s\n    \ndef sum_of_list_without_for_loop_and_range(a):\n    '''\n    Write a function to sum up all the items in a given list.\n    '''\n    s = 0\n    for i in range(0, len(a)):\n        s += a[i]\n    return s\n    \ndef sum_of_list_without_while_loop_and_range(a):\n    '''\n    Write a function to sum up all the items in a given list.\n    '''\n    s = 0\n    i = 0\n    while i < len(a):\n        s += a[i]\n        i += 1\n    return s\n    \ndef remove_duplicates(a):\n    '''\n    Write a function to remove duplicates in a given list.\n    '''\n    return set(a)\n    \ndef remove_duplicates_without_for_loop(a):\n    '''\n    Write a function to remove duplicates in a given list.\n    '''\n    return list(set(a))\n    \ndef remove_duplicates_without_while_loop(a):\n    '''\n    Write a function to remove duplicates in a given list.\n    '''\n    duplicate_list = []\n    for i in a:\n        if i not in duplicate_list:\n            duplicate_list.append(i)\n    return duplicate_list\n    \ndef remove_duplicates_without_for_loop_and_list_comprehension(a):\n    '''\n    Write a function to remove duplicates in a given list.\n    '''\n    return list(set(a))\n    \ndef remove_duplicates_without_while_loop_and_list_comprehension(a):\n    '''\n    Write a function to remove duplicates in a given list.\n    '''\n    duplicate_list = []\n    for i in a:\n        if i not in duplicate_list:\n            duplicate_list.append(i)\n    return duplicate_list\n    \ndef multiply_by_two(n):\n    '''\n    Write a function to multiply a given number by two.\n    '''\n    return n * 2\n    \ndef multiply_by_two_without_for_loop(n):\n    '''\n    Write a function to multiply a given number by two.\n    '''\n    return n * 2\n    \ndef multiply_by_two_without_for_loop_and_return(n):\n    '''\n    Write a function to multiply a given number by two.\n    '''\n    return n * 2\n    \ndef multiply_by_two_without_while_loop_and_return(n):\n    '''\n    Write a function to multiply a given number by two.\n    '''\n    return n * 2\n    \ndef is_divisible(a, b):\n    '''\n    Write a function to check if a given number is divisible by another number.\n    '''\n    return a % b == 0\n    \ndef is_divisible_without_for_loop(a, b):\n    '''\n    Write a function to check if a given number is divisible by another number.\n    '''\n    return a % b == 0\n    \ndef is_divisible_without_while_loop(a, b):\n    '''\n    Write a function to check if a given number is divisible by another number.\n    '''\n    return a % b == 0\n    \ndef is_divisible_without_for_loop_and_return(a, b):\n    '''\n    Write a function to check if a given number is divisible by another number.\n    '''\n    return a % b == 0\n    \ndef is_divisible_without_while_loop_and_return(a, b):\n    '''\n    Write a function to check if a given number is divisible by another number.\n    '''\n    return a % b == 0\n    \ndef is_divisible_without_for_loop_and_continue(a, b):\n    '''\n    Write a function to check if a given number is divisible by another number.\n    '''\n    for i in range(2, a):\n        if a % i == 0:\n            continue\n    return a % b == 0\n    \ndef is_divisible_without_while_loop_and_continue(a, b):\n    '''\n    Write a function to check if a given number is divisible by another number.\n    '''\n    i = 0\n    while i < a:\n        if a % i == 0:\n            i += 1\n            continue\n    return a % b == 0\n    \ndef is_divisible_without_for_loop_and_break(a, b):\n    '''\n    Write a function to check if a given number is divisible by another number.\n    '''\n    for i in range(2, a):\n        if a % i == 0:\n            break\n    return a % b == 0\n    \ndef is_divisible_without_while_loop_and_break(a, b):\n    '''\n    Write a function to check if a given number is divisible by another number.\n    '''\n    i = 0\n    while i < a:\n        if a % i == 0:\n            break\n    return a % b == 0\n    \ndef remove_items_from_list_while_loop(a, b):\n    '''\n    Write a function to remove a list of items from another list.\n    '''\n    while b in a:\n        a.remove(b)\n        \ndef remove_items_from_list_while_loop_with_pop(a, b):\n    '''\n    Write a function to remove a list of items from another list.\n    '''\n    while b in a:\n        a.pop(a.index(b))\n        \ndef remove_items_from_list_while_loo"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(3**0.5/4))\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*6)\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*8)\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*12*math.sqrt(2))\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*20*(math.sqrt(5)+1))\ndef area_icosphaedron(side):\n    '''\n    Write a function to caluclate the area of a icosphaedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*20*(math.sqrt(5)+1)*math.sqrt(3))\ndef area_truncated_cone(side1,side2):\n    '''\n    Write a function to caluclate the area of a truncated cone.\n    '''\n    if not side1.is_integer() or not side2.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side1*side2*3**0.5*(2**0.5+1))\ndef area_cone(side1,side2):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    if not side1.is_integer() or not side2.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side1*side2*3**0.5*(2**0.5+1))\ndef area_pyramid(side1,side2):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    if not side1.is_integer() or not side2.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side1*side2*(2**0.5+1))\ndef area_equilateral_triangle(side):\n    '''\n    Write a function to caluclate the area of a equilateral triangle.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(1+math.sqrt(2)))\ndef area_triahedron(side):\n    '''\n    Write a function to caluclate the area of a triahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(3**0.5/2))\ndef area_decahedron(side):\n    '''\n    Write a function to caluclate the area of a decahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2))\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*math.sqrt(3))\ndef area_icosphaedron(side):\n    '''\n    Write a function to caluclate the area of a icosphaedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*math.sqrt(3))\ndef area_icosidodecahedron(side):\n    '''\n    Write a function to caluclate the area of a icosidodecahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*math.sqrt(3)*math.sqrt(2))\ndef area_icosphaedron(side):\n    '''\n    Write a function to caluclate the area of a icosphaedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*math.sqrt(3))\ndef area_icosododecahedron(side):\n    '''\n    Write a function to caluclate the area of a icosododecahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*math.sqrt(3)*math.sqrt(2))\ndef area_icosphaedron(side):\n    '''\n    Write a function to caluclate the area of a icosphaedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*math.sqrt(3))\ndef area_icosidodecahedron(side):\n    '''\n    Write a function to caluclate the area of a icosidodecahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*math.sqrt(3))\ndef area_icosiododecahedron(side):\n    '''\n    Write a function to caluclate the area of a icosiododecahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*math.sqrt(3))\ndef area_icosphaedron(side):\n    '''\n    Write a function to caluclate the area of a icosphaedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*math.sqrt(3))\ndef area_icosiododecahedron(side):\n    '''\n    Write a function to caluclate the area of a icosiododecahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*math.sqrt(3))\ndef area_icosidodecahedron(side):\n    '''\n    Write a function to caluclate the area of a icosidodecahedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*math.sqrt(3))\ndef area_icosphaedron(side):\n    '''\n    Write a function to caluclate the area of a icosphaedron.\n    '''\n    if not side.is_integer():\n        raise ValueError(\"Side must be an integer!\")\n    return int(side**2*(5**0.5+2)*mat"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # side = int(input(\"Enter the side of the tetrahedron\"))\n    #A = 3 * math.sqrt(3)/2\n    return 3 * math.sqrt(3)/2 * (side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = side ** 3 / (12 * math.sqrt(2))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)*(math.sqrt(2)/4)\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[:]\n    for i in range(0, m):\n        list[i] = temp[len(list)-m+i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list[:] = list[m:] + list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # list = [1, 2, 3, 4, 5, 6, 7]\n    # m = 3\n    # print(rotate_right(list, m))\n    # return list[m:] + list[:m]\n    n = len(list)\n    m = m % n\n    list = list[m:] + list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list[:m], list[m:] = list[len(list)-m:], list[:len(list)-m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list[:m] = list[:-m]\n    list[:-m] = list[::-1]\n    list[-m:] = list[:m][::-1]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    last_element = list.pop()\n    list.insert(0, last_element)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) < 2:\n        return\n    if m > len(list):\n        m = m % len(list)\n    if m == 0:\n        return\n    rotate_right(list, m-1)\n    last = list[-1]\n    for i in range(len(list)-1, 0, -1):\n        list[i] = list[i-1]\n    list[0] = last\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    first_n = list[-m:]\n    last_n = list[:-m]\n    list.clear()\n    list.extend(first_n)\n    list.extend(last_n)\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #list = [1, 2, 3, 4, 5]\n    #m = 2\n    return list[-m:]+list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    new_list = list[m:] + list[:m]\n    return new_list\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(not elem for elem in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_tup = (10, None, 20, 25)\n    if any(i is None for i in test_tup):\n        print('Tuple contains None values')\n    else:\n        print('No None values present')\n        return\n    \ncheck_none(test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    res = any(None in list(sub) for sub in test_tup)\n    if(res):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None or test_tup == () or test_tup == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(i is not None for i in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup.count(None):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup.count(None) > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for tup in test_tup:\n        if tup is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n    \ndef remove_none(test_tup):\n    '''\n    Write a function to remove all none values from a tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if i!= None:\n            new_tup += (i,)\n    return new_tup\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [number for number in range(startnum, endnum + 1) if all([digit in str(number) for digit in str(number)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(number):\n        number = str(number)\n        for digit in number:\n            if int(digit) == 0:\n                return False\n        return True\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        if i % 10 == 0:\n            if i % 2 == 0:\n                if i % 3 == 0:\n                    if i % 4 == 0:\n                        if i % 5 == 0:\n                            if i % 6 == 0:\n                                if i % 7 == 0:\n                                    if i % 8 == 0:\n                                        if i % 9 == 0:\n                                            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        isDivisible = True\n        strNum = str(num)\n        for digit in strNum:\n            if int(digit) == 0 or num % int(digit)!= 0:\n                isDivisible = False\n        if isDivisible == True:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum+1) if all([int(y) for y in str(x)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = [1,2,3,4,5,6,7,8,9]\n    result = []\n    for x in range(startnum, endnum):\n        y = x\n        flag = True\n        while(y):\n            rem = y%10\n            if rem not in digits:\n                flag = False\n                break\n            y = y//10\n        if flag == True:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for i in range(startnum, endnum+1):\n        if all(i%d == 0 for d in str(i)):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(\"\\n\")\n    print(\"___divisible_by_digits___\")\n    \n    \n    def divisible_by_digits_fn(startnum, endnum):\n        '''\n        Function for exercise\n        '''\n        list_of_nums = []\n        for i in range(startnum, endnum):\n            list_of_nums.append(i)\n        # for i in list_of_nums:\n        #     if i % 2!= 0:\n        #         continue\n        #     elif i % 3!= 0:\n        #         continue\n        #     elif i % 5!= 0:\n        #         continue\n        #     elif i % 7!= 0:\n        #         continue\n        #     elif i % 9!= 0:\n        #         continue\n        #     else:\n        #         print(i)\n        #         pass\n        list_of_nums = list(filter(lambda x: not(x%2!= 0 or x%3!= 0 or x%5!= 0 or x%7!= 0 or x%9!= 0), list_of_nums))\n        print(list_of_nums)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n        result = []\n        for i in range(startnum, endnum + 1):\n            if(i%2 == 0 or i%5 == 0 or i%3 == 0):\n                result.append(i)\n        return result\n    return divisible_by_digits(startnum, endnum)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if 0<=a<=360:\n        return None\n    elif a>360:\n        return None\n    else:\n        return r*r*math.acos(1-a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return r*r*math.acos(1-a*0.0174533)/math.pi\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        area = (math.pi * r**2) * (a/360)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #print(\"Sector Area Calculator\")\n    #r=int(input(\"Enter the radius of the circle: \"))\n    #a=int(input(\"Enter the angle of the sector: \"))\n    #print(\"\")\n    if a>360:\n        print(\"Angle can't be more than 360\")\n        return None\n    else:\n        return a*r**2/360\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        return None\n    else:\n        area = r*r*math.sin(a*math.pi/180)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return a*math.pi*r*r/360\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return a * r**2 * math.pi / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        sector = math.pi * (r**2) * (a/360)\n        return sector\n    else:\n        return None\ndef to_celsius(f):\n    '''\n    Write a function that takes a temperature in fahrenheit as its input, and returns the temperature in celsius.\n    '''\n    celsius = (f - 32) * 5/9\n    return celsius\ndef to_fahrenheit(c):\n    '''\n    Write a function that takes a temperature in celsius as its input, and returns the temperature in fahrenheit.\n    '''\n    fahrenheit = (c * (9/5)) + 32\n    return fahrenheit\ndef is_prime(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is prime, or False if it is not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_positive(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is positive, or False if it is not.\n    '''\n    if n > 0:\n        return True\n    return False\ndef is_positive_not_5(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is positive and not 5, or False if it is not.\n    '''\n    if n > 0 and n!= 5:\n        return True\n    return False\ndef is_positive_not_5_alt(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is positive and not 5, or False if it is not.\n    '''\n    return (n > 0) and (n!= 5)\ndef is_negative(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is negative, or False if it is not.\n    '''\n    if n < 0:\n        return True\n    return False\ndef is_negative_not_5(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is negative and not 5, or False if it is not.\n    '''\n    return (n < 0) and (n!= 5)\ndef is_negative_not_5_alt(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is negative and not 5, or False if it is not.\n    '''\n    return (n < 0) and (n!= 5)\ndef is_divisible_by_11(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is divisible by 11, or False if it is not.\n    '''\n    return (n % 11 == 0)\ndef is_divisible_by_11_alt(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is divisible by 11, or False if it is not.\n    '''\n    return (n % 11 == 0)\ndef is_between_100_and_200(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is between 100 and 200, or False if it is not.\n    '''\n    return 100 <= n <= 200\ndef is_less_than(a,b):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is less than the other number.\n    '''\n    return a < b\ndef is_less_than_or_equal(a,b):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is less than or equal to the other number.\n    '''\n    return a <= b\ndef is_greater_than(a,b):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is greater than the other number.\n    '''\n    return a > b\ndef is_greater_than_or_equal(a,b):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is greater than or equal to the other number.\n    '''\n    return a >= b\ndef is_palindrome(s):\n    '''\n    Write a function that takes a string as an input, and returns True if the string is a palindrome, or False if it is not.\n    '''\n    return s == s[::-1]\ndef is_palindrome_alt(s):\n    '''\n    Write a function that takes a string as an input, and returns True if the string is a palindrome, or False if it is not.\n    '''\n    return s == s[::-1]\ndef is_pangram(s):\n    '''\n    Write a function that takes a string as an input, and returns True if the string is a pangram, or False if it is not.\n    '''\n    return set(s.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_alt(s):\n    '''\n    Write a function that takes a string as an input, and returns True if the string is a pangram, or False if it is not.\n    '''\n    return set(s.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_alt_2(s):\n    '''\n    Write a function that takes a string as an input, and returns True if the string is a pangram, or False if it is not.\n    '''\n    return set(s.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\ndef reverse_string(s):\n    '''\n    Write a function that takes a string as an input, and returns the string in reverse.\n    '''\n    return s[::-1]\ndef reverse_string_alt(s):\n    '''\n    Write a function that takes a string as an input, and returns the string in reverse.\n    '''\n    return s[::-1]\ndef reverse_string_alt_2(s):\n    '''\n    Write a function that takes a string as an input, and returns the string in reverse.\n    '''\n    return ''.join(reversed(s))\ndef is_power_of_2(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is a power of 2, or False if it is not.\n    '''\n    return n!= 0 and ((n & (n - 1)) == 0)\ndef is_power_of_2_alt(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is a power of 2, or False if it is not.\n    '''\n    return n > 0 and (n & (n - 1)) == 0\ndef is_power_of_2_alt_2(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is a power of 2, or False if it is not.\n    '''\n    return n > 0 and (n & -n) == n\ndef is_power_of_2_alt_3(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is a power of 2, or False if it is not.\n    '''\n    return math.log10(n) / math.log10(2) % 1 == 0\ndef is_power_of_2_alt_4(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is a power of 2, or False if it is not.\n    '''\n    return n > 0 and ((n & -n) == n)\ndef is_power_of_2_alt_5(n):\n    '''\n    Write a function that takes a number as an input, and returns True if the number is a power of 2, or False if it is not.\n    '''\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    s = (r**2)*math.pi\n    if a > 360:\n        return None\n    else:\n        return s/360*a\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Your Code Here\n    if a<=360:\n        area = (3.14*r*r)*(1-(1/math.sin(math.radians(a))))\n        return area\n    else:\n        return None\n    \ndef area(r,a):\n    '''\n    Write a function to find area of a circle. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Your Code Here\n    area=3.14*(r**2)\n    return area\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[0 for i in range(l+1)] for j in range(n+1)] for k in range(m+1)] \n    # Following steps build L[m+1][n+1][l+1] in bottom up fashion. Note\n    # that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n    # and Z[0..k-1]  \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n    return L[m][n][l] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None for k in xrange(l+1)] for j in xrange(n+1)] for i in xrange(m+1)] \n    for i in xrange(m+1): \n        for j in xrange(n+1): \n            for k in xrange(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    index = L[m][n][l] \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n    i = m \n    j = n \n    k = l \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] == Z[k-1]: \n            lcs[index-1] = X[i-1] \n            i-=1\n            j-=1\n            k-=1\n            index-=1\n        elif L[i-1][j][k] == L[i][j-1][k]: \n            i-=1\n        elif L[i][j-1][k] == L[i][j][k-1]: \n            j-=1\n        else: \n            k-=1\n    return \"\".join(lcs) \nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nZ = \"AGXTXAYB\"\nprint lcs_of_three(X, Y, Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[0]*(l+1) for _ in range(n+1)] for _ in range(m+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n, m, p = len(X), len(Y), len(Z)\n    # Create a table to store results of subproblems \n    L = [[[None]*(p+1) for i in range(m+1)] for j in range(n+1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return max_dp(X, Y, Z) \n    \ndef lcs_of_two(X, Y): \n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    return max_dp(X, Y, None) \n    \ndef lcs_of_one(X): \n    '''\n    Write a function to find the longest common subsequence for the given one string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    return max_dp(X, None, None) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[0 for x in range(n+1)] for y in range(m+1)] for z in range(l+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    #print(L)\n    return L[m][n][l] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m=len(X)\n    n=len(Y)\n    l=len(Z)\n    t=[[[0 for k in range(l+1)] for j in range(n+1)] for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if (i==0 or j==0 or k==0): \n                    t[i][j][k]=0\n                elif (X[i-1]==Y[j-1] and X[i-1]==Z[k-1]): \n                    t[i][j][k]=t[i-1][j-1][k-1]+1\n                else: \n                    t[i][j][k]=max(t[i-1][j][k], t[i][j-1][k], t[i][j][k-1]) \n    return t[m][n][l] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z)\n    L = [[[None]*(l+1) for i in range(n+1)] for j in range(m+1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None]*(l + 1) for i in range(n + 1)] for j in range(m + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    \n    lcs_len = L[m][n][l] \n    lcs_i = m-1\n    lcs_j = n-1\n    lcs_k = l-1\n    lcs = []\n    while lcs_i >= 0 and lcs_j >= 0 and lcs_k >= 0: \n        if X[lcs_i-1] == Y[lcs_j-1] == Z[lcs_k-1]: \n            lcs.append(X[lcs_i-1])\n            lcs_i -= 1\n            lcs_j -= 1\n            lcs_k -= 1\n        elif L[lcs_i-1][lcs_j][lcs_k] == L[lcs_i][lcs_j-1][lcs_k]: \n            lcs_i -= 1\n        elif L[lcs_i][lcs_j-1][lcs_k] == L[lcs_i][lcs_j][lcs_k-1]: \n            lcs_j -= 1\n        else: \n            lcs_k -= 1\n    return ''.join(lcs[::-1])\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    s = ''\n    for i in str1:\n        if i[0].isupper():\n            s = s + i[0] +'' + i[1:]\n        else:\n            s = s + i\n    return s\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'[A-Z][a-z]+',r' \\1',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = \"Hello, And Welcome To Our World\"\n    print(capital_words_spaces(str1))\n    str1 = \"hello, and welcome to our world\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str1 = \"HELLO, AND WELCOME TO OUR WORLD\"\n    print(capital_words_spaces(str1))\n    str"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if not isinstance(str1, str):\n        return \"Invalid input\"\n    return re.sub('(?<=\\w) (?=\\w)','', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split(' ')\n    \n    for i in range(len(str1)):\n        if str1[i][0] == str1[i][0].upper():\n            str1[i] = str1[i].capitalize()\n    return''.join(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = \"hello, world\"\n    new_str = re.sub(\"(?<=\\w)([A-Z])\", r\" \\1\", str1)\n    print(new_str)\n    '''\n    Output:\n    hello, world\n    '''\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = list(str1)\n    for index,letter in enumerate(str1):\n        if str1[index] =='':\n            str1[index] =''\n        if str1[index][0].isupper():\n            str1.insert(index,' ')\n    return ''.join(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = input(\"enter a string: \")\n    if not isinstance(str1, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        list1 = str1.split()\n        for i in range(0, len(list1)):\n            if list1[i].istitle():\n                list1[i] = list1[i].capitalize()\n        str2 = \" \".join(list1)\n        return str2\ndef capitalize_words(str1):\n    '''\n    Write a function to capitalize the first word of a sentence given that it starts with a capital letter.\n    '''\n    # str1 = input(\"enter a string: \")\n    if not isinstance(str1, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        list1 = str1.split()\n        list1[0] = list1[0].capitalize()\n        str2 = \" \".join(list1)\n        return str2\ndef letter_position(str1, character):\n    '''\n    Write a function to return the position of a character in a given string.\n    '''\n    # str1 = input(\"enter a string: \")\n    # character = input(\"enter the character: \")\n    if not isinstance(str1, str) or not isinstance(character, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        list1 = list(str1)\n        list2 = list(character)\n        if list2[0] in list1:\n            index = list1.index(list2[0])\n            print(index)\n        else:\n            raise ValueError(\"Character is not present in the given string\")\ndef find_last_word(str1):\n    '''\n    Write a function to find the last word of a given string.\n    '''\n    # str1 = input(\"enter a string: \")\n    if not isinstance(str1, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        list1 = str1.split()\n        print(list1[-1])\ndef replace_character(str1, char1, char2):\n    '''\n    Write a function to replace a character with another character in a given string.\n    '''\n    # str1 = input(\"enter a string: \")\n    # char1 = input(\"enter the character to be replaced: \")\n    # char2 = input(\"enter the character to replace with: \")\n    if not isinstance(str1, str) or not isinstance(char1, str) or not isinstance(char2, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        list1 = list(str1)\n        for i in range(0, len(list1)):\n            if list1[i] == char1:\n                list1[i] = char2\n        str2 = \"\".join(list1)\n        return str2\ndef replace_first_word(str1, str2):\n    '''\n    Write a function to replace the first word of a string with another string.\n    '''\n    # str1 = input(\"enter a string: \")\n    # str2 = input(\"enter the string to replace with: \")\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        list1 = str1.split()\n        list2 = str2.split()\n        list1[0] = list2[0]\n        str2 = \" \".join(list1)\n        return str2\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    # str1 = input(\"enter a string: \")\n    if not isinstance(str1, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        list1 = list(str1)\n        for i in range(0, len(list1)):\n            if list1[i] == \"#\" or list1[i] == \"$\" or list1[i] == \"*\" or list1[i] == \"^\" or list1[i] == \"&\" or list1[i] == \"-\" or list1[i] == \"_\" or list1[i] == \"!\" or list1[i] == \"~\" or list1[i] == \"`\" or list1[i] == \"~\" or list1[i] == \";\" or list1[i] == \",\" or list1[i] == \":\" or list1[i] == \".\" or list1[i] == \"?\" or list1[i] == \".\" or list1[i] == \"/\" or list1[i] == \"\\\\\" or list1[i] == \"|\" or list1[i] == \"\\\"\" or list1[i] == \"\\'\" or list1[i] == \" \":\n                list1[i] = \"\"\n        str2 = \"\".join(list1)\n        return str2\ndef remove_spaces(str1):\n    '''\n    Write a function to remove all spaces from a given string.\n    '''\n    # str1 = input(\"enter a string: \")\n    if not isinstance(str1, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        list1 = list(str1)\n        for i in range(0, len(list1)):\n            if list1[i] == \" \":\n                list1[i] = \"\"\n        str2 = \"\".join(list1)\n        return str2\ndef remove_duplicate_words(str1):\n    '''\n    Write a function to remove all duplicate words from a given string.\n    '''\n    # str1 = input(\"enter a string: \")\n    if not isinstance(str1, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        list1 = str1.split()\n        list2 = []\n        for i in range(0, len(list1)):\n            if list1[i] in list2:\n                pass\n            else:\n                list2.append(list1[i])\n        str2 = \" \".join(list2)\n        return str2\ndef reverse_words_order(str1):\n    '''\n    Write a function to reverse the order of words in a given string.\n    '''\n    # str1 = input(\"enter a string: \")\n    if not isinstance(str1, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        list1 = str1.split()\n        list2 = []\n        for i in range(0, len(list1)):\n            list2.append(list1[i])\n        list2.reverse()\n        str2 = \" \".join(list2)\n        return str2\ndef add_string(str1, str2):\n    '''\n    Write a function to concatenate two strings.\n    '''\n    # str1 = input(\"enter a string: \")\n    # str2 = input(\"enter a second string: \")\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        str3 = str1 + str2\n        return str3\ndef remove_characters(str1, str2):\n    '''\n    Write a function to remove all characters from a given string.\n    '''\n    # str1 = input(\"enter a string: \")\n    # str2 = input(\"enter a character to remove: \")\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Only string types are allowed\")\n    else:\n        list1 = list(str1)\n        list2 = list(str2)\n        for i in range(0, len(list2)):\n            if list2[i] in list1:\n                list1.remove(list2[i])\n        str2 = \"\".join(list1)\n        return str2\ndef convert_lowercase(str1):\n    '''\n    Write a function to convert a given string to all lowercase characters.\n    '''\n    # str1 = input(\"enter a string: \")\n    if not isinstance(str1, str):\n        raise TypeError(\"Only string types ar"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r\"(?<=[A-Z])\",'', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=re.sub(r'(?<=\\s)[A-Z][a-z]+',r' \\1',str1)\n    return str1\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    return sorted(nums)\n    # nums.sort()\n    # return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x.split(' ')[0]))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Given list is [0,0,1,2,0]\n    # Function return the sorted list --> ['0','0','0','1','2']\n    nums_str.sort(key = lambda x: (x[0], int(x[1:]) if len(x)>1 else 0))\n    print(nums_str)\n    \n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        for j in range(i+1, len(nums_str)):\n            nums_str[i], nums_str[j] = nums_str[j], nums_str[i]\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        if num_str.isdigit():\n            nums.append(int(num_str))\n    nums.sort(reverse=True)\n    return [str(num) for num in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = list(map(int, nums_str))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        nums.append(int(i))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def is_number(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            pass\n        try:\n            import unicodedata\n            unicodedata.numeric(s)\n            return True\n        except (TypeError, ValueError):\n            pass\n        return False\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    try:\n        nums_int = [int(i) for i in nums_str]\n        nums_int.sort()\n        nums_str_sorted = [str(i) for i in nums_int]\n        print(nums_str_sorted)\n        return nums_str_sorted\n    except Exception as e:\n        print('Error in code:', e)\n        return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x.split(\" \")[0]))\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    return(test_list + test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    print(test_list)\n    print(test_tup)\n    test_list.append(test_tup)\n    print(test_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #test_list.append(test_tup)\n    test_list[len(test_list):] = test_tup\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return(test_list)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if (i >= int(n / 2)):\n        return\n    if ((2 * i) + 1 < n and arr[i] > arr[(2 * i) + 1]):\n        return False\n    if ((2 * i) + 2 < n and arr[i] > arr[(2 * i) + 2]):\n        return False\n    left_child = (2 * i) + 1\n    right_child = (2 * i) + 2\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) - 1:\n        return False\n    if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) < 2:\n        return True\n    if (i-1)//2 >= 0:\n        return arr[i] <= arr[(i-1)//2]\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0 and i <= len(arr)-1:\n        if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < len(arr) and arr[l] < arr[i]:\n        return False\n    if r < len(arr) and arr[r] < arr[i]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if i * 2 <= len(arr) - 1 and arr[i] > arr[i * 2]:\n        return False\n    if i * 2 + 1 <= len(arr) - 1 and arr[i] > arr[i * 2 + 1]:\n        return False\n    return check_min_heap_helper(arr, i * 2) and check_min_heap_helper(arr, i * 2 + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr)==0 or i<0:\n        return False\n    if arr[i]>arr[(i-1)//2]:\n        return False\n    check_min_heap_helper(arr,(i-1)//2)\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or arr[i] >= arr[(i-1)//2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if the last element is greater than its children return false\n    if i >= len(arr) or (i < len(arr) and arr[i] >= arr[2*i+1] and arr[i] >= arr[2*i+2]):\n        return True\n    else:\n        return False\n    \ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr)//2:\n        return True\n    if arr[i] > arr[2*i+1] or arr[i] > arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0:\n        return 0\n    else:\n        return 1 if n%2==0 else 2\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def gcd(a, b): \n        if a == 0: \n            return b \n        return gcd(b % a, a)\n    \n    # This function finds the \n    # gcd of two numbers \n    def compute_gcd(x, y): \n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # case 1: n is a multiple of 4\n    if n%4 == 0:\n        return 2**(n//4)-1\n    # case 2: n is a multiple of 6\n    if n%6 == 0:\n        return 3**(n//6)-1\n    # case 3: n is a multiple of both 4 and 6\n    if n%6 == 0 and n%4 == 0:\n        return 5**(n//12)-1\n    # case 4: n is a multiple of neither 4 nor 6\n    return 3**(n//6)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = 0\n    \n    for i in range(1, n):\n        \n        if (i % 2 == 0):\n            j += 1\n            \n        else:\n            j += 2\n            \n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Initialize initial values for a, b, and c \n    a = 0\n    b = 1\n    c = 1\n    res = 1 # Initialize result \n    i = 1 # Initialize iterator \n    # Print initial values \n    print(\"The initial values of a, b, c are\", \n                    a, b, c) \n    while i < n: \n        # Print a, b, and c values \n        print(\"The current values are a =\", a, \n            \", b =\", b, \", c =\", c) \n        # Update res \n        res = a + b + c \n        # Update a, b, and c \n        a = b \n        b = c \n        c = res \n        i += 1\n    # Print the required Jacobsthal number \n    print(res) \n    \ndef exponent(x): \n    '''\n    Write a function to compute the nth power of x.\n    '''\n    # Initialize res \n    res = 1\n    i = 0\n    # Update res \n    while i < n: \n        res = res * x \n        i += 1\n    # Print the required exponent \n    print(res) \n    \ndef square_root(x): \n    '''\n    Write a function to compute the square root of x.\n    '''\n    # Initialize initial values for a and b \n    a = 1\n    b = x \n    # Update a and b \n    while b > a: \n        # Compute a and b \n        a = (a + b) / 2\n        b = x / a \n    # Print the required square root \n    print(a)\n    \ndef binary_sum(n): \n    '''\n    Write a function to compute the binary sum of an integer n. \n    '''\n    # Initialize initial values for a and b \n    a = 0\n    b = 1\n    # Update a and b \n    while b < n: \n        # Compute a and b \n        a = a + b \n        b = b * 2\n    # Print the required binary sum \n    print(a) \n    \ndef digital_root(n): \n    '''\n    Write a function to compute the digital root of a number.\n    '''\n    # Initialize res \n    res = 0\n    # Update res \n    while n > 9: \n        res = n % 10 + res * 10\n        n = n // 10\n    # Print the required digital root \n    print(res) \n    \ndef fibonacci(n): \n    '''\n    Write a function to compute the nth fibonacci number.\n    '''\n    # Initialize initial values for a and b \n    a = 1\n    b = 1\n    c = 0\n    # Update a and b \n    while n > 2: \n        # Update c \n        c = a + b \n        # Update a and b \n        a = b \n        b = c \n        n -= 1\n    # Print the required fibonacci number \n    print(c) \n    \ndef fibonacci_sequence(n): \n    '''\n    Write a function to compute the nth fibonacci number.\n    '''\n    # Initialize initial values for a and b \n    a = 0\n    b = 1\n    i = 0 # Initialize iterator \n    # Update a and b \n    while i < n: \n        # Print a, b, and c values \n        print(a, b, sep = \" \") \n        # Update a and b \n        a = b \n        b = c \n        c = a + b \n        i += 1\n    # Print the required fibonacci number \n    print(c) \n    \ndef fibonacci_series(n): \n    '''\n    Write a function to compute the fibonacci series upto n.\n    '''\n    # Initialize initial values for a and b \n    a = 0\n    b = 1\n    i = 0 # Initialize iterator \n    # Update a and b \n    while i < n: \n        # Print a, b, and c values \n        print(a, b, sep = \" \") \n        # Update a and b \n        a = b \n        b = c \n        c = a + b \n        i += 1\n    # Print the required fibonacci number \n    print(c) \n    \ndef ds_sequence(n): \n    '''\n    Write a function to compute the nth digital sum of a number. \n    '''\n    # Initialize initial values for a and b \n    a = 1\n    b = 1\n    c = 0\n    # Update a and b \n    while n > 2: \n        # Update c \n        c = a + b \n        # Update a and b \n        a = b \n        b = c \n        n -= 1\n    # Update a and b \n    a = b \n    b = c \n    # Update c \n    c = a + b \n    # Print the required digital sum \n    print(c) \n    \ndef digital_sum_sequence(n): \n    '''\n    Write a function to compute the nth digital sum of a number. \n    '''\n    # Initialize initial values for a and b \n    a = 1\n    b = 1\n    i = 0 # Initialize iterator \n    # Update a and b \n    while i < n: \n        # Print a, b, and c values \n        print(a, b, sep = \" \") \n        # Update a and b \n        a = b \n        b = c \n        c = a + b \n        i += 1\n    # Print the required digital sum \n    print(c) \n    \ndef digital_sum_series(n): \n    '''\n    Write a function to compute the digital sum of a number. \n    '''\n    # Initialize initial values for a and b \n    a = 1\n    b = 1\n    i = 0 # Initialize iterator \n    # Update a and b \n    while i < n: \n        # Print a, b, and c values \n        print(a, b, sep = \" \") \n        # Update a and b \n        a = b \n        b = c \n        c = a + b \n        i += 1\n    # Print the required digital sum \n    print(c) \n    \ndef digital_sum_matrix(matrix): \n    '''\n    Write a function to compute the digital sum of a matrix. \n    '''\n    # Initialize initial values for a and b \n    a = 1\n    b = 1\n    i = 0 # Initialize iterator \n    # Update a and b \n    while i < n: \n        # Print a, b, and c values \n        print(a, b, sep = \" \") \n        # Update a and b \n        a = b \n        b = c \n        c = a + b \n        i += 1\n    # Print the required digital sum \n    print(c) \n    \ndef digital_sum_matrix(matrix): \n    '''\n    Write a function to compute the digital sum of a matrix. \n    '''\n    # Initialize initial values for a and b \n    a = 1\n    b = 1\n    i = 0 # Initialize iterator \n    # Update a and b \n    while i < n: \n        # Print a, b, and c values \n        print(a, b, sep = \" \") \n        # Update a and b \n        a = b \n        b = c \n        c = a + b \n        i += 1\n    # Print the required digital sum \n    print(c) \n    \ndef digital_sum_matrix(matrix): \n    '''\n    Write a function to compute the digital sum of a matrix. \n    '''\n    # Initialize initial values for a and b \n    a = 1\n    b = 1\n    i = 0 # Initialize iterator \n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    '''\n    #this is wrong\n    j_num = []\n    \n    for i in range(0, n):\n        j_num.append(2**i)\n    \n    return j_num[n-1]\n    '''\n    \n    #https://www.geeksforgeeks.org/python-program-for-program-for-nth-jacobsthal-number/\n    #Another way to do this with a list comprehension.\n    jacobsthal_list = [2**i for i in range(0, n)]\n    #print(jacobsthal_list)\n    #print(jacobsthal_list[n-1])\n    return jacobsthal_list[n-1]\n    \nprint(jacobsthal_num(5))\nprint(jacobsthal_num(11))\nprint(jacobsthal_num(19))\nprint(jacobsthal_num(21))\nprint(jacobsthal_num(40))\nprint(jacobsthal_num(41))\nprint(jacobsthal_num(43))\nprint(jacobsthal_num(44))\nprint(jacobsthal_num(45))\nprint(jacobsthal_num(46))\nprint(jacobsthal_num(48))\nprint(jacobsthal_num(49))\nprint(jacobsthal_num(50))\nprint(jacobsthal_num(51))\nprint(jacobsthal_num(52))\nprint(jacobsthal_num(53))\nprint(jacobsthal_num(54))\nprint(jacobsthal_num(55))\nprint(jacobsthal_num(56))\nprint(jacobsthal_num(57))\nprint(jacobsthal_num(58))\nprint(jacobsthal_num(59))\nprint(jacobsthal_num(60))\nprint(jacobsthal_num(61))\nprint(jacobsthal_num(62))\nprint(jacobsthal_num(63))\nprint(jacobsthal_num(64))\nprint(jacobsthal_num(65))\nprint(jacobsthal_num(66))\nprint(jacobsthal_num(67))\nprint(jacobsthal_num(68))\nprint(jacobsthal_num(69))\nprint(jacobsthal_num(70))\nprint(jacobsthal_num(71))\nprint(jacobsthal_num(72))\nprint(jacobsthal_num(73))\nprint(jacobsthal_num(74))\nprint(jacobsthal_num(75))\nprint(jacobsthal_num(76))\nprint(jacobsthal_num(77))\nprint(jacobsthal_num(78))\nprint(jacobsthal_num(79))\nprint(jacobsthal_num(80))\nprint(jacobsthal_num(81))\nprint(jacobsthal_num(82))\nprint(jacobsthal_num(83))\nprint(jacobsthal_num(84))\nprint(jacobsthal_num(85))\nprint(jacobsthal_num(86))\nprint(jacobsthal_num(87))\nprint(jacobsthal_num(88))\nprint(jacobsthal_num(89))\nprint(jacobsthal_num(90))\nprint(jacobsthal_num(91))\nprint(jacobsthal_num(92))\nprint(jacobsthal_num(93))\nprint(jacobsthal_num(94))\nprint(jacobsthal_num(95))\nprint(jacobsthal_num(96))\nprint(jacobsthal_num(97))\nprint(jacobsthal_num(98))\nprint(jacobsthal_num(99))\nprint(jacobsthal_num(100))\nprint(jacobsthal_num(101))\nprint(jacobsthal_num(102))\nprint(jacobsthal_num(103))\nprint(jacobsthal_num(104))\nprint(jacobsthal_num(105))\nprint(jacobsthal_num(106))\nprint(jacobsthal_num(107))\nprint(jacobsthal_num(108))\nprint(jacobsthal_num(109))\nprint(jacobsthal_num(110))\nprint(jacobsthal_num(111))\nprint(jacobsthal_num(112))\nprint(jacobsthal_num(113))\nprint(jacobsthal_num(114))\nprint(jacobsthal_num(115))\nprint(jacobsthal_num(116))\nprint(jacobsthal_num(117))\nprint(jacobsthal_num(118))\nprint(jacobsthal_num(119))\nprint(jacobsthal_num(120))\nprint(jacobsthal_num(121))\nprint(jacobsthal_num(122))\nprint(jacobsthal_num(123))\nprint(jacobsthal_num(124))\nprint(jacobsthal_num(125))\nprint(jacobsthal_num(126))\nprint(jacobsthal_num(127))\nprint(jacobsthal_num(128))\nprint(jacobsthal_num(129))\nprint(jacobsthal_num(130))\nprint(jacobsthal_num(131))\nprint(jacobsthal_num(132))\nprint(jacobsthal_num(133))\nprint(jacobsthal_num(134))\nprint(jacobsthal_num(135))\nprint(jacobsthal_num(136))\nprint(jacobsthal_num(137))\nprint(jacobsthal_num(138))\nprint(jacobsthal_num(139))\nprint(jacobsthal_num(140))\nprint(jacobsthal_num(141))\nprint(jacobsthal_num(142))\nprint(jacobsthal_num(143))\nprint(jacobsthal_num(144))\nprint(jacobsthal_num(145))\nprint(jacobsthal_num(146))\nprint(jacobsthal_num(147))\nprint(jacobsthal_num(148))\nprint(jacobsthal_num(149))\nprint(jacobsthal_num(150))\nprint(jacobsthal_num(151))\nprint(jacobsthal_num(152))\nprint(jacobsthal_num(153))\nprint(jacobsthal_num(154))\nprint(jacobsthal_num(155))\nprint(jacobsthal_num(156))\nprint(jacobsthal_num(157))\nprint(jacobsthal_num(158))\nprint(jacobsthal_num(159))\nprint(jacobsthal_num(160))\nprint(jacobsthal_num(161))\nprint(jacobsthal_num(162))\nprint(jacobsthal_num(163))\nprint(jacobsthal_num(164))\nprint(jacobsthal_num(165))\nprint(jacobsthal_num(166))\nprint(jacobsthal_num(167))\nprint(jacobsthal_num(168))\nprint(jacobsthal_num(169))\nprint(jacobsthal_num(170))\nprint(jacobsthal_num(171))\nprint(jacobsthal_num(172))\nprint(jacobsthal_num(173))\nprint(jacobsthal_num(174))\nprint(jacobsthal_num(175))\nprint(jacobsthal_num(176))\nprint(jacobsthal_num(177))\nprint(jacobsthal_num(178))\nprint(jacobsthal_num(179))\nprint(jacobsthal_num(180))\nprint(jacobsthal_num(181))\nprint(jacobsthal_num(182))\nprint(jacobsthal_num(183))\nprint(jacobsthal_num(184))\nprint(jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n==0): \n        return 0\n    if (n==1): \n        return 1\n    return (jacobsthal_num(n-1)+jacobsthal_num(n-2))%1000000007\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #base cases\n    if(n == 1):\n        return 1\n    if(n == 2):\n        return 1\n    if(n == 3):\n        return 3\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return \"K is greater than the list length.\"\n    else:\n        return sorted(test_list, key=lambda tup: tup[1])[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # your code goes here\n    return set(list(zip(*test_list))[K])\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list on the basis of the index=1. That is, \n    # we sort the list using itemgetter(1) \n    # which sorts the list with help of the \n    # second element in the tuples \n    test_list.sort(key = itemgetter(1)) \n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list first\n    test_list.sort()\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if len(result) < K:\n            result.append(test_list[i])\n        elif test_list[i][1] < result[0][1]:\n            result.pop()\n            result.append(test_list[i])\n        elif test_list[i][1] == result[0][1]:\n            result.append(test_list[i])\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #list1 = list(test_list)\n    #sorted_list = sorted(list1, key=lambda x: x[0])\n    #print(sorted_list[:k])\n    #return(sorted_list[:k])\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #iterate over the list\n    min_k_records = []\n    # step 1: sort the list using the key=lambda x: x[1]\n    test_list.sort(key=lambda x: x[1])\n    print(test_list)\n    #step 2: select first k elements from the list\n    min_k_records = test_list[:K]\n    print(min_k_records)\n    # step 3: find the minimum value among the minimums\n    min_val = min_k_records[0][1]\n    for i in min_k_records:\n        if i[1] < min_val:\n            min_val = i[1]\n    # step 4: find the records with minimum value\n    print(min_val)\n    min_k_records = []\n    for i in test_list:\n        if i[1] == min_val:\n            min_k_records.append(i)\n    # step 5: return the list of minimums\n    return min_k_records\n    #return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #temp_list = []\n    for i in range(0,len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if test_list[i][0] + test_list[j][0] + test_list[k][0] == 0:\n                    if test_list[i][1] + test_list[j][1] + test_list[k][1] == 0:\n                        if test_list[i][2] + test_list[j][2] + test_list[k][2] == 0:\n                            if test_list[i][3] + test_list[j][3] + test_list[k][3] == 0:\n                                if test_list[i][4] + test_list[j][4] + test_list[k][4] == 0:\n                                    if test_list[i][5] + test_list[j][5] + test_list[k][5] == 0:\n                                        #temp_list.append([test_list[i][0] + test_list[j][0] + test_list[k][0], test_list[i][1] + test_list[j][1] + test_list[k][1], test_list[i][2] + test_list[j][2] + test_list[k][2], test_list[i][3] + test_list[j][3] + test_list[k][3], test_list[i][4] + test_list[j][4] + test_list[k][4], test_list[i][5] + test_list[j][5] + test_list[k][5]])\n                                        test_list.append([test_list[i][0] + test_list[j][0] + test_list[k][0], test_list[i][1] + test_list[j][1] + test_list[k][1], test_list[i][2] + test_list[j][2] + test_list[k][2], test_list[i][3] + test_list[j][3] + test_list[k][3], test_list[i][4] + test_list[j][4] + test_list[k][4], test_list[i][5] + test_list[j][5] + test_list[k][5]])\n                                        \n                                        \n    #print(len(temp_list))\n    #return temp_list\n    #print(test_list)\n    return test_list\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def partition(test_list, left, right):\n        pivot = random.randint(left, right)\n        test_list[right], test_list[pivot] = test_list[pivot], test_list[right]\n        store_index = left\n        for i in range(left, right):\n            if test_list[i][1] < test_list[right][1]:\n                test_list[i], test_list[store_index] = test_list[store_index], test_list[i]\n                store_index += 1\n        test_list[right], test_list[store_index] = test_list[store_index], test_list[right]\n        return store_index\n    def quicksort(test_list, left, right):\n        if left < right:\n            pivot = partition(test_list, left, right)\n            quicksort(test_list, left, pivot - 1)\n            quicksort(test_list, pivot + 1, right)\n    n = len(test_list)\n    if n == 0 or K == 0:\n        return []\n    quicksort(test_list, 0, n - 1)\n    return test_list[:K]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = [2,3,5,7,11,13]\n    l2 = [3,5,7,9,11,21,27]\n    l3 = [3,5,7,9,11,21]\n    set_a = set()\n    set_b = set()\n    set_c = set()\n    for i in range(0, len(l1)):\n        if l1[i] in l2:\n            set_a.add(l1[i])\n        if l1[i] in l3:\n            set_a.add(l1[i])\n    for i in range(0, len(l2)):\n        if l2[i] in l1:\n            set_b.add(l2[i])\n        if l2[i] in l3:\n            set_b.add(l2[i])\n    for i in range(0, len(l3)):\n        if l3[i] in l1:\n            set_c.add(l3[i])\n        if l3[i] in l2:\n            set_c.add(l3[i])\n    print(set_a)\n    print(set_b)\n    print(set_c)\n    common = set_a.intersection(set_b, set_c)\n    print(common)\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(0, len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            l_list.append(l1[i])\n    return l_list\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    final_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            final_list.append(l1[i])\n    return final_list\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # we go through the lists and check if the element is common for all three lists under the same index\n    l4 = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            l4.append(l1[i])\n    return l4\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Method 1 (Using Set)\n    \n    set_of_l1 = set(l1)\n    set_of_l2 = set(l2)\n    set_of_l3 = set(l3)\n    common_elem = list(set_of_l1.intersection(set_of_l2, set_of_l3))\n    return common_elem\n    \n    # Method 2 (Using List)\n    \n    # common_elem = []\n    # for i in range(len(l1)):\n    #     if l1[i] in l2 and l1[i] in l3:\n    #         common_elem.append(l1[i])\n    # return common_elem\n    \nif __name__ == '__main__':\n    \n    l1 = [1, 2, 2, 3]\n    l2 = [2, 3, 3, 4]\n    l3 = [4, 5, 6, 2]\n    \n    l1 = [10, 20, 30, 40, 50]\n    l2 = [20, 30, 40, 50, 60]\n    l3 = [10, 20, 30, 40, 50]\n    \n    l1 = [2, 3, 4, 5]\n    l2 = [3, 4, 5, 6]\n    l3 = [2, 3, 4, 5]\n    \n    l1 = [2, 3, 4, 5, 6]\n    l2 = [3, 4, 5, 6, 7]\n    l3 = [2, 3, 4, 5, 6]\n    \n    print(extract_index_list(l1, l2, l3))\n    \n    # Method 2 - Using List\n    \n    # common_elem = []\n    # for i in range(len(l1)):\n    #     if l1[i] in l2 and l1[i] in l3:\n    #         common_elem.append(l1[i])\n    # return common_elem\n    \n    "
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Find common elements\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            res.append(l1[i])\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    i1, i2, i3 = 0, 0, 0\n    n1, n2, n3 = len(l1), len(l2), len(l3)\n    res = []\n    while i1 < n1 and i2 < n2 and i3 < n3:\n        if l1[i1] == l2[i2] == l3[i3]:\n            res.append(l1[i1])\n            i1 += 1\n            i2 += 1\n            i3 += 1\n        elif l1[i1] < l2[i2]:\n            i1 += 1\n        elif l2[i2] < l3[i3]:\n            i2 += 1\n        else:\n            i3 += 1\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1) & set(l2) & set(l3))\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    second_smallest_num = numbers[1]\n    return second_smallest_num\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 1:\n        return None\n    for i in range(2):\n        if i == 0:\n            min_index = 0\n            min_num = numbers[0]\n        else:\n            min_index = 1\n            min_num = numbers[1]\n        for j in range(1, len(numbers)):\n            if min_num >= numbers[j]:\n                if min_num < numbers[j]:\n                    min_num = numbers[j]\n                    min_index = j\n    return min_num\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    if len(numbers) == 1:\n        return None\n    smallest = second_smallest_helper(numbers, 0, len(numbers) - 1)\n    if smallest is None:\n        return numbers[0]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # [1, 2, 3, 4]\n    sorted_numbers = sorted(numbers)\n    print(sorted_numbers)\n    return sorted_numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = list(numbers)\n    first = second = float(\"inf\")\n    for number in numbers:\n        if number <= first:\n            first, second = number, first\n        elif number < second:\n            second = number\n    return second\n    "
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_one_or_more_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b+', text)\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b+', text)\ndef text_match_either(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b', text)\ndef text_match_either_or(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b|b*', text)\ndef text_match_one_or_more_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b+', text)\ndef text_match_one_or_more_zero_or_more_or_no_zeros(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_zero_or_more_or_no_zeros(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b', text)\ndef text_match_zero_or_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_zero_or_one_or_more_or_no_zeros(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_zero_or_one_or_more_or_no_zeros_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_no_zeros(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_no_zeros_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_no_zeros_or_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_no_zeros_or_one_or_more_or_no_zeros(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_one_or_more_or_no_zeros(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_one_or_more_or_no_zeros_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_one_or_more_or_no_zeros_or_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.b*', text)\ndef text_match_one_or_more_or_no_zeros_or_one_or_more_or_no_zeros(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.ph"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.match(r\"a[b]*\", text))\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text='aabababab'\n    #text='aab'\n    pattern=re.compile(r'a.b*')\n    if pattern.match(text):\n        print(\"Match found\")\n    else:\n        print(\"Match not found\")\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = '\\Aa[a-z]*b\\Z'\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"ab+\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match('a',text)\nprint(text_match_zero_one(\"ab\"))\nprint(text_match_zero_one(\"abc\"))\nprint(text_match_zero_one(\"abb\"))\nprint(text_match_zero_one(\"aab\"))\nprint(text_match_zero_one(\"abbb\"))\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r\"ab*\", text)\n    if result:\n        return \"Match found: \" + str(result)\n    else:\n        return \"Match was not found\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.b{1,}\"\n    if re.search(pattern, text):\n        return \"Match Found!\"\n    else:\n        return \"Not Matched\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a=re.compile(r'a\\wb{1,}')\n    if a.search(text):\n        print(\"Found match!\")\n    else:\n        print(\"No match!\")\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\ba+b\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\nprint(text_match_zero_one(\"ac\"))\nprint(text_match_zero_one(\"abc\"))\nprint(text_match_zero_one(\"abbc\"))\nprint(text_match_zero_one(\"abcbacbc\"))\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # for loop iterates over the test_list\n    for i in range(0, len(test_list)):\n        # find index of the string in the test_list\n        j = test_list.index(test_list[i])\n        # check if the index is greater than the length of the test_list\n        if j > len(test_list):\n            # check if the index is greater than the length of the test_list\n            if len(test_list[j:]) > len(test_list[i:]):\n                # check if the length of the substring is greater than the length of the string\n                if len(test_list[j:]) > len(test_list[i:]):\n                    # check if the substring is reversed\n                    if test_list[j:] == test_list[i::-1]:\n                        # count the number of pairs of reversed strings\n                        count = count + 1\n                        # return the count of the number of pairs of reversed strings\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # count = 0\n    # for i in range(len(test_list)):\n    #     for j in range(i+1, len(test_list)):\n    #         if test_list[j] == test_list[i][::-1]:\n    #             count += 1\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # initialize count\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    # To avoid the same indexing\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i] == test_list[j][::-1]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum(test_list[i] == test_list[i+1][::-1] for i in range(len(test_list)-1))\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def reverse_string(x):\n        '''\n        This function takes in a string and returns the reverse of that string.\n        '''\n        return x[::-1]\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    print(\"Input list is:\", test_list)\n    total_count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if(test_list[i] == test_list[j][::-1]):\n                total_count += 1\n    print(\"Number of reverse pairs:\", total_count)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    global pairs\n    pair_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                pairs += 1\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # base case\n    if len(test_list) < 2:\n        return 0\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    uniques = set()\n    result = dict()\n    for l in list1:\n        uniques.add(tuple(l))\n    for u in uniques:\n        result[u] = list1.count(u)\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(list1)\n    list1.sort()\n    dic = {}\n    for item in list1:\n        if item not in dic.keys():\n            dic[item] = 1\n        else:\n            dic[item] += 1\n    dic = sorted(dic.items())\n    for item in dic:\n        item = list(item)\n    return dic\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for sublist in list1:\n        result[tuple(sublist)] = list1.count(sublist)\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # One way\n    # sublist = []\n    # for i in list1:\n    #     for j in i:\n    #         sublist.append(j)\n    # unique = list(set(sublist))\n    # count = []\n    # for i in unique:\n    #     count.append(sublist.count(i))\n    # print(dict(zip(unique,count)))\n    # Another way\n    list_count = {}\n    for i in list1:\n        key = tuple(i)\n        list_count[key] = list_count.get(key,0) + 1\n    return list_count\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = set(list1)\n    list2 = list(list1)\n    list2.sort()\n    for i in range(len(list2)):\n        list2[i] = tuple(list2[i])\n    list2 = set(list2)\n    count = dict()\n    for i in list2:\n        count[i] = list1.count(i)\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_sublist = {}\n    for i in list1:\n        if type(i) == type([]):\n            count_sublist[tuple(i)] = list1.count(i)\n    return count_sublist\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for sublist in list1:\n        list_dict[tuple(sublist)] = list_dict.get(tuple(sublist), 0) + 1\n    return list_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for item in list1:\n        if tuple(item) not in dict1:\n            dict1[tuple(item)] = 1\n        else:\n            dict1[tuple(item)] += 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # list1 = [1, [1, 2, 3], 2, 3]\n    # list1 = [[1, 2, 3], [1, 2, 3], [1, 2, 3], 1, 2, 3, [1, 2, 3]]\n    # dict1 = {}\n    # for i in range(len(list1)):\n    #     for j in range(len(list1[i])):\n    #         dict1[tuple(list1[i][j])] = list1.count(list1[i][j])\n    #     print(dict1)\n    #     dict1 = {}\n    #     break\n    # return dict1\n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] in dict1:\n            dict1[list1[i]] += 1\n        else:\n            dict1[list1[i]] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list=list()\n    for i in list1:\n        if isinstance(i,list):\n            new_list.append(tuple(i))\n    my_dict=dict()\n    for i in new_list:\n        if i in my_dict:\n            my_dict[i]+=1\n        else:\n            my_dict[i]=1\n    return my_dict"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, int) or isinstance(num, float):\n        return True\n    try:\n        float(num)\n    except:\n        return False\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] == '-':\n        if num[1:].isdigit():\n            return False\n        else:\n            for char in num[1:]:\n                if char!= '0' and char!= '.':\n                    return False\n            if num[-1] == '.':\n                return True\n            return False\n    else:\n        if num.isdigit():\n            return False\n        else:\n            for char in num:\n                if char!= '0' and char!= '.':\n                    return False\n            if num[-1] == '.':\n                return True\n            return False\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = float(num)\n    if (num % 1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdecimal()\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num and len(num) > 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    def is_decimal_helper(num):\n        digits = list(map(int, num))\n        if len(digits)!= 1:\n            return False\n        return (digits[0] == 0 or digits[0] == 1 or (digits[0] >= 2 and digits[0] <= 9))\n    \n    return is_decimal_helper(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except:\n        return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_dict = {}\n    for i in arr:\n        if arr_dict.get(i) == None:\n            arr_dict[i] = 1\n        else:\n            arr_dict[i] += 1\n    if len(arr_dict) == 1:\n        return True\n    else:\n        return False\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #return len(set(arr)) == 1\n    return len(arr) == len(set(arr))\nprint(unique_Element([1,3,3,3,6,6]))\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if(arr[i] == arr[j]):\n                break\n        else:\n            return arr[i]\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    uniq = {}\n    for i in range(len(arr)):\n        if arr[i] not in uniq:\n            uniq[arr[i]] = 1\n        else:\n            uniq[arr[i]] += 1\n    for v in uniq.values():\n        if v > 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i] == arr[j]):\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr))==1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n=len(arr)\n    new_l=[]\n    for i in range(n):\n        if arr[i] not in new_l:\n            new_l.append(arr[i])\n    print(len(new_l))\n    return len(new_l)==1\n    \n    \n    \n    \n    \ndef is_Palindrome(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not. \n    Note: A palindrome is a word, number, phrase, or other sequence of characters which reads the same backward as forward, such as madam or racecar.\n    '''\n    s=s.replace(' ','')\n    s=s.lower()\n    rev=s[::-1]\n    if s==rev:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \ndef is_Prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not. \n    Note: A prime number (or a prime) is a natural number greater than 1 and that has no positive divisors other than 1 and itself.\n    '''\n    if n<2:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\n    \n    \n    \n    \ndef reverse_Integer(n):\n    '''\n    Write a python function to get reverse of an integer.\n    Note: Reverse of an integer is defined as the number obtained by reversing the digits in the integer.\n    For example, reverse of 2345 is 54321.\n    '''\n    x=str(abs(n))\n    rev=x[::-1]\n    return int(rev)\n    \n    \n    \n    \ndef find_Greatest_Common_Divisor(x,y):\n    '''\n    Write a python function to get the greatest common divisor (GCD) of two numbers.\n    Note: The greatest common divisor (GCD) is the largest number that divides two or more numbers without remainder.\n    '''\n    if x>y:\n        small=y\n    else:\n        small=x\n    for i in range(1,small+1):\n        if x%i==0 and y%i==0:\n            gcd=i\n    return gcd\n    \n    \n    \n    \ndef is_Armstrong(n):\n    '''\n    Write a python function to check whether a given number is armstrong or not.\n    Note: An armstrong number is a number that is equal to the sum of the cubes of its digits. \n    For example, 371 is an armstrong number since 3*3*3+7*7*7+1*1*1 = 371.\n    '''\n    x=str(abs(n))\n    l=len(x)\n    sum=0\n    for i in range(l):\n        sum+=int(x[i])**3\n    if sum==n:\n        return True\n    return False\n    \n    \n    \n    \ndef is_Perfect_Number(n):\n    '''\n    Write a python function to check whether a given number is perfect or not.\n    Note: A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself.\n    For example, 6 is a perfect number because its divisors are 1, 2 and 3 (excluding 6 itself), and 1+2+3 = 6.\n    '''\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            s=0\n            for j in range(2,i):\n                if i%j==0:\n                    s+=j\n            if i==s:\n                return True\n    return False\n    \n    \n    \n    \ndef largest_Prime_Factor(n):\n    '''\n    Write a python function to get largest prime factor of a given number.\n    Note: Largest prime factor means the largest prime number that can be a divisor of given number.\n    '''\n    i=2\n    while i<=n/2:\n        if n%i==0:\n            n=n/i\n            if is_Prime(i):\n                return i\n        else:\n            i+=1\n    return n\n    \n    \n    \n    \ndef greatest_Common_Divisor(x,y):\n    '''\n    Write a python function to get the greatest common divisor (GCD) of two numbers.\n    Note: The greatest common divisor (GCD) is the largest number that divides two or more numbers without remainder.\n    '''\n    if x>y:\n        small=y\n    else:\n        small=x\n    for i in range(1,small+1):\n        if x%i==0 and y%i==0:\n            gcd=i\n    return gcd\n    \n    \n    \ndef least_Common_Multiple(x,y):\n    '''\n    Write a python function to get the least common multiple (LCM) of two numbers.\n    Note: The least common multiple (LCM) of two numbers is the smallest positive number that is divisible by the two given numbers.\n    '''\n    n=1\n    lcm=0\n    while(n<=x*y):\n        if n%x==0 and n%y==0:\n            lcm=n\n        n+=1\n    return lcm\n    \n    \n    \ndef fibonacci_Sequence(n):\n    '''\n    Write a python function to get the nth term of fibonacci sequence.\n    Note: The fibonacci sequence is a sequence where each number is the sum of the two preceding numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci_Sequence(n-1)+fibonacci_Sequence(n-2)\n    \n    \n    \n    \ndef greatest_Common_Divisor_of_Fibonacci_Sequence(n):\n    '''\n    Write a python function to get the greatest common divisor (GCD) of the first n numbers of fibonacci sequence.\n    Note: The greatest common divisor (GCD) of two or more integers is the largest positive integer that divides them all.\n    '''\n    fib=[0,1]\n    for i in range(2,n):\n        fib.append(fib[i-1]+fib[i-2])\n    gcd=greatest_Common_Divisor(fib[0],fib[1])\n    for i in range(2,n):\n        gcd=greatest_Common_Divisor(gcd,fib[i])\n    return gcd\n    \n    \n    \n    \ndef least_Common_Divisor_of_Fibonacci_Sequence(n):\n    '''\n    Write a python function to get the least common divisor (LCM) of the first n numbers of fibonacci sequence.\n    Note: The least common multiple (LCM) of two or more integers is the smallest positive integer that perfectly divides all of them.\n    '''\n    fib=[0,1]\n    for i in range(2,n):\n        fib.append(fib[i-1]+fib[i-2])\n    lcm=fib[0]*fib[1]/greatest_Common_Divisor(fib[0],fib[1])\n    for i in range(2,n):\n        lcm=lcm*fib[i]/greatest_Common_Divisor(lcm,fib[i])\n    return int(lcm)\n    \n    \n    \n    \ndef prime_factorization(n):\n    '''\n    Write a python function to get prime factorization of a given number.\n    Note: A prime factor is a positive integer that can be factored into smaller positive integers.\n    '''\n    if n<0:\n        n=-n\n    factors={}\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            n//=i\n            factors[i]=0\n            while n%i==0:\n                n//=i\n                factors[i]+=1\n        else:\n            i+=1\n    if n>1:\n        factors[n]=1\n    return factor"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr))==1\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    #create a list of the months\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    #check if monthnum3 is in range of months\n    if monthnum3 in range(1,13):\n        #check if monthnum3 is in list of months\n        if months[monthnum3-1] in months:\n            return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"Month has 30 days\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"Month has 31 days\")\n    else:\n        print(\"Month has 28 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_number=[]\n    month_number = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum3 in month_number:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    elif monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        return True\n    elif monthnum3 == 3:\n        return True\n    elif monthnum3 == 4:\n        return True\n    elif monthnum3 == 5:\n        return True\n    elif monthnum3 == 6:\n        return True\n    elif monthnum3 == 7:\n        return True\n    elif monthnum3 == 8:\n        return True\n    elif monthnum3 == 9:\n        return True\n    elif monthnum3 == 10:\n        return True\n    elif monthnum3 == 11:\n        return True\n    elif monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in monthnum:\n        return True\n    else:\n        return False\ndef check_monthname_number(monthnum4):\n    '''\n    Write a function to check whether the given month name contains 30 days or not. Months are given as names from 1 to 12.\n    '''\n    if monthnum4 in monthname:\n        return True\n    else:\n        return False\ndef check_day_number(day):\n    '''\n    Write a function to check whether the given day number contains 30 days or not. Days are given as number from 1 to 30.\n    '''\n    if day in daynum:\n        return True\n    else:\n        return False\ndef check_day_name(day):\n    '''\n    Write a function to check whether the given day name contains 30 days or not. Days are given as name from 1 to 30.\n    '''\n    if day in dayname:\n        return True\n    else:\n        return False\ndef check_month_number_day(month,day):\n    '''\n    Write a function to check whether the given month number and day number contain 30 days or not.\n    '''\n    if month in monthnum and day in daynum:\n        return True\n    else:\n        return False\ndef check_month_name_day(month,day):\n    '''\n    Write a function to check whether the given month name and day name contain 30 days or not.\n    '''\n    if month in monthnum and day in dayname:\n        return True\n    else:\n        return False\nprint(check_monthnumber_number(monthnum))\nprint(check_monthname_number(monthnum))\nprint(check_day_number(daynum))\nprint(check_day_name(dayname))\nprint(check_month_number_day(monthnum,daynum))\nprint(check_month_name_day(monthname,dayname)"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        print(\"February has 30 days\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"months with 30 days:\", monthnum3)\n    else:\n        print(\"months with 31 days:\", monthnum3)\ncheck_monthnumber_number(2)\ncheck_monthnumber_number(4)\ncheck_monthnumber_number(6)\ncheck_monthnumber_number(9)\ncheck_monthnumber_number(11)\ncheck_monthnumber_number(1)\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 13 and monthnum3 > 0:\n        if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            return 30\n        elif monthnum3 == 2:\n            return 28\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return 30\n        else:\n            return \"It is not a valid month number\"\n    else:\n        return \"It is not a valid month number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_30 = [4, 6, 9, 11]\n    if monthnum3 in month_30:\n        print('Month {} has 30 days'.format(monthnum3))\n    else:\n        print('Month {} has 28 or 29 days'.format(monthnum3))\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 1000000000000\n    for i in range(n):\n        for j in range(n):\n            if arr[i] == arr[j]:\n                continue\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array \n    arr.sort() \n    # initialize minimum difference \n    # variable with infinite value \n    min_diff = 10**9\n    for i in range(n-1): \n        # pick next element \n        next_element = arr[i+1] \n        # subtract element from next element and \n        # update min_diff if needed \n        min_diff = min(min_diff, next_element - arr[i]) \n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    return min(arr[i+1]-arr[i] for i in range(n-1))\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # function to find the minimum difference between  \n    # any two elements in an array \n    #\n    # return minimum difference  \n    #\n    min = arr[0] \n    max = arr[0] \n    for i in range(0,n): \n        if (arr[i]<min): \n            min=arr[i]\n        if (arr[i]>max): \n            max=arr[i]\n    \n    return max-min \n    "
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    min_diff = arr[1] - arr[0] \n    for i in range(0, n-1): \n        if (arr[i+1] - arr[i]) < min_diff: \n            min_diff = arr[i+1] - arr[i] \n    return min_diff \ndef find_minimum_diff_using_binary_search(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(0, n-1):\n        if (arr[i+1] - arr[i]) < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\ndef find_minimum_diff_using_dictionary(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1] - arr[0]\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if (arr[j] - arr[i]) < min_diff:\n                min_diff = arr[j] - arr[i]\n    return min_diff\ndef find_minimum_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(0, n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\ndef find_minimum_diff_using_dictionary(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1] - arr[0]\n    my_dict = {}\n    for i in range(0, n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\nif __name__ == '__main__':\n    print(\"Hello, World!\")\n    arr = [2, 3, 1, 10, 4, 20, 6]\n    n = len(arr)\n    print(\"Minimum difference is \", find_minimum_diff(arr, n))\n    print(\"Minimum difference is \", find_minimum_diff_using_dictionary(arr, n))\n    print(\"Minimum difference is \", find_minimum_diff_using_binary_search(arr, n)"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort()\n    # initialize the answer\n    answer = arr[1] - arr[0]\n    # take the difference between the first element and the last element \n    for i in range(n):\n        min_diff = arr[i+1] - arr[i]\n        if min_diff < answer:\n            answer = min_diff\n    return answer\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array \n    arr.sort() \n    min_diff = arr[1] - arr[0]\n    for i in range(1, n): \n        min_diff = min(min_diff, arr[i] - arr[i-1]) \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    diff = arr[1] - arr[0] \n    for i in range(1, n): \n        diff = min(diff, arr[i] - arr[i - 1]) \n    return diff \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    max_diff = float(\"inf\") # Set max_diff to initial value\n    arr.sort() # Sort the array in ascending order\n    for i in range(0,n-1): \n        if (arr[i+1]-arr[i]) < max_diff: \n            max_diff = arr[i+1]-arr[i] # Update max_diff\n    return max_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array in increasing order\n    arr = sorted(arr)\n    # initialize diff to infinite\n    diff = float('inf')\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # # Your code here\n    n = len(str)\n    ctr = 0\n    while n:\n        n //= 10\n        ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count +=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for char in str:\n        if char.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit = 0\n    for i in str:\n        if i.isdigit():\n            digit += 1\n    return digit\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i] in \"0123456789\":\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1: \n        return False\n    if n == 1: \n        return True\n    count = 1\n    flag = True\n    while (flag): \n        if count * 2 < n: \n            count = count * 2\n        else: \n            flag = False\n        if count % n == 0: \n            flag = False\n    return count \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n * (n+1) // 2\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def count(n,s): \n        if n<0: \n            return 0\n        if n==0: \n            return s\n        return count(n-1,s)+s \n    return count(n,1)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0: \n        return -1\n    else:\n        return n ** 2 + (n - 1) ** 2\n    # if n <= 1:\n    #     return 1\n    # else: \n    #     return n ** 2 + (n - 1) ** 2\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if is_prime(i) == False:\n            sum = sum + 1\n    return sum \ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. "
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    x=0\n    count=0\n    while True:\n        if x!=0:\n            x=int(x**(1/3))\n        else:\n            x=int(x**(1/2))\n        count+=1\n        if count==n:\n            return x\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # if n == 1: \n    #     return 1\n    \n    # if n == 2: \n    #     return 2\n    \n    # k = 3 \n    # limit = int(math.sqrt(n)) \n    \n    # while k <= limit: \n    #     if (n % k == 0): \n    #         if (n // k!= k): \n    #             return k \n    #         return n // k \n        \n    #     k += 2\n    \n    # return -1\n    \n    # -----------------\n    \n    if n < 2: \n        return -1\n        \n    if n == 2: \n        return 2\n    \n    if n == 3: \n        return 3\n    \n    if n == 4: \n        return 4\n        \n    # n is a prime number. \n    \n    # if n is divisible by 6. \n    if n % 6 == 0: \n        return 6\n        \n    # if n is divisible by 2. \n    if n % 2 == 0: \n        return 2\n    \n    # n must be odd. \n    # if n is greater than or equal to 7. \n    if n >= 7: \n        \n        # we will check from 7 to n/2 \n        for i in range(7, int(n/2)+1, 1): \n            if (n % i == 0): \n                return i \n        \n    return -1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    x = 1\n    while x<n:\n        if x%3==0 or x%5==0:\n            count = count+1\n        x = x+1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def makePolite(n):\n        if n < 2:\n            return 0\n        else:\n            return n*makePolite(n-1)\n    return makePolite(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0: \n        return\n    if n == 0: \n        return 0\n    else: \n        return 2 * is_polite(n - 1) + 1\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i],l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # your code here\n    return [l1[i:i+2] for i in range(0, len(l1)-1)]\n    \n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1=list(l1)\n    l2=[]\n    l2=l1[0::2]\n    return(l2)\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(list(zip(l1[:-1], l1[1:])))\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1)<2:\n        return []\n    else:\n        return [tuple(l1[i:i+2]) for i in range(0,len(l1),2)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 0:\n        return []\n    elif len(l1) == 1:\n        return [[l1[0], l1[0]]]\n    else:\n        l2 = []\n        for i in range(len(l1)-1):\n            l2.append([l1[i], l1[i+1]])\n        return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    new_list = []\n    for i in range(len(l1)):\n        if i+1 < len(l1):\n            new_list.append(l1[i],l1[i+1])\n    return new_list\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [ (l1[x],l1[x+1]) for x in range(len(l1)-1) ]\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    sum_count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] + arr[j] == sum:\n                sum_count += 1\n    return sum_count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    # write code here\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!=j:\n                if arr[i]+arr[j] == sum:\n                    count+=1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # this is a Python program to print all \n    # permutations using library function \n    from itertools import permutations \n    for i in permutations(arr,2): \n        if sum(i) == sum: \n            print(i) "
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    seen = set()\n    for i in range(len(arr)):\n        complement = sum - arr[i]\n        if complement in seen:\n            print(complement, arr[i])\n            return True\n        seen.add(arr[i])\n    return False\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    hash_map = {}\n    for i in range(len(arr)):\n        hash_map[arr[i]] = i\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    hash_map = {}\n    for i in range(0, len(arr)):\n        if arr[i] not in hash_map:\n            hash_map[arr[i]] = 1\n        else:\n            hash_map[arr[i]] += 1\n    count = 0\n    for i in range(0, len(arr)):\n        if sum - arr[i] in hash_map:\n            count += hash_map[arr[i]]\n    return count // 2\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(list(set(li1)-set(li2))+list(set(li2)-set(li1)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1) - set(li2)))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(map(lambda x: x ** 4, filter(lambda x: x % 2 == 1, range(1, n + 1))))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_odd = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum_odd += i ** 4\n    return sum_odd\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if i%2!= 0 : \n            sum += (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1) :\n        if i%2 == 0 :\n            total += i**4\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_numbers = [n for n in range(1, n+1, 2)]\n    odd_numbers_power = []\n    for i in odd_numbers :\n        odd_numbers_power.append(i**4)\n    sum = 0\n    for i in odd_numbers_power :\n        sum += i\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    print('Sum of fourth power of first {} odd natural numbers: {}'.format(n, sum([i ** 4 for i in range(1, n + 1, 2)]) ) )\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(i**4 for i in range(1,n+1) if i%2==1)\ndef main():\n    print(odd_num_sum(5))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(i*i*i*i for i in range(n) if i % 2 == 1)\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2) :\n        sum += (i * i * i * i)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_sum = 0\n    for i in range(n) :\n        if i%2!=0 :\n            odd_sum += (i**4)\n    return odd_sum\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    balanced = True\n    for char in exp:\n        if char in '({[':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                balanced = False\n                break\n            else:\n                top = stack.pop()\n                if not is_match(top, char):\n                    balanced = False\n                    break\n    if balanced and len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    stack.append('#')\n    for letter in exp:\n        if letter == '{' or letter == '[' or letter == '(':\n            stack.append(letter)\n        else:\n            if len(stack) > 0:\n                if stack.pop()!= '{' and stack.pop()!= '[' and stack.pop()!= '(':\n                    return False\n            else:\n                return False\n    if len(stack) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brackets = set('({[')\n    close_brackets = set(')}]')\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        if char in close_brackets:\n            if len(stack) == 0:\n                return False\n            if open_brackets.index(stack.pop())!= close_brackets.index(char):\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack=[]\n    for ch in exp:\n        if ch=='(' or ch=='{' or ch=='[' :\n            stack.append(ch)\n        else:\n            if not stack:\n                return False\n            current_char=stack.pop()\n            if current_char=='(' and ch!=')':\n                return False\n            if current_char=='{' and ch!='}':\n                return False\n            if current_char=='[' and ch!=']':\n                return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_brackets = {\"(\", \"{\", \"[\"}\n    close_brackets = {\")\", \"}\", \"]\"}\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(' or exp[i] == '{' or exp[i] == '[':\n            stack.append(exp[i])\n        elif exp[i] == ')' or exp[i] == '}' or exp[i] == ']':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if exp[i] == ')' and top!= '(':\n                return False\n            if exp[i] == '}' and top!= '{':\n                return False\n            if exp[i] == ']' and top!= '[':\n                return False\n    if len(stack) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ('(', '[', '{'):\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            last_open = stack.pop()\n            if last_open == '(':\n                if char!= ')':\n                    return False\n            if last_open == '[':\n                if char!= ']':\n                    return False\n            if last_open == '{':\n                if char!= '}':\n                    return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    exp = list(exp)\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if i == ')' and top!= '(':\n                    return False\n                elif i == '}' and top!= '{':\n                    return False\n                elif i == ']' and top!= '[':\n                    return False\n    if len(stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    table = {'(': ')', '[': ']', '{': '}'}\n    for i in exp:\n        if i in table:\n            s.append(i)\n        elif i in table.values():\n            if len(s) > 0:\n                if table[s[-1]] == i:\n                    s.pop()\n                else:\n                    return False\n            else:\n                return False\n    if len(s) > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_paren = set(['(', '{', '['])\n    close_paren = {')': '(', '}': '{', ']': '['}\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # temp = test_str.split(\" \")\n    # for i in range(len(temp)):\n    #     if len(temp[i]) == K:\n    #         test_str.remove(temp[i])\n    # return \" \".join(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str)-K+1):\n        if test_str[i:i+K] == test_str[i:i+K][::-1]:\n            test_str = test_str[0:i]+test_str[i+K:]\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    list_words = test_str.split()\n    new_list = []\n    for word in list_words:\n        if len(word)!= K:\n            new_list.append(word)\n    return \" \".join(new_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #First solution\n    # test_str = test_str.split(' ')\n    # new_string = []\n    # for i in test_str:\n    #     if len(i)!= K:\n    #         new_string.append(i)\n    # return''.join(new_string)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split(' ')\n    new_str = []\n    for word in test_list:\n        if len(word) == K:\n            continue\n        else:\n            new_str.append(word)\n    return''.join(new_str)\nprint(remove_length('I am a very happy person', 2))\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    # Your code goes here\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join(word for word in test_str.split() if len(word)!= K)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Time: O(n * K)\n    # Space: O(n)\n    n = len(test_str)\n    curr = 0\n    while curr < n:\n        if len(test_str[curr]) == K:\n            test_str = test_str[:curr] + test_str[curr + 1:]\n            curr -= 1\n            n -= 1\n        curr += 1\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    import re\n    if K > len(test_str):\n        print('Input K must be less than or equal to length of test_str')\n        return\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join(filter(lambda word: len(word)!= K, test_str.split(\" \")))\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(text.find(pattern))\n    if text.find(pattern)!= -1:\n        print(f'Occurance is {text.count(pattern)}')\n    else:\n        print(None)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    result = pattern.finditer(text)\n    if result:\n        for i in result:\n            print(i.group() + \"-->\" + str(i.start()))\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    x = re.findall(pattern,text)\n    if x:\n        return f'Pattern {pattern} is present {len(x)} times. The first occurrence is at position {x[0][0]}'\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=re.findall(pattern,text)\n    if not result:\n        return None\n    else:\n        return result\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result == None:\n        return None\n    else:\n        return result.group()\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern not in text:\n        return None\n    for i in range(len(text)):\n        if text[i:len(pattern)+i]==pattern:\n            return (i,len(pattern)+i)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=re.findall(pattern,text)\n    if len(result)>0:\n        print(result)\n        for i in range(0,len(result)):\n            print(\"Occurance of pattern:{} at position:{}\".format(result[i],text.index(result[i])))\n    else:\n        print(\"No Match\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #print(text)\n    #print(pattern)\n    '''\n    Test Case #1\n    s=\"abracadabra\"\n    pattern=\"a\"\n    Result:\n    {'a': [0, 1, 2, 3, 4]}\n    Test Case #2\n    s=\"abracadabra\"\n    pattern=\"ab\"\n    Result:\n    {'ab': [0, 1, 2]}\n    Test Case #3\n    s=\"abracadabra\"\n    pattern=\"a\"\n    Result:\n    {'a': [0, 1, 2, 3, 4]}\n    Test Case #4\n    s=\"abracadabra\"\n    pattern=\"ab\"\n    Result:\n    {'ab': [0, 1, 2]}\n    Test Case #5\n    s=\"abracadabra\"\n    pattern=\"abc\"\n    Result:\n    None\n    Test Case #6\n    s=\"abracadabra\"\n    pattern=\"abcd\"\n    Result:\n    None\n    Test Case #7\n    s=\"abracadabra\"\n    pattern=\"abcd\"\n    Result:\n    {'abcd': [0, 1, 2]}\n    Test Case #8\n    s=\"abracadabra\"\n    pattern=\"abcd\"\n    Result:\n    {'abcd': [0, 1, 2]}\n    Test Case #9\n    s=\"abracadabra\"\n    pattern=\"a\"\n    Result:\n    {'a': [0, 1, 2, 3, 4]}\n    '''\n    if text==\"\" or pattern==\"\":\n        return None\n    m = re.finditer(pattern,text)\n    d=dict()\n    for i in m:\n        #print(i)\n        d.setdefault(i.group(),[]).append(i.start())\n    #print(d)\n    return d\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match=re.search(pattern,text)\n    if match:\n        print(\"substring occurs at position\",match.start())\n        print(\"Number of occurance:\",text.count(pattern))\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    p=re.compile(pattern)\n    match=p.findall(text)\n    if match:\n        occurance=len(match)\n        position=list(map(lambda x:x.start(),p.finditer(text)))\n        print(match,occurance,position)\n    else:\n        print('None')\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    output = []\n    for x in nums:\n        if x % 2!= 0:\n            output.append(x)\n    return len(output) == len(nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # your code here\n    result = []\n    for i in range(len(nums)):\n        if i%2!= 0 and nums[i] % 2!= 0:\n            result.append(i)\n    if len(result) == 0:\n        return True\n    else:\n        return result\n    # return result\nprint(odd_position([10,20,30,40,50,60]))\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    lst = []\n    for index,item in enumerate(nums):\n        if index % 2 == 0:\n            if item % 2 == 0:\n                lst.append(True)\n            else:\n                lst.append(False)\n    return lst\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if(i%2!=0):\n            if(nums[i]%2==0):\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i+1) % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Method 1: using while loop\n    new_list = []\n    i = 0\n    while i < len(nums):\n        if i % 2!= 0:\n            new_list.append(nums[i])\n        i += 1\n    if len(new_list) % 2!= 0:\n        return False\n    else:\n        return True\n        \nprint(odd_position([1, 2, 3, 4, 5]))\nprint(odd_position([1, 2, 3, 5]))\nprint(odd_position([5, 2, 3, 1]))\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels:\n            if test_str[i+1] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if i + 1 < len(test_str) and ((test_str[i] in 'aeiouAEIOU') or (test_str[i + 1] in 'aeiouAEIOU')):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count=0\n    for i in range(0,len(test_str)):\n        if((test_str[i]=='a') or (test_str[i]=='e') or (test_str[i]=='i') or (test_str[i]=='o') or (test_str[i]=='u')):\n            for j in range(1,len(test_str)):\n                if((test_str[i+j]=='a') or (test_str[i+j]=='e') or (test_str[i+j]=='i') or (test_str[i+j]=='o') or (test_str[i+j]=='u')):\n                    count+=1\n        elif((test_str[i]=='a') or (test_str[i]=='e') or (test_str[i]=='i') or (test_str[i]=='o') or (test_str[i]=='u')):\n            count+=1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_neighbor = 0\n    for i in range(len(test_str)):\n        if (i-1 >= 0 and test_str[i] in vowels) or (i+1 < len(test_str) and test_str[i] in vowels):\n            vowels_neighbor += 1\n    return vowels_neighbor\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiouAEIOU' and test_str[i+1] in 'aeiouAEIOU':\n            count += 1\n        else:\n            pass\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for i, c in enumerate(test_str):\n        if i > 0:\n            if c in vowels and test_str[i-1] in vowels:\n                count += 1\n        if i < len(test_str) - 1:\n            if c in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    test_str = test_str.lower()\n    counter = 0\n    for c in test_str:\n        if c in vowels:\n            if test_str[test_str.index(c)-1] in vowels or test_str[test_str.index(c)+1] in vowels:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = \"ahjfbkld\"\n    count = 0\n    for i in range(len(test_str)):\n        if(test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u'):\n            if(i+1!= len(test_str)):\n                if(test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u'):\n                    count += 1\n            if(i-1 >= 0):\n                if(test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u'):\n                    count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #Your code here\n    num_set = set(arr)\n    num_sum = sum(num_set)\n    return num_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in set(arr):\n        sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    sum=0\n    for i in range(len(arr)):\n        if(i==0 or arr[i]!=arr[i-1]):\n            sum+=arr[i]\n    return sum\n        \n    \nif __name__ == \"__main__\":\n    # arr=[1, 2, 3, 4, 5, 5, 6, 7, 8, 8]\n    arr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n    print(find_sum(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            sum = sum + num\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    lst = [x for x in arr if arr.count(x) == 1]\n    return sum(lst)\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in set(arr):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    seen = {}\n    for x in arr:\n        if x not in seen:\n            seen[x] = 1\n        else:\n            seen[x] += 1\n        total += x\n    return total - sum(map(lambda x: x[1], filter(lambda x: x[1]==1, seen.items())))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a dictionary\n    d = dict()\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_sum = 0\n    for i in range(len(arr)):\n        arr_sum += arr[i]\n    return arr_sum\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i == 0:\n            if list1[i] == list1[i+1]:\n                new_list.append([list1[i]])\n            else:\n                new_list.append(list1[i])\n        elif list1[i] == list1[i-1] and list1[i] == list1[i+1]:\n            new_list[-1].append(list1[i])\n        else:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = [i for i,j in groupby(list1)]\n    print(list1)\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # using itertools groupby function to group consecutive duplicates of the list element into sublists.\n    # Using lambda expression to add the first element of the group to list.\n    return [list(group) + [group[0]] for key, group in groupby(list1, lambda x: x == list1[0])]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack(item):\n        list2 = []\n        for k, g in groupby(item):\n            list2.append(list(g))\n        return list2\n    list3 = pack(list1)\n    for i in range(len(list3)):\n        if len(list3[i]) > 1:\n            list3[i] = [list3[i][0]] + [list3[i][1]]\n    return list3\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sorted_list = sorted(list1)\n    duplicate_groups = []\n    for key, group in groupby(sorted_list):\n        duplicate_groups.append(list(group))\n    # print(duplicate_groups)\n    return duplicate_groups\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack_duplicates(list1):\n        result = [[]]\n        for x in list1:\n            if x == result[-1][-1]:\n                result[-1].append(x)\n            else:\n                result.append([x])\n        return result\n    return [list(group) for group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def sublist(lst):\n        res = [[lst[0]]]\n        for i in range(1, len(lst)):\n            if lst[i]!= lst[i-1]:\n                res.append([lst[i]])\n        return res\n    lst = [item for item, _ in groupby(list1)]\n    return [sublist(i) for i in lst]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for k, group in groupby(list1)]\nlist1 = ['a', 'a', 'b', 'b', 'c', 'c', 'c']\nprint(pack_consecutive_duplicates(list1))\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_items = groupby(list1)\n    #print(grouped_items)\n    res = []\n    for item in grouped_items:\n        print(item)\n        #print(list(grouped_items))\n        res.append(list(item[1]))\n    #print(res)\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for key, group in groupby(list1):\n        new_list.append(list(group))\n    return new_list\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for list1 in list1:\n        list1 = tuple(list1)\n        sublist_counts[list1] = sublist_counts.get(list1,0) + 1\n    return sublist_counts\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_count = {}\n    for sublist in list1:\n        list_count[tuple(sublist)] = list_count.get(tuple(sublist),0) + 1\n    return list_count\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = list1\n    # print(list1)\n    list2.sort()\n    # print(list2)\n    list2_set = set(list2)\n    # print(list2_set)\n    list2_dict = {}\n    for x in list2_set:\n        list2_dict[x] = list2.count(x)\n    return list2_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_tuples = []\n    for sublist in list1:\n        list_tuples.append(tuple(sublist))\n    return {tuple(sublist): list_tuples.count(tuple(sublist)) for sublist in list_tuples}\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    num_of_lists = {}\n    for i in list1:\n        list_of_lists = i.split(',')\n        for j in list_of_lists:\n            if j not in num_of_lists.keys():\n                num_of_lists[j] = 1\n            else:\n                num_of_lists[j] += 1\n    return num_of_lists\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    list3 = []\n    for i in list1:\n        list2.append(tuple(i))\n    for i in list2:\n        if i not in list3:\n            list3.append(i)\n    count = {}\n    for i in list3:\n        count[i] = list2.count(i)\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        result[tuple(sublist)] = list1.count(sublist)\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    num_list = []\n    for i in list1:\n        num_list.append(tuple(i))\n    return Counter(num_list)\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #new_list = list(set([tuple(l) for l in list1]))\n    new_list = []\n    for l in list1:\n        t = tuple(l)\n        new_list.append(t)\n    new_list = list(set(new_list))\n    new_dict = {}\n    for l in new_list:\n        count = 0\n        for i in list1:\n            if l == tuple(i):\n                count += 1\n        new_dict[l] = count\n    return new_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = list(set(list1))\n    tuple_list = []\n    for element in unique_list:\n        tuple_list.append((element, list1.count(element)))\n    return tuple_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # creating empty list to store combinations \n    comb = [] \n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    li = [1,2,3,4,5]\n    li.sort()\n    li.reverse()\n    \n    comb = combinations(li, 2) \n    \n    # Print the obtained combinations \n    for i in comb: \n        print(sum(i))\n        \n    \ndef get_numbers(line):\n    \"\"\"\n    returns numbers in a list from a given line of input. \n    \"\"\"\n    numbers = []\n    for num in line.split():\n        numbers.append(int(num))\n    return numbers\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [comb for i in range(len(test_list),0,-1) for comb in combinations(test_list,i) if sum(comb)==0]\n    \ndef find_triplets(test_list):\n    '''\n    Write a function to find the triplets of numbers whose sum is 0. \n    '''\n    triplets=[]\n    for i in range(0,len(test_list)):\n        j=i+1\n        for j in range(i+1,len(test_list)):\n            k=j+1\n            for k in range(j+1,len(test_list)):\n                if test_list[i]+test_list[j]+test_list[k]==0:\n                    triplets.append((test_list[i],test_list[j],test_list[k]))\n    return triplets\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    test_list = [[1, 2], [1, 4], [3, 5]]\n    #return list(combinations(test_list, 2))\n    return list(combinations(test_list, 2))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    s = 0\n    result_list = []\n    for n in range(1,len(test_list)):\n        for i in combinations(test_list,n):\n            s = sum(i)\n            if s <= 5000:\n                result_list.append((s,i))\n    return result_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get all combinations of sum of length k.\n    comb = combinations(test_list, 2)\n    \n    # Print the obtained combinations.\n    for i in list(comb):\n        print(i, end=\" \")\n    print()\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(1,len(test_list)+1):\n        sum_list.extend(list(combinations(test_list,i)))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                sum_list.append(tuple(sorted([test_list[i], test_list[j]])))\n    return sum_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_tuple_list = list(combinations(test_list, 2))\n    return combinations_tuple_list\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Store the count of divisors \n    count = 0\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                count = count + 1\n            else: \n                count = count + 2\n    return(count) \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) : \n        if(n % i == 0) : \n            count = count + 1\n    if(count % 2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                cnt = cnt + 1\n            else:\n                cnt = cnt + 2\n    if cnt % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1) : \n        return 1\n    elif (n == 2) : \n        return 1\n    else : \n        return math.floor(n/2) + 1\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = 0\n    for i in range(1,n+1) : \n        if n % i == 0 : \n            a = a + 1\n    if a % 2 == 0 : \n        print('Number of divisors even : ',a)\n    else : \n        print('Number of divisors odd : ',a)\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count = count + 1\n    if count%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,int(n/2)+1):\n        if n%i==0:\n            count+=1\n    return(count)\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n/i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    if (length <= 1):\n        return 0\n    sum = 0\n    for i in range(length):\n        if i % 2!= 0:\n            for j in range(i, length):\n                print(arr[j])\n                sum += arr[j]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    output = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (j - i) % 2 == 0:\n                break\n            else:\n                output += sum(arr[i:j])\n    return output\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i) % 2 == 1:\n                res += sum(arr[i:j+1])\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i,n):\n            if((j - i) % 2!= 0):\n                sum += arr[j]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #base case:\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        #returns the sum of the odd length subarrays\n        return arr[0] + odd_length_sum(arr[2:])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Time Complexity = O(n^3)\n    # Space Complexity = O(n)\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    def returnSum(arr, n): \n        sum = 0\n        for i in range(0, n): \n            sum = sum + arr[i] \n        return sum\n    \n    total_sum = 0\n    n = len(arr) \n    for i in range(0, n): \n        total_sum = total_sum + returnSum(arr, n - i)\n    return total_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if (j-i+1)%2!=0:\n                print(arr[i:j+1])\n                print(\"\\n\")\n    return \"I am your father\"\nodd_length_sum([1, 3, 2, 6, -1, 4, 1, 8, 2])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if(j - i + 1 % 2 == 1):\n                result += sum(arr[i:j + 1])\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd_length_subarrays = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Copy your rgb_to_hsv function from the previous notebook here.\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Unpack tuple\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if s == 0:\n        return v, v, v\n    h = h % 360\n    h/=60\n    i = int(h)\n    f = h - i\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n    r, g, b = 0, 0, 0\n    if i == 0:\n        r, g, b = v, t, p\n    elif i == 1:\n        r, g, b = q, v, p\n    elif i == 2:\n        r, g, b = p, v, t\n    elif i == 3:\n        r, g, b = p, q, v\n    elif i == 4:\n        r, g, b = t, p, v\n    elif i == 5:\n        r, g, b = v, p, q\n    r, g, b = int(r * 255), int(g * 255), int(b * 255)\n    return r, g, b\n    \ndef rgb_to_yuv(r, g, b):\n    '''\n    Write a function to convert rgb color to yuv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import numpy as np\n    k = np.array([[0.2126, 0.7152, 0.0722],\n        [0.2126, 0.2126, 0.7152],\n        [0.7152, 0.2126, 0.0722]])\n    r, g, b = r/255.0, g/255.0, b/255.0\n    y = np.dot(k, [r, g, b])\n    y = np.round(y)\n    y = np.dot([[0.299, 0.587, 0.114],\n        [0.596, -0.275, -0.321],\n        [0.211, -0.523, 0.311]], y)\n    y = np.round(y)\n    y = np.dot([[16],\n        [128],\n        [128]], y)\n    y = y.flatten()\n    y = y.tolist()\n    return y[0], y[1], y[2]\n    \ndef yuv_to_rgb(y, u, v):\n    '''\n    Write a function to convert yuv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import numpy as np\n    k = np.array([[0.2126, 0.7152, 0.0722],\n        [0.2126, 0.2126, 0.7152],\n        [0.7152, 0.2126, 0.0722]])\n    y, u, v = y/255.0, u/255.0, v/255.0\n    y1 = np.dot([[1, 0, 1.14],\n        [1, -0.395, -0.581],\n        [1, 2.032, 0]], y)\n    y1 = np.round(y1)\n    y1 = np.dot([[1.055],\n        [1.0, -0.3485, -0.5514],\n        [1, 1.4016]], y1)\n    y1 = np.round(y1)\n    y1 = np.dot([[1.0],\n        [1, -0.4556, 0],\n        [1, 0.9228, 0]], y1)\n    y1 = np.round(y1)\n    u, v = u*(2/0.436), v*(2/0.615)\n    y2 = np.dot([[1, 0, 1.402],\n        [1, -0.581, -0.0714],\n        [1, -1.772, 0]], y)\n    y2 = np.round(y2)\n    y2 = np.dot([[1.055],\n        [1, -0.33, 0],\n        [1, 0.436, 0]], y2)\n    y2 = np.round(y2)\n    y2 = np.dot([[1.0],\n        [1, -0.4556, 0],\n        [1, 0.9228, 0]], y2)\n    y2 = np.round(y2)\n    u, v = u*(2/0.615), v*(2/0.615)\n    y = y1[0][0] + y2[0][0]\n    u = u + (y2[0][1] - y2[0][2])\n    v = v + (y1[0][2] - y1[0][1])\n    r, g, b = 0, 0, 0\n    if y>0.0031308:\n        r = 1.055 * (y**(1/2.4)) - 0.055\n    else:\n        r = 12.92 * y\n    r = r*255\n    r = int(r)\n    if u>0.0031308:\n        g = 1.055 * (u**(1/2.4)) - 0.055\n    else:\n        g = 12.92 * u\n    g = g*255\n    g = int(g)\n    if v>0.0031308:\n        b = 1.055 * (v**(1/2.4)) - 0.055\n    else:\n        b = 12.92 * v\n    b = b*255\n    b = int(b)\n    r, g, b = r/255.0, g/255.0, b/255.0\n    return r, g, b\n    \n    \ndef rgb_to_ycbcr(r, g, b):\n    '''\n    Write a function to convert rgb color to ycbcr color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    x = 0.412453*r + 0.35758*g + 0.180423*b\n    y = 0.212671*r + 0.71516*g + 0.072169*b\n    cb = -0.173633*r - 0.393571*g + 0.5*b\n    cr = 0.5*r - 0.418688*g - 0.081312*b\n    return x, y, cb, cr\n    \ndef ycbcr_to_rgb(x, y, cb, cr):\n    '''\n    Write a function to convert ycbcr color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = 1.16438*(x + 1.055*(y + 0.055))\n    g = 1.16438*(y - 0.055)\n    b = 1"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    color = [r,g,b]\n    iMax = max(color)\n    iMin = min(color)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return round(h,2), round(s,2), round(v,2)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    min_color = min(r, g, b)\n    max_color = max(r, g, b)\n    v = max_color\n    if min_color == max_color:\n        return 0.0, 0.0, v\n    s = (max_color - min_color) / max_color\n    dr = (max_color - r) / (max_color - min_color)\n    dg = (max_color - g) / (max_color - min_color)\n    db = (max_color - b) / (max_color - min_color)\n    if r == max_color:\n        h = db - dg\n    elif g == max_color:\n        h = 2.0 + dr - db\n    else:\n        h = 4.0 + dg - dr\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if even==[] or odd==[]:\n        return 1\n    else:\n        print(even,odd)\n        return even[0]*odd[0]\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod=1\n    for i in list1:\n        if i % 2 == 0:\n            prod*=i\n        else:\n            prod*=i\n    return prod\ndef mul_odd_even(list1):\n    '''\n    Write a function to find the product of odd and even number of a given list.\n    '''\n    prod=1\n    for i in list1:\n        if i % 2 == 0:\n            prod*=i\n        else:\n            prod*=i\n    return prod\ndef even_odd_sum(list1):\n    '''\n    Write a function to find the sum of all even and odd number of a given list.\n    '''\n    sum=0\n    for i in list1:\n        if i % 2 == 0:\n            sum+=i\n        else:\n            sum+=i\n    return sum\ndef min_num(list1):\n    '''\n    Write a function to find the minimum number of a given list.\n    '''\n    min_val=list1[0]\n    for i in list1:\n        if i < min_val:\n            min_val=i\n    return min_val\ndef max_num(list1):\n    '''\n    Write a function to find the maximum number of a given list.\n    '''\n    max_val=list1[0]\n    for i in list1:\n        if i > max_val:\n            max_val=i\n    return max_val\ndef min_num_index(list1):\n    '''\n    Write a function to find the minimum number and its index of a given list.\n    '''\n    min_val=list1[0]\n    min_index=0\n    for i in range(len(list1)):\n        if list1[i] < min_val:\n            min_val=list1[i]\n            min_index=i\n    return min_index\ndef max_num_index(list1):\n    '''\n    Write a function to find the maximum number and its index of a given list.\n    '''\n    max_val=list1[0]\n    max_index=0\n    for i in range(len(list1)):\n        if list1[i] > max_val:\n            max_val=list1[i]\n            max_index=i\n    return max_index\ndef sum_list(list1):\n    '''\n    Write a function to find the sum of all the numbers of a given list.\n    '''\n    sum=0\n    for i in list1:\n        sum+=i\n    return sum\ndef mean(list1):\n    '''\n    Write a function to find the mean of a given list.\n    '''\n    sum=0\n    for i in list1:\n        sum+=i\n    return sum/len(list1)\ndef median(list1):\n    '''\n    Write a function to find the median of a given list.\n    '''\n    list1.sort()\n    if len(list1) % 2 == 0:\n        return (list1[len(list1)//2]+list1[len(list1)//2-1])/2\n    else:\n        return list1[len(list1)//2]\ndef mode(list1):\n    '''\n    Write a function to find the mode of a given list.\n    '''\n    freq_dict={}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i]+=1\n        else:\n            freq_dict[i]=1\n    max_freq=0\n    mode_val=0\n    for i in freq_dict:\n        if freq_dict[i] > max_freq:\n            max_freq=freq_dict[i]\n            mode_val=i\n    return mode_val\ndef freq(list1):\n    '''\n    Write a function to find the frequency of each element of a given list.\n    '''\n    freq_dict={}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i]+=1\n        else:\n            freq_dict[i]=1\n    return freq_dict\ndef duplicate(list1):\n    '''\n    Write a function to find if the list contains a duplicate number.\n    '''\n    freq_dict={}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i]+=1\n        else:\n            freq_dict[i]=1\n    if len(freq_dict) == len(list1):\n        return False\n    else:\n        return True\ndef palindrome(list1):\n    '''\n    Write a function to check whether the given list is a palindrome or not.\n    '''\n    str1=\"\"\n    for i in list1:\n        str1+=i\n    str1=str1.lower()\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\ndef prime(list1):\n    '''\n    Write a function to check whether the given list is a prime or not.\n    '''\n    flag=0\n    for i in list1:\n        if i > 1:\n            for j in range(2,i):\n                if(i % j) == 0:\n                    flag=1\n                    break\n        else:\n            flag=1\n        if flag == 0:\n            return True\n        else:\n            return False\ndef unique(list1):\n    '''\n    Write a function to check whether the given list contains unique or not.\n    '''\n    freq_dict={}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i]+=1\n        else:\n            freq_dict[i]=1\n    if len(freq_dict) == len(list1):\n        return True\n    else:\n        return False\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove all the duplicate numbers from a given list.\n    '''\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef remove_element(list1,val):\n    '''\n    Write a function to remove the given element from a given list.\n    '''\n    list1.remove(val)\n    return list1\ndef merge_sort(list1):\n    '''\n    Write a function to merge sort the given list.\n    '''\n    if len(list1) <= 1:\n        return list1\n    mid = len(list1)//2\n    left = list1[:mid]\n    right = list1[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return list(merge(left,right))\ndef merge(left,right):\n    '''\n    Write a function to merge two lists.\n    '''\n    result=[]\n    i=0\n    j=0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i+=1\n        else:\n            result.append(right[j])\n            j+=1\n    result+=left[i:]\n    result+=right[j:]\n    return result\ndef binary_search(list1,val):\n    '''\n    Write a function to search the value in the given list using binary search.\n    '''\n    first=0\n    last=len(list1)-1\n    while first <= last:\n        mid=(first+last)//2\n        if list1[mid] == val:\n            return mid\n        elif val < list1[mid]:\n            last=mid-1\n        else:\n            first=mid+1\n    return -1\ndef linear_search(list1,val):\n    '''\n    Write a function to search the value in the given list using linear search.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == val:\n            return i\n    return -1\ndef binary_search_recursive(list1,val):\n    '''\n    Write a function to search the value in the given list using binary search (recursive).\n    ''"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for x in list1:\n        if x%2 == 0:\n            product *= x\n        else:\n            product *= x\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod1, prod2 = 1, 1\n    for x in list1:\n        if x%2 == 0:\n            prod1 = prod1*x\n        else:\n            prod2 = prod2*x\n    return prod1, prod2\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    product_even_odd = []\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    \n    for i in even:\n        for j in odd:\n            product_even_odd.append(i*j)\n    \n    print(max(product_even_odd))\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            product *= i\n        else:\n            pass\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod=1\n    for i in list1:\n        if i%2==0:\n            prod=prod*i\n        else:\n            continue\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even_odd = 1\n    even = 0\n    odd = 0\n    for number in list1:\n        if number % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even >= 1 and odd >= 1:\n        product_even_odd = even * odd\n    return product_even_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even_odd = 1\n    for i in list1:\n        if i%2 == 0:\n            product_even_odd *= i\n        else:\n            product_even_odd *= i\n    return product_even_odd\nlist1 = [1,2,3,4,5]\nprint(mul_even_odd(list1))"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i%2 == 0:\n            product *= i\n        else:\n            pass\n    return product\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = []\n    for char in test_str:\n        if char.isdigit():\n            test_list.append(int(char))\n    return tuple(test_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp = test_str.replace('(', '')\n    temp = temp.replace(')', '')\n    temp = temp.replace(',', '')\n    temp = temp.split(' ')\n    temp = tuple(map(int, temp))\n    return temp\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # test_str = test_str.strip('(').strip(')')\n    # list_str = test_str.split(', ')\n    # list_int = []\n    # for num in list_str:\n    #     list_int.append(int(num))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    for i in test_str:\n        i.replace('(', '')\n        i.replace(')', '')\n        i = i.split(',')\n        new_tuple = []\n        for num in i:\n            new_tuple.append(int(num))\n        new_tuple = tuple(new_tuple)\n    print(new_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.split(',')\n    int_list = []\n    for i in test_list:\n        int_list.append(int(i))\n    return tuple(int_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(''.join(test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.replace('(','').replace(')','').split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def split_str(s):\n        return map(int, s.split(','))\n    return tuple(split_str(test_str))\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    lo = 0\n    hi = n - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if x < a[mid]:\n            hi = mid - 1\n        elif x > a[mid]:\n            lo = mid + 1\n        else:\n            return mid + 1\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a)\n    while r - l > 1:\n        mid = (l + r) // 2\n        if a[mid] <= x:\n            l = mid\n        else:\n            r = mid\n    return l\ndef find_first_greater_than_k(a, k):\n    '''\n    Find the first index of a[i] such that a[i] > k. If no such element exists, the function should return n+1. It is guaranteed that all the elements in the array are distinct.\n    '''\n    l = 0\n    r = len(a)\n    while r - l > 1:\n        mid = (l + r) // 2\n        if a[mid] <= k:\n            l = mid\n        else:\n            r = mid\n    return r\ndef first_equal_element_right(a, x):\n    '''\n    Given an array of distinct elements and a value x, find the first index i such that a[i] == x. Return -1 if no such element exists.\n    '''\n    l = 0\n    r = len(a)\n    while r - l > 1:\n        mid = (l + r) // 2\n        if a[mid] == x:\n            r = mid\n        elif a[mid] < x:\n            l = mid\n        else:\n            r = mid\n    if a[l] == x:\n        return l\n    elif a[r] == x:\n        return r\n    return -1\ndef is_majority_element(a, n, x):\n    '''\n    Given an array of size n, find if the majority element occurs more than n/2 times. The majority element is the element that appears more than n/2 times.\n    '''\n    a.sort()\n    l = 0\n    r = len(a) - 1\n    while r - l > 1:\n        mid = (l + r) // 2\n        if a[mid] == x:\n            l = mid\n        elif a[mid] < x:\n            l = mid\n        else:\n            r = mid\n    return r - l + 1 <= n // 2\ndef find_longest_subsequence(a, k):\n    '''\n    Given an array of numbers and a value K, find the length of the longest subsequence such that every element in the subsequence is less than K.\n    '''\n    a.sort()\n    l = 0\n    r = len(a) - 1\n    while r - l > 1:\n        mid = (l + r) // 2\n        if a[mid] > k:\n            l = mid\n        else:\n            r = mid\n    return r - l + 1\ndef find_longest_subsequence_with_given_difference(a, k):\n    '''\n    Given an array of numbers and a value K, find the length of the longest subsequence such that the absolute difference between any two elements is less than or equal to K.\n    '''\n    a.sort()\n    l = 0\n    r = len(a) - 1\n    while r - l > 1:\n        mid = (l + r) // 2\n        if a[mid] - a[mid - 1] > k:\n            r = mid\n        else:\n            l = mid\n    return r - l + 1\ndef count_islands(grid):\n    '''\n    Given a 2-D grid, each cell is either a wall 'W', an island 'I', or empty '0' (the number zero), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n    '''\n    def dfs(r, c, visited, grid):\n        visited[r][c] = True\n        if r - 1 >= 0 and not visited[r - 1][c] and grid[r - 1][c] == \"1\":\n            dfs(r - 1, c, visited, grid)\n        if r + 1 < len(grid) and not visited[r + 1][c] and grid[r + 1][c] == \"1\":\n            dfs(r + 1, c, visited, grid)\n        if c - 1 >= 0 and not visited[r][c - 1] and grid[r][c - 1] == \"1\":\n            dfs(r, c - 1, visited, grid)\n        if c + 1 < len(grid[0]) and not visited[r][c + 1] and grid[r][c + 1] == \"1\":\n            dfs(r, c + 1, visited, grid)\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    num_islands = 0\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            if not visited[r][c] and grid[r][c] == \"1\":\n                num_islands += 1\n                dfs(r, c, visited, grid)\n    return num_islands\ndef swap_columns(a, b):\n    '''\n    Given two arrays A and B of size N each, where each element of array A is an integer between 0 to 9 representing the digits of a number and each element of array B is an integer between 0 to 9 representing the digits of another number. Write a function to add the two numbers and return the sum as an array of digits.\n    '''\n    s = [0] * 10\n    for i in range(len(a)):\n        s[a[i]] += 1\n    for i in range(len(b)):\n        s[b[i]] += 1\n    carry = 0\n    for i in range(len(s)):\n        if s[i]!= 0:\n            carry += 1\n    ans = [0] * len(s)\n    i = len(s) - 1\n    while i >= 0:\n        ans[i] = s[i] + carry\n        carry = ans[i] // 10\n        ans[i] %= 10\n        i -= 1\n    return ans\ndef can_reach_end(a):\n    '''\n    Given an array of N positive integers. The task is to find the minimum number of jumps required to reach the end of the array if a jump of value x is allowed at most.\n    '''\n    jumps = 0\n    reach = 0\n    a.append(0)\n    for i in range(len(a)):\n        if reach < i:\n            reach = i\n            jumps += 1\n        elif reach < len(a) - 1:\n            reach = a[reach]\n    return jumps\ndef find_smallest_missing_positive(a):\n    '''\n    Given an array of n distinct integers where each integer is between 1 and n,\n    find the smallest positive integer that is missing from the array.\n    '''\n    a.sort()\n    if a[0] > 1:\n        return 1\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] > 1:\n            return a[i - 1] + 1\n    return len(a) + 1\ndef find_longest_subarray_with_0_sum(a):\n    '''\n    Given an array of numbers, find the length of the longest subarray whose sum is zero.\n    '''\n    l = 0\n    r = 0\n    sum = 0\n    while r < len(a):\n        sum += a[r]\n        while sum!= 0:\n            sum -= a[l]\n            l += 1\n        r += 1\n    return r - l\ndef count_unique_elements(a):\n    '''\n    Given an array of numbers, find the count of distinct elements in the array.\n    '''\n    return len(set(a))\ndef count_non_distinct_elements(a):\n    '''\n    Given an array of numbers, find the count of non-distinct elements in the array.\n    '''\n    d = set()\n    count = 0\n    for i in range(len(a)):\n        if a[i] not in d:\n            d.add(a[i])\n        else:\n            count += 1\n    return len(a) - count\ndef find_median(a):\n    '''\n    Given an array of N numbers. The task is to find the median of the array. The median is defined as the middle element in case o"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a)\n    while l < r:\n        mid = (l + r)//2\n        if x > a[mid]:\n            l = mid + 1\n        else:\n            r = mid\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)):\n        if x >= a[i]:\n            a.insert(i, x)\n            return\n    a.append(x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i < len(a):\n        return i\n    else:\n        return None\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # count the number of elements smaller than x\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        # x is larger than all elements in a, so right insertion point is len(a)\n        return len(a)\n    if a[i] == x:\n        # x is already present in a, so right insertion point is the leftmost index of x\n        return i\n    # x is smaller than the leftmost element of a, so right insertion point is i\n    return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    #Base Case\n    if len(a) == 0:\n        return 0\n    #Recursive Case\n    if x > a[len(a)-1]:\n        return len(a)\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i, item in enumerate(a):\n        if x < item:\n            return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect_left(a, x) returns an index\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = re.compile('ab{3}')\n    result = pat.search(text)\n    print(result.group())\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = re.compile(r'ab{3}')\n    m = a.search(text)\n    if m:\n        return 'Found match!'\n    return 'Match not found'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return \"Match Found!\"\n    else:\n        return(\"Match not found!\")\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = re.compile(r\"ab{3}\")\n    mo = regex.search(text)\n    if mo:\n        return mo.group()\n    else:\n        return -1\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab{3}a\")\n    if pattern.search(text):\n        print(\"Matching\")\n    else:\n        print(\"Not Matching\")\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = re.compile(r'ab{3}')\n    matches = re.findall(pat, text)\n    return len(matches)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = r'ab{3}'\n    if re.search(a, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    def is_string_match(string):\n        if re.match(\"a.{3}b\", string) == None:\n            return False\n        return True\n    return is_string_match(text)\nprint(text_match_three(\"ab\"))\nprint(text_match_three(\"abc\"))\nprint(text_match_three(\"ac\"))\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.{1}\\s*b.{1}\\s*b.{1}\\s*b')\n    match = pattern.search(text)\n    print(match)\n    return bool(match)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = \"ab{3}\"\n    result = re.search(pattern, text)\n    if result:\n        return \"Found a match!\"\n    else:\n        return(\"Not matched!\")\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = tuple(test_str)\n    return tup\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple += test_str\n    print(new_tuple)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    new_str = ''\n    if isinstance(test_str, str) == True:\n        for char in test_str:\n            if char.isalpha() == True:\n                new_str += char\n        test_str = new_str\n    if isinstance(test_list, list) == True:\n        new_list = []\n        for item in test_list:\n            if isinstance(item, int) == True:\n                new_list.append(item)\n        test_list = new_list\n    \n    new_tuple = tuple(test_list)\n    \n    if test_str == '' or test_list == []:\n        new_tuple = 'Empty'\n    else:\n        new_tuple = new_tuple\n    \n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_str) == 0:\n        return tuple()\n    elif len(test_list) == 0:\n        return tuple(test_str)\n    else:\n        return test_list + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return(tuple(test_list), test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    #return tuple(test_list) + (test_str,)\n    return tuple(test_list) + tuple([test_str])\n    #return tuple(test_list) + (test_str,)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n    \n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #Step 1: Define your function\n    # It should accept two parameters: string and list\n    # Hint: You need to use tuple() to create a tuple from a list\n    def new_tuple(test_list, test_str):\n    #Step 2: Create a new tuple from the given list and string\n        new_tuple = tuple(test_list) + tuple(test_str)\n    #Step 3: Print the new tuple\n    print(new_tuple)\n    \n    #Step 4: Call your function\n    new_tuple(test_list, test_str)\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index,number in enumerate(nums):\n        if index % 2 == 0:\n            if number % 2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if(len(nums) < 2):\n        return True\n    for i in range(0,len(nums),2):\n        if(nums[i]%2!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums)%2 == 0:\n        return \"List is even\"\n    else:\n        return \"List is odd\"\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) % 2 == 0:\n        even = True\n        for num in nums[::2]:\n            if num % 2!= 0:\n                even = False\n                break\n        return even\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index,value in enumerate(nums):\n        if index % 2 == 0 and value % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    new_list = []\n    for i in nums:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums = [1,2,3,4,5,6,7,8,9]\n    for i in range(len(nums)):\n        if (i % 2 == 0):\n            print(nums[i], end=\" \")\n            if (nums[i] % 2!= 0):\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True\nprint(even_position([5, 2, 5, 2, 1, 2]))\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            pass\n        else:\n            new_tup = new_tup + (i,)\n    return new_tup\n    \nprint(remove_nested([(1, 2), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)]))"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = [x for x in test_tup if x!= ('A', 'B', 'C')]\n    test_tup = [x for x in test_tup if x!= ('A', 'B')]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # iterate over tuple\n    # append the nested tuples to a new tuple list\n    # convert the list to a tuple and return the tuple\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # return [elem for elem in test_tup if elem not in test_tup]\n    test_list = []\n    for elem in test_tup:\n        if elem not in test_tup:\n            test_list.append(elem)\n    return tuple(test_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # test_tup = (1, 2, (3, (4, 5)), 5)\n    # print(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup_cp = test_tup[:]\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            test_tup_cp[i] = ()\n    return tuple(test_tup_cp)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return(tuple(i for i in test_tup if type(i) == tuple))\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for x in test_tup if x[0]!= x[1]]\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # this is a nested list comprehension\n    return [i for i in test_tup if type(i)!= tuple]\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        if type(i) == type([]): \n            count += 1\n    return count \n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)): \n        if type(input_list[i]) == type([]): \n            count += 1\n    return count \n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in input_list:\n        if type(i)==type([]):\n            count+=1\n    return count\n    \ndef count_numbers(input_list): \n    '''\n    Write a python function to count the number of numbers in a given number of lists.\n    '''\n    count=0\n    for i in input_list:\n        if type(i)==type([]):\n            count+=len(i)\n        else:\n            count+=1\n    return count\n    \ndef count_strings(input_list): \n    '''\n    Write a python function to count the number of strings in a given number of lists.\n    '''\n    count=0\n    for i in input_list:\n        if type(i)==type([]):\n            count+=len(i)\n        else:\n            if type(i)==type(\"string\"):\n                count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return sum(isinstance(i, list) for i in input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if type(i) is list:\n            counter += 1\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count_list = 0\n    for i in input_list:\n        if type(i) == list:\n            count_list += 1\n    return count_list\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    l=0\n    r=n-1\n    while(l<=r):\n        mid = (l+r)//2\n        if arr[mid] == x:\n            if arr[mid] == arr[n-1]:\n                return n-1\n            elif arr[mid]>arr[n-1]:\n                l=mid+1\n            elif arr[mid]<arr[n-1]:\n                r=mid-1\n        elif arr[mid]>x:\n            r=mid-1\n        elif arr[mid]<x:\n            l=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if x == arr[i]:\n            return i\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x<arr[0] or x>arr[len(arr)-1]:\n        return -1\n    i=0\n    while i<len(arr)-1:\n        if x<arr[i]:\n            i+=1\n        elif x>arr[i] and x<arr[i+1]:\n            return i+1\n        else:\n            i+=1\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    l,r = 0,len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if x > arr[mid]:\n            l = mid+1\n        elif x < arr[mid]:\n            r = mid-1\n        else:\n            if mid == len(arr)-1 or arr[mid]!= arr[mid+1]:\n                return mid\n            else:\n                l = mid+1\n    return -1\n    \ndef binary_search(arr,x):\n    '''\n    Write a python function to search an element in a sorted array using binary search algorithm.\n    '''\n    if len(arr) == 0:\n        return -1\n    l,r = 0,len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if x > arr[mid]:\n            l = mid+1\n        elif x < arr[mid]:\n            r = mid-1\n        else:\n            if mid == len(arr)-1 or arr[mid]!= arr[mid+1]:\n                return mid\n            else:\n                l = mid+1\n    return -1\n    \ndef first_occurance(arr,x):\n    '''\n    Write a python function to find the first occurrence of an element in an array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    l,r = 0,len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if x < arr[mid]:\n            r = mid-1\n        elif x > arr[mid]:\n            l = mid+1\n        else:\n            if mid == 0 or arr[mid]!= arr[mid-1]:\n                return mid\n            else:\n                r = mid-1\n    return -1\n    \ndef last_occurance(arr,x):\n    '''\n    Write a python function to find the last occurrence of an element in an array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    l,r = 0,len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if x < arr[mid]:\n            r = mid-1\n        elif x > arr[mid]:\n            l = mid+1\n        else:\n            if mid == len(arr)-1 or arr[mid]!= arr[mid+1]:\n                return mid\n            else:\n                l = mid+1\n    return -1\n    \ndef smallest_element(arr):\n    '''\n    Write a python function to find the smallest element in an array.\n    '''\n    if len(arr) == 0:\n        return -1\n    arr.sort()\n    return arr[0]\n    \ndef greatest_element(arr):\n    '''\n    Write a python function to find the greatest element in an array.\n    '''\n    if len(arr) == 0:\n        return -1\n    arr.sort()\n    return arr[len(arr)-1]\n    \ndef count_occurance(arr,x):\n    '''\n    Write a python function to count the number of occurance of an element in an array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    count = 0\n    l,r = 0,len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if x < arr[mid]:\n            r = mid-1\n        elif x > arr[mid]:\n            l = mid+1\n        else:\n            count += 1\n            if mid == len(arr)-1 or arr[mid]!= arr[mid+1]:\n                return count\n            else:\n                r = mid-1\n    return -1\n    \ndef count_left_occurance(arr,x):\n    '''\n    Write a python function to count the number of occurance of an element in an array on left side of the array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    count = 0\n    l,r = 0,len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if x < arr[mid]:\n            r = mid-1\n        elif x > arr[mid]:\n            l = mid+1\n        else:\n            if mid == 0 or arr[mid]!= arr[mid-1]:\n                return count\n            else:\n                l = mid+1\n                count += 1\n    return -1\n    \ndef count_right_occurance(arr,x):\n    '''\n    Write a python function to count the number of occurance of an element in an array on right side of the array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    count = 0\n    l,r = 0,len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if x < arr[mid]:\n            r = mid-1\n        elif x > arr[mid]:\n            l = mid+1\n        else:\n            if mid == len(arr)-1 or arr[mid]!= arr[mid+1]:\n                return count\n            else:\n                l = mid+1\n                count += 1\n    return -1\n    \ndef find_first_elements(arr,x):\n    '''\n    Write a python function to find the first occurrence of an element in an array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    l,r = 0,len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if x < arr[mid]:\n            r = mid-1\n        elif x > arr[mid]:\n            l = mid+1\n        else:\n            if mid == 0 or arr[mid]!= arr[mid-1]:\n                return mid\n            else:\n                l = mid+1\n    return -1\n    \ndef find_last_elements(arr,x):\n    '''\n    Write a python function to find the last occurrence of an element in an array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    l,r = 0,len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if x < arr[mid]:\n            r = mid-1\n        elif x > arr[mid]:\n            l = mid+1\n        else:\n            if mid == len(arr)-1 or arr[mid]!= arr[mid+1]:\n                return mid\n            else:\n                l = mid+1\n    return -1\n    \ndef remove_duplicate_elements(arr):\n    '''\n    Write a python function to remove duplicate elements from an array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    l,r = 0,1\n    while r < len(arr):\n        if arr[l] == arr[r]:\n            r += 1\n        else:\n            arr[l+1] = arr[r]\n            l += 1\n            r += 1\n    return l+1\n    \ndef find_minimum_difference(arr):\n    '''\n    Write a python function to find the minimum difference between an element of an array and the next element.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    diff = float('inf')\n    l,r = 0,len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if arr[mid] - arr[mid-1] < diff:\n            diff = arr[mid] - arr[mid-1]\n        if arr[mid] - arr[mid+1] < diff:\n            diff = arr[mid] - arr[mid+1]\n        if mid == len(arr)-1 or arr[mid]!= arr[mid+1]:\n            return diff\n        else:\n            l = mid+1\n    return -1\n    \ndef find_number_of_elements_greater_than_or_equal_to_x(arr,x):\n    '''\n    Write a python function to find the number of elements in an array that are greater than or equal to a given number.\n    ''"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    i=0\n    while i<n:\n        if arr[i]==x:\n            if i==0:\n                print(i)\n            else:\n                i-=1\n        i+=1\n    print(i)\nlast([1,2,3,4,5,5,5,5,6,7],5)\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while(low<=high):\n        mid=(low+high)//2\n        if arr[mid]==x:\n            if x==arr[high] and mid==high:\n                return high\n            elif x==arr[low] and mid==low:\n                return low\n            else:\n                if arr[mid]<x:\n                    low=mid+1\n                else:\n                    high=mid-1\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            high=mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        mid = (i + j)//2\n        if arr[mid] <= x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    if arr[j] == x:\n        return j\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1,-1,-1):\n        if x == arr[i]:\n            return i\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left + right)//2\n        if x == arr[mid]:\n            if mid == len(arr)-1 or x!= arr[mid+1]:\n                return mid\n            else:\n                left = mid + 1\n        elif x < arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    last_pos = -1\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = (low+high)//2\n        if x>arr[mid]:\n            low = mid+1\n        elif x<arr[mid]:\n            high = mid-1\n        else:\n            if mid==len(arr)-1 or x!=arr[mid+1]:\n                last_pos = mid\n                break\n            else:\n                high = mid-1\n    return last_pos\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = '^.*a.*b$'\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"a.*?b\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        # print(match.start())\n        # print(match.end())\n        # print(match.span())\n        print(\"\\n\")\n        \ndef text_remove_characters(text):\n    '''\n    Write a function that takes in a string and removes all of the vowels from it.\n    '''\n    pattern = re.compile(r\"[aeiou]\")\n    print(re.sub(pattern,\"\",text))\n    \ndef text_replace_match_string(text):\n    '''\n    Write a function that takes in a string and replaces any instance of the character 'd' with the character'm'. \n    '''\n    pattern = re.compile(r\"d\")\n    print(re.sub(pattern,\"m\",text))\n    \ndef text_find_replace_match(text):\n    '''\n    Write a function that takes in a string and replaces any instance of the character '.' with a new character 'd'. \n    '''\n    pattern = re.compile(r\".\")\n    print(re.sub(pattern,\"d\",text))\n    \ndef text_split_string(text):\n    '''\n    Write a function that takes in a string and splits it into multiple lines at the '.' character.\n    '''\n    pattern = re.compile(r\".\")\n    print(re.split(pattern,text))\n    \ndef text_find_match_string(text):\n    '''\n    Write a function that takes in a string and searches for the characters 'h' and 'e'. \n    '''\n    pattern = re.compile(r\"h.e\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'c' and 'f'. \n    '''\n    pattern = re.compile(r\"[c-f]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'f', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^ac]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string_with_space(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'e', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^ac]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string_with_space_or_dash(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'e', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^a-zA-Z0-9]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string_with_space_or_dash_or_dash(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'e', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^a-zA-Z0-9\\s]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string_with_space_or_dash_or_dash_or_dash(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'e', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^a-zA-Z0-9\\s\\d]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string_with_space_or_dash_or_dash_or_dash_or_dash(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'e', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^a-zA-Z0-9\\s\\d\\#]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string_with_space_or_dash_or_dash_or_dash_or_dash_or_dash(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'e', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^a-zA-Z0-9\\s\\d\\#\\%]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string_with_space_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'e', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^a-zA-Z0-9\\s\\d\\#\\%\\$]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string_with_space_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'e', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^a-zA-Z0-9\\s\\d\\#\\%\\$\\%\\&]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string_with_space_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'e', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^a-zA-Z0-9\\s\\d\\#\\%\\$\\%\\&\\*]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string_with_space_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'e', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^a-zA-Z0-9\\s\\d\\#\\%\\$\\%\\&\\*\\^]\")\n    print(pattern.findall(text))\n    \ndef text_match_literal_character_in_string_with_space_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash_or_dash(text):\n    '''\n    Write a function that takes in a string and searches for any characters between the range of 'a' and 'e', not including the range 'a' and 'c'. \n    '''\n    pattern = re.compile(r\"[^"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = \"a.*b\"\n    result = re.search(pattern, text)\n    print(result)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return 'a.*?b'\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_starta = re.compile(r'a.*?b')\n    print(text_starta.match(text))\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search(r'a\\S*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = r\"a.*b\"\n    if re.search(x,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.compile(r\"a.*b$\").search(text)\n    if result:\n        return True\n    return False\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = \"^a.*b$\"\n    if re.search(regex,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r\"a.*?b$\"\n    if re.search(regex, text):\n        return True\n    return False\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    #print(sum(dict.values()))\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s = 0\n    for i in dict:\n        s += i\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    #Add code here\n    result = 0\n    for key in dict.keys():\n        result += dict[key]\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k in dict:\n        sum += dict[k]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum = sum + item\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summ = 0\n    for value in dict.values():\n        summ += value\n    return summ\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key,value in dict.items():\n        total += value\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i%2 == 1):\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(l,r+1))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    for i in range(n+1): \n        if i%2==1: \n            print(i, end=\" \")\n    return\n    \n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(n):\n        if i%2==1:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([x for x in range(n) if x % 2!= 0])\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = input().split()\n    l, r = int(l), int(r)\n    return sum(list(filter(lambda x: x % 2!= 0, range(l, r + 1))))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for num in range(n):\n        if num % 2 == 0:\n            continue\n        total += num\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = input('Enter the range (l and r) : ').split()\n    l = int(l)\n    r = int(r)\n    ans = sum(range(l, r + 1))\n    return ans\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n >= 1:\n        sum = 0\n        for i in range(1,n+1,2):\n            sum += i\n        return(sum)\n    else:\n        return(\"Incorrect input! Please enter a positive integer!\")\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    for i in range(n+1):\n        if i%2!= 0:\n            print(i)\n    sum = 0\n    for i in range(n+1):\n        if i%2!= 0:\n            sum += i\n    print(sum)\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum = sum + num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n >> d\n    n = n << 32 - d\n    return n + ((1 << d) - 1)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert(n>0), \"Input number must be positive.\"\n    assert(d<32), \"Input d must be less than 32.\"\n    mask = (1<<d) - 1\n    n &= mask\n    return (n << d) | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    '''\n    leetcode:https://leetcode.com/problems/rotate-image/\n    '''\n    for i in range(d):\n        temp = n\n        n = n>>1\n        n = n | temp<<31\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def split_binary(n):\n        return [int(d) for d in bin(n)[2:].zfill(32)]\n    \n    n=split_binary(n)\n    d=split_binary(d)\n    return int(\"\".join([str(elem) for elem in n[d:]]+[str(elem) for elem in n[:d]]),2)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n<0:\n        n = int('{0:032b}'.format(n)[::-1], 2)\n        n = ~n + 1\n    else:\n        n = int('{0:032b}'.format(n)[::-1], 2)\n    if n<0:\n        return int('{0:032b}'.format(n)[::-1], 2)\n    else:\n        return n\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32-d)))&0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (2 ** d) - 1\n    bit_mask = (2 ** 32) - 1\n    return ((n << d) | (n >> (32 - d))) & bit_mask\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    r = n>>d | n<<(32-d)\n    return r&0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert isinstance(d,int) and 0 <= d <= 32, \"The given d should be an integer in [0,32]\"\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = ''.join(text.split())\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'[\\s+]', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile(r'\\s+')\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_all_capitals(text):\n    '''\n    Write a function to remove all capital letters from a string.\n    '''\n    text = text.lower()\n    return text\ndef remove_all_dashes(text):\n    '''\n    Write a function to remove all dashes from a string.\n    '''\n    text = text.replace(\"-\", \"\")\n    return text\ndef remove_all_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    text = text.replace(\"0\", \"\")\n    text = text.replace(\"1\", \"\")\n    text = text.replace(\"2\", \"\")\n    text = text.replace(\"3\", \"\")\n    text = text.replace(\"4\", \"\")\n    text = text.replace(\"5\", \"\")\n    text = text.replace(\"6\", \"\")\n    text = text.replace(\"7\", \"\")\n    text = text.replace(\"8\", \"\")\n    text = text.replace(\"9\", \"\")\n    return text\ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    text = text.replace(\"-\", \"\")\n    text = text.replace(\".\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"?\", \"\")\n    return text\ndef is_word_uppercase(text):\n    '''\n    Write a function to check if a string is all uppercase.\n    '''\n    if text.isupper():\n        return True\n    return False\ndef is_word_lowercase(text):\n    '''\n    Write a function to check if a string is all lowercase.\n    '''\n    if text.islower():\n        return True\n    return False\ndef is_word_capitalized(text):\n    '''\n    Write a function to check if a string is capitalized.\n    '''\n    if text.istitle():\n        return True\n    return False\ndef is_word_titlecased(text):\n    '''\n    Write a function to check if a string is titlecased.\n    '''\n    if text.istitle():\n        return True\n    return False\ndef is_word_lowercased(text):\n    '''\n    Write a function to check if a string is lowercased.\n    '''\n    if text.islower():\n        return True\n    return False\ndef is_word_alphabet(text):\n    '''\n    Write a function to check if a string is alphabet.\n    '''\n    for letter in text:\n        if letter.isalpha():\n            return True\n    return False\ndef is_word_number(text):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    if text.isdigit():\n        return True\n    return False\ndef is_word_empty(text):\n    '''\n    Write a function to check if a string is empty.\n    '''\n    if text.isspace():\n        return True\n    return False\ndef is_word_titlecase(text):\n    '''\n    Write a function to check if a string is titlecase.\n    '''\n    if text.istitle():\n        return True\n    return False\ndef is_word_numeric(text):\n    '''\n    Write a function to check if a string is numeric.\n    '''\n    if text.isnumeric():\n        return True\n    return False\ndef is_word_alphanumeric(text):\n    '''\n    Write a function to check if a string is alphanumeric.\n    '''\n    if text.isalnum():\n        return True\n    return False\ndef is_word_spaces(text):\n    '''\n    Write a function to check if a string is a spaces.\n    '''\n    if text.isspace():\n        return True\n    return False\ndef is_word_lowercase_or_digit(text):\n    '''\n    Write a function to check if a string is lowercase or a digit.\n    '''\n    if text.islower() or text.isdigit():\n        return True\n    return False\ndef is_word_letters_or_numeric(text):\n    '''\n    Write a function to check if a string is a letters or a number.\n    '''\n    if text.isalpha() or text.isdigit():\n        return True\n    return False\ndef is_word_nonletters_or_numeric(text):\n    '''\n    Write a function to check if a string is a nonletters or a number.\n    '''\n    if text.isalpha() or text.isnumeric():\n        return True\n    return False\ndef is_word_nonletters_or_spaces(text):\n    '''\n    Write a function to check if a string is a nonletters or a space.\n    '''\n    if text.isalpha() or text.isspace():\n        return True\n    return False\ndef is_word_lowercase_or_spaces(text):\n    '''\n    Write a function to check if a string is lowercase or a space.\n    '''\n    if text.islower() or text.isspace():\n        return True\n    return False\ndef is_word_capitalized_or_spaces(text):\n    '''\n    Write a function to check if a string is capitalized or a space.\n    '''\n    if text.istitle() or text.isspace():\n        return True\n    return False\ndef is_word_lowercased_or_spaces(text):\n    '''\n    Write a function to check if a string is lowercased or a space.\n    '''\n    if text.islower() or text.isspace():\n        return True\n    return False\ndef is_word_uppercased_or_spaces(text):\n    '''\n    Write a function to check if a string is uppercased or a space.\n    '''\n    if text.isupper() or text.isspace():\n        return True\n    return False\ndef is_word_lowercase_or_uppercase(text):\n    '''\n    Write a function to check if a string is lowercase or uppercase.\n    '''\n    if text.islower() or text.isupper():\n        return True\n    return False\ndef is_word_uppercase_or_titlecased(text):\n    '''\n    Write a function to check if a string is uppercase or titlecased.\n    '''\n    if text.isupper() or text.istitle():\n        return True\n    return False\ndef is_word_lowercase_or_titlecased(text):\n    '''\n    Write a function to check if a string is lowercase or titlecased.\n    '''\n    if text.islower() or text.istitle():\n        return True\n    return False\ndef is_word_capitalized_or_titlecased(text):\n    '''\n    Write a function to check if a string is capitalized or titlecased.\n    '''\n    if text.istitle() or text.isupper():\n        return True\n    return False\ndef is_word_lowercased_or_titlecased(text):\n    '''\n    Write a function to check if a string is lowercased or titlecased.\n    '''\n    if text.istitle() or text.islower():\n        return True\n    return False\ndef is_word_lowercased_or_uppercased(text):\n    '''\n    Write a function to check if a string is lowercased or uppercased.\n    '''\n    if text.islower() or text.isupper():\n        return True\n    return False\ndef is_word_capitalized_or_uppercased(text):\n    '''\n    Write a function to check if a string is capitalized or uppercased.\n    '''\n    if text.isupper() or text.istitle():\n        return True\n    return False\ndef is_word_uppercase_or_lowercase(text):\n    '''\n    Write a function to check if a string is uppercased or lowercased.\n    '''\n    if text.isupper() or text.islower():\n        retur"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s\", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r\"\\s+\", \"\", text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return''.join(text.split())\ndef has_vowels(text):\n    '''\n    Write a function to check whether a string contains Vowels or not.\n    '''\n    #return bool(re.search(r'[aeiouAEIOU]',text, re.I))\n    vowels = 'aeiouAEIOU'\n    for c in text:\n        if c in vowels:\n            return True\n    return False\ndef pig_latin_word(word):\n    '''\n    Write a function to convert a word to pig latin.\n    '''\n    first_letter = word[0]\n    rest_of_word = word[1:]\n    return rest_of_word + first_letter + 'ay'\ndef pig_latin_sentence(sentence):\n    '''\n    Write a function to convert a sentence to pig latin.\n    '''\n    words = sentence.split()\n    translated_sentence = ''\n    for word in words:\n        translated_sentence += pig_latin_word(word) +''\n    return translated_sentence\ndef add_zero_to_number(num):\n    '''\n    Write a function to add a leading zero to a number.\n    '''\n    return '0'+str(num)\ndef has_balanced_parens(text):\n    '''\n    Write a function to check whether a string contains balanced parentheses or not.\n    '''\n    for char in text:\n        if char == '(':\n            open_parens_counter += 1\n        elif char == ')':\n            close_parens_counter += 1\n        if close_parens_counter > open_parens_counter:\n            return False\n    return open_parens_counter == close_parens_counter\ndef reverse_string(text):\n    '''\n    Write a function to reverse a string.\n    '''\n    reversed_string = ''\n    for char in text:\n        reversed_string = char + reversed_string\n    return reversed_string\ndef is_palindrome(text):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return text == reverse_string(text)\ndef has_three_consecutive_vowels(text):\n    '''\n    Write a function to check whether a string contains three consecutive vowels or not.\n    '''\n    for i in range(len(text)-2):\n        if text[i] in 'aeiouAEIOU' and text[i+1] in 'aeiouAEIOU' and text[i+2] in 'aeiouAEIOU':\n            return True\n    return False\ndef translate_to_pig_latin(text):\n    '''\n    Write a function to translate a text to pig latin.\n    '''\n    text = text.replace('-','')\n    words = text.split()\n    translated_sentence = ''\n    for word in words:\n        if has_vowels(word):\n            translated_sentence += pig_latin_word(word) +''\n        else:\n            translated_sentence += word +''\n    return translated_sentence\ndef max_occurrences_of_substring(text,substring):\n    '''\n    Write a function to find the maximum number of occurrences of a substring in a string.\n    '''\n    max_count = 0\n    for i in range(len(text) - len(substring) + 1):\n        count = 0\n        for j in range(len(substring)):\n            if text[i+j] == substring[j]:\n                count += 1\n            else:\n                break\n        if count > max_count:\n            max_count = count\n    return max_count\ndef remove_all_occurrences_of_substring(text,substring):\n    '''\n    Write a function to remove all occurrences of a substring from a string.\n    '''\n    return text.replace(substring, '')\ndef reverse_string_by_parts(text):\n    '''\n    Write a function to reverse a string in the following way.\n    - First, we split the string into two equal parts (i.e., left_string and right_string).\n    - Next, we reverse the strings.\n    - Finally, we join the two reversed strings and return the result.\n    '''\n    text = text.split(' ')\n    left_string = text[:int(len(text)/2)]\n    left_string =''.join(left_string[::-1])\n    right_string = text[int(len(text)/2):]\n    right_string =''.join(right_string[::-1])\n    return left_string +'' + right_string\ndef remove_all_occurrences_of_non_vowel(text):\n    '''\n    Write a function to remove all the non-vowels from a string.\n    '''\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char in vowels:\n            result += char\n    return result\ndef remove_all_occurrences_of_vowels(text):\n    '''\n    Write a function to remove all the vowels from a string.\n    '''\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\ndef is_substring(text,substring):\n    '''\n    Write a function to check whether a string is a substring of another string or not.\n    '''\n    return substring in text\ndef remove_all_occurrences_of_substring_from_string(text,substring):\n    '''\n    Write a function to remove all occurrences of a substring from a string.\n    '''\n    while substring in text:\n        text = text.replace(substring, '')\n    return text\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate a matrix by 90 degrees clockwise.\n    '''\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1,n):\n            matrix[i][j],matrix[j][i] = matrix[j][i], matrix[i][j]\n    for i in range(n):\n        matrix[i] = matrix[i][::-1]\n    return matrix\ndef is_rotate_matrix(matrix):\n    '''\n    Write a function to check whether a matrix is a rotate matrix or not.\n    '''\n    if len(matrix) == 0:\n        return True\n    elif len(matrix) == 1:\n        return True\n    else:\n        for row in matrix:\n            if len(row)!= len(matrix):\n                return False\n        return True\ndef rotate_matrix_2(matrix):\n    '''\n    Write a function to rotate a matrix by 90 degrees clockwise.\n    '''\n    n = len(matrix)\n    for i in range(n//2):\n        for j in range(i,n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-j][i]\n            matrix[n-1-j][i] = matrix[n-1-i][n-1-j]\n            matrix[n-1-i][n-1-j] = matrix[j][n-1-i]\n            matrix[j][n-1-i] = temp\n    return matrix\ndef encrypt_affine_cipher(text, a, b):\n    '''\n    Write a function to encrypt a string using affine cipher.\n    '''\n    encrypted_string = ''\n    for c in text:\n        encrypted_string += chr(((a*(ord(c)-ord('A'))+b)%26)+ord('A'))\n    return encrypted_string\ndef decrypt_affine_cipher(text, a, b):\n    '''\n    Write a function to decrypt a string using affine cipher.\n    '''\n    decrypted_string = ''\n    for c in text:\n        decrypted_string += chr((((ord(c)-ord('A'))-b)%26)+or"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    \n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with a single space in the text\n    #replace all whitespaces with "
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result = text.replace(\" \", \"\")\n    return result\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return sum([x == y or x == z or y == z])\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in [x,y,z]:\n        if num == x:\n            count += 1\n        if num == y:\n            count += 1\n        if num == z:\n            count += 1\n    return count\n    \ndef test_unique_numbers():\n    '''\n    Write a python function that returns a list of unique numbers present in the given list of integers.\n    '''\n    \ndef test_count_negatives(numbers):\n    '''\n    Write a python function that returns the number of negative numbers present in the given list.\n    '''\n    \ndef test_numbers_less_than_twenty(numbers):\n    '''\n    Write a python function that returns a list of all the numbers present in the given list that are less than 20.\n    '''\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if(x==y and y==z):\n        print(\"There are three equal numbers: \", x)\n    elif(x==y or y==z):\n        print(\"There are two equal numbers: \", x)\n    else:\n        print(\"There are no equal numbers\")\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # Your code goes here\n    \n    count = 0\n    for i in range(x,y):\n        for j in range(i+1,y):\n            for k in range(j+1,y):\n                if i==j:\n                    if i==k:\n                        count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and x == z:\n        print('3 numbers are equal.')\n    elif x == y or x == z or y == z:\n        print('2 numbers are equal.')\n    else:\n        print('No number is equal.')\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    elif x!=y and x!=z and y!=z:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n    \ndef test_three_equals("
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # Your code goes here\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x==y) and (y==z) and (z==x)\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            return rotations\n        else:\n            rotations+=1\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    for i in range(l-1):\n        if arr[i+1] < arr[i]:\n            return i + 1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def rotation_count(arr):\n        start = 0\n        end = len(arr) - 1\n        while start <= end:\n            mid = start + (end-start)//2\n            if mid < end and arr[mid] > arr[mid+1]:\n                return mid + 1\n            if mid > start and arr[mid] < arr[mid-1]:\n                return mid\n            if arr[start] <= arr[mid]:\n                start = mid + 1\n            else:\n                end = mid - 1\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    pass\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr)-1\n    \n    while start < end:\n        mid = (start+end)//2\n        \n        if arr[mid] > arr[mid+1]:\n            return mid+1\n        \n        if arr[mid] < arr[mid-1]:\n            return mid\n        \n        if arr[start] < arr[mid]:\n            start = mid+1\n            \n        else:\n            end = mid-1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # for i in arr:\n    #     if i > arr[0]:\n    #         rot = i - arr[0]\n    #         break\n    # return rot\n    count = 0\n    for i in range(0, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    if len(arr) <= 1:\n        return rotations\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[left] <= arr[mid]:\n            left = mid + 1\n        else:\n            rotations += mid\n            right = mid - 1\n    \n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotation = 0\n    min_idx = 0\n    for i in range(0, len(arr)):\n        if arr[i] < arr[min_idx]:\n            min_idx = i\n        rotation += 1\n    return rotation\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n;\n    # Check if x is square of any number\n    while (x % 2 == 0) :\n        x = x / 2;\n    # If the above condition doesn't satisfy then return false\n    if (x % 2!= 0) :\n        return False;\n    else :\n        # else x is square of some number\n        while (x % 4 == 0) :\n            x = x / 4;\n        # Check if x is a perfect square\n        if (x == 1) :\n            return True;\n        else :\n            return False;\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    while (x % 2 == 0) :\n        x = x / 2\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2) :\n        while (i > 1) and (x % i == 0) :\n            x = x / i\n            \n        i += 2\n    \n    return (x == 1)\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    start = 1\n    end = n\n    while (start <= end):\n        mid = start + (end - start) // 2\n        if (mid * mid == n):\n            return True\n        elif (mid * mid < n):\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (int(math.sqrt(n)) == math.sqrt(n)) :\n        return 1\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    x = 1\n    while x * x <= n:\n        if x * x == n:\n            return True\n        x += 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Corner Case\n    if (n <= 1) :\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = n ** 0.5\n    return int(root + 0.5) ** 2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sq = int(math.sqrt(n))\n    return sq*sq == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n==0 or n==1):\n        return True\n    s = int(math.sqrt(n))\n    return (s*s == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Let's first find a perfect square root of the given number.\n    root = math.sqrt(n)\n    # Let's now check whether it is a perfect square or not.\n    if int(root + 0.5) ** 2 == n :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod%2==0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    ans = False\n    prod = 1\n    for i in arr:\n        prod *= i\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total = 1\n    for i in arr:\n        total = total * i\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(0, len(arr)):\n        if (i == 0):\n            product = arr[0] * arr[1]\n        else:\n            product *= arr[i]\n    return (product % 2 == 0)\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product%2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    if(prod % 2 == 0):\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % 2 == 0\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_list_sum = 0\n    for l in lists:\n        sum_list = 0\n        for item in l:\n            sum_list = sum_list + item\n        if sum_list > max_list_sum:\n            max_list_sum = sum_list\n            max_list = l\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    for l in lists:\n        if result == []:\n            result = l\n            continue\n        if sum(l) >= sum(result):\n            result = l\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = lists[0]\n    for i in range(1, len(lists)):\n        max_sum_list = compare_list(lists[i], max_sum_list)\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # for item in lists:\n    #     if len(item) == 0:\n    #         return False\n    #\n    # current_sum = 0\n    # current_max = 0\n    # result = []\n    # for item in lists:\n    #     current_sum = sum(item)\n    #     if current_sum > current_max:\n    #         current_max = current_sum\n    #         result = item\n    #\n    # return result\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if lists==[]:\n        return None\n    for i in range(len(lists)):\n        lists[i].append(sum(lists[i]))\n    list_of_sum = sorted(lists, key=lambda x: x[2], reverse=True)\n    return list_of_sum[0][:len(lists[0])]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Let's define a list with all zeros\n    max_sum_list = [0]*len(lists)\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # find the sum of the list and make a list with it\n    total_list = []\n    for lists in lists:\n        total = sum(lists)\n        total_list.append(total)\n    \n    # find which list has the max sum and return its index\n    max_sum = max(total_list)\n    index = total_list.index(max_sum)\n    return index\n    \n    \nprint(max_sum_list([[1, 2], [3, 4], [5, 6]]))\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    result = []\n    for i in lists:\n        if sum(i) > sum(result):\n            result = i\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for list_n in lists:\n        if max_sum < sum(list_n):\n            max_list = list_n\n            max_sum = sum(list_n)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = lists[0]\n    for l in lists:\n        if sum(l) > sum(result):\n            result = l\n    return result\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if(test_str[i].isupper()):\n            current_run += 1\n        else:\n            current_run = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    current_count = 0\n    for i in test_str:\n        if i.isupper():\n            current_count += 1\n            if current_count > max_count:\n                max_count = current_count\n        else:\n            current_count = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max([len(list(g)) for _, g in groupby(test_str) if _.isupper()])\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_value = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_value += 1\n        elif test_str[i].isalpha() and test_str[i].islower():\n            max_value = 0\n        else:\n            max_value = 0\n    return max_value\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # res = 0\n    # for x in test_str:\n    #     if x.isupper():\n    #         res += 1\n    #     else:\n    #         res = 0\n    # return res\n    # using RegEx\n    import re\n    return max(re.findall('[A-Z]', test_str))\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    for i in test_str:\n        if i.isupper():\n            max_len += 1\n        else:\n            max_len = 0\n    return max_len\nprint(max_run_uppercase('aeiouAEIOU'))\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    for i in range(len(test_str)):\n        count = 0\n        for j in range(i, len(test_str)):\n            if test_str[j].isupper():\n                count += 1\n            else:\n                break\n        if count > max:\n            max = count\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    start = 0\n    end = 0\n    max = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            end = end + 1\n        else:\n            if end > max:\n                max = end\n                start = start + 1\n            else:\n                start = start + 1\n                end = 0\n    if end > max:\n        max = end\n        start = start + 1\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    i = 0\n    max = 0\n    for x in test_str:\n        if x.isupper() == True:\n            i = i + 1\n            if i > max:\n                max = i\n        else:\n            i = 0\n    return max\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in nums:\n        if x % 2 == 0:\n            return 0\n        else:\n            return x\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            return i\n    return None\n    "
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return False\n    # return next(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return nums[i]\n    return False\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #return [num for num in nums if num % 2!= 0][0]\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return -1\n    for num in nums:\n        if num % 2 == 1:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    x,y = test_tup\n    if (x,y) in K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    # your code here\n    return (test_tup[0] in K) or (test_tup[1] in K)\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # inp_tup = (1, 2, 3, 4, 5, 6)\n    # K = 4\n    # out_tup = [4, 5, 6]\n    # return out_tup\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup[1])==K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for k in K:\n        if test_tup[1] == k:\n            return 1\n    return 0\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if tup[0] == K:\n            count += 1\n        elif tup[1] == K:\n            count += 1\n    if count >= 2:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if not test_tup:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup in K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    assert test_tup1[0]<test_tup2[0], 'First element in second tuple is greater than its corresponding element in first tuple.'\n    assert test_tup1[1]<test_tup2[1], 'Second element in second tuple is greater than its corresponding element in first tuple.'\n    assert test_tup1[2]<test_tup2[2], 'Third element in second tuple is greater than its corresponding element in first tuple.'\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all([test_tup1[i] < test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if (test_tup1[0] >= test_tup2[0]) and (test_tup1[1] >= test_tup2[1]) and (test_tup1[2] >= test_tup2[2]):\n        return True\n    else:\n        return False\n    \ndef check_greater(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is greater than its corresponding element in the first tuple.\n    '''\n    if (test_tup1[0] <= test_tup2[0]) and (test_tup1[1] <= test_tup2[1]) and (test_tup1[2] <= test_tup2[2]):\n        return True\n    else:\n        return False\n    \ndef check_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is equal to its corresponding element in the first tuple.\n    '''\n    if (test_tup1[0] == test_tup2[0]) and (test_tup1[1] == test_tup2[1]) and (test_tup1[2] == test_tup2[2]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1 < test_tup2\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[i] < test_tup1[i]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # WRITE YOUR BRILLIANT CODE HERE\n    lst1=list(test_tup1)\n    lst2=list(test_tup2)\n    for i in range(len(lst1)):\n        if(lst1[i]>lst2[i]):\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2] and test_tup1[3] < test_tup2[3]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return True if test_tup1[i] < test_tup2[i] else False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    try:\n        if test_tup2[0] < test_tup1[0]:\n            return True\n        elif test_tup2[0] == test_tup1[0]:\n            if test_tup2[1] < test_tup1[1]:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except:\n        return False\n"
    }
]